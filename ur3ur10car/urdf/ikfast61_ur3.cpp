/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2021-05-31 15:36:09.899305
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[0]);
x6=IKsin(j[4]);
x7=IKcos(j[4]);
x8=IKcos(j[3]);
x9=IKsin(j[3]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((0.0819)*x7);
x13=((0.08535)*x5);
x14=((0.0819)*x9);
x15=((0.08535)*x0);
x16=((1.0)*x5);
x17=((1.0)*x9);
x18=((0.21325)*x5);
x19=((1.0)*x7);
x20=((0.0819)*x8);
x21=((1.0)*x8);
x22=((0.24365)*x1);
x23=((1.0)*x0);
x24=((0.21325)*x0);
x25=(x1*x2);
x26=(x3*x4);
x27=(x1*x3);
x28=(x0*x6);
x29=(x2*x4);
x30=(x16*x6);
x31=(x1*x15);
x32=(x23*x27);
x33=(x16*x27);
x34=(x25+x26);
x35=((((-1.0)*x29))+(((1.0)*x27)));
x36=((((-1.0)*x32))+((x0*x29)));
x37=(((x29*x5))+(((-1.0)*x33)));
x38=(x23*((x25+x26)));
x39=(x16*((x25+x26)));
x40=(x37*x8);
x41=((((-1.0)*x17*x35))+(((-1.0)*x21*x34)));
x42=(((x9*(((((1.0)*x25))+(((1.0)*x26))))))+(((-1.0)*x35*x8)));
x43=(((x38*x9))+((x36*x8)));
x44=(x40+((x39*x9)));
x45=(x44*x7);
x46=(((x17*(((((-1.0)*x32))+((x23*x29))))))+(((-1.0)*x21*x38)));
x47=(((x17*(((((-1.0)*x33))+((x16*x29))))))+(((-1.0)*x21*x39)));
eerot[0]=((((-1.0)*x16*x7))+((x6*(((((-1.0)*x17*x38))+(((-1.0)*x21*x36)))))));
eerot[1]=(((x11*(((((-1.0)*x19*x43))+x30))))+((x10*x46)));
eerot[2]=(((x11*x46))+((x10*(((((-1.0)*x30))+((x43*x7)))))));
IkReal x48=((1.0)*x15);
eetrans[0]=(((x0*x22))+(((-1.0)*x12*x5))+((x9*(((((-1.0)*x27*x48))+((x15*x29))))))+((x6*(((((-1.0)*x20*x36))+(((-1.0)*x14*x38))))))+((x8*(((((-1.0)*x26*x48))+(((-1.0)*x25*x48))))))+(((-1.0)*x24*x29))+(((-0.11235)*x5))+((x24*x27)));
eerot[3]=(((x0*x7))+((x6*(((((-1.0)*x17*x39))+(((-1.0)*x21*x37)))))));
eerot[4]=(((x10*x47))+((x11*(((((-1.0)*x19*x44))+(((-1.0)*x23*x6)))))));
eerot[5]=(((x11*x47))+((x10*((x45+x28)))));
IkReal x49=((1.0)*x13);
eetrans[1]=(((x8*(((((-1.0)*x26*x49))+(((-1.0)*x25*x49))))))+((x18*x27))+((x9*(((((-1.0)*x27*x49))+((x13*x29))))))+((x0*x12))+((x22*x5))+(((-1.0)*x18*x29))+(((0.11235)*x0))+((x6*(((((-1.0)*x20*x37))+(((-1.0)*x14*x39)))))));
eerot[6]=(x41*x6);
eerot[7]=(((x10*x42))+((x11*x41*x7)));
eerot[8]=(((x10*x7*((((x34*x8))+((x35*x9))))))+((x11*x42)));
eetrans[2]=((0.1519)+((x6*(((((-1.0)*x20*x34))+(((-1.0)*x14*x35))))))+((x8*(((((0.08535)*x29))+(((-0.08535)*x27))))))+((x9*(((((0.08535)*x25))+(((0.08535)*x26))))))+(((-0.21325)*x26))+(((-0.21325)*x25))+(((-0.24365)*x4)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j10,cj10,sj10,htj10,j10mul,j11,cj11,sj11,htj11,j11mul,j12,cj12,sj12,htj12,j12mul,j13,cj13,sj13,htj13,j13mul,j14,cj14,sj14,htj14,j14mul,j15,cj15,sj15,htj15,j15mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij10[2], _nj10,_ij11[2], _nj11,_ij12[2], _nj12,_ij13[2], _nj13,_ij14[2], _nj14,_ij15[2], _nj15;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j10=numeric_limits<IkReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1; j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1; j14=numeric_limits<IkReal>::quiet_NaN(); _ij14[0] = -1; _ij14[1] = -1; _nj14 = -1; j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r01);
new_r01=((-1.0)*r02);
new_r02=r00;
new_px=((((-0.0819)*r00))+px);
new_r10=((-1.0)*r11);
new_r11=((-1.0)*r12);
new_r12=r10;
new_py=(py+(((-0.0819)*r10)));
new_r20=((-1.0)*r21);
new_r21=((-1.0)*r22);
new_r22=r20;
new_pz=((-0.1519)+pz+(((-0.0819)*r20)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x50=((1.0)*px);
IkReal x51=((1.0)*pz);
IkReal x52=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x52))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x51)));
rxp0_2=((((-1.0)*r10*x50))+((py*r00)));
rxp1_0=((((-1.0)*r21*x52))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x51)));
rxp1_2=((((-1.0)*r11*x50))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x52)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x51)));
rxp2_2=((((-1.0)*r12*x50))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x53=((0.1707)*npx);
IkReal x54=((0.1707)*npy);
IkReal x55=((0.08535)*r22);
IkReal x56=((0.08535)*r21);
IkReal x57=((-0.08535)*r20);
IkReal x58=((-1.0)*r20);
IkReal x59=((-1.0)*rxp0_2);
IkReal x60=((-0.08535)*r21);
IkReal x61=((-1.0)*r21);
IkReal x62=((-1.0)*rxp1_2);
IkReal x63=((-1.0)*npx);
IkReal x64=((-1.0)*r22);
IkReal x65=((-1.0)*npz);
matrixinvcoeffs[0]=x57;
matrixinvcoeffs[1]=x53;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x58;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x59;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x57;
matrixinvcoeffs[19]=x53;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x58;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x59;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x60;
matrixinvcoeffs[33]=x54;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x61;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x62;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x60;
matrixinvcoeffs[51]=x54;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x61;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x62;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x64;
matrixinvcoeffs[76]=x55;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x65;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x55;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x62;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x60;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x62;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x56;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x58;
matrixinvcoeffs[133]=x63;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.08535)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x58;
matrixinvcoeffs[151]=x63;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x57;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x64;
matrixinvcoeffs[165]=x65;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x55;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x64;
matrixinvcoeffs[183]=x65;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.08535)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x61;
matrixinvcoeffs[204]=x56;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x62;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x56;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x63;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x57;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x58;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x57;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x59;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_3=matrixinvcoeffs[54], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_1=matrixinvcoeffs[23], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_1=matrixinvcoeffs[27], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x66=pz*pz;
IkReal x67=pp*pp;
IkReal x68=((0.1707)*pz);
IkReal x69=(pp*r21);
IkReal x70=((0.1707)*rxp1_2);
IkReal x71=(gclwh13_1*pp);
IkReal x72=(gclwh9_0*r20);
IkReal x73=(npy*pz);
IkReal x74=((4.561674317235e-5)*r21);
IkReal x75=(npz*pz);
IkReal x76=(gclwh13_15*r21);
IkReal x77=((0.0072846225)*pz);
IkReal x78=(gclwh11_13*r22);
IkReal x79=((0.014569245)*r21);
IkReal x80=(gclwh8_12*r20);
IkReal x81=(gclwh15_1*r20);
IkReal x82=((2.0)*pp);
IkReal x83=(pp*r20);
IkReal x84=(pp*r22);
IkReal x85=(gclwh14_2*pz);
IkReal x86=(gclwh6_11*r21);
IkReal x87=((0.3414)*rxp0_2);
IkReal x88=(npx*pz);
IkReal x89=((0.001068933642)*rxp2_2);
IkReal x90=(gclwh15_10*r20);
IkReal x91=((0.853)*pp);
IkReal x92=(gclwh9_13*rxp0_2);
IkReal x93=(gclwh2_0*r21);
IkReal x94=((0.019178145)*rxp0_2);
IkReal x95=((0.2247)*gclwh15_15);
IkReal x96=(gclwh5_9*r22);
IkReal x97=(gclwh8_2*rxp0_2);
IkReal x98=((0.6828)*rxp2_2);
IkReal x99=((0.014569245)*rxp1_2);
IkReal x100=((0.15598566)*rxp0_2);
IkReal x101=(gclwh14_3*rxp0_2);
IkReal x102=(gclwh13_0*pz);
IkReal x103=(gclwh11_10*r22);
IkReal x104=(gclwh10_11*r22);
IkReal x105=((1.0)*pz);
IkReal x106=(gclwh13_0*rxp1_2);
IkReal x107=(gclwh4_14*rxp2_2);
IkReal x108=((0.1707)*rxp2_2);
IkReal x109=((0.00518928)*rxp1_2);
IkReal x110=(gclwh5_0*pz);
IkReal x111=((0.00155960496929498)*r21);
IkReal x112=(gclwh4_3*r22);
IkReal x113=(gclwh14_8*rxp0_2);
IkReal x114=((0.00332834402025)*r22);
IkReal x115=(gclwh4_2*r22);
IkReal x116=(gclwh12_14*rxp1_2);
IkReal x117=(gclwh10_2*r22);
IkReal x118=((0.000818427337875)*r20);
IkReal x119=((0.001068933642)*rxp1_2);
IkReal x120=((0.01037856)*rxp0_2);
IkReal x121=(gclwh15_9*r20);
IkReal x122=(gclwh5_10*r22);
IkReal x123=(gclwh4_8*rxp2_2);
IkReal x124=(gclwh9_10*r20);
IkReal x125=((4.0)*gclwh11_10);
IkReal x126=(gclwh6_12*r21);
IkReal x127=((0.00310689149625)*r20);
IkReal x128=(gclwh13_9*r21);
IkReal x129=(gclwh12_8*r21);
IkReal x130=((0.3414)*rxp1_2);
IkReal x131=((2.0)*gclwh7_10);
IkReal x132=((0.07280355)*rxp1_2);
IkReal x133=(gclwh8_2*r20);
IkReal x134=(gclwh4_14*r22);
IkReal x135=((0.6828)*rxp1_2);
IkReal x136=(gclwh15_15*rxp0_2);
IkReal x137=((4.0)*gclwh8_11);
IkReal x138=(gclwh7_0*r21);
IkReal x139=(gclwh5_15*rxp2_2);
IkReal x140=(gclwh15_9*rxp0_2);
IkReal x141=(gclwh4_2*rxp2_2);
IkReal x142=(gclwh14_11*r20);
IkReal x143=((0.019178145)*rxp1_2);
IkReal x144=((4.561674317235e-5)*r22);
IkReal x145=((4.0)*gclwh9_10);
IkReal x146=((0.6828)*rxp0_2);
IkReal x147=(gclwh5_9*rxp2_2);
IkReal x148=(gclwh15_1*rxp0_2);
IkReal x149=(gclwh9_13*r20);
IkReal x150=(gclwh6_2*r21);
IkReal x151=((0.00310689149625)*r21);
IkReal x152=((0.019178145)*rxp2_2);
IkReal x153=((0.0304)*pp);
IkReal x154=((0.2247)*gclwh13_15);
IkReal x155=((0.000818427337875)*r22);
IkReal x156=((0.00163685467575)*r20);
IkReal x157=((0.000818427337875)*r21);
IkReal x158=(gclwh5_0*r22);
IkReal x159=((0.1707)*rxp0_2);
IkReal x160=((0.08318211)*rxp1_2);
IkReal x161=((2.0)*gclwh6_11);
IkReal x162=(gclwh1_3*r20);
IkReal x163=((0.036546103557)*rxp2_2);
IkReal x164=((4.0)*gclwh10_11);
IkReal x165=((0.036546103557)*rxp1_2);
IkReal x166=((0.1707)*pp);
IkReal x167=(gclwh11_13*rxp2_2);
IkReal x168=((0.3414)*rxp2_2);
IkReal x169=(gclwh10_12*rxp2_2);
IkReal x170=((0.0072846225)*r21);
IkReal x171=(gclwh4_8*r22);
IkReal x172=((0.07280355)*rxp0_2);
IkReal x173=((2.0)*gclwh12_11);
IkReal x174=(gclwh11_0*r22);
IkReal x175=(gclwh14_8*r20);
IkReal x176=(gclwh14_14*rxp0_2);
IkReal x177=(gclwh7_13*r21);
IkReal x178=(gclwh11_0*pz);
IkReal x179=(gclwh10_2*pz);
IkReal x180=(gclwh12_2*rxp1_2);
IkReal x181=(gclwh5_0*rxp2_2);
IkReal x182=((0.07280355)*rxp2_2);
IkReal x183=((0.4569)*pp);
IkReal x184=(gclwh4_11*r22);
IkReal x185=((4.0)*gclwh6_11);
IkReal x186=(gclwh8_11*r20);
IkReal x187=((0.2247)*gclwh5_15);
IkReal x188=((4.0)*gclwh7_10);
IkReal x189=((2.0)*gclwh13_10);
IkReal x190=((0.07799283)*rxp1_2);
IkReal x191=(gclwh5_1*r22);
IkReal x192=((0.2247)*gclwh4_14);
IkReal x193=(gclwh10_12*r22);
IkReal x194=((0.2247)*gclwh14_14);
IkReal x195=((0.2247)*gclwh12_14);
IkReal x196=(gclwh14_3*r20);
IkReal x197=(gclwh13_15*rxp1_2);
IkReal x198=(gclwh11_1*r22);
IkReal x199=(gclwh0_1*r20);
IkReal x200=(gclwh8_12*rxp0_2);
IkReal x201=(gclwh14_14*x94);
IkReal x202=(gclwh6_5*x157);
IkReal x203=((0.019178145)*x116);
IkReal x204=((0.019178145)*x107);
IkReal x205=(gclwh10_5*x155);
IkReal x206=(gclwh8_5*x118);
IkReal x207=((0.014569245)*x123);
IkReal x208=((0.0072846225)*x86);
IkReal x209=(gclwh12_8*x99);
IkReal x210=(gclwh4_11*x108);
IkReal x211=(gclwh12_11*x70);
IkReal x212=(gclwh14_11*x159);
IkReal x213=((0.0072846225)*x104);
IkReal x214=((0.014569245)*x113);
IkReal x215=((0.0072846225)*x186);
IkReal x216=(gclwh13_9*x99);
IkReal x217=((0.014569245)*x147);
IkReal x218=((0.0072846225)*x103);
IkReal x219=(gclwh15_10*x159);
IkReal x220=((0.0072846225)*x124);
IkReal x221=(gclwh13_10*x70);
IkReal x222=(gclwh7_10*x170);
IkReal x223=((0.014569245)*x140);
IkReal x224=(gclwh5_10*x108);
IkReal x225=(gclwh15_15*x94);
IkReal x226=(gclwh7_7*x157);
IkReal x227=(gclwh13_15*x143);
IkReal x228=((0.019178145)*x139);
IkReal x229=(gclwh11_7*x155);
IkReal x230=(gclwh9_7*x118);
IkReal x231=(gclwh8_5*x94);
IkReal x232=(gclwh10_5*x152);
IkReal x233=(gclwh14_14*x118);
IkReal x234=(gclwh6_5*x143);
IkReal x235=(gclwh12_14*x157);
IkReal x236=((0.000818427337875)*x134);
IkReal x237=(gclwh8_11*x159);
IkReal x238=(gclwh10_11*x108);
IkReal x239=(gclwh12_11*x170);
IkReal x240=((0.000621742530375)*x171);
IkReal x241=((0.0072846225)*x184);
IkReal x242=((0.000621742530375)*x129);
IkReal x243=((0.000621742530375)*x175);
IkReal x244=(gclwh6_11*x70);
IkReal x245=((0.0072846225)*x142);
IkReal x246=(gclwh9_10*x159);
IkReal x247=((0.000621742530375)*x121);
IkReal x248=((0.0072846225)*x122);
IkReal x249=(gclwh11_10*x108);
IkReal x250=(gclwh13_10*x170);
IkReal x251=((0.000621742530375)*x128);
IkReal x252=((0.0072846225)*x90);
IkReal x253=(gclwh7_10*x70);
IkReal x254=((0.000621742530375)*x96);
IkReal x255=((0.000818427337875)*x76);
IkReal x256=(gclwh5_15*x155);
IkReal x257=(gclwh7_7*x143);
IkReal x258=(gclwh15_15*x118);
IkReal x259=(gclwh11_7*x152);
IkReal x260=(gclwh9_7*x94);
IkReal x261=(gclwh14_11*x87);
IkReal x262=((0.014569245)*x104);
IkReal x263=((0.014569245)*x186);
IkReal x264=((0.03835629)*x176);
IkReal x265=((0.03835629)*x107);
IkReal x266=((0.03835629)*x116);
IkReal x267=(gclwh4_11*x168);
IkReal x268=(gclwh12_11*x130);
IkReal x269=(gclwh6_11*x79);
IkReal x270=((0.03835629)*x139);
IkReal x271=((0.03835629)*x197);
IkReal x272=((0.03835629)*x136);
IkReal x273=(gclwh15_10*x87);
IkReal x274=((0.014569245)*x124);
IkReal x275=((0.014569245)*x103);
IkReal x276=((0.0608)*x73);
IkReal x277=((2.0)*x66);
IkReal x278=(r21*x67);
IkReal x279=((1.0)*x67);
IkReal x280=((0.2247)*gclwh10_5*x75);
IkReal x281=((0.2247)*gclwh8_5*x88);
IkReal x282=((0.11235)*gclwh6_5*x69);
IkReal x283=((0.11235)*gclwh8_5*x83);
IkReal x284=((0.2247)*gclwh6_5*x73);
IkReal x285=((0.11235)*gclwh10_5*x84);
IkReal x286=(gclwh12_3*pp*x70);
IkReal x287=(gclwh14_2*rxp0_2*x68);
IkReal x288=(gclwh6_3*x278);
IkReal x289=(x117*x77);
IkReal x290=((2.0)*gclwh10_11*x75);
IkReal x291=((2.0)*gclwh8_11*x88);
IkReal x292=(x179*x84);
IkReal x293=(gclwh4_3*pp*x108);
IkReal x294=(x133*x77);
IkReal x295=(gclwh8_2*pz*x83);
IkReal x296=(x150*x77);
IkReal x297=(x161*x73);
IkReal x298=(x180*x68);
IkReal x299=(x141*x68);
IkReal x300=(x101*x166);
IkReal x301=(x70*x71);
IkReal x302=(gclwh7_1*x278);
IkReal x303=(x174*x77);
IkReal x304=(gclwh15_0*rxp0_2*x68);
IkReal x305=(x178*x84);
IkReal x306=(gclwh5_1*pp*x108);
IkReal x307=(x131*x73);
IkReal x308=(x72*x77);
IkReal x309=(pp*pz*x72);
IkReal x310=((2.0)*gclwh11_10*x75);
IkReal x311=((2.0)*gclwh9_10*x88);
IkReal x312=(x148*x166);
IkReal x313=(x106*x68);
IkReal x314=(x181*x68);
IkReal x315=(x138*x77);
IkReal x316=((0.2247)*gclwh9_7*x88);
IkReal x317=((0.11235)*gclwh7_7*x69);
IkReal x318=((0.2247)*gclwh11_7*x75);
IkReal x319=((0.11235)*gclwh11_7*x84);
IkReal x320=((0.2247)*gclwh7_7*x73);
IkReal x321=((0.11235)*gclwh9_7*x83);
IkReal x322=(x195*x73);
IkReal x323=((0.11235)*gclwh14_14*x83);
IkReal x324=(x192*x75);
IkReal x325=((0.11235)*gclwh12_14*x69);
IkReal x326=(x194*x88);
IkReal x327=((0.11235)*gclwh4_14*x84);
IkReal x328=(gclwh14_8*npx*x68);
IkReal x329=(x83*x85);
IkReal x330=(gclwh12_3*x278);
IkReal x331=(gclwh3_2*r21*x77);
IkReal x332=((0.08535)*gclwh12_8*x69);
IkReal x333=(gclwh6_2*rxp1_2*x68);
IkReal x334=(gclwh3_3*x278);
IkReal x335=(x162*x67);
IkReal x336=((0.08535)*gclwh4_8*x84);
IkReal x337=(gclwh14_2*r20*x77);
IkReal x338=((2.0)*gclwh14_11*x88);
IkReal x339=(x112*x67);
IkReal x340=(gclwh1_2*r20*x77);
IkReal x341=(gclwh12_8*npy*x68);
IkReal x342=(gclwh4_8*npz*x68);
IkReal x343=(x68*x97);
IkReal x344=((2.0)*gclwh4_11*x75);
IkReal x345=((0.08535)*gclwh14_8*x83);
IkReal x346=(gclwh6_3*pp*x70);
IkReal x347=(gclwh10_2*rxp2_2*x68);
IkReal x348=(x115*x77);
IkReal x349=(gclwh12_2*r21*x77);
IkReal x350=(x173*x73);
IkReal x351=(gclwh13_0*r21*x77);
IkReal x352=(x67*x81);
IkReal x353=((0.08535)*gclwh15_9*x83);
IkReal x354=(x110*x84);
IkReal x355=(x102*x69);
IkReal x356=(x77*x93);
IkReal x357=(gclwh0_0*r20*x77);
IkReal x358=(gclwh9_0*rxp0_2*x68);
IkReal x359=((2.0)*gclwh15_10*x88);
IkReal x360=(x158*x77);
IkReal x361=(gclwh2_1*x278);
IkReal x362=(gclwh5_9*npz*x68);
IkReal x363=(gclwh7_1*pp*x70);
IkReal x364=(gclwh11_0*rxp2_2*x68);
IkReal x365=(gclwh13_9*npy*x68);
IkReal x366=(x199*x67);
IkReal x367=((0.08535)*gclwh5_9*x84);
IkReal x368=(gclwh15_9*npx*x68);
IkReal x369=((0.08535)*gclwh13_9*x69);
IkReal x370=(gclwh11_1*pp*x108);
IkReal x371=((2.0)*gclwh5_10*x75);
IkReal x372=(x189*x73);
IkReal x373=(gclwh7_0*rxp1_2*x68);
IkReal x374=(gclwh15_0*r20*x77);
IkReal x375=(x88*x95);
IkReal x376=((0.11235)*gclwh5_15*x84);
IkReal x377=((0.11235)*gclwh13_15*x69);
IkReal x378=(x154*x73);
IkReal x379=(x187*x75);
IkReal x380=((0.11235)*gclwh15_15*x83);
IkReal x381=(x186*x82);
IkReal x382=(x104*x82);
IkReal x383=(x185*x73);
IkReal x384=(x137*x88);
IkReal x385=(x161*x69);
IkReal x386=(x164*x75);
IkReal x387=(x103*x82);
IkReal x388=(x188*x73);
IkReal x389=(x124*x82);
IkReal x390=(gclwh6_2*npy*x277);
IkReal x391=(gclwh6_3*x73*x82);
IkReal x392=(gclwh6_2*x105*x69);
IkReal x393=(gclwh10_2*npz*x277);
IkReal x394=(gclwh8_2*npx*x277);
IkReal x395=(gclwh11_1*x75*x82);
IkReal x396=(gclwh7_0*npy*x277);
IkReal x397=(gclwh9_0*npx*x277);
IkReal x398=(x198*x279);
IkReal x399=(gclwh7_1*x73*x82);
IkReal x400=(gclwh11_0*npz*x277);
IkReal x401=(gclwh7_0*x105*x69);
IkReal x402=(gclwh12_2*npy*x277);
IkReal x403=(gclwh3_2*npy*x277);
IkReal x404=(gclwh1_2*npx*x277);
IkReal x405=(gclwh14_3*x82*x88);
IkReal x406=(gclwh4_2*npz*x277);
IkReal x407=(gclwh4_3*x75*x82);
IkReal x408=(gclwh12_2*x105*x69);
IkReal x409=(gclwh1_2*x105*x83);
IkReal x410=(gclwh3_3*x73*x82);
IkReal x411=(gclwh4_2*x105*x84);
IkReal x412=(gclwh1_3*x82*x88);
IkReal x413=(gclwh3_2*x105*x69);
IkReal x414=(gclwh12_3*x73*x82);
IkReal x415=(gclwh14_2*npx*x277);
IkReal x416=(x196*x279);
IkReal x417=(gclwh0_0*npx*x277);
IkReal x418=(gclwh2_0*npy*x277);
IkReal x419=(gclwh5_1*x75*x82);
IkReal x420=((2.0)*x71*x73);
IkReal x421=(gclwh15_0*npx*x277);
IkReal x422=(gclwh2_1*x73*x82);
IkReal x423=(gclwh0_1*x82*x88);
IkReal x424=(gclwh5_0*npz*x277);
IkReal x425=(gclwh13_0*npy*x277);
IkReal x426=(gclwh0_0*x105*x83);
IkReal x427=(gclwh15_0*x105*x83);
IkReal x428=(gclwh2_0*x105*x69);
IkReal x429=((1.0)*gclwh13_1*x278);
IkReal x430=(x191*x279);
IkReal x431=(gclwh15_1*x82*x88);
IkReal x432=(x228+x227);
IkReal x433=(x232+x231);
IkReal x434=(x270+x271);
IkReal x435=(x204+x203);
IkReal x436=(x265+x266);
IkReal x437=(x259+x260);
IkReal x438=(x212+x213+x215+x297);
IkReal x439=(x307+x218+x219+x220);
IkReal x440=(x350+x344+x245+x244);
IkReal x441=(x372+x371+x252+x253);
IkReal x442=(x324+x322+x323+x233);
IkReal x443=(x202+x282+x281+x280);
IkReal x444=(x380+x379+x378+x258);
IkReal x445=(x318+x317+x316+x226);
IkReal x446=(x338+x238+x239+x237+x241);
IkReal x447=(x359+x250+x246+x249+x248);
IkReal x448=(x311+x310+x221+x222+x224);
IkReal x449=(x210+x211+x208+x290+x291);
IkReal x450=(x320+x321+x319+x229+x230);
IkReal x451=(x206+x205+x285+x284+x283);
IkReal x452=(x325+x326+x327+x236+x235);
IkReal x453=(x377+x376+x375+x255+x256);
IkReal x454=(x386+x384+x385+x267+x269+x268);
IkReal x455=(((gclwh7_10*x79))+((x131*x69))+((gclwh5_10*x168))+((x145*x88))+((x125*x75))+((gclwh13_10*x130)));
IkReal x456=(x382+x383+x381+x261+x263+x262);
IkReal x457=(x387+x388+x389+x274+x275+x273);
IkReal x458=(x300+x394+x391+x393+x392+x214+x298+x299+x296);
IkReal x459=(x390+x207+x209+x292+x293+x294+x295+x289+x288+x287+x286);
IkReal x460=(x315+x314+x313+x312+x397+x399+x398+x223+x401+x400);
IkReal x461=(x308+x309+x306+x304+x305+x302+x303+x301+x395+x396+x216+x217);
IkReal x462=(x374+x373+x370+x368+x369+x367+x254+x251+x429+x428+x427+x426+x425+x424+x423+x422+x430+x431);
IkReal x463=(x339+x333+x332+x331+x330+x337+x336+x335+x334+x328+x329+x340+x242+x240+x403+x402+x405+x404+x406+x68);
IkReal x464=(x342+x343+x341+x346+x347+x345+x348+x349+x243+x407+x409+x408+x412+x413+x410+x411+x416+x414+x415);
IkReal x465=(x351+x353+x352+x355+x354+x357+x356+x358+x360+x361+x362+x363+x364+x365+x366+x247+x417+x418+x419+x421+x420+x68);
op[0]=((((-1.0)*x183*x80))+(((0.9138)*gclwh10_12*x75))+(((-0.4569)*gclwh10_12*x84))+(((0.9138)*gclwh8_12*x88))+(((-1.0)*gclwh10_12*x114))+(((0.4569)*gclwh6_12*x69))+(((-1.0)*x201))+(((-1.0)*gclwh12_8*x190))+(((-1.0)*x451))+x435+x443+(((0.07799283)*x113))+(((0.00332834402025)*x126))+(((-0.00332834402025)*x80))+(((-0.9138)*gclwh6_12*x73))+(((-0.07799283)*x123)));
op[1]=((((-1.0)*gclwh12_3*x165))+(((-1.0)*x449))+(((-0.2068108875)*gclwh6_3*x69))+(((0.036546103557)*x101))+(((-1.0)*gclwh6_11*x69))+(((-1.0)*x458))+(((-1.0)*gclwh6_3*x111))+x438+x459+(((0.42819102)*gclwh6_3*x73))+(((-1.0)*gclwh4_3*x163))+((gclwh8_11*x83))+((gclwh10_11*x84)));
op[2]=((-0.09583455)+(((-1.0)*x454))+x456);
op[3]=((((-0.08318211)*x113))+((gclwh8_2*x127))+(((-1.0)*x436))+(((-0.07280355)*x141))+(((-1.0)*gclwh12_2*x132))+(((-0.00310689149625)*x150))+(((-0.853)*gclwh10_2*x75))+(((0.08318211)*x123))+(((-0.853)*gclwh8_2*x88))+x264+(((0.4265)*gclwh10_2*x84))+(((0.00310689149625)*x117))+((gclwh12_8*x160))+(((0.853)*gclwh6_2*x73))+((gclwh14_2*x172))+(((-0.4265)*gclwh6_2*x69))+(((0.4265)*gclwh8_2*x83)));
op[4]=((((-1.0)*x435))+(((-0.0304)*gclwh10_12*x84))+((gclwh12_8*x109))+(((0.0304)*gclwh6_12*x69))+(((-1.0)*x153*x80))+(((0.00518928)*x123))+(((0.0608)*gclwh8_12*x88))+(((-0.000221452524)*x80))+(((-0.000221452524)*x193))+(((-1.0)*x451))+x201+x443+(((-0.00518928)*x113))+(((-1.0)*gclwh6_12*x276))+(((0.000221452524)*x126))+(((0.0608)*gclwh10_12*x75)));
op[5]=((((0.0010225625)*gclwh6_3*x69))+(((-1.0)*x438))+(((-1.0)*gclwh4_3*x89))+(((-1.0)*gclwh8_11*x83))+(((-1.0)*gclwh10_11*x84))+(((-1.0)*x458))+x449+x459+(((-1.0)*gclwh6_3*x74))+(((0.001068933642)*x101))+(((-1.0)*gclwh12_3*x119))+((gclwh6_11*x69))+(((0.01252412)*gclwh6_3*x73)));
op[6]=((((-1.0)*x439))+(((0.42819102)*gclwh7_1*x73))+(((-1.0)*gclwh5_1*x163))+((gclwh7_10*x69))+(((-1.0)*gclwh7_1*x111))+(((-1.0)*gclwh13_1*x165))+(((-1.0)*x460))+(((0.2068108875)*gclwh11_1*x84))+x448+x461+(((-0.2068108875)*gclwh7_1*x69))+(((-1.0)*gclwh9_10*x83))+(((-0.42819102)*gclwh11_1*x75))+(((-1.0)*gclwh11_10*x84))+(((0.036546103557)*x148))+(((0.00155960496929498)*x198)));
op[7]=((((0.4569)*gclwh7_13*x69))+(((-1.0)*gclwh13_9*x190))+(((-0.4569)*gclwh9_13*x83))+(((0.07799283)*x140))+(((-1.0)*x183*x78))+(((0.00332834402025)*x177))+(((-1.0)*x450))+(((-0.00332834402025)*x78))+x432+x445+(((-0.00332834402025)*x149))+(((0.9138)*gclwh11_13*x75))+(((0.9138)*gclwh9_13*x88))+(((-0.07799283)*x147))+(((-1.0)*x225))+(((-0.9138)*gclwh7_13*x73)));
op[8]=((((0.4265)*gclwh11_0*x84))+(((-0.07280355)*x181))+(((0.853)*gclwh7_0*x73))+(((0.00310689149625)*x72))+(((-0.4265)*gclwh7_0*x69))+(((0.08318211)*x140))+(((-0.853)*gclwh11_0*x75))+(((-0.08318211)*x147))+(((-1.0)*gclwh13_9*x160))+(((-0.07280355)*x106))+((gclwh15_0*x172))+x434+(((0.00310689149625)*x174))+(((-1.0)*x272))+(((-0.853)*gclwh9_0*x88))+(((-0.00310689149625)*x138))+(((0.4265)*pp*x72)));
op[9]=((-0.09583455)+(((-1.0)*x455))+x457);
op[10]=((((-1.0)*gclwh7_1*x74))+(((-1.0)*x448))+(((-1.0)*gclwh13_1*x119))+(((0.0010225625)*gclwh7_1*x69))+(((-0.01252412)*gclwh11_1*x75))+(((-1.0)*x460))+(((-1.0)*gclwh7_10*x69))+((gclwh11_1*x144))+(((-1.0)*gclwh5_1*x89))+x439+x461+(((0.01252412)*gclwh7_1*x73))+((gclwh11_10*x84))+((gclwh9_10*x83))+(((0.001068933642)*x148))+(((-0.0010225625)*gclwh11_1*x84)));
op[11]=((((-0.00518928)*x140))+(((-1.0)*x432))+(((0.00518928)*x147))+(((-0.000221452524)*x149))+(((-1.0)*x450))+x225+x445+(((0.0608)*gclwh11_13*x75))+(((-1.0)*gclwh7_13*x276))+(((0.0304)*gclwh7_13*x69))+((gclwh13_9*x109))+(((0.0608)*gclwh9_13*x88))+(((-1.0)*x153*x78))+(((-0.000221452524)*x78))+(((-0.0304)*gclwh9_13*x83))+(((0.000221452524)*x177)));
op[12]=((((-0.00332834402025)*x129))+(((-0.9138)*gclwh14_8*x88))+(((-1.0)*x442))+(((-0.4569)*gclwh4_8*x84))+(((-1.0)*gclwh6_12*x190))+(((-1.0)*gclwh4_8*x114))+(((0.9138)*gclwh4_8*x75))+(((-0.4569)*gclwh12_8*x69))+(((0.07799283)*x169))+(((0.00332834402025)*x175))+(((-1.0)*x234))+x433+x452+(((0.4569)*gclwh14_8*x83))+(((0.07799283)*x200))+(((0.9138)*gclwh12_8*x73)));
op[13]=((-0.2213801325)+(((-0.2068108875)*gclwh12_3*x69))+(((-1.0)*x446))+(((0.42819102)*gclwh12_3*x73))+(((-1.0)*gclwh12_11*x69))+(((-1.0)*gclwh4_11*x84))+((gclwh6_3*x165))+((gclwh3_3*x111))+(((-0.2213801325)*gclwh3_3*x69))+(((-1.0)*x464))+((gclwh14_11*x83))+(((-0.2213801325)*gclwh1_3*x83))+(((0.42819102)*gclwh4_3*x75))+(((0.42819102)*gclwh3_3*x73))+x440+x463+(((-0.00155960496929498)*x112))+(((-1.0)*gclwh12_3*x111))+(((0.2068108875)*gclwh14_3*x83))+(((-0.2068108875)*gclwh4_3*x84))+(((-0.42819102)*gclwh14_3*x88))+(((0.42819102)*gclwh1_3*x88))+(((0.00155960496929498)*x162))+(((0.00155960496929498)*x196)));
op[14]=((-0.053024565)+((gclwh6_11*x130))+(((-1.0)*gclwh12_11*x79))+(((-0.014569245)*x184))+(((4.0)*gclwh4_11*x75))+(((-1.0)*x173*x69))+(((0.014569245)*x142))+(((-1.0)*x184*x82))+((x142*x82))+(((-1.0)*gclwh8_11*x87))+(((4.0)*gclwh12_11*x73))+(((-4.0)*gclwh14_11*x88))+(((-1.0)*gclwh10_11*x168)));
op[15]=((((-0.9746)*gclwh12_8*x73))+(((-0.4265)*gclwh4_2*x84))+(((-0.00310689149625)*x115))+((gclwh14_14*x156))+(((-0.4265)*gclwh1_2*x83))+(((0.4265)*gclwh14_2*x83))+(((-1.0)*gclwh12_2*x151))+(((0.4873)*gclwh4_8*x84))+(((-0.00354979654425)*x175))+((gclwh6_2*x132))+(((0.853)*gclwh3_2*x73))+(((0.853)*gclwh1_2*x88))+(((-0.853)*npx*x85))+(((-0.4265)*gclwh12_2*x69))+((gclwh14_2*x127))+(((-0.4265)*gclwh3_2*x69))+(((-1.0)*x192*x84))+(((0.4494)*gclwh4_14*x75))+(((-0.4873)*gclwh14_8*x83))+((x194*x83))+(((0.4873)*gclwh12_8*x69))+(((-1.0)*x195*x69))+(((-0.4494)*gclwh14_14*x88))+(((-0.07280355)*x97))+(((0.853)*gclwh12_2*x73))+(((0.9746)*gclwh14_8*x88))+(((-1.0)*gclwh10_2*x182))+(((0.00354979654425)*x171))+(((-0.9746)*gclwh4_8*x75))+(((-0.00163685467575)*gclwh12_14*r21))+((gclwh3_2*x151))+(((0.853)*gclwh4_2*x75))+(((-0.00163685467575)*x134))+((gclwh1_2*x127))+(((0.00354979654425)*x129))+(((0.4494)*gclwh12_14*x73)));
op[16]=((((-0.0608)*gclwh4_8*x75))+(((-0.000221452524)*x175))+(((-1.0)*gclwh12_8*x276))+(((-1.0)*gclwh6_12*x109))+(((0.0304)*gclwh12_8*x69))+(((-1.0)*x452))+(((0.0608)*gclwh14_8*x88))+(((0.0304)*gclwh4_8*x84))+(((-1.0)*x234))+x433+x442+(((0.000221452524)*x129))+(((-0.0304)*gclwh14_8*x83))+(((0.00518928)*x200))+(((0.000221452524)*x171))+(((0.00518928)*x169)));
op[17]=((0.0135466825)+(((-4.561674317235e-5)*x112))+((gclwh3_3*x74))+(((-1.0)*x440))+(((-0.0135466825)*gclwh1_3*x83))+(((0.01252412)*gclwh12_3*x73))+(((-1.0)*gclwh14_11*x83))+(((-0.01252412)*gclwh14_3*x88))+(((-1.0)*x464))+(((0.01252412)*gclwh4_3*x75))+((gclwh4_11*x84))+(((4.561674317235e-5)*x196))+(((0.01252412)*gclwh1_3*x88))+(((4.561674317235e-5)*x162))+x446+x463+((gclwh6_3*x119))+(((-1.0)*gclwh12_3*x74))+(((-0.0135466825)*gclwh3_3*x69))+(((0.0010225625)*gclwh4_3*x84))+(((0.0010225625)*gclwh12_3*x69))+(((0.01252412)*gclwh3_3*x73))+((gclwh12_11*x69))+(((-0.0010225625)*gclwh14_3*x83)));
op[18]=((0.2213801325)+((gclwh15_10*x83))+(((-1.0)*x447))+((gclwh2_1*x111))+(((-1.0)*gclwh5_10*x84))+((gclwh13_1*x111))+(((0.42819102)*gclwh0_1*x88))+(((0.42819102)*gclwh2_1*x73))+((gclwh11_1*x163))+(((0.2068108875)*gclwh13_1*x69))+(((-1.0)*x462))+(((-1.0)*gclwh7_1*x165))+(((0.42819102)*gclwh15_1*x88))+(((0.2068108875)*gclwh5_1*x84))+x441+x465+(((-0.2213801325)*gclwh2_1*x69))+(((-0.2213801325)*gclwh0_1*x83))+(((-1.0)*gclwh13_10*x69))+(((-0.00155960496929498)*x81))+(((-0.42819102)*gclwh13_1*x73))+(((-0.42819102)*gclwh5_1*x75))+(((-0.2068108875)*pp*x81))+(((0.00155960496929498)*x191))+(((0.00155960496929498)*x199)));
op[19]=((((-0.00332834402025)*x121))+(((-1.0)*x437))+(((-0.9138)*gclwh5_9*x75))+(((0.4569)*gclwh5_9*x84))+(((-0.07799283)*x92))+((gclwh7_13*x190))+(((-1.0)*x453))+x257+x444+(((-0.9138)*gclwh13_9*x73))+(((0.00332834402025)*x96))+(((-0.07799283)*x167))+(((0.4569)*gclwh13_9*x69))+(((0.00332834402025)*x128))+(((-0.4569)*gclwh15_9*x83))+(((0.9138)*gclwh15_9*x88)));
op[20]=((((0.00354979654425)*x96))+(((-0.00354979654425)*x121))+(((-0.4873)*gclwh15_9*x83))+((gclwh0_0*x127))+(((-0.853)*gclwh5_0*x75))+(((0.00310689149625)*x93))+(((-1.0)*gclwh7_0*x132))+(((0.4494)*gclwh5_15*x75))+(((0.4873)*gclwh5_9*x84))+(((0.4265)*gclwh13_0*x69))+(((-0.00163685467575)*gclwh5_15*r22))+(((0.4494)*gclwh13_15*x73))+(((-0.9746)*gclwh13_9*x73))+(((-0.00163685467575)*x76))+(((-0.9746)*gclwh5_9*x75))+(((-1.0)*gclwh15_0*x127))+(((-0.4265)*gclwh15_0*x83))+(((-0.4494)*gclwh15_15*x88))+(((-0.4265)*gclwh0_0*x83))+(((0.853)*gclwh0_0*x88))+(((-1.0)*x154*x69))+((gclwh15_15*x156))+(((0.4873)*gclwh13_9*x69))+(((0.4265)*gclwh5_0*x84))+(((-0.853)*gclwh13_0*x73))+(((0.9746)*gclwh15_9*x88))+((x83*x95))+(((0.00310689149625)*x158))+(((0.00354979654425)*x128))+((gclwh9_0*x172))+((gclwh13_0*x151))+(((0.853)*gclwh15_0*x88))+(((-1.0)*x187*x84))+(((0.853)*gclwh2_0*x73))+((gclwh11_0*x182))+(((-0.4265)*gclwh2_0*x69)));
op[21]=((-0.053024565)+(((-1.0)*x82*x90))+((x189*x69))+((gclwh11_10*x168))+(((4.0)*gclwh15_10*x88))+(((0.014569245)*x122))+((gclwh13_10*x79))+(((-1.0)*gclwh7_10*x130))+(((-4.0)*gclwh13_10*x73))+(((-0.014569245)*x90))+((x122*x82))+((gclwh9_10*x87))+(((-4.0)*gclwh5_10*x75)));
op[22]=((-0.0135466825)+(((-1.0)*x441))+(((0.01252412)*gclwh0_1*x88))+((gclwh5_10*x84))+((gclwh13_10*x69))+((gclwh11_1*x89))+((gclwh5_1*x144))+(((0.01252412)*gclwh2_1*x73))+(((-0.01252412)*gclwh13_1*x73))+((gclwh2_1*x74))+(((-0.0135466825)*gclwh2_1*x69))+(((-1.0)*gclwh7_1*x119))+(((-1.0)*x462))+(((-4.561674317235e-5)*x81))+((gclwh13_1*x74))+(((4.561674317235e-5)*x199))+(((0.0010225625)*pp*x81))+x447+x465+(((0.01252412)*gclwh15_1*x88))+(((-1.0)*gclwh15_10*x83))+(((-0.0010225625)*gclwh13_1*x69))+(((-0.0010225625)*gclwh5_1*x84))+(((-0.01252412)*gclwh5_1*x75))+(((-0.0135466825)*gclwh0_1*x83)));
op[23]=(((gclwh7_13*x109))+(((-1.0)*x444))+(((-0.000221452524)*x128))+(((-1.0)*x437))+(((-0.00518928)*x92))+(((0.0304)*gclwh15_9*x83))+(((-0.000221452524)*x96))+(((-0.0608)*gclwh15_9*x88))+x257+x453+(((-0.0304)*gclwh5_9*x84))+(((-0.0304)*gclwh13_9*x69))+(((0.000221452524)*x121))+((gclwh13_9*x276))+(((0.0608)*gclwh5_9*x75))+(((-0.00518928)*x167)));
op[24]=((-0.20533086)+(((-1.0)*x454))+x456);
op[25]=((((0.0066566880405)*x133))+(((-1.0)*x436))+(((0.0066566880405)*x117))+(((1.8276)*gclwh6_2*x73))+((gclwh14_2*x100))+(((-0.0066566880405)*x150))+(((0.9138)*gclwh8_2*x83))+(((-0.9138)*gclwh6_2*x69))+x264+(((-0.15598566)*x180))+(((-1.8276)*gclwh8_2*x88))+(((-0.15598566)*x141))+(((-1.8276)*gclwh10_2*x75))+(((0.9138)*gclwh10_2*x84)));
op[26]=((((-1.706)*gclwh10_12*x75))+(((0.0062137829925)*x193))+(((-0.07671258)*x116))+(((-0.07671258)*x107))+(((0.07671258)*x176))+(((-1.706)*gclwh8_12*x88))+(((-0.853)*gclwh6_12*x69))+(((0.853)*gclwh10_12*x84))+(((0.0062137829925)*x80))+(((1.706)*gclwh6_12*x73))+((x80*x91))+(((-0.0062137829925)*x126)));
op[27]=((((8.0)*gclwh10_11*x75))+(((-1.0)*x164*x84))+(((-0.02913849)*x186))+((x185*x69))+(((0.02913849)*x86))+(((-1.0)*gclwh14_11*x146))+((gclwh4_11*x98))+(((-0.02913849)*x104))+(((8.0)*gclwh8_11*x88))+(((-1.0)*x137*x83))+(((-8.0)*gclwh6_11*x73))+((gclwh12_11*x135)));
op[28]=((-0.01366176)+(((-1.0)*x456))+x454);
op[29]=((((0.0608)*gclwh10_2*x84))+(((-0.1216)*gclwh10_2*x75))+((gclwh14_2*x120))+(((-0.01037856)*x141))+(((-0.01037856)*x180))+(((0.000442905048)*x117))+(((0.0608)*gclwh8_2*x83))+(((-0.1216)*gclwh8_2*x88))+x436+(((0.1216)*gclwh6_2*x73))+(((0.000442905048)*x133))+(((-0.0608)*gclwh6_2*x69))+(((-1.0)*x264))+(((-0.000442905048)*x150)));
op[30]=((((0.0066566880405)*x174))+(((-1.8276)*gclwh9_0*x88))+((gclwh15_0*x100))+(((-0.0066566880405)*x138))+(((-0.9138)*gclwh7_0*x69))+x434+(((-0.15598566)*x106))+(((-0.15598566)*x181))+(((-1.0)*x272))+(((-1.8276)*gclwh11_0*x75))+(((0.9138)*gclwh11_0*x84))+(((0.0066566880405)*x72))+(((0.9138)*pp*x72))+(((1.8276)*gclwh7_0*x73)));
op[31]=((-0.20533086)+(((-1.0)*x455))+x457);
op[32]=((((0.02913849)*x124))+((gclwh15_10*x146))+(((0.02913849)*x103))+((x125*x84))+(((-1.0)*x188*x69))+((x145*x83))+(((-8.0)*gclwh11_10*x75))+(((8.0)*gclwh7_10*x73))+(((-1.0)*gclwh13_10*x135))+(((-1.0)*gclwh5_10*x98))+(((-0.02913849)*gclwh7_10*r21))+(((-8.0)*gclwh9_10*x88)));
op[33]=((((-0.07671258)*x139))+(((0.853)*gclwh9_13*x83))+((x78*x91))+(((-0.0062137829925)*x177))+(((-0.07671258)*x197))+(((0.07671258)*x136))+(((-0.853)*gclwh7_13*x69))+(((-1.706)*gclwh11_13*x75))+(((-1.706)*gclwh9_13*x88))+(((0.0062137829925)*x149))+(((0.0062137829925)*x78))+(((1.706)*gclwh7_13*x73)));
op[34]=((((-0.1216)*gclwh9_0*x88))+(((-0.0608)*gclwh7_0*x69))+(((0.0608)*gclwh11_0*x84))+(((0.000442905048)*x72))+(((-1.0)*x434))+(((-0.1216)*gclwh11_0*x75))+((gclwh15_0*x120))+(((0.000442905048)*x174))+(((-0.01037856)*x181))+x272+(((-0.000442905048)*x138))+(((-0.01037856)*x106))+(((0.0608)*pp*x72))+(((0.1216)*gclwh7_0*x73)));
IkReal x466=pz*pz;
IkReal x467=pp*pp;
IkReal x468=((0.1707)*pz);
IkReal x469=(npy*pz);
IkReal x470=(pp*r21);
IkReal x471=((0.1707)*rxp1_2);
IkReal x472=(gclwh13_1*pp);
IkReal x473=(gclwh9_13*rxp0_2);
IkReal x474=((4.561674317235e-5)*r21);
IkReal x475=((4.0)*gclwh12_11);
IkReal x476=(npz*pz);
IkReal x477=((0.00163685467575)*r21);
IkReal x478=(gclwh10_12*rxp2_2);
IkReal x479=(pz*r20);
IkReal x480=(gclwh4_2*r22);
IkReal x481=(gclwh11_13*r22);
IkReal x482=((0.02913849)*r22);
IkReal x483=((0.014569245)*r21);
IkReal x484=(gclwh15_1*r20);
IkReal x485=(pp*r20);
IkReal x486=((2.0)*gclwh11_10);
IkReal x487=((0.0072846225)*r21);
IkReal x488=(npx*pz);
IkReal x489=((0.001068933642)*rxp2_2);
IkReal x490=((2.0)*gclwh4_11);
IkReal x491=(gclwh5_9*r22);
IkReal x492=((0.08535)*pp);
IkReal x493=(gclwh2_0*pz);
IkReal x494=((0.019178145)*rxp0_2);
IkReal x495=((0.2247)*gclwh15_15);
IkReal x496=(gclwh9_0*rxp0_2);
IkReal x497=(gclwh8_2*rxp0_2);
IkReal x498=(gclwh12_8*rxp1_2);
IkReal x499=((0.3414)*rxp0_2);
IkReal x500=(pp*r22);
IkReal x501=(gclwh14_3*rxp0_2);
IkReal x502=(gclwh13_0*pz);
IkReal x503=(gclwh12_2*r21);
IkReal x504=(gclwh11_10*rxp2_2);
IkReal x505=((0.0072846225)*r22);
IkReal x506=((0.1707)*rxp2_2);
IkReal x507=(gclwh5_1*pp);
IkReal x508=(gclwh5_0*pz);
IkReal x509=((0.00155960496929498)*r21);
IkReal x510=((2.0)*gclwh9_10);
IkReal x511=((2.0)*gclwh15_10);
IkReal x512=(gclwh14_11*r20);
IkReal x513=((0.1707)*rxp0_2);
IkReal x514=((4.0)*gclwh14_11);
IkReal x515=((0.00332834402025)*r22);
IkReal x516=((0.08318211)*rxp0_2);
IkReal x517=(gclwh12_14*rxp1_2);
IkReal x518=((0.4494)*gclwh4_14);
IkReal x519=(gclwh6_12*rxp1_2);
IkReal x520=((0.001068933642)*rxp1_2);
IkReal x521=(gclwh15_9*r20);
IkReal x522=((0.4494)*gclwh15_15);
IkReal x523=(gclwh4_8*rxp2_2);
IkReal x524=((0.2247)*gclwh12_14);
IkReal x525=((0.0072846225)*r20);
IkReal x526=((0.00310689149625)*r20);
IkReal x527=((0.3414)*rxp1_2);
IkReal x528=((0.6828)*rxp0_2);
IkReal x529=((2.0)*gclwh7_10);
IkReal x530=((0.000442905048)*r21);
IkReal x531=((1.0)*pp);
IkReal x532=((0.0032737093515)*r20);
IkReal x533=((0.07280355)*rxp1_2);
IkReal x534=((1.0)*pz);
IkReal x535=((4.0)*gclwh15_10);
IkReal x536=(gclwh4_14*r22);
IkReal x537=((0.000818427337875)*r20);
IkReal x538=(gclwh7_0*pz);
IkReal x539=(gclwh5_15*rxp2_2);
IkReal x540=(gclwh12_3*pp);
IkReal x541=(gclwh10_2*pz);
IkReal x542=(gclwh13_9*r21);
IkReal x543=(gclwh13_9*rxp1_2);
IkReal x544=((0.014569245)*rxp0_2);
IkReal x545=((0.019178145)*rxp1_2);
IkReal x546=((4.561674317235e-5)*r22);
IkReal x547=((0.15598566)*rxp1_2);
IkReal x548=(gclwh5_0*r22);
IkReal x549=(gclwh5_9*rxp2_2);
IkReal x550=((0.000221452524)*r20);
IkReal x551=(gclwh4_3*pp);
IkReal x552=(gclwh15_1*rxp0_2);
IkReal x553=(gclwh6_12*r21);
IkReal x554=((0.03835629)*rxp0_2);
IkReal x555=((0.019178145)*rxp2_2);
IkReal x556=(gclwh7_1*pp);
IkReal x557=((0.000818427337875)*r22);
IkReal x558=(gclwh10_11*rxp2_2);
IkReal x559=((0.000442905048)*r20);
IkReal x560=((0.4569)*pp);
IkReal x561=((0.000818427337875)*r21);
IkReal x562=((4.0)*gclwh4_11);
IkReal x563=((0.4494)*gclwh12_14);
IkReal x564=((2.0)*pp);
IkReal x565=((0.014569245)*r22);
IkReal x566=(gclwh12_8*r21);
IkReal x567=((0.00332834402025)*r20);
IkReal x568=((2.0)*gclwh6_11);
IkReal x569=(gclwh1_3*r20);
IkReal x570=((0.036546103557)*rxp2_2);
IkReal x571=((0.036546103557)*rxp1_2);
IkReal x572=((0.3414)*rxp2_2);
IkReal x573=(gclwh4_8*r22);
IkReal x574=((0.07280355)*rxp0_2);
IkReal x575=((2.0)*gclwh12_11);
IkReal x576=(gclwh2_0*r21);
IkReal x577=(gclwh5_15*r22);
IkReal x578=(gclwh6_2*pz);
IkReal x579=((0.4494)*gclwh13_15);
IkReal x580=(gclwh7_13*r21);
IkReal x581=(gclwh11_0*pz);
IkReal x582=((0.014569245)*r20);
IkReal x583=((0.00518928)*rxp0_2);
IkReal x584=(gclwh13_0*r21);
IkReal x585=((0.00310689149625)*r22);
IkReal x586=((2.0)*gclwh8_11);
IkReal x587=(gclwh11_0*rxp2_2);
IkReal x588=((0.00163685467575)*r20);
IkReal x589=((0.07280355)*rxp2_2);
IkReal x590=((4.0)*gclwh5_10);
IkReal x591=((2.0)*gclwh5_10);
IkReal x592=((0.6828)*rxp1_2);
IkReal x593=(gclwh8_12*rxp0_2);
IkReal x594=((0.00155960496929498)*r22);
IkReal x595=((0.07799283)*rxp0_2);
IkReal x596=((0.4494)*gclwh14_14);
IkReal x597=((0.2247)*gclwh5_15);
IkReal x598=((2.0)*gclwh13_10);
IkReal x599=((0.00310689149625)*r21);
IkReal x600=((0.2247)*gclwh4_14);
IkReal x601=(gclwh14_3*r20);
IkReal x602=((0.01037856)*rxp1_2);
IkReal x603=(gclwh11_13*rxp2_2);
IkReal x604=((0.4494)*gclwh5_15);
IkReal x605=((0.2247)*gclwh14_14);
IkReal x606=(gclwh12_2*pz);
IkReal x607=((0.02913849)*r21);
IkReal x608=((0.0066566880405)*r20);
IkReal x609=(gclwh14_8*r20);
IkReal x610=((0.0032737093515)*r21);
IkReal x611=((0.2247)*gclwh13_15);
IkReal x612=(gclwh0_1*r20);
IkReal x613=((2.0)*gclwh10_11);
IkReal x614=(gclwh7_13*rxp1_2);
IkReal x615=(gclwh10_2*rxp2_2);
IkReal x616=((4.0)*gclwh13_10);
IkReal x617=((2.0)*gclwh14_11);
IkReal x618=(gclwh8_11*x499);
IkReal x619=((0.3414)*x558);
IkReal x620=(gclwh12_11*x483);
IkReal x621=(gclwh4_11*x565);
IkReal x622=((0.014569245)*x512);
IkReal x623=(gclwh6_11*x527);
IkReal x624=((0.00163685467575)*x536);
IkReal x625=(gclwh12_14*x477);
IkReal x626=(gclwh14_14*x588);
IkReal x627=((0.00163685467575)*x577);
IkReal x628=(gclwh13_15*x477);
IkReal x629=(gclwh15_15*x588);
IkReal x630=(gclwh7_10*x527);
IkReal x631=(gclwh15_10*x582);
IkReal x632=(gclwh13_10*x483);
IkReal x633=((0.3414)*x504);
IkReal x634=(gclwh5_10*x565);
IkReal x635=(gclwh9_10*x499);
IkReal x636=((0.019178145)*x517);
IkReal x637=(gclwh4_14*x555);
IkReal x638=(gclwh6_5*x561);
IkReal x639=(gclwh10_5*x557);
IkReal x640=(gclwh8_5*x537);
IkReal x641=(gclwh14_14*x494);
IkReal x642=((0.014569245)*x523);
IkReal x643=(gclwh14_11*x513);
IkReal x644=((0.014569245)*x498);
IkReal x645=(gclwh10_11*x505);
IkReal x646=(gclwh8_11*x525);
IkReal x647=(gclwh6_11*x487);
IkReal x648=(gclwh4_11*x506);
IkReal x649=(gclwh14_8*x544);
IkReal x650=(gclwh12_11*x471);
IkReal x651=(gclwh5_10*x572);
IkReal x652=(gclwh7_10*x483);
IkReal x653=(gclwh13_10*x527);
IkReal x654=(gclwh13_10*x471);
IkReal x655=(gclwh7_10*x487);
IkReal x656=((0.014569245)*x543);
IkReal x657=(gclwh5_10*x506);
IkReal x658=((0.014569245)*x549);
IkReal x659=(gclwh15_9*x544);
IkReal x660=(gclwh11_10*x505);
IkReal x661=(gclwh15_10*x513);
IkReal x662=(gclwh9_10*x525);
IkReal x663=(gclwh13_15*x545);
IkReal x664=(gclwh7_7*x561);
IkReal x665=((0.019178145)*x539);
IkReal x666=(gclwh15_15*x494);
IkReal x667=(gclwh11_7*x557);
IkReal x668=(gclwh9_7*x537);
IkReal x669=(gclwh12_14*x561);
IkReal x670=(gclwh8_5*x494);
IkReal x671=(gclwh10_5*x555);
IkReal x672=((0.000818427337875)*x536);
IkReal x673=(gclwh6_5*x545);
IkReal x674=(gclwh14_14*x537);
IkReal x675=((0.000621742530375)*x573);
IkReal x676=(gclwh6_11*x471);
IkReal x677=((0.0072846225)*x512);
IkReal x678=((0.000621742530375)*x566);
IkReal x679=((0.000621742530375)*x609);
IkReal x680=(gclwh8_11*x513);
IkReal x681=(gclwh10_11*x506);
IkReal x682=(gclwh12_11*x487);
IkReal x683=(gclwh4_11*x505);
IkReal x684=(gclwh15_10*x525);
IkReal x685=((0.000621742530375)*x521);
IkReal x686=(gclwh7_10*x471);
IkReal x687=((0.000621742530375)*x542);
IkReal x688=(gclwh9_10*x513);
IkReal x689=(gclwh5_10*x505);
IkReal x690=((0.1707)*x504);
IkReal x691=(gclwh13_10*x487);
IkReal x692=((0.000621742530375)*x491);
IkReal x693=(r21*x467);
IkReal x694=((2.0)*x466);
IkReal x695=((1.0)*x467);
IkReal x696=(x490*x500);
IkReal x697=(x470*x575);
IkReal x698=(x488*x514);
IkReal x699=(x485*x617);
IkReal x700=(x469*x475);
IkReal x701=(x476*x562);
IkReal x702=(x500*x600);
IkReal x703=(x488*x596);
IkReal x704=(x470*x524);
IkReal x705=(x476*x518);
IkReal x706=(x485*x605);
IkReal x707=(x469*x563);
IkReal x708=(x500*x597);
IkReal x709=(x470*x611);
IkReal x710=(x488*x522);
IkReal x711=(x485*x495);
IkReal x712=(x469*x579);
IkReal x713=(x476*x604);
IkReal x714=(x485*x511);
IkReal x715=(x476*x590);
IkReal x716=(x469*x616);
IkReal x717=(x470*x598);
IkReal x718=(x488*x535);
IkReal x719=(x500*x591);
IkReal x720=((0.2247)*gclwh10_5*x476);
IkReal x721=((0.2247)*gclwh8_5*x488);
IkReal x722=((0.11235)*gclwh6_5*x470);
IkReal x723=((0.11235)*gclwh8_5*x485);
IkReal x724=((0.2247)*gclwh6_5*x469);
IkReal x725=((0.11235)*gclwh10_5*x500);
IkReal x726=(x471*x540);
IkReal x727=(gclwh14_2*rxp0_2*x468);
IkReal x728=(gclwh6_3*x693);
IkReal x729=(x505*x541);
IkReal x730=(x469*x568);
IkReal x731=(x500*x541);
IkReal x732=(x506*x551);
IkReal x733=((0.0072846225)*gclwh8_2*x479);
IkReal x734=(gclwh8_2*pp*x479);
IkReal x735=(x487*x578);
IkReal x736=(gclwh12_2*rxp1_2*x468);
IkReal x737=(x476*x613);
IkReal x738=(gclwh4_2*rxp2_2*x468);
IkReal x739=(x488*x586);
IkReal x740=((0.1707)*pp*x501);
IkReal x741=(x470*x529);
IkReal x742=((4.0)*gclwh9_10*x488);
IkReal x743=((4.0)*gclwh11_10*x476);
IkReal x744=(x476*x486);
IkReal x745=(x471*x472);
IkReal x746=(x488*x510);
IkReal x747=(gclwh7_1*x693);
IkReal x748=(x505*x581);
IkReal x749=(gclwh15_0*rxp0_2*x468);
IkReal x750=(x500*x581);
IkReal x751=(x506*x507);
IkReal x752=((0.0072846225)*gclwh9_0*x479);
IkReal x753=(gclwh9_0*pp*x479);
IkReal x754=(gclwh15_1*pp*x513);
IkReal x755=(gclwh13_0*rxp1_2*x468);
IkReal x756=(gclwh5_0*rxp2_2*x468);
IkReal x757=(x469*x529);
IkReal x758=(x487*x538);
IkReal x759=((0.2247)*gclwh9_7*x488);
IkReal x760=((0.11235)*gclwh7_7*x470);
IkReal x761=((0.2247)*gclwh11_7*x476);
IkReal x762=((0.11235)*gclwh11_7*x500);
IkReal x763=((0.2247)*gclwh7_7*x469);
IkReal x764=((0.11235)*gclwh9_7*x485);
IkReal x765=((0.11235)*gclwh12_14*x470);
IkReal x766=(x488*x605);
IkReal x767=((0.11235)*gclwh4_14*x500);
IkReal x768=(x469*x524);
IkReal x769=((0.11235)*gclwh14_14*x485);
IkReal x770=(x476*x600);
IkReal x771=(gclwh14_8*npx*x468);
IkReal x772=(gclwh14_2*pp*x479);
IkReal x773=(gclwh12_3*x693);
IkReal x774=(gclwh3_2*pz*x487);
IkReal x775=((0.08535)*gclwh12_8*x470);
IkReal x776=(x476*x490);
IkReal x777=(gclwh6_2*rxp1_2*x468);
IkReal x778=(gclwh3_3*x693);
IkReal x779=(x467*x569);
IkReal x780=(x492*x573);
IkReal x781=((0.0072846225)*gclwh14_2*x479);
IkReal x782=(gclwh4_3*r22*x467);
IkReal x783=((0.0072846225)*gclwh1_2*x479);
IkReal x784=(x469*x575);
IkReal x785=(gclwh12_8*npy*x468);
IkReal x786=(gclwh4_8*npz*x468);
IkReal x787=(x468*x497);
IkReal x788=((0.08535)*gclwh14_8*x485);
IkReal x789=(x488*x617);
IkReal x790=(gclwh6_3*pp*x471);
IkReal x791=(x468*x615);
IkReal x792=((0.0072846225)*pz*x480);
IkReal x793=(x487*x606);
IkReal x794=(x487*x502);
IkReal x795=(x467*x484);
IkReal x796=((0.08535)*gclwh15_9*x485);
IkReal x797=(x500*x508);
IkReal x798=(x470*x502);
IkReal x799=(x487*x493);
IkReal x800=((0.0072846225)*gclwh0_0*x479);
IkReal x801=(x468*x496);
IkReal x802=(x505*x508);
IkReal x803=(gclwh2_1*x693);
IkReal x804=(x476*x591);
IkReal x805=(gclwh5_9*npz*x468);
IkReal x806=(x471*x556);
IkReal x807=(x469*x598);
IkReal x808=(x468*x587);
IkReal x809=(gclwh13_9*npy*x468);
IkReal x810=(x467*x612);
IkReal x811=(x491*x492);
IkReal x812=(gclwh15_9*npx*x468);
IkReal x813=((0.08535)*gclwh13_9*x470);
IkReal x814=(gclwh11_1*pp*x506);
IkReal x815=(x488*x511);
IkReal x816=(gclwh7_0*rxp1_2*x468);
IkReal x817=((0.0072846225)*gclwh15_0*x479);
IkReal x818=(gclwh6_2*npy*x694);
IkReal x819=(gclwh6_3*x469*x564);
IkReal x820=(gclwh6_2*x470*x534);
IkReal x821=(gclwh10_2*npz*x694);
IkReal x822=(gclwh8_2*npx*x694);
IkReal x823=(gclwh11_1*x476*x564);
IkReal x824=(gclwh7_0*npy*x694);
IkReal x825=(gclwh9_0*npx*x694);
IkReal x826=(gclwh11_1*r22*x695);
IkReal x827=((2.0)*x469*x556);
IkReal x828=(gclwh11_0*npz*x694);
IkReal x829=(gclwh7_0*x470*x534);
IkReal x830=(gclwh12_2*npy*x694);
IkReal x831=(gclwh3_2*npy*x694);
IkReal x832=(gclwh1_2*npx*x694);
IkReal x833=(gclwh14_3*x488*x564);
IkReal x834=(gclwh4_2*npz*x694);
IkReal x835=((2.0)*x476*x551);
IkReal x836=(gclwh12_2*x470*x534);
IkReal x837=(gclwh1_2*x479*x531);
IkReal x838=(gclwh3_3*x469*x564);
IkReal x839=(pz*x480*x531);
IkReal x840=(gclwh1_3*x488*x564);
IkReal x841=(gclwh3_2*x470*x534);
IkReal x842=((2.0)*x469*x540);
IkReal x843=(gclwh14_2*npx*x694);
IkReal x844=(x601*x695);
IkReal x845=(gclwh0_0*npx*x694);
IkReal x846=(gclwh2_0*npy*x694);
IkReal x847=((2.0)*x476*x507);
IkReal x848=((2.0)*x469*x472);
IkReal x849=(gclwh15_0*npx*x694);
IkReal x850=(gclwh2_1*x469*x564);
IkReal x851=(gclwh0_1*x488*x564);
IkReal x852=(gclwh5_0*npz*x694);
IkReal x853=(gclwh13_0*npy*x694);
IkReal x854=(gclwh0_0*x479*x531);
IkReal x855=(gclwh15_0*x479*x531);
IkReal x856=((1.0)*x470*x493);
IkReal x857=((1.0)*gclwh13_1*x693);
IkReal x858=(gclwh5_1*r22*x695);
IkReal x859=(gclwh15_1*x488*x564);
IkReal x860=(x670+x671);
IkReal x861=(x636+x637);
IkReal x862=(x663+x665);
IkReal x863=(x646+x645+x643+x730);
IkReal x864=(x661+x660+x662+x757);
IkReal x865=(x686+x684+x804+x807);
IkReal x866=(x676+x677+x776+x784);
IkReal x867=(x626+x706+x707+x705);
IkReal x868=(x674+x770+x768+x769);
IkReal x869=(x629+x711+x713+x712);
IkReal x870=(x664+x759+x760+x761);
IkReal x871=(x638+x720+x721+x722);
IkReal x872=(x683+x682+x681+x680+x789);
IkReal x873=(x689+x688+x690+x691+x815);
IkReal x874=(x647+x648+x650+x737+x739);
IkReal x875=(x654+x655+x657+x746+x744);
IkReal x876=(x623+x622+x699+x700+x701);
IkReal x877=(x625+x624+x702+x703+x704);
IkReal x878=(x630+x631+x715+x714+x716);
IkReal x879=(x640+x639+x723+x724+x725);
IkReal x880=(x627+x628+x710+x708+x709);
IkReal x881=(x668+x667+x764+x762+x763);
IkReal x882=(x669+x672+x765+x766+x767);
IkReal x883=((((4.0)*gclwh7_10*x469))+((gclwh15_10*x499))+((gclwh9_10*x582))+((gclwh11_10*x565))+((x486*x500))+((x485*x510)));
IkReal x884=(x651+x652+x653+x742+x743+x741);
IkReal x885=(x634+x635+x632+x633+x719+x718+x717);
IkReal x886=(x618+x619+x621+x620+x696+x697+x698);
IkReal x887=(x649+x736+x735+x738+x740+x819+x822+x821+x820);
IkReal x888=(x644+x642+x734+x733+x732+x731+x726+x727+x728+x729+x818);
IkReal x889=(x659+x755+x754+x756+x758+x829+x828+x827+x826+x825);
IkReal x890=(x656+x658+x751+x750+x753+x752+x747+x745+x748+x749+x823+x824);
IkReal x891=(x687+x692+x852+x853+x850+x851+x856+x857+x854+x855+x858+x859+x816+x817+x814+x812+x813+x811);
IkReal x892=(x468+x678+x675+x773+x772+x771+x777+x775+x774+x779+x778+x782+x783+x780+x781+x834+x830+x831+x832+x833);
IkReal x893=(x679+x791+x790+x793+x792+x786+x787+x785+x788+x835+x836+x837+x838+x839+x841+x840+x843+x842+x844);
IkReal x894=(x468+x685+x795+x794+x797+x796+x799+x798+x810+x845+x847+x846+x849+x848+x809+x808+x805+x806+x801+x800+x803+x802);
op[35]=((-0.01366176)+(((-1.0)*x883))+x884);
op[36]=((0.392270175)+(((-1.0)*x886))+x876);
op[37]=((((-0.0066566880405)*x480))+(((-0.9138)*pp*x480))+(((1.8276)*gclwh3_2*x469))+(((-0.9138)*gclwh3_2*x470))+((gclwh14_2*x608))+(((0.0066566880405)*gclwh3_2*r21))+(((1.8276)*gclwh12_2*x469))+(((-1.8276)*gclwh14_2*x488))+((gclwh1_2*x608))+(((-0.15598566)*x497))+((gclwh6_2*x547))+(((1.8276)*gclwh1_2*x488))+(((1.8276)*gclwh4_2*x476))+(((0.9138)*gclwh14_2*x485))+(((-0.15598566)*x615))+(((-0.9138)*gclwh12_2*x470))+(((-0.0066566880405)*x503))+(((-0.9138)*gclwh1_2*x485))+x867+(((-1.0)*x877)));
op[38]=((((-0.8988)*gclwh14_14*x488))+((x485*x596))+(((-1.0)*x500*x518))+(((0.1456071)*x519))+(((-0.0032737093515)*x536))+(((-0.1456071)*x593))+(((-0.1456071)*x478))+((gclwh14_14*x532))+(((-1.0)*x470*x563))+(((0.8988)*gclwh4_14*x476))+(((0.8988)*gclwh12_14*x469))+(((-1.0)*gclwh12_14*x610)));
op[39]=((-0.00506895)+((gclwh12_11*x607))+(((-0.02913849)*x512))+(((0.6828)*x558))+((gclwh8_11*x528))+((x470*x475))+((gclwh4_11*x482))+(((-1.0)*gclwh6_11*x592))+(((-8.0)*gclwh4_11*x476))+(((-8.0)*gclwh12_11*x469))+((x500*x562))+(((-1.0)*x485*x514))+(((8.0)*gclwh14_11*x488)));
op[40]=((0.023396725)+x886+(((-1.0)*x876)));
op[41]=((((0.0608)*gclwh14_2*x485))+(((-1.0)*x867))+(((-0.1216)*gclwh14_2*x488))+(((-0.01037856)*x615))+(((-0.000442905048)*x480))+(((0.1216)*gclwh12_2*x469))+(((0.1216)*gclwh1_2*x488))+((gclwh6_2*x602))+(((-0.0608)*pp*x480))+(((0.1216)*gclwh4_2*x476))+((gclwh3_2*x530))+((gclwh14_2*x559))+((gclwh1_2*x559))+(((-0.0608)*gclwh12_2*x470))+(((-0.0608)*gclwh3_2*x470))+(((-0.000442905048)*x503))+x877+(((-0.01037856)*x497))+(((0.1216)*gclwh3_2*x469))+(((-0.0608)*gclwh1_2*x485)));
op[42]=((((0.15598566)*x587))+(((0.0066566880405)*x584))+(((-1.0)*gclwh7_0*x547))+(((0.15598566)*x496))+(((-0.9138)*gclwh0_0*x485))+(((0.0066566880405)*x548))+(((-1.8276)*gclwh13_0*x469))+(((0.9138)*gclwh13_0*x470))+(((-1.0)*x880))+(((1.8276)*gclwh0_0*x488))+(((-1.8276)*gclwh5_0*x476))+(((1.8276)*gclwh15_0*x488))+(((0.9138)*gclwh5_0*x500))+x869+(((1.8276)*gclwh2_0*x469))+(((-1.0)*gclwh15_0*x608))+((gclwh0_0*x608))+(((-0.9138)*gclwh2_0*x470))+(((-0.9138)*gclwh15_0*x485))+(((0.0066566880405)*x576)));
op[43]=((0.392270175)+x885+(((-1.0)*x878)));
op[44]=((0.00506895)+((x500*x590))+(((-8.0)*gclwh5_10*x476))+((gclwh5_10*x482))+(((-8.0)*gclwh13_10*x469))+(((8.0)*gclwh15_10*x488))+(((0.6828)*x504))+(((-1.0)*gclwh7_10*x592))+(((-0.02913849)*gclwh15_10*r20))+((x470*x616))+((gclwh13_10*x607))+((gclwh9_10*x528))+(((-1.0)*x485*x535)));
op[45]=((((-0.8988)*gclwh5_15*x476))+((x470*x579))+(((-0.1456071)*x614))+(((0.8988)*gclwh15_15*x488))+((gclwh13_15*x610))+(((-1.0)*gclwh15_15*x532))+(((0.0032737093515)*x577))+(((0.1456071)*x473))+(((-0.8988)*gclwh13_15*x469))+((x500*x604))+(((0.1456071)*x603))+(((-1.0)*x485*x522)));
op[46]=((((-0.1216)*gclwh13_0*x469))+((gclwh13_0*x530))+(((-1.0)*x869))+(((0.1216)*gclwh15_0*x488))+(((-0.1216)*gclwh5_0*x476))+(((0.01037856)*x496))+(((-0.0608)*gclwh2_0*x470))+(((0.1216)*gclwh2_0*x469))+(((-1.0)*gclwh7_0*x602))+(((0.1216)*gclwh0_0*x488))+((gclwh2_0*x530))+(((-0.0608)*gclwh15_0*x485))+(((0.0608)*gclwh13_0*x470))+(((-0.0608)*gclwh0_0*x485))+(((-1.0)*gclwh15_0*x559))+(((0.01037856)*x587))+x880+(((0.0608)*gclwh5_0*x500))+(((0.000442905048)*x548))+((gclwh0_0*x559)));
op[47]=((0.023396725)+(((-1.0)*x885))+x878);
op[48]=((((0.4569)*gclwh8_12*x485))+(((-0.9138)*gclwh10_12*x476))+(((-1.0)*x861))+(((0.9138)*gclwh6_12*x469))+(((-0.9138)*gclwh8_12*x488))+((gclwh8_12*x567))+((gclwh14_8*x595))+(((0.4569)*gclwh10_12*x500))+x641+(((-0.07799283)*x523))+(((-0.07799283)*x498))+(((-0.00332834402025)*x553))+x871+(((-0.4569)*gclwh6_12*x470))+((gclwh10_12*x515))+(((-1.0)*x879)));
op[49]=((((-1.0)*x863))+(((0.42819102)*gclwh6_3*x469))+(((-1.0)*gclwh10_11*x500))+(((-1.0)*x887))+(((-1.0)*gclwh4_3*x570))+((gclwh6_11*x470))+(((0.036546103557)*x501))+(((-0.2068108875)*gclwh6_3*x470))+(((-1.0)*gclwh8_11*x485))+(((-1.0)*gclwh12_3*x571))+x874+x888+(((-1.0)*gclwh6_3*x509)));
op[50]=((0.09583455)+(((-4.0)*gclwh6_11*x469))+((gclwh12_11*x527))+(((-1.0)*gclwh14_11*x499))+((gclwh6_11*x483))+(((4.0)*gclwh10_11*x476))+(((-1.0)*x485*x586))+(((-1.0)*gclwh10_11*x565))+((x470*x568))+((gclwh4_11*x572))+(((-1.0)*gclwh8_11*x582))+(((-1.0)*x500*x613))+(((4.0)*gclwh8_11*x488)));
op[51]=((((-1.0)*gclwh8_2*x526))+(((0.03835629)*x517))+((gclwh6_2*x599))+(((0.4265)*gclwh6_2*x470))+(((-1.0)*gclwh14_2*x574))+(((-1.0)*gclwh14_14*x554))+(((-1.0)*gclwh14_8*x516))+(((-1.0)*gclwh10_2*x585))+(((-0.4265)*gclwh10_2*x500))+(((0.08318211)*x523))+(((0.03835629)*gclwh4_14*rxp2_2))+(((0.08318211)*x498))+((gclwh12_2*x533))+(((0.853)*gclwh10_2*x476))+(((0.853)*gclwh8_2*x488))+(((-0.853)*gclwh6_2*x469))+((gclwh4_2*x589))+(((-0.4265)*gclwh8_2*x485)));
op[52]=((((0.0304)*gclwh8_12*x485))+(((0.0608)*gclwh6_12*x469))+(((0.00518928)*x498))+((gclwh8_12*x550))+(((0.000221452524)*gclwh10_12*r22))+(((-1.0)*x641))+(((-1.0)*gclwh14_8*x583))+x861+x871+(((-0.000221452524)*x553))+(((0.0304)*gclwh10_12*x500))+(((-0.0304)*gclwh6_12*x470))+(((-0.0608)*gclwh10_12*x476))+(((-0.0608)*gclwh8_12*x488))+(((0.00518928)*x523))+(((-1.0)*x879)));
op[53]=((((0.01252412)*gclwh6_3*x469))+((gclwh8_11*x485))+((gclwh10_11*x500))+(((-1.0)*x887))+(((0.0010225625)*gclwh6_3*x470))+(((-1.0)*gclwh6_3*x474))+(((-1.0)*gclwh4_3*x489))+(((-1.0)*gclwh6_11*x470))+(((0.001068933642)*x501))+x863+x888+(((-1.0)*gclwh12_3*x520))+(((-1.0)*x874)));
op[54]=(((gclwh11_10*x500))+((gclwh11_1*x594))+(((-1.0)*gclwh7_10*x470))+(((-1.0)*gclwh7_1*x509))+((gclwh9_10*x485))+(((0.42819102)*gclwh7_1*x469))+(((-1.0)*x889))+(((-0.42819102)*gclwh11_1*x476))+(((-1.0)*gclwh13_1*x571))+(((-1.0)*gclwh5_1*x570))+x864+x890+(((-0.2068108875)*gclwh7_1*x470))+(((0.2068108875)*gclwh11_1*x500))+(((0.036546103557)*x552))+(((-1.0)*x875)));
op[55]=((((-1.0)*x862))+(((0.9138)*gclwh7_13*x469))+(((0.4569)*gclwh9_13*x485))+(((-0.4569)*gclwh7_13*x470))+(((0.00332834402025)*x481))+((x481*x560))+(((-1.0)*x881))+((gclwh9_13*x567))+x666+(((-0.9138)*gclwh9_13*x488))+(((-0.07799283)*x543))+(((-0.07799283)*x549))+((gclwh15_9*x595))+(((-0.9138)*gclwh11_13*x476))+x870+(((-0.00332834402025)*x580)));
op[56]=(((gclwh13_0*x533))+(((-1.0)*gclwh15_0*x574))+(((-0.4265)*gclwh9_0*x485))+((gclwh5_0*x589))+((gclwh15_9*x516))+(((0.853)*gclwh11_0*x476))+(((-1.0)*gclwh11_0*x585))+(((0.853)*gclwh9_0*x488))+(((-0.03835629)*x539))+((gclwh7_0*x599))+(((-1.0)*gclwh9_0*x526))+(((-0.08318211)*x543))+(((-0.08318211)*x549))+(((-0.4265)*gclwh11_0*x500))+(((-0.853)*gclwh7_0*x469))+(((0.4265)*gclwh7_0*x470))+(((-0.03835629)*gclwh13_15*rxp1_2))+((gclwh15_15*x554)));
op[57]=((0.09583455)+(((-1.0)*x883))+x884);
op[58]=((((-0.0010225625)*gclwh11_1*x500))+(((-1.0)*x864))+(((0.0010225625)*gclwh7_1*x470))+(((-1.0)*gclwh11_10*x500))+(((0.01252412)*gclwh7_1*x469))+((gclwh7_10*x470))+(((-1.0)*gclwh7_1*x474))+(((-1.0)*x889))+(((0.001068933642)*x552))+(((-1.0)*gclwh9_10*x485))+x875+x890+((gclwh11_1*x546))+(((-1.0)*gclwh13_1*x520))+(((-0.01252412)*gclwh11_1*x476))+(((-1.0)*gclwh5_1*x489)));
op[59]=((((-1.0)*gclwh15_9*x583))+(((-0.0304)*gclwh7_13*x470))+(((0.0304)*pp*x481))+(((0.00518928)*x549))+(((0.00518928)*x543))+(((0.0608)*gclwh7_13*x469))+((gclwh9_13*x550))+(((0.000221452524)*x481))+(((-0.0608)*gclwh11_13*x476))+(((-0.000221452524)*x580))+(((-1.0)*x881))+(((-1.0)*x666))+x862+x870+(((0.0304)*gclwh9_13*x485))+(((-0.0608)*gclwh9_13*x488)));
op[60]=((((0.9138)*gclwh4_8*x476))+(((0.07799283)*x519))+(((-0.4569)*gclwh4_8*x500))+((gclwh14_8*x567))+(((-0.07799283)*x593))+(((-1.0)*gclwh4_8*x515))+(((-0.00332834402025)*x566))+(((-1.0)*x882))+(((0.4569)*gclwh14_8*x485))+(((-0.07799283)*x478))+(((-0.9138)*gclwh14_8*x488))+(((-0.4569)*gclwh12_8*x470))+x868+x860+(((0.9138)*gclwh12_8*x469))+(((-1.0)*x673)));
op[61]=((0.2213801325)+((gclwh3_3*x509))+(((-1.0)*x866))+(((-0.42819102)*gclwh14_3*x488))+(((-0.2068108875)*gclwh12_3*x470))+(((0.00155960496929498)*x569))+(((-0.2213801325)*gclwh1_3*x485))+(((-1.0)*gclwh12_3*x509))+((gclwh6_3*x571))+(((-1.0)*gclwh4_3*x594))+(((-1.0)*x893))+((gclwh12_11*x470))+(((-1.0)*gclwh14_11*x485))+(((0.42819102)*gclwh12_3*x469))+(((-0.2068108875)*gclwh4_3*x500))+(((-0.2213801325)*gclwh3_3*x470))+(((0.2068108875)*gclwh14_3*x485))+(((0.00155960496929498)*x601))+(((0.42819102)*gclwh1_3*x488))+x872+x892+(((0.42819102)*gclwh4_3*x476))+((gclwh4_11*x500))+(((0.42819102)*gclwh3_3*x469)));
op[62]=((0.053024565)+x886+(((-1.0)*x876)));
op[63]=((((-1.0)*x867))+(((0.4265)*gclwh12_2*x470))+(((-1.0)*gclwh6_2*x533))+(((0.00354979654425)*x566))+(((0.4265)*gclwh3_2*x470))+(((-1.0)*gclwh3_2*x599))+(((-1.0)*gclwh1_2*x526))+(((-0.4265)*gclwh14_2*x485))+(((-0.853)*gclwh3_2*x469))+(((0.4873)*gclwh4_8*x500))+(((0.4873)*gclwh12_8*x470))+(((-0.9746)*gclwh12_8*x469))+(((0.00310689149625)*x480))+(((0.00310689149625)*x503))+(((0.853)*gclwh14_2*x488))+(((-0.00354979654425)*x609))+(((-1.0)*gclwh14_2*x526))+(((0.9746)*gclwh14_8*x488))+((gclwh10_2*x589))+(((-0.853)*gclwh12_2*x469))+(((-0.4873)*gclwh14_8*x485))+(((0.4265)*pp*x480))+x877+(((-0.853)*gclwh1_2*x488))+(((0.4265)*gclwh1_2*x485))+(((0.07280355)*x497))+(((-0.853)*gclwh4_2*x476))+(((-0.9746)*gclwh4_8*x476))+(((0.00354979654425)*x573)));
op[64]=((((-1.0)*x868))+(((0.00518928)*x519))+(((-0.0304)*gclwh14_8*x485))+(((-0.0608)*gclwh12_8*x469))+(((0.000221452524)*x573))+(((0.0304)*gclwh12_8*x470))+(((-0.0608)*gclwh4_8*x476))+(((-1.0)*gclwh8_12*x583))+(((-1.0)*gclwh14_8*x550))+x860+x882+(((-0.00518928)*x478))+(((0.0304)*gclwh4_8*x500))+(((0.000221452524)*x566))+(((0.0608)*gclwh14_8*x488))+(((-1.0)*x673)));
op[65]=((-0.0135466825)+(((-1.0)*gclwh12_11*x470))+((gclwh6_3*x520))+(((4.561674317235e-5)*x569))+(((0.01252412)*gclwh3_3*x469))+(((0.0010225625)*gclwh4_3*x500))+(((4.561674317235e-5)*x601))+(((0.01252412)*gclwh1_3*x488))+(((-0.0135466825)*gclwh1_3*x485))+(((-0.0135466825)*gclwh3_3*x470))+(((0.01252412)*gclwh12_3*x469))+(((-1.0)*x893))+(((-1.0)*gclwh4_11*x500))+(((0.01252412)*gclwh4_3*x476))+((gclwh3_3*x474))+(((-1.0)*gclwh4_3*x546))+(((-0.0010225625)*gclwh14_3*x485))+(((0.0010225625)*gclwh12_3*x470))+(((-1.0)*gclwh12_3*x474))+x866+x892+((gclwh14_11*x485))+(((-1.0)*x872))+(((-0.01252412)*gclwh14_3*x488)));
op[66]=((-0.2213801325)+(((0.2068108875)*gclwh5_1*x500))+(((-1.0)*x865))+((gclwh11_1*x570))+(((-0.42819102)*gclwh5_1*x476))+(((-0.00155960496929498)*x484))+(((-1.0)*gclwh15_10*x485))+((gclwh2_1*x509))+(((-1.0)*x891))+(((-0.2213801325)*gclwh0_1*x485))+(((-0.42819102)*gclwh13_1*x469))+(((0.42819102)*gclwh2_1*x469))+((gclwh5_10*x500))+(((0.00155960496929498)*x612))+(((0.42819102)*gclwh15_1*x488))+(((0.2068108875)*gclwh13_1*x470))+(((-0.2213801325)*gclwh2_1*x470))+((gclwh13_10*x470))+x873+x894+(((-1.0)*gclwh7_1*x571))+((gclwh13_1*x509))+(((0.42819102)*gclwh0_1*x488))+(((-0.2068108875)*pp*x484))+((gclwh5_1*x594)));
op[67]=((((0.9138)*gclwh15_9*x488))+((x488*x495))+(((0.00332834402025)*x542))+((gclwh5_15*x557))+(((0.00332834402025)*x491))+(((-1.0)*gclwh9_7*x494))+(((-1.0)*gclwh11_7*x555))+(((0.11235)*gclwh13_15*x470))+((gclwh7_7*x545))+(((-0.9138)*gclwh13_9*x469))+(((0.07799283)*x603))+(((-1.0)*gclwh15_15*x537))+(((-0.07799283)*x614))+(((0.11235)*gclwh5_15*x500))+(((-0.9138)*gclwh5_9*x476))+(((-0.00332834402025)*x521))+(((0.07799283)*x473))+(((-1.0)*x469*x611))+(((-1.0)*x476*x597))+((x491*x560))+(((-0.4569)*gclwh15_9*x485))+(((-0.11235)*gclwh15_15*x485))+(((0.4569)*gclwh13_9*x470))+((gclwh13_15*x561)));
op[68]=((((-0.00310689149625)*x548))+(((-1.0)*x869))+((gclwh15_0*x526))+(((-0.9746)*gclwh5_9*x476))+(((-0.4265)*gclwh13_0*x470))+(((-0.07280355)*x496))+(((-0.00310689149625)*x584))+(((0.4265)*gclwh0_0*x485))+(((0.853)*gclwh5_0*x476))+(((-1.0)*gclwh0_0*x526))+(((0.9746)*gclwh15_9*x488))+(((0.853)*gclwh13_0*x469))+(((-0.4265)*gclwh5_0*x500))+(((-0.853)*gclwh0_0*x488))+(((0.4265)*gclwh2_0*x470))+(((-0.9746)*gclwh13_9*x469))+(((-0.853)*gclwh15_0*x488))+(((0.4873)*pp*x491))+((gclwh7_0*x533))+x880+(((-0.00310689149625)*x576))+(((-0.00354979654425)*x521))+(((0.4873)*gclwh13_9*x470))+(((-0.07280355)*x587))+(((-0.4873)*gclwh15_9*x485))+(((0.00354979654425)*x542))+(((-0.853)*gclwh2_0*x469))+(((0.4265)*gclwh15_0*x485))+(((0.00354979654425)*x491)));
op[69]=((0.053024565)+(((-1.0)*x885))+x878);
op[70]=((0.0135466825)+((gclwh13_1*x474))+(((0.01252412)*gclwh15_1*x488))+(((-1.0)*gclwh7_1*x520))+(((-1.0)*gclwh5_10*x500))+(((-0.01252412)*gclwh13_1*x469))+((gclwh15_10*x485))+(((-1.0)*x891))+(((4.561674317235e-5)*x612))+(((-0.0135466825)*gclwh0_1*x485))+((gclwh11_1*x489))+((gclwh2_1*x474))+(((-0.01252412)*gclwh5_1*x476))+(((-4.561674317235e-5)*x484))+((gclwh5_1*x546))+(((0.0010225625)*pp*x484))+(((-1.0)*gclwh13_10*x470))+(((0.01252412)*gclwh0_1*x488))+x865+x894+(((-0.0135466825)*gclwh2_1*x470))+(((-0.0010225625)*gclwh5_1*x500))+(((-0.0010225625)*gclwh13_1*x470))+(((0.01252412)*gclwh2_1*x469))+(((-1.0)*x873)));
IkReal x895=((0.0304)*pp);
IkReal x896=(gclwh13_9*r21);
IkReal x897=(gclwh5_9*r22);
IkReal x898=((0.0608)*pz);
IkReal x899=(gclwh15_9*r20);
IkReal x900=((0.2247)*pz);
IkReal x901=(gclwh13_15*r21);
IkReal x902=(gclwh15_15*r20);
IkReal x903=((0.11235)*pp);
IkReal x904=(gclwh5_15*r22);
op[71]=((((-1.0)*x903*x904))+(((-0.000221452524)*x897))+(((-0.000221452524)*x896))+(((0.00518928)*gclwh11_13*rxp2_2))+(((-1.0)*gclwh15_9*npx*x898))+(((-0.019178145)*gclwh11_7*rxp2_2))+(((-1.0)*x895*x897))+(((-1.0)*x895*x896))+((x895*x899))+((x902*x903))+(((0.00518928)*gclwh9_13*rxp0_2))+((gclwh5_15*npz*x900))+((gclwh13_15*npy*x900))+(((-0.000818427337875)*x901))+(((-0.000818427337875)*x904))+((gclwh13_9*npy*x898))+(((0.000818427337875)*x902))+(((0.019178145)*gclwh7_7*rxp1_2))+(((0.000221452524)*x899))+(((-1.0)*x901*x903))+(((-0.019178145)*gclwh9_7*rxp0_2))+(((-0.00518928)*gclwh7_13*rxp1_2))+((gclwh5_9*npz*x898))+(((-1.0)*gclwh15_15*npx*x900)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j11array[16], cj11array[16], sj11array[16], j12array[16], cj12array[16], sj12array[16], j13array[16], cj13array[16], sj13array[16];
int numsolutions = 0;
for(int ij11 = 0; ij11 < numroots; ij11 += 3)
{
IkReal htj11 = zeror[ij11+0], htj12 = zeror[ij11+1], htj13 = zeror[ij11+2];
if(isnan(htj11)||isnan(htj12)||isnan(htj13)){
continue;
}
j11array[numsolutions]=((2.0)*(atan(htj11)));
j12array[numsolutions]=((2.0)*(atan(htj12)));
j13array[numsolutions]=((2.0)*(atan(htj13)));
if(isinf(htj11)){
cj11array[numsolutions] = IKcos(j11array[numsolutions]);
sj11array[numsolutions] = IKsin(j11array[numsolutions]);
}
else{
IkReal x905=htj11*htj11;
CheckValue<IkReal> x906=IKPowWithIntegerCheck(((1.0)+x905),-1);
if(!x906.valid){
continue;
}
cj11array[numsolutions]=((x906.value)*(((1.0)+(((-1.0)*x905)))));
CheckValue<IkReal> x907=IKPowWithIntegerCheck(((1.0)+(htj11*htj11)),-1);
if(!x907.valid){
continue;
}
sj11array[numsolutions]=((2.0)*htj11*(x907.value));
}
if(isinf(htj12)){
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
}
else{
IkReal x908=htj12*htj12;
CheckValue<IkReal> x909=IKPowWithIntegerCheck(((1.0)+x908),-1);
if(!x909.valid){
continue;
}
cj12array[numsolutions]=((x909.value)*(((1.0)+(((-1.0)*x908)))));
CheckValue<IkReal> x910=IKPowWithIntegerCheck(((1.0)+(htj12*htj12)),-1);
if(!x910.valid){
continue;
}
sj12array[numsolutions]=((2.0)*htj12*(x910.value));
}
if(isinf(htj13)){
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
}
else{
IkReal x911=htj13*htj13;
CheckValue<IkReal> x912=IKPowWithIntegerCheck(((1.0)+x911),-1);
if(!x912.valid){
continue;
}
cj13array[numsolutions]=((x912.value)*(((1.0)+(((-1.0)*x911)))));
CheckValue<IkReal> x913=IKPowWithIntegerCheck(((1.0)+(htj13*htj13)),-1);
if(!x913.valid){
continue;
}
sj13array[numsolutions]=((2.0)*htj13*(x913.value));
}
if( j11array[numsolutions] > IKPI )
{
    j11array[numsolutions]-=IK2PI;
}
else if( j11array[numsolutions] < -IKPI )
{
    j11array[numsolutions]+=IK2PI;
}
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j11valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj11 = 16;
_nj12 = 1;
_nj13 = 1;
for(int ij11 = 0; ij11 < numsolutions; ++ij11)
    {
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
_ij12[0] = 0; _ij12[1] = -1;
_ij13[0] = 0; _ij13[1] = -1;
for(int iij11 = ij11+1; iij11 < numsolutions; ++iij11)
{
if( !j11valid[iij11] ) { continue; }
if( IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(cj12array[ij11]-cj12array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij11]-sj12array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(cj13array[ij11]-cj13array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij11]-sj13array[iij11]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j11valid[iij11]=false; _ij11[1] = iij11; _ij12[1] = 0; _ij13[1] = 0;  break; 
}
}
    j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];

    j12 = j12array[ij11]; cj12 = cj12array[ij11]; sj12 = sj12array[ij11];

    j13 = j13array[ij11]; cj13 = cj13array[ij11]; sj13 = sj13array[ij11];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j15eval[2];
j15eval[0]=((r20*r20)+(r21*r21));
j15eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x914=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x914);
rxp1_0=(pz*r11);
rxp1_1=(r01*x914);
j14eval[0]=cj13;
j14eval[1]=r22;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x915=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x915);
rxp1_0=(pz*r11);
rxp1_1=(r01*x915);
j14eval[0]=r22;
j14eval[1]=sj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x916=IKPowWithIntegerCheck(r22,-1);
if(!x916.valid){
continue;
}
CheckValue<IkReal> x917=IKPowWithIntegerCheck(sj13,-1);
if(!x917.valid){
continue;
}
sj14array[0]=((x916.value)*(x917.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12)))));
if( sj14array[0] >= -1-IKFAST_SINCOS_THRESH && sj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKasin(sj14array[0]);
    cj14array[0] = IKcos(j14array[0]);
    sj14array[1] = sj14array[0];
    j14array[1] = j14array[0] > 0 ? (IKPI-j14array[0]) : (-IKPI-j14array[0]);
    cj14array[1] = -cj14array[0];
}
else if( isnan(sj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j14)));
evalcond[1]=(((cj12*sj11))+((cj13*r22*(IKsin(j14))))+((cj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[1];
IkReal x918=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x918);
rxp1_0=(pz*r11);
rxp1_1=(r01*x918);
IkReal x919=(sj11*sj12);
IkReal x920=((4.0)*r12);
IkReal x921=((8.0)*sj13);
IkReal x922=(r01*sj14);
IkReal x923=(cj13*sj14);
IkReal x924=((4.0)*r02);
IkReal x925=((4.0)*sj13);
IkReal x926=(cj13*cj14);
IkReal x927=((4.0)*r00);
IkReal x928=((16.0)*r11);
IkReal x929=(cj11*cj12);
IkReal x930=((12.0)*cj14);
IkReal x931=((4.0)*r10);
IkReal x932=((16.0)*sj13);
IkReal x933=(r01*x925);
IkReal x934=(r11*x925);
IkReal x935=((8.0)*r11*sj14);
IkReal x936=(x926*x927);
IkReal x937=((12.0)*r02*x923);
IkReal x938=((12.0)*r12*x923);
IkReal x939=(x926*x931);
IkReal x940=(sj14*x929*x931);
IkReal x941=(sj14*x919*x931);
IkReal x942=(r12*x929*x930);
IkReal x943=(r12*x919*x930);
IkReal x944=(sj14*x927*x929);
IkReal x945=(r02*x919*x930);
IkReal x946=(r02*x929*x930);
IkReal x947=(sj14*x919*x927);
IkReal x948=(x934+x944);
IkReal x949=(x933+x941);
IkReal x950=(x936+x940);
IkReal x951=(x937+x943);
IkReal x952=(x939+x947);
IkReal x953=(x938+x946);
j15eval[0]=((((0.5)*(IKabs(((((-1.0)*x950))+(((-1.0)*x951))+x949+x942)))))+(((0.5)*(IKabs(((((-1.0)*cj14*x924*x929))+((cj14*x919*x924))+(((-1.0)*x920*x923))+(((-1.0)*x952))+x948)))))+(IKabs((((x919*x935))+(((-8.0)*r01*x926))+(((-1.0)*x929*x935))+(((-1.0)*r00*x921)))))+(((0.5)*(IKabs(((((-1.0)*cj14*x919*x920))+(((-1.0)*x950))+((cj14*x920*x929))+x949+(((-1.0)*x923*x924)))))))+(((0.5)*(IKabs(((((-1.0)*x948))+(((-1.0)*x953))+x952+x945)))))+(((0.5)*(IKabs(((((-1.0)*r10*x932))+(((-16.0)*x919*x922))+(((-1.0)*x926*x928))+(((16.0)*x922*x929)))))))+(((0.5)*(IKabs(((((-1.0)*sj14*x928*x929))+((sj14*x919*x928))+(((-16.0)*r01*x926))+(((-1.0)*r00*x932)))))))+(IKabs(((((-8.0)*r11*x926))+(((8.0)*x922*x929))+(((-1.0)*r10*x921))+(((-8.0)*x919*x922)))))+(((0.5)*(IKabs(((((-1.0)*x949))+(((-1.0)*x951))+x950+x942)))))+(((0.5)*(IKabs(((((-1.0)*x953))+(((-1.0)*x952))+x948+x945))))));
if( IKabs(j15eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j15evalpoly[1];
IkReal x954=(r10*sj13);
IkReal x955=((8.0)*r01);
IkReal x956=((4.0)*r00);
IkReal x957=(cj13*cj14);
IkReal x958=((16.0)*r01);
IkReal x959=((4.0)*r11*sj13);
IkReal x960=(cj11*cj12*sj14);
IkReal x961=(sj11*sj12*sj14);
IkReal x962=(cj13*r12*sj14);
IkReal x963=((4.0)*r10*x957);
IkReal x964=((12.0)*x962);
IkReal x965=((4.0)*x962);
IkReal x966=(cj14*r02*sj11*sj12);
IkReal x967=(cj11*cj12*cj14*r02);
IkReal x968=(x956*x960);
IkReal x969=(x956*x961);
IkReal x970=((12.0)*x966);
IkReal x971=((12.0)*x967);
IkReal x972=((4.0)*x966);
IkReal x973=((4.0)*x967);
IkReal x974=(x968+x959);
IkReal x975=(x973+x965);
IkReal x976=(x963+x969);
IkReal x977=(x971+x964);
IkReal x978=((((-8.0)*x954))+(((-1.0)*x955*x961))+(((-8.0)*r11*x957))+((x955*x960)));
op[0]=(x972+x974+(((-1.0)*x975))+(((-1.0)*x976)));
op[1]=x978;
op[2]=(x970+x974+(((-1.0)*x976))+(((-1.0)*x977)));
op[3]=((((-16.0)*r11*x957))+(((-1.0)*x958*x961))+(((-16.0)*x954))+((x958*x960)));
op[4]=(x970+x976+(((-1.0)*x974))+(((-1.0)*x977)));
op[5]=x978;
op[6]=(x972+x976+(((-1.0)*x974))+(((-1.0)*x975)));
polyroots6(op,zeror,numroots);
IkReal j15array[6], cj15array[6], sj15array[6], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IkReal htj15 = zeror[ij15];
tempj15array[0]=((2.0)*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
numsolutions++;
}
}
bool j15valid[6]={true,true,true,true,true,true};
_nj15 = 6;
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
if( !j15valid[ij15] )
{
    continue;
}
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
htj15 = IKtan(j15/2);

IkReal x979=((4.0)*cj14);
IkReal x980=(sj11*sj12);
IkReal x981=((4.0)*sj14);
IkReal x982=(cj13*r02);
IkReal x983=(r11*sj14);
IkReal x984=(cj11*cj12);
IkReal x985=(r00*sj13);
IkReal x986=((4.0)*r01*sj13);
IkReal x987=(cj13*cj14*r01);
IkReal x988=((12.0)*cj14*r12);
IkReal x989=(cj13*r00*x979);
IkReal x990=((12.0)*sj14*x982);
IkReal x991=(x981*x982);
IkReal x992=(r10*x980*x981);
IkReal x993=(r12*x979*x984);
IkReal x994=(r10*x981*x984);
IkReal x995=(x984*x988);
IkReal x996=(x980*x988);
IkReal x997=(r12*x979*x980);
IkReal x998=(x992+x986);
IkReal x999=(x994+x989);
IkReal x1000=(x990+x996);
IkReal x1001=(x991+x997);
IkReal x1002=((((-8.0)*x987))+(((-8.0)*x985))+(((8.0)*x980*x983))+(((-8.0)*x983*x984)));
j15evalpoly[0]=(((htj15*x1002))+((x1002*(htj15*htj15*htj15*htj15*htj15)))+(((htj15*htj15*htj15)*(((((-16.0)*x987))+(((-16.0)*x985))+(((-16.0)*x983*x984))+(((16.0)*x980*x983))))))+(((htj15*htj15*htj15*htj15*htj15*htj15)*(((((-1.0)*x1001))+(((-1.0)*x999))+x993+x998))))+(((-1.0)*x1001))+(((htj15*htj15*htj15*htj15)*(((((-1.0)*x1000))+(((-1.0)*x999))+x995+x998))))+(((htj15*htj15)*(((((-1.0)*x1000))+(((-1.0)*x998))+x995+x999))))+(((-1.0)*x998))+x993+x999);
if( IKabs(j15evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < numsolutions; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1003=(cj15*sj14);
IkReal x1004=(sj14*sj15);
if( IKabs((((r01*x1004))+(((-1.0)*r00*x1003))+(((-1.0)*cj14*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj14*r12))+(((-1.0)*r11*x1004))+((r10*x1003)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1004))+(((-1.0)*r00*x1003))+(((-1.0)*cj14*r02))))+IKsqr((((cj14*r12))+(((-1.0)*r11*x1004))+((r10*x1003))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r01*x1004))+(((-1.0)*r00*x1003))+(((-1.0)*cj14*r02))), (((cj14*r12))+(((-1.0)*r11*x1004))+((r10*x1003))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x1005=IKcos(j10);
IkReal x1006=IKsin(j10);
IkReal x1007=(sj11*sj12);
IkReal x1008=(sj13*sj15);
IkReal x1009=(cj14*r01);
IkReal x1010=(cj13*sj15);
IkReal x1011=((1.0)*cj14);
IkReal x1012=((0.08535)*sj15);
IkReal x1013=(cj15*r01);
IkReal x1014=(sj14*sj15);
IkReal x1015=(cj11*cj12);
IkReal x1016=((1.0)*sj12);
IkReal x1017=(cj12*sj11);
IkReal x1018=(cj15*sj13);
IkReal x1019=(r02*sj14);
IkReal x1020=((1.0)*sj13);
IkReal x1021=(cj13*cj15);
IkReal x1022=(r12*sj14);
IkReal x1023=(cj11*x1006);
IkReal x1024=((0.21325)*x1005);
IkReal x1025=((1.0)*cj15*sj14);
IkReal x1026=((1.0)*x1005);
IkReal x1027=(cj11*x1005);
IkReal x1028=((1.0)*x1006);
evalcond[0]=(x1005+(((-1.0)*r10*x1025))+(((-1.0)*r12*x1011))+((r11*x1014)));
evalcond[1]=((((-1.0)*r02*x1011))+(((-1.0)*x1028))+(((-1.0)*r00*x1025))+((r01*x1014)));
evalcond[2]=((((-0.11235)*x1006))+((x1015*x1024))+(((-1.0)*px))+(((-1.0)*r00*x1012))+(((0.24365)*x1027))+(((-1.0)*x1007*x1024))+(((-0.08535)*x1013)));
evalcond[3]=((((0.21325)*x1006*x1015))+(((-0.08535)*cj15*r11))+(((-0.21325)*x1006*x1007))+(((-1.0)*py))+(((0.24365)*x1023))+(((-1.0)*r10*x1012))+(((0.11235)*x1005)));
evalcond[4]=(((sj13*x1013))+((x1009*x1010))+(((-1.0)*r00*x1011*x1021))+(((-1.0)*x1015*x1026))+((x1005*x1007))+((r00*x1008))+((cj13*x1019)));
evalcond[5]=((((-1.0)*r10*x1011*x1021))+((cj14*r11*x1010))+((cj13*x1022))+(((-1.0)*x1015*x1028))+((x1006*x1007))+((r11*x1018))+((r10*x1008)));
evalcond[6]=(((cj14*r00*x1018))+(((-1.0)*x1019*x1020))+(((-1.0)*x1008*x1009))+(((-1.0)*x1016*x1027))+(((-1.0)*x1017*x1026))+((r00*x1010))+((cj13*x1013)));
evalcond[7]=((((-1.0)*r11*x1008*x1011))+((cj14*r10*x1018))+(((-1.0)*x1020*x1022))+((r11*x1021))+(((-1.0)*x1016*x1023))+(((-1.0)*x1017*x1028))+((r10*x1010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x1029=IKPowWithIntegerCheck(cj13,-1);
if(!x1029.valid){
continue;
}
CheckValue<IkReal> x1030=IKPowWithIntegerCheck(r22,-1);
if(!x1030.valid){
continue;
}
sj14array[0]=((-1.0)*(x1029.value)*(x1030.value)*((((cj12*sj11))+((cj11*sj12)))));
if( sj14array[0] >= -1-IKFAST_SINCOS_THRESH && sj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKasin(sj14array[0]);
    cj14array[0] = IKcos(j14array[0]);
    sj14array[1] = sj14array[0];
    j14array[1] = j14array[0] > 0 ? (IKPI-j14array[0]) : (-IKPI-j14array[0]);
    cj14array[1] = -cj14array[0];
}
else if( isnan(sj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j14)));
evalcond[1]=(((sj11*sj12))+(((-1.0)*r22*sj13*(IKsin(j14))))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[1];
IkReal x1031=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1031);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1031);
IkReal x1032=(sj11*sj12);
IkReal x1033=((4.0)*r12);
IkReal x1034=((8.0)*sj13);
IkReal x1035=(r01*sj14);
IkReal x1036=(cj13*sj14);
IkReal x1037=((4.0)*r02);
IkReal x1038=((4.0)*sj13);
IkReal x1039=(cj13*cj14);
IkReal x1040=((4.0)*r00);
IkReal x1041=((16.0)*r11);
IkReal x1042=(cj11*cj12);
IkReal x1043=((12.0)*cj14);
IkReal x1044=((4.0)*r10);
IkReal x1045=((16.0)*sj13);
IkReal x1046=(r01*x1038);
IkReal x1047=(r11*x1038);
IkReal x1048=((8.0)*r11*sj14);
IkReal x1049=(x1039*x1040);
IkReal x1050=((12.0)*r02*x1036);
IkReal x1051=((12.0)*r12*x1036);
IkReal x1052=(x1039*x1044);
IkReal x1053=(sj14*x1042*x1044);
IkReal x1054=(sj14*x1032*x1044);
IkReal x1055=(r12*x1042*x1043);
IkReal x1056=(r12*x1032*x1043);
IkReal x1057=(sj14*x1040*x1042);
IkReal x1058=(r02*x1032*x1043);
IkReal x1059=(r02*x1042*x1043);
IkReal x1060=(sj14*x1032*x1040);
IkReal x1061=(x1057+x1047);
IkReal x1062=(x1054+x1046);
IkReal x1063=(x1053+x1049);
IkReal x1064=(x1050+x1056);
IkReal x1065=(x1052+x1060);
IkReal x1066=(x1051+x1059);
j15eval[0]=((IKabs(((((-8.0)*r01*x1039))+(((-1.0)*x1042*x1048))+((x1032*x1048))+(((-1.0)*r00*x1034)))))+(((0.5)*(IKabs(((((-1.0)*r10*x1045))+(((-1.0)*x1039*x1041))+(((-16.0)*x1032*x1035))+(((16.0)*x1035*x1042)))))))+(IKabs(((((-1.0)*r10*x1034))+(((8.0)*x1035*x1042))+(((-8.0)*r11*x1039))+(((-8.0)*x1032*x1035)))))+(((0.5)*(IKabs((x1058+x1065+(((-1.0)*x1061))+(((-1.0)*x1066)))))))+(((0.5)*(IKabs((x1058+x1061+(((-1.0)*x1066))+(((-1.0)*x1065)))))))+(((0.5)*(IKabs(((((-1.0)*cj14*x1037*x1042))+(((-1.0)*x1033*x1036))+x1061+(((-1.0)*x1065))+((cj14*x1032*x1037)))))))+(((0.5)*(IKabs((x1055+x1062+(((-1.0)*x1064))+(((-1.0)*x1063)))))))+(((0.5)*(IKabs((x1055+x1063+(((-1.0)*x1064))+(((-1.0)*x1062)))))))+(((0.5)*(IKabs(((((-1.0)*r00*x1045))+(((-1.0)*sj14*x1041*x1042))+((sj14*x1032*x1041))+(((-16.0)*r01*x1039)))))))+(((0.5)*(IKabs((x1062+(((-1.0)*cj14*x1032*x1033))+(((-1.0)*x1036*x1037))+(((-1.0)*x1063))+((cj14*x1033*x1042))))))));
if( IKabs(j15eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j15evalpoly[1];
IkReal x1067=(r10*sj13);
IkReal x1068=((8.0)*r01);
IkReal x1069=((4.0)*r00);
IkReal x1070=(cj13*cj14);
IkReal x1071=((16.0)*r01);
IkReal x1072=((4.0)*r11*sj13);
IkReal x1073=(cj11*cj12*sj14);
IkReal x1074=(sj11*sj12*sj14);
IkReal x1075=(cj13*r12*sj14);
IkReal x1076=((4.0)*r10*x1070);
IkReal x1077=((12.0)*x1075);
IkReal x1078=((4.0)*x1075);
IkReal x1079=(cj14*r02*sj11*sj12);
IkReal x1080=(cj11*cj12*cj14*r02);
IkReal x1081=(x1069*x1073);
IkReal x1082=(x1069*x1074);
IkReal x1083=((12.0)*x1079);
IkReal x1084=((12.0)*x1080);
IkReal x1085=((4.0)*x1079);
IkReal x1086=((4.0)*x1080);
IkReal x1087=(x1072+x1081);
IkReal x1088=(x1078+x1086);
IkReal x1089=(x1076+x1082);
IkReal x1090=(x1077+x1084);
IkReal x1091=(((x1068*x1073))+(((-1.0)*x1068*x1074))+(((-8.0)*x1067))+(((-8.0)*r11*x1070)));
op[0]=(x1087+x1085+(((-1.0)*x1088))+(((-1.0)*x1089)));
op[1]=x1091;
op[2]=(x1087+x1083+(((-1.0)*x1090))+(((-1.0)*x1089)));
op[3]=((((-1.0)*x1071*x1074))+((x1071*x1073))+(((-16.0)*r11*x1070))+(((-16.0)*x1067)));
op[4]=(x1083+x1089+(((-1.0)*x1090))+(((-1.0)*x1087)));
op[5]=x1091;
op[6]=(x1085+x1089+(((-1.0)*x1087))+(((-1.0)*x1088)));
polyroots6(op,zeror,numroots);
IkReal j15array[6], cj15array[6], sj15array[6], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IkReal htj15 = zeror[ij15];
tempj15array[0]=((2.0)*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
numsolutions++;
}
}
bool j15valid[6]={true,true,true,true,true,true};
_nj15 = 6;
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
if( !j15valid[ij15] )
{
    continue;
}
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
htj15 = IKtan(j15/2);

IkReal x1092=((4.0)*cj14);
IkReal x1093=(sj11*sj12);
IkReal x1094=((4.0)*sj14);
IkReal x1095=(cj13*r02);
IkReal x1096=(r11*sj14);
IkReal x1097=(cj11*cj12);
IkReal x1098=(r00*sj13);
IkReal x1099=((4.0)*r01*sj13);
IkReal x1100=(cj13*cj14*r01);
IkReal x1101=((12.0)*cj14*r12);
IkReal x1102=(cj13*r00*x1092);
IkReal x1103=((12.0)*sj14*x1095);
IkReal x1104=(x1094*x1095);
IkReal x1105=(r10*x1093*x1094);
IkReal x1106=(r12*x1092*x1097);
IkReal x1107=(r10*x1094*x1097);
IkReal x1108=(x1097*x1101);
IkReal x1109=(x1093*x1101);
IkReal x1110=(r12*x1092*x1093);
IkReal x1111=(x1105+x1099);
IkReal x1112=(x1107+x1102);
IkReal x1113=(x1103+x1109);
IkReal x1114=(x1104+x1110);
IkReal x1115=((((-8.0)*x1096*x1097))+(((-8.0)*x1098))+(((-8.0)*x1100))+(((8.0)*x1093*x1096)));
j15evalpoly[0]=(x1106+x1112+((x1115*(htj15*htj15*htj15*htj15*htj15)))+(((htj15*htj15*htj15)*(((((-16.0)*x1096*x1097))+(((16.0)*x1093*x1096))+(((-16.0)*x1100))+(((-16.0)*x1098))))))+((htj15*x1115))+(((htj15*htj15*htj15*htj15*htj15*htj15)*((x1106+x1111+(((-1.0)*x1114))+(((-1.0)*x1112))))))+(((htj15*htj15)*((x1108+x1112+(((-1.0)*x1113))+(((-1.0)*x1111))))))+(((htj15*htj15*htj15*htj15)*((x1108+x1111+(((-1.0)*x1112))+(((-1.0)*x1113))))))+(((-1.0)*x1114))+(((-1.0)*x1111)));
if( IKabs(j15evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < numsolutions; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1116=(cj15*sj14);
IkReal x1117=(sj14*sj15);
if( IKabs((((r01*x1117))+(((-1.0)*r00*x1116))+(((-1.0)*cj14*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj14*r12))+(((-1.0)*r11*x1117))+((r10*x1116)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1117))+(((-1.0)*r00*x1116))+(((-1.0)*cj14*r02))))+IKsqr((((cj14*r12))+(((-1.0)*r11*x1117))+((r10*x1116))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r01*x1117))+(((-1.0)*r00*x1116))+(((-1.0)*cj14*r02))), (((cj14*r12))+(((-1.0)*r11*x1117))+((r10*x1116))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x1118=IKcos(j10);
IkReal x1119=IKsin(j10);
IkReal x1120=(sj11*sj12);
IkReal x1121=(sj13*sj15);
IkReal x1122=(cj14*r01);
IkReal x1123=(cj13*sj15);
IkReal x1124=((1.0)*cj14);
IkReal x1125=((0.08535)*sj15);
IkReal x1126=(cj15*r01);
IkReal x1127=(sj14*sj15);
IkReal x1128=(cj11*cj12);
IkReal x1129=((1.0)*sj12);
IkReal x1130=(cj12*sj11);
IkReal x1131=(cj15*sj13);
IkReal x1132=(r02*sj14);
IkReal x1133=((1.0)*sj13);
IkReal x1134=(cj13*cj15);
IkReal x1135=(r12*sj14);
IkReal x1136=(cj11*x1119);
IkReal x1137=((0.21325)*x1118);
IkReal x1138=((1.0)*cj15*sj14);
IkReal x1139=((1.0)*x1118);
IkReal x1140=(cj11*x1118);
IkReal x1141=((1.0)*x1119);
evalcond[0]=(x1118+(((-1.0)*r12*x1124))+(((-1.0)*r10*x1138))+((r11*x1127)));
evalcond[1]=(((r01*x1127))+(((-1.0)*x1141))+(((-1.0)*r02*x1124))+(((-1.0)*r00*x1138)));
evalcond[2]=((((-0.08535)*x1126))+(((-0.11235)*x1119))+(((0.24365)*x1140))+(((-1.0)*px))+((x1128*x1137))+(((-1.0)*r00*x1125))+(((-1.0)*x1120*x1137)));
evalcond[3]=((((0.21325)*x1119*x1128))+(((0.24365)*x1136))+(((-0.08535)*cj15*r11))+(((-0.21325)*x1119*x1120))+(((-1.0)*r10*x1125))+(((-1.0)*py))+(((0.11235)*x1118)));
evalcond[4]=(((r00*x1121))+(((-1.0)*r00*x1124*x1134))+(((-1.0)*x1128*x1139))+((cj13*x1132))+((x1122*x1123))+((x1118*x1120))+((sj13*x1126)));
evalcond[5]=(((r10*x1121))+(((-1.0)*x1128*x1141))+(((-1.0)*r10*x1124*x1134))+((x1119*x1120))+((cj13*x1135))+((cj14*r11*x1123))+((r11*x1131)));
evalcond[6]=(((r00*x1123))+(((-1.0)*x1129*x1140))+(((-1.0)*x1130*x1139))+(((-1.0)*x1121*x1122))+(((-1.0)*x1132*x1133))+((cj14*r00*x1131))+((cj13*x1126)));
evalcond[7]=(((r10*x1123))+(((-1.0)*r11*x1121*x1124))+(((-1.0)*x1130*x1141))+((cj14*r10*x1131))+((r11*x1134))+(((-1.0)*x1133*x1135))+(((-1.0)*x1129*x1136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x1142=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1142);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1142);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j14eval[0]=cj13;
j14eval[1]=r22;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x1143=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1143);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1143);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j14eval[0]=r22;
j14eval[1]=sj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x1144=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1144);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1144);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj13=0;
cj13=1.0;
j13=0;
j14eval[0]=r22;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x1145=IKPowWithIntegerCheck(r22,-1);
if(!x1145.valid){
continue;
}
sj14array[0]=((-1.0)*(x1145.value)*((((cj12*sj11))+((cj11*sj12)))));
if( sj14array[0] >= -1-IKFAST_SINCOS_THRESH && sj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKasin(sj14array[0]);
    cj14array[0] = IKcos(j14array[0]);
    sj14array[1] = sj14array[0];
    j14array[1] = j14array[0] > 0 ? (IKPI-j14array[0]) : (-IKPI-j14array[0]);
    cj14array[1] = -cj14array[0];
}
else if( isnan(sj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[1];
IkReal x1146=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1146);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1146);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj13=0;
cj13=1.0;
j13=0;
j15eval[0]=cj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x1148 = IKatan2WithCheck(IkReal(((-1.0)*cj14*r00)),IkReal((cj14*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1148.valid){
continue;
}
IkReal x1147=x1148.value;
j15array[0]=((-1.0)*x1147);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x1147)));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*cj14*r10*(IKcos(j15))))+((cj14*r11*(IKsin(j15)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1149=(cj15*sj14);
IkReal x1150=(sj14*sj15);
if( IKabs(((((-1.0)*r00*x1149))+((r01*x1150)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1150))+((r10*x1149)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1149))+((r01*x1150))))+IKsqr(((((-1.0)*r11*x1150))+((r10*x1149))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r00*x1149))+((r01*x1150))), ((((-1.0)*r11*x1150))+((r10*x1149))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1151=IKcos(j10);
IkReal x1152=IKsin(j10);
IkReal x1153=(sj14*sj15);
IkReal x1154=(r10*sj15);
IkReal x1155=((1.0)*sj12);
IkReal x1156=(r00*sj15);
IkReal x1157=((0.08535)*cj15);
IkReal x1158=(cj11*x1152);
IkReal x1159=((1.0)*cj15*sj14);
IkReal x1160=((1.0)*cj12*sj11);
IkReal x1161=(cj11*x1151);
evalcond[0]=(x1151+((r11*x1153))+(((-1.0)*r10*x1159)));
evalcond[1]=((((-1.0)*r00*x1159))+(((-1.0)*x1152))+((r01*x1153)));
evalcond[2]=(x1156+((cj15*r01))+(((-1.0)*x1151*x1160))+(((-1.0)*x1155*x1161)));
evalcond[3]=(x1154+(((-1.0)*x1155*x1158))+((cj15*r11))+(((-1.0)*x1152*x1160)));
evalcond[4]=((((0.24365)*x1161))+(((-0.11235)*x1152))+(((-1.0)*r01*x1157))+(((-1.0)*px))+(((-0.08535)*x1156)));
evalcond[5]=((((0.11235)*x1151))+(((-1.0)*py))+(((0.24365)*x1158))+(((-1.0)*r11*x1157))+(((-0.08535)*x1154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x1162=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1162);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1162);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j14eval[0]=r22;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x1163=IKPowWithIntegerCheck(r22,-1);
if(!x1163.valid){
continue;
}
sj14array[0]=((x1163.value)*((((cj12*sj11))+((cj11*sj12)))));
if( sj14array[0] >= -1-IKFAST_SINCOS_THRESH && sj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKasin(sj14array[0]);
    cj14array[0] = IKcos(j14array[0]);
    sj14array[1] = sj14array[0];
    j14array[1] = j14array[0] > 0 ? (IKPI-j14array[0]) : (-IKPI-j14array[0]);
    cj14array[1] = -cj14array[0];
}
else if( isnan(sj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[1];
IkReal x1164=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1164);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1164);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j15eval[0]=cj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x1166 = IKatan2WithCheck(IkReal((cj14*r00)),IkReal(((-1.0)*cj14*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1166.valid){
continue;
}
IkReal x1165=x1166.value;
j15array[0]=((-1.0)*x1165);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x1165)));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[1];
evalcond[0]=(((cj14*r10*(IKcos(j15))))+(((-1.0)*cj14*r11*(IKsin(j15)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1167=(cj15*sj14);
IkReal x1168=(sj14*sj15);
if( IKabs((((r01*x1168))+(((-1.0)*r00*x1167)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1167))+(((-1.0)*r11*x1168)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1168))+(((-1.0)*r00*x1167))))+IKsqr((((r10*x1167))+(((-1.0)*r11*x1168))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r01*x1168))+(((-1.0)*r00*x1167))), (((r10*x1167))+(((-1.0)*r11*x1168))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1169=IKcos(j10);
IkReal x1170=IKsin(j10);
IkReal x1171=((1.0)*cj15);
IkReal x1172=(sj14*sj15);
IkReal x1173=(r10*sj15);
IkReal x1174=((0.08535)*cj15);
IkReal x1175=((1.0)*sj12);
IkReal x1176=(r00*sj15);
IkReal x1177=(cj11*x1170);
IkReal x1178=((1.0)*cj12*sj11);
IkReal x1179=(cj11*x1169);
evalcond[0]=(x1169+(((-1.0)*r10*sj14*x1171))+((r11*x1172)));
evalcond[1]=((((-1.0)*r00*sj14*x1171))+((r01*x1172))+(((-1.0)*x1170)));
evalcond[2]=((((-0.08535)*x1176))+(((-1.0)*px))+(((-1.0)*r01*x1174))+(((0.24365)*x1179))+(((-0.11235)*x1170)));
evalcond[3]=((((-0.08535)*x1173))+(((-1.0)*r11*x1174))+(((-1.0)*py))+(((0.11235)*x1169))+(((0.24365)*x1177)));
evalcond[4]=((((-1.0)*r01*x1171))+(((-1.0)*x1169*x1178))+(((-1.0)*x1175*x1179))+(((-1.0)*x1176)));
evalcond[5]=((((-1.0)*r11*x1171))+(((-1.0)*x1170*x1178))+(((-1.0)*x1175*x1177))+(((-1.0)*x1173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x1180=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1180);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1180);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j14eval[0]=r22;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x1181=IKPowWithIntegerCheck(r22,-1);
if(!x1181.valid){
continue;
}
sj14array[0]=((x1181.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12)))));
if( sj14array[0] >= -1-IKFAST_SINCOS_THRESH && sj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKasin(sj14array[0]);
    cj14array[0] = IKcos(j14array[0]);
    sj14array[1] = sj14array[0];
    j14array[1] = j14array[0] > 0 ? (IKPI-j14array[0]) : (-IKPI-j14array[0]);
    cj14array[1] = -cj14array[0];
}
else if( isnan(sj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[1];
IkReal x1182=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1182);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1182);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j15eval[0]=cj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x1184 = IKatan2WithCheck(IkReal((cj14*r00)),IkReal(((-1.0)*cj14*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1184.valid){
continue;
}
IkReal x1183=x1184.value;
j15array[0]=((-1.0)*x1183);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x1183)));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[1];
evalcond[0]=(((cj14*r10*(IKcos(j15))))+(((-1.0)*cj14*r11*(IKsin(j15)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1185=(cj15*sj14);
IkReal x1186=(sj14*sj15);
if( IKabs((((r01*x1186))+(((-1.0)*r00*x1185)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1185))+(((-1.0)*r11*x1186)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1186))+(((-1.0)*r00*x1185))))+IKsqr((((r10*x1185))+(((-1.0)*r11*x1186))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r01*x1186))+(((-1.0)*r00*x1185))), (((r10*x1185))+(((-1.0)*r11*x1186))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1187=IKcos(j10);
IkReal x1188=IKsin(j10);
IkReal x1189=(sj11*sj12);
IkReal x1190=(sj14*sj15);
IkReal x1191=(cj11*cj12);
IkReal x1192=(r10*sj15);
IkReal x1193=(r00*sj15);
IkReal x1194=((0.08535)*cj15);
IkReal x1195=(cj11*x1188);
IkReal x1196=((0.21325)*x1187);
IkReal x1197=((1.0)*cj15*sj14);
evalcond[0]=(x1187+(((-1.0)*r10*x1197))+((r11*x1190)));
evalcond[1]=((((-1.0)*r00*x1197))+((r01*x1190))+(((-1.0)*x1188)));
evalcond[2]=(((x1187*x1189))+x1193+((cj15*r01))+(((-1.0)*x1187*x1191)));
evalcond[3]=(x1192+((cj15*r11))+((x1188*x1189))+(((-1.0)*x1188*x1191)));
evalcond[4]=((((-1.0)*x1189*x1196))+(((-0.08535)*x1193))+(((0.24365)*cj11*x1187))+(((-1.0)*px))+((x1191*x1196))+(((-0.11235)*x1188))+(((-1.0)*r01*x1194)));
evalcond[5]=((((0.21325)*x1188*x1191))+(((-0.08535)*x1192))+(((0.24365)*x1195))+(((-1.0)*py))+(((0.11235)*x1187))+(((-0.21325)*x1188*x1189))+(((-1.0)*r11*x1194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x1198=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1198);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1198);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j14eval[0]=r22;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x1199=IKPowWithIntegerCheck(r22,-1);
if(!x1199.valid){
continue;
}
sj14array[0]=((-1.0)*(x1199.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12)))));
if( sj14array[0] >= -1-IKFAST_SINCOS_THRESH && sj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKasin(sj14array[0]);
    cj14array[0] = IKcos(j14array[0]);
    sj14array[1] = sj14array[0];
    j14array[1] = j14array[0] > 0 ? (IKPI-j14array[0]) : (-IKPI-j14array[0]);
    cj14array[1] = -cj14array[0];
}
else if( isnan(sj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[1];
IkReal x1200=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1200);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1200);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j15eval[0]=cj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x1202 = IKatan2WithCheck(IkReal(((-1.0)*cj14*r00)),IkReal((cj14*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1202.valid){
continue;
}
IkReal x1201=x1202.value;
j15array[0]=((-1.0)*x1201);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x1201)));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*cj14*r10*(IKcos(j15))))+((cj14*r11*(IKsin(j15)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1203=(cj15*sj14);
IkReal x1204=(sj14*sj15);
if( IKabs(((((-1.0)*r00*x1203))+((r01*x1204)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1203))+(((-1.0)*r11*x1204)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1203))+((r01*x1204))))+IKsqr((((r10*x1203))+(((-1.0)*r11*x1204))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r00*x1203))+((r01*x1204))), (((r10*x1203))+(((-1.0)*r11*x1204))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1205=IKcos(j10);
IkReal x1206=IKsin(j10);
IkReal x1207=(sj11*sj12);
IkReal x1208=((1.0)*cj15);
IkReal x1209=(sj14*sj15);
IkReal x1210=(cj11*cj12);
IkReal x1211=(r00*sj15);
IkReal x1212=(r10*sj15);
IkReal x1213=((0.08535)*cj15);
IkReal x1214=(cj11*x1206);
IkReal x1215=((0.21325)*x1205);
evalcond[0]=(x1205+((r11*x1209))+(((-1.0)*r10*sj14*x1208)));
evalcond[1]=((((-1.0)*r00*sj14*x1208))+(((-1.0)*x1206))+((r01*x1209)));
evalcond[2]=((((-1.0)*x1205*x1210))+(((-1.0)*r01*x1208))+((x1205*x1207))+(((-1.0)*x1211)));
evalcond[3]=((((-1.0)*r11*x1208))+(((-1.0)*x1206*x1210))+((x1206*x1207))+(((-1.0)*x1212)));
evalcond[4]=((((-1.0)*x1207*x1215))+((x1210*x1215))+(((-1.0)*r01*x1213))+(((-1.0)*px))+(((0.24365)*cj11*x1205))+(((-0.08535)*x1211))+(((-0.11235)*x1206)));
evalcond[5]=((((0.21325)*x1206*x1210))+(((-1.0)*py))+(((0.11235)*x1205))+(((0.24365)*x1214))+(((-1.0)*r11*x1213))+(((-0.08535)*x1212))+(((-0.21325)*x1206*x1207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10, j14, j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x1216=IKPowWithIntegerCheck(r22,-1);
if(!x1216.valid){
continue;
}
CheckValue<IkReal> x1217=IKPowWithIntegerCheck(sj13,-1);
if(!x1217.valid){
continue;
}
sj14array[0]=((x1216.value)*(x1217.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12)))));
if( sj14array[0] >= -1-IKFAST_SINCOS_THRESH && sj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKasin(sj14array[0]);
    cj14array[0] = IKcos(j14array[0]);
    sj14array[1] = sj14array[0];
    j14array[1] = j14array[0] > 0 ? (IKPI-j14array[0]) : (-IKPI-j14array[0]);
    cj14array[1] = -cj14array[0];
}
else if( isnan(sj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j14)));
evalcond[1]=(((cj12*sj11))+((cj13*r22*(IKsin(j14))))+((cj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[1];
IkReal x1218=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1218);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1218);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j15eval[0]=((((0.5)*(IKabs(((((4.0)*cj11*r01*sj12*sj13))+(((-4.0)*cj11*cj12*cj13*r01))+(((-4.0)*cj11*cj12*cj14*r00*sj13))+(((-4.0)*cj11*cj13*cj14*r00*sj12))+(((-4.0)*cj12*cj13*cj14*r00*sj11))+(((4.0)*cj12*r01*sj11*sj13))+(((4.0)*cj14*r00*sj11*sj12*sj13))+(((4.0)*cj13*r01*sj11*sj12)))))))+(((0.5)*(IKabs(((((16.0)*cj11*r10*sj12*sj13))+(((-16.0)*cj11*cj12*cj13*r10))+(((16.0)*cj11*cj13*cj14*r11*sj12))+(((16.0)*cj11*cj12*cj14*r11*sj13))+(((16.0)*cj13*r10*sj11*sj12))+(((-16.0)*cj14*r11*sj11*sj12*sj13))+(((16.0)*cj12*cj13*cj14*r11*sj11))+(((16.0)*cj12*r10*sj11*sj13)))))))+(IKabs(((((4.0)*cj11*cj12*cj14*r10*sj13))+(((-4.0)*cj12*r11*sj11*sj13))+(((4.0)*cj11*cj12*cj13*r11))+(((4.0)*cj12*cj13*cj14*r10*sj11))+(((4.0)*cj11*cj13*cj14*r10*sj12))+(((-4.0)*cj13*r11*sj11*sj12))+(((-4.0)*cj14*r10*sj11*sj12*sj13))+(((-4.0)*cj11*r11*sj12*sj13)))))+(IKabs(((((8.0)*cj11*cj13*cj14*r01*sj12))+(((8.0)*cj11*r00*sj12*sj13))+(((-8.0)*cj14*r01*sj11*sj12*sj13))+(((-8.0)*cj11*cj12*cj13*r00))+(((8.0)*cj13*r00*sj11*sj12))+(((8.0)*cj11*cj12*cj14*r01*sj13))+(((8.0)*cj12*cj13*cj14*r01*sj11))+(((8.0)*cj12*r00*sj11*sj13)))))+(((0.5)*(IKabs(((((16.0)*cj11*cj13*cj14*r01*sj12))+(((16.0)*cj11*cj12*cj14*r01*sj13))+(((-16.0)*cj11*cj12*cj13*r00))+(((16.0)*cj11*r00*sj12*sj13))+(((-16.0)*cj14*r01*sj11*sj12*sj13))+(((16.0)*cj13*r00*sj11*sj12))+(((16.0)*cj12*cj13*cj14*r01*sj11))+(((16.0)*cj12*r00*sj11*sj13)))))))+(((0.5)*(IKabs(((((4.0)*cj14*r10*sj11*sj12*sj13))+(((4.0)*cj13*r11*sj11*sj12))+(((-4.0)*cj11*cj13*cj14*r10*sj12))+(((4.0)*cj11*r11*sj12*sj13))+(((-4.0)*cj11*cj12*cj13*r11))+(((-4.0)*cj12*cj13*cj14*r10*sj11))+(((-4.0)*cj11*cj12*cj14*r10*sj13))+(((4.0)*cj12*r11*sj11*sj13)))))))+(IKabs(((((-4.0)*cj12*r01*sj11*sj13))+(((-4.0)*cj14*r00*sj11*sj12*sj13))+(((4.0)*cj11*cj12*cj13*r01))+(((4.0)*cj11*cj12*cj14*r00*sj13))+(((-4.0)*cj13*r01*sj11*sj12))+(((-4.0)*cj11*r01*sj12*sj13))+(((4.0)*cj12*cj13*cj14*r00*sj11))+(((4.0)*cj11*cj13*cj14*r00*sj12)))))+(IKabs(((((8.0)*cj11*cj12*cj14*r11*sj13))+(((8.0)*cj12*cj13*cj14*r11*sj11))+(((-8.0)*cj11*cj12*cj13*r10))+(((8.0)*cj11*cj13*cj14*r11*sj12))+(((8.0)*cj13*r10*sj11*sj12))+(((8.0)*cj11*r10*sj12*sj13))+(((-8.0)*cj14*r11*sj11*sj12*sj13))+(((8.0)*cj12*r10*sj11*sj13))))));
if( IKabs(j15eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j10, j15]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j15evalpoly[1];
IkReal x1219=(cj14*sj13);
IkReal x1220=(cj13*cj14);
IkReal x1221=(cj12*sj11);
IkReal x1222=((8.0)*r01);
IkReal x1223=((16.0)*cj13);
IkReal x1224=((8.0)*cj13);
IkReal x1225=(r00*sj13);
IkReal x1226=(sj11*sj12);
IkReal x1227=((4.0)*r00);
IkReal x1228=((16.0)*r01);
IkReal x1229=(cj11*sj12);
IkReal x1230=(cj11*cj12);
IkReal x1231=(sj12*x1222);
IkReal x1232=(r00*x1230);
IkReal x1233=((4.0)*r01*sj13);
IkReal x1234=((4.0)*cj13*r01);
IkReal x1235=(((x1219*x1226*x1227))+((x1226*x1234))+((x1221*x1233))+((x1229*x1233)));
IkReal x1236=(((x1219*x1227*x1230))+((x1220*x1221*x1227))+((x1220*x1227*x1229))+((x1230*x1234)));
IkReal x1237=(x1236+(((-1.0)*x1235)));
IkReal x1238=((((-1.0)*x1224*x1232))+((r00*x1224*x1226))+(((8.0)*x1225*x1229))+((x1220*x1222*x1229))+((x1220*x1221*x1222))+(((-1.0)*x1219*x1222*x1226))+(((8.0)*x1221*x1225))+((x1219*x1222*x1230)));
IkReal x1239=(x1235+(((-1.0)*x1236)));
op[0]=x1237;
op[1]=x1238;
op[2]=x1237;
op[3]=((((-1.0)*x1223*x1232))+(((16.0)*x1225*x1229))+((r00*x1223*x1226))+((x1220*x1228*x1229))+(((16.0)*x1221*x1225))+(((-1.0)*x1219*x1226*x1228))+((x1220*x1221*x1228))+((x1219*x1228*x1230)));
op[4]=x1239;
op[5]=x1238;
op[6]=x1239;
polyroots6(op,zeror,numroots);
IkReal j15array[6], cj15array[6], sj15array[6], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IkReal htj15 = zeror[ij15];
tempj15array[0]=((2.0)*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
numsolutions++;
}
}
bool j15valid[6]={true,true,true,true,true,true};
_nj15 = 6;
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
if( !j15valid[ij15] )
{
    continue;
}
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
htj15 = IKtan(j15/2);

j15evalpoly[0]=((((4.0)*cj14*r10*sj11*sj12*sj13))+(((4.0)*cj13*r11*sj11*sj12))+(((-4.0)*cj11*cj13*cj14*r10*sj12))+(((4.0)*cj11*r11*sj12*sj13))+(((-4.0)*cj11*cj12*cj13*r11))+(((htj15*htj15*htj15*htj15)*(((((4.0)*cj11*cj12*cj14*r10*sj13))+(((-4.0)*cj12*r11*sj11*sj13))+(((4.0)*cj11*cj12*cj13*r11))+(((4.0)*cj12*cj13*cj14*r10*sj11))+(((4.0)*cj11*cj13*cj14*r10*sj12))+(((-4.0)*cj13*r11*sj11*sj12))+(((-4.0)*cj14*r10*sj11*sj12*sj13))+(((-4.0)*cj11*r11*sj12*sj13))))))+(((htj15*htj15*htj15*htj15*htj15*htj15)*(((((4.0)*cj11*cj12*cj14*r10*sj13))+(((-4.0)*cj12*r11*sj11*sj13))+(((4.0)*cj11*cj12*cj13*r11))+(((4.0)*cj12*cj13*cj14*r10*sj11))+(((4.0)*cj11*cj13*cj14*r10*sj12))+(((-4.0)*cj13*r11*sj11*sj12))+(((-4.0)*cj14*r10*sj11*sj12*sj13))+(((-4.0)*cj11*r11*sj12*sj13))))))+(((-4.0)*cj12*cj13*cj14*r10*sj11))+(((htj15*htj15*htj15*htj15*htj15)*(((((8.0)*cj11*cj12*cj14*r11*sj13))+(((8.0)*cj12*cj13*cj14*r11*sj11))+(((-8.0)*cj11*cj12*cj13*r10))+(((8.0)*cj11*cj13*cj14*r11*sj12))+(((8.0)*cj13*r10*sj11*sj12))+(((8.0)*cj11*r10*sj12*sj13))+(((-8.0)*cj14*r11*sj11*sj12*sj13))+(((8.0)*cj12*r10*sj11*sj13))))))+(((htj15*htj15)*(((((4.0)*cj14*r10*sj11*sj12*sj13))+(((4.0)*cj13*r11*sj11*sj12))+(((-4.0)*cj11*cj13*cj14*r10*sj12))+(((4.0)*cj11*r11*sj12*sj13))+(((-4.0)*cj11*cj12*cj13*r11))+(((-4.0)*cj12*cj13*cj14*r10*sj11))+(((-4.0)*cj11*cj12*cj14*r10*sj13))+(((4.0)*cj12*r11*sj11*sj13))))))+((htj15*(((((8.0)*cj11*cj12*cj14*r11*sj13))+(((8.0)*cj12*cj13*cj14*r11*sj11))+(((-8.0)*cj11*cj12*cj13*r10))+(((8.0)*cj11*cj13*cj14*r11*sj12))+(((8.0)*cj13*r10*sj11*sj12))+(((8.0)*cj11*r10*sj12*sj13))+(((-8.0)*cj14*r11*sj11*sj12*sj13))+(((8.0)*cj12*r10*sj11*sj13))))))+(((-4.0)*cj11*cj12*cj14*r10*sj13))+(((4.0)*cj12*r11*sj11*sj13))+(((htj15*htj15*htj15)*(((((16.0)*cj11*r10*sj12*sj13))+(((-16.0)*cj11*cj12*cj13*r10))+(((16.0)*cj11*cj13*cj14*r11*sj12))+(((16.0)*cj11*cj12*cj14*r11*sj13))+(((16.0)*cj13*r10*sj11*sj12))+(((-16.0)*cj14*r11*sj11*sj12*sj13))+(((16.0)*cj12*cj13*cj14*r11*sj11))+(((16.0)*cj12*r10*sj11*sj13)))))));
if( IKabs(j15evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < numsolutions; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1240=(cj15*sj14);
IkReal x1241=(sj14*sj15);
if( IKabs((((r01*x1241))+(((-1.0)*r00*x1240)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1241))+((r10*x1240)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1241))+(((-1.0)*r00*x1240))))+IKsqr(((((-1.0)*r11*x1241))+((r10*x1240))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r01*x1241))+(((-1.0)*r00*x1240))), ((((-1.0)*r11*x1241))+((r10*x1240))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x1242=IKcos(j10);
IkReal x1243=IKsin(j10);
IkReal x1244=(sj11*sj12);
IkReal x1245=(sj13*sj15);
IkReal x1246=(cj14*r01);
IkReal x1247=(cj13*sj15);
IkReal x1248=(cj15*r01);
IkReal x1249=(sj14*sj15);
IkReal x1250=(cj14*r11);
IkReal x1251=((1.0)*sj12);
IkReal x1252=(cj15*r11);
IkReal x1253=((0.08535)*sj15);
IkReal x1254=((1.0)*cj12);
IkReal x1255=(cj11*x1243);
IkReal x1256=((0.21325)*x1242);
IkReal x1257=((1.0)*cj15*sj14);
IkReal x1258=(cj11*x1242);
IkReal x1259=(cj14*cj15*sj13);
IkReal x1260=(x1242*x1254);
IkReal x1261=((1.0)*cj13*cj14*cj15);
evalcond[0]=(x1242+((r11*x1249))+(((-1.0)*r10*x1257)));
evalcond[1]=((((-1.0)*x1243))+(((-1.0)*r00*x1257))+((r01*x1249)));
evalcond[2]=(((sj13*x1248))+(((-1.0)*r00*x1261))+((r00*x1245))+((x1246*x1247))+(((-1.0)*x1254*x1258))+((x1242*x1244)));
evalcond[3]=((((-1.0)*r10*x1261))+((x1247*x1250))+((sj13*x1252))+(((-1.0)*x1254*x1255))+((x1243*x1244))+((r10*x1245)));
evalcond[4]=((((-1.0)*x1245*x1246))+((r00*x1247))+(((-1.0)*x1251*x1258))+(((-1.0)*sj11*x1260))+((cj13*x1248))+((r00*x1259)));
evalcond[5]=(((r10*x1259))+((cj13*x1252))+(((-1.0)*x1245*x1250))+(((-1.0)*x1251*x1255))+(((-1.0)*sj11*x1243*x1254))+((r10*x1247)));
evalcond[6]=((((-0.08535)*x1248))+(((-0.11235)*x1243))+(((0.24365)*x1258))+((cj11*cj12*x1256))+(((-1.0)*r00*x1253))+(((-1.0)*px))+(((-1.0)*x1244*x1256)));
evalcond[7]=((((-0.21325)*x1243*x1244))+(((0.21325)*cj12*x1255))+(((0.11235)*x1242))+(((0.24365)*x1255))+(((-0.08535)*x1252))+(((-1.0)*py))+(((-1.0)*r10*x1253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x1262=IKPowWithIntegerCheck(cj13,-1);
if(!x1262.valid){
continue;
}
CheckValue<IkReal> x1263=IKPowWithIntegerCheck(r22,-1);
if(!x1263.valid){
continue;
}
sj14array[0]=((-1.0)*(x1262.value)*(x1263.value)*((((cj12*sj11))+((cj11*sj12)))));
if( sj14array[0] >= -1-IKFAST_SINCOS_THRESH && sj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKasin(sj14array[0]);
    cj14array[0] = IKcos(j14array[0]);
    sj14array[1] = sj14array[0];
    j14array[1] = j14array[0] > 0 ? (IKPI-j14array[0]) : (-IKPI-j14array[0]);
    cj14array[1] = -cj14array[0];
}
else if( isnan(sj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j14)));
evalcond[1]=(((sj11*sj12))+(((-1.0)*r22*sj13*(IKsin(j14))))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[1];
IkReal x1264=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1264);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1264);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j15eval[0]=((((0.5)*(IKabs(((((4.0)*cj11*r01*sj12*sj13))+(((-4.0)*cj11*cj12*cj13*r01))+(((-4.0)*cj11*cj12*cj14*r00*sj13))+(((-4.0)*cj11*cj13*cj14*r00*sj12))+(((-4.0)*cj12*cj13*cj14*r00*sj11))+(((4.0)*cj12*r01*sj11*sj13))+(((4.0)*cj14*r00*sj11*sj12*sj13))+(((4.0)*cj13*r01*sj11*sj12)))))))+(((0.5)*(IKabs(((((16.0)*cj11*r10*sj12*sj13))+(((-16.0)*cj11*cj12*cj13*r10))+(((16.0)*cj11*cj13*cj14*r11*sj12))+(((16.0)*cj11*cj12*cj14*r11*sj13))+(((16.0)*cj13*r10*sj11*sj12))+(((-16.0)*cj14*r11*sj11*sj12*sj13))+(((16.0)*cj12*cj13*cj14*r11*sj11))+(((16.0)*cj12*r10*sj11*sj13)))))))+(IKabs(((((4.0)*cj11*cj12*cj14*r10*sj13))+(((-4.0)*cj12*r11*sj11*sj13))+(((4.0)*cj11*cj12*cj13*r11))+(((4.0)*cj12*cj13*cj14*r10*sj11))+(((4.0)*cj11*cj13*cj14*r10*sj12))+(((-4.0)*cj13*r11*sj11*sj12))+(((-4.0)*cj14*r10*sj11*sj12*sj13))+(((-4.0)*cj11*r11*sj12*sj13)))))+(IKabs(((((8.0)*cj11*cj13*cj14*r01*sj12))+(((8.0)*cj11*r00*sj12*sj13))+(((-8.0)*cj14*r01*sj11*sj12*sj13))+(((-8.0)*cj11*cj12*cj13*r00))+(((8.0)*cj13*r00*sj11*sj12))+(((8.0)*cj11*cj12*cj14*r01*sj13))+(((8.0)*cj12*cj13*cj14*r01*sj11))+(((8.0)*cj12*r00*sj11*sj13)))))+(((0.5)*(IKabs(((((16.0)*cj11*cj13*cj14*r01*sj12))+(((16.0)*cj11*cj12*cj14*r01*sj13))+(((-16.0)*cj11*cj12*cj13*r00))+(((16.0)*cj11*r00*sj12*sj13))+(((-16.0)*cj14*r01*sj11*sj12*sj13))+(((16.0)*cj13*r00*sj11*sj12))+(((16.0)*cj12*cj13*cj14*r01*sj11))+(((16.0)*cj12*r00*sj11*sj13)))))))+(((0.5)*(IKabs(((((4.0)*cj14*r10*sj11*sj12*sj13))+(((4.0)*cj13*r11*sj11*sj12))+(((-4.0)*cj11*cj13*cj14*r10*sj12))+(((4.0)*cj11*r11*sj12*sj13))+(((-4.0)*cj11*cj12*cj13*r11))+(((-4.0)*cj12*cj13*cj14*r10*sj11))+(((-4.0)*cj11*cj12*cj14*r10*sj13))+(((4.0)*cj12*r11*sj11*sj13)))))))+(IKabs(((((-4.0)*cj12*r01*sj11*sj13))+(((-4.0)*cj14*r00*sj11*sj12*sj13))+(((4.0)*cj11*cj12*cj13*r01))+(((4.0)*cj11*cj12*cj14*r00*sj13))+(((-4.0)*cj13*r01*sj11*sj12))+(((-4.0)*cj11*r01*sj12*sj13))+(((4.0)*cj12*cj13*cj14*r00*sj11))+(((4.0)*cj11*cj13*cj14*r00*sj12)))))+(IKabs(((((8.0)*cj11*cj12*cj14*r11*sj13))+(((8.0)*cj12*cj13*cj14*r11*sj11))+(((-8.0)*cj11*cj12*cj13*r10))+(((8.0)*cj11*cj13*cj14*r11*sj12))+(((8.0)*cj13*r10*sj11*sj12))+(((8.0)*cj11*r10*sj12*sj13))+(((-8.0)*cj14*r11*sj11*sj12*sj13))+(((8.0)*cj12*r10*sj11*sj13))))));
if( IKabs(j15eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j10, j15]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j15evalpoly[1];
IkReal x1265=(cj14*sj13);
IkReal x1266=(cj13*cj14);
IkReal x1267=(cj12*sj11);
IkReal x1268=((8.0)*r01);
IkReal x1269=((16.0)*cj13);
IkReal x1270=((8.0)*cj13);
IkReal x1271=(r00*sj13);
IkReal x1272=(sj11*sj12);
IkReal x1273=((4.0)*r00);
IkReal x1274=((16.0)*r01);
IkReal x1275=(cj11*sj12);
IkReal x1276=(cj11*cj12);
IkReal x1277=(sj12*x1268);
IkReal x1278=(r00*x1276);
IkReal x1279=((4.0)*r01*sj13);
IkReal x1280=((4.0)*cj13*r01);
IkReal x1281=(((x1275*x1279))+((x1267*x1279))+((x1265*x1272*x1273))+((x1272*x1280)));
IkReal x1282=(((x1266*x1273*x1275))+((x1265*x1273*x1276))+((x1276*x1280))+((x1266*x1267*x1273)));
IkReal x1283=(x1282+(((-1.0)*x1281)));
IkReal x1284=((((-1.0)*x1265*x1268*x1272))+((r00*x1270*x1272))+(((-1.0)*x1270*x1278))+((x1266*x1268*x1275))+(((8.0)*x1271*x1275))+((x1265*x1268*x1276))+((x1266*x1267*x1268))+(((8.0)*x1267*x1271)));
IkReal x1285=(x1281+(((-1.0)*x1282)));
op[0]=x1283;
op[1]=x1284;
op[2]=x1283;
op[3]=(((r00*x1269*x1272))+((x1266*x1274*x1275))+(((16.0)*x1267*x1271))+(((-1.0)*x1269*x1278))+((x1265*x1274*x1276))+(((16.0)*x1271*x1275))+((x1266*x1267*x1274))+(((-1.0)*x1265*x1272*x1274)));
op[4]=x1285;
op[5]=x1284;
op[6]=x1285;
polyroots6(op,zeror,numroots);
IkReal j15array[6], cj15array[6], sj15array[6], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IkReal htj15 = zeror[ij15];
tempj15array[0]=((2.0)*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
numsolutions++;
}
}
bool j15valid[6]={true,true,true,true,true,true};
_nj15 = 6;
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
if( !j15valid[ij15] )
{
    continue;
}
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
htj15 = IKtan(j15/2);

j15evalpoly[0]=((((4.0)*cj14*r10*sj11*sj12*sj13))+(((4.0)*cj13*r11*sj11*sj12))+(((-4.0)*cj11*cj13*cj14*r10*sj12))+(((4.0)*cj11*r11*sj12*sj13))+(((-4.0)*cj11*cj12*cj13*r11))+(((htj15*htj15*htj15*htj15)*(((((4.0)*cj11*cj12*cj14*r10*sj13))+(((-4.0)*cj12*r11*sj11*sj13))+(((4.0)*cj11*cj12*cj13*r11))+(((4.0)*cj12*cj13*cj14*r10*sj11))+(((4.0)*cj11*cj13*cj14*r10*sj12))+(((-4.0)*cj13*r11*sj11*sj12))+(((-4.0)*cj14*r10*sj11*sj12*sj13))+(((-4.0)*cj11*r11*sj12*sj13))))))+(((htj15*htj15*htj15*htj15*htj15*htj15)*(((((4.0)*cj11*cj12*cj14*r10*sj13))+(((-4.0)*cj12*r11*sj11*sj13))+(((4.0)*cj11*cj12*cj13*r11))+(((4.0)*cj12*cj13*cj14*r10*sj11))+(((4.0)*cj11*cj13*cj14*r10*sj12))+(((-4.0)*cj13*r11*sj11*sj12))+(((-4.0)*cj14*r10*sj11*sj12*sj13))+(((-4.0)*cj11*r11*sj12*sj13))))))+(((-4.0)*cj12*cj13*cj14*r10*sj11))+(((htj15*htj15*htj15*htj15*htj15)*(((((8.0)*cj11*cj12*cj14*r11*sj13))+(((8.0)*cj12*cj13*cj14*r11*sj11))+(((-8.0)*cj11*cj12*cj13*r10))+(((8.0)*cj11*cj13*cj14*r11*sj12))+(((8.0)*cj13*r10*sj11*sj12))+(((8.0)*cj11*r10*sj12*sj13))+(((-8.0)*cj14*r11*sj11*sj12*sj13))+(((8.0)*cj12*r10*sj11*sj13))))))+(((htj15*htj15)*(((((4.0)*cj14*r10*sj11*sj12*sj13))+(((4.0)*cj13*r11*sj11*sj12))+(((-4.0)*cj11*cj13*cj14*r10*sj12))+(((4.0)*cj11*r11*sj12*sj13))+(((-4.0)*cj11*cj12*cj13*r11))+(((-4.0)*cj12*cj13*cj14*r10*sj11))+(((-4.0)*cj11*cj12*cj14*r10*sj13))+(((4.0)*cj12*r11*sj11*sj13))))))+((htj15*(((((8.0)*cj11*cj12*cj14*r11*sj13))+(((8.0)*cj12*cj13*cj14*r11*sj11))+(((-8.0)*cj11*cj12*cj13*r10))+(((8.0)*cj11*cj13*cj14*r11*sj12))+(((8.0)*cj13*r10*sj11*sj12))+(((8.0)*cj11*r10*sj12*sj13))+(((-8.0)*cj14*r11*sj11*sj12*sj13))+(((8.0)*cj12*r10*sj11*sj13))))))+(((-4.0)*cj11*cj12*cj14*r10*sj13))+(((4.0)*cj12*r11*sj11*sj13))+(((htj15*htj15*htj15)*(((((16.0)*cj11*r10*sj12*sj13))+(((-16.0)*cj11*cj12*cj13*r10))+(((16.0)*cj11*cj13*cj14*r11*sj12))+(((16.0)*cj11*cj12*cj14*r11*sj13))+(((16.0)*cj13*r10*sj11*sj12))+(((-16.0)*cj14*r11*sj11*sj12*sj13))+(((16.0)*cj12*cj13*cj14*r11*sj11))+(((16.0)*cj12*r10*sj11*sj13)))))));
if( IKabs(j15evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < numsolutions; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1286=(cj15*sj14);
IkReal x1287=(sj14*sj15);
if( IKabs((((r01*x1287))+(((-1.0)*r00*x1286)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1286))+(((-1.0)*r11*x1287)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1287))+(((-1.0)*r00*x1286))))+IKsqr((((r10*x1286))+(((-1.0)*r11*x1287))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r01*x1287))+(((-1.0)*r00*x1286))), (((r10*x1286))+(((-1.0)*r11*x1287))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x1288=IKcos(j10);
IkReal x1289=IKsin(j10);
IkReal x1290=(sj11*sj12);
IkReal x1291=(sj13*sj15);
IkReal x1292=(cj14*r01);
IkReal x1293=(cj13*sj15);
IkReal x1294=(cj15*r01);
IkReal x1295=(sj14*sj15);
IkReal x1296=(cj14*r11);
IkReal x1297=((1.0)*sj12);
IkReal x1298=(cj15*r11);
IkReal x1299=((0.08535)*sj15);
IkReal x1300=((1.0)*cj12);
IkReal x1301=(cj11*x1289);
IkReal x1302=((0.21325)*x1288);
IkReal x1303=((1.0)*cj15*sj14);
IkReal x1304=(cj11*x1288);
IkReal x1305=(cj14*cj15*sj13);
IkReal x1306=(x1288*x1300);
IkReal x1307=((1.0)*cj13*cj14*cj15);
evalcond[0]=(x1288+(((-1.0)*r10*x1303))+((r11*x1295)));
evalcond[1]=((((-1.0)*x1289))+(((-1.0)*r00*x1303))+((r01*x1295)));
evalcond[2]=(((sj13*x1294))+(((-1.0)*r00*x1307))+(((-1.0)*x1300*x1304))+((x1288*x1290))+((r00*x1291))+((x1292*x1293)));
evalcond[3]=(((sj13*x1298))+(((-1.0)*x1300*x1301))+((x1293*x1296))+(((-1.0)*r10*x1307))+((r10*x1291))+((x1289*x1290)));
evalcond[4]=((((-1.0)*x1297*x1304))+((cj13*x1294))+(((-1.0)*x1291*x1292))+(((-1.0)*sj11*x1306))+((r00*x1293))+((r00*x1305)));
evalcond[5]=(((r10*x1305))+(((-1.0)*x1297*x1301))+((cj13*x1298))+(((-1.0)*x1291*x1296))+(((-1.0)*sj11*x1289*x1300))+((r10*x1293)));
evalcond[6]=((((-1.0)*r00*x1299))+((cj11*cj12*x1302))+(((-0.08535)*x1294))+(((-1.0)*px))+(((-0.11235)*x1289))+(((0.24365)*x1304))+(((-1.0)*x1290*x1302)));
evalcond[7]=((((-0.21325)*x1289*x1290))+(((0.21325)*cj12*x1301))+(((-0.08535)*x1298))+(((-1.0)*py))+(((0.24365)*x1301))+(((-1.0)*r10*x1299))+(((0.11235)*x1288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10, j14, j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x1310 = IKatan2WithCheck(IkReal(((-0.08535)*r21)),IkReal(((-0.08535)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1310.valid){
continue;
}
IkReal x1308=((1.0)*(x1310.value));
if((((((0.0072846225)*(r21*r21)))+(((0.0072846225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1311=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0072846225)*(r21*r21)))+(((0.0072846225)*(r20*r20)))))),-1);
if(!x1311.valid){
continue;
}
if( (((-1.0)*(x1311.value)*(((((-0.24365)*sj11))+(((-1.0)*pz))+(((-0.21325)*cj11*sj12))+(((-0.21325)*cj12*sj11)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1311.value)*(((((-0.24365)*sj11))+(((-1.0)*pz))+(((-0.21325)*cj11*sj12))+(((-0.21325)*cj12*sj11)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1309=((-1.0)*(IKasin(((-1.0)*(x1311.value)*(((((-0.24365)*sj11))+(((-1.0)*pz))+(((-0.21325)*cj11*sj12))+(((-0.21325)*cj12*sj11))))))));
j15array[0]=((((-1.0)*x1309))+(((-1.0)*x1308)));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x1308))+(((1.0)*x1309)));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IkReal j14eval[2];
IkReal x1312=cj15*cj15;
IkReal x1313=r21*r21;
IkReal x1314=(sj13*x1313);
IkReal x1315=(x1314+((sj13*(r22*r22)))+((sj13*x1312*(r20*r20)))+(((-2.0)*cj15*r20*r21*sj13*sj15))+(((-1.0)*x1312*x1314)));
j14eval[0]=x1315;
j14eval[1]=IKsign(x1315);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x1316=r21*r21;
IkReal x1317=cj15*cj15;
IkReal x1318=((1.0)*cj13);
IkReal x1319=((((2.0)*cj13*cj15*r20*r21*sj15))+((cj13*x1316*x1317))+(((-1.0)*x1318*(r22*r22)))+(((-1.0)*x1316*x1318))+(((-1.0)*x1317*x1318*(r20*r20))));
j14eval[0]=x1319;
j14eval[1]=IKsign(x1319);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x1320=cj11*cj11;
IkReal x1321=cj12*cj12;
IkReal x1322=(cj12*x1320);
IkReal x1323=(cj11*sj11*sj12);
IkReal x1324=(cj12*x1323);
IkReal x1325=(x1320*x1321);
j10eval[0]=((4.18279977479812)+(((-7.48153495812743)*x1323))+x1320+(((6.54807030503047)*x1325))+(((7.48153495812743)*x1322))+(((-6.54807030503047)*x1324))+(((-3.27403515251523)*x1321)));
j10eval[1]=IKsign(((23239234.0)+(((5555904.0)*x1320))+(((-41566690.0)*x1323))+(((41566690.0)*x1322))+(((-18190225.0)*x1321))+(((36380450.0)*x1325))+(((-36380450.0)*x1324))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x1326=((1.0)*cj15);
IkReal x1327=((1.0)*sj15);
IkReal x1328=(((sj11*sj12))+(((-1.0)*cj11*cj12)));
j10eval[0]=x1328;
j10eval[1]=IKsign(x1328);
j10eval[2]=((IKabs(((((-1.0)*r11*x1326))+(((-1.0)*r10*x1327)))))+(IKabs(((((-1.0)*r01*x1326))+(((-1.0)*r00*x1327))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x1329=cj15*cj15;
IkReal x1330=r21*r21;
IkReal x1331=(cj11*cj12);
IkReal x1332=(r21*sj15);
IkReal x1333=(cj15*r20);
IkReal x1334=(sj11*sj12);
IkReal x1335=(x1330+(r22*r22)+((x1329*(r20*r20)))+(((-2.0)*x1332*x1333))+(((-1.0)*x1329*x1330)));
j14eval[0]=x1335;
j14eval[1]=((IKabs(((((-1.0)*x1333*x1334))+((x1331*x1333))+(((-1.0)*x1331*x1332))+((x1332*x1334)))))+(IKabs(((((-1.0)*r22*x1331))+((r22*x1334))))));
j14eval[2]=IKsign(x1335);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j10eval[0]=(((sj11*sj12))+(((-1.0)*cj11*cj12)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((3.3845991639283)*py))))+IKsqr(((((3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.56068013982083)*px))+(((3.3845991639283)*py))), ((((3.3845991639283)*px))+(((1.56068013982083)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x1336=IKsin(j10);
IkReal x1337=IKcos(j10);
evalcond[0]=((((-1.0)*px))+(((0.24365)*x1337))+(((-0.11235)*x1336)));
evalcond[1]=((((-1.0)*py))+(((0.24365)*x1336))+(((0.11235)*x1337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x1338=((1.0)*cj15);
IkReal x1339=((((-1.0)*r00*sj15))+(((-1.0)*r01*x1338)));
j14eval[0]=x1339;
j14eval[1]=((IKabs((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x1338)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x1339);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x1340=((1.0)*cj15);
IkReal x1341=((((-1.0)*r11*x1340))+(((-1.0)*r10*sj15)));
j14eval[0]=x1341;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x1340))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x1341);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x1342=cj15*cj15;
IkReal x1343=(r11*r21);
IkReal x1344=(cj15*r20);
IkReal x1345=((1.0)*r21*sj15);
IkReal x1346=(x1343+(((-1.0)*x1342*x1343))+((r12*r22))+((r10*r20*x1342))+(((-1.0)*r11*sj15*x1344))+(((-1.0)*cj15*r10*x1345)));
j14eval[0]=x1346;
j14eval[1]=IKsign(x1346);
j14eval[2]=((IKabs(((((-1.0)*cj10*x1345))+((cj10*x1344)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1347=cj15*cj15;
IkReal x1348=(cj15*r20);
IkReal x1349=(r11*r21);
IkReal x1350=((1.0)*r21*sj15);
CheckValue<IkReal> x1351 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*x1350))+((cj10*x1348)))),IkReal((cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1351.valid){
continue;
}
CheckValue<IkReal> x1352=IKPowWithIntegerCheck(IKsign((x1349+(((-1.0)*x1347*x1349))+((r12*r22))+((r10*r20*x1347))+(((-1.0)*r11*sj15*x1348))+(((-1.0)*cj15*r10*x1350)))),-1);
if(!x1352.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1351.value)+(((1.5707963267949)*(x1352.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1353=IKsin(j14);
IkReal x1354=IKcos(j14);
IkReal x1355=((1.0)*sj10);
IkReal x1356=(sj15*x1353);
IkReal x1357=((1.0)*x1354);
IkReal x1358=((1.0)*x1353);
IkReal x1359=(cj15*x1354);
IkReal x1360=(cj15*x1358);
evalcond[0]=((((-1.0)*r20*x1360))+(((-1.0)*r22*x1357))+((r21*x1356)));
evalcond[1]=((((-1.0)*r21*sj15*x1357))+(((-1.0)*r22*x1358))+((r20*x1359)));
evalcond[2]=((((-1.0)*r12*x1357))+cj10+((r11*x1356))+(((-1.0)*r10*x1360)));
evalcond[3]=((((-1.0)*x1355))+(((-1.0)*r02*x1357))+(((-1.0)*r00*x1360))+((r01*x1356)));
evalcond[4]=((((-1.0)*r02*x1358))+((r00*x1359))+(((-1.0)*cj10))+(((-1.0)*r01*sj15*x1357)));
evalcond[5]=((((-1.0)*x1355))+(((-1.0)*r12*x1358))+((r10*x1359))+(((-1.0)*r11*sj15*x1357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1361=((1.0)*cj15);
CheckValue<IkReal> x1362 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x1361))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1362.valid){
continue;
}
CheckValue<IkReal> x1363=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1361))+(((-1.0)*r10*sj15)))),-1);
if(!x1363.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1362.value)+(((1.5707963267949)*(x1363.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1364=IKsin(j14);
IkReal x1365=IKcos(j14);
IkReal x1366=((1.0)*sj10);
IkReal x1367=(sj15*x1364);
IkReal x1368=((1.0)*x1365);
IkReal x1369=((1.0)*x1364);
IkReal x1370=(cj15*x1365);
IkReal x1371=(cj15*x1369);
evalcond[0]=((((-1.0)*r20*x1371))+(((-1.0)*r22*x1368))+((r21*x1367)));
evalcond[1]=((((-1.0)*r22*x1369))+(((-1.0)*r21*sj15*x1368))+((r20*x1370)));
evalcond[2]=((((-1.0)*r12*x1368))+cj10+(((-1.0)*r10*x1371))+((r11*x1367)));
evalcond[3]=((((-1.0)*r00*x1371))+(((-1.0)*r02*x1368))+((r01*x1367))+(((-1.0)*x1366)));
evalcond[4]=((((-1.0)*r02*x1369))+(((-1.0)*cj10))+(((-1.0)*r01*sj15*x1368))+((r00*x1370)));
evalcond[5]=((((-1.0)*r12*x1369))+((r10*x1370))+(((-1.0)*r11*sj15*x1368))+(((-1.0)*x1366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1372=((1.0)*cj15);
CheckValue<IkReal> x1373=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1372))+(((-1.0)*r00*sj15)))),-1);
if(!x1373.valid){
continue;
}
CheckValue<IkReal> x1374 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x1372))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1374.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1373.value)))+(x1374.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1375=IKsin(j14);
IkReal x1376=IKcos(j14);
IkReal x1377=((1.0)*sj10);
IkReal x1378=(sj15*x1375);
IkReal x1379=((1.0)*x1376);
IkReal x1380=((1.0)*x1375);
IkReal x1381=(cj15*x1376);
IkReal x1382=(cj15*x1380);
evalcond[0]=((((-1.0)*r20*x1382))+(((-1.0)*r22*x1379))+((r21*x1378)));
evalcond[1]=(((r20*x1381))+(((-1.0)*r22*x1380))+(((-1.0)*r21*sj15*x1379)));
evalcond[2]=(((r11*x1378))+cj10+(((-1.0)*r10*x1382))+(((-1.0)*r12*x1379)));
evalcond[3]=((((-1.0)*r00*x1382))+(((-1.0)*r02*x1379))+(((-1.0)*x1377))+((r01*x1378)));
evalcond[4]=((((-1.0)*r02*x1380))+((r00*x1381))+(((-1.0)*cj10))+(((-1.0)*r01*sj15*x1379)));
evalcond[5]=((((-1.0)*r12*x1380))+((r10*x1381))+(((-1.0)*x1377))+(((-1.0)*r11*sj15*x1379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((3.3845991639283)*py))))+IKsqr(((((3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.56068013982083)*px))+(((3.3845991639283)*py))), ((((3.3845991639283)*px))+(((1.56068013982083)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x1383=IKsin(j10);
IkReal x1384=IKcos(j10);
evalcond[0]=((((-0.11235)*x1383))+(((-1.0)*px))+(((0.24365)*x1384)));
evalcond[1]=((((0.11235)*x1384))+(((-1.0)*py))+(((0.24365)*x1383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x1385=((1.0)*cj15);
IkReal x1386=((((-1.0)*r01*x1385))+(((-1.0)*r00*sj15)));
j14eval[0]=x1386;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x1385))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x1386);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x1387=cj15*cj15;
IkReal x1388=(r01*r21);
IkReal x1389=((1.0)*cj15*sj15);
IkReal x1390=(x1388+(((-1.0)*r01*r20*x1389))+(((-1.0)*x1387*x1388))+(((-1.0)*r00*r21*x1389))+((r02*r22))+((r00*r20*x1387)));
j14eval[0]=x1390;
j14eval[1]=IKsign(x1390);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x1391=cj15*cj15;
IkReal x1392=(r21*sj15);
IkReal x1393=(r11*r21);
IkReal x1394=((1.0)*cj15);
IkReal x1395=(x1393+((r12*r22))+((r10*r20*x1391))+(((-1.0)*r11*r20*sj15*x1394))+(((-1.0)*x1391*x1393))+(((-1.0)*r10*x1392*x1394)));
j14eval[0]=x1395;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x1394))+((sj10*x1392)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x1395);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1396=cj15*cj15;
IkReal x1397=(r21*sj15);
IkReal x1398=((1.0)*cj15);
IkReal x1399=(r11*r21);
CheckValue<IkReal> x1400=IKPowWithIntegerCheck(IKsign((x1399+(((-1.0)*r10*x1397*x1398))+((r12*r22))+((r10*r20*x1396))+(((-1.0)*r11*r20*sj15*x1398))+(((-1.0)*x1396*x1399)))),-1);
if(!x1400.valid){
continue;
}
CheckValue<IkReal> x1401 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x1398))+((sj10*x1397)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1401.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1400.value)))+(x1401.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1402=IKsin(j14);
IkReal x1403=IKcos(j14);
IkReal x1404=(sj15*x1402);
IkReal x1405=((1.0)*x1403);
IkReal x1406=((1.0)*x1402);
IkReal x1407=(cj15*x1403);
IkReal x1408=(cj15*x1406);
evalcond[0]=((((-1.0)*r22*x1405))+((r21*x1404))+(((-1.0)*r20*x1408)));
evalcond[1]=((((-1.0)*r22*x1406))+((r20*x1407))+(((-1.0)*r21*sj15*x1405)));
evalcond[2]=((((-1.0)*r12*x1405))+((r11*x1404))+cj10+(((-1.0)*r10*x1408)));
evalcond[3]=(((r00*x1407))+(((-1.0)*r02*x1406))+cj10+(((-1.0)*r01*sj15*x1405)));
evalcond[4]=((((-1.0)*r12*x1406))+sj10+(((-1.0)*r11*sj15*x1405))+((r10*x1407)));
evalcond[5]=((((-1.0)*r00*x1408))+(((-1.0)*r02*x1405))+((r01*x1404))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1409=cj15*cj15;
IkReal x1410=(r01*r21);
IkReal x1411=((1.0)*cj15*sj15);
CheckValue<IkReal> x1412 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1412.valid){
continue;
}
CheckValue<IkReal> x1413=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r20*x1411))+x1410+((r00*r20*x1409))+(((-1.0)*x1409*x1410))+((r02*r22))+(((-1.0)*r00*r21*x1411)))),-1);
if(!x1413.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1412.value)+(((1.5707963267949)*(x1413.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1414=IKsin(j14);
IkReal x1415=IKcos(j14);
IkReal x1416=(sj15*x1414);
IkReal x1417=((1.0)*x1415);
IkReal x1418=((1.0)*x1414);
IkReal x1419=(cj15*x1415);
IkReal x1420=(cj15*x1418);
evalcond[0]=(((r21*x1416))+(((-1.0)*r22*x1417))+(((-1.0)*r20*x1420)));
evalcond[1]=(((r20*x1419))+(((-1.0)*r21*sj15*x1417))+(((-1.0)*r22*x1418)));
evalcond[2]=((((-1.0)*r10*x1420))+cj10+((r11*x1416))+(((-1.0)*r12*x1417)));
evalcond[3]=((((-1.0)*r02*x1418))+cj10+((r00*x1419))+(((-1.0)*r01*sj15*x1417)));
evalcond[4]=((((-1.0)*r11*sj15*x1417))+sj10+(((-1.0)*r12*x1418))+((r10*x1419)));
evalcond[5]=((((-1.0)*r02*x1417))+((r01*x1416))+(((-1.0)*sj10))+(((-1.0)*r00*x1420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1421=((1.0)*cj15);
CheckValue<IkReal> x1422 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x1421)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1422.valid){
continue;
}
CheckValue<IkReal> x1423=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x1421)))),-1);
if(!x1423.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1422.value)+(((1.5707963267949)*(x1423.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1424=IKsin(j14);
IkReal x1425=IKcos(j14);
IkReal x1426=(sj15*x1424);
IkReal x1427=((1.0)*x1425);
IkReal x1428=((1.0)*x1424);
IkReal x1429=(cj15*x1425);
IkReal x1430=(cj15*x1428);
evalcond[0]=(((r21*x1426))+(((-1.0)*r22*x1427))+(((-1.0)*r20*x1430)));
evalcond[1]=((((-1.0)*r21*sj15*x1427))+(((-1.0)*r22*x1428))+((r20*x1429)));
evalcond[2]=(((r11*x1426))+cj10+(((-1.0)*r12*x1427))+(((-1.0)*r10*x1430)));
evalcond[3]=(((r00*x1429))+(((-1.0)*r01*sj15*x1427))+cj10+(((-1.0)*r02*x1428)));
evalcond[4]=((((-1.0)*r11*sj15*x1427))+(((-1.0)*r12*x1428))+((r10*x1429))+sj10);
evalcond[5]=(((r01*x1426))+(((-1.0)*r00*x1430))+(((-1.0)*sj10))+(((-1.0)*r02*x1427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
evalcond[0]=((((-0.11235)*(IKsin(j10))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x1431=((1.0)*cj15);
IkReal x1432=((((-1.0)*r01*x1431))+(((-1.0)*r00*sj15)));
j14eval[0]=x1432;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x1431))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x1432);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x1433=((1.0)*cj15);
IkReal x1434=((((-1.0)*r11*x1433))+(((-1.0)*r10*sj15)));
j14eval[0]=x1434;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x1433))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x1434);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x1435=cj15*cj15;
IkReal x1436=(r11*r21);
IkReal x1437=(cj15*r20);
IkReal x1438=((1.0)*r21*sj15);
IkReal x1439=(((r10*r20*x1435))+(((-1.0)*x1435*x1436))+((r12*r22))+(((-1.0)*cj15*r10*x1438))+(((-1.0)*r11*sj15*x1437))+x1436);
j14eval[0]=x1439;
j14eval[1]=IKsign(x1439);
j14eval[2]=((IKabs((((cj10*x1437))+(((-1.0)*cj10*x1438)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1440=cj15*cj15;
IkReal x1441=(cj15*r20);
IkReal x1442=(r11*r21);
IkReal x1443=((1.0)*r21*sj15);
CheckValue<IkReal> x1444=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj15*r10*x1443))+((r12*r22))+(((-1.0)*x1440*x1442))+x1442+(((-1.0)*r11*sj15*x1441))+((r10*r20*x1440)))),-1);
if(!x1444.valid){
continue;
}
CheckValue<IkReal> x1445 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*x1443))+((cj10*x1441)))),IkReal((cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1445.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1444.value)))+(x1445.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1446=IKsin(j14);
IkReal x1447=IKcos(j14);
IkReal x1448=((1.0)*sj10);
IkReal x1449=(sj15*x1446);
IkReal x1450=((1.0)*x1447);
IkReal x1451=((1.0)*x1446);
IkReal x1452=(cj15*x1447);
IkReal x1453=(cj15*x1451);
evalcond[0]=((((-1.0)*r20*x1453))+(((-1.0)*r22*x1450))+((r21*x1449)));
evalcond[1]=((((-1.0)*r22*x1451))+((r20*x1452))+(((-1.0)*r21*sj15*x1450)));
evalcond[2]=(((r11*x1449))+cj10+(((-1.0)*r10*x1453))+(((-1.0)*r12*x1450)));
evalcond[3]=((((-1.0)*r02*x1450))+(((-1.0)*r00*x1453))+(((-1.0)*x1448))+((r01*x1449)));
evalcond[4]=((((-1.0)*r01*sj15*x1450))+(((-1.0)*r02*x1451))+((r00*x1452))+(((-1.0)*cj10)));
evalcond[5]=(((r10*x1452))+(((-1.0)*x1448))+(((-1.0)*r11*sj15*x1450))+(((-1.0)*r12*x1451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1454=((1.0)*cj15);
CheckValue<IkReal> x1455=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj15))+(((-1.0)*r11*x1454)))),-1);
if(!x1455.valid){
continue;
}
CheckValue<IkReal> x1456 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x1454))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1456.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1455.value)))+(x1456.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1457=IKsin(j14);
IkReal x1458=IKcos(j14);
IkReal x1459=((1.0)*sj10);
IkReal x1460=(sj15*x1457);
IkReal x1461=((1.0)*x1458);
IkReal x1462=((1.0)*x1457);
IkReal x1463=(cj15*x1458);
IkReal x1464=(cj15*x1462);
evalcond[0]=((((-1.0)*r22*x1461))+(((-1.0)*r20*x1464))+((r21*x1460)));
evalcond[1]=(((r20*x1463))+(((-1.0)*r22*x1462))+(((-1.0)*r21*sj15*x1461)));
evalcond[2]=(cj10+((r11*x1460))+(((-1.0)*r12*x1461))+(((-1.0)*r10*x1464)));
evalcond[3]=((((-1.0)*r02*x1461))+(((-1.0)*x1459))+((r01*x1460))+(((-1.0)*r00*x1464)));
evalcond[4]=((((-1.0)*r02*x1462))+((r00*x1463))+(((-1.0)*r01*sj15*x1461))+(((-1.0)*cj10)));
evalcond[5]=((((-1.0)*x1459))+((r10*x1463))+(((-1.0)*r12*x1462))+(((-1.0)*r11*sj15*x1461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1465=((1.0)*cj15);
CheckValue<IkReal> x1466 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x1465))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1466.valid){
continue;
}
CheckValue<IkReal> x1467=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1465))+(((-1.0)*r00*sj15)))),-1);
if(!x1467.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1466.value)+(((1.5707963267949)*(x1467.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1468=IKsin(j14);
IkReal x1469=IKcos(j14);
IkReal x1470=((1.0)*sj10);
IkReal x1471=(sj15*x1468);
IkReal x1472=((1.0)*x1469);
IkReal x1473=((1.0)*x1468);
IkReal x1474=(cj15*x1469);
IkReal x1475=(cj15*x1473);
evalcond[0]=((((-1.0)*r22*x1472))+(((-1.0)*r20*x1475))+((r21*x1471)));
evalcond[1]=((((-1.0)*r22*x1473))+((r20*x1474))+(((-1.0)*r21*sj15*x1472)));
evalcond[2]=(((r11*x1471))+(((-1.0)*r10*x1475))+(((-1.0)*r12*x1472))+cj10);
evalcond[3]=((((-1.0)*r00*x1475))+(((-1.0)*x1470))+(((-1.0)*r02*x1472))+((r01*x1471)));
evalcond[4]=((((-1.0)*r01*sj15*x1472))+(((-1.0)*r02*x1473))+(((-1.0)*cj10))+((r00*x1474)));
evalcond[5]=(((r10*x1474))+(((-1.0)*r12*x1473))+(((-1.0)*r11*sj15*x1472))+(((-1.0)*x1470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
evalcond[0]=((((-0.11235)*(IKsin(j10))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x1476=((1.0)*cj15);
IkReal x1477=((((-1.0)*r01*x1476))+(((-1.0)*r00*sj15)));
j14eval[0]=x1477;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x1476))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x1477);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x1478=cj15*cj15;
IkReal x1479=(r01*r21);
IkReal x1480=((1.0)*cj15*sj15);
IkReal x1481=((((-1.0)*r00*r21*x1480))+(((-1.0)*r01*r20*x1480))+(((-1.0)*x1478*x1479))+x1479+((r02*r22))+((r00*r20*x1478)));
j14eval[0]=x1481;
j14eval[1]=IKsign(x1481);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x1482=cj15*cj15;
IkReal x1483=(r21*sj15);
IkReal x1484=(r11*r21);
IkReal x1485=((1.0)*cj15);
IkReal x1486=(((r12*r22))+(((-1.0)*r10*x1483*x1485))+(((-1.0)*x1482*x1484))+x1484+(((-1.0)*r11*r20*sj15*x1485))+((r10*r20*x1482)));
j14eval[0]=x1486;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x1485))+((sj10*x1483)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x1486);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1487=cj15*cj15;
IkReal x1488=(r21*sj15);
IkReal x1489=((1.0)*cj15);
IkReal x1490=(r11*r21);
CheckValue<IkReal> x1491=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1487*x1490))+((r12*r22))+x1490+(((-1.0)*r10*x1488*x1489))+(((-1.0)*r11*r20*sj15*x1489))+((r10*r20*x1487)))),-1);
if(!x1491.valid){
continue;
}
CheckValue<IkReal> x1492 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x1489))+((sj10*x1488)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1492.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1491.value)))+(x1492.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1493=IKsin(j14);
IkReal x1494=IKcos(j14);
IkReal x1495=(sj15*x1493);
IkReal x1496=((1.0)*x1494);
IkReal x1497=((1.0)*x1493);
IkReal x1498=(cj15*x1494);
IkReal x1499=(cj15*x1497);
evalcond[0]=((((-1.0)*r20*x1499))+((r21*x1495))+(((-1.0)*r22*x1496)));
evalcond[1]=(((r20*x1498))+(((-1.0)*r22*x1497))+(((-1.0)*r21*sj15*x1496)));
evalcond[2]=((((-1.0)*r12*x1496))+((r11*x1495))+cj10+(((-1.0)*r10*x1499)));
evalcond[3]=((((-1.0)*r01*sj15*x1496))+((r00*x1498))+cj10+(((-1.0)*r02*x1497)));
evalcond[4]=(((r10*x1498))+(((-1.0)*r12*x1497))+(((-1.0)*r11*sj15*x1496))+sj10);
evalcond[5]=((((-1.0)*r00*x1499))+((r01*x1495))+(((-1.0)*r02*x1496))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1500=cj15*cj15;
IkReal x1501=(r01*r21);
IkReal x1502=((1.0)*cj15*sj15);
CheckValue<IkReal> x1503 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1503.valid){
continue;
}
CheckValue<IkReal> x1504=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1500*x1501))+(((-1.0)*r01*r20*x1502))+x1501+(((-1.0)*r00*r21*x1502))+((r00*r20*x1500))+((r02*r22)))),-1);
if(!x1504.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1503.value)+(((1.5707963267949)*(x1504.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1505=IKsin(j14);
IkReal x1506=IKcos(j14);
IkReal x1507=(sj15*x1505);
IkReal x1508=((1.0)*x1506);
IkReal x1509=((1.0)*x1505);
IkReal x1510=(cj15*x1506);
IkReal x1511=(cj15*x1509);
evalcond[0]=((((-1.0)*r20*x1511))+(((-1.0)*r22*x1508))+((r21*x1507)));
evalcond[1]=((((-1.0)*r22*x1509))+((r20*x1510))+(((-1.0)*r21*sj15*x1508)));
evalcond[2]=(((r11*x1507))+cj10+(((-1.0)*r10*x1511))+(((-1.0)*r12*x1508)));
evalcond[3]=(((r00*x1510))+cj10+(((-1.0)*r02*x1509))+(((-1.0)*r01*sj15*x1508)));
evalcond[4]=(((r10*x1510))+sj10+(((-1.0)*r11*sj15*x1508))+(((-1.0)*r12*x1509)));
evalcond[5]=((((-1.0)*r00*x1511))+((r01*x1507))+(((-1.0)*r02*x1508))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1512=((1.0)*cj15);
CheckValue<IkReal> x1513 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x1512))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1513.valid){
continue;
}
CheckValue<IkReal> x1514=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1512))+(((-1.0)*r00*sj15)))),-1);
if(!x1514.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1513.value)+(((1.5707963267949)*(x1514.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1515=IKsin(j14);
IkReal x1516=IKcos(j14);
IkReal x1517=(sj15*x1515);
IkReal x1518=((1.0)*x1516);
IkReal x1519=((1.0)*x1515);
IkReal x1520=(cj15*x1516);
IkReal x1521=(cj15*x1519);
evalcond[0]=((((-1.0)*r22*x1518))+((r21*x1517))+(((-1.0)*r20*x1521)));
evalcond[1]=((((-1.0)*r22*x1519))+((r20*x1520))+(((-1.0)*r21*sj15*x1518)));
evalcond[2]=(((r11*x1517))+cj10+(((-1.0)*r10*x1521))+(((-1.0)*r12*x1518)));
evalcond[3]=(((r00*x1520))+cj10+(((-1.0)*r02*x1519))+(((-1.0)*r01*sj15*x1518)));
evalcond[4]=(((r10*x1520))+sj10+(((-1.0)*r11*sj15*x1518))+(((-1.0)*r12*x1519)));
evalcond[5]=((((-1.0)*r00*x1521))+((r01*x1517))+(((-1.0)*r02*x1518))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((-3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))))+IKsqr(((((-3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))), ((((-3.3845991639283)*px))+(((1.56068013982083)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x1522=IKcos(j10);
IkReal x1523=IKsin(j10);
evalcond[0]=((((-1.0)*px))+(((-0.11235)*x1523))+(((-0.24365)*x1522)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*x1522))+(((-0.24365)*x1523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x1524=((1.0)*cj15);
IkReal x1525=((((-1.0)*r01*x1524))+(((-1.0)*r00*sj15)));
j14eval[0]=x1525;
j14eval[1]=((IKabs((cj10*r22)))+(IKabs(((((-1.0)*cj10*r20*x1524))+((cj10*r21*sj15))))));
j14eval[2]=IKsign(x1525);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x1526=cj15*cj15;
IkReal x1527=(r01*r21);
IkReal x1528=((1.0)*cj15*sj15);
IkReal x1529=(((r00*r20*x1526))+x1527+(((-1.0)*x1526*x1527))+((r02*r22))+(((-1.0)*r00*r21*x1528))+(((-1.0)*r01*r20*x1528)));
j14eval[0]=x1529;
j14eval[1]=IKsign(x1529);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x1530=cj15*cj15;
IkReal x1531=(r21*sj15);
IkReal x1532=(r11*r21);
IkReal x1533=((1.0)*cj15);
IkReal x1534=((((-1.0)*x1530*x1532))+(((-1.0)*r11*r20*sj15*x1533))+((r12*r22))+(((-1.0)*r10*x1531*x1533))+x1532+((r10*r20*x1530)));
j14eval[0]=x1534;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x1533))+((sj10*x1531)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x1534);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1535=cj15*cj15;
IkReal x1536=(r21*sj15);
IkReal x1537=((1.0)*cj15);
IkReal x1538=(r11*r21);
CheckValue<IkReal> x1539=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1535*x1538))+(((-1.0)*r10*x1536*x1537))+(((-1.0)*r11*r20*sj15*x1537))+((r12*r22))+x1538+((r10*r20*x1535)))),-1);
if(!x1539.valid){
continue;
}
CheckValue<IkReal> x1540 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x1537))+((sj10*x1536)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1540.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1539.value)))+(x1540.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1541=IKsin(j14);
IkReal x1542=IKcos(j14);
IkReal x1543=(sj15*x1541);
IkReal x1544=((1.0)*x1542);
IkReal x1545=((1.0)*x1541);
IkReal x1546=(cj15*x1542);
IkReal x1547=(cj15*x1545);
evalcond[0]=((((-1.0)*r22*x1544))+((r21*x1543))+(((-1.0)*r20*x1547)));
evalcond[1]=((((-1.0)*r21*sj15*x1544))+(((-1.0)*r22*x1545))+((r20*x1546)));
evalcond[2]=(cj10+((r11*x1543))+(((-1.0)*r10*x1547))+(((-1.0)*r12*x1544)));
evalcond[3]=((((-1.0)*r02*x1545))+cj10+(((-1.0)*r01*sj15*x1544))+((r00*x1546)));
evalcond[4]=((((-1.0)*r11*sj15*x1544))+sj10+((r10*x1546))+(((-1.0)*r12*x1545)));
evalcond[5]=((((-1.0)*r02*x1544))+(((-1.0)*sj10))+(((-1.0)*r00*x1547))+((r01*x1543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1548=cj15*cj15;
IkReal x1549=(r01*r21);
IkReal x1550=((1.0)*cj15*sj15);
CheckValue<IkReal> x1551 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1551.valid){
continue;
}
CheckValue<IkReal> x1552=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r20*x1550))+((r00*r20*x1548))+x1549+(((-1.0)*x1548*x1549))+((r02*r22))+(((-1.0)*r00*r21*x1550)))),-1);
if(!x1552.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1551.value)+(((1.5707963267949)*(x1552.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1553=IKsin(j14);
IkReal x1554=IKcos(j14);
IkReal x1555=(sj15*x1553);
IkReal x1556=((1.0)*x1554);
IkReal x1557=((1.0)*x1553);
IkReal x1558=(cj15*x1554);
IkReal x1559=(cj15*x1557);
evalcond[0]=((((-1.0)*r22*x1556))+(((-1.0)*r20*x1559))+((r21*x1555)));
evalcond[1]=((((-1.0)*r22*x1557))+(((-1.0)*r21*sj15*x1556))+((r20*x1558)));
evalcond[2]=(((r11*x1555))+cj10+(((-1.0)*r12*x1556))+(((-1.0)*r10*x1559)));
evalcond[3]=(((r00*x1558))+(((-1.0)*r02*x1557))+cj10+(((-1.0)*r01*sj15*x1556)));
evalcond[4]=((((-1.0)*r11*sj15*x1556))+sj10+(((-1.0)*r12*x1557))+((r10*x1558)));
evalcond[5]=(((r01*x1555))+(((-1.0)*r02*x1556))+(((-1.0)*sj10))+(((-1.0)*r00*x1559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1560=((1.0)*cj15);
CheckValue<IkReal> x1561=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x1560)))),-1);
if(!x1561.valid){
continue;
}
CheckValue<IkReal> x1562 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x1560))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1562.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1561.value)))+(x1562.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1563=IKsin(j14);
IkReal x1564=IKcos(j14);
IkReal x1565=(sj15*x1563);
IkReal x1566=((1.0)*x1564);
IkReal x1567=((1.0)*x1563);
IkReal x1568=(cj15*x1564);
IkReal x1569=(cj15*x1567);
evalcond[0]=((((-1.0)*r22*x1566))+(((-1.0)*r20*x1569))+((r21*x1565)));
evalcond[1]=((((-1.0)*r21*sj15*x1566))+((r20*x1568))+(((-1.0)*r22*x1567)));
evalcond[2]=(cj10+((r11*x1565))+(((-1.0)*r12*x1566))+(((-1.0)*r10*x1569)));
evalcond[3]=((((-1.0)*r02*x1567))+cj10+(((-1.0)*r01*sj15*x1566))+((r00*x1568)));
evalcond[4]=((((-1.0)*r11*sj15*x1566))+sj10+((r10*x1568))+(((-1.0)*r12*x1567)));
evalcond[5]=((((-1.0)*r02*x1566))+(((-1.0)*sj10))+(((-1.0)*r00*x1569))+((r01*x1565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((-3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))))+IKsqr(((((-3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))), ((((-3.3845991639283)*px))+(((1.56068013982083)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x1570=IKcos(j10);
IkReal x1571=IKsin(j10);
evalcond[0]=((((-0.11235)*x1571))+(((-0.24365)*x1570))+(((-1.0)*px)));
evalcond[1]=((((-0.24365)*x1571))+(((0.11235)*x1570))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x1572=((1.0)*cj15);
IkReal x1573=((((-1.0)*r01*x1572))+(((-1.0)*r00*sj15)));
j14eval[0]=x1573;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x1572))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x1573);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x1574=((1.0)*cj15);
IkReal x1575=((((-1.0)*r11*x1574))+(((-1.0)*r10*sj15)));
j14eval[0]=x1575;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x1574))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x1575);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x1576=cj15*cj15;
IkReal x1577=(r11*r21);
IkReal x1578=(cj15*r20);
IkReal x1579=((1.0)*r21*sj15);
IkReal x1580=((((-1.0)*r11*sj15*x1578))+(((-1.0)*x1576*x1577))+((r12*r22))+x1577+(((-1.0)*cj15*r10*x1579))+((r10*r20*x1576)));
j14eval[0]=x1580;
j14eval[1]=IKsign(x1580);
j14eval[2]=((IKabs((((cj10*x1578))+(((-1.0)*cj10*x1579)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1581=cj15*cj15;
IkReal x1582=(cj15*r20);
IkReal x1583=(r11*r21);
IkReal x1584=((1.0)*r21*sj15);
CheckValue<IkReal> x1585 = IKatan2WithCheck(IkReal((((cj10*x1582))+(((-1.0)*cj10*x1584)))),IkReal((cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1585.valid){
continue;
}
CheckValue<IkReal> x1586=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj15*x1582))+((r10*r20*x1581))+(((-1.0)*cj15*r10*x1584))+((r12*r22))+x1583+(((-1.0)*x1581*x1583)))),-1);
if(!x1586.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1585.value)+(((1.5707963267949)*(x1586.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1587=IKsin(j14);
IkReal x1588=IKcos(j14);
IkReal x1589=((1.0)*sj10);
IkReal x1590=(sj15*x1587);
IkReal x1591=((1.0)*x1588);
IkReal x1592=((1.0)*x1587);
IkReal x1593=(cj15*x1588);
IkReal x1594=(cj15*x1592);
evalcond[0]=((((-1.0)*r22*x1591))+(((-1.0)*r20*x1594))+((r21*x1590)));
evalcond[1]=(((r20*x1593))+(((-1.0)*r22*x1592))+(((-1.0)*r21*sj15*x1591)));
evalcond[2]=(((r11*x1590))+cj10+(((-1.0)*r10*x1594))+(((-1.0)*r12*x1591)));
evalcond[3]=((((-1.0)*x1589))+((r01*x1590))+(((-1.0)*r02*x1591))+(((-1.0)*r00*x1594)));
evalcond[4]=(((r00*x1593))+(((-1.0)*r02*x1592))+(((-1.0)*r01*sj15*x1591))+(((-1.0)*cj10)));
evalcond[5]=((((-1.0)*x1589))+(((-1.0)*r11*sj15*x1591))+((r10*x1593))+(((-1.0)*r12*x1592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1595=((1.0)*cj15);
CheckValue<IkReal> x1596 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x1595))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1596.valid){
continue;
}
CheckValue<IkReal> x1597=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj15))+(((-1.0)*r11*x1595)))),-1);
if(!x1597.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1596.value)+(((1.5707963267949)*(x1597.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1598=IKsin(j14);
IkReal x1599=IKcos(j14);
IkReal x1600=((1.0)*sj10);
IkReal x1601=(sj15*x1598);
IkReal x1602=((1.0)*x1599);
IkReal x1603=((1.0)*x1598);
IkReal x1604=(cj15*x1599);
IkReal x1605=(cj15*x1603);
evalcond[0]=((((-1.0)*r20*x1605))+((r21*x1601))+(((-1.0)*r22*x1602)));
evalcond[1]=((((-1.0)*r22*x1603))+(((-1.0)*r21*sj15*x1602))+((r20*x1604)));
evalcond[2]=(((r11*x1601))+cj10+(((-1.0)*r10*x1605))+(((-1.0)*r12*x1602)));
evalcond[3]=((((-1.0)*x1600))+((r01*x1601))+(((-1.0)*r00*x1605))+(((-1.0)*r02*x1602)));
evalcond[4]=(((r00*x1604))+(((-1.0)*r02*x1603))+(((-1.0)*r01*sj15*x1602))+(((-1.0)*cj10)));
evalcond[5]=((((-1.0)*x1600))+(((-1.0)*r11*sj15*x1602))+(((-1.0)*r12*x1603))+((r10*x1604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1606=((1.0)*cj15);
CheckValue<IkReal> x1607 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x1606))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1607.valid){
continue;
}
CheckValue<IkReal> x1608=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1606))+(((-1.0)*r00*sj15)))),-1);
if(!x1608.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1607.value)+(((1.5707963267949)*(x1608.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1609=IKsin(j14);
IkReal x1610=IKcos(j14);
IkReal x1611=((1.0)*sj10);
IkReal x1612=(sj15*x1609);
IkReal x1613=((1.0)*x1610);
IkReal x1614=((1.0)*x1609);
IkReal x1615=(cj15*x1610);
IkReal x1616=(cj15*x1614);
evalcond[0]=((((-1.0)*r20*x1616))+((r21*x1612))+(((-1.0)*r22*x1613)));
evalcond[1]=(((r20*x1615))+(((-1.0)*r21*sj15*x1613))+(((-1.0)*r22*x1614)));
evalcond[2]=((((-1.0)*r12*x1613))+cj10+((r11*x1612))+(((-1.0)*r10*x1616)));
evalcond[3]=(((r01*x1612))+(((-1.0)*x1611))+(((-1.0)*r00*x1616))+(((-1.0)*r02*x1613)));
evalcond[4]=(((r00*x1615))+(((-1.0)*r02*x1614))+(((-1.0)*r01*sj15*x1613))+(((-1.0)*cj10)));
evalcond[5]=((((-1.0)*r12*x1614))+(((-1.0)*x1611))+(((-1.0)*r11*sj15*x1613))+((r10*x1615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
evalcond[0]=((((-0.11235)*(IKsin(j10))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x1617=((1.0)*cj15);
IkReal x1618=((((-1.0)*r01*x1617))+(((-1.0)*r00*sj15)));
j14eval[0]=x1618;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x1617))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x1618);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x1619=cj15*cj15;
IkReal x1620=(r01*r21);
IkReal x1621=((1.0)*cj15*sj15);
IkReal x1622=(((r00*r20*x1619))+x1620+((r02*r22))+(((-1.0)*x1619*x1620))+(((-1.0)*r01*r20*x1621))+(((-1.0)*r00*r21*x1621)));
j14eval[0]=x1622;
j14eval[1]=IKsign(x1622);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x1623=cj15*cj15;
IkReal x1624=(r21*sj15);
IkReal x1625=(r11*r21);
IkReal x1626=((1.0)*cj15);
IkReal x1627=(x1625+((r10*r20*x1623))+(((-1.0)*r11*r20*sj15*x1626))+((r12*r22))+(((-1.0)*x1623*x1625))+(((-1.0)*r10*x1624*x1626)));
j14eval[0]=x1627;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x1626))+((sj10*x1624)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x1627);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1628=cj15*cj15;
IkReal x1629=(r21*sj15);
IkReal x1630=((1.0)*cj15);
IkReal x1631=(r11*r21);
CheckValue<IkReal> x1632=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x1629*x1630))+x1631+((r10*r20*x1628))+((r12*r22))+(((-1.0)*x1628*x1631))+(((-1.0)*r11*r20*sj15*x1630)))),-1);
if(!x1632.valid){
continue;
}
CheckValue<IkReal> x1633 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x1630))+((sj10*x1629)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1633.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1632.value)))+(x1633.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1634=IKsin(j14);
IkReal x1635=IKcos(j14);
IkReal x1636=(sj15*x1634);
IkReal x1637=((1.0)*x1635);
IkReal x1638=((1.0)*x1634);
IkReal x1639=(cj15*x1635);
IkReal x1640=(cj15*x1638);
evalcond[0]=(((r21*x1636))+(((-1.0)*r22*x1637))+(((-1.0)*r20*x1640)));
evalcond[1]=((((-1.0)*r22*x1638))+((r20*x1639))+(((-1.0)*r21*sj15*x1637)));
evalcond[2]=(((r11*x1636))+(((-1.0)*r12*x1637))+cj10+(((-1.0)*r10*x1640)));
evalcond[3]=((((-1.0)*r01*sj15*x1637))+cj10+((r00*x1639))+(((-1.0)*r02*x1638)));
evalcond[4]=((((-1.0)*r12*x1638))+((r10*x1639))+(((-1.0)*r11*sj15*x1637))+sj10);
evalcond[5]=((((-1.0)*r00*x1640))+((r01*x1636))+(((-1.0)*sj10))+(((-1.0)*r02*x1637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1641=cj15*cj15;
IkReal x1642=(r01*r21);
IkReal x1643=((1.0)*cj15*sj15);
CheckValue<IkReal> x1644 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1644.valid){
continue;
}
CheckValue<IkReal> x1645=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r21*x1643))+x1642+(((-1.0)*x1641*x1642))+((r00*r20*x1641))+(((-1.0)*r01*r20*x1643))+((r02*r22)))),-1);
if(!x1645.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1644.value)+(((1.5707963267949)*(x1645.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1646=IKsin(j14);
IkReal x1647=IKcos(j14);
IkReal x1648=(sj15*x1646);
IkReal x1649=((1.0)*x1647);
IkReal x1650=((1.0)*x1646);
IkReal x1651=(cj15*x1647);
IkReal x1652=(cj15*x1650);
evalcond[0]=(((r21*x1648))+(((-1.0)*r22*x1649))+(((-1.0)*r20*x1652)));
evalcond[1]=((((-1.0)*r22*x1650))+(((-1.0)*r21*sj15*x1649))+((r20*x1651)));
evalcond[2]=(((r11*x1648))+(((-1.0)*r12*x1649))+(((-1.0)*r10*x1652))+cj10);
evalcond[3]=((((-1.0)*r01*sj15*x1649))+((r00*x1651))+cj10+(((-1.0)*r02*x1650)));
evalcond[4]=(((r10*x1651))+(((-1.0)*r11*sj15*x1649))+(((-1.0)*r12*x1650))+sj10);
evalcond[5]=((((-1.0)*r00*x1652))+(((-1.0)*sj10))+((r01*x1648))+(((-1.0)*r02*x1649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1653=((1.0)*cj15);
CheckValue<IkReal> x1654=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1653))+(((-1.0)*r00*sj15)))),-1);
if(!x1654.valid){
continue;
}
CheckValue<IkReal> x1655 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x1653)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1655.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1654.value)))+(x1655.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1656=IKsin(j14);
IkReal x1657=IKcos(j14);
IkReal x1658=(sj15*x1656);
IkReal x1659=((1.0)*x1657);
IkReal x1660=((1.0)*x1656);
IkReal x1661=(cj15*x1657);
IkReal x1662=(cj15*x1660);
evalcond[0]=((((-1.0)*r22*x1659))+(((-1.0)*r20*x1662))+((r21*x1658)));
evalcond[1]=((((-1.0)*r22*x1660))+((r20*x1661))+(((-1.0)*r21*sj15*x1659)));
evalcond[2]=(((r11*x1658))+(((-1.0)*r10*x1662))+(((-1.0)*r12*x1659))+cj10);
evalcond[3]=(((r00*x1661))+cj10+(((-1.0)*r02*x1660))+(((-1.0)*r01*sj15*x1659)));
evalcond[4]=(((r10*x1661))+(((-1.0)*r11*sj15*x1659))+(((-1.0)*r12*x1660))+sj10);
evalcond[5]=((((-1.0)*r00*x1662))+((r01*x1658))+(((-1.0)*sj10))+(((-1.0)*r02*x1659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
evalcond[0]=((((-0.11235)*(IKsin(j10))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x1663=((1.0)*cj15);
IkReal x1664=((((-1.0)*r01*x1663))+(((-1.0)*r00*sj15)));
j14eval[0]=x1664;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x1663))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x1664);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x1665=((1.0)*cj15);
IkReal x1666=((((-1.0)*r11*x1665))+(((-1.0)*r10*sj15)));
j14eval[0]=x1666;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x1665))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x1666);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x1667=cj15*cj15;
IkReal x1668=(r11*r21);
IkReal x1669=(cj15*r20);
IkReal x1670=((1.0)*r21*sj15);
IkReal x1671=(x1668+(((-1.0)*r11*sj15*x1669))+((r12*r22))+(((-1.0)*cj15*r10*x1670))+(((-1.0)*x1667*x1668))+((r10*r20*x1667)));
j14eval[0]=x1671;
j14eval[1]=IKsign(x1671);
j14eval[2]=((IKabs(((((-1.0)*cj10*x1670))+((cj10*x1669)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1672=cj15*cj15;
IkReal x1673=(cj15*r20);
IkReal x1674=(r11*r21);
IkReal x1675=((1.0)*r21*sj15);
CheckValue<IkReal> x1676 = IKatan2WithCheck(IkReal((((cj10*x1673))+(((-1.0)*cj10*x1675)))),IkReal((cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1676.valid){
continue;
}
CheckValue<IkReal> x1677=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj15*x1673))+(((-1.0)*x1672*x1674))+x1674+((r12*r22))+(((-1.0)*cj15*r10*x1675))+((r10*r20*x1672)))),-1);
if(!x1677.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1676.value)+(((1.5707963267949)*(x1677.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1678=IKsin(j14);
IkReal x1679=IKcos(j14);
IkReal x1680=((1.0)*sj10);
IkReal x1681=(sj15*x1678);
IkReal x1682=((1.0)*x1679);
IkReal x1683=((1.0)*x1678);
IkReal x1684=(cj15*x1679);
IkReal x1685=(cj15*x1683);
evalcond[0]=((((-1.0)*r20*x1685))+((r21*x1681))+(((-1.0)*r22*x1682)));
evalcond[1]=((((-1.0)*r21*sj15*x1682))+(((-1.0)*r22*x1683))+((r20*x1684)));
evalcond[2]=((((-1.0)*r12*x1682))+((r11*x1681))+(((-1.0)*r10*x1685))+cj10);
evalcond[3]=((((-1.0)*x1680))+((r01*x1681))+(((-1.0)*r02*x1682))+(((-1.0)*r00*x1685)));
evalcond[4]=(((r00*x1684))+(((-1.0)*cj10))+(((-1.0)*r01*sj15*x1682))+(((-1.0)*r02*x1683)));
evalcond[5]=((((-1.0)*r12*x1683))+(((-1.0)*x1680))+((r10*x1684))+(((-1.0)*r11*sj15*x1682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1686=((1.0)*cj15);
CheckValue<IkReal> x1687 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x1686))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1687.valid){
continue;
}
CheckValue<IkReal> x1688=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1686))+(((-1.0)*r10*sj15)))),-1);
if(!x1688.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1687.value)+(((1.5707963267949)*(x1688.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1689=IKsin(j14);
IkReal x1690=IKcos(j14);
IkReal x1691=((1.0)*sj10);
IkReal x1692=(sj15*x1689);
IkReal x1693=((1.0)*x1690);
IkReal x1694=((1.0)*x1689);
IkReal x1695=(cj15*x1690);
IkReal x1696=(cj15*x1694);
evalcond[0]=(((r21*x1692))+(((-1.0)*r20*x1696))+(((-1.0)*r22*x1693)));
evalcond[1]=(((r20*x1695))+(((-1.0)*r21*sj15*x1693))+(((-1.0)*r22*x1694)));
evalcond[2]=((((-1.0)*r12*x1693))+((r11*x1692))+cj10+(((-1.0)*r10*x1696)));
evalcond[3]=(((r01*x1692))+(((-1.0)*x1691))+(((-1.0)*r02*x1693))+(((-1.0)*r00*x1696)));
evalcond[4]=(((r00*x1695))+(((-1.0)*r02*x1694))+(((-1.0)*r01*sj15*x1693))+(((-1.0)*cj10)));
evalcond[5]=(((r10*x1695))+(((-1.0)*x1691))+(((-1.0)*r12*x1694))+(((-1.0)*r11*sj15*x1693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1697=((1.0)*cj15);
CheckValue<IkReal> x1698=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x1697)))),-1);
if(!x1698.valid){
continue;
}
CheckValue<IkReal> x1699 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x1697))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1699.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1698.value)))+(x1699.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1700=IKsin(j14);
IkReal x1701=IKcos(j14);
IkReal x1702=((1.0)*sj10);
IkReal x1703=(sj15*x1700);
IkReal x1704=((1.0)*x1701);
IkReal x1705=((1.0)*x1700);
IkReal x1706=(cj15*x1701);
IkReal x1707=(cj15*x1705);
evalcond[0]=((((-1.0)*r20*x1707))+((r21*x1703))+(((-1.0)*r22*x1704)));
evalcond[1]=(((r20*x1706))+(((-1.0)*r21*sj15*x1704))+(((-1.0)*r22*x1705)));
evalcond[2]=(((r11*x1703))+(((-1.0)*r10*x1707))+cj10+(((-1.0)*r12*x1704)));
evalcond[3]=(((r01*x1703))+(((-1.0)*r02*x1704))+(((-1.0)*x1702))+(((-1.0)*r00*x1707)));
evalcond[4]=((((-1.0)*r01*sj15*x1704))+((r00*x1706))+(((-1.0)*r02*x1705))+(((-1.0)*cj10)));
evalcond[5]=((((-1.0)*r11*sj15*x1704))+(((-1.0)*x1702))+((r10*x1706))+(((-1.0)*r12*x1705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10, j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1708=(sj11*sj12);
IkReal x1709=(cj11*cj12);
IkReal x1710=((20000.0)*px);
IkReal x1711=((4873.0)*cj11);
IkReal x1712=(r00*sj15);
IkReal x1713=(cj15*r01);
CheckValue<IkReal> x1714=IKPowWithIntegerCheck(((((-2247.0)*x1709))+(((2247.0)*x1708))),-1);
if(!x1714.valid){
continue;
}
CheckValue<IkReal> x1715=IKPowWithIntegerCheck((x1708+(((-1.0)*x1709))),-1);
if(!x1715.valid){
continue;
}
if( IKabs(((x1714.value)*(((((2558.0)*x1708*x1712))+(((2558.0)*x1708*x1713))+((x1709*x1710))+(((-1.0)*x1708*x1710))+(((-1.0)*x1711*x1712))+(((-1.0)*x1711*x1713))+(((-2558.0)*x1709*x1712))+(((-2558.0)*x1709*x1713)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1715.value)*(((((-1.0)*x1713))+(((-1.0)*x1712)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1714.value)*(((((2558.0)*x1708*x1712))+(((2558.0)*x1708*x1713))+((x1709*x1710))+(((-1.0)*x1708*x1710))+(((-1.0)*x1711*x1712))+(((-1.0)*x1711*x1713))+(((-2558.0)*x1709*x1712))+(((-2558.0)*x1709*x1713))))))+IKsqr(((x1715.value)*(((((-1.0)*x1713))+(((-1.0)*x1712))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x1714.value)*(((((2558.0)*x1708*x1712))+(((2558.0)*x1708*x1713))+((x1709*x1710))+(((-1.0)*x1708*x1710))+(((-1.0)*x1711*x1712))+(((-1.0)*x1711*x1713))+(((-2558.0)*x1709*x1712))+(((-2558.0)*x1709*x1713))))), ((x1715.value)*(((((-1.0)*x1713))+(((-1.0)*x1712))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x1716=IKcos(j10);
IkReal x1717=IKsin(j10);
IkReal x1718=(sj11*sj12);
IkReal x1719=(cj11*cj12);
IkReal x1720=(r10*sj15);
IkReal x1721=(r00*sj15);
IkReal x1722=((0.08535)*cj15);
IkReal x1723=(cj11*x1717);
IkReal x1724=((0.21325)*x1716);
evalcond[0]=((((-1.0)*x1716*x1719))+((cj15*r01))+x1721+((x1716*x1718)));
evalcond[1]=(((cj15*r11))+x1720+(((-1.0)*x1717*x1719))+((x1717*x1718)));
evalcond[2]=((((-1.0)*r01*x1722))+(((-1.0)*px))+(((-0.08535)*x1721))+(((0.24365)*cj11*x1716))+(((-1.0)*x1718*x1724))+((x1719*x1724))+(((-0.11235)*x1717)));
evalcond[3]=((((0.24365)*x1723))+(((-0.21325)*x1717*x1718))+(((-1.0)*r11*x1722))+(((0.11235)*x1716))+(((0.21325)*x1717*x1719))+(((-1.0)*py))+(((-0.08535)*x1720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x1725=((1.0)*cj15);
IkReal x1726=((((-1.0)*r01*x1725))+(((-1.0)*r00*sj15)));
j14eval[0]=x1726;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x1725))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x1726);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x1727=((1.0)*cj15);
IkReal x1728=((((-1.0)*r11*x1727))+(((-1.0)*r10*sj15)));
j14eval[0]=x1728;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x1727))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x1728);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x1729=((1.0)*sj15);
IkReal x1730=((((-1.0)*cj15*r21))+(((-1.0)*r20*x1729)));
j14eval[0]=x1730;
j14eval[1]=((IKabs(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))))+(IKabs((((cj15*r10*sj10))+(((-1.0)*cj10*r01*x1729))+(((-1.0)*r11*sj10*x1729))+((cj10*cj15*r00))))));
j14eval[2]=IKsign(x1730);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1731=((-1.0)*r20);
IkReal x1733 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1733)==0){
continue;
}
IkReal x1732=pow(x1733,-0.5);
CheckValue<IkReal> x1734 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1731),IKFAST_ATAN2_MAGTHRESH);
if(!x1734.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1734.value));
IkReal gconst79=(r21*x1732);
IkReal gconst80=(x1731*x1732);
CheckValue<IkReal> x1735 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1735.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x1735.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x1736=((-1.0)*r20);
IkReal x1737=x1732;
CheckValue<IkReal> x1739 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1736),IKFAST_ATAN2_MAGTHRESH);
if(!x1739.valid){
continue;
}
IkReal x1738=((-1.0)*(x1739.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst79;
cj15=gconst80;
j15=x1738;
IkReal gconst78=x1738;
IkReal gconst79=(r21*x1737);
IkReal gconst80=(x1736*x1737);
j14eval[0]=cj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x1740=((-1.0)*r20);
IkReal x1741=x1732;
CheckValue<IkReal> x1743 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1740),IKFAST_ATAN2_MAGTHRESH);
if(!x1743.valid){
continue;
}
IkReal x1742=((-1.0)*(x1743.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst79;
cj15=gconst80;
j15=x1742;
IkReal gconst78=x1742;
IkReal gconst79=(r21*x1741);
IkReal gconst80=(x1740*x1741);
j14eval[0]=sj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x1744=((-1.0)*r20);
IkReal x1745=x1732;
CheckValue<IkReal> x1747 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1744),IKFAST_ATAN2_MAGTHRESH);
if(!x1747.valid){
continue;
}
IkReal x1746=((-1.0)*(x1747.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst79;
cj15=gconst80;
j15=x1746;
IkReal gconst78=x1746;
IkReal gconst79=(r21*x1745);
IkReal gconst80=(x1744*x1745);
IkReal x1748=r22*r22;
CheckValue<IkReal> x1751=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1748))),-1);
if(!x1751.valid){
continue;
}
IkReal x1749=x1751.value;
IkReal x1750=(x1748+((x1749*(r20*r20*r20*r20)))+(((2.0)*x1749*(r20*r20)*(r21*r21)))+((x1749*(r21*r21*r21*r21))));
j14eval[0]=x1750;
j14eval[1]=IKsign(x1750);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1752=(sj11*sj12);
IkReal x1753=(gconst79*r21);
IkReal x1754=(cj11*cj12);
IkReal x1755=(gconst80*r20);
CheckValue<IkReal> x1756=IKPowWithIntegerCheck(IKsign(((((-2.0)*x1753*x1755))+(r22*r22)+(x1753*x1753)+(x1755*x1755))),-1);
if(!x1756.valid){
continue;
}
CheckValue<IkReal> x1757 = IKatan2WithCheck(IkReal((((r22*x1752))+(((-1.0)*r22*x1754)))),IkReal((((x1752*x1753))+(((-1.0)*x1752*x1755))+((x1754*x1755))+(((-1.0)*x1753*x1754)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1757.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1756.value)))+(x1757.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1758=IKsin(j14);
IkReal x1759=IKcos(j14);
IkReal x1760=(gconst80*r10);
IkReal x1761=(gconst79*r11);
IkReal x1762=((1.0)*cj11);
IkReal x1763=((1.0)*sj10);
IkReal x1764=(gconst79*r01);
IkReal x1765=(gconst80*r00);
IkReal x1766=(cj12*sj11);
IkReal x1767=(gconst79*r21);
IkReal x1768=(gconst80*r20);
IkReal x1769=((1.0)*x1759);
IkReal x1770=((1.0)*x1758);
evalcond[0]=(((x1758*x1767))+(((-1.0)*r22*x1769))+(((-1.0)*x1768*x1770)));
evalcond[1]=(cj10+(((-1.0)*r12*x1769))+((x1758*x1761))+(((-1.0)*x1760*x1770)));
evalcond[2]=((((-1.0)*x1763))+(((-1.0)*r02*x1769))+((x1758*x1764))+(((-1.0)*x1765*x1770)));
evalcond[3]=(((sj11*sj12))+((x1759*x1768))+(((-1.0)*cj12*x1762))+(((-1.0)*r22*x1770))+(((-1.0)*x1767*x1769)));
evalcond[4]=(((x1759*x1765))+(((-1.0)*cj10*sj12*x1762))+(((-1.0)*r02*x1770))+(((-1.0)*cj10*x1766))+(((-1.0)*x1764*x1769)));
evalcond[5]=(((x1759*x1760))+(((-1.0)*x1763*x1766))+(((-1.0)*x1761*x1769))+(((-1.0)*sj10*sj12*x1762))+(((-1.0)*r12*x1770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1771=((1.0)*gconst80);
CheckValue<IkReal> x1772 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst79*r21*sj10))+(((-1.0)*r20*sj10*x1771)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1772.valid){
continue;
}
CheckValue<IkReal> x1773=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x1771)))),-1);
if(!x1773.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1772.value)+(((1.5707963267949)*(x1773.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1774=IKsin(j14);
IkReal x1775=IKcos(j14);
IkReal x1776=(gconst80*r10);
IkReal x1777=(gconst79*r11);
IkReal x1778=((1.0)*cj11);
IkReal x1779=((1.0)*sj10);
IkReal x1780=(gconst79*r01);
IkReal x1781=(gconst80*r00);
IkReal x1782=(cj12*sj11);
IkReal x1783=(gconst79*r21);
IkReal x1784=(gconst80*r20);
IkReal x1785=((1.0)*x1775);
IkReal x1786=((1.0)*x1774);
evalcond[0]=((((-1.0)*r22*x1785))+((x1774*x1783))+(((-1.0)*x1784*x1786)));
evalcond[1]=((((-1.0)*r12*x1785))+cj10+((x1774*x1777))+(((-1.0)*x1776*x1786)));
evalcond[2]=(((x1774*x1780))+(((-1.0)*x1779))+(((-1.0)*x1781*x1786))+(((-1.0)*r02*x1785)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x1783*x1785))+((x1775*x1784))+(((-1.0)*r22*x1786))+(((-1.0)*cj12*x1778)));
evalcond[4]=(((x1775*x1781))+(((-1.0)*cj10*x1782))+(((-1.0)*cj10*sj12*x1778))+(((-1.0)*x1780*x1785))+(((-1.0)*r02*x1786)));
evalcond[5]=((((-1.0)*r12*x1786))+(((-1.0)*x1777*x1785))+((x1775*x1776))+(((-1.0)*x1779*x1782))+(((-1.0)*sj10*sj12*x1778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1787=((1.0)*gconst80);
CheckValue<IkReal> x1788 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst79*r21))+(((-1.0)*cj10*r20*x1787)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1788.valid){
continue;
}
CheckValue<IkReal> x1789=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1787))+(((-1.0)*gconst79*r00)))),-1);
if(!x1789.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1788.value)+(((1.5707963267949)*(x1789.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1790=IKsin(j14);
IkReal x1791=IKcos(j14);
IkReal x1792=(gconst80*r10);
IkReal x1793=(gconst79*r11);
IkReal x1794=((1.0)*cj11);
IkReal x1795=((1.0)*sj10);
IkReal x1796=(gconst79*r01);
IkReal x1797=(gconst80*r00);
IkReal x1798=(cj12*sj11);
IkReal x1799=(gconst79*r21);
IkReal x1800=(gconst80*r20);
IkReal x1801=((1.0)*x1791);
IkReal x1802=((1.0)*x1790);
evalcond[0]=((((-1.0)*x1800*x1802))+((x1790*x1799))+(((-1.0)*r22*x1801)));
evalcond[1]=(cj10+(((-1.0)*x1792*x1802))+((x1790*x1793))+(((-1.0)*r12*x1801)));
evalcond[2]=((((-1.0)*x1795))+(((-1.0)*x1797*x1802))+(((-1.0)*r02*x1801))+((x1790*x1796)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x1794))+(((-1.0)*x1799*x1801))+((x1791*x1800))+(((-1.0)*r22*x1802)));
evalcond[4]=((((-1.0)*cj10*sj12*x1794))+(((-1.0)*cj10*x1798))+(((-1.0)*x1796*x1801))+(((-1.0)*r02*x1802))+((x1791*x1797)));
evalcond[5]=((((-1.0)*x1795*x1798))+(((-1.0)*sj10*sj12*x1794))+(((-1.0)*x1793*x1801))+((x1791*x1792))+(((-1.0)*r12*x1802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1803=((-1.0)*r21);
IkReal x1805 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1805)==0){
continue;
}
IkReal x1804=pow(x1805,-0.5);
CheckValue<IkReal> x1806 = IKatan2WithCheck(IkReal(x1803),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1806.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1806.value))));
IkReal gconst82=(x1803*x1804);
IkReal gconst83=((1.0)*r20*x1804);
CheckValue<IkReal> x1807 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1807.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x1807.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x1808=((-1.0)*r21);
CheckValue<IkReal> x1811 = IKatan2WithCheck(IkReal(x1808),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1811.valid){
continue;
}
IkReal x1809=((1.0)*(x1811.value));
IkReal x1810=x1804;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst82;
cj15=gconst83;
j15=((3.14159265)+(((-1.0)*x1809)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1809)));
IkReal gconst82=(x1808*x1810);
IkReal gconst83=((1.0)*r20*x1810);
IkReal x1812=r22*r22;
IkReal x1813=((1.0)*x1812);
CheckValue<IkReal> x1817=IKPowWithIntegerCheck(((-1.0)+x1812),-1);
if(!x1817.valid){
continue;
}
IkReal x1814=x1817.value;
if((((1.0)+(((-1.0)*x1813)))) < -0.00001)
continue;
IkReal x1815=IKsqrt(((1.0)+(((-1.0)*x1813))));
IkReal x1816=(cj10*x1814*x1815);
j14eval[0]=((IKabs(((((-1.0)*x1813*x1816))+x1816)))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x1818=((-1.0)*r21);
CheckValue<IkReal> x1821 = IKatan2WithCheck(IkReal(x1818),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1821.valid){
continue;
}
IkReal x1819=((1.0)*(x1821.value));
IkReal x1820=x1804;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst82;
cj15=gconst83;
j15=((3.14159265)+(((-1.0)*x1819)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1819)));
IkReal gconst82=(x1818*x1820);
IkReal gconst83=((1.0)*r20*x1820);
IkReal x1822=r22*r22;
IkReal x1823=((1.0)*x1822);
CheckValue<IkReal> x1827=IKPowWithIntegerCheck(((-1.0)+x1822),-1);
if(!x1827.valid){
continue;
}
IkReal x1824=x1827.value;
if((((1.0)+(((-1.0)*x1823)))) < -0.00001)
continue;
IkReal x1825=IKsqrt(((1.0)+(((-1.0)*x1823))));
IkReal x1826=(sj10*x1824*x1825);
j14eval[0]=((IKabs((x1826+(((-1.0)*x1823*x1826)))))+(IKabs((r22*sj10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x1828=((-1.0)*r21);
CheckValue<IkReal> x1831 = IKatan2WithCheck(IkReal(x1828),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1831.valid){
continue;
}
IkReal x1829=((1.0)*(x1831.value));
IkReal x1830=x1804;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst82;
cj15=gconst83;
j15=((3.14159265)+(((-1.0)*x1829)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1829)));
IkReal gconst82=(x1828*x1830);
IkReal gconst83=((1.0)*r20*x1830);
IkReal x1832=r22*r22;
IkReal x1833=(cj10*r02);
IkReal x1834=(r12*sj10);
CheckValue<IkReal> x1838=IKPowWithIntegerCheck(((-1.0)+x1832),-1);
if(!x1838.valid){
continue;
}
IkReal x1835=x1838.value;
if((((1.0)+(((-1.0)*x1832)))) < -0.00001)
continue;
IkReal x1836=IKsqrt(((1.0)+(((-1.0)*x1832))));
IkReal x1837=(r22*x1835*x1836);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=((IKabs(((((-1.0)*x1834))+(((-1.0)*x1833)))))+(IKabs((((x1833*x1837))+((x1834*x1837))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1839=((1.0)*gconst82);
CheckValue<IkReal> x1840 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x1839))+((gconst83*r10*sj10))+(((-1.0)*cj10*r01*x1839))+((cj10*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1840.valid){
continue;
}
CheckValue<IkReal> x1841=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x1839))+(((-1.0)*gconst83*r21)))),-1);
if(!x1841.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1840.value)+(((1.5707963267949)*(x1841.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1842=IKsin(j14);
IkReal x1843=IKcos(j14);
IkReal x1844=(gconst82*r01);
IkReal x1845=((1.0)*cj11);
IkReal x1846=(gconst82*r21);
IkReal x1847=((1.0)*sj10);
IkReal x1848=(gconst83*r00);
IkReal x1849=(gconst83*r10);
IkReal x1850=(gconst83*r20);
IkReal x1851=(gconst82*r11);
IkReal x1852=(cj12*sj11);
IkReal x1853=((1.0)*x1843);
IkReal x1854=((1.0)*x1842);
evalcond[0]=((((-1.0)*r22*x1853))+(((-1.0)*x1850*x1854))+((x1842*x1846)));
evalcond[1]=(((x1842*x1851))+(((-1.0)*x1849*x1854))+cj10+(((-1.0)*r12*x1853)));
evalcond[2]=((((-1.0)*x1848*x1854))+(((-1.0)*x1847))+(((-1.0)*r02*x1853))+((x1842*x1844)));
evalcond[3]=(((sj11*sj12))+((x1843*x1850))+(((-1.0)*cj12*x1845))+(((-1.0)*r22*x1854))+(((-1.0)*x1846*x1853)));
evalcond[4]=((((-1.0)*cj10*x1852))+(((-1.0)*r02*x1854))+(((-1.0)*cj10*sj12*x1845))+((x1843*x1848))+(((-1.0)*x1844*x1853)));
evalcond[5]=((((-1.0)*x1851*x1853))+(((-1.0)*r12*x1854))+((x1843*x1849))+(((-1.0)*sj10*sj12*x1845))+(((-1.0)*x1847*x1852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1855=((1.0)*gconst83);
CheckValue<IkReal> x1856=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x1855)))),-1);
if(!x1856.valid){
continue;
}
CheckValue<IkReal> x1857 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst82*r21*sj10))+(((-1.0)*r20*sj10*x1855)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1857.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1856.value)))+(x1857.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1858=IKsin(j14);
IkReal x1859=IKcos(j14);
IkReal x1860=(gconst82*r01);
IkReal x1861=((1.0)*cj11);
IkReal x1862=(gconst82*r21);
IkReal x1863=((1.0)*sj10);
IkReal x1864=(gconst83*r00);
IkReal x1865=(gconst83*r10);
IkReal x1866=(gconst83*r20);
IkReal x1867=(gconst82*r11);
IkReal x1868=(cj12*sj11);
IkReal x1869=((1.0)*x1859);
IkReal x1870=((1.0)*x1858);
evalcond[0]=((((-1.0)*x1866*x1870))+((x1858*x1862))+(((-1.0)*r22*x1869)));
evalcond[1]=(((x1858*x1867))+cj10+(((-1.0)*r12*x1869))+(((-1.0)*x1865*x1870)));
evalcond[2]=((((-1.0)*r02*x1869))+(((-1.0)*x1864*x1870))+((x1858*x1860))+(((-1.0)*x1863)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r22*x1870))+(((-1.0)*cj12*x1861))+((x1859*x1866))+(((-1.0)*x1862*x1869)));
evalcond[4]=((((-1.0)*x1860*x1869))+(((-1.0)*r02*x1870))+((x1859*x1864))+(((-1.0)*cj10*sj12*x1861))+(((-1.0)*cj10*x1868)));
evalcond[5]=((((-1.0)*sj10*sj12*x1861))+(((-1.0)*x1867*x1869))+(((-1.0)*x1863*x1868))+((x1859*x1865))+(((-1.0)*r12*x1870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1871=((1.0)*gconst83);
CheckValue<IkReal> x1872 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x1871))+((cj10*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1872.valid){
continue;
}
CheckValue<IkReal> x1873=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1871))+(((-1.0)*gconst82*r00)))),-1);
if(!x1873.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1872.value)+(((1.5707963267949)*(x1873.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1874=IKsin(j14);
IkReal x1875=IKcos(j14);
IkReal x1876=(gconst82*r01);
IkReal x1877=((1.0)*cj11);
IkReal x1878=(gconst82*r21);
IkReal x1879=((1.0)*sj10);
IkReal x1880=(gconst83*r00);
IkReal x1881=(gconst83*r10);
IkReal x1882=(gconst83*r20);
IkReal x1883=(gconst82*r11);
IkReal x1884=(cj12*sj11);
IkReal x1885=((1.0)*x1875);
IkReal x1886=((1.0)*x1874);
evalcond[0]=((((-1.0)*x1882*x1886))+((x1874*x1878))+(((-1.0)*r22*x1885)));
evalcond[1]=(((x1874*x1883))+(((-1.0)*r12*x1885))+cj10+(((-1.0)*x1881*x1886)));
evalcond[2]=((((-1.0)*x1880*x1886))+(((-1.0)*x1879))+((x1874*x1876))+(((-1.0)*r02*x1885)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x1877))+(((-1.0)*r22*x1886))+(((-1.0)*x1878*x1885))+((x1875*x1882)));
evalcond[4]=((((-1.0)*x1876*x1885))+(((-1.0)*cj10*x1884))+(((-1.0)*r02*x1886))+((x1875*x1880))+(((-1.0)*cj10*sj12*x1877)));
evalcond[5]=((((-1.0)*x1879*x1884))+(((-1.0)*x1883*x1885))+(((-1.0)*r12*x1886))+((x1875*x1881))+(((-1.0)*sj10*sj12*x1877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1887=((-1.0)*r10);
IkReal x1889 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1889)==0){
continue;
}
IkReal x1888=pow(x1889,-0.5);
CheckValue<IkReal> x1890 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1887),IKFAST_ATAN2_MAGTHRESH);
if(!x1890.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1890.value));
IkReal gconst85=(r11*x1888);
IkReal gconst86=(x1887*x1888);
CheckValue<IkReal> x1891 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1891.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x1891.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x1892=((-1.0)*r10);
IkReal x1893=x1888;
CheckValue<IkReal> x1895 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1892),IKFAST_ATAN2_MAGTHRESH);
if(!x1895.valid){
continue;
}
IkReal x1894=((-1.0)*(x1895.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst85;
cj15=gconst86;
j15=x1894;
IkReal gconst84=x1894;
IkReal gconst85=(r11*x1893);
IkReal gconst86=(x1892*x1893);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1896=((1.0)*gconst85);
CheckValue<IkReal> x1897=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x1896)))),-1);
if(!x1897.valid){
continue;
}
CheckValue<IkReal> x1898 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x1896))+((cj10*gconst86*r00))+((gconst86*r10*sj10))+(((-1.0)*r11*sj10*x1896)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1898.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1897.value)))+(x1898.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1899=IKsin(j14);
IkReal x1900=IKcos(j14);
IkReal x1901=((1.0)*cj11);
IkReal x1902=(gconst85*r21);
IkReal x1903=(gconst85*r01);
IkReal x1904=(gconst86*r20);
IkReal x1905=(gconst86*r10);
IkReal x1906=(gconst86*r00);
IkReal x1907=(gconst85*r11);
IkReal x1908=((1.0)*x1900);
IkReal x1909=((1.0)*x1899);
IkReal x1910=((1.0)*cj12*sj11);
evalcond[0]=((((-1.0)*r22*x1908))+(((-1.0)*x1904*x1909))+((x1899*x1902)));
evalcond[1]=((((-1.0)*x1905*x1909))+cj10+(((-1.0)*r12*x1908))+((x1899*x1907)));
evalcond[2]=(((x1899*x1903))+(((-1.0)*sj10))+(((-1.0)*x1906*x1909))+(((-1.0)*r02*x1908)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x1902*x1908))+(((-1.0)*r22*x1909))+((x1900*x1904))+(((-1.0)*cj12*x1901)));
evalcond[4]=((((-1.0)*cj10*x1910))+(((-1.0)*cj10*sj12*x1901))+(((-1.0)*x1903*x1908))+((x1900*x1906))+(((-1.0)*r02*x1909)));
evalcond[5]=((((-1.0)*sj10*sj12*x1901))+(((-1.0)*x1907*x1908))+((x1900*x1905))+(((-1.0)*r12*x1909))+(((-1.0)*sj10*x1910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1911=((1.0)*gconst86);
CheckValue<IkReal> x1912 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x1911))+((cj10*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1912.valid){
continue;
}
CheckValue<IkReal> x1913=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1911))+(((-1.0)*gconst85*r00)))),-1);
if(!x1913.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1912.value)+(((1.5707963267949)*(x1913.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1914=IKsin(j14);
IkReal x1915=IKcos(j14);
IkReal x1916=((1.0)*cj11);
IkReal x1917=(gconst85*r21);
IkReal x1918=(gconst85*r01);
IkReal x1919=(gconst86*r20);
IkReal x1920=(gconst86*r10);
IkReal x1921=(gconst86*r00);
IkReal x1922=(gconst85*r11);
IkReal x1923=((1.0)*x1915);
IkReal x1924=((1.0)*x1914);
IkReal x1925=((1.0)*cj12*sj11);
evalcond[0]=(((x1914*x1917))+(((-1.0)*r22*x1923))+(((-1.0)*x1919*x1924)));
evalcond[1]=((((-1.0)*r12*x1923))+cj10+((x1914*x1922))+(((-1.0)*x1920*x1924)));
evalcond[2]=(((x1914*x1918))+(((-1.0)*sj10))+(((-1.0)*r02*x1923))+(((-1.0)*x1921*x1924)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x1917*x1923))+(((-1.0)*r22*x1924))+((x1915*x1919))+(((-1.0)*cj12*x1916)));
evalcond[4]=((((-1.0)*x1918*x1923))+(((-1.0)*cj10*x1925))+((x1915*x1921))+(((-1.0)*r02*x1924))+(((-1.0)*cj10*sj12*x1916)));
evalcond[5]=((((-1.0)*r12*x1924))+(((-1.0)*sj10*x1925))+(((-1.0)*x1922*x1923))+((x1915*x1920))+(((-1.0)*sj10*sj12*x1916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1926=((-1.0)*r11);
IkReal x1928 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1928)==0){
continue;
}
IkReal x1927=pow(x1928,-0.5);
CheckValue<IkReal> x1929 = IKatan2WithCheck(IkReal(x1926),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1929.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x1929.value))));
IkReal gconst88=(x1926*x1927);
IkReal gconst89=((1.0)*r10*x1927);
CheckValue<IkReal> x1930 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1930.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x1930.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x1931=((-1.0)*r11);
CheckValue<IkReal> x1934 = IKatan2WithCheck(IkReal(x1931),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1934.valid){
continue;
}
IkReal x1932=((1.0)*(x1934.value));
IkReal x1933=x1927;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst88;
cj15=gconst89;
j15=((3.14159265)+(((-1.0)*x1932)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1932)));
IkReal gconst88=(x1931*x1933);
IkReal gconst89=((1.0)*r10*x1933);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x1935=((-1.0)*r11);
CheckValue<IkReal> x1938 = IKatan2WithCheck(IkReal(x1935),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1938.valid){
continue;
}
IkReal x1936=((1.0)*(x1938.value));
IkReal x1937=x1927;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst88;
cj15=gconst89;
j15=((3.14159265)+(((-1.0)*x1936)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1936)));
IkReal gconst88=(x1935*x1937);
IkReal gconst89=((1.0)*r10*x1937);
IkReal x1939=r12*r12;
IkReal x1940=(cj10*r02);
IkReal x1941=x1927;
IkReal x1942=(sj10*x1941);
j14eval[0]=((IKabs((((r12*x1940*x1941))+((x1939*x1942))+(((-1.0)*x1942)))))+(IKabs(((((-1.0)*x1940))+(((-1.0)*r12*sj10))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x1943=((-1.0)*r11);
CheckValue<IkReal> x1946 = IKatan2WithCheck(IkReal(x1943),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1946.valid){
continue;
}
IkReal x1944=((1.0)*(x1946.value));
IkReal x1945=x1927;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst88;
cj15=gconst89;
j15=((3.14159265)+(((-1.0)*x1944)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1944)));
IkReal gconst88=(x1943*x1945);
IkReal gconst89=((1.0)*r10*x1945);
IkReal x1947=r12*r12;
IkReal x1948=(cj11*cj12*r22);
IkReal x1949=(r22*sj11*sj12);
CheckValue<IkReal> x1953=IKPowWithIntegerCheck(((-1.0)+x1947),-1);
if(!x1953.valid){
continue;
}
IkReal x1950=x1953.value;
if((((1.0)+(((-1.0)*x1947)))) < -0.00001)
continue;
IkReal x1951=IKsqrt(((1.0)+(((-1.0)*x1947))));
IkReal x1952=(r12*x1950*x1951);
j14eval[0]=((IKabs((((x1948*x1952))+(((-1.0)*x1949*x1952)))))+(IKabs((x1949+(((-1.0)*x1948))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1954=(sj11*sj12);
IkReal x1955=(gconst89*r20);
IkReal x1956=(cj11*cj12);
IkReal x1957=(gconst88*r21);
CheckValue<IkReal> x1958=IKPowWithIntegerCheck(IKsign(((x1957*x1957)+(r22*r22)+(x1955*x1955)+(((-2.0)*x1955*x1957)))),-1);
if(!x1958.valid){
continue;
}
CheckValue<IkReal> x1959 = IKatan2WithCheck(IkReal((((r22*x1954))+(((-1.0)*r22*x1956)))),IkReal(((((-1.0)*x1956*x1957))+((x1955*x1956))+(((-1.0)*x1954*x1955))+((x1954*x1957)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1959.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1958.value)))+(x1959.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1960=IKsin(j14);
IkReal x1961=IKcos(j14);
IkReal x1962=((1.0)*cj11);
IkReal x1963=((1.0)*sj10);
IkReal x1964=(cj12*sj11);
IkReal x1965=(gconst88*r01);
IkReal x1966=(gconst89*r20);
IkReal x1967=(gconst88*r11);
IkReal x1968=(gconst88*r21);
IkReal x1969=((1.0)*x1961);
IkReal x1970=((1.0)*x1960);
IkReal x1971=(gconst89*x1961);
evalcond[0]=((((-1.0)*r22*x1969))+(((-1.0)*x1966*x1970))+((x1960*x1968)));
evalcond[1]=(cj10+((x1960*x1967))+(((-1.0)*gconst89*r10*x1970))+(((-1.0)*r12*x1969)));
evalcond[2]=((((-1.0)*r02*x1969))+(((-1.0)*x1963))+(((-1.0)*gconst89*r00*x1970))+((x1960*x1965)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r22*x1970))+(((-1.0)*x1968*x1969))+((x1961*x1966))+(((-1.0)*cj12*x1962)));
evalcond[4]=((((-1.0)*r02*x1970))+(((-1.0)*x1965*x1969))+(((-1.0)*cj10*sj12*x1962))+((r00*x1971))+(((-1.0)*cj10*x1964)));
evalcond[5]=((((-1.0)*sj10*sj12*x1962))+((r10*x1971))+(((-1.0)*r12*x1970))+(((-1.0)*x1963*x1964))+(((-1.0)*x1967*x1969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1972=((1.0)*gconst88);
CheckValue<IkReal> x1973 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((gconst89*r10*sj10))+(((-1.0)*r11*sj10*x1972))+((cj10*gconst89*r00))+(((-1.0)*cj10*r01*x1972)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1973.valid){
continue;
}
CheckValue<IkReal> x1974=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst89*r21))+(((-1.0)*r20*x1972)))),-1);
if(!x1974.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1973.value)+(((1.5707963267949)*(x1974.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1975=IKsin(j14);
IkReal x1976=IKcos(j14);
IkReal x1977=((1.0)*cj11);
IkReal x1978=((1.0)*sj10);
IkReal x1979=(cj12*sj11);
IkReal x1980=(gconst88*r01);
IkReal x1981=(gconst89*r20);
IkReal x1982=(gconst88*r11);
IkReal x1983=(gconst88*r21);
IkReal x1984=((1.0)*x1976);
IkReal x1985=((1.0)*x1975);
IkReal x1986=(gconst89*x1976);
evalcond[0]=((((-1.0)*x1981*x1985))+((x1975*x1983))+(((-1.0)*r22*x1984)));
evalcond[1]=(((x1975*x1982))+cj10+(((-1.0)*r12*x1984))+(((-1.0)*gconst89*r10*x1985)));
evalcond[2]=((((-1.0)*r02*x1984))+((x1975*x1980))+(((-1.0)*x1978))+(((-1.0)*gconst89*r00*x1985)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x1983*x1984))+((x1976*x1981))+(((-1.0)*r22*x1985))+(((-1.0)*cj12*x1977)));
evalcond[4]=((((-1.0)*x1980*x1984))+(((-1.0)*r02*x1985))+(((-1.0)*cj10*sj12*x1977))+(((-1.0)*cj10*x1979))+((r00*x1986)));
evalcond[5]=((((-1.0)*sj10*sj12*x1977))+((r10*x1986))+(((-1.0)*x1978*x1979))+(((-1.0)*r12*x1985))+(((-1.0)*x1982*x1984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1987=((1.0)*gconst89);
CheckValue<IkReal> x1988=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1987))+(((-1.0)*gconst88*r00)))),-1);
if(!x1988.valid){
continue;
}
CheckValue<IkReal> x1989 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x1987))+((cj10*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1989.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1988.value)))+(x1989.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1990=IKsin(j14);
IkReal x1991=IKcos(j14);
IkReal x1992=((1.0)*cj11);
IkReal x1993=((1.0)*sj10);
IkReal x1994=(cj12*sj11);
IkReal x1995=(gconst88*r01);
IkReal x1996=(gconst89*r20);
IkReal x1997=(gconst88*r11);
IkReal x1998=(gconst88*r21);
IkReal x1999=((1.0)*x1991);
IkReal x2000=((1.0)*x1990);
IkReal x2001=(gconst89*x1991);
evalcond[0]=((((-1.0)*x1996*x2000))+((x1990*x1998))+(((-1.0)*r22*x1999)));
evalcond[1]=((((-1.0)*gconst89*r10*x2000))+cj10+((x1990*x1997))+(((-1.0)*r12*x1999)));
evalcond[2]=((((-1.0)*r02*x1999))+(((-1.0)*gconst89*r00*x2000))+(((-1.0)*x1993))+((x1990*x1995)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x1998*x1999))+(((-1.0)*r22*x2000))+((x1991*x1996))+(((-1.0)*cj12*x1992)));
evalcond[4]=((((-1.0)*cj10*x1994))+((r00*x2001))+(((-1.0)*cj10*sj12*x1992))+(((-1.0)*r02*x2000))+(((-1.0)*x1995*x1999)));
evalcond[5]=((((-1.0)*x1993*x1994))+(((-1.0)*x1997*x1999))+((r10*x2001))+(((-1.0)*r12*x2000))+(((-1.0)*sj10*sj12*x1992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
IkReal x2002=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x2002;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj15*r00))+((r01*sj15))))));
j14eval[2]=IKsign(x2002);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
IkReal x2003=((1.0)*cj15);
IkReal x2004=((((-1.0)*r01*x2003))+(((-1.0)*r00*sj15)));
j14eval[0]=x2004;
j14eval[1]=((IKabs((((r21*sj15))+(((-1.0)*r20*x2003)))))+(IKabs(r22)));
j14eval[2]=IKsign(x2004);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
IkReal x2005=cj15*cj15;
IkReal x2006=r11*r11;
IkReal x2007=(r11*sj15);
IkReal x2008=(cj15*r10);
IkReal x2009=((r12*r12)+x2006+(((-2.0)*x2007*x2008))+(((-1.0)*x2005*x2006))+((x2005*(r10*r10))));
j14eval[0]=x2009;
j14eval[1]=IKsign(x2009);
j14eval[2]=((IKabs(r12))+(IKabs((x2008+(((-1.0)*x2007))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2010=cj15*cj15;
IkReal x2011=r11*r11;
IkReal x2012=(r11*sj15);
IkReal x2013=(cj15*r10);
CheckValue<IkReal> x2014 = IKatan2WithCheck(IkReal((x2013+(((-1.0)*x2012)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2014.valid){
continue;
}
CheckValue<IkReal> x2015=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x2010*(r10*r10)))+x2011+(((-2.0)*x2012*x2013))+(((-1.0)*x2010*x2011)))),-1);
if(!x2015.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2014.value)+(((1.5707963267949)*(x2015.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2016=IKsin(j14);
IkReal x2017=IKcos(j14);
IkReal x2018=(r11*sj15);
IkReal x2019=((1.0)*cj11);
IkReal x2020=(cj15*r10);
IkReal x2021=(cj15*r00);
IkReal x2022=(r21*sj15);
IkReal x2023=(r01*sj15);
IkReal x2024=(cj15*r20);
IkReal x2025=((1.0)*x2017);
IkReal x2026=((1.0)*x2016);
evalcond[0]=((((-1.0)*r22*x2025))+(((-1.0)*x2024*x2026))+((x2016*x2022)));
evalcond[1]=((((-1.0)*x2021*x2026))+(((-1.0)*r02*x2025))+((x2016*x2023)));
evalcond[2]=(((x2017*x2020))+(((-1.0)*r12*x2026))+(((-1.0)*x2018*x2025)));
evalcond[3]=((1.0)+((x2016*x2018))+(((-1.0)*r12*x2025))+(((-1.0)*x2020*x2026)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x2022*x2025))+((x2017*x2024))+(((-1.0)*cj12*x2019))+(((-1.0)*r22*x2026)));
evalcond[5]=((((-1.0)*x2023*x2025))+((x2017*x2021))+(((-1.0)*sj12*x2019))+(((-1.0)*r02*x2026))+(((-1.0)*cj12*sj11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2027=((1.0)*cj15);
CheckValue<IkReal> x2028 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj15))+(((-1.0)*r20*x2027)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2028.valid){
continue;
}
CheckValue<IkReal> x2029=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2027))+(((-1.0)*r00*sj15)))),-1);
if(!x2029.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2028.value)+(((1.5707963267949)*(x2029.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2030=IKsin(j14);
IkReal x2031=IKcos(j14);
IkReal x2032=(r11*sj15);
IkReal x2033=((1.0)*cj11);
IkReal x2034=(cj15*r10);
IkReal x2035=(cj15*r00);
IkReal x2036=(r21*sj15);
IkReal x2037=(r01*sj15);
IkReal x2038=(cj15*r20);
IkReal x2039=((1.0)*x2031);
IkReal x2040=((1.0)*x2030);
evalcond[0]=((((-1.0)*r22*x2039))+((x2030*x2036))+(((-1.0)*x2038*x2040)));
evalcond[1]=(((x2030*x2037))+(((-1.0)*r02*x2039))+(((-1.0)*x2035*x2040)));
evalcond[2]=(((x2031*x2034))+(((-1.0)*x2032*x2039))+(((-1.0)*r12*x2040)));
evalcond[3]=((1.0)+((x2030*x2032))+(((-1.0)*r12*x2039))+(((-1.0)*x2034*x2040)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x2036*x2039))+((x2031*x2038))+(((-1.0)*r22*x2040))+(((-1.0)*cj12*x2033)));
evalcond[5]=(((x2031*x2035))+(((-1.0)*r02*x2040))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x2033))+(((-1.0)*x2037*x2039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x2041 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj15*r00))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2041.valid){
continue;
}
CheckValue<IkReal> x2042=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x2042.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2041.value)+(((1.5707963267949)*(x2042.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2043=IKsin(j14);
IkReal x2044=IKcos(j14);
IkReal x2045=(r11*sj15);
IkReal x2046=((1.0)*cj11);
IkReal x2047=(cj15*r10);
IkReal x2048=(cj15*r00);
IkReal x2049=(r21*sj15);
IkReal x2050=(r01*sj15);
IkReal x2051=(cj15*r20);
IkReal x2052=((1.0)*x2044);
IkReal x2053=((1.0)*x2043);
evalcond[0]=(((x2043*x2049))+(((-1.0)*r22*x2052))+(((-1.0)*x2051*x2053)));
evalcond[1]=(((x2043*x2050))+(((-1.0)*r02*x2052))+(((-1.0)*x2048*x2053)));
evalcond[2]=((((-1.0)*x2045*x2052))+(((-1.0)*r12*x2053))+((x2044*x2047)));
evalcond[3]=((1.0)+((x2043*x2045))+(((-1.0)*r12*x2052))+(((-1.0)*x2047*x2053)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r22*x2053))+((x2044*x2051))+(((-1.0)*x2049*x2052))+(((-1.0)*cj12*x2046)));
evalcond[5]=((((-1.0)*sj12*x2046))+(((-1.0)*cj12*sj11))+(((-1.0)*r02*x2053))+(((-1.0)*x2050*x2052))+((x2044*x2048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x2054=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x2054;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x2054);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x2055=((1.0)*cj15);
IkReal x2056=((((-1.0)*r20*sj15))+(((-1.0)*r21*x2055)));
j14eval[0]=x2056;
j14eval[1]=IKsign(x2056);
j14eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2055))+((r01*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x2057=r11*r11;
IkReal x2058=cj15*cj15;
IkReal x2059=(cj15*r10);
IkReal x2060=(r11*sj15);
IkReal x2061=((((2.0)*x2059*x2060))+(((-1.0)*x2057))+(((-1.0)*(r12*r12)))+(((-1.0)*x2058*(r10*r10)))+((x2057*x2058)));
j14eval[0]=x2061;
j14eval[1]=((IKabs(r12))+(IKabs((x2059+(((-1.0)*x2060))))));
j14eval[2]=IKsign(x2061);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2062=r11*r11;
IkReal x2063=cj15*cj15;
IkReal x2064=(cj15*r10);
IkReal x2065=(r11*sj15);
CheckValue<IkReal> x2066 = IKatan2WithCheck(IkReal((x2064+(((-1.0)*x2065)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2066.valid){
continue;
}
CheckValue<IkReal> x2067=IKPowWithIntegerCheck(IKsign(((((2.0)*x2064*x2065))+(((-1.0)*x2062))+(((-1.0)*(r12*r12)))+((x2062*x2063))+(((-1.0)*x2063*(r10*r10))))),-1);
if(!x2067.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2066.value)+(((1.5707963267949)*(x2067.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2068=IKsin(j14);
IkReal x2069=IKcos(j14);
IkReal x2070=(r11*sj15);
IkReal x2071=(cj15*r10);
IkReal x2072=(cj15*r00);
IkReal x2073=(r21*sj15);
IkReal x2074=(r01*sj15);
IkReal x2075=(cj15*r20);
IkReal x2076=((1.0)*x2069);
IkReal x2077=((1.0)*x2068);
evalcond[0]=((((-1.0)*r22*x2076))+((x2068*x2073))+(((-1.0)*x2075*x2077)));
evalcond[1]=((((-1.0)*r02*x2076))+((x2068*x2074))+(((-1.0)*x2072*x2077)));
evalcond[2]=((((-1.0)*x2070*x2076))+(((-1.0)*r12*x2077))+((x2069*x2071)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2076))+(((-1.0)*x2071*x2077))+((x2068*x2070)));
evalcond[4]=((((-1.0)*r02*x2077))+((x2069*x2072))+(((-1.0)*x2074*x2076))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r22*x2077))+((x2069*x2075))+(((-1.0)*x2073*x2076))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2078=((1.0)*cj15);
CheckValue<IkReal> x2079 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj15))+(((-1.0)*r00*x2078)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2079.valid){
continue;
}
CheckValue<IkReal> x2080=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2078))+(((-1.0)*r20*sj15)))),-1);
if(!x2080.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2079.value)+(((1.5707963267949)*(x2080.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2081=IKsin(j14);
IkReal x2082=IKcos(j14);
IkReal x2083=(r11*sj15);
IkReal x2084=(cj15*r10);
IkReal x2085=(cj15*r00);
IkReal x2086=(r21*sj15);
IkReal x2087=(r01*sj15);
IkReal x2088=(cj15*r20);
IkReal x2089=((1.0)*x2082);
IkReal x2090=((1.0)*x2081);
evalcond[0]=((((-1.0)*r22*x2089))+((x2081*x2086))+(((-1.0)*x2088*x2090)));
evalcond[1]=((((-1.0)*r02*x2089))+((x2081*x2087))+(((-1.0)*x2085*x2090)));
evalcond[2]=((((-1.0)*x2083*x2089))+((x2082*x2084))+(((-1.0)*r12*x2090)));
evalcond[3]=((-1.0)+((x2081*x2083))+(((-1.0)*x2084*x2090))+(((-1.0)*r12*x2089)));
evalcond[4]=((((-1.0)*x2087*x2089))+((x2082*x2085))+((cj12*sj11))+(((-1.0)*r02*x2090))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x2086*x2089))+((x2082*x2088))+(((-1.0)*r22*x2090))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x2091 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2091.valid){
continue;
}
CheckValue<IkReal> x2092=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x2092.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2091.value)+(((1.5707963267949)*(x2092.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2093=IKsin(j14);
IkReal x2094=IKcos(j14);
IkReal x2095=(r11*sj15);
IkReal x2096=(cj15*r10);
IkReal x2097=(cj15*r00);
IkReal x2098=(r21*sj15);
IkReal x2099=(r01*sj15);
IkReal x2100=(cj15*r20);
IkReal x2101=((1.0)*x2094);
IkReal x2102=((1.0)*x2093);
evalcond[0]=((((-1.0)*r22*x2101))+(((-1.0)*x2100*x2102))+((x2093*x2098)));
evalcond[1]=((((-1.0)*r02*x2101))+(((-1.0)*x2097*x2102))+((x2093*x2099)));
evalcond[2]=((((-1.0)*r12*x2102))+((x2094*x2096))+(((-1.0)*x2095*x2101)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2101))+(((-1.0)*x2096*x2102))+((x2093*x2095)));
evalcond[4]=((((-1.0)*r02*x2102))+((x2094*x2097))+(((-1.0)*x2099*x2101))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r22*x2102))+(((-1.0)*x2098*x2101))+(((-1.0)*cj11*cj12))+((x2094*x2100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2103=((-1.0)*r00);
IkReal x2105 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2105)==0){
continue;
}
IkReal x2104=pow(x2105,-0.5);
CheckValue<IkReal> x2106 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2103),IKFAST_ATAN2_MAGTHRESH);
if(!x2106.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2106.value));
IkReal gconst91=(r01*x2104);
IkReal gconst92=(x2103*x2104);
CheckValue<IkReal> x2107 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2107.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x2107.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x2108=((-1.0)*r00);
IkReal x2109=x2104;
CheckValue<IkReal> x2111 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2108),IKFAST_ATAN2_MAGTHRESH);
if(!x2111.valid){
continue;
}
IkReal x2110=((-1.0)*(x2111.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst91;
cj15=gconst92;
j15=x2110;
IkReal gconst90=x2110;
IkReal gconst91=(r01*x2109);
IkReal gconst92=(x2108*x2109);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2112=((1.0)*gconst91);
CheckValue<IkReal> x2113 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((gconst92*r10*sj10))+((cj10*gconst92*r00))+(((-1.0)*r11*sj10*x2112))+(((-1.0)*cj10*r01*x2112)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2113.valid){
continue;
}
CheckValue<IkReal> x2114=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2112))+(((-1.0)*gconst92*r21)))),-1);
if(!x2114.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2113.value)+(((1.5707963267949)*(x2114.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2115=IKsin(j14);
IkReal x2116=IKcos(j14);
IkReal x2117=((1.0)*cj11);
IkReal x2118=(gconst91*r11);
IkReal x2119=((1.0)*sj10);
IkReal x2120=(gconst92*r10);
IkReal x2121=(gconst91*r01);
IkReal x2122=(cj12*sj11);
IkReal x2123=(gconst92*r00);
IkReal x2124=(gconst91*r21);
IkReal x2125=(gconst92*r20);
IkReal x2126=((1.0)*x2116);
IkReal x2127=((1.0)*x2115);
evalcond[0]=((((-1.0)*r22*x2126))+(((-1.0)*x2125*x2127))+((x2115*x2124)));
evalcond[1]=((((-1.0)*x2120*x2127))+cj10+(((-1.0)*r12*x2126))+((x2115*x2118)));
evalcond[2]=((((-1.0)*r02*x2126))+((x2115*x2121))+(((-1.0)*x2119))+(((-1.0)*x2123*x2127)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r22*x2127))+(((-1.0)*cj12*x2117))+(((-1.0)*x2124*x2126))+((x2116*x2125)));
evalcond[4]=((((-1.0)*r02*x2127))+(((-1.0)*x2121*x2126))+(((-1.0)*cj10*sj12*x2117))+(((-1.0)*cj10*x2122))+((x2116*x2123)));
evalcond[5]=((((-1.0)*sj10*sj12*x2117))+(((-1.0)*x2119*x2122))+(((-1.0)*x2118*x2126))+(((-1.0)*r12*x2127))+((x2116*x2120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2128=((1.0)*gconst92);
CheckValue<IkReal> x2129=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2128)))),-1);
if(!x2129.valid){
continue;
}
CheckValue<IkReal> x2130 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst91*r21*sj10))+(((-1.0)*r20*sj10*x2128)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2130.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2129.value)))+(x2130.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2131=IKsin(j14);
IkReal x2132=IKcos(j14);
IkReal x2133=((1.0)*cj11);
IkReal x2134=(gconst91*r11);
IkReal x2135=((1.0)*sj10);
IkReal x2136=(gconst92*r10);
IkReal x2137=(gconst91*r01);
IkReal x2138=(cj12*sj11);
IkReal x2139=(gconst92*r00);
IkReal x2140=(gconst91*r21);
IkReal x2141=(gconst92*r20);
IkReal x2142=((1.0)*x2132);
IkReal x2143=((1.0)*x2131);
evalcond[0]=(((x2131*x2140))+(((-1.0)*r22*x2142))+(((-1.0)*x2141*x2143)));
evalcond[1]=((((-1.0)*x2136*x2143))+((x2131*x2134))+cj10+(((-1.0)*r12*x2142)));
evalcond[2]=(((x2131*x2137))+(((-1.0)*x2135))+(((-1.0)*r02*x2142))+(((-1.0)*x2139*x2143)));
evalcond[3]=(((sj11*sj12))+((x2132*x2141))+(((-1.0)*x2140*x2142))+(((-1.0)*r22*x2143))+(((-1.0)*cj12*x2133)));
evalcond[4]=((((-1.0)*cj10*x2138))+(((-1.0)*cj10*sj12*x2133))+(((-1.0)*r02*x2143))+((x2132*x2139))+(((-1.0)*x2137*x2142)));
evalcond[5]=((((-1.0)*sj10*sj12*x2133))+(((-1.0)*x2135*x2138))+(((-1.0)*r12*x2143))+(((-1.0)*x2134*x2142))+((x2132*x2136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2144=((-1.0)*r01);
IkReal x2146 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2146)==0){
continue;
}
IkReal x2145=pow(x2146,-0.5);
CheckValue<IkReal> x2147 = IKatan2WithCheck(IkReal(x2144),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2147.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2147.value))));
IkReal gconst94=(x2144*x2145);
IkReal gconst95=((1.0)*r00*x2145);
CheckValue<IkReal> x2148 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2148.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x2148.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[5];
IkReal x2149=((-1.0)*r01);
CheckValue<IkReal> x2152 = IKatan2WithCheck(IkReal(x2149),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2152.valid){
continue;
}
IkReal x2150=((1.0)*(x2152.value));
IkReal x2151=x2145;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst94;
cj15=gconst95;
j15=((3.14159265)+(((-1.0)*x2150)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2150)));
IkReal gconst94=(x2149*x2151);
IkReal gconst95=((1.0)*r00*x2151);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=cj10;
j14eval[3]=r22;
j14eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  || IKabs(j14eval[4]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x2153=((-1.0)*r01);
CheckValue<IkReal> x2156 = IKatan2WithCheck(IkReal(x2153),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2156.valid){
continue;
}
IkReal x2154=((1.0)*(x2156.value));
IkReal x2155=x2145;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst94;
cj15=gconst95;
j15=((3.14159265)+(((-1.0)*x2154)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2154)));
IkReal gconst94=(x2153*x2155);
IkReal gconst95=((1.0)*r00*x2155);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x2157=((-1.0)*r01);
CheckValue<IkReal> x2160 = IKatan2WithCheck(IkReal(x2157),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2160.valid){
continue;
}
IkReal x2158=((1.0)*(x2160.value));
IkReal x2159=x2145;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst94;
cj15=gconst95;
j15=((3.14159265)+(((-1.0)*x2158)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2158)));
IkReal gconst94=(x2157*x2159);
IkReal gconst95=((1.0)*r00*x2159);
IkReal x2161=r02*r02;
IkReal x2162=(r12*sj10);
IkReal x2163=x2145;
IkReal x2164=(cj10*x2163);
j14eval[0]=((IKabs((((x2161*x2164))+((r02*x2162*x2163))+(((-1.0)*x2164)))))+(IKabs(((((-1.0)*x2162))+(((-1.0)*cj10*r02))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2165=((1.0)*cj10);
IkReal x2166=((1.0)*sj10);
CheckValue<IkReal> x2167=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2167.valid){
continue;
}
CheckValue<IkReal> x2168 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2166))+(((-1.0)*r02*x2165)))),IkReal(((((-1.0)*gconst94*r01*x2165))+((cj10*gconst95*r00))+(((-1.0)*gconst94*r11*x2166))+((gconst95*r10*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2168.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2167.value)))+(x2168.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2169=IKsin(j14);
IkReal x2170=IKcos(j14);
IkReal x2171=((1.0)*cj11);
IkReal x2172=((1.0)*sj10);
IkReal x2173=(gconst94*r11);
IkReal x2174=(cj12*sj11);
IkReal x2175=((1.0)*x2170);
IkReal x2176=((1.0)*x2169);
IkReal x2177=(gconst95*x2170);
IkReal x2178=(gconst94*x2169);
evalcond[0]=(((r21*x2178))+(((-1.0)*gconst95*r20*x2176))+(((-1.0)*r22*x2175)));
evalcond[1]=((((-1.0)*gconst95*r10*x2176))+cj10+((x2169*x2173))+(((-1.0)*r12*x2175)));
evalcond[2]=(((r01*x2178))+(((-1.0)*gconst95*r00*x2176))+(((-1.0)*r02*x2175))+(((-1.0)*x2172)));
evalcond[3]=(((sj11*sj12))+((r20*x2177))+(((-1.0)*cj12*x2171))+(((-1.0)*gconst94*r21*x2175))+(((-1.0)*r22*x2176)));
evalcond[4]=((((-1.0)*cj10*sj12*x2171))+((r00*x2177))+(((-1.0)*cj10*x2174))+(((-1.0)*r02*x2176))+(((-1.0)*gconst94*r01*x2175)));
evalcond[5]=((((-1.0)*sj10*sj12*x2171))+((r10*x2177))+(((-1.0)*x2172*x2174))+(((-1.0)*x2173*x2175))+(((-1.0)*r12*x2176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2179=((1.0)*gconst95);
CheckValue<IkReal> x2180 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x2179))+((gconst94*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2180.valid){
continue;
}
CheckValue<IkReal> x2181=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2179)))),-1);
if(!x2181.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2180.value)+(((1.5707963267949)*(x2181.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2182=IKsin(j14);
IkReal x2183=IKcos(j14);
IkReal x2184=((1.0)*cj11);
IkReal x2185=((1.0)*sj10);
IkReal x2186=(gconst94*r11);
IkReal x2187=(cj12*sj11);
IkReal x2188=((1.0)*x2183);
IkReal x2189=((1.0)*x2182);
IkReal x2190=(gconst95*x2183);
IkReal x2191=(gconst94*x2182);
evalcond[0]=((((-1.0)*gconst95*r20*x2189))+(((-1.0)*r22*x2188))+((r21*x2191)));
evalcond[1]=(((x2182*x2186))+cj10+(((-1.0)*gconst95*r10*x2189))+(((-1.0)*r12*x2188)));
evalcond[2]=((((-1.0)*r02*x2188))+(((-1.0)*x2185))+(((-1.0)*gconst95*r00*x2189))+((r01*x2191)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*gconst94*r21*x2188))+(((-1.0)*cj12*x2184))+((r20*x2190))+(((-1.0)*r22*x2189)));
evalcond[4]=((((-1.0)*gconst94*r01*x2188))+(((-1.0)*r02*x2189))+(((-1.0)*cj10*x2187))+((r00*x2190))+(((-1.0)*cj10*sj12*x2184)));
evalcond[5]=((((-1.0)*x2186*x2188))+(((-1.0)*x2185*x2187))+(((-1.0)*sj10*sj12*x2184))+(((-1.0)*r12*x2189))+((r10*x2190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2192=((1.0)*gconst95);
CheckValue<IkReal> x2193=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2192))+(((-1.0)*gconst94*r00)))),-1);
if(!x2193.valid){
continue;
}
CheckValue<IkReal> x2194 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst94*r21))+(((-1.0)*cj10*r20*x2192)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2194.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2193.value)))+(x2194.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2195=IKsin(j14);
IkReal x2196=IKcos(j14);
IkReal x2197=((1.0)*cj11);
IkReal x2198=((1.0)*sj10);
IkReal x2199=(gconst94*r11);
IkReal x2200=(cj12*sj11);
IkReal x2201=((1.0)*x2196);
IkReal x2202=((1.0)*x2195);
IkReal x2203=(gconst95*x2196);
IkReal x2204=(gconst94*x2195);
evalcond[0]=((((-1.0)*r22*x2201))+(((-1.0)*gconst95*r20*x2202))+((r21*x2204)));
evalcond[1]=((((-1.0)*r12*x2201))+cj10+(((-1.0)*gconst95*r10*x2202))+((x2195*x2199)));
evalcond[2]=((((-1.0)*gconst95*r00*x2202))+((r01*x2204))+(((-1.0)*x2198))+(((-1.0)*r02*x2201)));
evalcond[3]=(((sj11*sj12))+((r20*x2203))+(((-1.0)*cj12*x2197))+(((-1.0)*r22*x2202))+(((-1.0)*gconst94*r21*x2201)));
evalcond[4]=(((r00*x2203))+(((-1.0)*gconst94*r01*x2201))+(((-1.0)*cj10*x2200))+(((-1.0)*cj10*sj12*x2197))+(((-1.0)*r02*x2202)));
evalcond[5]=((((-1.0)*r12*x2202))+(((-1.0)*x2198*x2200))+(((-1.0)*x2199*x2201))+((r10*x2203))+(((-1.0)*sj10*sj12*x2197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x2205=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x2205;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x2205);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x2206=((1.0)*cj15);
IkReal x2207=((((-1.0)*r11*x2206))+(((-1.0)*r10*sj15)));
j14eval[0]=x2207;
j14eval[1]=IKsign(x2207);
j14eval[2]=((IKabs(((((-1.0)*r20*x2206))+((r21*sj15)))))+(IKabs(r22)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x2208=r01*r01;
IkReal x2209=cj15*cj15;
IkReal x2210=(r01*sj15);
IkReal x2211=(cj15*r00);
IkReal x2212=((((-1.0)*x2208))+(((-1.0)*(r02*r02)))+(((-1.0)*x2209*(r00*r00)))+((x2208*x2209))+(((2.0)*x2210*x2211)));
j14eval[0]=x2212;
j14eval[1]=((IKabs(((((-1.0)*x2210))+x2211)))+(IKabs(r02)));
j14eval[2]=IKsign(x2212);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2213=r01*r01;
IkReal x2214=cj15*cj15;
IkReal x2215=(r01*sj15);
IkReal x2216=(cj15*r00);
CheckValue<IkReal> x2217=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2213))+(((-1.0)*(r02*r02)))+(((-1.0)*x2214*(r00*r00)))+(((2.0)*x2215*x2216))+((x2213*x2214)))),-1);
if(!x2217.valid){
continue;
}
CheckValue<IkReal> x2218 = IKatan2WithCheck(IkReal(((((-1.0)*x2215))+x2216)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2218.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2217.value)))+(x2218.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2219=IKsin(j14);
IkReal x2220=IKcos(j14);
IkReal x2221=(r11*sj15);
IkReal x2222=((1.0)*cj11);
IkReal x2223=(cj15*r10);
IkReal x2224=(cj15*r00);
IkReal x2225=(r21*sj15);
IkReal x2226=(r01*sj15);
IkReal x2227=(cj15*r20);
IkReal x2228=((1.0)*x2220);
IkReal x2229=((1.0)*x2219);
evalcond[0]=((((-1.0)*x2227*x2229))+((x2219*x2225))+(((-1.0)*r22*x2228)));
evalcond[1]=((((-1.0)*x2223*x2229))+(((-1.0)*r12*x2228))+((x2219*x2221)));
evalcond[2]=((((-1.0)*x2226*x2228))+(((-1.0)*r02*x2229))+((x2220*x2224)));
evalcond[3]=((-1.0)+(((-1.0)*x2224*x2229))+(((-1.0)*r02*x2228))+((x2219*x2226)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x2225*x2228))+(((-1.0)*r22*x2229))+((x2220*x2227))+(((-1.0)*cj12*x2222)));
evalcond[5]=((((-1.0)*sj12*x2222))+(((-1.0)*x2221*x2228))+(((-1.0)*cj12*sj11))+(((-1.0)*r12*x2229))+((x2220*x2223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2230=((1.0)*cj15);
CheckValue<IkReal> x2231=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2230))+(((-1.0)*r10*sj15)))),-1);
if(!x2231.valid){
continue;
}
CheckValue<IkReal> x2232 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2230))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2232.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2231.value)))+(x2232.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2233=IKsin(j14);
IkReal x2234=IKcos(j14);
IkReal x2235=(r11*sj15);
IkReal x2236=((1.0)*cj11);
IkReal x2237=(cj15*r10);
IkReal x2238=(cj15*r00);
IkReal x2239=(r21*sj15);
IkReal x2240=(r01*sj15);
IkReal x2241=(cj15*r20);
IkReal x2242=((1.0)*x2234);
IkReal x2243=((1.0)*x2233);
evalcond[0]=((((-1.0)*r22*x2242))+(((-1.0)*x2241*x2243))+((x2233*x2239)));
evalcond[1]=((((-1.0)*x2237*x2243))+((x2233*x2235))+(((-1.0)*r12*x2242)));
evalcond[2]=((((-1.0)*r02*x2243))+(((-1.0)*x2240*x2242))+((x2234*x2238)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2242))+((x2233*x2240))+(((-1.0)*x2238*x2243)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r22*x2243))+((x2234*x2241))+(((-1.0)*x2239*x2242))+(((-1.0)*cj12*x2236)));
evalcond[5]=((((-1.0)*sj12*x2236))+(((-1.0)*cj12*sj11))+(((-1.0)*r12*x2243))+(((-1.0)*x2235*x2242))+((x2234*x2237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x2244=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x2244.valid){
continue;
}
CheckValue<IkReal> x2245 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2245.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2244.value)))+(x2245.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2246=IKsin(j14);
IkReal x2247=IKcos(j14);
IkReal x2248=(r11*sj15);
IkReal x2249=((1.0)*cj11);
IkReal x2250=(cj15*r10);
IkReal x2251=(cj15*r00);
IkReal x2252=(r21*sj15);
IkReal x2253=(r01*sj15);
IkReal x2254=(cj15*r20);
IkReal x2255=((1.0)*x2247);
IkReal x2256=((1.0)*x2246);
evalcond[0]=(((x2246*x2252))+(((-1.0)*r22*x2255))+(((-1.0)*x2254*x2256)));
evalcond[1]=(((x2246*x2248))+(((-1.0)*r12*x2255))+(((-1.0)*x2250*x2256)));
evalcond[2]=((((-1.0)*r02*x2256))+(((-1.0)*x2253*x2255))+((x2247*x2251)));
evalcond[3]=((-1.0)+((x2246*x2253))+(((-1.0)*r02*x2255))+(((-1.0)*x2251*x2256)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x2249))+(((-1.0)*r22*x2256))+(((-1.0)*x2252*x2255))+((x2247*x2254)));
evalcond[5]=((((-1.0)*sj12*x2249))+(((-1.0)*r12*x2256))+(((-1.0)*cj12*sj11))+((x2247*x2250))+(((-1.0)*x2248*x2255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x2257=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x2257;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x2257);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x2258=((1.0)*cj15);
IkReal x2259=((((-1.0)*r21*x2258))+(((-1.0)*r20*sj15)));
j14eval[0]=x2259;
j14eval[1]=IKsign(x2259);
j14eval[2]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*r10*x2258))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x2260=cj15*cj15;
IkReal x2261=r01*r01;
IkReal x2262=(cj15*r00);
IkReal x2263=(r01*sj15);
IkReal x2264=((((-2.0)*x2262*x2263))+x2261+((x2260*(r00*r00)))+(((-1.0)*x2260*x2261))+(r02*r02));
j14eval[0]=x2264;
j14eval[1]=((IKabs(r02))+(IKabs((x2262+(((-1.0)*x2263))))));
j14eval[2]=IKsign(x2264);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2265=cj15*cj15;
IkReal x2266=r01*r01;
IkReal x2267=(r01*sj15);
IkReal x2268=(cj15*r00);
CheckValue<IkReal> x2269=IKPowWithIntegerCheck(IKsign((x2266+((x2265*(r00*r00)))+(((-1.0)*x2265*x2266))+(((-2.0)*x2267*x2268))+(r02*r02))),-1);
if(!x2269.valid){
continue;
}
CheckValue<IkReal> x2270 = IKatan2WithCheck(IkReal((x2268+(((-1.0)*x2267)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2270.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2269.value)))+(x2270.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2271=IKsin(j14);
IkReal x2272=IKcos(j14);
IkReal x2273=(r11*sj15);
IkReal x2274=(cj15*r10);
IkReal x2275=(cj15*r00);
IkReal x2276=(r21*sj15);
IkReal x2277=(r01*sj15);
IkReal x2278=(cj15*r20);
IkReal x2279=((1.0)*x2272);
IkReal x2280=((1.0)*x2271);
evalcond[0]=((((-1.0)*x2278*x2280))+(((-1.0)*r22*x2279))+((x2271*x2276)));
evalcond[1]=((((-1.0)*x2274*x2280))+(((-1.0)*r12*x2279))+((x2271*x2273)));
evalcond[2]=((((-1.0)*r02*x2280))+((x2272*x2275))+(((-1.0)*x2277*x2279)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2279))+(((-1.0)*x2275*x2280))+((x2271*x2277)));
evalcond[4]=((((-1.0)*r12*x2280))+(((-1.0)*x2273*x2279))+((x2272*x2274))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x2272*x2278))+(((-1.0)*x2276*x2279))+(((-1.0)*r22*x2280))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2281=((1.0)*cj15);
CheckValue<IkReal> x2282=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15))+(((-1.0)*r21*x2281)))),-1);
if(!x2282.valid){
continue;
}
CheckValue<IkReal> x2283 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*r10*x2281)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2283.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2282.value)))+(x2283.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2284=IKsin(j14);
IkReal x2285=IKcos(j14);
IkReal x2286=(r11*sj15);
IkReal x2287=(cj15*r10);
IkReal x2288=(cj15*r00);
IkReal x2289=(r21*sj15);
IkReal x2290=(r01*sj15);
IkReal x2291=(cj15*r20);
IkReal x2292=((1.0)*x2285);
IkReal x2293=((1.0)*x2284);
evalcond[0]=((((-1.0)*x2291*x2293))+(((-1.0)*r22*x2292))+((x2284*x2289)));
evalcond[1]=((((-1.0)*x2287*x2293))+(((-1.0)*r12*x2292))+((x2284*x2286)));
evalcond[2]=((((-1.0)*r02*x2293))+(((-1.0)*x2290*x2292))+((x2285*x2288)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2292))+(((-1.0)*x2288*x2293))+((x2284*x2290)));
evalcond[4]=((((-1.0)*x2286*x2292))+(((-1.0)*r12*x2293))+((cj12*sj11))+((cj11*sj12))+((x2285*x2287)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x2289*x2292))+((x2285*x2291))+(((-1.0)*r22*x2293))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x2294=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x2294.valid){
continue;
}
CheckValue<IkReal> x2295 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2295.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2294.value)))+(x2295.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2296=IKsin(j14);
IkReal x2297=IKcos(j14);
IkReal x2298=(r11*sj15);
IkReal x2299=(cj15*r10);
IkReal x2300=(cj15*r00);
IkReal x2301=(r21*sj15);
IkReal x2302=(r01*sj15);
IkReal x2303=(cj15*r20);
IkReal x2304=((1.0)*x2297);
IkReal x2305=((1.0)*x2296);
evalcond[0]=((((-1.0)*r22*x2304))+(((-1.0)*x2303*x2305))+((x2296*x2301)));
evalcond[1]=(((x2296*x2298))+(((-1.0)*x2299*x2305))+(((-1.0)*r12*x2304)));
evalcond[2]=(((x2297*x2300))+(((-1.0)*x2302*x2304))+(((-1.0)*r02*x2305)));
evalcond[3]=((1.0)+(((-1.0)*x2300*x2305))+((x2296*x2302))+(((-1.0)*r02*x2304)));
evalcond[4]=(((cj12*sj11))+(((-1.0)*x2298*x2304))+((cj11*sj12))+((x2297*x2299))+(((-1.0)*r12*x2305)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x2301*x2304))+(((-1.0)*r22*x2305))+((x2297*x2303))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x2306=((-1.0)*px);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2306);
rxp1_1=(px*r21);
rxp1_2=(r11*x2306);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x2307=((-1.0)*px);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2307);
rxp1_1=(px*r21);
rxp1_2=(r11*x2307);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=((((-1.0)*r21*sj15))+((cj15*r20)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x2308=((-1.0)*px);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2308);
rxp1_1=(px*r21);
rxp1_2=(r11*x2308);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=(((cj15*r10))+(((-1.0)*r11*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x2311=IKPowWithIntegerCheck((((cj15*r10))+(((-1.0)*r11*sj15))),-1);
if(!x2311.valid){
continue;
}
IkReal x2309=x2311.value;
IkReal x2310=(sj10*x2309);
cj14array[0]=(((cj11*sj12*x2310))+((cj12*sj11*x2310)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x2312=IKsin(j14);
IkReal x2313=IKcos(j14);
IkReal x2314=(sj15*x2312);
IkReal x2315=((1.0)*x2313);
IkReal x2316=((1.0)*cj15*x2312);
evalcond[0]=((-1.0)*r02*x2312);
evalcond[1]=((((-1.0)*sj10))+(((-1.0)*r02*x2315)));
evalcond[2]=((((-1.0)*r20*x2316))+((r21*x2314)));
evalcond[3]=(((r11*x2314))+(((-1.0)*r10*x2316)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r21*sj15*x2315))+((cj15*r20*x2313))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x2318=IKPowWithIntegerCheck(((((-1.0)*r21*sj15))+((cj15*r20))),-1);
if(!x2318.valid){
continue;
}
IkReal x2317=x2318.value;
cj14array[0]=((((-1.0)*sj11*sj12*x2317))+((cj11*cj12*x2317)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x2319=IKsin(j14);
IkReal x2320=IKcos(j14);
IkReal x2321=(cj15*r10);
IkReal x2322=((1.0)*sj10);
IkReal x2323=(sj15*x2319);
IkReal x2324=((1.0)*x2320);
IkReal x2325=((1.0)*x2319);
evalcond[0]=((-1.0)*r02*x2319);
evalcond[1]=((((-1.0)*r02*x2324))+(((-1.0)*x2322)));
evalcond[2]=((((-1.0)*cj15*r20*x2325))+((r21*x2323)));
evalcond[3]=((((-1.0)*x2321*x2325))+((r11*x2323)));
evalcond[4]=((((-1.0)*cj12*sj11*x2322))+((x2320*x2321))+(((-1.0)*r11*sj15*x2324))+(((-1.0)*cj11*sj12*x2322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x2326=IKPowWithIntegerCheck(r02,-1);
if(!x2326.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x2326.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x2327=IKsin(j14);
IkReal x2328=IKcos(j14);
IkReal x2329=(cj15*r10);
IkReal x2330=((1.0)*cj12);
IkReal x2331=(cj15*r20);
IkReal x2332=(sj15*x2327);
IkReal x2333=((1.0)*x2327);
IkReal x2334=((1.0)*sj15*x2328);
evalcond[0]=((-1.0)*r02*x2327);
evalcond[1]=(((r21*x2332))+(((-1.0)*x2331*x2333)));
evalcond[2]=(((r11*x2332))+(((-1.0)*x2329*x2333)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r21*x2334))+(((-1.0)*cj11*x2330))+((x2328*x2331)));
evalcond[4]=((((-1.0)*cj11*sj10*sj12))+(((-1.0)*sj10*sj11*x2330))+(((-1.0)*r11*x2334))+((x2328*x2329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2335=((1.0)*sj15);
CheckValue<IkReal> x2336 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x2335))+(((-1.0)*cj10*r01*x2335))+((cj15*r10*sj10))+((cj10*cj15*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2336.valid){
continue;
}
CheckValue<IkReal> x2337=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj15*r21))+(((-1.0)*r20*x2335)))),-1);
if(!x2337.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2336.value)+(((1.5707963267949)*(x2337.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2338=IKsin(j14);
IkReal x2339=IKcos(j14);
IkReal x2340=(r11*sj15);
IkReal x2341=((1.0)*cj11);
IkReal x2342=((1.0)*sj10);
IkReal x2343=(cj12*sj11);
IkReal x2344=(r21*sj15);
IkReal x2345=(r01*sj15);
IkReal x2346=((1.0)*x2339);
IkReal x2347=((1.0)*x2338);
IkReal x2348=(cj15*x2339);
evalcond[0]=(((x2338*x2344))+(((-1.0)*r22*x2346))+(((-1.0)*cj15*r20*x2347)));
evalcond[1]=(cj10+((x2338*x2340))+(((-1.0)*r12*x2346))+(((-1.0)*cj15*r10*x2347)));
evalcond[2]=(((x2338*x2345))+(((-1.0)*r02*x2346))+(((-1.0)*cj15*r00*x2347))+(((-1.0)*x2342)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x2344*x2346))+(((-1.0)*cj12*x2341))+(((-1.0)*r22*x2347))+((r20*x2348)));
evalcond[4]=((((-1.0)*x2345*x2346))+((r00*x2348))+(((-1.0)*cj10*sj12*x2341))+(((-1.0)*r02*x2347))+(((-1.0)*cj10*x2343)));
evalcond[5]=(((r10*x2348))+(((-1.0)*x2340*x2346))+(((-1.0)*r12*x2347))+(((-1.0)*x2342*x2343))+(((-1.0)*sj10*sj12*x2341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2349=((1.0)*cj15);
CheckValue<IkReal> x2350=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2349))+(((-1.0)*r10*sj15)))),-1);
if(!x2350.valid){
continue;
}
CheckValue<IkReal> x2351 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x2349))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2351.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2350.value)))+(x2351.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2352=IKsin(j14);
IkReal x2353=IKcos(j14);
IkReal x2354=(r11*sj15);
IkReal x2355=((1.0)*cj11);
IkReal x2356=((1.0)*sj10);
IkReal x2357=(cj12*sj11);
IkReal x2358=(r21*sj15);
IkReal x2359=(r01*sj15);
IkReal x2360=((1.0)*x2353);
IkReal x2361=((1.0)*x2352);
IkReal x2362=(cj15*x2353);
evalcond[0]=(((x2352*x2358))+(((-1.0)*cj15*r20*x2361))+(((-1.0)*r22*x2360)));
evalcond[1]=((((-1.0)*cj15*r10*x2361))+((x2352*x2354))+cj10+(((-1.0)*r12*x2360)));
evalcond[2]=(((x2352*x2359))+(((-1.0)*cj15*r00*x2361))+(((-1.0)*x2356))+(((-1.0)*r02*x2360)));
evalcond[3]=(((sj11*sj12))+((r20*x2362))+(((-1.0)*cj12*x2355))+(((-1.0)*x2358*x2360))+(((-1.0)*r22*x2361)));
evalcond[4]=((((-1.0)*cj10*sj12*x2355))+(((-1.0)*x2359*x2360))+(((-1.0)*cj10*x2357))+((r00*x2362))+(((-1.0)*r02*x2361)));
evalcond[5]=((((-1.0)*x2356*x2357))+(((-1.0)*x2354*x2360))+((r10*x2362))+(((-1.0)*r12*x2361))+(((-1.0)*sj10*sj12*x2355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2363=((1.0)*cj15);
CheckValue<IkReal> x2364 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x2363))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2364.valid){
continue;
}
CheckValue<IkReal> x2365=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2363))+(((-1.0)*r00*sj15)))),-1);
if(!x2365.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2364.value)+(((1.5707963267949)*(x2365.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2366=IKsin(j14);
IkReal x2367=IKcos(j14);
IkReal x2368=(r11*sj15);
IkReal x2369=((1.0)*cj11);
IkReal x2370=((1.0)*sj10);
IkReal x2371=(cj12*sj11);
IkReal x2372=(r21*sj15);
IkReal x2373=(r01*sj15);
IkReal x2374=((1.0)*x2367);
IkReal x2375=((1.0)*x2366);
IkReal x2376=(cj15*x2367);
evalcond[0]=((((-1.0)*cj15*r20*x2375))+((x2366*x2372))+(((-1.0)*r22*x2374)));
evalcond[1]=((((-1.0)*cj15*r10*x2375))+((x2366*x2368))+cj10+(((-1.0)*r12*x2374)));
evalcond[2]=((((-1.0)*r02*x2374))+(((-1.0)*x2370))+((x2366*x2373))+(((-1.0)*cj15*r00*x2375)));
evalcond[3]=(((sj11*sj12))+((r20*x2376))+(((-1.0)*x2372*x2374))+(((-1.0)*r22*x2375))+(((-1.0)*cj12*x2369)));
evalcond[4]=((((-1.0)*cj10*x2371))+(((-1.0)*r02*x2375))+(((-1.0)*cj10*sj12*x2369))+(((-1.0)*x2373*x2374))+((r00*x2376)));
evalcond[5]=((((-1.0)*x2368*x2374))+((r10*x2376))+(((-1.0)*sj10*sj12*x2369))+(((-1.0)*x2370*x2371))+(((-1.0)*r12*x2375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2377=cj15*cj15;
IkReal x2378=r21*r21;
IkReal x2379=(r21*sj15);
IkReal x2380=(sj11*sj12);
IkReal x2381=(cj15*r20);
IkReal x2382=((1.0)*cj11*cj12);
CheckValue<IkReal> x2383=IKPowWithIntegerCheck(IKsign(((r22*r22)+x2378+(((-1.0)*x2377*x2378))+(((-2.0)*x2379*x2381))+((x2377*(r20*r20))))),-1);
if(!x2383.valid){
continue;
}
CheckValue<IkReal> x2384 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2382))+((r22*x2380)))),IkReal((((cj11*cj12*x2381))+(((-1.0)*x2380*x2381))+(((-1.0)*x2379*x2382))+((x2379*x2380)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2384.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2383.value)))+(x2384.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
IkReal x2385=IKsin(j14);
IkReal x2386=IKcos(j14);
IkReal x2387=(r21*sj15);
IkReal x2388=((1.0)*r22);
IkReal x2389=(cj15*r20);
evalcond[0]=(((x2385*x2387))+(((-1.0)*x2386*x2388))+(((-1.0)*x2385*x2389)));
evalcond[1]=(((sj11*sj12))+(((-1.0)*x2386*x2387))+(((-1.0)*cj11*cj12))+(((-1.0)*x2385*x2388))+((x2386*x2389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2390=(cj15*sj14);
IkReal x2391=(sj14*sj15);
if( IKabs((((r01*x2391))+(((-1.0)*r00*x2390))+(((-1.0)*cj14*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj14*r12))+((r10*x2390))+(((-1.0)*r11*x2391)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2391))+(((-1.0)*r00*x2390))+(((-1.0)*cj14*r02))))+IKsqr((((cj14*r12))+((r10*x2390))+(((-1.0)*r11*x2391))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r01*x2391))+(((-1.0)*r00*x2390))+(((-1.0)*cj14*r02))), (((cj14*r12))+((r10*x2390))+(((-1.0)*r11*x2391))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x2392=IKcos(j10);
IkReal x2393=IKsin(j10);
IkReal x2394=(sj11*sj12);
IkReal x2395=((1.0)*cj14);
IkReal x2396=(cj15*r00);
IkReal x2397=(sj14*sj15);
IkReal x2398=(cj11*cj12);
IkReal x2399=((1.0)*sj14);
IkReal x2400=(cj15*r10);
IkReal x2401=(r10*sj15);
IkReal x2402=((1.0)*sj12);
IkReal x2403=(cj12*sj11);
IkReal x2404=(r00*sj15);
IkReal x2405=(cj15*r11);
IkReal x2406=(cj15*r01);
IkReal x2407=(cj11*x2393);
IkReal x2408=((0.21325)*x2392);
IkReal x2409=((1.0)*x2392);
IkReal x2410=(cj11*x2392);
IkReal x2411=((1.0)*x2393);
evalcond[0]=((((-1.0)*x2399*x2400))+x2392+((r11*x2397))+(((-1.0)*r12*x2395)));
evalcond[1]=((((-1.0)*x2396*x2399))+(((-1.0)*r02*x2395))+((r01*x2397))+(((-1.0)*x2411)));
evalcond[2]=(((x2392*x2394))+x2406+x2404+(((-1.0)*x2398*x2409)));
evalcond[3]=(x2405+x2401+((x2393*x2394))+(((-1.0)*x2398*x2411)));
evalcond[4]=((((-1.0)*x2402*x2410))+(((-1.0)*r02*x2399))+(((-1.0)*x2403*x2409))+(((-1.0)*r01*sj15*x2395))+((cj14*x2396)));
evalcond[5]=((((-1.0)*r11*sj15*x2395))+(((-1.0)*x2402*x2407))+(((-1.0)*x2403*x2411))+((cj14*x2400))+(((-1.0)*r12*x2399)));
evalcond[6]=((((-1.0)*x2394*x2408))+((x2398*x2408))+(((-1.0)*px))+(((-0.08535)*x2406))+(((-0.08535)*x2404))+(((-0.11235)*x2393))+(((0.24365)*x2410)));
evalcond[7]=((((-0.21325)*x2393*x2394))+(((0.24365)*x2407))+(((-1.0)*py))+(((-0.08535)*x2401))+(((-0.08535)*x2405))+(((0.11235)*x2392))+(((0.21325)*x2393*x2398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2412=((1.0)*cj15);
IkReal x2413=((1.0)*sj15);
CheckValue<IkReal> x2414=IKPowWithIntegerCheck(IKsign((((sj11*sj12))+(((-1.0)*cj11*cj12)))),-1);
if(!x2414.valid){
continue;
}
CheckValue<IkReal> x2415 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2412))+(((-1.0)*r10*x2413)))),IkReal(((((-1.0)*r00*x2413))+(((-1.0)*r01*x2412)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2415.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2414.value)))+(x2415.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x2416=IKcos(j10);
IkReal x2417=IKsin(j10);
IkReal x2418=(sj11*sj12);
IkReal x2419=(cj11*cj12);
IkReal x2420=(r10*sj15);
IkReal x2421=(r00*sj15);
IkReal x2422=((0.08535)*cj15);
IkReal x2423=(cj11*x2417);
IkReal x2424=((0.21325)*x2416);
evalcond[0]=(((cj15*r01))+x2421+(((-1.0)*x2416*x2419))+((x2416*x2418)));
evalcond[1]=(x2420+((cj15*r11))+((x2417*x2418))+(((-1.0)*x2417*x2419)));
evalcond[2]=((((-1.0)*r01*x2422))+(((-1.0)*px))+(((0.24365)*cj11*x2416))+(((-0.11235)*x2417))+(((-1.0)*x2418*x2424))+((x2419*x2424))+(((-0.08535)*x2421)));
evalcond[3]=((((0.24365)*x2423))+(((0.21325)*x2417*x2419))+(((-1.0)*r11*x2422))+(((0.11235)*x2416))+(((-1.0)*py))+(((-0.21325)*x2417*x2418))+(((-0.08535)*x2420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x2425=((1.0)*cj15);
IkReal x2426=((((-1.0)*r01*x2425))+(((-1.0)*r00*sj15)));
j14eval[0]=x2426;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x2425))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x2426);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x2427=((1.0)*cj15);
IkReal x2428=((((-1.0)*r11*x2427))+(((-1.0)*r10*sj15)));
j14eval[0]=x2428;
j14eval[1]=((IKabs((((r21*sj10*sj15))+(((-1.0)*r20*sj10*x2427)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x2428);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x2429=((1.0)*sj15);
IkReal x2430=((((-1.0)*cj15*r21))+(((-1.0)*r20*x2429)));
j14eval[0]=x2430;
j14eval[1]=((IKabs(((((-1.0)*r11*sj10*x2429))+((cj15*r10*sj10))+(((-1.0)*cj10*r01*x2429))+((cj10*cj15*r00)))))+(IKabs(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02))))));
j14eval[2]=IKsign(x2430);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2431=((-1.0)*r20);
IkReal x2433 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2433)==0){
continue;
}
IkReal x2432=pow(x2433,-0.5);
CheckValue<IkReal> x2434 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2431),IKFAST_ATAN2_MAGTHRESH);
if(!x2434.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2434.value));
IkReal gconst79=(r21*x2432);
IkReal gconst80=(x2431*x2432);
CheckValue<IkReal> x2435 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2435.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x2435.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x2436=((-1.0)*r20);
IkReal x2437=x2432;
CheckValue<IkReal> x2439 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2436),IKFAST_ATAN2_MAGTHRESH);
if(!x2439.valid){
continue;
}
IkReal x2438=((-1.0)*(x2439.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst79;
cj15=gconst80;
j15=x2438;
IkReal gconst78=x2438;
IkReal gconst79=(r21*x2437);
IkReal gconst80=(x2436*x2437);
j14eval[0]=cj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x2440=((-1.0)*r20);
IkReal x2441=x2432;
CheckValue<IkReal> x2443 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2440),IKFAST_ATAN2_MAGTHRESH);
if(!x2443.valid){
continue;
}
IkReal x2442=((-1.0)*(x2443.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst79;
cj15=gconst80;
j15=x2442;
IkReal gconst78=x2442;
IkReal gconst79=(r21*x2441);
IkReal gconst80=(x2440*x2441);
j14eval[0]=sj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x2444=((-1.0)*r20);
IkReal x2445=x2432;
CheckValue<IkReal> x2447 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2444),IKFAST_ATAN2_MAGTHRESH);
if(!x2447.valid){
continue;
}
IkReal x2446=((-1.0)*(x2447.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst79;
cj15=gconst80;
j15=x2446;
IkReal gconst78=x2446;
IkReal gconst79=(r21*x2445);
IkReal gconst80=(x2444*x2445);
IkReal x2448=r22*r22;
CheckValue<IkReal> x2451=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2448))),-1);
if(!x2451.valid){
continue;
}
IkReal x2449=x2451.value;
IkReal x2450=(x2448+((x2449*(r20*r20*r20*r20)))+((x2449*(r21*r21*r21*r21)))+(((2.0)*x2449*(r20*r20)*(r21*r21))));
j14eval[0]=x2450;
j14eval[1]=IKsign(x2450);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2452=(sj11*sj12);
IkReal x2453=(gconst79*r21);
IkReal x2454=(cj11*cj12);
IkReal x2455=(gconst80*r20);
CheckValue<IkReal> x2456=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2455*x2455)+(x2453*x2453)+(((-2.0)*x2453*x2455)))),-1);
if(!x2456.valid){
continue;
}
CheckValue<IkReal> x2457 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2454))+((r22*x2452)))),IkReal(((((-1.0)*x2452*x2455))+(((-1.0)*x2453*x2454))+((x2452*x2453))+((x2454*x2455)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2457.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2456.value)))+(x2457.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2458=IKsin(j14);
IkReal x2459=IKcos(j14);
IkReal x2460=(gconst80*r10);
IkReal x2461=(gconst79*r11);
IkReal x2462=((1.0)*cj11);
IkReal x2463=((1.0)*sj10);
IkReal x2464=(gconst79*r01);
IkReal x2465=(gconst80*r00);
IkReal x2466=(cj12*sj11);
IkReal x2467=(gconst79*r21);
IkReal x2468=(gconst80*r20);
IkReal x2469=((1.0)*x2459);
IkReal x2470=((1.0)*x2458);
evalcond[0]=(((x2458*x2467))+(((-1.0)*r22*x2469))+(((-1.0)*x2468*x2470)));
evalcond[1]=((((-1.0)*x2460*x2470))+((x2458*x2461))+(((-1.0)*r12*x2469))+cj10);
evalcond[2]=(((x2458*x2464))+(((-1.0)*x2463))+(((-1.0)*r02*x2469))+(((-1.0)*x2465*x2470)));
evalcond[3]=(((sj11*sj12))+((x2459*x2468))+(((-1.0)*cj12*x2462))+(((-1.0)*x2467*x2469))+(((-1.0)*r22*x2470)));
evalcond[4]=((((-1.0)*x2464*x2469))+((x2459*x2465))+(((-1.0)*r02*x2470))+(((-1.0)*cj10*x2466))+(((-1.0)*cj10*sj12*x2462)));
evalcond[5]=((((-1.0)*sj10*sj12*x2462))+((x2459*x2460))+(((-1.0)*r12*x2470))+(((-1.0)*x2463*x2466))+(((-1.0)*x2461*x2469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2471=((1.0)*gconst80);
CheckValue<IkReal> x2472=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2471))+(((-1.0)*gconst79*r10)))),-1);
if(!x2472.valid){
continue;
}
CheckValue<IkReal> x2473 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst79*r21*sj10))+(((-1.0)*r20*sj10*x2471)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2473.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2472.value)))+(x2473.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2474=IKsin(j14);
IkReal x2475=IKcos(j14);
IkReal x2476=(gconst80*r10);
IkReal x2477=(gconst79*r11);
IkReal x2478=((1.0)*cj11);
IkReal x2479=((1.0)*sj10);
IkReal x2480=(gconst79*r01);
IkReal x2481=(gconst80*r00);
IkReal x2482=(cj12*sj11);
IkReal x2483=(gconst79*r21);
IkReal x2484=(gconst80*r20);
IkReal x2485=((1.0)*x2475);
IkReal x2486=((1.0)*x2474);
evalcond[0]=((((-1.0)*r22*x2485))+((x2474*x2483))+(((-1.0)*x2484*x2486)));
evalcond[1]=((((-1.0)*x2476*x2486))+cj10+(((-1.0)*r12*x2485))+((x2474*x2477)));
evalcond[2]=(((x2474*x2480))+(((-1.0)*x2479))+(((-1.0)*r02*x2485))+(((-1.0)*x2481*x2486)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r22*x2486))+((x2475*x2484))+(((-1.0)*cj12*x2478))+(((-1.0)*x2483*x2485)));
evalcond[4]=((((-1.0)*r02*x2486))+((x2475*x2481))+(((-1.0)*cj10*x2482))+(((-1.0)*x2480*x2485))+(((-1.0)*cj10*sj12*x2478)));
evalcond[5]=((((-1.0)*sj10*sj12*x2478))+(((-1.0)*x2477*x2485))+(((-1.0)*r12*x2486))+(((-1.0)*x2479*x2482))+((x2475*x2476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2487=((1.0)*gconst80);
CheckValue<IkReal> x2488 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x2487))+((cj10*gconst79*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2488.valid){
continue;
}
CheckValue<IkReal> x2489=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2487))+(((-1.0)*gconst79*r00)))),-1);
if(!x2489.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2488.value)+(((1.5707963267949)*(x2489.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2490=IKsin(j14);
IkReal x2491=IKcos(j14);
IkReal x2492=(gconst80*r10);
IkReal x2493=(gconst79*r11);
IkReal x2494=((1.0)*cj11);
IkReal x2495=((1.0)*sj10);
IkReal x2496=(gconst79*r01);
IkReal x2497=(gconst80*r00);
IkReal x2498=(cj12*sj11);
IkReal x2499=(gconst79*r21);
IkReal x2500=(gconst80*r20);
IkReal x2501=((1.0)*x2491);
IkReal x2502=((1.0)*x2490);
evalcond[0]=(((x2490*x2499))+(((-1.0)*r22*x2501))+(((-1.0)*x2500*x2502)));
evalcond[1]=((((-1.0)*r12*x2501))+((x2490*x2493))+(((-1.0)*x2492*x2502))+cj10);
evalcond[2]=((((-1.0)*r02*x2501))+((x2490*x2496))+(((-1.0)*x2495))+(((-1.0)*x2497*x2502)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x2494))+(((-1.0)*r22*x2502))+(((-1.0)*x2499*x2501))+((x2491*x2500)));
evalcond[4]=((((-1.0)*r02*x2502))+(((-1.0)*x2496*x2501))+(((-1.0)*cj10*sj12*x2494))+(((-1.0)*cj10*x2498))+((x2491*x2497)));
evalcond[5]=((((-1.0)*x2495*x2498))+(((-1.0)*r12*x2502))+(((-1.0)*x2493*x2501))+(((-1.0)*sj10*sj12*x2494))+((x2491*x2492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2503=((-1.0)*r21);
IkReal x2505 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2505)==0){
continue;
}
IkReal x2504=pow(x2505,-0.5);
CheckValue<IkReal> x2506 = IKatan2WithCheck(IkReal(x2503),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2506.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2506.value))));
IkReal gconst82=(x2503*x2504);
IkReal gconst83=((1.0)*r20*x2504);
CheckValue<IkReal> x2507 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2507.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x2507.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x2508=((-1.0)*r21);
CheckValue<IkReal> x2511 = IKatan2WithCheck(IkReal(x2508),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2511.valid){
continue;
}
IkReal x2509=((1.0)*(x2511.value));
IkReal x2510=x2504;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst82;
cj15=gconst83;
j15=((3.14159265)+(((-1.0)*x2509)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2509)));
IkReal gconst82=(x2508*x2510);
IkReal gconst83=((1.0)*r20*x2510);
IkReal x2512=r22*r22;
IkReal x2513=((1.0)*x2512);
CheckValue<IkReal> x2517=IKPowWithIntegerCheck(((-1.0)+x2512),-1);
if(!x2517.valid){
continue;
}
IkReal x2514=x2517.value;
if((((1.0)+(((-1.0)*x2513)))) < -0.00001)
continue;
IkReal x2515=IKsqrt(((1.0)+(((-1.0)*x2513))));
IkReal x2516=(cj10*x2514*x2515);
j14eval[0]=((IKabs((x2516+(((-1.0)*x2513*x2516)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x2518=((-1.0)*r21);
CheckValue<IkReal> x2521 = IKatan2WithCheck(IkReal(x2518),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2521.valid){
continue;
}
IkReal x2519=((1.0)*(x2521.value));
IkReal x2520=x2504;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst82;
cj15=gconst83;
j15=((3.14159265)+(((-1.0)*x2519)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2519)));
IkReal gconst82=(x2518*x2520);
IkReal gconst83=((1.0)*r20*x2520);
IkReal x2522=r22*r22;
IkReal x2523=((1.0)*x2522);
CheckValue<IkReal> x2527=IKPowWithIntegerCheck(((-1.0)+x2522),-1);
if(!x2527.valid){
continue;
}
IkReal x2524=x2527.value;
if((((1.0)+(((-1.0)*x2523)))) < -0.00001)
continue;
IkReal x2525=IKsqrt(((1.0)+(((-1.0)*x2523))));
IkReal x2526=(sj10*x2524*x2525);
j14eval[0]=((IKabs((x2526+(((-1.0)*x2523*x2526)))))+(IKabs((r22*sj10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x2528=((-1.0)*r21);
CheckValue<IkReal> x2531 = IKatan2WithCheck(IkReal(x2528),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2531.valid){
continue;
}
IkReal x2529=((1.0)*(x2531.value));
IkReal x2530=x2504;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst82;
cj15=gconst83;
j15=((3.14159265)+(((-1.0)*x2529)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2529)));
IkReal gconst82=(x2528*x2530);
IkReal gconst83=((1.0)*r20*x2530);
IkReal x2532=r22*r22;
IkReal x2533=(cj10*r02);
IkReal x2534=(r12*sj10);
CheckValue<IkReal> x2538=IKPowWithIntegerCheck(((-1.0)+x2532),-1);
if(!x2538.valid){
continue;
}
IkReal x2535=x2538.value;
if((((1.0)+(((-1.0)*x2532)))) < -0.00001)
continue;
IkReal x2536=IKsqrt(((1.0)+(((-1.0)*x2532))));
IkReal x2537=(r22*x2535*x2536);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=((IKabs((((x2533*x2537))+((x2534*x2537)))))+(IKabs(((((-1.0)*x2533))+(((-1.0)*x2534))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2539=((1.0)*gconst82);
CheckValue<IkReal> x2540 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((gconst83*r10*sj10))+((cj10*gconst83*r00))+(((-1.0)*r11*sj10*x2539))+(((-1.0)*cj10*r01*x2539)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2540.valid){
continue;
}
CheckValue<IkReal> x2541=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2539))+(((-1.0)*gconst83*r21)))),-1);
if(!x2541.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2540.value)+(((1.5707963267949)*(x2541.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2542=IKsin(j14);
IkReal x2543=IKcos(j14);
IkReal x2544=(gconst82*r01);
IkReal x2545=((1.0)*cj11);
IkReal x2546=(gconst82*r21);
IkReal x2547=((1.0)*sj10);
IkReal x2548=(gconst83*r00);
IkReal x2549=(gconst83*r10);
IkReal x2550=(gconst83*r20);
IkReal x2551=(gconst82*r11);
IkReal x2552=(cj12*sj11);
IkReal x2553=((1.0)*x2543);
IkReal x2554=((1.0)*x2542);
evalcond[0]=((((-1.0)*x2550*x2554))+((x2542*x2546))+(((-1.0)*r22*x2553)));
evalcond[1]=((((-1.0)*x2549*x2554))+(((-1.0)*r12*x2553))+cj10+((x2542*x2551)));
evalcond[2]=((((-1.0)*x2548*x2554))+((x2542*x2544))+(((-1.0)*r02*x2553))+(((-1.0)*x2547)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x2545))+((x2543*x2550))+(((-1.0)*x2546*x2553))+(((-1.0)*r22*x2554)));
evalcond[4]=(((x2543*x2548))+(((-1.0)*cj10*sj12*x2545))+(((-1.0)*r02*x2554))+(((-1.0)*x2544*x2553))+(((-1.0)*cj10*x2552)));
evalcond[5]=((((-1.0)*r12*x2554))+((x2543*x2549))+(((-1.0)*sj10*sj12*x2545))+(((-1.0)*x2551*x2553))+(((-1.0)*x2547*x2552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2555=((1.0)*gconst83);
CheckValue<IkReal> x2556 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x2555))+((gconst82*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2556.valid){
continue;
}
CheckValue<IkReal> x2557=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2555))+(((-1.0)*gconst82*r10)))),-1);
if(!x2557.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2556.value)+(((1.5707963267949)*(x2557.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2558=IKsin(j14);
IkReal x2559=IKcos(j14);
IkReal x2560=(gconst82*r01);
IkReal x2561=((1.0)*cj11);
IkReal x2562=(gconst82*r21);
IkReal x2563=((1.0)*sj10);
IkReal x2564=(gconst83*r00);
IkReal x2565=(gconst83*r10);
IkReal x2566=(gconst83*r20);
IkReal x2567=(gconst82*r11);
IkReal x2568=(cj12*sj11);
IkReal x2569=((1.0)*x2559);
IkReal x2570=((1.0)*x2558);
evalcond[0]=((((-1.0)*r22*x2569))+(((-1.0)*x2566*x2570))+((x2558*x2562)));
evalcond[1]=(((x2558*x2567))+cj10+(((-1.0)*x2565*x2570))+(((-1.0)*r12*x2569)));
evalcond[2]=((((-1.0)*r02*x2569))+((x2558*x2560))+(((-1.0)*x2563))+(((-1.0)*x2564*x2570)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x2562*x2569))+(((-1.0)*cj12*x2561))+((x2559*x2566))+(((-1.0)*r22*x2570)));
evalcond[4]=((((-1.0)*cj10*sj12*x2561))+((x2559*x2564))+(((-1.0)*x2560*x2569))+(((-1.0)*r02*x2570))+(((-1.0)*cj10*x2568)));
evalcond[5]=((((-1.0)*x2563*x2568))+(((-1.0)*r12*x2570))+((x2559*x2565))+(((-1.0)*x2567*x2569))+(((-1.0)*sj10*sj12*x2561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2571=((1.0)*gconst83);
CheckValue<IkReal> x2572 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x2571))+((cj10*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2572.valid){
continue;
}
CheckValue<IkReal> x2573=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r00))+(((-1.0)*r01*x2571)))),-1);
if(!x2573.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2572.value)+(((1.5707963267949)*(x2573.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2574=IKsin(j14);
IkReal x2575=IKcos(j14);
IkReal x2576=(gconst82*r01);
IkReal x2577=((1.0)*cj11);
IkReal x2578=(gconst82*r21);
IkReal x2579=((1.0)*sj10);
IkReal x2580=(gconst83*r00);
IkReal x2581=(gconst83*r10);
IkReal x2582=(gconst83*r20);
IkReal x2583=(gconst82*r11);
IkReal x2584=(cj12*sj11);
IkReal x2585=((1.0)*x2575);
IkReal x2586=((1.0)*x2574);
evalcond[0]=(((x2574*x2578))+(((-1.0)*x2582*x2586))+(((-1.0)*r22*x2585)));
evalcond[1]=(((x2574*x2583))+cj10+(((-1.0)*r12*x2585))+(((-1.0)*x2581*x2586)));
evalcond[2]=(((x2574*x2576))+(((-1.0)*r02*x2585))+(((-1.0)*x2579))+(((-1.0)*x2580*x2586)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x2577))+(((-1.0)*x2578*x2585))+((x2575*x2582))+(((-1.0)*r22*x2586)));
evalcond[4]=((((-1.0)*r02*x2586))+(((-1.0)*cj10*sj12*x2577))+((x2575*x2580))+(((-1.0)*x2576*x2585))+(((-1.0)*cj10*x2584)));
evalcond[5]=((((-1.0)*x2579*x2584))+(((-1.0)*sj10*sj12*x2577))+((x2575*x2581))+(((-1.0)*x2583*x2585))+(((-1.0)*r12*x2586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2587=((-1.0)*r10);
IkReal x2589 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2589)==0){
continue;
}
IkReal x2588=pow(x2589,-0.5);
CheckValue<IkReal> x2590 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2587),IKFAST_ATAN2_MAGTHRESH);
if(!x2590.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2590.value));
IkReal gconst85=(r11*x2588);
IkReal gconst86=(x2587*x2588);
CheckValue<IkReal> x2591 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2591.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x2591.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x2592=((-1.0)*r10);
IkReal x2593=x2588;
CheckValue<IkReal> x2595 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2592),IKFAST_ATAN2_MAGTHRESH);
if(!x2595.valid){
continue;
}
IkReal x2594=((-1.0)*(x2595.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst85;
cj15=gconst86;
j15=x2594;
IkReal gconst84=x2594;
IkReal gconst85=(r11*x2593);
IkReal gconst86=(x2592*x2593);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2596=((1.0)*gconst85);
CheckValue<IkReal> x2597 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x2596))+((cj10*gconst86*r00))+((gconst86*r10*sj10))+(((-1.0)*r11*sj10*x2596)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2597.valid){
continue;
}
CheckValue<IkReal> x2598=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2596)))),-1);
if(!x2598.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2597.value)+(((1.5707963267949)*(x2598.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2599=IKsin(j14);
IkReal x2600=IKcos(j14);
IkReal x2601=((1.0)*cj11);
IkReal x2602=(gconst85*r21);
IkReal x2603=(gconst85*r01);
IkReal x2604=(gconst86*r20);
IkReal x2605=(gconst86*r10);
IkReal x2606=(gconst86*r00);
IkReal x2607=(gconst85*r11);
IkReal x2608=((1.0)*x2600);
IkReal x2609=((1.0)*x2599);
IkReal x2610=((1.0)*cj12*sj11);
evalcond[0]=((((-1.0)*r22*x2608))+((x2599*x2602))+(((-1.0)*x2604*x2609)));
evalcond[1]=(cj10+(((-1.0)*r12*x2608))+((x2599*x2607))+(((-1.0)*x2605*x2609)));
evalcond[2]=((((-1.0)*r02*x2608))+(((-1.0)*sj10))+((x2599*x2603))+(((-1.0)*x2606*x2609)));
evalcond[3]=(((sj11*sj12))+((x2600*x2604))+(((-1.0)*r22*x2609))+(((-1.0)*cj12*x2601))+(((-1.0)*x2602*x2608)));
evalcond[4]=((((-1.0)*cj10*x2610))+((x2600*x2606))+(((-1.0)*cj10*sj12*x2601))+(((-1.0)*r02*x2609))+(((-1.0)*x2603*x2608)));
evalcond[5]=((((-1.0)*sj10*sj12*x2601))+(((-1.0)*x2607*x2608))+((x2600*x2605))+(((-1.0)*r12*x2609))+(((-1.0)*sj10*x2610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2611=((1.0)*gconst86);
CheckValue<IkReal> x2612=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2611))+(((-1.0)*gconst85*r00)))),-1);
if(!x2612.valid){
continue;
}
CheckValue<IkReal> x2613 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x2611))+((cj10*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2613.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2612.value)))+(x2613.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2614=IKsin(j14);
IkReal x2615=IKcos(j14);
IkReal x2616=((1.0)*cj11);
IkReal x2617=(gconst85*r21);
IkReal x2618=(gconst85*r01);
IkReal x2619=(gconst86*r20);
IkReal x2620=(gconst86*r10);
IkReal x2621=(gconst86*r00);
IkReal x2622=(gconst85*r11);
IkReal x2623=((1.0)*x2615);
IkReal x2624=((1.0)*x2614);
IkReal x2625=((1.0)*cj12*sj11);
evalcond[0]=((((-1.0)*x2619*x2624))+((x2614*x2617))+(((-1.0)*r22*x2623)));
evalcond[1]=(((x2614*x2622))+(((-1.0)*r12*x2623))+cj10+(((-1.0)*x2620*x2624)));
evalcond[2]=(((x2614*x2618))+(((-1.0)*sj10))+(((-1.0)*r02*x2623))+(((-1.0)*x2621*x2624)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x2617*x2623))+((x2615*x2619))+(((-1.0)*r22*x2624))+(((-1.0)*cj12*x2616)));
evalcond[4]=((((-1.0)*cj10*sj12*x2616))+(((-1.0)*x2618*x2623))+((x2615*x2621))+(((-1.0)*r02*x2624))+(((-1.0)*cj10*x2625)));
evalcond[5]=((((-1.0)*sj10*sj12*x2616))+(((-1.0)*x2622*x2623))+(((-1.0)*r12*x2624))+((x2615*x2620))+(((-1.0)*sj10*x2625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2626=((-1.0)*r11);
IkReal x2628 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2628)==0){
continue;
}
IkReal x2627=pow(x2628,-0.5);
CheckValue<IkReal> x2629 = IKatan2WithCheck(IkReal(x2626),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2629.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2629.value))));
IkReal gconst88=(x2626*x2627);
IkReal gconst89=((1.0)*r10*x2627);
CheckValue<IkReal> x2630 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2630.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x2630.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x2631=((-1.0)*r11);
CheckValue<IkReal> x2634 = IKatan2WithCheck(IkReal(x2631),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2634.valid){
continue;
}
IkReal x2632=((1.0)*(x2634.value));
IkReal x2633=x2627;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst88;
cj15=gconst89;
j15=((3.14159265)+(((-1.0)*x2632)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2632)));
IkReal gconst88=(x2631*x2633);
IkReal gconst89=((1.0)*r10*x2633);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x2635=((-1.0)*r11);
CheckValue<IkReal> x2638 = IKatan2WithCheck(IkReal(x2635),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2638.valid){
continue;
}
IkReal x2636=((1.0)*(x2638.value));
IkReal x2637=x2627;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst88;
cj15=gconst89;
j15=((3.14159265)+(((-1.0)*x2636)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2636)));
IkReal gconst88=(x2635*x2637);
IkReal gconst89=((1.0)*r10*x2637);
IkReal x2639=r12*r12;
IkReal x2640=(cj10*r02);
IkReal x2641=x2627;
IkReal x2642=(sj10*x2641);
j14eval[0]=((IKabs(((((-1.0)*r12*sj10))+(((-1.0)*x2640)))))+(IKabs((((x2639*x2642))+((r12*x2640*x2641))+(((-1.0)*x2642))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x2643=((-1.0)*r11);
CheckValue<IkReal> x2646 = IKatan2WithCheck(IkReal(x2643),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2646.valid){
continue;
}
IkReal x2644=((1.0)*(x2646.value));
IkReal x2645=x2627;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst88;
cj15=gconst89;
j15=((3.14159265)+(((-1.0)*x2644)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2644)));
IkReal gconst88=(x2643*x2645);
IkReal gconst89=((1.0)*r10*x2645);
IkReal x2647=r12*r12;
IkReal x2648=(cj11*cj12*r22);
IkReal x2649=(r22*sj11*sj12);
CheckValue<IkReal> x2653=IKPowWithIntegerCheck(((-1.0)+x2647),-1);
if(!x2653.valid){
continue;
}
IkReal x2650=x2653.value;
if((((1.0)+(((-1.0)*x2647)))) < -0.00001)
continue;
IkReal x2651=IKsqrt(((1.0)+(((-1.0)*x2647))));
IkReal x2652=(r12*x2650*x2651);
j14eval[0]=((IKabs(((((-1.0)*x2648))+x2649)))+(IKabs((((x2648*x2652))+(((-1.0)*x2649*x2652))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2654=(sj11*sj12);
IkReal x2655=(gconst89*r20);
IkReal x2656=(cj11*cj12);
IkReal x2657=(gconst88*r21);
CheckValue<IkReal> x2658=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x2655*x2657))+(x2655*x2655)+(x2657*x2657))),-1);
if(!x2658.valid){
continue;
}
CheckValue<IkReal> x2659 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2656))+((r22*x2654)))),IkReal(((((-1.0)*x2654*x2655))+((x2655*x2656))+(((-1.0)*x2656*x2657))+((x2654*x2657)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2659.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2658.value)))+(x2659.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2660=IKsin(j14);
IkReal x2661=IKcos(j14);
IkReal x2662=((1.0)*cj11);
IkReal x2663=((1.0)*sj10);
IkReal x2664=(cj12*sj11);
IkReal x2665=(gconst88*r01);
IkReal x2666=(gconst89*r20);
IkReal x2667=(gconst88*r11);
IkReal x2668=(gconst88*r21);
IkReal x2669=((1.0)*x2661);
IkReal x2670=((1.0)*x2660);
IkReal x2671=(gconst89*x2661);
evalcond[0]=(((x2660*x2668))+(((-1.0)*x2666*x2670))+(((-1.0)*r22*x2669)));
evalcond[1]=((((-1.0)*r12*x2669))+cj10+((x2660*x2667))+(((-1.0)*gconst89*r10*x2670)));
evalcond[2]=((((-1.0)*gconst89*r00*x2670))+(((-1.0)*r02*x2669))+(((-1.0)*x2663))+((x2660*x2665)));
evalcond[3]=(((sj11*sj12))+((x2661*x2666))+(((-1.0)*cj12*x2662))+(((-1.0)*r22*x2670))+(((-1.0)*x2668*x2669)));
evalcond[4]=((((-1.0)*cj10*x2664))+(((-1.0)*r02*x2670))+(((-1.0)*x2665*x2669))+((r00*x2671))+(((-1.0)*cj10*sj12*x2662)));
evalcond[5]=((((-1.0)*r12*x2670))+(((-1.0)*x2663*x2664))+((r10*x2671))+(((-1.0)*sj10*sj12*x2662))+(((-1.0)*x2667*x2669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2672=((1.0)*gconst88);
CheckValue<IkReal> x2673 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x2672))+((gconst89*r10*sj10))+(((-1.0)*r11*sj10*x2672))+((cj10*gconst89*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2673.valid){
continue;
}
CheckValue<IkReal> x2674=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst89*r21))+(((-1.0)*r20*x2672)))),-1);
if(!x2674.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2673.value)+(((1.5707963267949)*(x2674.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2675=IKsin(j14);
IkReal x2676=IKcos(j14);
IkReal x2677=((1.0)*cj11);
IkReal x2678=((1.0)*sj10);
IkReal x2679=(cj12*sj11);
IkReal x2680=(gconst88*r01);
IkReal x2681=(gconst89*r20);
IkReal x2682=(gconst88*r11);
IkReal x2683=(gconst88*r21);
IkReal x2684=((1.0)*x2676);
IkReal x2685=((1.0)*x2675);
IkReal x2686=(gconst89*x2676);
evalcond[0]=((((-1.0)*r22*x2684))+(((-1.0)*x2681*x2685))+((x2675*x2683)));
evalcond[1]=((((-1.0)*r12*x2684))+(((-1.0)*gconst89*r10*x2685))+cj10+((x2675*x2682)));
evalcond[2]=((((-1.0)*r02*x2684))+(((-1.0)*x2678))+((x2675*x2680))+(((-1.0)*gconst89*r00*x2685)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x2683*x2684))+(((-1.0)*r22*x2685))+(((-1.0)*cj12*x2677))+((x2676*x2681)));
evalcond[4]=((((-1.0)*r02*x2685))+(((-1.0)*cj10*x2679))+(((-1.0)*x2680*x2684))+((r00*x2686))+(((-1.0)*cj10*sj12*x2677)));
evalcond[5]=((((-1.0)*r12*x2685))+((r10*x2686))+(((-1.0)*x2678*x2679))+(((-1.0)*x2682*x2684))+(((-1.0)*sj10*sj12*x2677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2687=((1.0)*gconst89);
CheckValue<IkReal> x2688 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst88*r21))+(((-1.0)*cj10*r20*x2687)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2688.valid){
continue;
}
CheckValue<IkReal> x2689=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2687))+(((-1.0)*gconst88*r00)))),-1);
if(!x2689.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2688.value)+(((1.5707963267949)*(x2689.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2690=IKsin(j14);
IkReal x2691=IKcos(j14);
IkReal x2692=((1.0)*cj11);
IkReal x2693=((1.0)*sj10);
IkReal x2694=(cj12*sj11);
IkReal x2695=(gconst88*r01);
IkReal x2696=(gconst89*r20);
IkReal x2697=(gconst88*r11);
IkReal x2698=(gconst88*r21);
IkReal x2699=((1.0)*x2691);
IkReal x2700=((1.0)*x2690);
IkReal x2701=(gconst89*x2691);
evalcond[0]=((((-1.0)*r22*x2699))+(((-1.0)*x2696*x2700))+((x2690*x2698)));
evalcond[1]=(cj10+(((-1.0)*gconst89*r10*x2700))+(((-1.0)*r12*x2699))+((x2690*x2697)));
evalcond[2]=((((-1.0)*r02*x2699))+(((-1.0)*x2693))+(((-1.0)*gconst89*r00*x2700))+((x2690*x2695)));
evalcond[3]=(((sj11*sj12))+((x2691*x2696))+(((-1.0)*r22*x2700))+(((-1.0)*cj12*x2692))+(((-1.0)*x2698*x2699)));
evalcond[4]=(((r00*x2701))+(((-1.0)*r02*x2700))+(((-1.0)*cj10*sj12*x2692))+(((-1.0)*cj10*x2694))+(((-1.0)*x2695*x2699)));
evalcond[5]=((((-1.0)*r12*x2700))+((r10*x2701))+(((-1.0)*x2697*x2699))+(((-1.0)*x2693*x2694))+(((-1.0)*sj10*sj12*x2692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
IkReal x2702=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x2702;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj15*r00))+((r01*sj15))))));
j14eval[2]=IKsign(x2702);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
IkReal x2703=((1.0)*cj15);
IkReal x2704=((((-1.0)*r01*x2703))+(((-1.0)*r00*sj15)));
j14eval[0]=x2704;
j14eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x2703))+((r21*sj15))))));
j14eval[2]=IKsign(x2704);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
IkReal x2705=cj15*cj15;
IkReal x2706=r11*r11;
IkReal x2707=(r11*sj15);
IkReal x2708=(cj15*r10);
IkReal x2709=(x2706+(((-2.0)*x2707*x2708))+(r12*r12)+(((-1.0)*x2705*x2706))+((x2705*(r10*r10))));
j14eval[0]=x2709;
j14eval[1]=IKsign(x2709);
j14eval[2]=((IKabs(r12))+(IKabs((x2708+(((-1.0)*x2707))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2710=cj15*cj15;
IkReal x2711=r11*r11;
IkReal x2712=(r11*sj15);
IkReal x2713=(cj15*r10);
CheckValue<IkReal> x2714 = IKatan2WithCheck(IkReal((x2713+(((-1.0)*x2712)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2714.valid){
continue;
}
CheckValue<IkReal> x2715=IKPowWithIntegerCheck(IKsign((x2711+(r12*r12)+(((-1.0)*x2710*x2711))+((x2710*(r10*r10)))+(((-2.0)*x2712*x2713)))),-1);
if(!x2715.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2714.value)+(((1.5707963267949)*(x2715.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2716=IKsin(j14);
IkReal x2717=IKcos(j14);
IkReal x2718=(r11*sj15);
IkReal x2719=((1.0)*cj11);
IkReal x2720=(cj15*r10);
IkReal x2721=(cj15*r00);
IkReal x2722=(r21*sj15);
IkReal x2723=(r01*sj15);
IkReal x2724=(cj15*r20);
IkReal x2725=((1.0)*x2717);
IkReal x2726=((1.0)*x2716);
evalcond[0]=((((-1.0)*x2724*x2726))+(((-1.0)*r22*x2725))+((x2716*x2722)));
evalcond[1]=((((-1.0)*x2721*x2726))+((x2716*x2723))+(((-1.0)*r02*x2725)));
evalcond[2]=((((-1.0)*x2718*x2725))+((x2717*x2720))+(((-1.0)*r12*x2726)));
evalcond[3]=((1.0)+((x2716*x2718))+(((-1.0)*x2720*x2726))+(((-1.0)*r12*x2725)));
evalcond[4]=(((sj11*sj12))+((x2717*x2724))+(((-1.0)*x2722*x2725))+(((-1.0)*r22*x2726))+(((-1.0)*cj12*x2719)));
evalcond[5]=(((x2717*x2721))+(((-1.0)*cj12*sj11))+(((-1.0)*x2723*x2725))+(((-1.0)*sj12*x2719))+(((-1.0)*r02*x2726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2727=((1.0)*cj15);
CheckValue<IkReal> x2728 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj15))+(((-1.0)*r20*x2727)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2728.valid){
continue;
}
CheckValue<IkReal> x2729=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2727))+(((-1.0)*r00*sj15)))),-1);
if(!x2729.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2728.value)+(((1.5707963267949)*(x2729.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2730=IKsin(j14);
IkReal x2731=IKcos(j14);
IkReal x2732=(r11*sj15);
IkReal x2733=((1.0)*cj11);
IkReal x2734=(cj15*r10);
IkReal x2735=(cj15*r00);
IkReal x2736=(r21*sj15);
IkReal x2737=(r01*sj15);
IkReal x2738=(cj15*r20);
IkReal x2739=((1.0)*x2731);
IkReal x2740=((1.0)*x2730);
evalcond[0]=((((-1.0)*x2738*x2740))+((x2730*x2736))+(((-1.0)*r22*x2739)));
evalcond[1]=((((-1.0)*x2735*x2740))+(((-1.0)*r02*x2739))+((x2730*x2737)));
evalcond[2]=(((x2731*x2734))+(((-1.0)*r12*x2740))+(((-1.0)*x2732*x2739)));
evalcond[3]=((1.0)+(((-1.0)*x2734*x2740))+((x2730*x2732))+(((-1.0)*r12*x2739)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x2733))+((x2731*x2738))+(((-1.0)*x2736*x2739))+(((-1.0)*r22*x2740)));
evalcond[5]=((((-1.0)*x2737*x2739))+((x2731*x2735))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x2733))+(((-1.0)*r02*x2740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x2741 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj15*r00))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2741.valid){
continue;
}
CheckValue<IkReal> x2742=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x2742.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2741.value)+(((1.5707963267949)*(x2742.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2743=IKsin(j14);
IkReal x2744=IKcos(j14);
IkReal x2745=(r11*sj15);
IkReal x2746=((1.0)*cj11);
IkReal x2747=(cj15*r10);
IkReal x2748=(cj15*r00);
IkReal x2749=(r21*sj15);
IkReal x2750=(r01*sj15);
IkReal x2751=(cj15*r20);
IkReal x2752=((1.0)*x2744);
IkReal x2753=((1.0)*x2743);
evalcond[0]=((((-1.0)*r22*x2752))+((x2743*x2749))+(((-1.0)*x2751*x2753)));
evalcond[1]=(((x2743*x2750))+(((-1.0)*x2748*x2753))+(((-1.0)*r02*x2752)));
evalcond[2]=((((-1.0)*x2745*x2752))+((x2744*x2747))+(((-1.0)*r12*x2753)));
evalcond[3]=((1.0)+((x2743*x2745))+(((-1.0)*r12*x2752))+(((-1.0)*x2747*x2753)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r22*x2753))+(((-1.0)*cj12*x2746))+((x2744*x2751))+(((-1.0)*x2749*x2752)));
evalcond[5]=((((-1.0)*sj12*x2746))+((x2744*x2748))+(((-1.0)*cj12*sj11))+(((-1.0)*x2750*x2752))+(((-1.0)*r02*x2753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x2754=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x2754;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x2754);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x2755=((1.0)*cj15);
IkReal x2756=((((-1.0)*r20*sj15))+(((-1.0)*r21*x2755)));
j14eval[0]=x2756;
j14eval[1]=IKsign(x2756);
j14eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2755))+((r01*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x2757=r11*r11;
IkReal x2758=cj15*cj15;
IkReal x2759=(cj15*r10);
IkReal x2760=(r11*sj15);
IkReal x2761=((((2.0)*x2759*x2760))+((x2757*x2758))+(((-1.0)*x2758*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x2757)));
j14eval[0]=x2761;
j14eval[1]=((IKabs(r12))+(IKabs((x2759+(((-1.0)*x2760))))));
j14eval[2]=IKsign(x2761);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2762=r11*r11;
IkReal x2763=cj15*cj15;
IkReal x2764=(cj15*r10);
IkReal x2765=(r11*sj15);
CheckValue<IkReal> x2766 = IKatan2WithCheck(IkReal((x2764+(((-1.0)*x2765)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2766.valid){
continue;
}
CheckValue<IkReal> x2767=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2762))+((x2762*x2763))+(((2.0)*x2764*x2765))+(((-1.0)*x2763*(r10*r10)))+(((-1.0)*(r12*r12))))),-1);
if(!x2767.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2766.value)+(((1.5707963267949)*(x2767.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2768=IKsin(j14);
IkReal x2769=IKcos(j14);
IkReal x2770=(r11*sj15);
IkReal x2771=(cj15*r10);
IkReal x2772=(cj15*r00);
IkReal x2773=(r21*sj15);
IkReal x2774=(r01*sj15);
IkReal x2775=(cj15*r20);
IkReal x2776=((1.0)*x2769);
IkReal x2777=((1.0)*x2768);
evalcond[0]=(((x2768*x2773))+(((-1.0)*x2775*x2777))+(((-1.0)*r22*x2776)));
evalcond[1]=(((x2768*x2774))+(((-1.0)*r02*x2776))+(((-1.0)*x2772*x2777)));
evalcond[2]=(((x2769*x2771))+(((-1.0)*x2770*x2776))+(((-1.0)*r12*x2777)));
evalcond[3]=((-1.0)+((x2768*x2770))+(((-1.0)*r12*x2776))+(((-1.0)*x2771*x2777)));
evalcond[4]=(((x2769*x2772))+(((-1.0)*r02*x2777))+(((-1.0)*x2774*x2776))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x2769*x2775))+(((-1.0)*x2773*x2776))+(((-1.0)*cj11*cj12))+(((-1.0)*r22*x2777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2778=((1.0)*cj15);
CheckValue<IkReal> x2779=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2778))+(((-1.0)*r20*sj15)))),-1);
if(!x2779.valid){
continue;
}
CheckValue<IkReal> x2780 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x2778))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2780.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2779.value)))+(x2780.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2781=IKsin(j14);
IkReal x2782=IKcos(j14);
IkReal x2783=(r11*sj15);
IkReal x2784=(cj15*r10);
IkReal x2785=(cj15*r00);
IkReal x2786=(r21*sj15);
IkReal x2787=(r01*sj15);
IkReal x2788=(cj15*r20);
IkReal x2789=((1.0)*x2782);
IkReal x2790=((1.0)*x2781);
evalcond[0]=(((x2781*x2786))+(((-1.0)*r22*x2789))+(((-1.0)*x2788*x2790)));
evalcond[1]=(((x2781*x2787))+(((-1.0)*x2785*x2790))+(((-1.0)*r02*x2789)));
evalcond[2]=(((x2782*x2784))+(((-1.0)*x2783*x2789))+(((-1.0)*r12*x2790)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2789))+(((-1.0)*x2784*x2790))+((x2781*x2783)));
evalcond[4]=((((-1.0)*x2787*x2789))+((x2782*x2785))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*r02*x2790)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x2786*x2789))+((x2782*x2788))+(((-1.0)*r22*x2790))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x2791 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2791.valid){
continue;
}
CheckValue<IkReal> x2792=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x2792.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2791.value)+(((1.5707963267949)*(x2792.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2793=IKsin(j14);
IkReal x2794=IKcos(j14);
IkReal x2795=(r11*sj15);
IkReal x2796=(cj15*r10);
IkReal x2797=(cj15*r00);
IkReal x2798=(r21*sj15);
IkReal x2799=(r01*sj15);
IkReal x2800=(cj15*r20);
IkReal x2801=((1.0)*x2794);
IkReal x2802=((1.0)*x2793);
evalcond[0]=((((-1.0)*x2800*x2802))+((x2793*x2798))+(((-1.0)*r22*x2801)));
evalcond[1]=(((x2793*x2799))+(((-1.0)*x2797*x2802))+(((-1.0)*r02*x2801)));
evalcond[2]=(((x2794*x2796))+(((-1.0)*r12*x2802))+(((-1.0)*x2795*x2801)));
evalcond[3]=((-1.0)+((x2793*x2795))+(((-1.0)*r12*x2801))+(((-1.0)*x2796*x2802)));
evalcond[4]=(((x2794*x2797))+(((-1.0)*x2799*x2801))+((cj12*sj11))+(((-1.0)*r02*x2802))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r22*x2802))+(((-1.0)*x2798*x2801))+((x2794*x2800))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2803=((-1.0)*r00);
IkReal x2805 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2805)==0){
continue;
}
IkReal x2804=pow(x2805,-0.5);
CheckValue<IkReal> x2806 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2803),IKFAST_ATAN2_MAGTHRESH);
if(!x2806.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2806.value));
IkReal gconst91=(r01*x2804);
IkReal gconst92=(x2803*x2804);
CheckValue<IkReal> x2807 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2807.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x2807.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x2808=((-1.0)*r00);
IkReal x2809=x2804;
CheckValue<IkReal> x2811 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2808),IKFAST_ATAN2_MAGTHRESH);
if(!x2811.valid){
continue;
}
IkReal x2810=((-1.0)*(x2811.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst91;
cj15=gconst92;
j15=x2810;
IkReal gconst90=x2810;
IkReal gconst91=(r01*x2809);
IkReal gconst92=(x2808*x2809);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2812=((1.0)*gconst91);
CheckValue<IkReal> x2813=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst92*r21))+(((-1.0)*r20*x2812)))),-1);
if(!x2813.valid){
continue;
}
CheckValue<IkReal> x2814 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x2812))+((gconst92*r10*sj10))+(((-1.0)*cj10*r01*x2812))+((cj10*gconst92*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2814.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2813.value)))+(x2814.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2815=IKsin(j14);
IkReal x2816=IKcos(j14);
IkReal x2817=((1.0)*cj11);
IkReal x2818=(gconst91*r11);
IkReal x2819=((1.0)*sj10);
IkReal x2820=(gconst92*r10);
IkReal x2821=(gconst91*r01);
IkReal x2822=(cj12*sj11);
IkReal x2823=(gconst92*r00);
IkReal x2824=(gconst91*r21);
IkReal x2825=(gconst92*r20);
IkReal x2826=((1.0)*x2816);
IkReal x2827=((1.0)*x2815);
evalcond[0]=(((x2815*x2824))+(((-1.0)*r22*x2826))+(((-1.0)*x2825*x2827)));
evalcond[1]=((((-1.0)*x2820*x2827))+(((-1.0)*r12*x2826))+cj10+((x2815*x2818)));
evalcond[2]=(((x2815*x2821))+(((-1.0)*r02*x2826))+(((-1.0)*x2819))+(((-1.0)*x2823*x2827)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x2817))+(((-1.0)*x2824*x2826))+(((-1.0)*r22*x2827))+((x2816*x2825)));
evalcond[4]=((((-1.0)*cj10*x2822))+(((-1.0)*x2821*x2826))+(((-1.0)*r02*x2827))+(((-1.0)*cj10*sj12*x2817))+((x2816*x2823)));
evalcond[5]=((((-1.0)*r12*x2827))+(((-1.0)*x2819*x2822))+(((-1.0)*x2818*x2826))+(((-1.0)*sj10*sj12*x2817))+((x2816*x2820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2828=((1.0)*gconst92);
CheckValue<IkReal> x2829=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2828))+(((-1.0)*gconst91*r10)))),-1);
if(!x2829.valid){
continue;
}
CheckValue<IkReal> x2830 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst91*r21*sj10))+(((-1.0)*r20*sj10*x2828)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2830.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2829.value)))+(x2830.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2831=IKsin(j14);
IkReal x2832=IKcos(j14);
IkReal x2833=((1.0)*cj11);
IkReal x2834=(gconst91*r11);
IkReal x2835=((1.0)*sj10);
IkReal x2836=(gconst92*r10);
IkReal x2837=(gconst91*r01);
IkReal x2838=(cj12*sj11);
IkReal x2839=(gconst92*r00);
IkReal x2840=(gconst91*r21);
IkReal x2841=(gconst92*r20);
IkReal x2842=((1.0)*x2832);
IkReal x2843=((1.0)*x2831);
evalcond[0]=((((-1.0)*x2841*x2843))+((x2831*x2840))+(((-1.0)*r22*x2842)));
evalcond[1]=((((-1.0)*r12*x2842))+((x2831*x2834))+cj10+(((-1.0)*x2836*x2843)));
evalcond[2]=((((-1.0)*x2835))+((x2831*x2837))+(((-1.0)*x2839*x2843))+(((-1.0)*r02*x2842)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x2840*x2842))+((x2832*x2841))+(((-1.0)*r22*x2843))+(((-1.0)*cj12*x2833)));
evalcond[4]=((((-1.0)*cj10*sj12*x2833))+(((-1.0)*r02*x2843))+(((-1.0)*x2837*x2842))+(((-1.0)*cj10*x2838))+((x2832*x2839)));
evalcond[5]=((((-1.0)*r12*x2843))+(((-1.0)*sj10*sj12*x2833))+(((-1.0)*x2835*x2838))+((x2832*x2836))+(((-1.0)*x2834*x2842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2844=((-1.0)*r01);
IkReal x2846 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2846)==0){
continue;
}
IkReal x2845=pow(x2846,-0.5);
CheckValue<IkReal> x2847 = IKatan2WithCheck(IkReal(x2844),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2847.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2847.value))));
IkReal gconst94=(x2844*x2845);
IkReal gconst95=((1.0)*r00*x2845);
CheckValue<IkReal> x2848 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2848.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x2848.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[5];
IkReal x2849=((-1.0)*r01);
CheckValue<IkReal> x2852 = IKatan2WithCheck(IkReal(x2849),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2852.valid){
continue;
}
IkReal x2850=((1.0)*(x2852.value));
IkReal x2851=x2845;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst94;
cj15=gconst95;
j15=((3.14159265)+(((-1.0)*x2850)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2850)));
IkReal gconst94=(x2849*x2851);
IkReal gconst95=((1.0)*r00*x2851);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=cj10;
j14eval[3]=r22;
j14eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  || IKabs(j14eval[4]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x2853=((-1.0)*r01);
CheckValue<IkReal> x2856 = IKatan2WithCheck(IkReal(x2853),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2856.valid){
continue;
}
IkReal x2854=((1.0)*(x2856.value));
IkReal x2855=x2845;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst94;
cj15=gconst95;
j15=((3.14159265)+(((-1.0)*x2854)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2854)));
IkReal gconst94=(x2853*x2855);
IkReal gconst95=((1.0)*r00*x2855);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x2857=((-1.0)*r01);
CheckValue<IkReal> x2860 = IKatan2WithCheck(IkReal(x2857),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2860.valid){
continue;
}
IkReal x2858=((1.0)*(x2860.value));
IkReal x2859=x2845;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst94;
cj15=gconst95;
j15=((3.14159265)+(((-1.0)*x2858)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2858)));
IkReal gconst94=(x2857*x2859);
IkReal gconst95=((1.0)*r00*x2859);
IkReal x2861=r02*r02;
IkReal x2862=(r12*sj10);
IkReal x2863=x2845;
IkReal x2864=(cj10*x2863);
j14eval[0]=((IKabs(((((-1.0)*x2862))+(((-1.0)*cj10*r02)))))+(IKabs(((((-1.0)*x2864))+((r02*x2862*x2863))+((x2861*x2864))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2865=((1.0)*cj10);
IkReal x2866=((1.0)*sj10);
CheckValue<IkReal> x2867=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2867.valid){
continue;
}
CheckValue<IkReal> x2868 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2865))+(((-1.0)*r12*x2866)))),IkReal(((((-1.0)*gconst94*r11*x2866))+((cj10*gconst95*r00))+((gconst95*r10*sj10))+(((-1.0)*gconst94*r01*x2865)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2868.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2867.value)))+(x2868.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2869=IKsin(j14);
IkReal x2870=IKcos(j14);
IkReal x2871=((1.0)*cj11);
IkReal x2872=((1.0)*sj10);
IkReal x2873=(gconst94*r11);
IkReal x2874=(cj12*sj11);
IkReal x2875=((1.0)*x2870);
IkReal x2876=((1.0)*x2869);
IkReal x2877=(gconst95*x2870);
IkReal x2878=(gconst94*x2869);
evalcond[0]=((((-1.0)*r22*x2875))+((r21*x2878))+(((-1.0)*gconst95*r20*x2876)));
evalcond[1]=((((-1.0)*gconst95*r10*x2876))+((x2869*x2873))+cj10+(((-1.0)*r12*x2875)));
evalcond[2]=((((-1.0)*gconst95*r00*x2876))+(((-1.0)*r02*x2875))+((r01*x2878))+(((-1.0)*x2872)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x2871))+(((-1.0)*r22*x2876))+((r20*x2877))+(((-1.0)*gconst94*r21*x2875)));
evalcond[4]=(((r00*x2877))+(((-1.0)*r02*x2876))+(((-1.0)*cj10*x2874))+(((-1.0)*cj10*sj12*x2871))+(((-1.0)*gconst94*r01*x2875)));
evalcond[5]=(((r10*x2877))+(((-1.0)*x2872*x2874))+(((-1.0)*sj10*sj12*x2871))+(((-1.0)*x2873*x2875))+(((-1.0)*r12*x2876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2879=((1.0)*gconst95);
CheckValue<IkReal> x2880=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2879)))),-1);
if(!x2880.valid){
continue;
}
CheckValue<IkReal> x2881 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x2879))+((gconst94*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2881.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2880.value)))+(x2881.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2882=IKsin(j14);
IkReal x2883=IKcos(j14);
IkReal x2884=((1.0)*cj11);
IkReal x2885=((1.0)*sj10);
IkReal x2886=(gconst94*r11);
IkReal x2887=(cj12*sj11);
IkReal x2888=((1.0)*x2883);
IkReal x2889=((1.0)*x2882);
IkReal x2890=(gconst95*x2883);
IkReal x2891=(gconst94*x2882);
evalcond[0]=((((-1.0)*r22*x2888))+((r21*x2891))+(((-1.0)*gconst95*r20*x2889)));
evalcond[1]=((((-1.0)*gconst95*r10*x2889))+cj10+((x2882*x2886))+(((-1.0)*r12*x2888)));
evalcond[2]=((((-1.0)*gconst95*r00*x2889))+(((-1.0)*r02*x2888))+((r01*x2891))+(((-1.0)*x2885)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r22*x2889))+(((-1.0)*cj12*x2884))+((r20*x2890))+(((-1.0)*gconst94*r21*x2888)));
evalcond[4]=((((-1.0)*r02*x2889))+(((-1.0)*gconst94*r01*x2888))+(((-1.0)*cj10*x2887))+(((-1.0)*cj10*sj12*x2884))+((r00*x2890)));
evalcond[5]=((((-1.0)*x2885*x2887))+((r10*x2890))+(((-1.0)*x2886*x2888))+(((-1.0)*r12*x2889))+(((-1.0)*sj10*sj12*x2884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2892=((1.0)*gconst95);
CheckValue<IkReal> x2893 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x2892))+((cj10*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2893.valid){
continue;
}
CheckValue<IkReal> x2894=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2892)))),-1);
if(!x2894.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2893.value)+(((1.5707963267949)*(x2894.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2895=IKsin(j14);
IkReal x2896=IKcos(j14);
IkReal x2897=((1.0)*cj11);
IkReal x2898=((1.0)*sj10);
IkReal x2899=(gconst94*r11);
IkReal x2900=(cj12*sj11);
IkReal x2901=((1.0)*x2896);
IkReal x2902=((1.0)*x2895);
IkReal x2903=(gconst95*x2896);
IkReal x2904=(gconst94*x2895);
evalcond[0]=((((-1.0)*gconst95*r20*x2902))+((r21*x2904))+(((-1.0)*r22*x2901)));
evalcond[1]=((((-1.0)*gconst95*r10*x2902))+((x2895*x2899))+cj10+(((-1.0)*r12*x2901)));
evalcond[2]=((((-1.0)*r02*x2901))+(((-1.0)*gconst95*r00*x2902))+((r01*x2904))+(((-1.0)*x2898)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*gconst94*r21*x2901))+(((-1.0)*cj12*x2897))+((r20*x2903))+(((-1.0)*r22*x2902)));
evalcond[4]=((((-1.0)*gconst94*r01*x2901))+(((-1.0)*r02*x2902))+((r00*x2903))+(((-1.0)*cj10*sj12*x2897))+(((-1.0)*cj10*x2900)));
evalcond[5]=(((r10*x2903))+(((-1.0)*x2898*x2900))+(((-1.0)*x2899*x2901))+(((-1.0)*r12*x2902))+(((-1.0)*sj10*sj12*x2897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x2905=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x2905;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x2905);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x2906=((1.0)*cj15);
IkReal x2907=((((-1.0)*r10*sj15))+(((-1.0)*r11*x2906)));
j14eval[0]=x2907;
j14eval[1]=IKsign(x2907);
j14eval[2]=((IKabs((((r21*sj15))+(((-1.0)*r20*x2906)))))+(IKabs(r22)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x2908=r01*r01;
IkReal x2909=cj15*cj15;
IkReal x2910=(r01*sj15);
IkReal x2911=(cj15*r00);
IkReal x2912=((((-1.0)*(r02*r02)))+((x2908*x2909))+(((-1.0)*x2909*(r00*r00)))+(((-1.0)*x2908))+(((2.0)*x2910*x2911)));
j14eval[0]=x2912;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x2910))+x2911))));
j14eval[2]=IKsign(x2912);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2913=r01*r01;
IkReal x2914=cj15*cj15;
IkReal x2915=(r01*sj15);
IkReal x2916=(cj15*r00);
CheckValue<IkReal> x2917 = IKatan2WithCheck(IkReal(((((-1.0)*x2915))+x2916)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2917.valid){
continue;
}
CheckValue<IkReal> x2918=IKPowWithIntegerCheck(IKsign(((((2.0)*x2915*x2916))+(((-1.0)*(r02*r02)))+((x2913*x2914))+(((-1.0)*x2913))+(((-1.0)*x2914*(r00*r00))))),-1);
if(!x2918.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2917.value)+(((1.5707963267949)*(x2918.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2919=IKsin(j14);
IkReal x2920=IKcos(j14);
IkReal x2921=(r11*sj15);
IkReal x2922=((1.0)*cj11);
IkReal x2923=(cj15*r10);
IkReal x2924=(cj15*r00);
IkReal x2925=(r21*sj15);
IkReal x2926=(r01*sj15);
IkReal x2927=(cj15*r20);
IkReal x2928=((1.0)*x2920);
IkReal x2929=((1.0)*x2919);
evalcond[0]=((((-1.0)*x2927*x2929))+((x2919*x2925))+(((-1.0)*r22*x2928)));
evalcond[1]=((((-1.0)*x2923*x2929))+((x2919*x2921))+(((-1.0)*r12*x2928)));
evalcond[2]=((((-1.0)*r02*x2929))+(((-1.0)*x2926*x2928))+((x2920*x2924)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2928))+((x2919*x2926))+(((-1.0)*x2924*x2929)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x2922))+(((-1.0)*x2925*x2928))+(((-1.0)*r22*x2929))+((x2920*x2927)));
evalcond[5]=((((-1.0)*x2921*x2928))+(((-1.0)*cj12*sj11))+(((-1.0)*r12*x2929))+(((-1.0)*sj12*x2922))+((x2920*x2923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2930=((1.0)*cj15);
CheckValue<IkReal> x2931=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2930))+(((-1.0)*r10*sj15)))),-1);
if(!x2931.valid){
continue;
}
CheckValue<IkReal> x2932 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2930))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2932.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2931.value)))+(x2932.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2933=IKsin(j14);
IkReal x2934=IKcos(j14);
IkReal x2935=(r11*sj15);
IkReal x2936=((1.0)*cj11);
IkReal x2937=(cj15*r10);
IkReal x2938=(cj15*r00);
IkReal x2939=(r21*sj15);
IkReal x2940=(r01*sj15);
IkReal x2941=(cj15*r20);
IkReal x2942=((1.0)*x2934);
IkReal x2943=((1.0)*x2933);
evalcond[0]=((((-1.0)*r22*x2942))+((x2933*x2939))+(((-1.0)*x2941*x2943)));
evalcond[1]=((((-1.0)*r12*x2942))+((x2933*x2935))+(((-1.0)*x2937*x2943)));
evalcond[2]=((((-1.0)*x2940*x2942))+(((-1.0)*r02*x2943))+((x2934*x2938)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2942))+((x2933*x2940))+(((-1.0)*x2938*x2943)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x2939*x2942))+(((-1.0)*r22*x2943))+(((-1.0)*cj12*x2936))+((x2934*x2941)));
evalcond[5]=((((-1.0)*r12*x2943))+(((-1.0)*x2935*x2942))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x2936))+((x2934*x2937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x2944=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x2944.valid){
continue;
}
CheckValue<IkReal> x2945 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2945.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2944.value)))+(x2945.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2946=IKsin(j14);
IkReal x2947=IKcos(j14);
IkReal x2948=(r11*sj15);
IkReal x2949=((1.0)*cj11);
IkReal x2950=(cj15*r10);
IkReal x2951=(cj15*r00);
IkReal x2952=(r21*sj15);
IkReal x2953=(r01*sj15);
IkReal x2954=(cj15*r20);
IkReal x2955=((1.0)*x2947);
IkReal x2956=((1.0)*x2946);
evalcond[0]=(((x2946*x2952))+(((-1.0)*x2954*x2956))+(((-1.0)*r22*x2955)));
evalcond[1]=(((x2946*x2948))+(((-1.0)*r12*x2955))+(((-1.0)*x2950*x2956)));
evalcond[2]=((((-1.0)*x2953*x2955))+(((-1.0)*r02*x2956))+((x2947*x2951)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2955))+((x2946*x2953))+(((-1.0)*x2951*x2956)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x2949))+(((-1.0)*x2952*x2955))+((x2947*x2954))+(((-1.0)*r22*x2956)));
evalcond[5]=((((-1.0)*x2948*x2955))+((x2947*x2950))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x2949))+(((-1.0)*r12*x2956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x2957=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x2957;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x2957);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x2958=((1.0)*cj15);
IkReal x2959=((((-1.0)*r21*x2958))+(((-1.0)*r20*sj15)));
j14eval[0]=x2959;
j14eval[1]=IKsign(x2959);
j14eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2958))+((r11*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x2960=cj15*cj15;
IkReal x2961=r01*r01;
IkReal x2962=(cj15*r00);
IkReal x2963=(r01*sj15);
IkReal x2964=((((-2.0)*x2962*x2963))+(((-1.0)*x2960*x2961))+((x2960*(r00*r00)))+(r02*r02)+x2961);
j14eval[0]=x2964;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x2963))+x2962))));
j14eval[2]=IKsign(x2964);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2965=cj15*cj15;
IkReal x2966=r01*r01;
IkReal x2967=(r01*sj15);
IkReal x2968=(cj15*r00);
CheckValue<IkReal> x2969 = IKatan2WithCheck(IkReal(((((-1.0)*x2967))+x2968)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2969.valid){
continue;
}
CheckValue<IkReal> x2970=IKPowWithIntegerCheck(IKsign((((x2965*(r00*r00)))+(((-2.0)*x2967*x2968))+(r02*r02)+x2966+(((-1.0)*x2965*x2966)))),-1);
if(!x2970.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2969.value)+(((1.5707963267949)*(x2970.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2971=IKsin(j14);
IkReal x2972=IKcos(j14);
IkReal x2973=(r11*sj15);
IkReal x2974=(cj15*r10);
IkReal x2975=(cj15*r00);
IkReal x2976=(r21*sj15);
IkReal x2977=(r01*sj15);
IkReal x2978=(cj15*r20);
IkReal x2979=((1.0)*x2972);
IkReal x2980=((1.0)*x2971);
evalcond[0]=(((x2971*x2976))+(((-1.0)*x2978*x2980))+(((-1.0)*r22*x2979)));
evalcond[1]=(((x2971*x2973))+(((-1.0)*r12*x2979))+(((-1.0)*x2974*x2980)));
evalcond[2]=((((-1.0)*x2977*x2979))+(((-1.0)*r02*x2980))+((x2972*x2975)));
evalcond[3]=((1.0)+((x2971*x2977))+(((-1.0)*r02*x2979))+(((-1.0)*x2975*x2980)));
evalcond[4]=((((-1.0)*r12*x2980))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*x2973*x2979))+((x2972*x2974)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x2976*x2979))+(((-1.0)*r22*x2980))+(((-1.0)*cj11*cj12))+((x2972*x2978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2981=((1.0)*cj15);
CheckValue<IkReal> x2982=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2981))+(((-1.0)*r20*sj15)))),-1);
if(!x2982.valid){
continue;
}
CheckValue<IkReal> x2983 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2981))+((r11*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2983.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2982.value)))+(x2983.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2984=IKsin(j14);
IkReal x2985=IKcos(j14);
IkReal x2986=(r11*sj15);
IkReal x2987=(cj15*r10);
IkReal x2988=(cj15*r00);
IkReal x2989=(r21*sj15);
IkReal x2990=(r01*sj15);
IkReal x2991=(cj15*r20);
IkReal x2992=((1.0)*x2985);
IkReal x2993=((1.0)*x2984);
evalcond[0]=((((-1.0)*r22*x2992))+((x2984*x2989))+(((-1.0)*x2991*x2993)));
evalcond[1]=(((x2984*x2986))+(((-1.0)*x2987*x2993))+(((-1.0)*r12*x2992)));
evalcond[2]=((((-1.0)*r02*x2993))+(((-1.0)*x2990*x2992))+((x2985*x2988)));
evalcond[3]=((1.0)+(((-1.0)*x2988*x2993))+((x2984*x2990))+(((-1.0)*r02*x2992)));
evalcond[4]=((((-1.0)*r12*x2993))+((cj12*sj11))+(((-1.0)*x2986*x2992))+((cj11*sj12))+((x2985*x2987)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r22*x2993))+((x2985*x2991))+(((-1.0)*x2989*x2992))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x2994=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x2994.valid){
continue;
}
CheckValue<IkReal> x2995 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2995.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2994.value)))+(x2995.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2996=IKsin(j14);
IkReal x2997=IKcos(j14);
IkReal x2998=(r11*sj15);
IkReal x2999=(cj15*r10);
IkReal x3000=(cj15*r00);
IkReal x3001=(r21*sj15);
IkReal x3002=(r01*sj15);
IkReal x3003=(cj15*r20);
IkReal x3004=((1.0)*x2997);
IkReal x3005=((1.0)*x2996);
evalcond[0]=((((-1.0)*r22*x3004))+(((-1.0)*x3003*x3005))+((x2996*x3001)));
evalcond[1]=(((x2996*x2998))+(((-1.0)*r12*x3004))+(((-1.0)*x2999*x3005)));
evalcond[2]=((((-1.0)*x3002*x3004))+(((-1.0)*r02*x3005))+((x2997*x3000)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3004))+(((-1.0)*x3000*x3005))+((x2996*x3002)));
evalcond[4]=((((-1.0)*x2998*x3004))+((x2997*x2999))+(((-1.0)*r12*x3005))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r22*x3005))+((x2997*x3003))+(((-1.0)*cj11*cj12))+(((-1.0)*x3001*x3004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x3006=((-1.0)*px);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3006);
rxp1_1=(px*r21);
rxp1_2=(r11*x3006);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x3007=((-1.0)*px);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3007);
rxp1_1=(px*r21);
rxp1_2=(r11*x3007);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=((((-1.0)*r21*sj15))+((cj15*r20)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x3008=((-1.0)*px);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3008);
rxp1_1=(px*r21);
rxp1_2=(r11*x3008);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=(((cj15*r10))+(((-1.0)*r11*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x3011=IKPowWithIntegerCheck((((cj15*r10))+(((-1.0)*r11*sj15))),-1);
if(!x3011.valid){
continue;
}
IkReal x3009=x3011.value;
IkReal x3010=(sj10*x3009);
cj14array[0]=(((cj12*sj11*x3010))+((cj11*sj12*x3010)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x3012=IKsin(j14);
IkReal x3013=IKcos(j14);
IkReal x3014=(sj15*x3012);
IkReal x3015=((1.0)*x3013);
IkReal x3016=((1.0)*cj15*x3012);
evalcond[0]=((-1.0)*r02*x3012);
evalcond[1]=((((-1.0)*r02*x3015))+(((-1.0)*sj10)));
evalcond[2]=((((-1.0)*r20*x3016))+((r21*x3014)));
evalcond[3]=((((-1.0)*r10*x3016))+((r11*x3014)));
evalcond[4]=(((sj11*sj12))+((cj15*r20*x3013))+(((-1.0)*r21*sj15*x3015))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x3018=IKPowWithIntegerCheck(((((-1.0)*r21*sj15))+((cj15*r20))),-1);
if(!x3018.valid){
continue;
}
IkReal x3017=x3018.value;
cj14array[0]=(((cj11*cj12*x3017))+(((-1.0)*sj11*sj12*x3017)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x3019=IKsin(j14);
IkReal x3020=IKcos(j14);
IkReal x3021=(cj15*r10);
IkReal x3022=((1.0)*sj10);
IkReal x3023=(sj15*x3019);
IkReal x3024=((1.0)*x3020);
IkReal x3025=((1.0)*x3019);
evalcond[0]=((-1.0)*r02*x3019);
evalcond[1]=((((-1.0)*x3022))+(((-1.0)*r02*x3024)));
evalcond[2]=((((-1.0)*cj15*r20*x3025))+((r21*x3023)));
evalcond[3]=(((r11*x3023))+(((-1.0)*x3021*x3025)));
evalcond[4]=((((-1.0)*cj11*sj12*x3022))+(((-1.0)*r11*sj15*x3024))+((x3020*x3021))+(((-1.0)*cj12*sj11*x3022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x3026=IKPowWithIntegerCheck(r02,-1);
if(!x3026.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x3026.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x3027=IKsin(j14);
IkReal x3028=IKcos(j14);
IkReal x3029=(cj15*r10);
IkReal x3030=((1.0)*cj12);
IkReal x3031=(cj15*r20);
IkReal x3032=(sj15*x3027);
IkReal x3033=((1.0)*x3027);
IkReal x3034=((1.0)*sj15*x3028);
evalcond[0]=((-1.0)*r02*x3027);
evalcond[1]=(((r21*x3032))+(((-1.0)*x3031*x3033)));
evalcond[2]=((((-1.0)*x3029*x3033))+((r11*x3032)));
evalcond[3]=(((sj11*sj12))+((x3028*x3031))+(((-1.0)*r21*x3034))+(((-1.0)*cj11*x3030)));
evalcond[4]=(((x3028*x3029))+(((-1.0)*cj11*sj10*sj12))+(((-1.0)*sj10*sj11*x3030))+(((-1.0)*r11*x3034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3035=((1.0)*sj15);
CheckValue<IkReal> x3036=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3035))+(((-1.0)*cj15*r21)))),-1);
if(!x3036.valid){
continue;
}
CheckValue<IkReal> x3037 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x3035))+((cj15*r10*sj10))+(((-1.0)*r11*sj10*x3035))+((cj10*cj15*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3037.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3036.value)))+(x3037.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3038=IKsin(j14);
IkReal x3039=IKcos(j14);
IkReal x3040=(r11*sj15);
IkReal x3041=((1.0)*cj11);
IkReal x3042=((1.0)*sj10);
IkReal x3043=(cj12*sj11);
IkReal x3044=(r21*sj15);
IkReal x3045=(r01*sj15);
IkReal x3046=((1.0)*x3039);
IkReal x3047=((1.0)*x3038);
IkReal x3048=(cj15*x3039);
evalcond[0]=((((-1.0)*cj15*r20*x3047))+(((-1.0)*r22*x3046))+((x3038*x3044)));
evalcond[1]=((((-1.0)*cj15*r10*x3047))+(((-1.0)*r12*x3046))+cj10+((x3038*x3040)));
evalcond[2]=((((-1.0)*x3042))+(((-1.0)*cj15*r00*x3047))+((x3038*x3045))+(((-1.0)*r02*x3046)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r22*x3047))+(((-1.0)*cj12*x3041))+((r20*x3048))+(((-1.0)*x3044*x3046)));
evalcond[4]=((((-1.0)*x3045*x3046))+(((-1.0)*cj10*sj12*x3041))+(((-1.0)*cj10*x3043))+((r00*x3048))+(((-1.0)*r02*x3047)));
evalcond[5]=((((-1.0)*x3042*x3043))+(((-1.0)*sj10*sj12*x3041))+((r10*x3048))+(((-1.0)*r12*x3047))+(((-1.0)*x3040*x3046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3049=((1.0)*cj15);
CheckValue<IkReal> x3050=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3049))+(((-1.0)*r10*sj15)))),-1);
if(!x3050.valid){
continue;
}
CheckValue<IkReal> x3051 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x3049))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3051.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3050.value)))+(x3051.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3052=IKsin(j14);
IkReal x3053=IKcos(j14);
IkReal x3054=(r11*sj15);
IkReal x3055=((1.0)*cj11);
IkReal x3056=((1.0)*sj10);
IkReal x3057=(cj12*sj11);
IkReal x3058=(r21*sj15);
IkReal x3059=(r01*sj15);
IkReal x3060=((1.0)*x3053);
IkReal x3061=((1.0)*x3052);
IkReal x3062=(cj15*x3053);
evalcond[0]=((((-1.0)*r22*x3060))+(((-1.0)*cj15*r20*x3061))+((x3052*x3058)));
evalcond[1]=((((-1.0)*r12*x3060))+cj10+((x3052*x3054))+(((-1.0)*cj15*r10*x3061)));
evalcond[2]=((((-1.0)*cj15*r00*x3061))+(((-1.0)*r02*x3060))+((x3052*x3059))+(((-1.0)*x3056)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r22*x3061))+(((-1.0)*x3058*x3060))+((r20*x3062))+(((-1.0)*cj12*x3055)));
evalcond[4]=((((-1.0)*cj10*x3057))+(((-1.0)*cj10*sj12*x3055))+((r00*x3062))+(((-1.0)*r02*x3061))+(((-1.0)*x3059*x3060)));
evalcond[5]=((((-1.0)*x3054*x3060))+(((-1.0)*r12*x3061))+(((-1.0)*x3056*x3057))+(((-1.0)*sj10*sj12*x3055))+((r10*x3062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3063=((1.0)*cj15);
CheckValue<IkReal> x3064=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3063))+(((-1.0)*r00*sj15)))),-1);
if(!x3064.valid){
continue;
}
CheckValue<IkReal> x3065 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x3063)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3065.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3064.value)))+(x3065.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3066=IKsin(j14);
IkReal x3067=IKcos(j14);
IkReal x3068=(r11*sj15);
IkReal x3069=((1.0)*cj11);
IkReal x3070=((1.0)*sj10);
IkReal x3071=(cj12*sj11);
IkReal x3072=(r21*sj15);
IkReal x3073=(r01*sj15);
IkReal x3074=((1.0)*x3067);
IkReal x3075=((1.0)*x3066);
IkReal x3076=(cj15*x3067);
evalcond[0]=((((-1.0)*r22*x3074))+(((-1.0)*cj15*r20*x3075))+((x3066*x3072)));
evalcond[1]=(cj10+(((-1.0)*r12*x3074))+((x3066*x3068))+(((-1.0)*cj15*r10*x3075)));
evalcond[2]=((((-1.0)*cj15*r00*x3075))+(((-1.0)*r02*x3074))+(((-1.0)*x3070))+((x3066*x3073)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x3072*x3074))+(((-1.0)*r22*x3075))+((r20*x3076))+(((-1.0)*cj12*x3069)));
evalcond[4]=(((r00*x3076))+(((-1.0)*r02*x3075))+(((-1.0)*x3073*x3074))+(((-1.0)*cj10*x3071))+(((-1.0)*cj10*sj12*x3069)));
evalcond[5]=(((r10*x3076))+(((-1.0)*r12*x3075))+(((-1.0)*x3070*x3071))+(((-1.0)*x3068*x3074))+(((-1.0)*sj10*sj12*x3069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x3077=(((sj11*sj12))+(((-1.0)*cj11*cj12)));
j10eval[0]=x3077;
j10eval[1]=IKsign(x3077);
j10eval[2]=((IKabs((((cj15*r01))+((r00*sj15)))))+(IKabs((((cj15*r11))+((r10*sj15))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x3078=r21*r21;
IkReal x3079=cj15*cj15;
IkReal x3080=(cj11*cj12);
IkReal x3081=(r21*sj15);
IkReal x3082=(cj15*r20);
IkReal x3083=(sj11*sj12);
IkReal x3084=((((-1.0)*x3078))+(((2.0)*x3081*x3082))+(((-1.0)*x3079*(r20*r20)))+((x3078*x3079))+(((-1.0)*(r22*r22))));
j14eval[0]=x3084;
j14eval[1]=((IKabs(((((-1.0)*r22*x3080))+((r22*x3083)))))+(IKabs(((((-1.0)*x3080*x3081))+((x3081*x3083))+((x3080*x3082))+(((-1.0)*x3082*x3083))))));
j14eval[2]=IKsign(x3084);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j10eval[0]=(((sj11*sj12))+(((-1.0)*cj11*cj12)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((3.3845991639283)*py))))+IKsqr(((((3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.56068013982083)*px))+(((3.3845991639283)*py))), ((((3.3845991639283)*px))+(((1.56068013982083)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x3085=IKsin(j10);
IkReal x3086=IKcos(j10);
evalcond[0]=((((-0.11235)*x3085))+(((-1.0)*px))+(((0.24365)*x3086)));
evalcond[1]=((((0.11235)*x3086))+(((-1.0)*py))+(((0.24365)*x3085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x3087=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x3087;
j14eval[1]=IKsign(x3087);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x3088=((1.0)*cj15);
IkReal x3089=((((-1.0)*r00*sj15))+(((-1.0)*r01*x3088)));
j14eval[0]=x3089;
j14eval[1]=((IKabs((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x3088)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x3089);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x3090=((1.0)*cj15);
IkReal x3091=((((-1.0)*r01*x3090))+(((-1.0)*r00*sj15)));
j14eval[0]=x3091;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x3090))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x3091);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3092=((1.0)*cj15);
CheckValue<IkReal> x3093 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj10*x3092))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3093.valid){
continue;
}
CheckValue<IkReal> x3094=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3092))+(((-1.0)*r00*sj15)))),-1);
if(!x3094.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3093.value)+(((1.5707963267949)*(x3094.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3095=IKcos(j14);
IkReal x3096=IKsin(j14);
IkReal x3097=((1.0)*sj10);
IkReal x3098=(sj15*x3096);
IkReal x3099=((1.0)*x3095);
IkReal x3100=(sj15*x3095);
IkReal x3101=((1.0)*cj15*x3096);
evalcond[0]=(((r21*x3100))+(((-1.0)*cj15*r20*x3099))+((r22*x3096)));
evalcond[1]=((((-1.0)*r20*x3101))+(((-1.0)*r22*x3099))+((r21*x3098)));
evalcond[2]=((((-1.0)*r12*x3099))+(((-1.0)*r10*x3101))+cj10+((r11*x3098)));
evalcond[3]=((((-1.0)*cj15*r00*x3099))+((r02*x3096))+((r01*x3100))+(((-1.0)*cj10)));
evalcond[4]=((((-1.0)*cj15*r10*x3099))+((r11*x3100))+(((-1.0)*x3097))+((r12*x3096)));
evalcond[5]=(((r01*x3098))+(((-1.0)*r02*x3099))+(((-1.0)*x3097))+(((-1.0)*r00*x3101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3102=((1.0)*cj15);
CheckValue<IkReal> x3103 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x3102))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3103.valid){
continue;
}
CheckValue<IkReal> x3104=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3102))+(((-1.0)*r00*sj15)))),-1);
if(!x3104.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3103.value)+(((1.5707963267949)*(x3104.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3105=IKcos(j14);
IkReal x3106=IKsin(j14);
IkReal x3107=((1.0)*sj10);
IkReal x3108=(sj15*x3106);
IkReal x3109=((1.0)*x3105);
IkReal x3110=(sj15*x3105);
IkReal x3111=((1.0)*cj15*x3106);
evalcond[0]=(((r22*x3106))+(((-1.0)*cj15*r20*x3109))+((r21*x3110)));
evalcond[1]=((((-1.0)*r20*x3111))+((r21*x3108))+(((-1.0)*r22*x3109)));
evalcond[2]=(((r11*x3108))+(((-1.0)*r12*x3109))+cj10+(((-1.0)*r10*x3111)));
evalcond[3]=((((-1.0)*cj15*r00*x3109))+((r02*x3106))+(((-1.0)*cj10))+((r01*x3110)));
evalcond[4]=((((-1.0)*x3107))+(((-1.0)*cj15*r10*x3109))+((r12*x3106))+((r11*x3110)));
evalcond[5]=((((-1.0)*x3107))+(((-1.0)*r00*x3111))+((r01*x3108))+(((-1.0)*r02*x3109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x3112=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x3112.valid){
continue;
}
CheckValue<IkReal> x3113 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3113.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3112.value)))+(x3113.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3114=IKcos(j14);
IkReal x3115=IKsin(j14);
IkReal x3116=((1.0)*sj10);
IkReal x3117=(sj15*x3115);
IkReal x3118=((1.0)*x3114);
IkReal x3119=(sj15*x3114);
IkReal x3120=((1.0)*cj15*x3115);
evalcond[0]=(((r22*x3115))+(((-1.0)*cj15*r20*x3118))+((r21*x3119)));
evalcond[1]=((((-1.0)*r20*x3120))+((r21*x3117))+(((-1.0)*r22*x3118)));
evalcond[2]=((((-1.0)*r12*x3118))+cj10+(((-1.0)*r10*x3120))+((r11*x3117)));
evalcond[3]=(((r02*x3115))+(((-1.0)*cj10))+((r01*x3119))+(((-1.0)*cj15*r00*x3118)));
evalcond[4]=(((r12*x3115))+(((-1.0)*x3116))+(((-1.0)*cj15*r10*x3118))+((r11*x3119)));
evalcond[5]=((((-1.0)*r02*x3118))+(((-1.0)*x3116))+((r01*x3117))+(((-1.0)*r00*x3120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((3.3845991639283)*py))))+IKsqr(((((3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.56068013982083)*px))+(((3.3845991639283)*py))), ((((3.3845991639283)*px))+(((1.56068013982083)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x3121=IKsin(j10);
IkReal x3122=IKcos(j10);
evalcond[0]=((((0.24365)*x3122))+(((-1.0)*px))+(((-0.11235)*x3121)));
evalcond[1]=((((0.24365)*x3121))+(((-1.0)*py))+(((0.11235)*x3122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x3123=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x3123;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x3123);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x3124=((1.0)*cj15);
IkReal x3125=((((-1.0)*r11*x3124))+(((-1.0)*r10*sj15)));
j14eval[0]=x3125;
j14eval[1]=IKsign(x3125);
j14eval[2]=((IKabs((cj10*r22)))+(IKabs(((((-1.0)*cj10*r20*x3124))+((cj10*r21*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x3126=cj15*cj15;
IkReal x3127=(cj15*sj15);
IkReal x3128=(r01*r21);
IkReal x3129=((1.0)*r20);
IkReal x3130=((((-1.0)*r02*r22))+(((-1.0)*r00*x3126*x3129))+(((-1.0)*x3128))+((r00*r21*x3127))+((r01*r20*x3127))+((x3126*x3128)));
j14eval[0]=x3130;
j14eval[1]=((IKabs(((((-1.0)*cj10*cj15*x3129))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x3130);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3131=cj15*cj15;
IkReal x3132=(cj15*sj15);
IkReal x3133=(r01*r21);
IkReal x3134=((1.0)*r20);
CheckValue<IkReal> x3135=IKPowWithIntegerCheck(IKsign((((x3131*x3133))+(((-1.0)*r02*r22))+(((-1.0)*x3133))+((r00*r21*x3132))+((r01*r20*x3132))+(((-1.0)*r00*x3131*x3134)))),-1);
if(!x3135.valid){
continue;
}
CheckValue<IkReal> x3136 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*x3134))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3136.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3135.value)))+(x3136.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3137=IKcos(j14);
IkReal x3138=IKsin(j14);
IkReal x3139=(cj15*r00);
IkReal x3140=(cj15*r10);
IkReal x3141=(cj15*r20);
IkReal x3142=(sj15*x3138);
IkReal x3143=((1.0)*x3137);
IkReal x3144=(sj15*x3137);
IkReal x3145=((1.0)*x3138);
evalcond[0]=((((-1.0)*x3141*x3143))+((r22*x3138))+((r21*x3144)));
evalcond[1]=((((-1.0)*r22*x3143))+(((-1.0)*x3141*x3145))+((r21*x3142)));
evalcond[2]=(((r01*x3144))+cj10+((r02*x3138))+(((-1.0)*x3139*x3143)));
evalcond[3]=((((-1.0)*x3140*x3143))+((r11*x3144))+sj10+((r12*x3138)));
evalcond[4]=((((-1.0)*r12*x3143))+(((-1.0)*x3140*x3145))+((r11*x3142))+cj10);
evalcond[5]=(((r01*x3142))+(((-1.0)*r02*x3143))+(((-1.0)*sj10))+(((-1.0)*x3139*x3145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3146=((1.0)*cj15);
CheckValue<IkReal> x3147 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*r20*x3146))+((cj10*r21*sj15)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3147.valid){
continue;
}
CheckValue<IkReal> x3148=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3146))+(((-1.0)*r10*sj15)))),-1);
if(!x3148.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3147.value)+(((1.5707963267949)*(x3148.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3149=IKcos(j14);
IkReal x3150=IKsin(j14);
IkReal x3151=(cj15*r00);
IkReal x3152=(cj15*r10);
IkReal x3153=(cj15*r20);
IkReal x3154=(sj15*x3150);
IkReal x3155=((1.0)*x3149);
IkReal x3156=(sj15*x3149);
IkReal x3157=((1.0)*x3150);
evalcond[0]=((((-1.0)*x3153*x3155))+((r22*x3150))+((r21*x3156)));
evalcond[1]=((((-1.0)*r22*x3155))+(((-1.0)*x3153*x3157))+((r21*x3154)));
evalcond[2]=(((r02*x3150))+cj10+((r01*x3156))+(((-1.0)*x3151*x3155)));
evalcond[3]=(((r11*x3156))+((r12*x3150))+sj10+(((-1.0)*x3152*x3155)));
evalcond[4]=(((r11*x3154))+cj10+(((-1.0)*r12*x3155))+(((-1.0)*x3152*x3157)));
evalcond[5]=((((-1.0)*sj10))+((r01*x3154))+(((-1.0)*r02*x3155))+(((-1.0)*x3151*x3157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x3158 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3158.valid){
continue;
}
CheckValue<IkReal> x3159=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x3159.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3158.value)+(((1.5707963267949)*(x3159.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3160=IKcos(j14);
IkReal x3161=IKsin(j14);
IkReal x3162=(cj15*r00);
IkReal x3163=(cj15*r10);
IkReal x3164=(cj15*r20);
IkReal x3165=(sj15*x3161);
IkReal x3166=((1.0)*x3160);
IkReal x3167=(sj15*x3160);
IkReal x3168=((1.0)*x3161);
evalcond[0]=(((r22*x3161))+(((-1.0)*x3164*x3166))+((r21*x3167)));
evalcond[1]=((((-1.0)*x3164*x3168))+((r21*x3165))+(((-1.0)*r22*x3166)));
evalcond[2]=(((r02*x3161))+(((-1.0)*x3162*x3166))+cj10+((r01*x3167)));
evalcond[3]=((((-1.0)*x3163*x3166))+((r11*x3167))+((r12*x3161))+sj10);
evalcond[4]=((((-1.0)*r12*x3166))+(((-1.0)*x3163*x3168))+((r11*x3165))+cj10);
evalcond[5]=((((-1.0)*x3162*x3168))+((r01*x3165))+(((-1.0)*sj10))+(((-1.0)*r02*x3166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
evalcond[0]=((((-0.11235)*(IKsin(j10))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x3169=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x3169;
j14eval[1]=IKsign(x3169);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x3170=((1.0)*cj15);
IkReal x3171=((((-1.0)*r01*x3170))+(((-1.0)*r00*sj15)));
j14eval[0]=x3171;
j14eval[1]=((IKabs((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x3170)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x3171);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x3172=((1.0)*cj15);
IkReal x3173=((((-1.0)*r01*x3172))+(((-1.0)*r00*sj15)));
j14eval[0]=x3173;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x3172))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x3173);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3174=((1.0)*cj15);
CheckValue<IkReal> x3175 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj10*x3174))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3175.valid){
continue;
}
CheckValue<IkReal> x3176=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3174))+(((-1.0)*r00*sj15)))),-1);
if(!x3176.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3175.value)+(((1.5707963267949)*(x3176.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3177=IKcos(j14);
IkReal x3178=IKsin(j14);
IkReal x3179=((1.0)*sj10);
IkReal x3180=(sj15*x3178);
IkReal x3181=((1.0)*x3177);
IkReal x3182=(sj15*x3177);
IkReal x3183=((1.0)*cj15*x3178);
evalcond[0]=((((-1.0)*cj15*r20*x3181))+((r22*x3178))+((r21*x3182)));
evalcond[1]=((((-1.0)*r22*x3181))+(((-1.0)*r20*x3183))+((r21*x3180)));
evalcond[2]=(cj10+((r11*x3180))+(((-1.0)*r12*x3181))+(((-1.0)*r10*x3183)));
evalcond[3]=(((r01*x3182))+((r02*x3178))+(((-1.0)*cj15*r00*x3181))+(((-1.0)*cj10)));
evalcond[4]=((((-1.0)*cj15*r10*x3181))+(((-1.0)*x3179))+((r11*x3182))+((r12*x3178)));
evalcond[5]=((((-1.0)*r02*x3181))+((r01*x3180))+(((-1.0)*x3179))+(((-1.0)*r00*x3183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3184=((1.0)*cj15);
CheckValue<IkReal> x3185=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x3184)))),-1);
if(!x3185.valid){
continue;
}
CheckValue<IkReal> x3186 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x3184))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3186.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3185.value)))+(x3186.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3187=IKcos(j14);
IkReal x3188=IKsin(j14);
IkReal x3189=((1.0)*sj10);
IkReal x3190=(sj15*x3188);
IkReal x3191=((1.0)*x3187);
IkReal x3192=(sj15*x3187);
IkReal x3193=((1.0)*cj15*x3188);
evalcond[0]=(((r22*x3188))+((r21*x3192))+(((-1.0)*cj15*r20*x3191)));
evalcond[1]=((((-1.0)*r22*x3191))+((r21*x3190))+(((-1.0)*r20*x3193)));
evalcond[2]=((((-1.0)*r10*x3193))+((r11*x3190))+cj10+(((-1.0)*r12*x3191)));
evalcond[3]=(((r01*x3192))+(((-1.0)*cj15*r00*x3191))+(((-1.0)*cj10))+((r02*x3188)));
evalcond[4]=((((-1.0)*cj15*r10*x3191))+((r12*x3188))+((r11*x3192))+(((-1.0)*x3189)));
evalcond[5]=(((r01*x3190))+(((-1.0)*r02*x3191))+(((-1.0)*x3189))+(((-1.0)*r00*x3193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x3194=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x3194.valid){
continue;
}
CheckValue<IkReal> x3195 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3195.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3194.value)))+(x3195.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3196=IKcos(j14);
IkReal x3197=IKsin(j14);
IkReal x3198=((1.0)*sj10);
IkReal x3199=(sj15*x3197);
IkReal x3200=((1.0)*x3196);
IkReal x3201=(sj15*x3196);
IkReal x3202=((1.0)*cj15*x3197);
evalcond[0]=(((r22*x3197))+(((-1.0)*cj15*r20*x3200))+((r21*x3201)));
evalcond[1]=(((r21*x3199))+(((-1.0)*r20*x3202))+(((-1.0)*r22*x3200)));
evalcond[2]=((((-1.0)*r10*x3202))+(((-1.0)*r12*x3200))+((r11*x3199))+cj10);
evalcond[3]=((((-1.0)*cj15*r00*x3200))+((r01*x3201))+(((-1.0)*cj10))+((r02*x3197)));
evalcond[4]=(((r11*x3201))+(((-1.0)*cj15*r10*x3200))+((r12*x3197))+(((-1.0)*x3198)));
evalcond[5]=((((-1.0)*r02*x3200))+(((-1.0)*r00*x3202))+((r01*x3199))+(((-1.0)*x3198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
evalcond[0]=((((-0.11235)*(IKsin(j10))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x3203=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x3203;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x3203);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x3204=((1.0)*cj15);
IkReal x3205=((((-1.0)*r11*x3204))+(((-1.0)*r10*sj15)));
j14eval[0]=x3205;
j14eval[1]=IKsign(x3205);
j14eval[2]=((IKabs(((((-1.0)*cj10*r20*x3204))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x3206=cj15*cj15;
IkReal x3207=(cj15*sj15);
IkReal x3208=(r01*r21);
IkReal x3209=((1.0)*r20);
IkReal x3210=((((-1.0)*r02*r22))+(((-1.0)*r00*x3206*x3209))+((x3206*x3208))+((r00*r21*x3207))+(((-1.0)*x3208))+((r01*r20*x3207)));
j14eval[0]=x3210;
j14eval[1]=((IKabs(((((-1.0)*cj10*cj15*x3209))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x3210);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3211=cj15*cj15;
IkReal x3212=(cj15*sj15);
IkReal x3213=(r01*r21);
IkReal x3214=((1.0)*r20);
CheckValue<IkReal> x3215=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((r01*r20*x3212))+((x3211*x3213))+((r00*r21*x3212))+(((-1.0)*x3213))+(((-1.0)*r00*x3211*x3214)))),-1);
if(!x3215.valid){
continue;
}
CheckValue<IkReal> x3216 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*x3214))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3216.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3215.value)))+(x3216.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3217=IKcos(j14);
IkReal x3218=IKsin(j14);
IkReal x3219=(cj15*r00);
IkReal x3220=(cj15*r10);
IkReal x3221=(cj15*r20);
IkReal x3222=(sj15*x3218);
IkReal x3223=((1.0)*x3217);
IkReal x3224=(sj15*x3217);
IkReal x3225=((1.0)*x3218);
evalcond[0]=(((r22*x3218))+((r21*x3224))+(((-1.0)*x3221*x3223)));
evalcond[1]=(((r21*x3222))+(((-1.0)*r22*x3223))+(((-1.0)*x3221*x3225)));
evalcond[2]=(((r01*x3224))+cj10+(((-1.0)*x3219*x3223))+((r02*x3218)));
evalcond[3]=(((r11*x3224))+((r12*x3218))+sj10+(((-1.0)*x3220*x3223)));
evalcond[4]=(((r11*x3222))+cj10+(((-1.0)*x3220*x3225))+(((-1.0)*r12*x3223)));
evalcond[5]=((((-1.0)*r02*x3223))+((r01*x3222))+(((-1.0)*sj10))+(((-1.0)*x3219*x3225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3226=((1.0)*cj15);
CheckValue<IkReal> x3227=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj15))+(((-1.0)*r11*x3226)))),-1);
if(!x3227.valid){
continue;
}
CheckValue<IkReal> x3228 = IKatan2WithCheck(IkReal((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x3226)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3228.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3227.value)))+(x3228.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3229=IKcos(j14);
IkReal x3230=IKsin(j14);
IkReal x3231=(cj15*r00);
IkReal x3232=(cj15*r10);
IkReal x3233=(cj15*r20);
IkReal x3234=(sj15*x3230);
IkReal x3235=((1.0)*x3229);
IkReal x3236=(sj15*x3229);
IkReal x3237=((1.0)*x3230);
evalcond[0]=(((r22*x3230))+(((-1.0)*x3233*x3235))+((r21*x3236)));
evalcond[1]=((((-1.0)*x3233*x3237))+(((-1.0)*r22*x3235))+((r21*x3234)));
evalcond[2]=(((r01*x3236))+(((-1.0)*x3231*x3235))+cj10+((r02*x3230)));
evalcond[3]=(((r11*x3236))+((r12*x3230))+(((-1.0)*x3232*x3235))+sj10);
evalcond[4]=(((r11*x3234))+(((-1.0)*r12*x3235))+cj10+(((-1.0)*x3232*x3237)));
evalcond[5]=((((-1.0)*r02*x3235))+((r01*x3234))+(((-1.0)*x3231*x3237))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x3238 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3238.valid){
continue;
}
CheckValue<IkReal> x3239=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x3239.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3238.value)+(((1.5707963267949)*(x3239.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3240=IKcos(j14);
IkReal x3241=IKsin(j14);
IkReal x3242=(cj15*r00);
IkReal x3243=(cj15*r10);
IkReal x3244=(cj15*r20);
IkReal x3245=(sj15*x3241);
IkReal x3246=((1.0)*x3240);
IkReal x3247=(sj15*x3240);
IkReal x3248=((1.0)*x3241);
evalcond[0]=(((r22*x3241))+((r21*x3247))+(((-1.0)*x3244*x3246)));
evalcond[1]=(((r21*x3245))+(((-1.0)*x3244*x3248))+(((-1.0)*r22*x3246)));
evalcond[2]=(((r01*x3247))+cj10+((r02*x3241))+(((-1.0)*x3242*x3246)));
evalcond[3]=((((-1.0)*x3243*x3246))+sj10+((r12*x3241))+((r11*x3247)));
evalcond[4]=((((-1.0)*x3243*x3248))+(((-1.0)*r12*x3246))+cj10+((r11*x3245)));
evalcond[5]=(((r01*x3245))+(((-1.0)*r02*x3246))+(((-1.0)*sj10))+(((-1.0)*x3242*x3248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((-3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))))+IKsqr(((((-3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))), ((((-3.3845991639283)*px))+(((1.56068013982083)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x3249=IKcos(j10);
IkReal x3250=IKsin(j10);
evalcond[0]=((((-0.11235)*x3250))+(((-1.0)*px))+(((-0.24365)*x3249)));
evalcond[1]=((((-0.24365)*x3250))+(((-1.0)*py))+(((0.11235)*x3249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x3251=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x3251;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x3251);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x3252=((1.0)*cj15);
IkReal x3253=((((-1.0)*r10*sj15))+(((-1.0)*r11*x3252)));
j14eval[0]=x3253;
j14eval[1]=IKsign(x3253);
j14eval[2]=((IKabs((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x3252)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x3254=cj15*cj15;
IkReal x3255=(cj15*sj15);
IkReal x3256=(r01*r21);
IkReal x3257=((1.0)*r20);
IkReal x3258=((((-1.0)*r02*r22))+(((-1.0)*r00*x3254*x3257))+(((-1.0)*x3256))+((x3254*x3256))+((r01*r20*x3255))+((r00*r21*x3255)));
j14eval[0]=x3258;
j14eval[1]=((IKabs((((cj10*r21*sj15))+(((-1.0)*cj10*cj15*x3257)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x3258);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3259=cj15*cj15;
IkReal x3260=(cj15*sj15);
IkReal x3261=(r01*r21);
IkReal x3262=((1.0)*r20);
CheckValue<IkReal> x3263 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*x3262))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3263.valid){
continue;
}
CheckValue<IkReal> x3264=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3259*x3262))+(((-1.0)*r02*r22))+(((-1.0)*x3261))+((r01*r20*x3260))+((r00*r21*x3260))+((x3259*x3261)))),-1);
if(!x3264.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3263.value)+(((1.5707963267949)*(x3264.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3265=IKcos(j14);
IkReal x3266=IKsin(j14);
IkReal x3267=(cj15*r00);
IkReal x3268=(cj15*r10);
IkReal x3269=(cj15*r20);
IkReal x3270=(sj15*x3266);
IkReal x3271=((1.0)*x3265);
IkReal x3272=(sj15*x3265);
IkReal x3273=((1.0)*x3266);
evalcond[0]=(((r21*x3272))+(((-1.0)*x3269*x3271))+((r22*x3266)));
evalcond[1]=(((r21*x3270))+(((-1.0)*x3269*x3273))+(((-1.0)*r22*x3271)));
evalcond[2]=(((r01*x3272))+cj10+((r02*x3266))+(((-1.0)*x3267*x3271)));
evalcond[3]=((((-1.0)*x3268*x3271))+sj10+((r11*x3272))+((r12*x3266)));
evalcond[4]=((((-1.0)*x3268*x3273))+(((-1.0)*r12*x3271))+cj10+((r11*x3270)));
evalcond[5]=(((r01*x3270))+(((-1.0)*sj10))+(((-1.0)*x3267*x3273))+(((-1.0)*r02*x3271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3274=((1.0)*cj15);
CheckValue<IkReal> x3275=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3274))+(((-1.0)*r10*sj15)))),-1);
if(!x3275.valid){
continue;
}
CheckValue<IkReal> x3276 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*r20*x3274))+((cj10*r21*sj15)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3276.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3275.value)))+(x3276.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3277=IKcos(j14);
IkReal x3278=IKsin(j14);
IkReal x3279=(cj15*r00);
IkReal x3280=(cj15*r10);
IkReal x3281=(cj15*r20);
IkReal x3282=(sj15*x3278);
IkReal x3283=((1.0)*x3277);
IkReal x3284=(sj15*x3277);
IkReal x3285=((1.0)*x3278);
evalcond[0]=((((-1.0)*x3281*x3283))+((r21*x3284))+((r22*x3278)));
evalcond[1]=((((-1.0)*x3281*x3285))+(((-1.0)*r22*x3283))+((r21*x3282)));
evalcond[2]=((((-1.0)*x3279*x3283))+cj10+((r02*x3278))+((r01*x3284)));
evalcond[3]=((((-1.0)*x3280*x3283))+sj10+((r12*x3278))+((r11*x3284)));
evalcond[4]=((((-1.0)*r12*x3283))+(((-1.0)*x3280*x3285))+cj10+((r11*x3282)));
evalcond[5]=((((-1.0)*x3279*x3285))+(((-1.0)*sj10))+(((-1.0)*r02*x3283))+((r01*x3282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x3286 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3286.valid){
continue;
}
CheckValue<IkReal> x3287=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x3287.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3286.value)+(((1.5707963267949)*(x3287.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3288=IKcos(j14);
IkReal x3289=IKsin(j14);
IkReal x3290=(cj15*r00);
IkReal x3291=(cj15*r10);
IkReal x3292=(cj15*r20);
IkReal x3293=(sj15*x3289);
IkReal x3294=((1.0)*x3288);
IkReal x3295=(sj15*x3288);
IkReal x3296=((1.0)*x3289);
evalcond[0]=((((-1.0)*x3292*x3294))+((r22*x3289))+((r21*x3295)));
evalcond[1]=((((-1.0)*r22*x3294))+(((-1.0)*x3292*x3296))+((r21*x3293)));
evalcond[2]=(((r01*x3295))+((r02*x3289))+cj10+(((-1.0)*x3290*x3294)));
evalcond[3]=((((-1.0)*x3291*x3294))+sj10+((r11*x3295))+((r12*x3289)));
evalcond[4]=((((-1.0)*r12*x3294))+(((-1.0)*x3291*x3296))+cj10+((r11*x3293)));
evalcond[5]=(((r01*x3293))+(((-1.0)*r02*x3294))+(((-1.0)*sj10))+(((-1.0)*x3290*x3296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((-3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))))+IKsqr(((((-3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))), ((((-3.3845991639283)*px))+(((1.56068013982083)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x3297=IKcos(j10);
IkReal x3298=IKsin(j10);
evalcond[0]=((((-0.11235)*x3298))+(((-1.0)*px))+(((-0.24365)*x3297)));
evalcond[1]=((((0.11235)*x3297))+(((-1.0)*py))+(((-0.24365)*x3298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x3299=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x3299;
j14eval[1]=IKsign(x3299);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x3300=((1.0)*cj15);
IkReal x3301=((((-1.0)*r00*sj15))+(((-1.0)*r01*x3300)));
j14eval[0]=x3301;
j14eval[1]=((IKabs((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x3300)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x3301);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x3302=((1.0)*cj15);
IkReal x3303=((((-1.0)*r00*sj15))+(((-1.0)*r01*x3302)));
j14eval[0]=x3303;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x3302))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x3303);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3304=((1.0)*cj15);
CheckValue<IkReal> x3305 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj10*x3304))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3305.valid){
continue;
}
CheckValue<IkReal> x3306=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x3304)))),-1);
if(!x3306.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3305.value)+(((1.5707963267949)*(x3306.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3307=IKcos(j14);
IkReal x3308=IKsin(j14);
IkReal x3309=((1.0)*sj10);
IkReal x3310=(sj15*x3308);
IkReal x3311=((1.0)*x3307);
IkReal x3312=(sj15*x3307);
IkReal x3313=((1.0)*cj15*x3308);
evalcond[0]=((((-1.0)*cj15*r20*x3311))+((r21*x3312))+((r22*x3308)));
evalcond[1]=(((r21*x3310))+(((-1.0)*r20*x3313))+(((-1.0)*r22*x3311)));
evalcond[2]=(((r11*x3310))+cj10+(((-1.0)*r12*x3311))+(((-1.0)*r10*x3313)));
evalcond[3]=((((-1.0)*cj15*r00*x3311))+((r02*x3308))+(((-1.0)*cj10))+((r01*x3312)));
evalcond[4]=((((-1.0)*cj15*r10*x3311))+(((-1.0)*x3309))+((r11*x3312))+((r12*x3308)));
evalcond[5]=((((-1.0)*x3309))+(((-1.0)*r02*x3311))+(((-1.0)*r00*x3313))+((r01*x3310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3314=((1.0)*cj15);
CheckValue<IkReal> x3315=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x3314)))),-1);
if(!x3315.valid){
continue;
}
CheckValue<IkReal> x3316 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x3314)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3316.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3315.value)))+(x3316.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3317=IKcos(j14);
IkReal x3318=IKsin(j14);
IkReal x3319=((1.0)*sj10);
IkReal x3320=(sj15*x3318);
IkReal x3321=((1.0)*x3317);
IkReal x3322=(sj15*x3317);
IkReal x3323=((1.0)*cj15*x3318);
evalcond[0]=(((r22*x3318))+((r21*x3322))+(((-1.0)*cj15*r20*x3321)));
evalcond[1]=((((-1.0)*r20*x3323))+((r21*x3320))+(((-1.0)*r22*x3321)));
evalcond[2]=(((r11*x3320))+(((-1.0)*r10*x3323))+cj10+(((-1.0)*r12*x3321)));
evalcond[3]=(((r01*x3322))+((r02*x3318))+(((-1.0)*cj10))+(((-1.0)*cj15*r00*x3321)));
evalcond[4]=((((-1.0)*cj15*r10*x3321))+((r11*x3322))+(((-1.0)*x3319))+((r12*x3318)));
evalcond[5]=((((-1.0)*r02*x3321))+((r01*x3320))+(((-1.0)*x3319))+(((-1.0)*r00*x3323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x3324=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x3324.valid){
continue;
}
CheckValue<IkReal> x3325 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3325.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3324.value)))+(x3325.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3326=IKcos(j14);
IkReal x3327=IKsin(j14);
IkReal x3328=((1.0)*sj10);
IkReal x3329=(sj15*x3327);
IkReal x3330=((1.0)*x3326);
IkReal x3331=(sj15*x3326);
IkReal x3332=((1.0)*cj15*x3327);
evalcond[0]=(((r22*x3327))+((r21*x3331))+(((-1.0)*cj15*r20*x3330)));
evalcond[1]=((((-1.0)*r20*x3332))+(((-1.0)*r22*x3330))+((r21*x3329)));
evalcond[2]=(((r11*x3329))+cj10+(((-1.0)*r10*x3332))+(((-1.0)*r12*x3330)));
evalcond[3]=((((-1.0)*cj15*r00*x3330))+((r01*x3331))+(((-1.0)*cj10))+((r02*x3327)));
evalcond[4]=((((-1.0)*x3328))+((r12*x3327))+(((-1.0)*cj15*r10*x3330))+((r11*x3331)));
evalcond[5]=((((-1.0)*x3328))+((r01*x3329))+(((-1.0)*r02*x3330))+(((-1.0)*r00*x3332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
evalcond[0]=((((-0.11235)*(IKsin(j10))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x3333=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x3333;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x3333);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x3334=((1.0)*cj15);
IkReal x3335=((((-1.0)*r10*sj15))+(((-1.0)*r11*x3334)));
j14eval[0]=x3335;
j14eval[1]=IKsign(x3335);
j14eval[2]=((IKabs(((((-1.0)*cj10*r20*x3334))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x3336=cj15*cj15;
IkReal x3337=(cj15*sj15);
IkReal x3338=(r01*r21);
IkReal x3339=((1.0)*r20);
IkReal x3340=(((r00*r21*x3337))+(((-1.0)*r02*r22))+((r01*r20*x3337))+(((-1.0)*r00*x3336*x3339))+(((-1.0)*x3338))+((x3336*x3338)));
j14eval[0]=x3340;
j14eval[1]=((IKabs(((((-1.0)*cj10*cj15*x3339))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x3340);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3341=cj15*cj15;
IkReal x3342=(cj15*sj15);
IkReal x3343=(r01*r21);
IkReal x3344=((1.0)*r20);
CheckValue<IkReal> x3345 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*x3344))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3345.valid){
continue;
}
CheckValue<IkReal> x3346=IKPowWithIntegerCheck(IKsign((((r01*r20*x3342))+(((-1.0)*x3343))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3341*x3344))+((r00*r21*x3342))+((x3341*x3343)))),-1);
if(!x3346.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3345.value)+(((1.5707963267949)*(x3346.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3347=IKcos(j14);
IkReal x3348=IKsin(j14);
IkReal x3349=(cj15*r00);
IkReal x3350=(cj15*r10);
IkReal x3351=(cj15*r20);
IkReal x3352=(sj15*x3348);
IkReal x3353=((1.0)*x3347);
IkReal x3354=(sj15*x3347);
IkReal x3355=((1.0)*x3348);
evalcond[0]=(((r22*x3348))+(((-1.0)*x3351*x3353))+((r21*x3354)));
evalcond[1]=((((-1.0)*x3351*x3355))+((r21*x3352))+(((-1.0)*r22*x3353)));
evalcond[2]=((((-1.0)*x3349*x3353))+((r01*x3354))+((r02*x3348))+cj10);
evalcond[3]=(((r11*x3354))+sj10+(((-1.0)*x3350*x3353))+((r12*x3348)));
evalcond[4]=(((r11*x3352))+cj10+(((-1.0)*x3350*x3355))+(((-1.0)*r12*x3353)));
evalcond[5]=((((-1.0)*x3349*x3355))+(((-1.0)*r02*x3353))+((r01*x3352))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3356=((1.0)*cj15);
CheckValue<IkReal> x3357 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*r20*x3356))+((cj10*r21*sj15)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3357.valid){
continue;
}
CheckValue<IkReal> x3358=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3356))+(((-1.0)*r10*sj15)))),-1);
if(!x3358.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3357.value)+(((1.5707963267949)*(x3358.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3359=IKcos(j14);
IkReal x3360=IKsin(j14);
IkReal x3361=(cj15*r00);
IkReal x3362=(cj15*r10);
IkReal x3363=(cj15*r20);
IkReal x3364=(sj15*x3360);
IkReal x3365=((1.0)*x3359);
IkReal x3366=(sj15*x3359);
IkReal x3367=((1.0)*x3360);
evalcond[0]=(((r22*x3360))+((r21*x3366))+(((-1.0)*x3363*x3365)));
evalcond[1]=(((r21*x3364))+(((-1.0)*r22*x3365))+(((-1.0)*x3363*x3367)));
evalcond[2]=((((-1.0)*x3361*x3365))+((r02*x3360))+((r01*x3366))+cj10);
evalcond[3]=((((-1.0)*x3362*x3365))+sj10+((r12*x3360))+((r11*x3366)));
evalcond[4]=((((-1.0)*r12*x3365))+(((-1.0)*x3362*x3367))+cj10+((r11*x3364)));
evalcond[5]=((((-1.0)*x3361*x3367))+((r01*x3364))+(((-1.0)*r02*x3365))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x3368 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3368.valid){
continue;
}
CheckValue<IkReal> x3369=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x3369.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3368.value)+(((1.5707963267949)*(x3369.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3370=IKcos(j14);
IkReal x3371=IKsin(j14);
IkReal x3372=(cj15*r00);
IkReal x3373=(cj15*r10);
IkReal x3374=(cj15*r20);
IkReal x3375=(sj15*x3371);
IkReal x3376=((1.0)*x3370);
IkReal x3377=(sj15*x3370);
IkReal x3378=((1.0)*x3371);
evalcond[0]=((((-1.0)*x3374*x3376))+((r22*x3371))+((r21*x3377)));
evalcond[1]=((((-1.0)*r22*x3376))+(((-1.0)*x3374*x3378))+((r21*x3375)));
evalcond[2]=(((r01*x3377))+((r02*x3371))+cj10+(((-1.0)*x3372*x3376)));
evalcond[3]=(((r12*x3371))+(((-1.0)*x3373*x3376))+sj10+((r11*x3377)));
evalcond[4]=((((-1.0)*x3373*x3378))+cj10+(((-1.0)*r12*x3376))+((r11*x3375)));
evalcond[5]=(((r01*x3375))+(((-1.0)*r02*x3376))+(((-1.0)*sj10))+(((-1.0)*x3372*x3378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
evalcond[0]=((((-0.11235)*(IKsin(j10))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x3379=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x3379;
j14eval[1]=IKsign(x3379);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x3380=((1.0)*cj15);
IkReal x3381=((((-1.0)*r00*sj15))+(((-1.0)*r01*x3380)));
j14eval[0]=x3381;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x3380))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x3381);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x3382=((1.0)*cj15);
IkReal x3383=((((-1.0)*r00*sj15))+(((-1.0)*r01*x3382)));
j14eval[0]=x3383;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x3382))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x3383);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3384=((1.0)*cj15);
CheckValue<IkReal> x3385 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj10*x3384))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3385.valid){
continue;
}
CheckValue<IkReal> x3386=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x3384)))),-1);
if(!x3386.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3385.value)+(((1.5707963267949)*(x3386.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3387=IKcos(j14);
IkReal x3388=IKsin(j14);
IkReal x3389=((1.0)*sj10);
IkReal x3390=(sj15*x3388);
IkReal x3391=((1.0)*x3387);
IkReal x3392=(sj15*x3387);
IkReal x3393=((1.0)*cj15*x3388);
evalcond[0]=(((r21*x3392))+((r22*x3388))+(((-1.0)*cj15*r20*x3391)));
evalcond[1]=((((-1.0)*r22*x3391))+((r21*x3390))+(((-1.0)*r20*x3393)));
evalcond[2]=(cj10+((r11*x3390))+(((-1.0)*r10*x3393))+(((-1.0)*r12*x3391)));
evalcond[3]=((((-1.0)*cj15*r00*x3391))+((r01*x3392))+((r02*x3388))+(((-1.0)*cj10)));
evalcond[4]=((((-1.0)*cj15*r10*x3391))+((r11*x3392))+((r12*x3388))+(((-1.0)*x3389)));
evalcond[5]=(((r01*x3390))+(((-1.0)*r02*x3391))+(((-1.0)*x3389))+(((-1.0)*r00*x3393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3394=((1.0)*cj15);
CheckValue<IkReal> x3395 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x3394))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3395.valid){
continue;
}
CheckValue<IkReal> x3396=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3394))+(((-1.0)*r00*sj15)))),-1);
if(!x3396.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3395.value)+(((1.5707963267949)*(x3396.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3397=IKcos(j14);
IkReal x3398=IKsin(j14);
IkReal x3399=((1.0)*sj10);
IkReal x3400=(sj15*x3398);
IkReal x3401=((1.0)*x3397);
IkReal x3402=(sj15*x3397);
IkReal x3403=((1.0)*cj15*x3398);
evalcond[0]=((((-1.0)*cj15*r20*x3401))+((r21*x3402))+((r22*x3398)));
evalcond[1]=((((-1.0)*r20*x3403))+((r21*x3400))+(((-1.0)*r22*x3401)));
evalcond[2]=(((r11*x3400))+(((-1.0)*r12*x3401))+cj10+(((-1.0)*r10*x3403)));
evalcond[3]=((((-1.0)*cj15*r00*x3401))+((r02*x3398))+((r01*x3402))+(((-1.0)*cj10)));
evalcond[4]=(((r11*x3402))+(((-1.0)*x3399))+((r12*x3398))+(((-1.0)*cj15*r10*x3401)));
evalcond[5]=((((-1.0)*r00*x3403))+(((-1.0)*r02*x3401))+(((-1.0)*x3399))+((r01*x3400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x3404=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x3404.valid){
continue;
}
CheckValue<IkReal> x3405 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3405.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3404.value)))+(x3405.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3406=IKcos(j14);
IkReal x3407=IKsin(j14);
IkReal x3408=((1.0)*sj10);
IkReal x3409=(sj15*x3407);
IkReal x3410=((1.0)*x3406);
IkReal x3411=(sj15*x3406);
IkReal x3412=((1.0)*cj15*x3407);
evalcond[0]=(((r22*x3407))+(((-1.0)*cj15*r20*x3410))+((r21*x3411)));
evalcond[1]=((((-1.0)*r22*x3410))+(((-1.0)*r20*x3412))+((r21*x3409)));
evalcond[2]=(((r11*x3409))+cj10+(((-1.0)*r12*x3410))+(((-1.0)*r10*x3412)));
evalcond[3]=(((r02*x3407))+(((-1.0)*cj15*r00*x3410))+((r01*x3411))+(((-1.0)*cj10)));
evalcond[4]=((((-1.0)*cj15*r10*x3410))+((r11*x3411))+((r12*x3407))+(((-1.0)*x3408)));
evalcond[5]=((((-1.0)*r02*x3410))+((r01*x3409))+(((-1.0)*x3408))+(((-1.0)*r00*x3412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10, j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3413=(sj11*sj12);
IkReal x3414=(cj11*cj12);
IkReal x3415=((20000.0)*px);
IkReal x3416=((4873.0)*cj11);
IkReal x3417=(r00*sj15);
IkReal x3418=(cj15*r01);
IkReal x3419=((5972.0)*x3418);
CheckValue<IkReal> x3420=IKPowWithIntegerCheck(((((2247.0)*x3413))+(((-2247.0)*x3414))),-1);
if(!x3420.valid){
continue;
}
CheckValue<IkReal> x3421=IKPowWithIntegerCheck(((((-1.0)*x3414))+x3413),-1);
if(!x3421.valid){
continue;
}
if( IKabs(((x3420.value)*(((((-5972.0)*x3413*x3417))+((x3414*x3415))+((x3414*x3419))+(((5972.0)*x3414*x3417))+((x3416*x3418))+((x3416*x3417))+(((-1.0)*x3413*x3415))+(((-1.0)*x3413*x3419)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3421.value)*((x3417+x3418)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3420.value)*(((((-5972.0)*x3413*x3417))+((x3414*x3415))+((x3414*x3419))+(((5972.0)*x3414*x3417))+((x3416*x3418))+((x3416*x3417))+(((-1.0)*x3413*x3415))+(((-1.0)*x3413*x3419))))))+IKsqr(((x3421.value)*((x3417+x3418))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x3420.value)*(((((-5972.0)*x3413*x3417))+((x3414*x3415))+((x3414*x3419))+(((5972.0)*x3414*x3417))+((x3416*x3418))+((x3416*x3417))+(((-1.0)*x3413*x3415))+(((-1.0)*x3413*x3419))))), ((x3421.value)*((x3417+x3418))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x3422=IKcos(j10);
IkReal x3423=IKsin(j10);
IkReal x3424=(sj11*sj12);
IkReal x3425=((1.0)*cj15);
IkReal x3426=(cj11*cj12);
IkReal x3427=(r00*sj15);
IkReal x3428=(r10*sj15);
IkReal x3429=((0.08535)*cj15);
IkReal x3430=(cj11*x3423);
IkReal x3431=((0.21325)*x3422);
evalcond[0]=((((-1.0)*x3422*x3426))+(((-1.0)*r01*x3425))+((x3422*x3424))+(((-1.0)*x3427)));
evalcond[1]=((((-1.0)*r11*x3425))+(((-1.0)*x3428))+((x3423*x3424))+(((-1.0)*x3423*x3426)));
evalcond[2]=((((-0.11235)*x3423))+(((-1.0)*x3424*x3431))+(((-1.0)*r01*x3429))+(((-1.0)*px))+(((0.24365)*cj11*x3422))+(((-0.08535)*x3427))+((x3426*x3431)));
evalcond[3]=((((-1.0)*r11*x3429))+(((0.24365)*x3430))+(((-1.0)*py))+(((-0.21325)*x3423*x3424))+(((-0.08535)*x3428))+(((0.21325)*x3423*x3426))+(((0.11235)*x3422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x3432=((1.0)*cj15);
IkReal x3433=((((-1.0)*r01*x3432))+(((-1.0)*r00*sj15)));
j14eval[0]=x3433;
j14eval[1]=((IKabs((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x3432)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x3433);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x3434=((1.0)*cj15);
IkReal x3435=((((-1.0)*r11*x3434))+(((-1.0)*r10*sj15)));
j14eval[0]=x3435;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x3434))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x3435);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x3436=((1.0)*sj15);
IkReal x3437=((((-1.0)*cj15*r21))+(((-1.0)*r20*x3436)));
j14eval[0]=x3437;
j14eval[1]=((IKabs(((((-1.0)*cj10*r01*x3436))+((cj15*r10*sj10))+(((-1.0)*r11*sj10*x3436))+((cj10*cj15*r00)))))+(IKabs(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02))))));
j14eval[2]=IKsign(x3437);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3438=((-1.0)*r20);
IkReal x3440 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3440)==0){
continue;
}
IkReal x3439=pow(x3440,-0.5);
CheckValue<IkReal> x3441 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3438),IKFAST_ATAN2_MAGTHRESH);
if(!x3441.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3441.value));
IkReal gconst97=(r21*x3439);
IkReal gconst98=(x3438*x3439);
CheckValue<IkReal> x3442 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3442.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x3442.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x3443=((-1.0)*r20);
IkReal x3444=x3439;
CheckValue<IkReal> x3446 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3443),IKFAST_ATAN2_MAGTHRESH);
if(!x3446.valid){
continue;
}
IkReal x3445=((-1.0)*(x3446.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst97;
cj15=gconst98;
j15=x3445;
IkReal gconst96=x3445;
IkReal gconst97=(r21*x3444);
IkReal gconst98=(x3443*x3444);
j14eval[0]=cj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x3447=((-1.0)*r20);
IkReal x3448=x3439;
CheckValue<IkReal> x3450 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3447),IKFAST_ATAN2_MAGTHRESH);
if(!x3450.valid){
continue;
}
IkReal x3449=((-1.0)*(x3450.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst97;
cj15=gconst98;
j15=x3449;
IkReal gconst96=x3449;
IkReal gconst97=(r21*x3448);
IkReal gconst98=(x3447*x3448);
j14eval[0]=sj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x3451=((-1.0)*r20);
IkReal x3452=x3439;
CheckValue<IkReal> x3454 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3451),IKFAST_ATAN2_MAGTHRESH);
if(!x3454.valid){
continue;
}
IkReal x3453=((-1.0)*(x3454.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst97;
cj15=gconst98;
j15=x3453;
IkReal gconst96=x3453;
IkReal gconst97=(r21*x3452);
IkReal gconst98=(x3451*x3452);
IkReal x3455=((1.0)*(r22*r22));
CheckValue<IkReal> x3459=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3455))),-1);
if(!x3459.valid){
continue;
}
IkReal x3456=x3459.value;
IkReal x3457=((1.0)*x3456);
IkReal x3458=((((-1.0)*x3455))+(((-1.0)*x3457*(r20*r20*r20*r20)))+(((-1.0)*x3457*(r21*r21*r21*r21)))+(((-2.0)*x3456*(r20*r20)*(r21*r21))));
j14eval[0]=x3458;
j14eval[1]=IKsign(x3458);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3460=(gconst98*r20);
IkReal x3461=(cj11*cj12);
IkReal x3462=(sj11*sj12);
IkReal x3463=(gconst97*r21);
CheckValue<IkReal> x3464=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3460*x3460)))+(((2.0)*x3460*x3463))+(((-1.0)*(x3463*x3463)))+(((-1.0)*(r22*r22))))),-1);
if(!x3464.valid){
continue;
}
CheckValue<IkReal> x3465 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3461))+((r22*x3462)))),IkReal((((x3460*x3461))+((x3462*x3463))+(((-1.0)*x3461*x3463))+(((-1.0)*x3460*x3462)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3465.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3464.value)))+(x3465.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3466=IKsin(j14);
IkReal x3467=IKcos(j14);
IkReal x3468=(gconst98*r10);
IkReal x3469=((1.0)*cj11);
IkReal x3470=((1.0)*sj10);
IkReal x3471=(gconst97*r21);
IkReal x3472=(cj12*sj11);
IkReal x3473=((1.0)*x3467);
IkReal x3474=(gconst97*x3466);
IkReal x3475=(gconst97*x3467);
IkReal x3476=((1.0)*gconst98*x3466);
evalcond[0]=((((-1.0)*r20*x3476))+(((-1.0)*r22*x3473))+((x3466*x3471)));
evalcond[1]=((((-1.0)*r12*x3473))+(((-1.0)*x3466*x3468))+cj10+((r11*x3474)));
evalcond[2]=((((-1.0)*r00*x3476))+(((-1.0)*r02*x3473))+((r01*x3474))+(((-1.0)*x3470)));
evalcond[3]=(((sj11*sj12))+((x3467*x3471))+(((-1.0)*gconst98*r20*x3473))+(((-1.0)*cj12*x3469))+((r22*x3466)));
evalcond[4]=((((-1.0)*cj10*sj12*x3469))+(((-1.0)*cj10*x3472))+((r01*x3475))+(((-1.0)*gconst98*r00*x3473))+((r02*x3466)));
evalcond[5]=(((r12*x3466))+(((-1.0)*sj10*sj12*x3469))+((r11*x3475))+(((-1.0)*x3468*x3473))+(((-1.0)*x3470*x3472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3477=((1.0)*gconst98);
CheckValue<IkReal> x3478 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x3477))+((gconst97*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3478.valid){
continue;
}
CheckValue<IkReal> x3479=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3477))+(((-1.0)*gconst97*r10)))),-1);
if(!x3479.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3478.value)+(((1.5707963267949)*(x3479.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3480=IKsin(j14);
IkReal x3481=IKcos(j14);
IkReal x3482=(gconst98*r10);
IkReal x3483=((1.0)*cj11);
IkReal x3484=((1.0)*sj10);
IkReal x3485=(gconst97*r21);
IkReal x3486=(cj12*sj11);
IkReal x3487=((1.0)*x3481);
IkReal x3488=(gconst97*x3480);
IkReal x3489=(gconst97*x3481);
IkReal x3490=((1.0)*gconst98*x3480);
evalcond[0]=(((x3480*x3485))+(((-1.0)*r22*x3487))+(((-1.0)*r20*x3490)));
evalcond[1]=((((-1.0)*x3480*x3482))+(((-1.0)*r12*x3487))+cj10+((r11*x3488)));
evalcond[2]=((((-1.0)*r02*x3487))+((r01*x3488))+(((-1.0)*r00*x3490))+(((-1.0)*x3484)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*gconst98*r20*x3487))+(((-1.0)*cj12*x3483))+((r22*x3480))+((x3481*x3485)));
evalcond[4]=(((r01*x3489))+(((-1.0)*cj10*x3486))+(((-1.0)*gconst98*r00*x3487))+(((-1.0)*cj10*sj12*x3483))+((r02*x3480)));
evalcond[5]=((((-1.0)*x3482*x3487))+((r12*x3480))+((r11*x3489))+(((-1.0)*sj10*sj12*x3483))+(((-1.0)*x3484*x3486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3491=((1.0)*gconst98);
CheckValue<IkReal> x3492 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst97*r21))+(((-1.0)*cj10*r20*x3491)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3492.valid){
continue;
}
CheckValue<IkReal> x3493=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3491))+(((-1.0)*gconst97*r00)))),-1);
if(!x3493.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3492.value)+(((1.5707963267949)*(x3493.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3494=IKsin(j14);
IkReal x3495=IKcos(j14);
IkReal x3496=(gconst98*r10);
IkReal x3497=((1.0)*cj11);
IkReal x3498=((1.0)*sj10);
IkReal x3499=(gconst97*r21);
IkReal x3500=(cj12*sj11);
IkReal x3501=((1.0)*x3495);
IkReal x3502=(gconst97*x3494);
IkReal x3503=(gconst97*x3495);
IkReal x3504=((1.0)*gconst98*x3494);
evalcond[0]=(((x3494*x3499))+(((-1.0)*r22*x3501))+(((-1.0)*r20*x3504)));
evalcond[1]=((((-1.0)*r12*x3501))+cj10+((r11*x3502))+(((-1.0)*x3494*x3496)));
evalcond[2]=(((r01*x3502))+(((-1.0)*x3498))+(((-1.0)*r00*x3504))+(((-1.0)*r02*x3501)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x3497))+((r22*x3494))+(((-1.0)*gconst98*r20*x3501))+((x3495*x3499)));
evalcond[4]=(((r01*x3503))+(((-1.0)*cj10*sj12*x3497))+(((-1.0)*gconst98*r00*x3501))+((r02*x3494))+(((-1.0)*cj10*x3500)));
evalcond[5]=((((-1.0)*sj10*sj12*x3497))+(((-1.0)*x3498*x3500))+((r11*x3503))+(((-1.0)*x3496*x3501))+((r12*x3494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3505=((-1.0)*r21);
IkReal x3507 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3507)==0){
continue;
}
IkReal x3506=pow(x3507,-0.5);
CheckValue<IkReal> x3508 = IKatan2WithCheck(IkReal(x3505),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3508.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3508.value))));
IkReal gconst100=(x3505*x3506);
IkReal gconst101=((1.0)*r20*x3506);
CheckValue<IkReal> x3509 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3509.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x3509.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x3510=((-1.0)*r21);
CheckValue<IkReal> x3513 = IKatan2WithCheck(IkReal(x3510),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3513.valid){
continue;
}
IkReal x3511=((1.0)*(x3513.value));
IkReal x3512=x3506;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst100;
cj15=gconst101;
j15=((3.14159265)+(((-1.0)*x3511)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3511)));
IkReal gconst100=(x3510*x3512);
IkReal gconst101=((1.0)*r20*x3512);
IkReal x3514=r22*r22;
IkReal x3515=((1.0)*x3514);
CheckValue<IkReal> x3519=IKPowWithIntegerCheck(((-1.0)+x3514),-1);
if(!x3519.valid){
continue;
}
IkReal x3516=x3519.value;
if((((1.0)+(((-1.0)*x3515)))) < -0.00001)
continue;
IkReal x3517=IKsqrt(((1.0)+(((-1.0)*x3515))));
IkReal x3518=(cj10*x3516*x3517);
j14eval[0]=((IKabs(((((-1.0)*x3515*x3518))+x3518)))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x3520=((-1.0)*r21);
CheckValue<IkReal> x3523 = IKatan2WithCheck(IkReal(x3520),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3523.valid){
continue;
}
IkReal x3521=((1.0)*(x3523.value));
IkReal x3522=x3506;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst100;
cj15=gconst101;
j15=((3.14159265)+(((-1.0)*x3521)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3521)));
IkReal gconst100=(x3520*x3522);
IkReal gconst101=((1.0)*r20*x3522);
IkReal x3524=r22*r22;
IkReal x3525=((1.0)*x3524);
CheckValue<IkReal> x3529=IKPowWithIntegerCheck(((-1.0)+x3524),-1);
if(!x3529.valid){
continue;
}
IkReal x3526=x3529.value;
if((((1.0)+(((-1.0)*x3525)))) < -0.00001)
continue;
IkReal x3527=IKsqrt(((1.0)+(((-1.0)*x3525))));
IkReal x3528=(sj10*x3526*x3527);
j14eval[0]=((IKabs(((((-1.0)*x3525*x3528))+x3528)))+(IKabs((r22*sj10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x3530=((-1.0)*r21);
CheckValue<IkReal> x3533 = IKatan2WithCheck(IkReal(x3530),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3533.valid){
continue;
}
IkReal x3531=((1.0)*(x3533.value));
IkReal x3532=x3506;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst100;
cj15=gconst101;
j15=((3.14159265)+(((-1.0)*x3531)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3531)));
IkReal gconst100=(x3530*x3532);
IkReal gconst101=((1.0)*r20*x3532);
IkReal x3534=r22*r22;
IkReal x3535=(cj10*r02);
IkReal x3536=(r12*sj10);
CheckValue<IkReal> x3540=IKPowWithIntegerCheck(((-1.0)+x3534),-1);
if(!x3540.valid){
continue;
}
IkReal x3537=x3540.value;
if((((1.0)+(((-1.0)*x3534)))) < -0.00001)
continue;
IkReal x3538=IKsqrt(((1.0)+(((-1.0)*x3534))));
IkReal x3539=(r22*x3537*x3538);
j14eval[0]=0;
j14eval[1]=((IKabs((((x3535*x3539))+((x3536*x3539)))))+(IKabs(((((-1.0)*x3535))+(((-1.0)*x3536))))));
j14eval[2]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3541=((1.0)*gconst100);
CheckValue<IkReal> x3542=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3541))+(((-1.0)*gconst101*r21)))),-1);
if(!x3542.valid){
continue;
}
CheckValue<IkReal> x3543 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((gconst101*r10*sj10))+(((-1.0)*r11*sj10*x3541))+((cj10*gconst101*r00))+(((-1.0)*cj10*r01*x3541)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3543.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3542.value)))+(x3543.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3544=IKsin(j14);
IkReal x3545=IKcos(j14);
IkReal x3546=(gconst101*r20);
IkReal x3547=((1.0)*cj11);
IkReal x3548=((1.0)*sj10);
IkReal x3549=(cj12*sj11);
IkReal x3550=((1.0)*x3545);
IkReal x3551=(gconst100*x3545);
IkReal x3552=(gconst100*x3544);
IkReal x3553=((1.0)*gconst101*x3544);
evalcond[0]=(((r21*x3552))+(((-1.0)*r22*x3550))+(((-1.0)*x3544*x3546)));
evalcond[1]=((((-1.0)*r10*x3553))+cj10+(((-1.0)*r12*x3550))+((r11*x3552)));
evalcond[2]=(((r01*x3552))+(((-1.0)*r00*x3553))+(((-1.0)*x3548))+(((-1.0)*r02*x3550)));
evalcond[3]=(((sj11*sj12))+((r21*x3551))+(((-1.0)*x3546*x3550))+((r22*x3544))+(((-1.0)*cj12*x3547)));
evalcond[4]=((((-1.0)*cj10*sj12*x3547))+((r02*x3544))+((r01*x3551))+(((-1.0)*cj10*x3549))+(((-1.0)*gconst101*r00*x3550)));
evalcond[5]=((((-1.0)*sj10*sj12*x3547))+(((-1.0)*gconst101*r10*x3550))+((r12*x3544))+(((-1.0)*x3548*x3549))+((r11*x3551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3554=((1.0)*gconst101);
CheckValue<IkReal> x3555=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3554)))),-1);
if(!x3555.valid){
continue;
}
CheckValue<IkReal> x3556 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x3554))+((gconst100*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3556.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3555.value)))+(x3556.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3557=IKsin(j14);
IkReal x3558=IKcos(j14);
IkReal x3559=(gconst101*r20);
IkReal x3560=((1.0)*cj11);
IkReal x3561=((1.0)*sj10);
IkReal x3562=(cj12*sj11);
IkReal x3563=((1.0)*x3558);
IkReal x3564=(gconst100*x3558);
IkReal x3565=(gconst100*x3557);
IkReal x3566=((1.0)*gconst101*x3557);
evalcond[0]=(((r21*x3565))+(((-1.0)*r22*x3563))+(((-1.0)*x3557*x3559)));
evalcond[1]=((((-1.0)*r10*x3566))+(((-1.0)*r12*x3563))+cj10+((r11*x3565)));
evalcond[2]=((((-1.0)*r02*x3563))+((r01*x3565))+(((-1.0)*x3561))+(((-1.0)*r00*x3566)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x3560))+((r21*x3564))+(((-1.0)*x3559*x3563))+((r22*x3557)));
evalcond[4]=(((r01*x3564))+(((-1.0)*cj10*x3562))+(((-1.0)*gconst101*r00*x3563))+(((-1.0)*cj10*sj12*x3560))+((r02*x3557)));
evalcond[5]=((((-1.0)*sj10*sj12*x3560))+(((-1.0)*x3561*x3562))+((r12*x3557))+((r11*x3564))+(((-1.0)*gconst101*r10*x3563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3567=((1.0)*gconst101);
CheckValue<IkReal> x3568 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x3567))+((cj10*gconst100*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3568.valid){
continue;
}
CheckValue<IkReal> x3569=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x3567)))),-1);
if(!x3569.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3568.value)+(((1.5707963267949)*(x3569.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3570=IKsin(j14);
IkReal x3571=IKcos(j14);
IkReal x3572=(gconst101*r20);
IkReal x3573=((1.0)*cj11);
IkReal x3574=((1.0)*sj10);
IkReal x3575=(cj12*sj11);
IkReal x3576=((1.0)*x3571);
IkReal x3577=(gconst100*x3571);
IkReal x3578=(gconst100*x3570);
IkReal x3579=((1.0)*gconst101*x3570);
evalcond[0]=((((-1.0)*x3570*x3572))+((r21*x3578))+(((-1.0)*r22*x3576)));
evalcond[1]=((((-1.0)*r10*x3579))+cj10+((r11*x3578))+(((-1.0)*r12*x3576)));
evalcond[2]=(((r01*x3578))+(((-1.0)*x3574))+(((-1.0)*r00*x3579))+(((-1.0)*r02*x3576)));
evalcond[3]=(((sj11*sj12))+((r21*x3577))+(((-1.0)*cj12*x3573))+(((-1.0)*x3572*x3576))+((r22*x3570)));
evalcond[4]=((((-1.0)*cj10*sj12*x3573))+((r01*x3577))+((r02*x3570))+(((-1.0)*cj10*x3575))+(((-1.0)*gconst101*r00*x3576)));
evalcond[5]=((((-1.0)*gconst101*r10*x3576))+(((-1.0)*sj10*sj12*x3573))+((r12*x3570))+((r11*x3577))+(((-1.0)*x3574*x3575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3580=((-1.0)*r10);
IkReal x3582 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3582)==0){
continue;
}
IkReal x3581=pow(x3582,-0.5);
CheckValue<IkReal> x3583 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3580),IKFAST_ATAN2_MAGTHRESH);
if(!x3583.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3583.value));
IkReal gconst103=(r11*x3581);
IkReal gconst104=(x3580*x3581);
CheckValue<IkReal> x3584 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3584.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x3584.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x3585=((-1.0)*r10);
IkReal x3586=x3581;
CheckValue<IkReal> x3588 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3585),IKFAST_ATAN2_MAGTHRESH);
if(!x3588.valid){
continue;
}
IkReal x3587=((-1.0)*(x3588.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst103;
cj15=gconst104;
j15=x3587;
IkReal gconst102=x3587;
IkReal gconst103=(r11*x3586);
IkReal gconst104=(x3585*x3586);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3589=((1.0)*cj10);
IkReal x3590=((1.0)*gconst103);
CheckValue<IkReal> x3591=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x3590)))),-1);
if(!x3591.valid){
continue;
}
CheckValue<IkReal> x3592 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3589))+(((-1.0)*r12*sj10)))),IkReal((((cj10*gconst104*r00))+(((-1.0)*gconst103*r01*x3589))+(((-1.0)*r11*sj10*x3590))+((gconst104*r10*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3592.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3591.value)))+(x3592.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3593=IKsin(j14);
IkReal x3594=IKcos(j14);
IkReal x3595=((1.0)*cj11);
IkReal x3596=(gconst104*r20);
IkReal x3597=(gconst103*r11);
IkReal x3598=((1.0)*sj10);
IkReal x3599=(gconst104*r00);
IkReal x3600=(cj12*sj11);
IkReal x3601=(gconst104*r10);
IkReal x3602=((1.0)*x3594);
IkReal x3603=(gconst103*x3593);
IkReal x3604=((1.0)*x3593);
IkReal x3605=(gconst103*x3594);
evalcond[0]=(((r21*x3603))+(((-1.0)*r22*x3602))+(((-1.0)*x3596*x3604)));
evalcond[1]=((((-1.0)*r12*x3602))+((x3593*x3597))+(((-1.0)*x3601*x3604))+cj10);
evalcond[2]=((((-1.0)*r02*x3602))+((r01*x3603))+(((-1.0)*x3599*x3604))+(((-1.0)*x3598)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x3595))+((r21*x3605))+((r22*x3593))+(((-1.0)*x3596*x3602)));
evalcond[4]=((((-1.0)*cj10*sj12*x3595))+((r02*x3593))+((r01*x3605))+(((-1.0)*cj10*x3600))+(((-1.0)*x3599*x3602)));
evalcond[5]=((((-1.0)*x3598*x3600))+(((-1.0)*x3601*x3602))+((r12*x3593))+(((-1.0)*sj10*sj12*x3595))+((x3594*x3597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3606=((1.0)*gconst104);
CheckValue<IkReal> x3607 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x3606))+((cj10*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3607.valid){
continue;
}
CheckValue<IkReal> x3608=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3606))+(((-1.0)*gconst103*r00)))),-1);
if(!x3608.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3607.value)+(((1.5707963267949)*(x3608.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3609=IKsin(j14);
IkReal x3610=IKcos(j14);
IkReal x3611=((1.0)*cj11);
IkReal x3612=(gconst104*r20);
IkReal x3613=(gconst103*r11);
IkReal x3614=((1.0)*sj10);
IkReal x3615=(gconst104*r00);
IkReal x3616=(cj12*sj11);
IkReal x3617=(gconst104*r10);
IkReal x3618=((1.0)*x3610);
IkReal x3619=(gconst103*x3609);
IkReal x3620=((1.0)*x3609);
IkReal x3621=(gconst103*x3610);
evalcond[0]=(((r21*x3619))+(((-1.0)*r22*x3618))+(((-1.0)*x3612*x3620)));
evalcond[1]=(((x3609*x3613))+(((-1.0)*r12*x3618))+cj10+(((-1.0)*x3617*x3620)));
evalcond[2]=((((-1.0)*r02*x3618))+((r01*x3619))+(((-1.0)*x3614))+(((-1.0)*x3615*x3620)));
evalcond[3]=(((sj11*sj12))+((r21*x3621))+(((-1.0)*cj12*x3611))+(((-1.0)*x3612*x3618))+((r22*x3609)));
evalcond[4]=((((-1.0)*cj10*sj12*x3611))+((r02*x3609))+((r01*x3621))+(((-1.0)*x3615*x3618))+(((-1.0)*cj10*x3616)));
evalcond[5]=((((-1.0)*x3617*x3618))+((x3610*x3613))+(((-1.0)*x3614*x3616))+(((-1.0)*sj10*sj12*x3611))+((r12*x3609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3622=((-1.0)*r11);
IkReal x3624 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3624)==0){
continue;
}
IkReal x3623=pow(x3624,-0.5);
CheckValue<IkReal> x3625 = IKatan2WithCheck(IkReal(x3622),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3625.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3625.value))));
IkReal gconst106=(x3622*x3623);
IkReal gconst107=((1.0)*r10*x3623);
CheckValue<IkReal> x3626 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3626.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x3626.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x3627=((-1.0)*r11);
CheckValue<IkReal> x3630 = IKatan2WithCheck(IkReal(x3627),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3630.valid){
continue;
}
IkReal x3628=((1.0)*(x3630.value));
IkReal x3629=x3623;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst106;
cj15=gconst107;
j15=((3.14159265)+(((-1.0)*x3628)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3628)));
IkReal gconst106=(x3627*x3629);
IkReal gconst107=((1.0)*r10*x3629);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x3631=((-1.0)*r11);
CheckValue<IkReal> x3634 = IKatan2WithCheck(IkReal(x3631),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3634.valid){
continue;
}
IkReal x3632=((1.0)*(x3634.value));
IkReal x3633=x3623;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst106;
cj15=gconst107;
j15=((3.14159265)+(((-1.0)*x3632)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3632)));
IkReal gconst106=(x3631*x3633);
IkReal gconst107=((1.0)*r10*x3633);
IkReal x3635=r12*r12;
IkReal x3636=(cj10*r02);
IkReal x3637=x3623;
IkReal x3638=(sj10*x3637);
j14eval[0]=((IKabs(((((-1.0)*x3636))+(((-1.0)*r12*sj10)))))+(IKabs((((x3635*x3638))+(((-1.0)*x3638))+((r12*x3636*x3637))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x3639=((-1.0)*r11);
CheckValue<IkReal> x3642 = IKatan2WithCheck(IkReal(x3639),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3642.valid){
continue;
}
IkReal x3640=((1.0)*(x3642.value));
IkReal x3641=x3623;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst106;
cj15=gconst107;
j15=((3.14159265)+(((-1.0)*x3640)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3640)));
IkReal gconst106=(x3639*x3641);
IkReal gconst107=((1.0)*r10*x3641);
IkReal x3643=r12*r12;
IkReal x3644=(cj11*cj12);
IkReal x3645=(sj11*sj12);
IkReal x3646=((1.0)+(((-1.0)*x3643)));
CheckValue<IkReal> x3653=IKPowWithIntegerCheck(x3646,-1);
if(!x3653.valid){
continue;
}
IkReal x3647=x3653.value;
CheckValue<IkReal> x3654=IKPowWithIntegerCheck(((-1.0)+x3643),-1);
if(!x3654.valid){
continue;
}
IkReal x3648=x3654.value;
IkReal x3649=((1.0)*x3647);
if((x3646) < -0.00001)
continue;
IkReal x3650=IKsqrt(x3646);
IkReal x3651=(r12*r22*x3648*x3650);
IkReal x3652=((((-1.0)*x3649*(r11*r11)*(r21*r21)))+(((-1.0)*x3649*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x3647)));
j14eval[0]=x3652;
j14eval[1]=IKsign(x3652);
j14eval[2]=((IKabs((((x3644*x3651))+(((-1.0)*x3645*x3651)))))+(IKabs(((((-1.0)*r22*x3644))+((r22*x3645))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3655=(sj11*sj12);
IkReal x3656=(gconst107*r20);
IkReal x3657=(gconst106*r21);
IkReal x3658=((1.0)*cj11*cj12);
CheckValue<IkReal> x3659=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3657*x3657)))+(((-1.0)*(x3656*x3656)))+(((-1.0)*(r22*r22)))+(((2.0)*x3656*x3657)))),-1);
if(!x3659.valid){
continue;
}
CheckValue<IkReal> x3660 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3658))+((r22*x3655)))),IkReal(((((-1.0)*x3655*x3656))+(((-1.0)*x3657*x3658))+((x3655*x3657))+((cj11*cj12*x3656)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3660.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3659.value)))+(x3660.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3661=IKsin(j14);
IkReal x3662=IKcos(j14);
IkReal x3663=((1.0)*cj11);
IkReal x3664=(gconst106*r21);
IkReal x3665=(gconst107*r20);
IkReal x3666=((1.0)*sj10);
IkReal x3667=(gconst107*r10);
IkReal x3668=(cj12*sj11);
IkReal x3669=(gconst107*r00);
IkReal x3670=((1.0)*x3662);
IkReal x3671=(gconst106*x3661);
IkReal x3672=((1.0)*x3661);
IkReal x3673=(gconst106*x3662);
evalcond[0]=((((-1.0)*x3665*x3672))+(((-1.0)*r22*x3670))+((x3661*x3664)));
evalcond[1]=(((r11*x3671))+(((-1.0)*r12*x3670))+cj10+(((-1.0)*x3667*x3672)));
evalcond[2]=(((r01*x3671))+(((-1.0)*x3666))+(((-1.0)*x3669*x3672))+(((-1.0)*r02*x3670)));
evalcond[3]=(((sj11*sj12))+((r22*x3661))+(((-1.0)*cj12*x3663))+((x3662*x3664))+(((-1.0)*x3665*x3670)));
evalcond[4]=(((r01*x3673))+(((-1.0)*cj10*x3668))+(((-1.0)*cj10*sj12*x3663))+((r02*x3661))+(((-1.0)*x3669*x3670)));
evalcond[5]=(((r11*x3673))+(((-1.0)*x3666*x3668))+(((-1.0)*sj10*sj12*x3663))+((r12*x3661))+(((-1.0)*x3667*x3670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3674=((1.0)*gconst106);
CheckValue<IkReal> x3675=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x3674)))),-1);
if(!x3675.valid){
continue;
}
CheckValue<IkReal> x3676 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x3674))+((cj10*gconst107*r00))+(((-1.0)*cj10*r01*x3674))+((gconst107*r10*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3676.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3675.value)))+(x3676.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3677=IKsin(j14);
IkReal x3678=IKcos(j14);
IkReal x3679=((1.0)*cj11);
IkReal x3680=(gconst106*r21);
IkReal x3681=(gconst107*r20);
IkReal x3682=((1.0)*sj10);
IkReal x3683=(gconst107*r10);
IkReal x3684=(cj12*sj11);
IkReal x3685=(gconst107*r00);
IkReal x3686=((1.0)*x3678);
IkReal x3687=(gconst106*x3677);
IkReal x3688=((1.0)*x3677);
IkReal x3689=(gconst106*x3678);
evalcond[0]=((((-1.0)*r22*x3686))+((x3677*x3680))+(((-1.0)*x3681*x3688)));
evalcond[1]=((((-1.0)*x3683*x3688))+cj10+(((-1.0)*r12*x3686))+((r11*x3687)));
evalcond[2]=(((r01*x3687))+(((-1.0)*x3682))+(((-1.0)*x3685*x3688))+(((-1.0)*r02*x3686)));
evalcond[3]=(((sj11*sj12))+((x3678*x3680))+(((-1.0)*cj12*x3679))+((r22*x3677))+(((-1.0)*x3681*x3686)));
evalcond[4]=((((-1.0)*cj10*x3684))+(((-1.0)*cj10*sj12*x3679))+((r01*x3689))+((r02*x3677))+(((-1.0)*x3685*x3686)));
evalcond[5]=(((r12*x3677))+(((-1.0)*x3683*x3686))+(((-1.0)*x3682*x3684))+(((-1.0)*sj10*sj12*x3679))+((r11*x3689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3690=((1.0)*gconst107);
CheckValue<IkReal> x3691=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x3690)))),-1);
if(!x3691.valid){
continue;
}
CheckValue<IkReal> x3692 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x3690))+((cj10*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3692.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3691.value)))+(x3692.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3693=IKsin(j14);
IkReal x3694=IKcos(j14);
IkReal x3695=((1.0)*cj11);
IkReal x3696=(gconst106*r21);
IkReal x3697=(gconst107*r20);
IkReal x3698=((1.0)*sj10);
IkReal x3699=(gconst107*r10);
IkReal x3700=(cj12*sj11);
IkReal x3701=(gconst107*r00);
IkReal x3702=((1.0)*x3694);
IkReal x3703=(gconst106*x3693);
IkReal x3704=((1.0)*x3693);
IkReal x3705=(gconst106*x3694);
evalcond[0]=((((-1.0)*x3697*x3704))+((x3693*x3696))+(((-1.0)*r22*x3702)));
evalcond[1]=((((-1.0)*x3699*x3704))+((r11*x3703))+cj10+(((-1.0)*r12*x3702)));
evalcond[2]=((((-1.0)*r02*x3702))+((r01*x3703))+(((-1.0)*x3701*x3704))+(((-1.0)*x3698)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x3697*x3702))+((x3694*x3696))+((r22*x3693))+(((-1.0)*cj12*x3695)));
evalcond[4]=((((-1.0)*cj10*sj12*x3695))+((r01*x3705))+((r02*x3693))+(((-1.0)*cj10*x3700))+(((-1.0)*x3701*x3702)));
evalcond[5]=((((-1.0)*x3698*x3700))+(((-1.0)*x3699*x3702))+((r11*x3705))+(((-1.0)*sj10*sj12*x3695))+((r12*x3693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
IkReal x3706=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x3706;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj15*r00))+((r01*sj15))))));
j14eval[2]=IKsign(x3706);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
IkReal x3707=((1.0)*cj15);
IkReal x3708=((((-1.0)*r01*x3707))+(((-1.0)*r00*sj15)));
j14eval[0]=x3708;
j14eval[1]=((IKabs((((r21*sj15))+(((-1.0)*r20*x3707)))))+(IKabs(r22)));
j14eval[2]=IKsign(x3708);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
IkReal x3709=((1.0)*cj15);
IkReal x3710=(r11*sj15);
IkReal x3711=(sj11*sj12);
IkReal x3712=(cj11*cj12);
IkReal x3713=((((-1.0)*r01*x3709))+(((-1.0)*r00*sj15)));
j14eval[0]=x3713;
j14eval[1]=((IKabs((((x3710*x3711))+(((-1.0)*x3710*x3712))+(((-1.0)*r10*x3709*x3711))+((cj15*r10*x3712)))))+(IKabs((((r12*x3712))+(((-1.0)*r12*x3711))))));
j14eval[2]=IKsign(x3713);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3714=((1.0)*cj15);
IkReal x3715=(r11*sj15);
IkReal x3716=(cj11*cj12);
IkReal x3717=(sj11*sj12);
CheckValue<IkReal> x3718=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3714))+(((-1.0)*r00*sj15)))),-1);
if(!x3718.valid){
continue;
}
CheckValue<IkReal> x3719 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3714*x3717))+((cj15*r10*x3716))+(((-1.0)*x3715*x3716))+((x3715*x3717)))),IkReal((((r12*x3716))+(((-1.0)*r12*x3717)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3719.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3718.value)))+(x3719.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3720=IKcos(j14);
IkReal x3721=IKsin(j14);
IkReal x3722=((1.0)*cj11);
IkReal x3723=(cj15*r20);
IkReal x3724=(cj15*r10);
IkReal x3725=(cj15*r00);
IkReal x3726=((1.0)*x3720);
IkReal x3727=(sj15*x3720);
IkReal x3728=((1.0)*x3721);
IkReal x3729=(sj15*x3721);
evalcond[0]=((((-1.0)*x3724*x3726))+((r11*x3727))+((r12*x3721)));
evalcond[1]=((((-1.0)*r22*x3726))+(((-1.0)*x3723*x3728))+((r21*x3729)));
evalcond[2]=(((r01*x3729))+(((-1.0)*x3725*x3728))+(((-1.0)*r02*x3726)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3726))+(((-1.0)*x3724*x3728))+((r11*x3729)));
evalcond[4]=(((sj11*sj12))+((r22*x3721))+(((-1.0)*x3723*x3726))+(((-1.0)*cj12*x3722))+((r21*x3727)));
evalcond[5]=(((r01*x3727))+(((-1.0)*x3725*x3726))+((r02*x3721))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x3722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3730=((1.0)*cj15);
CheckValue<IkReal> x3731 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3730))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3731.valid){
continue;
}
CheckValue<IkReal> x3732=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3730))+(((-1.0)*r00*sj15)))),-1);
if(!x3732.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3731.value)+(((1.5707963267949)*(x3732.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3733=IKcos(j14);
IkReal x3734=IKsin(j14);
IkReal x3735=((1.0)*cj11);
IkReal x3736=(cj15*r20);
IkReal x3737=(cj15*r10);
IkReal x3738=(cj15*r00);
IkReal x3739=((1.0)*x3733);
IkReal x3740=(sj15*x3733);
IkReal x3741=((1.0)*x3734);
IkReal x3742=(sj15*x3734);
evalcond[0]=(((r12*x3734))+((r11*x3740))+(((-1.0)*x3737*x3739)));
evalcond[1]=((((-1.0)*x3736*x3741))+((r21*x3742))+(((-1.0)*r22*x3739)));
evalcond[2]=(((r01*x3742))+(((-1.0)*x3738*x3741))+(((-1.0)*r02*x3739)));
evalcond[3]=((1.0)+(((-1.0)*x3737*x3741))+(((-1.0)*r12*x3739))+((r11*x3742)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x3736*x3739))+((r22*x3734))+(((-1.0)*cj12*x3735))+((r21*x3740)));
evalcond[5]=(((r01*x3740))+((r02*x3734))+(((-1.0)*cj12*sj11))+(((-1.0)*x3738*x3739))+(((-1.0)*sj12*x3735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x3743 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj15*r00))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3743.valid){
continue;
}
CheckValue<IkReal> x3744=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x3744.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3743.value)+(((1.5707963267949)*(x3744.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3745=IKcos(j14);
IkReal x3746=IKsin(j14);
IkReal x3747=((1.0)*cj11);
IkReal x3748=(cj15*r20);
IkReal x3749=(cj15*r10);
IkReal x3750=(cj15*r00);
IkReal x3751=((1.0)*x3745);
IkReal x3752=(sj15*x3745);
IkReal x3753=((1.0)*x3746);
IkReal x3754=(sj15*x3746);
evalcond[0]=((((-1.0)*x3749*x3751))+((r12*x3746))+((r11*x3752)));
evalcond[1]=((((-1.0)*x3748*x3753))+(((-1.0)*r22*x3751))+((r21*x3754)));
evalcond[2]=(((r01*x3754))+(((-1.0)*x3750*x3753))+(((-1.0)*r02*x3751)));
evalcond[3]=((1.0)+(((-1.0)*x3749*x3753))+(((-1.0)*r12*x3751))+((r11*x3754)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x3748*x3751))+(((-1.0)*cj12*x3747))+((r22*x3746))+((r21*x3752)));
evalcond[5]=(((r01*x3752))+(((-1.0)*x3750*x3751))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x3747))+((r02*x3746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x3755=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x3755;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x3755);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x3756=((1.0)*cj15);
IkReal x3757=((((-1.0)*r21*x3756))+(((-1.0)*r20*sj15)));
j14eval[0]=x3757;
j14eval[1]=IKsign(x3757);
j14eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x3756))+((r01*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x3758=cj15*cj15;
IkReal x3759=r11*r11;
IkReal x3760=(r11*sj15);
IkReal x3761=(cj15*r10);
IkReal x3762=((r12*r12)+((x3758*(r10*r10)))+x3759+(((-1.0)*x3758*x3759))+(((-2.0)*x3760*x3761)));
j14eval[0]=x3762;
j14eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x3761))+x3760))));
j14eval[2]=IKsign(x3762);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3763=cj15*cj15;
IkReal x3764=r11*r11;
IkReal x3765=(r11*sj15);
IkReal x3766=(cj15*r10);
CheckValue<IkReal> x3767=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x3763*(r10*r10)))+(((-1.0)*x3763*x3764))+x3764+(((-2.0)*x3765*x3766)))),-1);
if(!x3767.valid){
continue;
}
CheckValue<IkReal> x3768 = IKatan2WithCheck(IkReal(((((-1.0)*x3766))+x3765)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3768.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3767.value)))+(x3768.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3769=IKcos(j14);
IkReal x3770=IKsin(j14);
IkReal x3771=(cj15*r20);
IkReal x3772=(cj15*r10);
IkReal x3773=(cj15*r00);
IkReal x3774=((1.0)*x3769);
IkReal x3775=(sj15*x3769);
IkReal x3776=((1.0)*x3770);
IkReal x3777=(sj15*x3770);
evalcond[0]=(((r11*x3775))+((r12*x3770))+(((-1.0)*x3772*x3774)));
evalcond[1]=(((r21*x3777))+(((-1.0)*r22*x3774))+(((-1.0)*x3771*x3776)));
evalcond[2]=((((-1.0)*x3773*x3776))+(((-1.0)*r02*x3774))+((r01*x3777)));
evalcond[3]=((-1.0)+((r11*x3777))+(((-1.0)*x3772*x3776))+(((-1.0)*r12*x3774)));
evalcond[4]=(((r02*x3770))+(((-1.0)*x3773*x3774))+((cj12*sj11))+((cj11*sj12))+((r01*x3775)));
evalcond[5]=(((sj11*sj12))+((r21*x3775))+((r22*x3770))+(((-1.0)*x3771*x3774))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3778=((1.0)*cj15);
CheckValue<IkReal> x3779 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj15))+(((-1.0)*r00*x3778)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3779.valid){
continue;
}
CheckValue<IkReal> x3780=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3778))+(((-1.0)*r20*sj15)))),-1);
if(!x3780.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3779.value)+(((1.5707963267949)*(x3780.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3781=IKcos(j14);
IkReal x3782=IKsin(j14);
IkReal x3783=(cj15*r20);
IkReal x3784=(cj15*r10);
IkReal x3785=(cj15*r00);
IkReal x3786=((1.0)*x3781);
IkReal x3787=(sj15*x3781);
IkReal x3788=((1.0)*x3782);
IkReal x3789=(sj15*x3782);
evalcond[0]=(((r12*x3782))+(((-1.0)*x3784*x3786))+((r11*x3787)));
evalcond[1]=(((r21*x3789))+(((-1.0)*r22*x3786))+(((-1.0)*x3783*x3788)));
evalcond[2]=((((-1.0)*r02*x3786))+((r01*x3789))+(((-1.0)*x3785*x3788)));
evalcond[3]=((-1.0)+(((-1.0)*x3784*x3788))+(((-1.0)*r12*x3786))+((r11*x3789)));
evalcond[4]=(((r02*x3782))+((r01*x3787))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*x3785*x3786)));
evalcond[5]=(((sj11*sj12))+((r22*x3782))+((r21*x3787))+(((-1.0)*x3783*x3786))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x3790 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3790.valid){
continue;
}
CheckValue<IkReal> x3791=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x3791.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3790.value)+(((1.5707963267949)*(x3791.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3792=IKcos(j14);
IkReal x3793=IKsin(j14);
IkReal x3794=(cj15*r20);
IkReal x3795=(cj15*r10);
IkReal x3796=(cj15*r00);
IkReal x3797=((1.0)*x3792);
IkReal x3798=(sj15*x3792);
IkReal x3799=((1.0)*x3793);
IkReal x3800=(sj15*x3793);
evalcond[0]=((((-1.0)*x3795*x3797))+((r12*x3793))+((r11*x3798)));
evalcond[1]=(((r21*x3800))+(((-1.0)*r22*x3797))+(((-1.0)*x3794*x3799)));
evalcond[2]=((((-1.0)*x3796*x3799))+((r01*x3800))+(((-1.0)*r02*x3797)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3797))+((r11*x3800))+(((-1.0)*x3795*x3799)));
evalcond[4]=((((-1.0)*x3796*x3797))+((r02*x3793))+((cj12*sj11))+((r01*x3798))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r21*x3798))+((r22*x3793))+(((-1.0)*cj11*cj12))+(((-1.0)*x3794*x3797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3801=((-1.0)*r00);
IkReal x3803 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3803)==0){
continue;
}
IkReal x3802=pow(x3803,-0.5);
CheckValue<IkReal> x3804 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3801),IKFAST_ATAN2_MAGTHRESH);
if(!x3804.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3804.value));
IkReal gconst109=(r01*x3802);
IkReal gconst110=(x3801*x3802);
CheckValue<IkReal> x3805 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3805.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x3805.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x3806=((-1.0)*r00);
IkReal x3807=x3802;
CheckValue<IkReal> x3809 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3806),IKFAST_ATAN2_MAGTHRESH);
if(!x3809.valid){
continue;
}
IkReal x3808=((-1.0)*(x3809.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst109;
cj15=gconst110;
j15=x3808;
IkReal gconst108=x3808;
IkReal gconst109=(r01*x3807);
IkReal gconst110=(x3806*x3807);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3810=((1.0)*gconst109);
CheckValue<IkReal> x3811=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3810))+(((-1.0)*gconst110*r21)))),-1);
if(!x3811.valid){
continue;
}
CheckValue<IkReal> x3812 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((cj10*gconst110*r00))+(((-1.0)*r11*sj10*x3810))+(((-1.0)*cj10*r01*x3810))+((gconst110*r10*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3812.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3811.value)))+(x3812.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3813=IKsin(j14);
IkReal x3814=IKcos(j14);
IkReal x3815=((1.0)*cj11);
IkReal x3816=((1.0)*sj10);
IkReal x3817=(cj12*sj11);
IkReal x3818=((1.0)*x3814);
IkReal x3819=(gconst109*x3814);
IkReal x3820=(gconst109*x3813);
IkReal x3821=((1.0)*gconst110*x3813);
evalcond[0]=((((-1.0)*r22*x3818))+(((-1.0)*r20*x3821))+((r21*x3820)));
evalcond[1]=((((-1.0)*r12*x3818))+((r11*x3820))+cj10+(((-1.0)*r10*x3821)));
evalcond[2]=((((-1.0)*r00*x3821))+(((-1.0)*r02*x3818))+(((-1.0)*x3816))+((r01*x3820)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x3815))+((r21*x3819))+((r22*x3813))+(((-1.0)*gconst110*r20*x3818)));
evalcond[4]=((((-1.0)*cj10*x3817))+((r02*x3813))+(((-1.0)*cj10*sj12*x3815))+((r01*x3819))+(((-1.0)*gconst110*r00*x3818)));
evalcond[5]=((((-1.0)*gconst110*r10*x3818))+((r12*x3813))+(((-1.0)*sj10*sj12*x3815))+((r11*x3819))+(((-1.0)*x3816*x3817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3822=((1.0)*gconst110);
CheckValue<IkReal> x3823 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst109*r21*sj10))+(((-1.0)*r20*sj10*x3822)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3823.valid){
continue;
}
CheckValue<IkReal> x3824=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r10))+(((-1.0)*r11*x3822)))),-1);
if(!x3824.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3823.value)+(((1.5707963267949)*(x3824.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3825=IKsin(j14);
IkReal x3826=IKcos(j14);
IkReal x3827=((1.0)*cj11);
IkReal x3828=((1.0)*sj10);
IkReal x3829=(cj12*sj11);
IkReal x3830=((1.0)*x3826);
IkReal x3831=(gconst109*x3826);
IkReal x3832=(gconst109*x3825);
IkReal x3833=((1.0)*gconst110*x3825);
evalcond[0]=((((-1.0)*r20*x3833))+((r21*x3832))+(((-1.0)*r22*x3830)));
evalcond[1]=((((-1.0)*r10*x3833))+cj10+(((-1.0)*r12*x3830))+((r11*x3832)));
evalcond[2]=(((r01*x3832))+(((-1.0)*x3828))+(((-1.0)*r00*x3833))+(((-1.0)*r02*x3830)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x3827))+(((-1.0)*gconst110*r20*x3830))+((r22*x3825))+((r21*x3831)));
evalcond[4]=(((r01*x3831))+(((-1.0)*cj10*x3829))+((r02*x3825))+(((-1.0)*cj10*sj12*x3827))+(((-1.0)*gconst110*r00*x3830)));
evalcond[5]=(((r12*x3825))+(((-1.0)*sj10*sj12*x3827))+(((-1.0)*gconst110*r10*x3830))+((r11*x3831))+(((-1.0)*x3828*x3829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3834=((-1.0)*r01);
IkReal x3836 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3836)==0){
continue;
}
IkReal x3835=pow(x3836,-0.5);
CheckValue<IkReal> x3837 = IKatan2WithCheck(IkReal(x3834),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3837.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3837.value))));
IkReal gconst112=(x3834*x3835);
IkReal gconst113=((1.0)*r00*x3835);
CheckValue<IkReal> x3838 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3838.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x3838.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[5];
IkReal x3839=((-1.0)*r01);
CheckValue<IkReal> x3842 = IKatan2WithCheck(IkReal(x3839),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3842.valid){
continue;
}
IkReal x3840=((1.0)*(x3842.value));
IkReal x3841=x3835;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst112;
cj15=gconst113;
j15=((3.14159265)+(((-1.0)*x3840)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3840)));
IkReal gconst112=(x3839*x3841);
IkReal gconst113=((1.0)*r00*x3841);
j14eval[0]=0;
j14eval[1]=cj10;
j14eval[2]=r22;
j14eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j14eval[4]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  || IKabs(j14eval[4]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x3843=((-1.0)*r01);
CheckValue<IkReal> x3846 = IKatan2WithCheck(IkReal(x3843),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3846.valid){
continue;
}
IkReal x3844=((1.0)*(x3846.value));
IkReal x3845=x3835;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst112;
cj15=gconst113;
j15=((3.14159265)+(((-1.0)*x3844)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3844)));
IkReal gconst112=(x3843*x3845);
IkReal gconst113=((1.0)*r00*x3845);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x3847=((-1.0)*r01);
CheckValue<IkReal> x3850 = IKatan2WithCheck(IkReal(x3847),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3850.valid){
continue;
}
IkReal x3848=((1.0)*(x3850.value));
IkReal x3849=x3835;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst112;
cj15=gconst113;
j15=((3.14159265)+(((-1.0)*x3848)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3848)));
IkReal gconst112=(x3847*x3849);
IkReal gconst113=((1.0)*r00*x3849);
IkReal x3851=r02*r02;
IkReal x3852=(r12*sj10);
IkReal x3853=x3835;
IkReal x3854=(cj10*x3853);
j14eval[0]=((IKabs((((r02*x3852*x3853))+(((-1.0)*x3854))+((x3851*x3854)))))+(IKabs(((((-1.0)*x3852))+(((-1.0)*cj10*r02))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3855=((1.0)*gconst112);
CheckValue<IkReal> x3856 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((cj10*gconst113*r00))+((gconst113*r10*sj10))+(((-1.0)*cj10*r01*x3855))+(((-1.0)*r11*sj10*x3855)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3856.valid){
continue;
}
CheckValue<IkReal> x3857=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3855))+(((-1.0)*gconst113*r21)))),-1);
if(!x3857.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3856.value)+(((1.5707963267949)*(x3857.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3858=IKsin(j14);
IkReal x3859=IKcos(j14);
IkReal x3860=((1.0)*cj11);
IkReal x3861=((1.0)*sj10);
IkReal x3862=(gconst113*r10);
IkReal x3863=(gconst113*r00);
IkReal x3864=(cj12*sj11);
IkReal x3865=(gconst113*r20);
IkReal x3866=((1.0)*x3859);
IkReal x3867=(gconst112*x3859);
IkReal x3868=((1.0)*x3858);
IkReal x3869=(gconst112*x3858);
evalcond[0]=((((-1.0)*x3865*x3868))+((r21*x3869))+(((-1.0)*r22*x3866)));
evalcond[1]=(((r11*x3869))+cj10+(((-1.0)*r12*x3866))+(((-1.0)*x3862*x3868)));
evalcond[2]=((((-1.0)*r02*x3866))+(((-1.0)*x3861))+(((-1.0)*x3863*x3868))+((r01*x3869)));
evalcond[3]=((((-1.0)*cj12*x3860))+((sj11*sj12))+(((-1.0)*x3865*x3866))+((r21*x3867))+((r22*x3858)));
evalcond[4]=(((r02*x3858))+(((-1.0)*cj10*sj12*x3860))+(((-1.0)*x3863*x3866))+(((-1.0)*cj10*x3864))+((r01*x3867)));
evalcond[5]=(((r11*x3867))+(((-1.0)*x3861*x3864))+(((-1.0)*sj10*sj12*x3860))+(((-1.0)*x3862*x3866))+((r12*x3858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3870=((1.0)*gconst113);
CheckValue<IkReal> x3871=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3870))+(((-1.0)*gconst112*r10)))),-1);
if(!x3871.valid){
continue;
}
CheckValue<IkReal> x3872 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst112*r21*sj10))+(((-1.0)*r20*sj10*x3870)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3872.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3871.value)))+(x3872.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3873=IKsin(j14);
IkReal x3874=IKcos(j14);
IkReal x3875=((1.0)*cj11);
IkReal x3876=((1.0)*sj10);
IkReal x3877=(gconst113*r10);
IkReal x3878=(gconst113*r00);
IkReal x3879=(cj12*sj11);
IkReal x3880=(gconst113*r20);
IkReal x3881=((1.0)*x3874);
IkReal x3882=(gconst112*x3874);
IkReal x3883=((1.0)*x3873);
IkReal x3884=(gconst112*x3873);
evalcond[0]=((((-1.0)*x3880*x3883))+((r21*x3884))+(((-1.0)*r22*x3881)));
evalcond[1]=(((r11*x3884))+cj10+(((-1.0)*x3877*x3883))+(((-1.0)*r12*x3881)));
evalcond[2]=((((-1.0)*r02*x3881))+(((-1.0)*x3878*x3883))+((r01*x3884))+(((-1.0)*x3876)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x3880*x3881))+((r21*x3882))+(((-1.0)*cj12*x3875))+((r22*x3873)));
evalcond[4]=((((-1.0)*x3878*x3881))+((r01*x3882))+(((-1.0)*cj10*x3879))+(((-1.0)*cj10*sj12*x3875))+((r02*x3873)));
evalcond[5]=((((-1.0)*x3876*x3879))+((r11*x3882))+(((-1.0)*x3877*x3881))+(((-1.0)*sj10*sj12*x3875))+((r12*x3873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3885=((1.0)*gconst113);
CheckValue<IkReal> x3886 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x3885))+((cj10*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3886.valid){
continue;
}
CheckValue<IkReal> x3887=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3885))+(((-1.0)*gconst112*r00)))),-1);
if(!x3887.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3886.value)+(((1.5707963267949)*(x3887.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3888=IKsin(j14);
IkReal x3889=IKcos(j14);
IkReal x3890=((1.0)*cj11);
IkReal x3891=((1.0)*sj10);
IkReal x3892=(gconst113*r10);
IkReal x3893=(gconst113*r00);
IkReal x3894=(cj12*sj11);
IkReal x3895=(gconst113*r20);
IkReal x3896=((1.0)*x3889);
IkReal x3897=(gconst112*x3889);
IkReal x3898=((1.0)*x3888);
IkReal x3899=(gconst112*x3888);
evalcond[0]=((((-1.0)*x3895*x3898))+(((-1.0)*r22*x3896))+((r21*x3899)));
evalcond[1]=((((-1.0)*r12*x3896))+cj10+(((-1.0)*x3892*x3898))+((r11*x3899)));
evalcond[2]=(((r01*x3899))+(((-1.0)*x3893*x3898))+(((-1.0)*x3891))+(((-1.0)*r02*x3896)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x3895*x3896))+((r22*x3888))+(((-1.0)*cj12*x3890))+((r21*x3897)));
evalcond[4]=((((-1.0)*cj10*x3894))+(((-1.0)*cj10*sj12*x3890))+((r01*x3897))+((r02*x3888))+(((-1.0)*x3893*x3896)));
evalcond[5]=(((r12*x3888))+(((-1.0)*sj10*sj12*x3890))+(((-1.0)*x3891*x3894))+(((-1.0)*x3892*x3896))+((r11*x3897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x3900=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x3900;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x3900);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x3901=((1.0)*cj15);
IkReal x3902=((((-1.0)*r10*sj15))+(((-1.0)*r11*x3901)));
j14eval[0]=x3902;
j14eval[1]=IKsign(x3902);
j14eval[2]=((IKabs(r22))+(IKabs((((r21*sj15))+(((-1.0)*r20*x3901))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x3903=cj15*cj15;
IkReal x3904=r01*r01;
IkReal x3905=(cj15*r00);
IkReal x3906=(r01*sj15);
IkReal x3907=((((-2.0)*x3905*x3906))+x3904+((x3903*(r00*r00)))+(r02*r02)+(((-1.0)*x3903*x3904)));
j14eval[0]=x3907;
j14eval[1]=((IKabs(((((-1.0)*x3905))+x3906)))+(IKabs(r02)));
j14eval[2]=IKsign(x3907);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3908=cj15*cj15;
IkReal x3909=r01*r01;
IkReal x3910=(r01*sj15);
IkReal x3911=(cj15*r00);
CheckValue<IkReal> x3912=IKPowWithIntegerCheck(IKsign(((((-2.0)*x3910*x3911))+((x3908*(r00*r00)))+(((-1.0)*x3908*x3909))+x3909+(r02*r02))),-1);
if(!x3912.valid){
continue;
}
CheckValue<IkReal> x3913 = IKatan2WithCheck(IkReal(((((-1.0)*x3911))+x3910)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3913.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3912.value)))+(x3913.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3914=IKcos(j14);
IkReal x3915=IKsin(j14);
IkReal x3916=((1.0)*cj11);
IkReal x3917=(cj15*r20);
IkReal x3918=(cj15*r10);
IkReal x3919=(cj15*r00);
IkReal x3920=((1.0)*x3914);
IkReal x3921=(sj15*x3914);
IkReal x3922=((1.0)*x3915);
IkReal x3923=(sj15*x3915);
evalcond[0]=((((-1.0)*x3919*x3920))+((r02*x3915))+((r01*x3921)));
evalcond[1]=(((r21*x3923))+(((-1.0)*x3917*x3922))+(((-1.0)*r22*x3920)));
evalcond[2]=(((r11*x3923))+(((-1.0)*r12*x3920))+(((-1.0)*x3918*x3922)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3920))+(((-1.0)*x3919*x3922))+((r01*x3923)));
evalcond[4]=(((sj11*sj12))+((r21*x3921))+(((-1.0)*x3917*x3920))+(((-1.0)*cj12*x3916))+((r22*x3915)));
evalcond[5]=((((-1.0)*sj12*x3916))+((r11*x3921))+(((-1.0)*x3918*x3920))+(((-1.0)*cj12*sj11))+((r12*x3915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3924=((1.0)*cj15);
CheckValue<IkReal> x3925=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3924))+(((-1.0)*r10*sj15)))),-1);
if(!x3925.valid){
continue;
}
CheckValue<IkReal> x3926 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3924))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3926.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3925.value)))+(x3926.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3927=IKcos(j14);
IkReal x3928=IKsin(j14);
IkReal x3929=((1.0)*cj11);
IkReal x3930=(cj15*r20);
IkReal x3931=(cj15*r10);
IkReal x3932=(cj15*r00);
IkReal x3933=((1.0)*x3927);
IkReal x3934=(sj15*x3927);
IkReal x3935=((1.0)*x3928);
IkReal x3936=(sj15*x3928);
evalcond[0]=(((r01*x3934))+(((-1.0)*x3932*x3933))+((r02*x3928)));
evalcond[1]=(((r21*x3936))+(((-1.0)*r22*x3933))+(((-1.0)*x3930*x3935)));
evalcond[2]=((((-1.0)*x3931*x3935))+(((-1.0)*r12*x3933))+((r11*x3936)));
evalcond[3]=((-1.0)+((r01*x3936))+(((-1.0)*x3932*x3935))+(((-1.0)*r02*x3933)));
evalcond[4]=(((sj11*sj12))+((r21*x3934))+(((-1.0)*x3930*x3933))+((r22*x3928))+(((-1.0)*cj12*x3929)));
evalcond[5]=(((r12*x3928))+(((-1.0)*cj12*sj11))+(((-1.0)*x3931*x3933))+(((-1.0)*sj12*x3929))+((r11*x3934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x3937=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x3937.valid){
continue;
}
CheckValue<IkReal> x3938 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3938.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3937.value)))+(x3938.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3939=IKcos(j14);
IkReal x3940=IKsin(j14);
IkReal x3941=((1.0)*cj11);
IkReal x3942=(cj15*r20);
IkReal x3943=(cj15*r10);
IkReal x3944=(cj15*r00);
IkReal x3945=((1.0)*x3939);
IkReal x3946=(sj15*x3939);
IkReal x3947=((1.0)*x3940);
IkReal x3948=(sj15*x3940);
evalcond[0]=(((r01*x3946))+(((-1.0)*x3944*x3945))+((r02*x3940)));
evalcond[1]=((((-1.0)*x3942*x3947))+(((-1.0)*r22*x3945))+((r21*x3948)));
evalcond[2]=((((-1.0)*r12*x3945))+(((-1.0)*x3943*x3947))+((r11*x3948)));
evalcond[3]=((-1.0)+((r01*x3948))+(((-1.0)*r02*x3945))+(((-1.0)*x3944*x3947)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x3941))+((r22*x3940))+(((-1.0)*x3942*x3945))+((r21*x3946)));
evalcond[5]=((((-1.0)*sj12*x3941))+(((-1.0)*cj12*sj11))+((r12*x3940))+(((-1.0)*x3943*x3945))+((r11*x3946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x3949=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x3949;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x3949);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x3950=((1.0)*cj15);
IkReal x3951=((((-1.0)*r20*sj15))+(((-1.0)*r21*x3950)));
j14eval[0]=x3951;
j14eval[1]=IKsign(x3951);
j14eval[2]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*r10*x3950))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x3952=r01*r01;
IkReal x3953=cj15*cj15;
IkReal x3954=(r01*sj15);
IkReal x3955=(cj15*r00);
IkReal x3956=((((2.0)*x3954*x3955))+(((-1.0)*(r02*r02)))+(((-1.0)*x3952))+(((-1.0)*x3953*(r00*r00)))+((x3952*x3953)));
j14eval[0]=x3956;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x3955))+x3954))));
j14eval[2]=IKsign(x3956);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3957=r01*r01;
IkReal x3958=cj15*cj15;
IkReal x3959=(cj15*r00);
IkReal x3960=(r01*sj15);
CheckValue<IkReal> x3961=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3958*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x3957))+(((2.0)*x3959*x3960))+((x3957*x3958)))),-1);
if(!x3961.valid){
continue;
}
CheckValue<IkReal> x3962 = IKatan2WithCheck(IkReal(((((-1.0)*x3959))+x3960)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3962.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3961.value)))+(x3962.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3963=IKcos(j14);
IkReal x3964=IKsin(j14);
IkReal x3965=(cj15*r20);
IkReal x3966=(cj15*r10);
IkReal x3967=(cj15*r00);
IkReal x3968=((1.0)*x3963);
IkReal x3969=(sj15*x3963);
IkReal x3970=((1.0)*x3964);
IkReal x3971=(sj15*x3964);
evalcond[0]=(((r02*x3964))+((r01*x3969))+(((-1.0)*x3967*x3968)));
evalcond[1]=((((-1.0)*x3965*x3970))+((r21*x3971))+(((-1.0)*r22*x3968)));
evalcond[2]=(((r11*x3971))+(((-1.0)*x3966*x3970))+(((-1.0)*r12*x3968)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3968))+((r01*x3971))+(((-1.0)*x3967*x3970)));
evalcond[4]=(((r11*x3969))+((r12*x3964))+((cj12*sj11))+(((-1.0)*x3966*x3968))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x3965*x3968))+((r22*x3964))+((r21*x3969))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3972=((1.0)*cj15);
CheckValue<IkReal> x3973 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*r10*x3972)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3973.valid){
continue;
}
CheckValue<IkReal> x3974=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3972))+(((-1.0)*r20*sj15)))),-1);
if(!x3974.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3973.value)+(((1.5707963267949)*(x3974.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3975=IKcos(j14);
IkReal x3976=IKsin(j14);
IkReal x3977=(cj15*r20);
IkReal x3978=(cj15*r10);
IkReal x3979=(cj15*r00);
IkReal x3980=((1.0)*x3975);
IkReal x3981=(sj15*x3975);
IkReal x3982=((1.0)*x3976);
IkReal x3983=(sj15*x3976);
evalcond[0]=(((r02*x3976))+((r01*x3981))+(((-1.0)*x3979*x3980)));
evalcond[1]=(((r21*x3983))+(((-1.0)*x3977*x3982))+(((-1.0)*r22*x3980)));
evalcond[2]=((((-1.0)*r12*x3980))+((r11*x3983))+(((-1.0)*x3978*x3982)));
evalcond[3]=((1.0)+((r01*x3983))+(((-1.0)*x3979*x3982))+(((-1.0)*r02*x3980)));
evalcond[4]=(((r11*x3981))+((r12*x3976))+(((-1.0)*x3978*x3980))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r21*x3981))+(((-1.0)*x3977*x3980))+((r22*x3976))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x3984=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x3984.valid){
continue;
}
CheckValue<IkReal> x3985 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3985.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3984.value)))+(x3985.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3986=IKcos(j14);
IkReal x3987=IKsin(j14);
IkReal x3988=(cj15*r20);
IkReal x3989=(cj15*r10);
IkReal x3990=(cj15*r00);
IkReal x3991=((1.0)*x3986);
IkReal x3992=(sj15*x3986);
IkReal x3993=((1.0)*x3987);
IkReal x3994=(sj15*x3987);
evalcond[0]=((((-1.0)*x3990*x3991))+((r01*x3992))+((r02*x3987)));
evalcond[1]=((((-1.0)*x3988*x3993))+((r21*x3994))+(((-1.0)*r22*x3991)));
evalcond[2]=((((-1.0)*x3989*x3993))+(((-1.0)*r12*x3991))+((r11*x3994)));
evalcond[3]=((1.0)+(((-1.0)*x3990*x3993))+(((-1.0)*r02*x3991))+((r01*x3994)));
evalcond[4]=((((-1.0)*x3989*x3991))+((r11*x3992))+((cj12*sj11))+((cj11*sj12))+((r12*x3987)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x3988*x3991))+((r21*x3992))+((r22*x3987))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x3995=((-1.0)*px);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3995);
rxp1_1=(px*r21);
rxp1_2=(r11*x3995);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x3996=((-1.0)*px);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3996);
rxp1_1=(px*r21);
rxp1_2=(r11*x3996);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=((((-1.0)*cj15*r20))+((r21*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x3997=((-1.0)*px);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3997);
rxp1_1=(px*r21);
rxp1_2=(r11*x3997);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=(((r11*sj15))+(((-1.0)*cj15*r10)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x4000=IKPowWithIntegerCheck((((r11*sj15))+(((-1.0)*cj15*r10))),-1);
if(!x4000.valid){
continue;
}
IkReal x3998=x4000.value;
IkReal x3999=(sj10*x3998);
cj14array[0]=(((cj12*sj11*x3999))+((cj11*sj12*x3999)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x4001=IKsin(j14);
IkReal x4002=IKcos(j14);
IkReal x4003=(sj15*x4001);
IkReal x4004=((1.0)*x4002);
IkReal x4005=((1.0)*cj15*x4001);
evalcond[0]=(r02*x4001);
evalcond[1]=((((-1.0)*r02*x4004))+(((-1.0)*sj10)));
evalcond[2]=((((-1.0)*r20*x4005))+((r21*x4003)));
evalcond[3]=((((-1.0)*r10*x4005))+((r11*x4003)));
evalcond[4]=(((sj11*sj12))+((r21*sj15*x4002))+(((-1.0)*cj15*r20*x4004))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x4007=IKPowWithIntegerCheck(((((-1.0)*cj15*r20))+((r21*sj15))),-1);
if(!x4007.valid){
continue;
}
IkReal x4006=x4007.value;
cj14array[0]=((((-1.0)*sj11*sj12*x4006))+((cj11*cj12*x4006)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x4008=IKsin(j14);
IkReal x4009=IKcos(j14);
IkReal x4010=(cj15*r10);
IkReal x4011=((1.0)*sj10);
IkReal x4012=(sj15*x4008);
IkReal x4013=((1.0)*x4009);
IkReal x4014=((1.0)*x4008);
evalcond[0]=(r02*x4008);
evalcond[1]=((((-1.0)*r02*x4013))+(((-1.0)*x4011)));
evalcond[2]=(((r21*x4012))+(((-1.0)*cj15*r20*x4014)));
evalcond[3]=(((r11*x4012))+(((-1.0)*x4010*x4014)));
evalcond[4]=((((-1.0)*cj11*sj12*x4011))+(((-1.0)*x4010*x4013))+(((-1.0)*cj12*sj11*x4011))+((r11*sj15*x4009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x4015=IKPowWithIntegerCheck(r02,-1);
if(!x4015.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x4015.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x4016=IKsin(j14);
IkReal x4017=IKcos(j14);
IkReal x4018=((1.0)*cj15);
IkReal x4019=((1.0)*cj11);
IkReal x4020=(sj15*x4016);
IkReal x4021=(sj15*x4017);
evalcond[0]=(r02*x4016);
evalcond[1]=(((r21*x4020))+(((-1.0)*r20*x4016*x4018)));
evalcond[2]=((((-1.0)*r10*x4016*x4018))+((r11*x4020)));
evalcond[3]=(((sj11*sj12))+((r21*x4021))+(((-1.0)*r20*x4017*x4018))+(((-1.0)*cj12*x4019)));
evalcond[4]=((((-1.0)*cj12*sj10*sj11))+(((-1.0)*r10*x4017*x4018))+((r11*x4021))+(((-1.0)*sj10*sj12*x4019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4022=((1.0)*sj15);
CheckValue<IkReal> x4023 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x4022))+((cj15*r10*sj10))+(((-1.0)*cj10*r01*x4022))+((cj10*cj15*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4023.valid){
continue;
}
CheckValue<IkReal> x4024=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj15*r21))+(((-1.0)*r20*x4022)))),-1);
if(!x4024.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4023.value)+(((1.5707963267949)*(x4024.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4025=IKsin(j14);
IkReal x4026=IKcos(j14);
IkReal x4027=((1.0)*cj11);
IkReal x4028=(cj15*r20);
IkReal x4029=((1.0)*sj10);
IkReal x4030=(cj15*r10);
IkReal x4031=(cj12*sj11);
IkReal x4032=(cj15*r00);
IkReal x4033=((1.0)*x4026);
IkReal x4034=(sj15*x4026);
IkReal x4035=((1.0)*x4025);
IkReal x4036=(sj15*x4025);
evalcond[0]=(((r21*x4036))+(((-1.0)*r22*x4033))+(((-1.0)*x4028*x4035)));
evalcond[1]=((((-1.0)*x4030*x4035))+cj10+(((-1.0)*r12*x4033))+((r11*x4036)));
evalcond[2]=((((-1.0)*x4029))+((r01*x4036))+(((-1.0)*r02*x4033))+(((-1.0)*x4032*x4035)));
evalcond[3]=(((r21*x4034))+((sj11*sj12))+(((-1.0)*x4028*x4033))+((r22*x4025))+(((-1.0)*cj12*x4027)));
evalcond[4]=((((-1.0)*cj10*x4031))+(((-1.0)*cj10*sj12*x4027))+((r01*x4034))+(((-1.0)*x4032*x4033))+((r02*x4025)));
evalcond[5]=((((-1.0)*x4030*x4033))+((r12*x4025))+(((-1.0)*x4029*x4031))+(((-1.0)*sj10*sj12*x4027))+((r11*x4034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4037=((1.0)*cj15);
CheckValue<IkReal> x4038=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4037))+(((-1.0)*r10*sj15)))),-1);
if(!x4038.valid){
continue;
}
CheckValue<IkReal> x4039 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x4037))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4039.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4038.value)))+(x4039.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4040=IKsin(j14);
IkReal x4041=IKcos(j14);
IkReal x4042=((1.0)*cj11);
IkReal x4043=(cj15*r20);
IkReal x4044=((1.0)*sj10);
IkReal x4045=(cj15*r10);
IkReal x4046=(cj12*sj11);
IkReal x4047=(cj15*r00);
IkReal x4048=((1.0)*x4041);
IkReal x4049=(sj15*x4041);
IkReal x4050=((1.0)*x4040);
IkReal x4051=(sj15*x4040);
evalcond[0]=((((-1.0)*x4043*x4050))+((r21*x4051))+(((-1.0)*r22*x4048)));
evalcond[1]=((((-1.0)*r12*x4048))+((r11*x4051))+(((-1.0)*x4045*x4050))+cj10);
evalcond[2]=((((-1.0)*x4047*x4050))+(((-1.0)*r02*x4048))+(((-1.0)*x4044))+((r01*x4051)));
evalcond[3]=(((sj11*sj12))+((r22*x4040))+(((-1.0)*x4043*x4048))+(((-1.0)*cj12*x4042))+((r21*x4049)));
evalcond[4]=(((r02*x4040))+(((-1.0)*x4047*x4048))+(((-1.0)*cj10*x4046))+(((-1.0)*cj10*sj12*x4042))+((r01*x4049)));
evalcond[5]=((((-1.0)*sj10*sj12*x4042))+(((-1.0)*x4044*x4046))+(((-1.0)*x4045*x4048))+((r12*x4040))+((r11*x4049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4052=((1.0)*cj15);
CheckValue<IkReal> x4053 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x4052)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4053.valid){
continue;
}
CheckValue<IkReal> x4054=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x4052)))),-1);
if(!x4054.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4053.value)+(((1.5707963267949)*(x4054.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4055=IKsin(j14);
IkReal x4056=IKcos(j14);
IkReal x4057=((1.0)*cj11);
IkReal x4058=(cj15*r20);
IkReal x4059=((1.0)*sj10);
IkReal x4060=(cj15*r10);
IkReal x4061=(cj12*sj11);
IkReal x4062=(cj15*r00);
IkReal x4063=((1.0)*x4056);
IkReal x4064=(sj15*x4056);
IkReal x4065=((1.0)*x4055);
IkReal x4066=(sj15*x4055);
evalcond[0]=(((r21*x4066))+(((-1.0)*x4058*x4065))+(((-1.0)*r22*x4063)));
evalcond[1]=((((-1.0)*x4060*x4065))+(((-1.0)*r12*x4063))+((r11*x4066))+cj10);
evalcond[2]=((((-1.0)*x4059))+(((-1.0)*x4062*x4065))+(((-1.0)*r02*x4063))+((r01*x4066)));
evalcond[3]=(((sj11*sj12))+((r21*x4064))+(((-1.0)*cj12*x4057))+(((-1.0)*x4058*x4063))+((r22*x4055)));
evalcond[4]=(((r02*x4055))+(((-1.0)*cj10*sj12*x4057))+(((-1.0)*cj10*x4061))+(((-1.0)*x4062*x4063))+((r01*x4064)));
evalcond[5]=((((-1.0)*sj10*sj12*x4057))+(((-1.0)*x4060*x4063))+(((-1.0)*x4059*x4061))+((r11*x4064))+((r12*x4055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4067=r21*r21;
IkReal x4068=cj15*cj15;
IkReal x4069=(cj11*cj12);
IkReal x4070=(r21*sj15);
IkReal x4071=(cj15*r20);
IkReal x4072=(sj11*sj12);
CheckValue<IkReal> x4073 = IKatan2WithCheck(IkReal((((r22*x4072))+(((-1.0)*r22*x4069)))),IkReal(((((-1.0)*x4069*x4070))+((x4070*x4072))+(((-1.0)*x4071*x4072))+((x4069*x4071)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4073.valid){
continue;
}
CheckValue<IkReal> x4074=IKPowWithIntegerCheck(IKsign((((x4067*x4068))+(((-1.0)*(r22*r22)))+(((-1.0)*x4067))+(((-1.0)*x4068*(r20*r20)))+(((2.0)*x4070*x4071)))),-1);
if(!x4074.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4073.value)+(((1.5707963267949)*(x4074.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
IkReal x4075=IKsin(j14);
IkReal x4076=IKcos(j14);
IkReal x4077=(r21*sj15);
IkReal x4078=(cj15*r20);
IkReal x4079=((1.0)*x4076);
evalcond[0]=((((-1.0)*x4075*x4078))+(((-1.0)*r22*x4079))+((x4075*x4077)));
evalcond[1]=(((sj11*sj12))+((r22*x4075))+(((-1.0)*cj11*cj12))+((x4076*x4077))+(((-1.0)*x4078*x4079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4080=(cj15*sj14);
IkReal x4081=(sj14*sj15);
if( IKabs((((r01*x4081))+(((-1.0)*r00*x4080))+(((-1.0)*cj14*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj14*r12))+((r10*x4080))+(((-1.0)*r11*x4081)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x4081))+(((-1.0)*r00*x4080))+(((-1.0)*cj14*r02))))+IKsqr((((cj14*r12))+((r10*x4080))+(((-1.0)*r11*x4081))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r01*x4081))+(((-1.0)*r00*x4080))+(((-1.0)*cj14*r02))), (((cj14*r12))+((r10*x4080))+(((-1.0)*r11*x4081))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x4082=IKcos(j10);
IkReal x4083=IKsin(j10);
IkReal x4084=(cj14*sj15);
IkReal x4085=(sj11*sj12);
IkReal x4086=((1.0)*cj14);
IkReal x4087=((0.08535)*sj15);
IkReal x4088=(cj15*r00);
IkReal x4089=((1.0)*cj15);
IkReal x4090=(sj14*sj15);
IkReal x4091=(cj11*cj12);
IkReal x4092=((1.0)*sj12);
IkReal x4093=((1.0)*sj15);
IkReal x4094=(cj12*sj11);
IkReal x4095=((0.08535)*cj15);
IkReal x4096=(cj11*x4083);
IkReal x4097=((0.21325)*x4082);
IkReal x4098=(cj11*x4082);
IkReal x4099=((1.0)*x4082);
IkReal x4100=((1.0)*x4083);
evalcond[0]=((((-1.0)*r12*x4086))+((r11*x4090))+x4082+(((-1.0)*r10*sj14*x4089)));
evalcond[1]=(((r01*x4090))+(((-1.0)*sj14*x4088))+(((-1.0)*r02*x4086))+(((-1.0)*x4100)));
evalcond[2]=(((x4082*x4085))+(((-1.0)*r01*x4089))+(((-1.0)*r00*x4093))+(((-1.0)*x4091*x4099)));
evalcond[3]=(((x4083*x4085))+(((-1.0)*r10*x4093))+(((-1.0)*r11*x4089))+(((-1.0)*x4091*x4100)));
evalcond[4]=(((r01*x4084))+((r02*sj14))+(((-1.0)*x4092*x4098))+(((-1.0)*x4086*x4088))+(((-1.0)*x4094*x4099)));
evalcond[5]=(((r12*sj14))+(((-1.0)*x4092*x4096))+((r11*x4084))+(((-1.0)*x4094*x4100))+(((-1.0)*cj15*r10*x4086)));
evalcond[6]=((((-1.0)*px))+(((-1.0)*x4085*x4097))+(((-1.0)*r00*x4087))+(((-1.0)*r01*x4095))+(((-0.11235)*x4083))+(((0.24365)*x4098))+((x4091*x4097)));
evalcond[7]=((((-1.0)*r11*x4095))+(((0.11235)*x4082))+(((-0.21325)*x4083*x4085))+(((0.21325)*x4083*x4091))+(((-1.0)*py))+(((0.24365)*x4096))+(((-1.0)*r10*x4087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x4101=IKPowWithIntegerCheck(IKsign((((sj11*sj12))+(((-1.0)*cj11*cj12)))),-1);
if(!x4101.valid){
continue;
}
CheckValue<IkReal> x4102 = IKatan2WithCheck(IkReal((((cj15*r11))+((r10*sj15)))),IkReal((((cj15*r01))+((r00*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4102.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4101.value)))+(x4102.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x4103=IKcos(j10);
IkReal x4104=IKsin(j10);
IkReal x4105=(sj11*sj12);
IkReal x4106=((1.0)*cj15);
IkReal x4107=(cj11*cj12);
IkReal x4108=(r00*sj15);
IkReal x4109=(r10*sj15);
IkReal x4110=((0.08535)*cj15);
IkReal x4111=(cj11*x4104);
IkReal x4112=((0.21325)*x4103);
evalcond[0]=((((-1.0)*x4108))+((x4103*x4105))+(((-1.0)*r01*x4106))+(((-1.0)*x4103*x4107)));
evalcond[1]=((((-1.0)*x4109))+(((-1.0)*x4104*x4107))+(((-1.0)*r11*x4106))+((x4104*x4105)));
evalcond[2]=((((-1.0)*x4105*x4112))+(((-1.0)*r01*x4110))+(((0.24365)*cj11*x4103))+((x4107*x4112))+(((-1.0)*px))+(((-0.08535)*x4108))+(((-0.11235)*x4104)));
evalcond[3]=((((0.24365)*x4111))+(((-1.0)*r11*x4110))+(((0.11235)*x4103))+(((0.21325)*x4104*x4107))+(((-1.0)*py))+(((-0.08535)*x4109))+(((-0.21325)*x4104*x4105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x4113=((1.0)*cj15);
IkReal x4114=((((-1.0)*r01*x4113))+(((-1.0)*r00*sj15)));
j14eval[0]=x4114;
j14eval[1]=((IKabs((cj10*r22)))+(IKabs(((((-1.0)*cj10*r20*x4113))+((cj10*r21*sj15))))));
j14eval[2]=IKsign(x4114);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x4115=((1.0)*cj15);
IkReal x4116=((((-1.0)*r11*x4115))+(((-1.0)*r10*sj15)));
j14eval[0]=x4116;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x4115))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x4116);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x4117=((1.0)*sj15);
IkReal x4118=((((-1.0)*cj15*r21))+(((-1.0)*r20*x4117)));
j14eval[0]=x4118;
j14eval[1]=((IKabs((((cj15*r10*sj10))+(((-1.0)*cj10*r01*x4117))+(((-1.0)*r11*sj10*x4117))+((cj10*cj15*r00)))))+(IKabs(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02))))));
j14eval[2]=IKsign(x4118);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4119=((-1.0)*r20);
IkReal x4121 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4121)==0){
continue;
}
IkReal x4120=pow(x4121,-0.5);
CheckValue<IkReal> x4122 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4119),IKFAST_ATAN2_MAGTHRESH);
if(!x4122.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4122.value));
IkReal gconst97=(r21*x4120);
IkReal gconst98=(x4119*x4120);
CheckValue<IkReal> x4123 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4123.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x4123.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x4124=((-1.0)*r20);
IkReal x4125=x4120;
CheckValue<IkReal> x4127 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4124),IKFAST_ATAN2_MAGTHRESH);
if(!x4127.valid){
continue;
}
IkReal x4126=((-1.0)*(x4127.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst97;
cj15=gconst98;
j15=x4126;
IkReal gconst96=x4126;
IkReal gconst97=(r21*x4125);
IkReal gconst98=(x4124*x4125);
j14eval[0]=cj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x4128=((-1.0)*r20);
IkReal x4129=x4120;
CheckValue<IkReal> x4131 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4128),IKFAST_ATAN2_MAGTHRESH);
if(!x4131.valid){
continue;
}
IkReal x4130=((-1.0)*(x4131.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst97;
cj15=gconst98;
j15=x4130;
IkReal gconst96=x4130;
IkReal gconst97=(r21*x4129);
IkReal gconst98=(x4128*x4129);
j14eval[0]=sj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x4132=((-1.0)*r20);
IkReal x4133=x4120;
CheckValue<IkReal> x4135 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4132),IKFAST_ATAN2_MAGTHRESH);
if(!x4135.valid){
continue;
}
IkReal x4134=((-1.0)*(x4135.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst97;
cj15=gconst98;
j15=x4134;
IkReal gconst96=x4134;
IkReal gconst97=(r21*x4133);
IkReal gconst98=(x4132*x4133);
IkReal x4136=((1.0)*(r22*r22));
CheckValue<IkReal> x4140=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4136))),-1);
if(!x4140.valid){
continue;
}
IkReal x4137=x4140.value;
IkReal x4138=((1.0)*x4137);
IkReal x4139=((((-2.0)*x4137*(r20*r20)*(r21*r21)))+(((-1.0)*x4138*(r21*r21*r21*r21)))+(((-1.0)*x4136))+(((-1.0)*x4138*(r20*r20*r20*r20))));
j14eval[0]=x4139;
j14eval[1]=IKsign(x4139);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4141=(gconst98*r20);
IkReal x4142=(cj11*cj12);
IkReal x4143=(sj11*sj12);
IkReal x4144=(gconst97*r21);
CheckValue<IkReal> x4145=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4141*x4141)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4144*x4144)))+(((2.0)*x4141*x4144)))),-1);
if(!x4145.valid){
continue;
}
CheckValue<IkReal> x4146 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4142))+((r22*x4143)))),IkReal((((x4143*x4144))+(((-1.0)*x4141*x4143))+((x4141*x4142))+(((-1.0)*x4142*x4144)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4146.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4145.value)))+(x4146.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4147=IKsin(j14);
IkReal x4148=IKcos(j14);
IkReal x4149=(gconst98*r10);
IkReal x4150=((1.0)*cj11);
IkReal x4151=((1.0)*sj10);
IkReal x4152=(gconst97*r21);
IkReal x4153=(cj12*sj11);
IkReal x4154=((1.0)*x4148);
IkReal x4155=(gconst97*x4147);
IkReal x4156=(gconst97*x4148);
IkReal x4157=((1.0)*gconst98*x4147);
evalcond[0]=(((x4147*x4152))+(((-1.0)*r22*x4154))+(((-1.0)*r20*x4157)));
evalcond[1]=(((r11*x4155))+cj10+(((-1.0)*x4147*x4149))+(((-1.0)*r12*x4154)));
evalcond[2]=(((r01*x4155))+(((-1.0)*r02*x4154))+(((-1.0)*r00*x4157))+(((-1.0)*x4151)));
evalcond[3]=(((sj11*sj12))+((r22*x4147))+(((-1.0)*cj12*x4150))+((x4148*x4152))+(((-1.0)*gconst98*r20*x4154)));
evalcond[4]=(((r02*x4147))+((r01*x4156))+(((-1.0)*gconst98*r00*x4154))+(((-1.0)*cj10*sj12*x4150))+(((-1.0)*cj10*x4153)));
evalcond[5]=(((r12*x4147))+(((-1.0)*sj10*sj12*x4150))+((r11*x4156))+(((-1.0)*x4151*x4153))+(((-1.0)*x4149*x4154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4158=((1.0)*gconst98);
CheckValue<IkReal> x4159=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst97*r10))+(((-1.0)*r11*x4158)))),-1);
if(!x4159.valid){
continue;
}
CheckValue<IkReal> x4160 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x4158))+((gconst97*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4160.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4159.value)))+(x4160.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4161=IKsin(j14);
IkReal x4162=IKcos(j14);
IkReal x4163=(gconst98*r10);
IkReal x4164=((1.0)*cj11);
IkReal x4165=((1.0)*sj10);
IkReal x4166=(gconst97*r21);
IkReal x4167=(cj12*sj11);
IkReal x4168=((1.0)*x4162);
IkReal x4169=(gconst97*x4161);
IkReal x4170=(gconst97*x4162);
IkReal x4171=((1.0)*gconst98*x4161);
evalcond[0]=((((-1.0)*r20*x4171))+((x4161*x4166))+(((-1.0)*r22*x4168)));
evalcond[1]=((((-1.0)*x4161*x4163))+(((-1.0)*r12*x4168))+cj10+((r11*x4169)));
evalcond[2]=(((r01*x4169))+(((-1.0)*r02*x4168))+(((-1.0)*r00*x4171))+(((-1.0)*x4165)));
evalcond[3]=(((sj11*sj12))+((r22*x4161))+(((-1.0)*gconst98*r20*x4168))+(((-1.0)*cj12*x4164))+((x4162*x4166)));
evalcond[4]=((((-1.0)*cj10*sj12*x4164))+((r02*x4161))+(((-1.0)*cj10*x4167))+((r01*x4170))+(((-1.0)*gconst98*r00*x4168)));
evalcond[5]=(((r11*x4170))+(((-1.0)*x4165*x4167))+(((-1.0)*x4163*x4168))+((r12*x4161))+(((-1.0)*sj10*sj12*x4164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4172=((1.0)*gconst98);
CheckValue<IkReal> x4173 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x4172))+((cj10*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4173.valid){
continue;
}
CheckValue<IkReal> x4174=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4172))+(((-1.0)*gconst97*r00)))),-1);
if(!x4174.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4173.value)+(((1.5707963267949)*(x4174.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4175=IKsin(j14);
IkReal x4176=IKcos(j14);
IkReal x4177=(gconst98*r10);
IkReal x4178=((1.0)*cj11);
IkReal x4179=((1.0)*sj10);
IkReal x4180=(gconst97*r21);
IkReal x4181=(cj12*sj11);
IkReal x4182=((1.0)*x4176);
IkReal x4183=(gconst97*x4175);
IkReal x4184=(gconst97*x4176);
IkReal x4185=((1.0)*gconst98*x4175);
evalcond[0]=((((-1.0)*r20*x4185))+(((-1.0)*r22*x4182))+((x4175*x4180)));
evalcond[1]=((((-1.0)*r12*x4182))+((r11*x4183))+cj10+(((-1.0)*x4175*x4177)));
evalcond[2]=((((-1.0)*x4179))+(((-1.0)*r00*x4185))+(((-1.0)*r02*x4182))+((r01*x4183)));
evalcond[3]=(((sj11*sj12))+((r22*x4175))+(((-1.0)*gconst98*r20*x4182))+(((-1.0)*cj12*x4178))+((x4176*x4180)));
evalcond[4]=((((-1.0)*cj10*sj12*x4178))+((r01*x4184))+(((-1.0)*cj10*x4181))+((r02*x4175))+(((-1.0)*gconst98*r00*x4182)));
evalcond[5]=((((-1.0)*sj10*sj12*x4178))+((r12*x4175))+((r11*x4184))+(((-1.0)*x4177*x4182))+(((-1.0)*x4179*x4181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4186=((-1.0)*r21);
IkReal x4188 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4188)==0){
continue;
}
IkReal x4187=pow(x4188,-0.5);
CheckValue<IkReal> x4189 = IKatan2WithCheck(IkReal(x4186),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4189.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4189.value))));
IkReal gconst100=(x4186*x4187);
IkReal gconst101=((1.0)*r20*x4187);
CheckValue<IkReal> x4190 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4190.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x4190.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x4191=((-1.0)*r21);
CheckValue<IkReal> x4194 = IKatan2WithCheck(IkReal(x4191),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4194.valid){
continue;
}
IkReal x4192=((1.0)*(x4194.value));
IkReal x4193=x4187;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst100;
cj15=gconst101;
j15=((3.14159265)+(((-1.0)*x4192)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4192)));
IkReal gconst100=(x4191*x4193);
IkReal gconst101=((1.0)*r20*x4193);
IkReal x4195=r22*r22;
IkReal x4196=((1.0)*x4195);
CheckValue<IkReal> x4200=IKPowWithIntegerCheck(((-1.0)+x4195),-1);
if(!x4200.valid){
continue;
}
IkReal x4197=x4200.value;
if((((1.0)+(((-1.0)*x4196)))) < -0.00001)
continue;
IkReal x4198=IKsqrt(((1.0)+(((-1.0)*x4196))));
IkReal x4199=(cj10*x4197*x4198);
j14eval[0]=((IKabs(((((-1.0)*x4196*x4199))+x4199)))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x4201=((-1.0)*r21);
CheckValue<IkReal> x4204 = IKatan2WithCheck(IkReal(x4201),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4204.valid){
continue;
}
IkReal x4202=((1.0)*(x4204.value));
IkReal x4203=x4187;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst100;
cj15=gconst101;
j15=((3.14159265)+(((-1.0)*x4202)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4202)));
IkReal gconst100=(x4201*x4203);
IkReal gconst101=((1.0)*r20*x4203);
IkReal x4205=r22*r22;
IkReal x4206=((1.0)*x4205);
CheckValue<IkReal> x4210=IKPowWithIntegerCheck(((-1.0)+x4205),-1);
if(!x4210.valid){
continue;
}
IkReal x4207=x4210.value;
if((((1.0)+(((-1.0)*x4206)))) < -0.00001)
continue;
IkReal x4208=IKsqrt(((1.0)+(((-1.0)*x4206))));
IkReal x4209=(sj10*x4207*x4208);
j14eval[0]=((IKabs(((((-1.0)*x4206*x4209))+x4209)))+(IKabs((r22*sj10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x4211=((-1.0)*r21);
CheckValue<IkReal> x4214 = IKatan2WithCheck(IkReal(x4211),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4214.valid){
continue;
}
IkReal x4212=((1.0)*(x4214.value));
IkReal x4213=x4187;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst100;
cj15=gconst101;
j15=((3.14159265)+(((-1.0)*x4212)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4212)));
IkReal gconst100=(x4211*x4213);
IkReal gconst101=((1.0)*r20*x4213);
IkReal x4215=r22*r22;
IkReal x4216=(cj10*r02);
IkReal x4217=(r12*sj10);
CheckValue<IkReal> x4221=IKPowWithIntegerCheck(((-1.0)+x4215),-1);
if(!x4221.valid){
continue;
}
IkReal x4218=x4221.value;
if((((1.0)+(((-1.0)*x4215)))) < -0.00001)
continue;
IkReal x4219=IKsqrt(((1.0)+(((-1.0)*x4215))));
IkReal x4220=(r22*x4218*x4219);
j14eval[0]=0;
j14eval[1]=((IKabs(((((-1.0)*x4217))+(((-1.0)*x4216)))))+(IKabs((((x4216*x4220))+((x4217*x4220))))));
j14eval[2]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4222=((1.0)*gconst100);
CheckValue<IkReal> x4223 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((gconst101*r10*sj10))+(((-1.0)*r11*sj10*x4222))+(((-1.0)*cj10*r01*x4222))+((cj10*gconst101*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4223.valid){
continue;
}
CheckValue<IkReal> x4224=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst101*r21))+(((-1.0)*r20*x4222)))),-1);
if(!x4224.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4223.value)+(((1.5707963267949)*(x4224.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4225=IKsin(j14);
IkReal x4226=IKcos(j14);
IkReal x4227=(gconst101*r20);
IkReal x4228=((1.0)*cj11);
IkReal x4229=((1.0)*sj10);
IkReal x4230=(cj12*sj11);
IkReal x4231=((1.0)*x4226);
IkReal x4232=(gconst100*x4226);
IkReal x4233=(gconst100*x4225);
IkReal x4234=((1.0)*gconst101*x4225);
evalcond[0]=((((-1.0)*r22*x4231))+((r21*x4233))+(((-1.0)*x4225*x4227)));
evalcond[1]=((((-1.0)*r12*x4231))+(((-1.0)*r10*x4234))+cj10+((r11*x4233)));
evalcond[2]=((((-1.0)*x4229))+((r01*x4233))+(((-1.0)*r02*x4231))+(((-1.0)*r00*x4234)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x4227*x4231))+((r22*x4225))+(((-1.0)*cj12*x4228))+((r21*x4232)));
evalcond[4]=(((r01*x4232))+(((-1.0)*cj10*x4230))+(((-1.0)*gconst101*r00*x4231))+(((-1.0)*cj10*sj12*x4228))+((r02*x4225)));
evalcond[5]=((((-1.0)*sj10*sj12*x4228))+(((-1.0)*x4229*x4230))+(((-1.0)*gconst101*r10*x4231))+((r11*x4232))+((r12*x4225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4235=((1.0)*gconst101);
CheckValue<IkReal> x4236=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x4235)))),-1);
if(!x4236.valid){
continue;
}
CheckValue<IkReal> x4237 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x4235))+((gconst100*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4237.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4236.value)))+(x4237.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4238=IKsin(j14);
IkReal x4239=IKcos(j14);
IkReal x4240=(gconst101*r20);
IkReal x4241=((1.0)*cj11);
IkReal x4242=((1.0)*sj10);
IkReal x4243=(cj12*sj11);
IkReal x4244=((1.0)*x4239);
IkReal x4245=(gconst100*x4239);
IkReal x4246=(gconst100*x4238);
IkReal x4247=((1.0)*gconst101*x4238);
evalcond[0]=((((-1.0)*r22*x4244))+(((-1.0)*x4238*x4240))+((r21*x4246)));
evalcond[1]=(cj10+(((-1.0)*r12*x4244))+(((-1.0)*r10*x4247))+((r11*x4246)));
evalcond[2]=(((r01*x4246))+(((-1.0)*x4242))+(((-1.0)*r02*x4244))+(((-1.0)*r00*x4247)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x4240*x4244))+(((-1.0)*cj12*x4241))+((r22*x4238))+((r21*x4245)));
evalcond[4]=(((r01*x4245))+(((-1.0)*cj10*x4243))+((r02*x4238))+(((-1.0)*gconst101*r00*x4244))+(((-1.0)*cj10*sj12*x4241)));
evalcond[5]=(((r12*x4238))+(((-1.0)*sj10*sj12*x4241))+(((-1.0)*gconst101*r10*x4244))+(((-1.0)*x4242*x4243))+((r11*x4245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4248=((1.0)*gconst101);
CheckValue<IkReal> x4249=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4248))+(((-1.0)*gconst100*r00)))),-1);
if(!x4249.valid){
continue;
}
CheckValue<IkReal> x4250 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x4248))+((cj10*gconst100*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4250.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4249.value)))+(x4250.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4251=IKsin(j14);
IkReal x4252=IKcos(j14);
IkReal x4253=(gconst101*r20);
IkReal x4254=((1.0)*cj11);
IkReal x4255=((1.0)*sj10);
IkReal x4256=(cj12*sj11);
IkReal x4257=((1.0)*x4252);
IkReal x4258=(gconst100*x4252);
IkReal x4259=(gconst100*x4251);
IkReal x4260=((1.0)*gconst101*x4251);
evalcond[0]=((((-1.0)*r22*x4257))+((r21*x4259))+(((-1.0)*x4251*x4253)));
evalcond[1]=((((-1.0)*r10*x4260))+cj10+((r11*x4259))+(((-1.0)*r12*x4257)));
evalcond[2]=((((-1.0)*r00*x4260))+((r01*x4259))+(((-1.0)*x4255))+(((-1.0)*r02*x4257)));
evalcond[3]=(((sj11*sj12))+((r22*x4251))+(((-1.0)*x4253*x4257))+(((-1.0)*cj12*x4254))+((r21*x4258)));
evalcond[4]=((((-1.0)*cj10*x4256))+(((-1.0)*gconst101*r00*x4257))+(((-1.0)*cj10*sj12*x4254))+((r02*x4251))+((r01*x4258)));
evalcond[5]=((((-1.0)*x4255*x4256))+((r12*x4251))+(((-1.0)*gconst101*r10*x4257))+((r11*x4258))+(((-1.0)*sj10*sj12*x4254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4261=((-1.0)*r10);
IkReal x4263 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4263)==0){
continue;
}
IkReal x4262=pow(x4263,-0.5);
CheckValue<IkReal> x4264 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4261),IKFAST_ATAN2_MAGTHRESH);
if(!x4264.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4264.value));
IkReal gconst103=(r11*x4262);
IkReal gconst104=(x4261*x4262);
CheckValue<IkReal> x4265 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4265.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x4265.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x4266=((-1.0)*r10);
IkReal x4267=x4262;
CheckValue<IkReal> x4269 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4266),IKFAST_ATAN2_MAGTHRESH);
if(!x4269.valid){
continue;
}
IkReal x4268=((-1.0)*(x4269.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst103;
cj15=gconst104;
j15=x4268;
IkReal gconst102=x4268;
IkReal gconst103=(r11*x4267);
IkReal gconst104=(x4266*x4267);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4270=((1.0)*cj10);
IkReal x4271=((1.0)*gconst103);
CheckValue<IkReal> x4272=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4271)))),-1);
if(!x4272.valid){
continue;
}
CheckValue<IkReal> x4273 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4270))+(((-1.0)*r12*sj10)))),IkReal((((cj10*gconst104*r00))+(((-1.0)*gconst103*r01*x4270))+((gconst104*r10*sj10))+(((-1.0)*r11*sj10*x4271)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4273.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4272.value)))+(x4273.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4274=IKsin(j14);
IkReal x4275=IKcos(j14);
IkReal x4276=((1.0)*cj11);
IkReal x4277=(gconst104*r20);
IkReal x4278=(gconst103*r11);
IkReal x4279=((1.0)*sj10);
IkReal x4280=(gconst104*r00);
IkReal x4281=(cj12*sj11);
IkReal x4282=(gconst104*r10);
IkReal x4283=((1.0)*x4275);
IkReal x4284=(gconst103*x4274);
IkReal x4285=((1.0)*x4274);
IkReal x4286=(gconst103*x4275);
evalcond[0]=((((-1.0)*r22*x4283))+(((-1.0)*x4277*x4285))+((r21*x4284)));
evalcond[1]=((((-1.0)*x4282*x4285))+(((-1.0)*r12*x4283))+((x4274*x4278))+cj10);
evalcond[2]=((((-1.0)*x4280*x4285))+(((-1.0)*r02*x4283))+(((-1.0)*x4279))+((r01*x4284)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x4277*x4283))+(((-1.0)*cj12*x4276))+((r21*x4286))+((r22*x4274)));
evalcond[4]=((((-1.0)*cj10*x4281))+((r02*x4274))+(((-1.0)*x4280*x4283))+(((-1.0)*cj10*sj12*x4276))+((r01*x4286)));
evalcond[5]=((((-1.0)*x4282*x4283))+((r12*x4274))+(((-1.0)*x4279*x4281))+((x4275*x4278))+(((-1.0)*sj10*sj12*x4276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4287=((1.0)*gconst104);
CheckValue<IkReal> x4288 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst103*r21))+(((-1.0)*cj10*r20*x4287)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4288.valid){
continue;
}
CheckValue<IkReal> x4289=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x4287)))),-1);
if(!x4289.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4288.value)+(((1.5707963267949)*(x4289.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4290=IKsin(j14);
IkReal x4291=IKcos(j14);
IkReal x4292=((1.0)*cj11);
IkReal x4293=(gconst104*r20);
IkReal x4294=(gconst103*r11);
IkReal x4295=((1.0)*sj10);
IkReal x4296=(gconst104*r00);
IkReal x4297=(cj12*sj11);
IkReal x4298=(gconst104*r10);
IkReal x4299=((1.0)*x4291);
IkReal x4300=(gconst103*x4290);
IkReal x4301=((1.0)*x4290);
IkReal x4302=(gconst103*x4291);
evalcond[0]=((((-1.0)*r22*x4299))+((r21*x4300))+(((-1.0)*x4293*x4301)));
evalcond[1]=(cj10+(((-1.0)*r12*x4299))+((x4290*x4294))+(((-1.0)*x4298*x4301)));
evalcond[2]=((((-1.0)*x4296*x4301))+(((-1.0)*x4295))+((r01*x4300))+(((-1.0)*r02*x4299)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x4292))+((r22*x4290))+(((-1.0)*x4293*x4299))+((r21*x4302)));
evalcond[4]=((((-1.0)*x4296*x4299))+((r01*x4302))+(((-1.0)*cj10*x4297))+(((-1.0)*cj10*sj12*x4292))+((r02*x4290)));
evalcond[5]=((((-1.0)*x4298*x4299))+(((-1.0)*x4295*x4297))+(((-1.0)*sj10*sj12*x4292))+((x4291*x4294))+((r12*x4290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4303=((-1.0)*r11);
IkReal x4305 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4305)==0){
continue;
}
IkReal x4304=pow(x4305,-0.5);
CheckValue<IkReal> x4306 = IKatan2WithCheck(IkReal(x4303),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4306.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4306.value))));
IkReal gconst106=(x4303*x4304);
IkReal gconst107=((1.0)*r10*x4304);
CheckValue<IkReal> x4307 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4307.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x4307.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x4308=((-1.0)*r11);
CheckValue<IkReal> x4311 = IKatan2WithCheck(IkReal(x4308),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4311.valid){
continue;
}
IkReal x4309=((1.0)*(x4311.value));
IkReal x4310=x4304;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst106;
cj15=gconst107;
j15=((3.14159265)+(((-1.0)*x4309)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4309)));
IkReal gconst106=(x4308*x4310);
IkReal gconst107=((1.0)*r10*x4310);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x4312=((-1.0)*r11);
CheckValue<IkReal> x4315 = IKatan2WithCheck(IkReal(x4312),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4315.valid){
continue;
}
IkReal x4313=((1.0)*(x4315.value));
IkReal x4314=x4304;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst106;
cj15=gconst107;
j15=((3.14159265)+(((-1.0)*x4313)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4313)));
IkReal gconst106=(x4312*x4314);
IkReal gconst107=((1.0)*r10*x4314);
IkReal x4316=r12*r12;
IkReal x4317=(cj10*r02);
IkReal x4318=x4304;
IkReal x4319=(sj10*x4318);
j14eval[0]=((IKabs(((((-1.0)*r12*sj10))+(((-1.0)*x4317)))))+(IKabs((((x4316*x4319))+((r12*x4317*x4318))+(((-1.0)*x4319))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x4320=((-1.0)*r11);
CheckValue<IkReal> x4323 = IKatan2WithCheck(IkReal(x4320),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4323.valid){
continue;
}
IkReal x4321=((1.0)*(x4323.value));
IkReal x4322=x4304;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst106;
cj15=gconst107;
j15=((3.14159265)+(((-1.0)*x4321)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4321)));
IkReal gconst106=(x4320*x4322);
IkReal gconst107=((1.0)*r10*x4322);
IkReal x4324=r12*r12;
IkReal x4325=(cj11*cj12);
IkReal x4326=(sj11*sj12);
IkReal x4327=((1.0)+(((-1.0)*x4324)));
CheckValue<IkReal> x4334=IKPowWithIntegerCheck(x4327,-1);
if(!x4334.valid){
continue;
}
IkReal x4328=x4334.value;
CheckValue<IkReal> x4335=IKPowWithIntegerCheck(((-1.0)+x4324),-1);
if(!x4335.valid){
continue;
}
IkReal x4329=x4335.value;
IkReal x4330=((1.0)*x4328);
if((x4327) < -0.00001)
continue;
IkReal x4331=IKsqrt(x4327);
IkReal x4332=(r12*r22*x4329*x4331);
IkReal x4333=((((-1.0)*x4330*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x4328))+(((-1.0)*x4330*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22))));
j14eval[0]=x4333;
j14eval[1]=IKsign(x4333);
j14eval[2]=((IKabs(((((-1.0)*r22*x4325))+((r22*x4326)))))+(IKabs((((x4325*x4332))+(((-1.0)*x4326*x4332))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4336=(sj11*sj12);
IkReal x4337=(gconst107*r20);
IkReal x4338=(gconst106*r21);
IkReal x4339=((1.0)*cj11*cj12);
CheckValue<IkReal> x4340 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4339))+((r22*x4336)))),IkReal(((((-1.0)*x4338*x4339))+(((-1.0)*x4336*x4337))+((cj11*cj12*x4337))+((x4336*x4338)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4340.valid){
continue;
}
CheckValue<IkReal> x4341=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4337*x4337)))+(((-1.0)*(r22*r22)))+(((2.0)*x4337*x4338))+(((-1.0)*(x4338*x4338))))),-1);
if(!x4341.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4340.value)+(((1.5707963267949)*(x4341.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4342=IKsin(j14);
IkReal x4343=IKcos(j14);
IkReal x4344=((1.0)*cj11);
IkReal x4345=(gconst106*r21);
IkReal x4346=(gconst107*r20);
IkReal x4347=((1.0)*sj10);
IkReal x4348=(gconst107*r10);
IkReal x4349=(cj12*sj11);
IkReal x4350=(gconst107*r00);
IkReal x4351=((1.0)*x4343);
IkReal x4352=(gconst106*x4342);
IkReal x4353=((1.0)*x4342);
IkReal x4354=(gconst106*x4343);
evalcond[0]=(((x4342*x4345))+(((-1.0)*r22*x4351))+(((-1.0)*x4346*x4353)));
evalcond[1]=((((-1.0)*r12*x4351))+cj10+((r11*x4352))+(((-1.0)*x4348*x4353)));
evalcond[2]=((((-1.0)*r02*x4351))+(((-1.0)*x4347))+(((-1.0)*x4350*x4353))+((r01*x4352)));
evalcond[3]=(((sj11*sj12))+((x4343*x4345))+((r22*x4342))+(((-1.0)*cj12*x4344))+(((-1.0)*x4346*x4351)));
evalcond[4]=(((r02*x4342))+(((-1.0)*cj10*x4349))+(((-1.0)*x4350*x4351))+(((-1.0)*cj10*sj12*x4344))+((r01*x4354)));
evalcond[5]=((((-1.0)*sj10*sj12*x4344))+((r12*x4342))+(((-1.0)*x4347*x4349))+((r11*x4354))+(((-1.0)*x4348*x4351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4355=((1.0)*gconst106);
CheckValue<IkReal> x4356=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x4355)))),-1);
if(!x4356.valid){
continue;
}
CheckValue<IkReal> x4357 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x4355))+((cj10*gconst107*r00))+(((-1.0)*r11*sj10*x4355))+((gconst107*r10*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4357.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4356.value)))+(x4357.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4358=IKsin(j14);
IkReal x4359=IKcos(j14);
IkReal x4360=((1.0)*cj11);
IkReal x4361=(gconst106*r21);
IkReal x4362=(gconst107*r20);
IkReal x4363=((1.0)*sj10);
IkReal x4364=(gconst107*r10);
IkReal x4365=(cj12*sj11);
IkReal x4366=(gconst107*r00);
IkReal x4367=((1.0)*x4359);
IkReal x4368=(gconst106*x4358);
IkReal x4369=((1.0)*x4358);
IkReal x4370=(gconst106*x4359);
evalcond[0]=((((-1.0)*r22*x4367))+(((-1.0)*x4362*x4369))+((x4358*x4361)));
evalcond[1]=(((r11*x4368))+cj10+(((-1.0)*x4364*x4369))+(((-1.0)*r12*x4367)));
evalcond[2]=((((-1.0)*x4363))+((r01*x4368))+(((-1.0)*r02*x4367))+(((-1.0)*x4366*x4369)));
evalcond[3]=(((sj11*sj12))+((x4359*x4361))+((r22*x4358))+(((-1.0)*x4362*x4367))+(((-1.0)*cj12*x4360)));
evalcond[4]=(((r01*x4370))+(((-1.0)*cj10*x4365))+((r02*x4358))+(((-1.0)*cj10*sj12*x4360))+(((-1.0)*x4366*x4367)));
evalcond[5]=(((r11*x4370))+(((-1.0)*x4364*x4367))+(((-1.0)*sj10*sj12*x4360))+((r12*x4358))+(((-1.0)*x4363*x4365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4371=((1.0)*gconst107);
CheckValue<IkReal> x4372 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x4371))+((cj10*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4372.valid){
continue;
}
CheckValue<IkReal> x4373=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4371)))),-1);
if(!x4373.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4372.value)+(((1.5707963267949)*(x4373.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4374=IKsin(j14);
IkReal x4375=IKcos(j14);
IkReal x4376=((1.0)*cj11);
IkReal x4377=(gconst106*r21);
IkReal x4378=(gconst107*r20);
IkReal x4379=((1.0)*sj10);
IkReal x4380=(gconst107*r10);
IkReal x4381=(cj12*sj11);
IkReal x4382=(gconst107*r00);
IkReal x4383=((1.0)*x4375);
IkReal x4384=(gconst106*x4374);
IkReal x4385=((1.0)*x4374);
IkReal x4386=(gconst106*x4375);
evalcond[0]=(((x4374*x4377))+(((-1.0)*r22*x4383))+(((-1.0)*x4378*x4385)));
evalcond[1]=((((-1.0)*x4380*x4385))+(((-1.0)*r12*x4383))+cj10+((r11*x4384)));
evalcond[2]=((((-1.0)*r02*x4383))+(((-1.0)*x4382*x4385))+(((-1.0)*x4379))+((r01*x4384)));
evalcond[3]=(((sj11*sj12))+((r22*x4374))+(((-1.0)*cj12*x4376))+((x4375*x4377))+(((-1.0)*x4378*x4383)));
evalcond[4]=(((r02*x4374))+(((-1.0)*x4382*x4383))+(((-1.0)*cj10*x4381))+(((-1.0)*cj10*sj12*x4376))+((r01*x4386)));
evalcond[5]=((((-1.0)*x4379*x4381))+(((-1.0)*x4380*x4383))+((r12*x4374))+(((-1.0)*sj10*sj12*x4376))+((r11*x4386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
IkReal x4387=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x4387;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj15*r00))+((r01*sj15))))));
j14eval[2]=IKsign(x4387);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
IkReal x4388=((1.0)*cj15);
IkReal x4389=((((-1.0)*r01*x4388))+(((-1.0)*r00*sj15)));
j14eval[0]=x4389;
j14eval[1]=((IKabs(r22))+(IKabs((((r21*sj15))+(((-1.0)*r20*x4388))))));
j14eval[2]=IKsign(x4389);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
IkReal x4390=((1.0)*cj15);
IkReal x4391=(r11*sj15);
IkReal x4392=(sj11*sj12);
IkReal x4393=(cj11*cj12);
IkReal x4394=((((-1.0)*r01*x4390))+(((-1.0)*r00*sj15)));
j14eval[0]=x4394;
j14eval[1]=((IKabs((((x4391*x4392))+(((-1.0)*r10*x4390*x4392))+(((-1.0)*x4391*x4393))+((cj15*r10*x4393)))))+(IKabs(((((-1.0)*r12*x4392))+((r12*x4393))))));
j14eval[2]=IKsign(x4394);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4395=((1.0)*cj15);
IkReal x4396=(r11*sj15);
IkReal x4397=(cj11*cj12);
IkReal x4398=(sj11*sj12);
CheckValue<IkReal> x4399=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4395))+(((-1.0)*r00*sj15)))),-1);
if(!x4399.valid){
continue;
}
CheckValue<IkReal> x4400 = IKatan2WithCheck(IkReal(((((-1.0)*x4396*x4397))+((cj15*r10*x4397))+((x4396*x4398))+(((-1.0)*r10*x4395*x4398)))),IkReal(((((-1.0)*r12*x4398))+((r12*x4397)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4400.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4399.value)))+(x4400.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4401=IKcos(j14);
IkReal x4402=IKsin(j14);
IkReal x4403=((1.0)*cj11);
IkReal x4404=(cj15*r20);
IkReal x4405=(cj15*r10);
IkReal x4406=(cj15*r00);
IkReal x4407=((1.0)*x4401);
IkReal x4408=(sj15*x4401);
IkReal x4409=((1.0)*x4402);
IkReal x4410=(sj15*x4402);
evalcond[0]=(((r11*x4408))+((r12*x4402))+(((-1.0)*x4405*x4407)));
evalcond[1]=(((r21*x4410))+(((-1.0)*r22*x4407))+(((-1.0)*x4404*x4409)));
evalcond[2]=(((r01*x4410))+(((-1.0)*r02*x4407))+(((-1.0)*x4406*x4409)));
evalcond[3]=((1.0)+((r11*x4410))+(((-1.0)*r12*x4407))+(((-1.0)*x4405*x4409)));
evalcond[4]=(((sj11*sj12))+((r22*x4402))+((r21*x4408))+(((-1.0)*cj12*x4403))+(((-1.0)*x4404*x4407)));
evalcond[5]=((((-1.0)*sj12*x4403))+(((-1.0)*cj12*sj11))+((r01*x4408))+(((-1.0)*x4406*x4407))+((r02*x4402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4411=((1.0)*cj15);
CheckValue<IkReal> x4412 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj15))+(((-1.0)*r20*x4411)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4412.valid){
continue;
}
CheckValue<IkReal> x4413=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4411))+(((-1.0)*r00*sj15)))),-1);
if(!x4413.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4412.value)+(((1.5707963267949)*(x4413.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4414=IKcos(j14);
IkReal x4415=IKsin(j14);
IkReal x4416=((1.0)*cj11);
IkReal x4417=(cj15*r20);
IkReal x4418=(cj15*r10);
IkReal x4419=(cj15*r00);
IkReal x4420=((1.0)*x4414);
IkReal x4421=(sj15*x4414);
IkReal x4422=((1.0)*x4415);
IkReal x4423=(sj15*x4415);
evalcond[0]=(((r12*x4415))+(((-1.0)*x4418*x4420))+((r11*x4421)));
evalcond[1]=((((-1.0)*x4417*x4422))+(((-1.0)*r22*x4420))+((r21*x4423)));
evalcond[2]=(((r01*x4423))+(((-1.0)*r02*x4420))+(((-1.0)*x4419*x4422)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4420))+(((-1.0)*x4418*x4422))+((r11*x4423)));
evalcond[4]=(((sj11*sj12))+((r22*x4415))+(((-1.0)*x4417*x4420))+((r21*x4421))+(((-1.0)*cj12*x4416)));
evalcond[5]=((((-1.0)*sj12*x4416))+(((-1.0)*cj12*sj11))+((r01*x4421))+((r02*x4415))+(((-1.0)*x4419*x4420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x4424 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj15*r00))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4424.valid){
continue;
}
CheckValue<IkReal> x4425=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x4425.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4424.value)+(((1.5707963267949)*(x4425.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4426=IKcos(j14);
IkReal x4427=IKsin(j14);
IkReal x4428=((1.0)*cj11);
IkReal x4429=(cj15*r20);
IkReal x4430=(cj15*r10);
IkReal x4431=(cj15*r00);
IkReal x4432=((1.0)*x4426);
IkReal x4433=(sj15*x4426);
IkReal x4434=((1.0)*x4427);
IkReal x4435=(sj15*x4427);
evalcond[0]=((((-1.0)*x4430*x4432))+((r11*x4433))+((r12*x4427)));
evalcond[1]=((((-1.0)*x4429*x4434))+(((-1.0)*r22*x4432))+((r21*x4435)));
evalcond[2]=((((-1.0)*r02*x4432))+(((-1.0)*x4431*x4434))+((r01*x4435)));
evalcond[3]=((1.0)+(((-1.0)*x4430*x4434))+(((-1.0)*r12*x4432))+((r11*x4435)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x4429*x4432))+((r22*x4427))+((r21*x4433))+(((-1.0)*cj12*x4428)));
evalcond[5]=(((r02*x4427))+(((-1.0)*cj12*sj11))+(((-1.0)*x4431*x4432))+(((-1.0)*sj12*x4428))+((r01*x4433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x4436=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x4436;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x4436);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x4437=((1.0)*cj15);
IkReal x4438=((((-1.0)*r20*sj15))+(((-1.0)*r21*x4437)));
j14eval[0]=x4438;
j14eval[1]=IKsign(x4438);
j14eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x4437))+((r01*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x4439=cj15*cj15;
IkReal x4440=r11*r11;
IkReal x4441=(r11*sj15);
IkReal x4442=(cj15*r10);
IkReal x4443=((r12*r12)+(((-2.0)*x4441*x4442))+((x4439*(r10*r10)))+x4440+(((-1.0)*x4439*x4440)));
j14eval[0]=x4443;
j14eval[1]=((IKabs(r12))+(IKabs((x4441+(((-1.0)*x4442))))));
j14eval[2]=IKsign(x4443);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4444=cj15*cj15;
IkReal x4445=r11*r11;
IkReal x4446=(r11*sj15);
IkReal x4447=(cj15*r10);
CheckValue<IkReal> x4448 = IKatan2WithCheck(IkReal((x4446+(((-1.0)*x4447)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4448.valid){
continue;
}
CheckValue<IkReal> x4449=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4446*x4447))+(r12*r12)+x4445+((x4444*(r10*r10)))+(((-1.0)*x4444*x4445)))),-1);
if(!x4449.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4448.value)+(((1.5707963267949)*(x4449.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4450=IKcos(j14);
IkReal x4451=IKsin(j14);
IkReal x4452=(cj15*r20);
IkReal x4453=(cj15*r10);
IkReal x4454=(cj15*r00);
IkReal x4455=((1.0)*x4450);
IkReal x4456=(sj15*x4450);
IkReal x4457=((1.0)*x4451);
IkReal x4458=(sj15*x4451);
evalcond[0]=(((r11*x4456))+((r12*x4451))+(((-1.0)*x4453*x4455)));
evalcond[1]=(((r21*x4458))+(((-1.0)*r22*x4455))+(((-1.0)*x4452*x4457)));
evalcond[2]=(((r01*x4458))+(((-1.0)*r02*x4455))+(((-1.0)*x4454*x4457)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x4455))+((r11*x4458))+(((-1.0)*x4453*x4457)));
evalcond[4]=(((r01*x4456))+(((-1.0)*x4454*x4455))+((cj12*sj11))+((r02*x4451))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r21*x4456))+(((-1.0)*cj11*cj12))+((r22*x4451))+(((-1.0)*x4452*x4455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4459=((1.0)*cj15);
CheckValue<IkReal> x4460=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15))+(((-1.0)*r21*x4459)))),-1);
if(!x4460.valid){
continue;
}
CheckValue<IkReal> x4461 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj15))+(((-1.0)*r00*x4459)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4461.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4460.value)))+(x4461.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4462=IKcos(j14);
IkReal x4463=IKsin(j14);
IkReal x4464=(cj15*r20);
IkReal x4465=(cj15*r10);
IkReal x4466=(cj15*r00);
IkReal x4467=((1.0)*x4462);
IkReal x4468=(sj15*x4462);
IkReal x4469=((1.0)*x4463);
IkReal x4470=(sj15*x4463);
evalcond[0]=((((-1.0)*x4465*x4467))+((r12*x4463))+((r11*x4468)));
evalcond[1]=((((-1.0)*x4464*x4469))+((r21*x4470))+(((-1.0)*r22*x4467)));
evalcond[2]=((((-1.0)*r02*x4467))+(((-1.0)*x4466*x4469))+((r01*x4470)));
evalcond[3]=((-1.0)+(((-1.0)*x4465*x4469))+(((-1.0)*r12*x4467))+((r11*x4470)));
evalcond[4]=(((r01*x4468))+(((-1.0)*x4466*x4467))+((cj12*sj11))+((cj11*sj12))+((r02*x4463)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x4464*x4467))+((r22*x4463))+((r21*x4468))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x4471 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4471.valid){
continue;
}
CheckValue<IkReal> x4472=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x4472.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4471.value)+(((1.5707963267949)*(x4472.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4473=IKcos(j14);
IkReal x4474=IKsin(j14);
IkReal x4475=(cj15*r20);
IkReal x4476=(cj15*r10);
IkReal x4477=(cj15*r00);
IkReal x4478=((1.0)*x4473);
IkReal x4479=(sj15*x4473);
IkReal x4480=((1.0)*x4474);
IkReal x4481=(sj15*x4474);
evalcond[0]=((((-1.0)*x4476*x4478))+((r12*x4474))+((r11*x4479)));
evalcond[1]=(((r21*x4481))+(((-1.0)*x4475*x4480))+(((-1.0)*r22*x4478)));
evalcond[2]=(((r01*x4481))+(((-1.0)*x4477*x4480))+(((-1.0)*r02*x4478)));
evalcond[3]=((-1.0)+((r11*x4481))+(((-1.0)*r12*x4478))+(((-1.0)*x4476*x4480)));
evalcond[4]=(((r02*x4474))+((cj12*sj11))+((r01*x4479))+(((-1.0)*x4477*x4478))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x4475*x4478))+((r21*x4479))+((r22*x4474))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4482=((-1.0)*r00);
IkReal x4484 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4484)==0){
continue;
}
IkReal x4483=pow(x4484,-0.5);
CheckValue<IkReal> x4485 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4482),IKFAST_ATAN2_MAGTHRESH);
if(!x4485.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4485.value));
IkReal gconst109=(r01*x4483);
IkReal gconst110=(x4482*x4483);
CheckValue<IkReal> x4486 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4486.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x4486.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x4487=((-1.0)*r00);
IkReal x4488=x4483;
CheckValue<IkReal> x4490 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4487),IKFAST_ATAN2_MAGTHRESH);
if(!x4490.valid){
continue;
}
IkReal x4489=((-1.0)*(x4490.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst109;
cj15=gconst110;
j15=x4489;
IkReal gconst108=x4489;
IkReal gconst109=(r01*x4488);
IkReal gconst110=(x4487*x4488);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4491=((1.0)*gconst109);
CheckValue<IkReal> x4492 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x4491))+((cj10*gconst110*r00))+((gconst110*r10*sj10))+(((-1.0)*cj10*r01*x4491)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4492.valid){
continue;
}
CheckValue<IkReal> x4493=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4491))+(((-1.0)*gconst110*r21)))),-1);
if(!x4493.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4492.value)+(((1.5707963267949)*(x4493.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4494=IKsin(j14);
IkReal x4495=IKcos(j14);
IkReal x4496=((1.0)*cj11);
IkReal x4497=((1.0)*sj10);
IkReal x4498=(cj12*sj11);
IkReal x4499=((1.0)*x4495);
IkReal x4500=(gconst109*x4495);
IkReal x4501=(gconst109*x4494);
IkReal x4502=((1.0)*gconst110*x4494);
evalcond[0]=(((r21*x4501))+(((-1.0)*r22*x4499))+(((-1.0)*r20*x4502)));
evalcond[1]=(((r11*x4501))+cj10+(((-1.0)*r10*x4502))+(((-1.0)*r12*x4499)));
evalcond[2]=((((-1.0)*r00*x4502))+(((-1.0)*r02*x4499))+((r01*x4501))+(((-1.0)*x4497)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x4496))+((r21*x4500))+((r22*x4494))+(((-1.0)*gconst110*r20*x4499)));
evalcond[4]=((((-1.0)*cj10*x4498))+(((-1.0)*gconst110*r00*x4499))+((r02*x4494))+(((-1.0)*cj10*sj12*x4496))+((r01*x4500)));
evalcond[5]=(((r12*x4494))+((r11*x4500))+(((-1.0)*sj10*sj12*x4496))+(((-1.0)*x4497*x4498))+(((-1.0)*gconst110*r10*x4499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4503=((1.0)*gconst110);
CheckValue<IkReal> x4504=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r10))+(((-1.0)*r11*x4503)))),-1);
if(!x4504.valid){
continue;
}
CheckValue<IkReal> x4505 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst109*r21*sj10))+(((-1.0)*r20*sj10*x4503)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4505.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4504.value)))+(x4505.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4506=IKsin(j14);
IkReal x4507=IKcos(j14);
IkReal x4508=((1.0)*cj11);
IkReal x4509=((1.0)*sj10);
IkReal x4510=(cj12*sj11);
IkReal x4511=((1.0)*x4507);
IkReal x4512=(gconst109*x4507);
IkReal x4513=(gconst109*x4506);
IkReal x4514=((1.0)*gconst110*x4506);
evalcond[0]=(((r21*x4513))+(((-1.0)*r20*x4514))+(((-1.0)*r22*x4511)));
evalcond[1]=((((-1.0)*r12*x4511))+(((-1.0)*r10*x4514))+cj10+((r11*x4513)));
evalcond[2]=((((-1.0)*r02*x4511))+(((-1.0)*x4509))+((r01*x4513))+(((-1.0)*r00*x4514)));
evalcond[3]=(((sj11*sj12))+((r22*x4506))+(((-1.0)*cj12*x4508))+(((-1.0)*gconst110*r20*x4511))+((r21*x4512)));
evalcond[4]=(((r02*x4506))+((r01*x4512))+(((-1.0)*cj10*x4510))+(((-1.0)*gconst110*r00*x4511))+(((-1.0)*cj10*sj12*x4508)));
evalcond[5]=(((r12*x4506))+((r11*x4512))+(((-1.0)*gconst110*r10*x4511))+(((-1.0)*x4509*x4510))+(((-1.0)*sj10*sj12*x4508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4515=((-1.0)*r01);
IkReal x4517 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4517)==0){
continue;
}
IkReal x4516=pow(x4517,-0.5);
CheckValue<IkReal> x4518 = IKatan2WithCheck(IkReal(x4515),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4518.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4518.value))));
IkReal gconst112=(x4515*x4516);
IkReal gconst113=((1.0)*r00*x4516);
CheckValue<IkReal> x4519 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4519.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x4519.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[5];
IkReal x4520=((-1.0)*r01);
CheckValue<IkReal> x4523 = IKatan2WithCheck(IkReal(x4520),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4523.valid){
continue;
}
IkReal x4521=((1.0)*(x4523.value));
IkReal x4522=x4516;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst112;
cj15=gconst113;
j15=((3.14159265)+(((-1.0)*x4521)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4521)));
IkReal gconst112=(x4520*x4522);
IkReal gconst113=((1.0)*r00*x4522);
j14eval[0]=0;
j14eval[1]=cj10;
j14eval[2]=r22;
j14eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j14eval[4]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  || IKabs(j14eval[4]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x4524=((-1.0)*r01);
CheckValue<IkReal> x4527 = IKatan2WithCheck(IkReal(x4524),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4527.valid){
continue;
}
IkReal x4525=((1.0)*(x4527.value));
IkReal x4526=x4516;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst112;
cj15=gconst113;
j15=((3.14159265)+(((-1.0)*x4525)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4525)));
IkReal gconst112=(x4524*x4526);
IkReal gconst113=((1.0)*r00*x4526);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x4528=((-1.0)*r01);
CheckValue<IkReal> x4531 = IKatan2WithCheck(IkReal(x4528),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4531.valid){
continue;
}
IkReal x4529=((1.0)*(x4531.value));
IkReal x4530=x4516;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst112;
cj15=gconst113;
j15=((3.14159265)+(((-1.0)*x4529)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4529)));
IkReal gconst112=(x4528*x4530);
IkReal gconst113=((1.0)*r00*x4530);
IkReal x4532=r02*r02;
IkReal x4533=(r12*sj10);
IkReal x4534=x4516;
IkReal x4535=(cj10*x4534);
j14eval[0]=((IKabs(((((-1.0)*x4535))+((r02*x4533*x4534))+((x4532*x4535)))))+(IKabs(((((-1.0)*x4533))+(((-1.0)*cj10*r02))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4536=((1.0)*gconst112);
CheckValue<IkReal> x4537=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4536))+(((-1.0)*gconst113*r21)))),-1);
if(!x4537.valid){
continue;
}
CheckValue<IkReal> x4538 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x4536))+(((-1.0)*r11*sj10*x4536))+((cj10*gconst113*r00))+((gconst113*r10*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4538.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4537.value)))+(x4538.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4539=IKsin(j14);
IkReal x4540=IKcos(j14);
IkReal x4541=((1.0)*cj11);
IkReal x4542=((1.0)*sj10);
IkReal x4543=(gconst113*r10);
IkReal x4544=(gconst113*r00);
IkReal x4545=(cj12*sj11);
IkReal x4546=(gconst113*r20);
IkReal x4547=((1.0)*x4540);
IkReal x4548=(gconst112*x4540);
IkReal x4549=((1.0)*x4539);
IkReal x4550=(gconst112*x4539);
evalcond[0]=((((-1.0)*x4546*x4549))+(((-1.0)*r22*x4547))+((r21*x4550)));
evalcond[1]=(((r11*x4550))+(((-1.0)*r12*x4547))+cj10+(((-1.0)*x4543*x4549)));
evalcond[2]=((((-1.0)*r02*x4547))+((r01*x4550))+(((-1.0)*x4544*x4549))+(((-1.0)*x4542)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x4546*x4547))+(((-1.0)*cj12*x4541))+((r22*x4539))+((r21*x4548)));
evalcond[4]=((((-1.0)*x4544*x4547))+((r01*x4548))+(((-1.0)*cj10*x4545))+(((-1.0)*cj10*sj12*x4541))+((r02*x4539)));
evalcond[5]=(((r12*x4539))+(((-1.0)*x4542*x4545))+((r11*x4548))+(((-1.0)*sj10*sj12*x4541))+(((-1.0)*x4543*x4547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4551=((1.0)*gconst113);
CheckValue<IkReal> x4552 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst112*r21*sj10))+(((-1.0)*r20*sj10*x4551)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4552.valid){
continue;
}
CheckValue<IkReal> x4553=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4551))+(((-1.0)*gconst112*r10)))),-1);
if(!x4553.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4552.value)+(((1.5707963267949)*(x4553.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4554=IKsin(j14);
IkReal x4555=IKcos(j14);
IkReal x4556=((1.0)*cj11);
IkReal x4557=((1.0)*sj10);
IkReal x4558=(gconst113*r10);
IkReal x4559=(gconst113*r00);
IkReal x4560=(cj12*sj11);
IkReal x4561=(gconst113*r20);
IkReal x4562=((1.0)*x4555);
IkReal x4563=(gconst112*x4555);
IkReal x4564=((1.0)*x4554);
IkReal x4565=(gconst112*x4554);
evalcond[0]=(((r21*x4565))+(((-1.0)*r22*x4562))+(((-1.0)*x4561*x4564)));
evalcond[1]=(((r11*x4565))+cj10+(((-1.0)*r12*x4562))+(((-1.0)*x4558*x4564)));
evalcond[2]=((((-1.0)*x4557))+(((-1.0)*r02*x4562))+(((-1.0)*x4559*x4564))+((r01*x4565)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x4556))+((r21*x4563))+((r22*x4554))+(((-1.0)*x4561*x4562)));
evalcond[4]=((((-1.0)*cj10*sj12*x4556))+((r02*x4554))+(((-1.0)*x4559*x4562))+((r01*x4563))+(((-1.0)*cj10*x4560)));
evalcond[5]=(((r11*x4563))+(((-1.0)*sj10*sj12*x4556))+((r12*x4554))+(((-1.0)*x4558*x4562))+(((-1.0)*x4557*x4560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4566=((1.0)*gconst113);
CheckValue<IkReal> x4567=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4566))+(((-1.0)*gconst112*r00)))),-1);
if(!x4567.valid){
continue;
}
CheckValue<IkReal> x4568 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x4566))+((cj10*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4568.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4567.value)))+(x4568.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4569=IKsin(j14);
IkReal x4570=IKcos(j14);
IkReal x4571=((1.0)*cj11);
IkReal x4572=((1.0)*sj10);
IkReal x4573=(gconst113*r10);
IkReal x4574=(gconst113*r00);
IkReal x4575=(cj12*sj11);
IkReal x4576=(gconst113*r20);
IkReal x4577=((1.0)*x4570);
IkReal x4578=(gconst112*x4570);
IkReal x4579=((1.0)*x4569);
IkReal x4580=(gconst112*x4569);
evalcond[0]=(((r21*x4580))+(((-1.0)*x4576*x4579))+(((-1.0)*r22*x4577)));
evalcond[1]=(cj10+((r11*x4580))+(((-1.0)*x4573*x4579))+(((-1.0)*r12*x4577)));
evalcond[2]=((((-1.0)*x4572))+(((-1.0)*r02*x4577))+(((-1.0)*x4574*x4579))+((r01*x4580)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x4576*x4577))+((r22*x4569))+(((-1.0)*cj12*x4571))+((r21*x4578)));
evalcond[4]=((((-1.0)*cj10*sj12*x4571))+((r02*x4569))+(((-1.0)*x4574*x4577))+((r01*x4578))+(((-1.0)*cj10*x4575)));
evalcond[5]=(((r12*x4569))+((r11*x4578))+(((-1.0)*x4572*x4575))+(((-1.0)*x4573*x4577))+(((-1.0)*sj10*sj12*x4571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x4581=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x4581;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x4581);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x4582=((1.0)*cj15);
IkReal x4583=((((-1.0)*r11*x4582))+(((-1.0)*r10*sj15)));
j14eval[0]=x4583;
j14eval[1]=IKsign(x4583);
j14eval[2]=((IKabs(r22))+(IKabs((((r21*sj15))+(((-1.0)*r20*x4582))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x4584=cj15*cj15;
IkReal x4585=r01*r01;
IkReal x4586=(cj15*r00);
IkReal x4587=(r01*sj15);
IkReal x4588=((((-2.0)*x4586*x4587))+(((-1.0)*x4584*x4585))+x4585+((x4584*(r00*r00)))+(r02*r02));
j14eval[0]=x4588;
j14eval[1]=((IKabs(r02))+(IKabs((x4587+(((-1.0)*x4586))))));
j14eval[2]=IKsign(x4588);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4589=cj15*cj15;
IkReal x4590=r01*r01;
IkReal x4591=(r01*sj15);
IkReal x4592=(cj15*r00);
CheckValue<IkReal> x4593=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4589*x4590))+(((-2.0)*x4591*x4592))+x4590+((x4589*(r00*r00)))+(r02*r02))),-1);
if(!x4593.valid){
continue;
}
CheckValue<IkReal> x4594 = IKatan2WithCheck(IkReal((x4591+(((-1.0)*x4592)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4594.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4593.value)))+(x4594.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4595=IKcos(j14);
IkReal x4596=IKsin(j14);
IkReal x4597=((1.0)*cj11);
IkReal x4598=(cj15*r20);
IkReal x4599=(cj15*r10);
IkReal x4600=(cj15*r00);
IkReal x4601=((1.0)*x4595);
IkReal x4602=(sj15*x4595);
IkReal x4603=((1.0)*x4596);
IkReal x4604=(sj15*x4596);
evalcond[0]=((((-1.0)*x4600*x4601))+((r01*x4602))+((r02*x4596)));
evalcond[1]=(((r21*x4604))+(((-1.0)*x4598*x4603))+(((-1.0)*r22*x4601)));
evalcond[2]=(((r11*x4604))+(((-1.0)*x4599*x4603))+(((-1.0)*r12*x4601)));
evalcond[3]=((-1.0)+(((-1.0)*x4600*x4603))+((r01*x4604))+(((-1.0)*r02*x4601)));
evalcond[4]=(((sj11*sj12))+((r22*x4596))+((r21*x4602))+(((-1.0)*x4598*x4601))+(((-1.0)*cj12*x4597)));
evalcond[5]=(((r11*x4602))+(((-1.0)*sj12*x4597))+(((-1.0)*cj12*sj11))+(((-1.0)*x4599*x4601))+((r12*x4596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4605=((1.0)*cj15);
CheckValue<IkReal> x4606=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4605))+(((-1.0)*r10*sj15)))),-1);
if(!x4606.valid){
continue;
}
CheckValue<IkReal> x4607 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4605))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4607.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4606.value)))+(x4607.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4608=IKcos(j14);
IkReal x4609=IKsin(j14);
IkReal x4610=((1.0)*cj11);
IkReal x4611=(cj15*r20);
IkReal x4612=(cj15*r10);
IkReal x4613=(cj15*r00);
IkReal x4614=((1.0)*x4608);
IkReal x4615=(sj15*x4608);
IkReal x4616=((1.0)*x4609);
IkReal x4617=(sj15*x4609);
evalcond[0]=(((r01*x4615))+((r02*x4609))+(((-1.0)*x4613*x4614)));
evalcond[1]=(((r21*x4617))+(((-1.0)*x4611*x4616))+(((-1.0)*r22*x4614)));
evalcond[2]=((((-1.0)*x4612*x4616))+((r11*x4617))+(((-1.0)*r12*x4614)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4614))+((r01*x4617))+(((-1.0)*x4613*x4616)));
evalcond[4]=(((sj11*sj12))+((r21*x4615))+(((-1.0)*cj12*x4610))+(((-1.0)*x4611*x4614))+((r22*x4609)));
evalcond[5]=((((-1.0)*x4612*x4614))+((r12*x4609))+(((-1.0)*cj12*sj11))+((r11*x4615))+(((-1.0)*sj12*x4610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x4618=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x4618.valid){
continue;
}
CheckValue<IkReal> x4619 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4619.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4618.value)))+(x4619.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4620=IKcos(j14);
IkReal x4621=IKsin(j14);
IkReal x4622=((1.0)*cj11);
IkReal x4623=(cj15*r20);
IkReal x4624=(cj15*r10);
IkReal x4625=(cj15*r00);
IkReal x4626=((1.0)*x4620);
IkReal x4627=(sj15*x4620);
IkReal x4628=((1.0)*x4621);
IkReal x4629=(sj15*x4621);
evalcond[0]=((((-1.0)*x4625*x4626))+((r02*x4621))+((r01*x4627)));
evalcond[1]=((((-1.0)*r22*x4626))+(((-1.0)*x4623*x4628))+((r21*x4629)));
evalcond[2]=(((r11*x4629))+(((-1.0)*r12*x4626))+(((-1.0)*x4624*x4628)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4626))+(((-1.0)*x4625*x4628))+((r01*x4629)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x4622))+(((-1.0)*x4623*x4626))+((r22*x4621))+((r21*x4627)));
evalcond[5]=(((r12*x4621))+(((-1.0)*sj12*x4622))+((r11*x4627))+(((-1.0)*cj12*sj11))+(((-1.0)*x4624*x4626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x4630=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x4630;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x4630);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x4631=((1.0)*cj15);
IkReal x4632=((((-1.0)*r21*x4631))+(((-1.0)*r20*sj15)));
j14eval[0]=x4632;
j14eval[1]=IKsign(x4632);
j14eval[2]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*r10*x4631))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x4633=r01*r01;
IkReal x4634=cj15*cj15;
IkReal x4635=(r01*sj15);
IkReal x4636=(cj15*r00);
IkReal x4637=((((-1.0)*x4634*(r00*r00)))+(((-1.0)*x4633))+(((2.0)*x4635*x4636))+((x4633*x4634))+(((-1.0)*(r02*r02))));
j14eval[0]=x4637;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x4636))+x4635))));
j14eval[2]=IKsign(x4637);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4638=r01*r01;
IkReal x4639=cj15*cj15;
IkReal x4640=(cj15*r00);
IkReal x4641=(r01*sj15);
CheckValue<IkReal> x4642=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4638))+((x4638*x4639))+(((-1.0)*(r02*r02)))+(((-1.0)*x4639*(r00*r00)))+(((2.0)*x4640*x4641)))),-1);
if(!x4642.valid){
continue;
}
CheckValue<IkReal> x4643 = IKatan2WithCheck(IkReal((x4641+(((-1.0)*x4640)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4643.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4642.value)))+(x4643.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4644=IKcos(j14);
IkReal x4645=IKsin(j14);
IkReal x4646=(cj15*r20);
IkReal x4647=(cj15*r10);
IkReal x4648=(cj15*r00);
IkReal x4649=((1.0)*x4644);
IkReal x4650=(sj15*x4644);
IkReal x4651=((1.0)*x4645);
IkReal x4652=(sj15*x4645);
evalcond[0]=(((r02*x4645))+(((-1.0)*x4648*x4649))+((r01*x4650)));
evalcond[1]=((((-1.0)*r22*x4649))+(((-1.0)*x4646*x4651))+((r21*x4652)));
evalcond[2]=(((r11*x4652))+(((-1.0)*x4647*x4651))+(((-1.0)*r12*x4649)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4649))+(((-1.0)*x4648*x4651))+((r01*x4652)));
evalcond[4]=((((-1.0)*x4647*x4649))+((r11*x4650))+((r12*x4645))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r22*x4645))+(((-1.0)*x4646*x4649))+((r21*x4650))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4653=((1.0)*cj15);
CheckValue<IkReal> x4654=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4653))+(((-1.0)*r20*sj15)))),-1);
if(!x4654.valid){
continue;
}
CheckValue<IkReal> x4655 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*r10*x4653)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4655.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4654.value)))+(x4655.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4656=IKcos(j14);
IkReal x4657=IKsin(j14);
IkReal x4658=(cj15*r20);
IkReal x4659=(cj15*r10);
IkReal x4660=(cj15*r00);
IkReal x4661=((1.0)*x4656);
IkReal x4662=(sj15*x4656);
IkReal x4663=((1.0)*x4657);
IkReal x4664=(sj15*x4657);
evalcond[0]=((((-1.0)*x4660*x4661))+((r01*x4662))+((r02*x4657)));
evalcond[1]=((((-1.0)*x4658*x4663))+((r21*x4664))+(((-1.0)*r22*x4661)));
evalcond[2]=((((-1.0)*x4659*x4663))+((r11*x4664))+(((-1.0)*r12*x4661)));
evalcond[3]=((1.0)+(((-1.0)*x4660*x4663))+((r01*x4664))+(((-1.0)*r02*x4661)));
evalcond[4]=(((r12*x4657))+(((-1.0)*x4659*x4661))+((r11*x4662))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x4658*x4661))+((r21*x4662))+((r22*x4657))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x4665=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x4665.valid){
continue;
}
CheckValue<IkReal> x4666 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4666.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4665.value)))+(x4666.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4667=IKcos(j14);
IkReal x4668=IKsin(j14);
IkReal x4669=(cj15*r20);
IkReal x4670=(cj15*r10);
IkReal x4671=(cj15*r00);
IkReal x4672=((1.0)*x4667);
IkReal x4673=(sj15*x4667);
IkReal x4674=((1.0)*x4668);
IkReal x4675=(sj15*x4668);
evalcond[0]=(((r02*x4668))+(((-1.0)*x4671*x4672))+((r01*x4673)));
evalcond[1]=(((r21*x4675))+(((-1.0)*r22*x4672))+(((-1.0)*x4669*x4674)));
evalcond[2]=(((r11*x4675))+(((-1.0)*r12*x4672))+(((-1.0)*x4670*x4674)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4672))+(((-1.0)*x4671*x4674))+((r01*x4675)));
evalcond[4]=(((r12*x4668))+((r11*x4673))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*x4670*x4672)));
evalcond[5]=(((sj11*sj12))+((r21*x4673))+((r22*x4668))+(((-1.0)*x4669*x4672))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x4676=((-1.0)*px);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4676);
rxp1_1=(px*r21);
rxp1_2=(r11*x4676);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x4677=((-1.0)*px);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4677);
rxp1_1=(px*r21);
rxp1_2=(r11*x4677);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=((((-1.0)*cj15*r20))+((r21*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x4678=((-1.0)*px);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4678);
rxp1_1=(px*r21);
rxp1_2=(r11*x4678);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=(((r11*sj15))+(((-1.0)*cj15*r10)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x4681=IKPowWithIntegerCheck((((r11*sj15))+(((-1.0)*cj15*r10))),-1);
if(!x4681.valid){
continue;
}
IkReal x4679=x4681.value;
IkReal x4680=(sj10*x4679);
cj14array[0]=(((cj12*sj11*x4680))+((cj11*sj12*x4680)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x4682=IKsin(j14);
IkReal x4683=IKcos(j14);
IkReal x4684=(sj15*x4682);
IkReal x4685=((1.0)*x4683);
IkReal x4686=((1.0)*cj15*x4682);
evalcond[0]=(r02*x4682);
evalcond[1]=((((-1.0)*r02*x4685))+(((-1.0)*sj10)));
evalcond[2]=(((r21*x4684))+(((-1.0)*r20*x4686)));
evalcond[3]=(((r11*x4684))+(((-1.0)*r10*x4686)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj15*r20*x4685))+(((-1.0)*cj11*cj12))+((r21*sj15*x4683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x4688=IKPowWithIntegerCheck(((((-1.0)*cj15*r20))+((r21*sj15))),-1);
if(!x4688.valid){
continue;
}
IkReal x4687=x4688.value;
cj14array[0]=(((cj11*cj12*x4687))+(((-1.0)*sj11*sj12*x4687)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x4689=IKsin(j14);
IkReal x4690=IKcos(j14);
IkReal x4691=(cj15*r10);
IkReal x4692=((1.0)*sj10);
IkReal x4693=(sj15*x4689);
IkReal x4694=((1.0)*x4690);
IkReal x4695=((1.0)*x4689);
evalcond[0]=(r02*x4689);
evalcond[1]=((((-1.0)*r02*x4694))+(((-1.0)*x4692)));
evalcond[2]=(((r21*x4693))+(((-1.0)*cj15*r20*x4695)));
evalcond[3]=(((r11*x4693))+(((-1.0)*x4691*x4695)));
evalcond[4]=((((-1.0)*cj12*sj11*x4692))+((r11*sj15*x4690))+(((-1.0)*x4691*x4694))+(((-1.0)*cj11*sj12*x4692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x4696=IKPowWithIntegerCheck(r02,-1);
if(!x4696.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x4696.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x4697=IKsin(j14);
IkReal x4698=IKcos(j14);
IkReal x4699=((1.0)*cj15);
IkReal x4700=((1.0)*cj11);
IkReal x4701=(sj15*x4697);
IkReal x4702=(sj15*x4698);
evalcond[0]=(r02*x4697);
evalcond[1]=(((r21*x4701))+(((-1.0)*r20*x4697*x4699)));
evalcond[2]=((((-1.0)*r10*x4697*x4699))+((r11*x4701)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x4700))+((r21*x4702))+(((-1.0)*r20*x4698*x4699)));
evalcond[4]=((((-1.0)*cj12*sj10*sj11))+(((-1.0)*sj10*sj12*x4700))+((r11*x4702))+(((-1.0)*r10*x4698*x4699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4703=((1.0)*sj15);
CheckValue<IkReal> x4704 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((cj15*r10*sj10))+(((-1.0)*r11*sj10*x4703))+(((-1.0)*cj10*r01*x4703))+((cj10*cj15*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4704.valid){
continue;
}
CheckValue<IkReal> x4705=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj15*r21))+(((-1.0)*r20*x4703)))),-1);
if(!x4705.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4704.value)+(((1.5707963267949)*(x4705.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4706=IKsin(j14);
IkReal x4707=IKcos(j14);
IkReal x4708=((1.0)*cj11);
IkReal x4709=(cj15*r20);
IkReal x4710=((1.0)*sj10);
IkReal x4711=(cj15*r10);
IkReal x4712=(cj12*sj11);
IkReal x4713=(cj15*r00);
IkReal x4714=((1.0)*x4707);
IkReal x4715=(sj15*x4707);
IkReal x4716=((1.0)*x4706);
IkReal x4717=(sj15*x4706);
evalcond[0]=((((-1.0)*x4709*x4716))+(((-1.0)*r22*x4714))+((r21*x4717)));
evalcond[1]=((((-1.0)*x4711*x4716))+cj10+(((-1.0)*r12*x4714))+((r11*x4717)));
evalcond[2]=((((-1.0)*r02*x4714))+((r01*x4717))+(((-1.0)*x4713*x4716))+(((-1.0)*x4710)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x4709*x4714))+(((-1.0)*cj12*x4708))+((r21*x4715))+((r22*x4706)));
evalcond[4]=(((r01*x4715))+(((-1.0)*cj10*x4712))+(((-1.0)*cj10*sj12*x4708))+((r02*x4706))+(((-1.0)*x4713*x4714)));
evalcond[5]=((((-1.0)*x4710*x4712))+(((-1.0)*sj10*sj12*x4708))+(((-1.0)*x4711*x4714))+((r11*x4715))+((r12*x4706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4718=((1.0)*cj15);
CheckValue<IkReal> x4719=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4718))+(((-1.0)*r10*sj15)))),-1);
if(!x4719.valid){
continue;
}
CheckValue<IkReal> x4720 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x4718))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4720.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4719.value)))+(x4720.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4721=IKsin(j14);
IkReal x4722=IKcos(j14);
IkReal x4723=((1.0)*cj11);
IkReal x4724=(cj15*r20);
IkReal x4725=((1.0)*sj10);
IkReal x4726=(cj15*r10);
IkReal x4727=(cj12*sj11);
IkReal x4728=(cj15*r00);
IkReal x4729=((1.0)*x4722);
IkReal x4730=(sj15*x4722);
IkReal x4731=((1.0)*x4721);
IkReal x4732=(sj15*x4721);
evalcond[0]=(((r21*x4732))+(((-1.0)*x4724*x4731))+(((-1.0)*r22*x4729)));
evalcond[1]=(((r11*x4732))+(((-1.0)*r12*x4729))+cj10+(((-1.0)*x4726*x4731)));
evalcond[2]=((((-1.0)*x4728*x4731))+(((-1.0)*x4725))+(((-1.0)*r02*x4729))+((r01*x4732)));
evalcond[3]=(((sj11*sj12))+((r21*x4730))+(((-1.0)*x4724*x4729))+(((-1.0)*cj12*x4723))+((r22*x4721)));
evalcond[4]=((((-1.0)*x4728*x4729))+(((-1.0)*cj10*sj12*x4723))+((r02*x4721))+(((-1.0)*cj10*x4727))+((r01*x4730)));
evalcond[5]=(((r11*x4730))+(((-1.0)*x4725*x4727))+(((-1.0)*x4726*x4729))+(((-1.0)*sj10*sj12*x4723))+((r12*x4721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4733=((1.0)*cj15);
CheckValue<IkReal> x4734=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4733))+(((-1.0)*r00*sj15)))),-1);
if(!x4734.valid){
continue;
}
CheckValue<IkReal> x4735 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x4733))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4735.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4734.value)))+(x4735.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4736=IKsin(j14);
IkReal x4737=IKcos(j14);
IkReal x4738=((1.0)*cj11);
IkReal x4739=(cj15*r20);
IkReal x4740=((1.0)*sj10);
IkReal x4741=(cj15*r10);
IkReal x4742=(cj12*sj11);
IkReal x4743=(cj15*r00);
IkReal x4744=((1.0)*x4737);
IkReal x4745=(sj15*x4737);
IkReal x4746=((1.0)*x4736);
IkReal x4747=(sj15*x4736);
evalcond[0]=((((-1.0)*r22*x4744))+((r21*x4747))+(((-1.0)*x4739*x4746)));
evalcond[1]=(((r11*x4747))+(((-1.0)*r12*x4744))+cj10+(((-1.0)*x4741*x4746)));
evalcond[2]=(((r01*x4747))+(((-1.0)*x4740))+(((-1.0)*x4743*x4746))+(((-1.0)*r02*x4744)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x4738))+((r22*x4736))+((r21*x4745))+(((-1.0)*x4739*x4744)));
evalcond[4]=((((-1.0)*cj10*sj12*x4738))+((r01*x4745))+((r02*x4736))+(((-1.0)*cj10*x4742))+(((-1.0)*x4743*x4744)));
evalcond[5]=(((r11*x4745))+(((-1.0)*x4740*x4742))+(((-1.0)*x4741*x4744))+(((-1.0)*sj10*sj12*x4738))+((r12*x4736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x4748=((1.0)*cj15);
IkReal x4749=((1.0)*sj15);
IkReal x4750=((((-1.0)*cj11*sj12))+(((-1.0)*cj12*sj11)));
j10eval[0]=x4750;
j10eval[1]=IKsign(x4750);
j10eval[2]=((IKabs(((((-1.0)*r00*x4749))+(((-1.0)*r01*x4748)))))+(IKabs(((((-1.0)*r10*x4749))+(((-1.0)*r11*x4748))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x4751=r21*r21;
IkReal x4752=cj15*cj15;
IkReal x4753=(cj12*sj11);
IkReal x4754=(cj15*r20);
IkReal x4755=(r21*sj15);
IkReal x4756=(cj11*sj12);
IkReal x4757=((((2.0)*x4754*x4755))+((x4751*x4752))+(((-1.0)*(r22*r22)))+(((-1.0)*x4752*(r20*r20)))+(((-1.0)*x4751)));
j14eval[0]=x4757;
j14eval[1]=((IKabs((((r22*x4753))+((r22*x4756)))))+(IKabs((((x4753*x4755))+((x4755*x4756))+(((-1.0)*x4754*x4756))+(((-1.0)*x4753*x4754))))));
j14eval[2]=IKsign(x4757);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=0;
cj13=1.0;
j13=0;
IkReal x4758=cj11*cj11;
IkReal x4759=(cj12*sj12);
IkReal x4760=(cj12*sj11);
IkReal x4761=(cj11*sj11);
j10eval[0]=((((-1.14255568581477)*cj11*x4760))+(((-2.0)*x4758*x4759))+x4759+x4761+(((-1.14255568581477)*sj12*x4758))+(((-2.0)*cj11*cj12*x4760)));
j10eval[1]=((((-1.0)*x4760))+(((-1.0)*cj11*sj12)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((2.06387083990023)*py))+(((-0.507498115261088)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.06387083990023)*px))+(((0.507498115261088)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.06387083990023)*py))+(((-0.507498115261088)*px))))+IKsqr(((((2.06387083990023)*px))+(((0.507498115261088)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((2.06387083990023)*py))+(((-0.507498115261088)*px))), ((((2.06387083990023)*px))+(((0.507498115261088)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x4762=IKsin(j10);
IkReal x4763=IKcos(j10);
evalcond[0]=((((-1.0)*px))+(((0.4569)*x4763))+(((-0.11235)*x4762)));
evalcond[1]=((((0.11235)*x4763))+(((-1.0)*py))+(((0.4569)*x4762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x4764=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x4764;
j14eval[1]=IKsign(x4764);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x4765=((1.0)*cj15);
IkReal x4766=((((-1.0)*r00*sj15))+(((-1.0)*r01*x4765)));
j14eval[0]=x4766;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x4765))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x4766);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x4767=((1.0)*cj15);
IkReal x4768=((((-1.0)*r00*sj15))+(((-1.0)*r01*x4767)));
j14eval[0]=x4768;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x4767))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x4768);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4769=((1.0)*cj15);
CheckValue<IkReal> x4770 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj10*x4769))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4770.valid){
continue;
}
CheckValue<IkReal> x4771=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x4769)))),-1);
if(!x4771.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4770.value)+(((1.5707963267949)*(x4771.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4772=IKcos(j14);
IkReal x4773=IKsin(j14);
IkReal x4774=((1.0)*sj10);
IkReal x4775=(sj15*x4773);
IkReal x4776=((1.0)*x4772);
IkReal x4777=(sj15*x4772);
IkReal x4778=((1.0)*cj15*x4773);
evalcond[0]=((((-1.0)*cj15*r20*x4776))+((r21*x4777))+((r22*x4773)));
evalcond[1]=((((-1.0)*r20*x4778))+(((-1.0)*r22*x4776))+((r21*x4775)));
evalcond[2]=(((r11*x4775))+(((-1.0)*r12*x4776))+cj10+(((-1.0)*r10*x4778)));
evalcond[3]=(((r01*x4777))+(((-1.0)*cj15*r00*x4776))+((r02*x4773))+(((-1.0)*cj10)));
evalcond[4]=(((r11*x4777))+((r12*x4773))+(((-1.0)*x4774))+(((-1.0)*cj15*r10*x4776)));
evalcond[5]=(((r01*x4775))+(((-1.0)*r00*x4778))+(((-1.0)*x4774))+(((-1.0)*r02*x4776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4779=((1.0)*cj15);
CheckValue<IkReal> x4780 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x4779))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4780.valid){
continue;
}
CheckValue<IkReal> x4781=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4779))+(((-1.0)*r00*sj15)))),-1);
if(!x4781.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4780.value)+(((1.5707963267949)*(x4781.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4782=IKcos(j14);
IkReal x4783=IKsin(j14);
IkReal x4784=((1.0)*sj10);
IkReal x4785=(sj15*x4783);
IkReal x4786=((1.0)*x4782);
IkReal x4787=(sj15*x4782);
IkReal x4788=((1.0)*cj15*x4783);
evalcond[0]=(((r22*x4783))+(((-1.0)*cj15*r20*x4786))+((r21*x4787)));
evalcond[1]=((((-1.0)*r20*x4788))+(((-1.0)*r22*x4786))+((r21*x4785)));
evalcond[2]=(((r11*x4785))+cj10+(((-1.0)*r10*x4788))+(((-1.0)*r12*x4786)));
evalcond[3]=(((r02*x4783))+(((-1.0)*cj15*r00*x4786))+((r01*x4787))+(((-1.0)*cj10)));
evalcond[4]=(((r12*x4783))+((r11*x4787))+(((-1.0)*cj15*r10*x4786))+(((-1.0)*x4784)));
evalcond[5]=(((r01*x4785))+(((-1.0)*r00*x4788))+(((-1.0)*r02*x4786))+(((-1.0)*x4784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x4789=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x4789.valid){
continue;
}
CheckValue<IkReal> x4790 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4790.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4789.value)))+(x4790.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4791=IKcos(j14);
IkReal x4792=IKsin(j14);
IkReal x4793=((1.0)*sj10);
IkReal x4794=(sj15*x4792);
IkReal x4795=((1.0)*x4791);
IkReal x4796=(sj15*x4791);
IkReal x4797=((1.0)*cj15*x4792);
evalcond[0]=(((r21*x4796))+(((-1.0)*cj15*r20*x4795))+((r22*x4792)));
evalcond[1]=(((r21*x4794))+(((-1.0)*r22*x4795))+(((-1.0)*r20*x4797)));
evalcond[2]=(cj10+(((-1.0)*r12*x4795))+((r11*x4794))+(((-1.0)*r10*x4797)));
evalcond[3]=(((r01*x4796))+(((-1.0)*cj15*r00*x4795))+((r02*x4792))+(((-1.0)*cj10)));
evalcond[4]=((((-1.0)*x4793))+((r11*x4796))+((r12*x4792))+(((-1.0)*cj15*r10*x4795)));
evalcond[5]=(((r01*x4794))+(((-1.0)*r02*x4795))+(((-1.0)*x4793))+(((-1.0)*r00*x4797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-8.29354345611924)*px))+(((2.24409186529617)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.24409186529617)*px))+(((8.29354345611924)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.29354345611924)*px))+(((2.24409186529617)*py))))+IKsqr(((((2.24409186529617)*px))+(((8.29354345611924)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-8.29354345611924)*px))+(((2.24409186529617)*py))), ((((2.24409186529617)*px))+(((8.29354345611924)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x4798=IKcos(j10);
IkReal x4799=IKsin(j10);
evalcond[0]=((((0.0304)*x4798))+(((-1.0)*px))+(((-0.11235)*x4799)));
evalcond[1]=((((0.0304)*x4799))+(((-1.0)*py))+(((0.11235)*x4798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x4800=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x4800;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x4800);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x4801=((1.0)*cj15);
IkReal x4802=((((-1.0)*r11*x4801))+(((-1.0)*r10*sj15)));
j14eval[0]=x4802;
j14eval[1]=IKsign(x4802);
j14eval[2]=((IKabs((cj10*r22)))+(IKabs((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x4801))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x4803=cj15*cj15;
IkReal x4804=(cj15*sj15);
IkReal x4805=(r01*r21);
IkReal x4806=((1.0)*r20);
IkReal x4807=((((-1.0)*r02*r22))+(((-1.0)*r00*x4803*x4806))+((r01*r20*x4804))+((x4803*x4805))+((r00*r21*x4804))+(((-1.0)*x4805)));
j14eval[0]=x4807;
j14eval[1]=((IKabs(((((-1.0)*cj10*cj15*x4806))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x4807);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4808=cj15*cj15;
IkReal x4809=(cj15*sj15);
IkReal x4810=(r01*r21);
IkReal x4811=((1.0)*r20);
CheckValue<IkReal> x4812 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*x4811))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4812.valid){
continue;
}
CheckValue<IkReal> x4813=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((x4808*x4810))+(((-1.0)*x4810))+((r01*r20*x4809))+((r00*r21*x4809))+(((-1.0)*r00*x4808*x4811)))),-1);
if(!x4813.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4812.value)+(((1.5707963267949)*(x4813.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4814=IKcos(j14);
IkReal x4815=IKsin(j14);
IkReal x4816=(cj15*r00);
IkReal x4817=(cj15*r10);
IkReal x4818=(cj15*r20);
IkReal x4819=(sj15*x4815);
IkReal x4820=((1.0)*x4814);
IkReal x4821=(sj15*x4814);
IkReal x4822=((1.0)*x4815);
evalcond[0]=(((r21*x4821))+(((-1.0)*x4818*x4820))+((r22*x4815)));
evalcond[1]=(((r21*x4819))+(((-1.0)*r22*x4820))+(((-1.0)*x4818*x4822)));
evalcond[2]=((((-1.0)*x4816*x4820))+((r02*x4815))+cj10+((r01*x4821)));
evalcond[3]=(((r11*x4821))+(((-1.0)*x4817*x4820))+((r12*x4815))+sj10);
evalcond[4]=(((r11*x4819))+(((-1.0)*x4817*x4822))+cj10+(((-1.0)*r12*x4820)));
evalcond[5]=((((-1.0)*r02*x4820))+(((-1.0)*x4816*x4822))+(((-1.0)*sj10))+((r01*x4819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4823=((1.0)*cj15);
CheckValue<IkReal> x4824 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*r20*x4823))+((cj10*r21*sj15)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4824.valid){
continue;
}
CheckValue<IkReal> x4825=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj15))+(((-1.0)*r11*x4823)))),-1);
if(!x4825.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4824.value)+(((1.5707963267949)*(x4825.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4826=IKcos(j14);
IkReal x4827=IKsin(j14);
IkReal x4828=(cj15*r00);
IkReal x4829=(cj15*r10);
IkReal x4830=(cj15*r20);
IkReal x4831=(sj15*x4827);
IkReal x4832=((1.0)*x4826);
IkReal x4833=(sj15*x4826);
IkReal x4834=((1.0)*x4827);
evalcond[0]=(((r22*x4827))+(((-1.0)*x4830*x4832))+((r21*x4833)));
evalcond[1]=((((-1.0)*x4830*x4834))+(((-1.0)*r22*x4832))+((r21*x4831)));
evalcond[2]=(((r01*x4833))+((r02*x4827))+cj10+(((-1.0)*x4828*x4832)));
evalcond[3]=(((r11*x4833))+(((-1.0)*x4829*x4832))+((r12*x4827))+sj10);
evalcond[4]=(((r11*x4831))+(((-1.0)*r12*x4832))+(((-1.0)*x4829*x4834))+cj10);
evalcond[5]=(((r01*x4831))+(((-1.0)*r02*x4832))+(((-1.0)*sj10))+(((-1.0)*x4828*x4834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x4835 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4835.valid){
continue;
}
CheckValue<IkReal> x4836=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x4836.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4835.value)+(((1.5707963267949)*(x4836.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4837=IKcos(j14);
IkReal x4838=IKsin(j14);
IkReal x4839=(cj15*r00);
IkReal x4840=(cj15*r10);
IkReal x4841=(cj15*r20);
IkReal x4842=(sj15*x4838);
IkReal x4843=((1.0)*x4837);
IkReal x4844=(sj15*x4837);
IkReal x4845=((1.0)*x4838);
evalcond[0]=((((-1.0)*x4841*x4843))+((r22*x4838))+((r21*x4844)));
evalcond[1]=((((-1.0)*x4841*x4845))+((r21*x4842))+(((-1.0)*r22*x4843)));
evalcond[2]=((((-1.0)*x4839*x4843))+cj10+((r01*x4844))+((r02*x4838)));
evalcond[3]=(((r12*x4838))+(((-1.0)*x4840*x4843))+((r11*x4844))+sj10);
evalcond[4]=((((-1.0)*x4840*x4845))+((r11*x4842))+cj10+(((-1.0)*r12*x4843)));
evalcond[5]=((((-1.0)*r02*x4843))+(((-1.0)*x4839*x4845))+(((-1.0)*sj10))+((r01*x4842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs((((cj15*r11))+((r10*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*r01))+((r00*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj15*r11))+((r10*sj15))))+IKsqr((((cj15*r01))+((r00*sj15))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((cj15*r11))+((r10*sj15))), (((cj15*r01))+((r00*sj15))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x4846=IKsin(j10);
IkReal x4847=IKcos(j10);
IkReal x4848=((0.08535)*sj15);
IkReal x4849=(cj15*r11);
IkReal x4850=(cj15*r01);
evalcond[0]=(((r00*sj15))+(((-1.0)*x4847))+x4850);
evalcond[1]=(((r10*sj15))+(((-1.0)*x4846))+x4849);
evalcond[2]=((((-0.08535)*x4850))+(((-1.0)*r00*x4848))+(((-1.0)*px))+(((-0.11235)*x4846)));
evalcond[3]=((((-1.0)*py))+(((-0.08535)*x4849))+(((0.11235)*x4847))+(((-1.0)*r10*x4848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x4851=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x4851;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj15*r00))+((r01*sj15))))));
j14eval[2]=IKsign(x4851);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x4852=((1.0)*cj15);
IkReal x4853=((((-1.0)*r01*x4852))+(((-1.0)*r00*sj15)));
j14eval[0]=x4853;
j14eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x4852))+((r11*sj15))))));
j14eval[2]=IKsign(x4853);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x4854=cj15*cj15;
IkReal x4855=(r01*r11);
IkReal x4856=(r01*sj15);
IkReal x4857=(cj15*r00);
IkReal x4858=((((-1.0)*r02*r12))+(((-1.0)*r00*r10*x4854))+(((-1.0)*x4855))+((cj15*r10*x4856))+((r11*sj15*x4857))+((x4854*x4855)));
j14eval[0]=x4858;
j14eval[1]=((IKabs(((((-1.0)*cj10*x4857))+((cj10*x4856)))))+(IKabs((cj10*r02))));
j14eval[2]=IKsign(x4858);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4859=cj15*cj15;
IkReal x4860=(cj15*r00);
IkReal x4861=(r01*sj15);
IkReal x4862=(r01*r11);
CheckValue<IkReal> x4863 = IKatan2WithCheck(IkReal((((cj10*x4861))+(((-1.0)*cj10*x4860)))),IkReal(((-1.0)*cj10*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4863.valid){
continue;
}
CheckValue<IkReal> x4864=IKPowWithIntegerCheck(IKsign((((x4859*x4862))+(((-1.0)*r02*r12))+(((-1.0)*r00*r10*x4859))+(((-1.0)*x4862))+((cj15*r10*x4861))+((r11*sj15*x4860)))),-1);
if(!x4864.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4863.value)+(((1.5707963267949)*(x4864.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4865=IKcos(j14);
IkReal x4866=IKsin(j14);
IkReal x4867=(cj15*r00);
IkReal x4868=(cj15*r10);
IkReal x4869=(cj15*r20);
IkReal x4870=(sj15*x4866);
IkReal x4871=((1.0)*x4865);
IkReal x4872=(sj15*x4865);
IkReal x4873=((1.0)*x4866);
evalcond[0]=(((r01*x4872))+((r02*x4866))+(((-1.0)*x4867*x4871)));
evalcond[1]=((((-1.0)*x4868*x4871))+((r12*x4866))+((r11*x4872)));
evalcond[2]=((((-1.0)*x4869*x4873))+(((-1.0)*r22*x4871))+((r21*x4870)));
evalcond[3]=((1.0)+(((-1.0)*x4869*x4871))+((r22*x4866))+((r21*x4872)));
evalcond[4]=((((-1.0)*x4868*x4873))+cj10+(((-1.0)*r12*x4871))+((r11*x4870)));
evalcond[5]=(((r01*x4870))+(((-1.0)*sj10))+(((-1.0)*r02*x4871))+(((-1.0)*x4867*x4873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4874=((1.0)*cj15);
CheckValue<IkReal> x4875=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4874))+(((-1.0)*r00*sj15)))),-1);
if(!x4875.valid){
continue;
}
CheckValue<IkReal> x4876 = IKatan2WithCheck(IkReal((((r11*sj15))+(((-1.0)*r10*x4874)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4876.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4875.value)))+(x4876.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4877=IKcos(j14);
IkReal x4878=IKsin(j14);
IkReal x4879=(cj15*r00);
IkReal x4880=(cj15*r10);
IkReal x4881=(cj15*r20);
IkReal x4882=(sj15*x4878);
IkReal x4883=((1.0)*x4877);
IkReal x4884=(sj15*x4877);
IkReal x4885=((1.0)*x4878);
evalcond[0]=(((r02*x4878))+(((-1.0)*x4879*x4883))+((r01*x4884)));
evalcond[1]=(((r11*x4884))+(((-1.0)*x4880*x4883))+((r12*x4878)));
evalcond[2]=((((-1.0)*x4881*x4885))+(((-1.0)*r22*x4883))+((r21*x4882)));
evalcond[3]=((1.0)+(((-1.0)*x4881*x4883))+((r22*x4878))+((r21*x4884)));
evalcond[4]=(((r11*x4882))+(((-1.0)*r12*x4883))+(((-1.0)*x4880*x4885))+cj10);
evalcond[5]=((((-1.0)*x4879*x4885))+(((-1.0)*r02*x4883))+(((-1.0)*sj10))+((r01*x4882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x4886=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x4886.valid){
continue;
}
CheckValue<IkReal> x4887 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r00))+((r01*sj15)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4887.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4886.value)))+(x4887.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4888=IKcos(j14);
IkReal x4889=IKsin(j14);
IkReal x4890=(cj15*r00);
IkReal x4891=(cj15*r10);
IkReal x4892=(cj15*r20);
IkReal x4893=(sj15*x4889);
IkReal x4894=((1.0)*x4888);
IkReal x4895=(sj15*x4888);
IkReal x4896=((1.0)*x4889);
evalcond[0]=(((r02*x4889))+(((-1.0)*x4890*x4894))+((r01*x4895)));
evalcond[1]=(((r11*x4895))+((r12*x4889))+(((-1.0)*x4891*x4894)));
evalcond[2]=(((r21*x4893))+(((-1.0)*x4892*x4896))+(((-1.0)*r22*x4894)));
evalcond[3]=((1.0)+((r21*x4895))+((r22*x4889))+(((-1.0)*x4892*x4894)));
evalcond[4]=(((r11*x4893))+(((-1.0)*r12*x4894))+cj10+(((-1.0)*x4891*x4896)));
evalcond[5]=((((-1.0)*r02*x4894))+(((-1.0)*sj10))+(((-1.0)*x4890*x4896))+((r01*x4893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-3.67051685094268)*py))+(((-1.9337986785623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.67051685094268)*px))+(((1.9337986785623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))))+IKsqr(((((-3.67051685094268)*px))+(((1.9337986785623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))), ((((-3.67051685094268)*px))+(((1.9337986785623)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x4897=IKcos(j10);
IkReal x4898=IKsin(j10);
evalcond[0]=((((-0.21325)*x4897))+(((-0.11235)*x4898))+(((-1.0)*px)));
evalcond[1]=((((-0.21325)*x4898))+(((0.11235)*x4897))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x4899=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x4899;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x4899);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x4900=((1.0)*cj15);
IkReal x4901=((((-1.0)*r11*x4900))+(((-1.0)*r10*sj15)));
j14eval[0]=x4901;
j14eval[1]=IKsign(x4901);
j14eval[2]=((IKabs(((((-1.0)*cj10*r20*x4900))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x4902=cj15*cj15;
IkReal x4903=(cj15*sj15);
IkReal x4904=(r01*r21);
IkReal x4905=((1.0)*r20);
IkReal x4906=((((-1.0)*r00*x4902*x4905))+(((-1.0)*r02*r22))+(((-1.0)*x4904))+((x4902*x4904))+((r00*r21*x4903))+((r01*r20*x4903)));
j14eval[0]=x4906;
j14eval[1]=((IKabs(((((-1.0)*cj10*cj15*x4905))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x4906);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4907=cj15*cj15;
IkReal x4908=(cj15*sj15);
IkReal x4909=(r01*r21);
IkReal x4910=((1.0)*r20);
CheckValue<IkReal> x4911=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4907*x4910))+(((-1.0)*r02*r22))+(((-1.0)*x4909))+((r00*r21*x4908))+((x4907*x4909))+((r01*r20*x4908)))),-1);
if(!x4911.valid){
continue;
}
CheckValue<IkReal> x4912 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*x4910))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4912.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4911.value)))+(x4912.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4913=IKcos(j14);
IkReal x4914=IKsin(j14);
IkReal x4915=(cj15*r00);
IkReal x4916=(cj15*r10);
IkReal x4917=(cj15*r20);
IkReal x4918=(sj15*x4914);
IkReal x4919=((1.0)*x4913);
IkReal x4920=(sj15*x4913);
IkReal x4921=((1.0)*x4914);
evalcond[0]=(((r21*x4920))+((r22*x4914))+(((-1.0)*x4917*x4919)));
evalcond[1]=(((r21*x4918))+(((-1.0)*x4917*x4921))+(((-1.0)*r22*x4919)));
evalcond[2]=((((-1.0)*x4915*x4919))+((r02*x4914))+cj10+((r01*x4920)));
evalcond[3]=(sj10+((r12*x4914))+(((-1.0)*x4916*x4919))+((r11*x4920)));
evalcond[4]=((((-1.0)*r12*x4919))+(((-1.0)*x4916*x4921))+cj10+((r11*x4918)));
evalcond[5]=((((-1.0)*r02*x4919))+(((-1.0)*x4915*x4921))+(((-1.0)*sj10))+((r01*x4918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4922=((1.0)*cj15);
CheckValue<IkReal> x4923 = IKatan2WithCheck(IkReal((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x4922)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4923.valid){
continue;
}
CheckValue<IkReal> x4924=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4922))+(((-1.0)*r10*sj15)))),-1);
if(!x4924.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4923.value)+(((1.5707963267949)*(x4924.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4925=IKcos(j14);
IkReal x4926=IKsin(j14);
IkReal x4927=(cj15*r00);
IkReal x4928=(cj15*r10);
IkReal x4929=(cj15*r20);
IkReal x4930=(sj15*x4926);
IkReal x4931=((1.0)*x4925);
IkReal x4932=(sj15*x4925);
IkReal x4933=((1.0)*x4926);
evalcond[0]=(((r22*x4926))+((r21*x4932))+(((-1.0)*x4929*x4931)));
evalcond[1]=(((r21*x4930))+(((-1.0)*x4929*x4933))+(((-1.0)*r22*x4931)));
evalcond[2]=(cj10+((r01*x4932))+((r02*x4926))+(((-1.0)*x4927*x4931)));
evalcond[3]=(sj10+((r11*x4932))+(((-1.0)*x4928*x4931))+((r12*x4926)));
evalcond[4]=(cj10+(((-1.0)*r12*x4931))+((r11*x4930))+(((-1.0)*x4928*x4933)));
evalcond[5]=((((-1.0)*r02*x4931))+(((-1.0)*sj10))+((r01*x4930))+(((-1.0)*x4927*x4933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x4934 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4934.valid){
continue;
}
CheckValue<IkReal> x4935=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x4935.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4934.value)+(((1.5707963267949)*(x4935.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4936=IKcos(j14);
IkReal x4937=IKsin(j14);
IkReal x4938=(cj15*r00);
IkReal x4939=(cj15*r10);
IkReal x4940=(cj15*r20);
IkReal x4941=(sj15*x4937);
IkReal x4942=((1.0)*x4936);
IkReal x4943=(sj15*x4936);
IkReal x4944=((1.0)*x4937);
evalcond[0]=(((r21*x4943))+(((-1.0)*x4940*x4942))+((r22*x4937)));
evalcond[1]=(((r21*x4941))+(((-1.0)*x4940*x4944))+(((-1.0)*r22*x4942)));
evalcond[2]=(((r01*x4943))+(((-1.0)*x4938*x4942))+cj10+((r02*x4937)));
evalcond[3]=(((r12*x4937))+(((-1.0)*x4939*x4942))+((r11*x4943))+sj10);
evalcond[4]=((((-1.0)*x4939*x4944))+((r11*x4941))+(((-1.0)*r12*x4942))+cj10);
evalcond[5]=(((r01*x4941))+(((-1.0)*x4938*x4944))+(((-1.0)*sj10))+(((-1.0)*r02*x4942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4945=((1.0)*cj15);
IkReal x4946=((1.0)*sj15);
if( IKabs(((((-1.0)*r10*x4946))+(((-1.0)*r11*x4945)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x4946))+(((-1.0)*r01*x4945)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x4946))+(((-1.0)*r11*x4945))))+IKsqr(((((-1.0)*r00*x4946))+(((-1.0)*r01*x4945))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r10*x4946))+(((-1.0)*r11*x4945))), ((((-1.0)*r00*x4946))+(((-1.0)*r01*x4945))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x4947=IKsin(j10);
IkReal x4948=IKcos(j10);
IkReal x4949=((0.08535)*sj15);
IkReal x4950=(cj15*r11);
IkReal x4951=(cj15*r01);
evalcond[0]=(x4951+x4948+((r00*sj15)));
evalcond[1]=(x4950+x4947+((r10*sj15)));
evalcond[2]=((((-0.08535)*x4951))+(((-1.0)*px))+(((-0.11235)*x4947))+(((-1.0)*r00*x4949)));
evalcond[3]=((((-1.0)*r10*x4949))+(((-0.08535)*x4950))+(((-1.0)*py))+(((0.11235)*x4948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x4952=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x4952;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x4952);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x4953=((1.0)*cj15);
IkReal x4954=((((-1.0)*r11*x4953))+(((-1.0)*r10*sj15)));
j14eval[0]=x4954;
j14eval[1]=((IKabs(r02))+(IKabs((((r01*sj15))+(((-1.0)*r00*x4953))))));
j14eval[2]=IKsign(x4954);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x4955=cj15*cj15;
IkReal x4956=(r01*r11);
IkReal x4957=(r01*sj15);
IkReal x4958=(cj15*r00);
IkReal x4959=((((-1.0)*r02*r12))+(((-1.0)*x4956))+(((-1.0)*r00*r10*x4955))+((x4955*x4956))+((cj15*r10*x4957))+((r11*sj15*x4958)));
j14eval[0]=x4959;
j14eval[1]=((IKabs((cj10*r02)))+(IKabs(((((-1.0)*cj10*x4958))+((cj10*x4957))))));
j14eval[2]=IKsign(x4959);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4960=cj15*cj15;
IkReal x4961=(cj15*r00);
IkReal x4962=(r01*sj15);
IkReal x4963=(r01*r11);
CheckValue<IkReal> x4964 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*x4961))+((cj10*x4962)))),IkReal(((-1.0)*cj10*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4964.valid){
continue;
}
CheckValue<IkReal> x4965=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+(((-1.0)*x4963))+(((-1.0)*r00*r10*x4960))+((x4960*x4963))+((cj15*r10*x4962))+((r11*sj15*x4961)))),-1);
if(!x4965.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4964.value)+(((1.5707963267949)*(x4965.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4966=IKcos(j14);
IkReal x4967=IKsin(j14);
IkReal x4968=(cj15*r00);
IkReal x4969=(cj15*r10);
IkReal x4970=(cj15*r20);
IkReal x4971=(sj15*x4967);
IkReal x4972=((1.0)*x4966);
IkReal x4973=(sj15*x4966);
IkReal x4974=((1.0)*x4967);
evalcond[0]=((((-1.0)*x4968*x4972))+((r02*x4967))+((r01*x4973)));
evalcond[1]=(((r12*x4967))+((r11*x4973))+(((-1.0)*x4969*x4972)));
evalcond[2]=((((-1.0)*r22*x4972))+(((-1.0)*x4970*x4974))+((r21*x4971)));
evalcond[3]=((-1.0)+((r22*x4967))+(((-1.0)*x4970*x4972))+((r21*x4973)));
evalcond[4]=(((r11*x4971))+(((-1.0)*r12*x4972))+cj10+(((-1.0)*x4969*x4974)));
evalcond[5]=((((-1.0)*x4968*x4974))+(((-1.0)*r02*x4972))+(((-1.0)*sj10))+((r01*x4971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4975=((1.0)*cj15);
CheckValue<IkReal> x4976 = IKatan2WithCheck(IkReal((((r01*sj15))+(((-1.0)*r00*x4975)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4976.valid){
continue;
}
CheckValue<IkReal> x4977=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4975))+(((-1.0)*r10*sj15)))),-1);
if(!x4977.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4976.value)+(((1.5707963267949)*(x4977.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4978=IKcos(j14);
IkReal x4979=IKsin(j14);
IkReal x4980=(cj15*r00);
IkReal x4981=(cj15*r10);
IkReal x4982=(cj15*r20);
IkReal x4983=(sj15*x4979);
IkReal x4984=((1.0)*x4978);
IkReal x4985=(sj15*x4978);
IkReal x4986=((1.0)*x4979);
evalcond[0]=(((r01*x4985))+((r02*x4979))+(((-1.0)*x4980*x4984)));
evalcond[1]=(((r11*x4985))+((r12*x4979))+(((-1.0)*x4981*x4984)));
evalcond[2]=((((-1.0)*r22*x4984))+(((-1.0)*x4982*x4986))+((r21*x4983)));
evalcond[3]=((-1.0)+(((-1.0)*x4982*x4984))+((r22*x4979))+((r21*x4985)));
evalcond[4]=(((r11*x4983))+cj10+(((-1.0)*r12*x4984))+(((-1.0)*x4981*x4986)));
evalcond[5]=(((r01*x4983))+(((-1.0)*sj10))+(((-1.0)*r02*x4984))+(((-1.0)*x4980*x4986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x4987=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x4987.valid){
continue;
}
CheckValue<IkReal> x4988 = IKatan2WithCheck(IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4988.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4987.value)))+(x4988.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4989=IKcos(j14);
IkReal x4990=IKsin(j14);
IkReal x4991=(cj15*r00);
IkReal x4992=(cj15*r10);
IkReal x4993=(cj15*r20);
IkReal x4994=(sj15*x4990);
IkReal x4995=((1.0)*x4989);
IkReal x4996=(sj15*x4989);
IkReal x4997=((1.0)*x4990);
evalcond[0]=((((-1.0)*x4991*x4995))+((r02*x4990))+((r01*x4996)));
evalcond[1]=(((r11*x4996))+((r12*x4990))+(((-1.0)*x4992*x4995)));
evalcond[2]=((((-1.0)*r22*x4995))+(((-1.0)*x4993*x4997))+((r21*x4994)));
evalcond[3]=((-1.0)+((r22*x4990))+(((-1.0)*x4993*x4995))+((r21*x4996)));
evalcond[4]=((((-1.0)*r12*x4995))+((r11*x4994))+cj10+(((-1.0)*x4992*x4997)));
evalcond[5]=((((-1.0)*x4991*x4997))+(((-1.0)*r02*x4995))+(((-1.0)*sj10))+((r01*x4994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-1.9337986785623)*px))+(((3.67051685094268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.9337986785623)*py))+(((3.67051685094268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.9337986785623)*px))+(((3.67051685094268)*py))))+IKsqr(((((1.9337986785623)*py))+(((3.67051685094268)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.9337986785623)*px))+(((3.67051685094268)*py))), ((((1.9337986785623)*py))+(((3.67051685094268)*px))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x4998=IKcos(j10);
IkReal x4999=IKsin(j10);
evalcond[0]=((((0.21325)*x4998))+(((-1.0)*px))+(((-0.11235)*x4999)));
evalcond[1]=((((0.21325)*x4999))+(((-1.0)*py))+(((0.11235)*x4998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x5000=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x5000;
j14eval[1]=IKsign(x5000);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x5001=((1.0)*cj15);
IkReal x5002=((((-1.0)*r00*sj15))+(((-1.0)*r01*x5001)));
j14eval[0]=x5002;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x5001))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x5002);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x5003=((1.0)*cj15);
IkReal x5004=((((-1.0)*r00*sj15))+(((-1.0)*r01*x5003)));
j14eval[0]=x5004;
j14eval[1]=((IKabs((((r21*sj10*sj15))+(((-1.0)*r20*sj10*x5003)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x5004);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5005=((1.0)*cj15);
CheckValue<IkReal> x5006 = IKatan2WithCheck(IkReal((((r21*sj10*sj15))+(((-1.0)*r20*sj10*x5005)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5006.valid){
continue;
}
CheckValue<IkReal> x5007=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x5005)))),-1);
if(!x5007.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5006.value)+(((1.5707963267949)*(x5007.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5008=IKcos(j14);
IkReal x5009=IKsin(j14);
IkReal x5010=((1.0)*sj10);
IkReal x5011=(sj15*x5009);
IkReal x5012=((1.0)*x5008);
IkReal x5013=(sj15*x5008);
IkReal x5014=((1.0)*cj15*x5009);
evalcond[0]=(((r21*x5013))+(((-1.0)*cj15*r20*x5012))+((r22*x5009)));
evalcond[1]=((((-1.0)*r20*x5014))+(((-1.0)*r22*x5012))+((r21*x5011)));
evalcond[2]=((((-1.0)*r10*x5014))+cj10+(((-1.0)*r12*x5012))+((r11*x5011)));
evalcond[3]=((((-1.0)*cj15*r00*x5012))+((r02*x5009))+(((-1.0)*cj10))+((r01*x5013)));
evalcond[4]=((((-1.0)*cj15*r10*x5012))+((r12*x5009))+((r11*x5013))+(((-1.0)*x5010)));
evalcond[5]=((((-1.0)*r02*x5012))+((r01*x5011))+(((-1.0)*r00*x5014))+(((-1.0)*x5010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5015=((1.0)*cj15);
CheckValue<IkReal> x5016=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x5015)))),-1);
if(!x5016.valid){
continue;
}
CheckValue<IkReal> x5017 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x5015))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5017.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5016.value)))+(x5017.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5018=IKcos(j14);
IkReal x5019=IKsin(j14);
IkReal x5020=((1.0)*sj10);
IkReal x5021=(sj15*x5019);
IkReal x5022=((1.0)*x5018);
IkReal x5023=(sj15*x5018);
IkReal x5024=((1.0)*cj15*x5019);
evalcond[0]=((((-1.0)*cj15*r20*x5022))+((r22*x5019))+((r21*x5023)));
evalcond[1]=((((-1.0)*r20*x5024))+(((-1.0)*r22*x5022))+((r21*x5021)));
evalcond[2]=(((r11*x5021))+(((-1.0)*r12*x5022))+cj10+(((-1.0)*r10*x5024)));
evalcond[3]=(((r02*x5019))+(((-1.0)*cj15*r00*x5022))+((r01*x5023))+(((-1.0)*cj10)));
evalcond[4]=(((r11*x5023))+(((-1.0)*cj15*r10*x5022))+(((-1.0)*x5020))+((r12*x5019)));
evalcond[5]=((((-1.0)*r00*x5024))+(((-1.0)*r02*x5022))+((r01*x5021))+(((-1.0)*x5020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x5025=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x5025.valid){
continue;
}
CheckValue<IkReal> x5026 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5026.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5025.value)))+(x5026.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5027=IKcos(j14);
IkReal x5028=IKsin(j14);
IkReal x5029=((1.0)*sj10);
IkReal x5030=(sj15*x5028);
IkReal x5031=((1.0)*x5027);
IkReal x5032=(sj15*x5027);
IkReal x5033=((1.0)*cj15*x5028);
evalcond[0]=((((-1.0)*cj15*r20*x5031))+((r22*x5028))+((r21*x5032)));
evalcond[1]=(((r21*x5030))+(((-1.0)*r22*x5031))+(((-1.0)*r20*x5033)));
evalcond[2]=(((r11*x5030))+(((-1.0)*r12*x5031))+cj10+(((-1.0)*r10*x5033)));
evalcond[3]=(((r02*x5028))+((r01*x5032))+(((-1.0)*cj15*r00*x5031))+(((-1.0)*cj10)));
evalcond[4]=(((r12*x5028))+((r11*x5032))+(((-1.0)*cj15*r10*x5031))+(((-1.0)*x5029)));
evalcond[5]=(((r01*x5030))+(((-1.0)*r02*x5031))+(((-1.0)*x5029))+(((-1.0)*r00*x5033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-0.507498115261088)*px))+(((-2.06387083990023)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.06387083990023)*px))+(((0.507498115261088)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.507498115261088)*px))+(((-2.06387083990023)*py))))+IKsqr(((((-2.06387083990023)*px))+(((0.507498115261088)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-0.507498115261088)*px))+(((-2.06387083990023)*py))), ((((-2.06387083990023)*px))+(((0.507498115261088)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x5034=IKcos(j10);
IkReal x5035=IKsin(j10);
evalcond[0]=((((-0.11235)*x5035))+(((-0.4569)*x5034))+(((-1.0)*px)));
evalcond[1]=((((-0.4569)*x5035))+(((-1.0)*py))+(((0.11235)*x5034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x5036=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x5036;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x5036);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x5037=((1.0)*cj15);
IkReal x5038=((((-1.0)*r11*x5037))+(((-1.0)*r10*sj15)));
j14eval[0]=x5038;
j14eval[1]=IKsign(x5038);
j14eval[2]=((IKabs((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x5037)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x5039=cj15*cj15;
IkReal x5040=(cj15*sj15);
IkReal x5041=(r01*r21);
IkReal x5042=((1.0)*r20);
IkReal x5043=((((-1.0)*r02*r22))+((r00*r21*x5040))+((x5039*x5041))+(((-1.0)*r00*x5039*x5042))+(((-1.0)*x5041))+((r01*r20*x5040)));
j14eval[0]=x5043;
j14eval[1]=((IKabs(((((-1.0)*cj10*cj15*x5042))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x5043);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5044=cj15*cj15;
IkReal x5045=(cj15*sj15);
IkReal x5046=(r01*r21);
IkReal x5047=((1.0)*r20);
CheckValue<IkReal> x5048=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((r00*r21*x5045))+(((-1.0)*r00*x5044*x5047))+(((-1.0)*x5046))+((r01*r20*x5045))+((x5044*x5046)))),-1);
if(!x5048.valid){
continue;
}
CheckValue<IkReal> x5049 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*x5047))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5049.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5048.value)))+(x5049.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5050=IKcos(j14);
IkReal x5051=IKsin(j14);
IkReal x5052=(cj15*r00);
IkReal x5053=(cj15*r10);
IkReal x5054=(cj15*r20);
IkReal x5055=(sj15*x5051);
IkReal x5056=((1.0)*x5050);
IkReal x5057=(sj15*x5050);
IkReal x5058=((1.0)*x5051);
evalcond[0]=(((r21*x5057))+(((-1.0)*x5054*x5056))+((r22*x5051)));
evalcond[1]=(((r21*x5055))+(((-1.0)*x5054*x5058))+(((-1.0)*r22*x5056)));
evalcond[2]=(((r01*x5057))+cj10+(((-1.0)*x5052*x5056))+((r02*x5051)));
evalcond[3]=(((r12*x5051))+((r11*x5057))+(((-1.0)*x5053*x5056))+sj10);
evalcond[4]=((((-1.0)*r12*x5056))+((r11*x5055))+(((-1.0)*x5053*x5058))+cj10);
evalcond[5]=(((r01*x5055))+(((-1.0)*sj10))+(((-1.0)*x5052*x5058))+(((-1.0)*r02*x5056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5059=((1.0)*cj15);
CheckValue<IkReal> x5060 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*r20*x5059))+((cj10*r21*sj15)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5060.valid){
continue;
}
CheckValue<IkReal> x5061=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5059))+(((-1.0)*r10*sj15)))),-1);
if(!x5061.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5060.value)+(((1.5707963267949)*(x5061.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5062=IKcos(j14);
IkReal x5063=IKsin(j14);
IkReal x5064=(cj15*r00);
IkReal x5065=(cj15*r10);
IkReal x5066=(cj15*r20);
IkReal x5067=(sj15*x5063);
IkReal x5068=((1.0)*x5062);
IkReal x5069=(sj15*x5062);
IkReal x5070=((1.0)*x5063);
evalcond[0]=((((-1.0)*x5066*x5068))+((r21*x5069))+((r22*x5063)));
evalcond[1]=((((-1.0)*x5066*x5070))+(((-1.0)*r22*x5068))+((r21*x5067)));
evalcond[2]=(((r02*x5063))+cj10+((r01*x5069))+(((-1.0)*x5064*x5068)));
evalcond[3]=(sj10+((r11*x5069))+(((-1.0)*x5065*x5068))+((r12*x5063)));
evalcond[4]=(cj10+(((-1.0)*x5065*x5070))+(((-1.0)*r12*x5068))+((r11*x5067)));
evalcond[5]=((((-1.0)*x5064*x5070))+(((-1.0)*r02*x5068))+(((-1.0)*sj10))+((r01*x5067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x5071 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5071.valid){
continue;
}
CheckValue<IkReal> x5072=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x5072.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5071.value)+(((1.5707963267949)*(x5072.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5073=IKcos(j14);
IkReal x5074=IKsin(j14);
IkReal x5075=(cj15*r00);
IkReal x5076=(cj15*r10);
IkReal x5077=(cj15*r20);
IkReal x5078=(sj15*x5074);
IkReal x5079=((1.0)*x5073);
IkReal x5080=(sj15*x5073);
IkReal x5081=((1.0)*x5074);
evalcond[0]=(((r21*x5080))+(((-1.0)*x5077*x5079))+((r22*x5074)));
evalcond[1]=((((-1.0)*x5077*x5081))+((r21*x5078))+(((-1.0)*r22*x5079)));
evalcond[2]=(((r01*x5080))+cj10+((r02*x5074))+(((-1.0)*x5075*x5079)));
evalcond[3]=(((r11*x5080))+(((-1.0)*x5076*x5079))+sj10+((r12*x5074)));
evalcond[4]=(cj10+(((-1.0)*r12*x5079))+(((-1.0)*x5076*x5081))+((r11*x5078)));
evalcond[5]=((((-1.0)*r02*x5079))+(((-1.0)*x5075*x5081))+(((-1.0)*sj10))+((r01*x5078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-2.24409186529617)*py))+(((-8.29354345611924)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.24409186529617)*px))+(((8.29354345611924)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.24409186529617)*py))+(((-8.29354345611924)*px))))+IKsqr(((((-2.24409186529617)*px))+(((8.29354345611924)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-2.24409186529617)*py))+(((-8.29354345611924)*px))), ((((-2.24409186529617)*px))+(((8.29354345611924)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x5082=IKcos(j10);
IkReal x5083=IKsin(j10);
evalcond[0]=((((-0.11235)*x5083))+(((-1.0)*px))+(((-0.0304)*x5082)));
evalcond[1]=((((0.11235)*x5082))+(((-1.0)*py))+(((-0.0304)*x5083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x5084=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x5084;
j14eval[1]=IKsign(x5084);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x5085=((1.0)*cj15);
IkReal x5086=((((-1.0)*r01*x5085))+(((-1.0)*r00*sj15)));
j14eval[0]=x5086;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x5085))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x5086);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x5087=((1.0)*cj15);
IkReal x5088=((((-1.0)*r01*x5087))+(((-1.0)*r00*sj15)));
j14eval[0]=x5088;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x5087))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x5088);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5089=((1.0)*cj15);
CheckValue<IkReal> x5090 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj10*x5089))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5090.valid){
continue;
}
CheckValue<IkReal> x5091=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5089))+(((-1.0)*r00*sj15)))),-1);
if(!x5091.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5090.value)+(((1.5707963267949)*(x5091.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5092=IKcos(j14);
IkReal x5093=IKsin(j14);
IkReal x5094=((1.0)*sj10);
IkReal x5095=(sj15*x5093);
IkReal x5096=((1.0)*x5092);
IkReal x5097=(sj15*x5092);
IkReal x5098=((1.0)*cj15*x5093);
evalcond[0]=(((r21*x5097))+(((-1.0)*cj15*r20*x5096))+((r22*x5093)));
evalcond[1]=((((-1.0)*r22*x5096))+((r21*x5095))+(((-1.0)*r20*x5098)));
evalcond[2]=((((-1.0)*r10*x5098))+((r11*x5095))+cj10+(((-1.0)*r12*x5096)));
evalcond[3]=(((r01*x5097))+(((-1.0)*cj10))+(((-1.0)*cj15*r00*x5096))+((r02*x5093)));
evalcond[4]=(((r11*x5097))+((r12*x5093))+(((-1.0)*x5094))+(((-1.0)*cj15*r10*x5096)));
evalcond[5]=((((-1.0)*r00*x5098))+((r01*x5095))+(((-1.0)*x5094))+(((-1.0)*r02*x5096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5099=((1.0)*cj15);
CheckValue<IkReal> x5100=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5099))+(((-1.0)*r00*sj15)))),-1);
if(!x5100.valid){
continue;
}
CheckValue<IkReal> x5101 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x5099))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5101.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5100.value)))+(x5101.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5102=IKcos(j14);
IkReal x5103=IKsin(j14);
IkReal x5104=((1.0)*sj10);
IkReal x5105=(sj15*x5103);
IkReal x5106=((1.0)*x5102);
IkReal x5107=(sj15*x5102);
IkReal x5108=((1.0)*cj15*x5103);
evalcond[0]=(((r22*x5103))+((r21*x5107))+(((-1.0)*cj15*r20*x5106)));
evalcond[1]=((((-1.0)*r22*x5106))+((r21*x5105))+(((-1.0)*r20*x5108)));
evalcond[2]=((((-1.0)*r10*x5108))+cj10+((r11*x5105))+(((-1.0)*r12*x5106)));
evalcond[3]=((((-1.0)*cj15*r00*x5106))+((r01*x5107))+((r02*x5103))+(((-1.0)*cj10)));
evalcond[4]=(((r12*x5103))+(((-1.0)*x5104))+(((-1.0)*cj15*r10*x5106))+((r11*x5107)));
evalcond[5]=((((-1.0)*x5104))+((r01*x5105))+(((-1.0)*r02*x5106))+(((-1.0)*r00*x5108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x5109=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x5109.valid){
continue;
}
CheckValue<IkReal> x5110 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5110.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5109.value)))+(x5110.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5111=IKcos(j14);
IkReal x5112=IKsin(j14);
IkReal x5113=((1.0)*sj10);
IkReal x5114=(sj15*x5112);
IkReal x5115=((1.0)*x5111);
IkReal x5116=(sj15*x5111);
IkReal x5117=((1.0)*cj15*x5112);
evalcond[0]=(((r21*x5116))+((r22*x5112))+(((-1.0)*cj15*r20*x5115)));
evalcond[1]=((((-1.0)*r20*x5117))+(((-1.0)*r22*x5115))+((r21*x5114)));
evalcond[2]=(cj10+((r11*x5114))+(((-1.0)*r12*x5115))+(((-1.0)*r10*x5117)));
evalcond[3]=(((r01*x5116))+(((-1.0)*cj15*r00*x5115))+((r02*x5112))+(((-1.0)*cj10)));
evalcond[4]=((((-1.0)*cj15*r10*x5115))+((r11*x5116))+((r12*x5112))+(((-1.0)*x5113)));
evalcond[5]=(((r01*x5114))+(((-1.0)*r02*x5115))+(((-1.0)*r00*x5117))+(((-1.0)*x5113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5118=((1.0)*cj15);
IkReal x5119=((1.0)*sj15);
if( IKabs(((((-1.0)*r11*x5118))+(((-1.0)*r10*x5119)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5118))+(((-1.0)*r00*x5119)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5118))+(((-1.0)*r10*x5119))))+IKsqr(((((-1.0)*r01*x5118))+(((-1.0)*r00*x5119))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r11*x5118))+(((-1.0)*r10*x5119))), ((((-1.0)*r01*x5118))+(((-1.0)*r00*x5119))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x5120=IKsin(j10);
IkReal x5121=IKcos(j10);
IkReal x5122=((0.08535)*sj15);
IkReal x5123=(cj15*r11);
IkReal x5124=(cj15*r01);
evalcond[0]=(x5124+x5121+((r00*sj15)));
evalcond[1]=(x5120+x5123+((r10*sj15)));
evalcond[2]=((((-0.11235)*x5120))+(((-1.0)*r00*x5122))+(((-1.0)*px))+(((-0.08535)*x5124)));
evalcond[3]=((((0.11235)*x5121))+(((-1.0)*r10*x5122))+(((-1.0)*py))+(((-0.08535)*x5123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x5125=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x5125;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x5125);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x5126=((1.0)*cj15);
IkReal x5127=((((-1.0)*r11*x5126))+(((-1.0)*r10*sj15)));
j14eval[0]=x5127;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x5126))+((r01*sj15))))));
j14eval[2]=IKsign(x5127);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x5128=cj15*cj15;
IkReal x5129=(r01*r11);
IkReal x5130=(r01*sj15);
IkReal x5131=(cj15*r00);
IkReal x5132=((((-1.0)*r02*r12))+((x5128*x5129))+((r11*sj15*x5131))+((cj15*r10*x5130))+(((-1.0)*r00*r10*x5128))+(((-1.0)*x5129)));
j14eval[0]=x5132;
j14eval[1]=((IKabs((cj10*r02)))+(IKabs((((cj10*x5130))+(((-1.0)*cj10*x5131))))));
j14eval[2]=IKsign(x5132);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5133=cj15*cj15;
IkReal x5134=(cj15*r00);
IkReal x5135=(r01*sj15);
IkReal x5136=(r01*r11);
CheckValue<IkReal> x5137=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+((r11*sj15*x5134))+((cj15*r10*x5135))+(((-1.0)*r00*r10*x5133))+(((-1.0)*x5136))+((x5133*x5136)))),-1);
if(!x5137.valid){
continue;
}
CheckValue<IkReal> x5138 = IKatan2WithCheck(IkReal((((cj10*x5135))+(((-1.0)*cj10*x5134)))),IkReal(((-1.0)*cj10*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5138.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5137.value)))+(x5138.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5139=IKcos(j14);
IkReal x5140=IKsin(j14);
IkReal x5141=(cj15*r00);
IkReal x5142=(cj15*r10);
IkReal x5143=(cj15*r20);
IkReal x5144=(sj15*x5140);
IkReal x5145=((1.0)*x5139);
IkReal x5146=(sj15*x5139);
IkReal x5147=((1.0)*x5140);
evalcond[0]=(((r01*x5146))+(((-1.0)*x5141*x5145))+((r02*x5140)));
evalcond[1]=((((-1.0)*x5142*x5145))+((r12*x5140))+((r11*x5146)));
evalcond[2]=(((r21*x5144))+(((-1.0)*x5143*x5147))+(((-1.0)*r22*x5145)));
evalcond[3]=((-1.0)+((r21*x5146))+(((-1.0)*x5143*x5145))+((r22*x5140)));
evalcond[4]=((((-1.0)*x5142*x5147))+(((-1.0)*r12*x5145))+cj10+((r11*x5144)));
evalcond[5]=(((r01*x5144))+(((-1.0)*r02*x5145))+(((-1.0)*x5141*x5147))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5148=((1.0)*cj15);
CheckValue<IkReal> x5149 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x5148))+((r01*sj15)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5149.valid){
continue;
}
CheckValue<IkReal> x5150=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5148))+(((-1.0)*r10*sj15)))),-1);
if(!x5150.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5149.value)+(((1.5707963267949)*(x5150.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5151=IKcos(j14);
IkReal x5152=IKsin(j14);
IkReal x5153=(cj15*r00);
IkReal x5154=(cj15*r10);
IkReal x5155=(cj15*r20);
IkReal x5156=(sj15*x5152);
IkReal x5157=((1.0)*x5151);
IkReal x5158=(sj15*x5151);
IkReal x5159=((1.0)*x5152);
evalcond[0]=(((r01*x5158))+((r02*x5152))+(((-1.0)*x5153*x5157)));
evalcond[1]=((((-1.0)*x5154*x5157))+((r11*x5158))+((r12*x5152)));
evalcond[2]=(((r21*x5156))+(((-1.0)*r22*x5157))+(((-1.0)*x5155*x5159)));
evalcond[3]=((-1.0)+((r21*x5158))+((r22*x5152))+(((-1.0)*x5155*x5157)));
evalcond[4]=((((-1.0)*x5154*x5159))+((r11*x5156))+(((-1.0)*r12*x5157))+cj10);
evalcond[5]=(((r01*x5156))+(((-1.0)*sj10))+(((-1.0)*x5153*x5159))+(((-1.0)*r02*x5157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x5160=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x5160.valid){
continue;
}
CheckValue<IkReal> x5161 = IKatan2WithCheck(IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5161.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5160.value)))+(x5161.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5162=IKcos(j14);
IkReal x5163=IKsin(j14);
IkReal x5164=(cj15*r00);
IkReal x5165=(cj15*r10);
IkReal x5166=(cj15*r20);
IkReal x5167=(sj15*x5163);
IkReal x5168=((1.0)*x5162);
IkReal x5169=(sj15*x5162);
IkReal x5170=((1.0)*x5163);
evalcond[0]=(((r01*x5169))+(((-1.0)*x5164*x5168))+((r02*x5163)));
evalcond[1]=(((r12*x5163))+((r11*x5169))+(((-1.0)*x5165*x5168)));
evalcond[2]=((((-1.0)*r22*x5168))+((r21*x5167))+(((-1.0)*x5166*x5170)));
evalcond[3]=((-1.0)+((r21*x5169))+((r22*x5163))+(((-1.0)*x5166*x5168)));
evalcond[4]=((((-1.0)*r12*x5168))+cj10+(((-1.0)*x5165*x5170))+((r11*x5167)));
evalcond[5]=(((r01*x5167))+(((-1.0)*r02*x5168))+(((-1.0)*sj10))+(((-1.0)*x5164*x5170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-1.9337986785623)*px))+(((3.67051685094268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.9337986785623)*py))+(((3.67051685094268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.9337986785623)*px))+(((3.67051685094268)*py))))+IKsqr(((((1.9337986785623)*py))+(((3.67051685094268)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.9337986785623)*px))+(((3.67051685094268)*py))), ((((1.9337986785623)*py))+(((3.67051685094268)*px))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x5171=IKcos(j10);
IkReal x5172=IKsin(j10);
evalcond[0]=((((-0.11235)*x5172))+(((0.21325)*x5171))+(((-1.0)*px)));
evalcond[1]=((((0.11235)*x5171))+(((0.21325)*x5172))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x5173=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x5173;
j14eval[1]=IKsign(x5173);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x5174=((1.0)*cj15);
IkReal x5175=((((-1.0)*r01*x5174))+(((-1.0)*r00*sj15)));
j14eval[0]=x5175;
j14eval[1]=((IKabs((cj10*r22)))+(IKabs((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x5174))))));
j14eval[2]=IKsign(x5175);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x5176=((1.0)*cj15);
IkReal x5177=((((-1.0)*r01*x5176))+(((-1.0)*r00*sj15)));
j14eval[0]=x5177;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x5176))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x5177);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5178=((1.0)*cj15);
CheckValue<IkReal> x5179 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj10*x5178))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5179.valid){
continue;
}
CheckValue<IkReal> x5180=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5178))+(((-1.0)*r00*sj15)))),-1);
if(!x5180.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5179.value)+(((1.5707963267949)*(x5180.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5181=IKcos(j14);
IkReal x5182=IKsin(j14);
IkReal x5183=((1.0)*sj10);
IkReal x5184=(sj15*x5182);
IkReal x5185=((1.0)*x5181);
IkReal x5186=(sj15*x5181);
IkReal x5187=((1.0)*cj15*x5182);
evalcond[0]=(((r22*x5182))+(((-1.0)*cj15*r20*x5185))+((r21*x5186)));
evalcond[1]=((((-1.0)*r22*x5185))+((r21*x5184))+(((-1.0)*r20*x5187)));
evalcond[2]=(cj10+(((-1.0)*r10*x5187))+(((-1.0)*r12*x5185))+((r11*x5184)));
evalcond[3]=(((r01*x5186))+(((-1.0)*cj10))+((r02*x5182))+(((-1.0)*cj15*r00*x5185)));
evalcond[4]=(((r11*x5186))+(((-1.0)*x5183))+(((-1.0)*cj15*r10*x5185))+((r12*x5182)));
evalcond[5]=((((-1.0)*r02*x5185))+((r01*x5184))+(((-1.0)*r00*x5187))+(((-1.0)*x5183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5188=((1.0)*cj15);
CheckValue<IkReal> x5189 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x5188))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5189.valid){
continue;
}
CheckValue<IkReal> x5190=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x5188)))),-1);
if(!x5190.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5189.value)+(((1.5707963267949)*(x5190.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5191=IKcos(j14);
IkReal x5192=IKsin(j14);
IkReal x5193=((1.0)*sj10);
IkReal x5194=(sj15*x5192);
IkReal x5195=((1.0)*x5191);
IkReal x5196=(sj15*x5191);
IkReal x5197=((1.0)*cj15*x5192);
evalcond[0]=((((-1.0)*cj15*r20*x5195))+((r21*x5196))+((r22*x5192)));
evalcond[1]=((((-1.0)*r20*x5197))+((r21*x5194))+(((-1.0)*r22*x5195)));
evalcond[2]=((((-1.0)*r12*x5195))+(((-1.0)*r10*x5197))+((r11*x5194))+cj10);
evalcond[3]=(((r02*x5192))+(((-1.0)*cj15*r00*x5195))+(((-1.0)*cj10))+((r01*x5196)));
evalcond[4]=(((r11*x5196))+(((-1.0)*x5193))+((r12*x5192))+(((-1.0)*cj15*r10*x5195)));
evalcond[5]=((((-1.0)*r00*x5197))+(((-1.0)*x5193))+(((-1.0)*r02*x5195))+((r01*x5194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x5198=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x5198.valid){
continue;
}
CheckValue<IkReal> x5199 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5199.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5198.value)))+(x5199.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5200=IKcos(j14);
IkReal x5201=IKsin(j14);
IkReal x5202=((1.0)*sj10);
IkReal x5203=(sj15*x5201);
IkReal x5204=((1.0)*x5200);
IkReal x5205=(sj15*x5200);
IkReal x5206=((1.0)*cj15*x5201);
evalcond[0]=((((-1.0)*cj15*r20*x5204))+((r22*x5201))+((r21*x5205)));
evalcond[1]=((((-1.0)*r22*x5204))+(((-1.0)*r20*x5206))+((r21*x5203)));
evalcond[2]=((((-1.0)*r10*x5206))+((r11*x5203))+cj10+(((-1.0)*r12*x5204)));
evalcond[3]=(((r01*x5205))+(((-1.0)*cj15*r00*x5204))+((r02*x5201))+(((-1.0)*cj10)));
evalcond[4]=((((-1.0)*x5202))+((r11*x5205))+((r12*x5201))+(((-1.0)*cj15*r10*x5204)));
evalcond[5]=((((-1.0)*x5202))+(((-1.0)*r02*x5204))+((r01*x5203))+(((-1.0)*r00*x5206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs((((cj15*r11))+((r10*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*r01))+((r00*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj15*r11))+((r10*sj15))))+IKsqr((((cj15*r01))+((r00*sj15))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((cj15*r11))+((r10*sj15))), (((cj15*r01))+((r00*sj15))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x5207=IKsin(j10);
IkReal x5208=IKcos(j10);
IkReal x5209=((0.08535)*sj15);
IkReal x5210=(cj15*r11);
IkReal x5211=(cj15*r01);
evalcond[0]=(x5211+((r00*sj15))+(((-1.0)*x5208)));
evalcond[1]=(x5210+((r10*sj15))+(((-1.0)*x5207)));
evalcond[2]=((((-0.11235)*x5207))+(((-0.08535)*x5211))+(((-1.0)*px))+(((-1.0)*r00*x5209)));
evalcond[3]=((((-1.0)*r10*x5209))+(((-0.08535)*x5210))+(((-1.0)*py))+(((0.11235)*x5208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x5212=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x5212;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj15*r00))+((r01*sj15))))));
j14eval[2]=IKsign(x5212);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x5213=((1.0)*cj15);
IkReal x5214=((((-1.0)*r01*x5213))+(((-1.0)*r00*sj15)));
j14eval[0]=x5214;
j14eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5213))+((r11*sj15))))));
j14eval[2]=IKsign(x5214);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x5215=cj15*cj15;
IkReal x5216=(r01*r11);
IkReal x5217=(r01*sj15);
IkReal x5218=(cj15*r00);
IkReal x5219=((((-1.0)*r02*r12))+((r11*sj15*x5218))+((cj15*r10*x5217))+((x5215*x5216))+(((-1.0)*r00*r10*x5215))+(((-1.0)*x5216)));
j14eval[0]=x5219;
j14eval[1]=((IKabs(((((-1.0)*cj10*x5218))+((cj10*x5217)))))+(IKabs((cj10*r02))));
j14eval[2]=IKsign(x5219);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5220=cj15*cj15;
IkReal x5221=(cj15*r00);
IkReal x5222=(r01*sj15);
IkReal x5223=(r01*r11);
CheckValue<IkReal> x5224 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*x5221))+((cj10*x5222)))),IkReal(((-1.0)*cj10*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5224.valid){
continue;
}
CheckValue<IkReal> x5225=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r10*x5220))+((r11*sj15*x5221))+(((-1.0)*r02*r12))+(((-1.0)*x5223))+((cj15*r10*x5222))+((x5220*x5223)))),-1);
if(!x5225.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5224.value)+(((1.5707963267949)*(x5225.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5226=IKcos(j14);
IkReal x5227=IKsin(j14);
IkReal x5228=(cj15*r00);
IkReal x5229=(cj15*r10);
IkReal x5230=(cj15*r20);
IkReal x5231=(sj15*x5227);
IkReal x5232=((1.0)*x5226);
IkReal x5233=(sj15*x5226);
IkReal x5234=((1.0)*x5227);
evalcond[0]=(((r02*x5227))+((r01*x5233))+(((-1.0)*x5228*x5232)));
evalcond[1]=(((r11*x5233))+(((-1.0)*x5229*x5232))+((r12*x5227)));
evalcond[2]=((((-1.0)*r22*x5232))+((r21*x5231))+(((-1.0)*x5230*x5234)));
evalcond[3]=((1.0)+((r22*x5227))+((r21*x5233))+(((-1.0)*x5230*x5232)));
evalcond[4]=(((r11*x5231))+(((-1.0)*r12*x5232))+(((-1.0)*x5229*x5234))+cj10);
evalcond[5]=((((-1.0)*r02*x5232))+((r01*x5231))+(((-1.0)*x5228*x5234))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5235=((1.0)*cj15);
CheckValue<IkReal> x5236=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5235))+(((-1.0)*r00*sj15)))),-1);
if(!x5236.valid){
continue;
}
CheckValue<IkReal> x5237 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5235))+((r11*sj15)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5237.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5236.value)))+(x5237.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5238=IKcos(j14);
IkReal x5239=IKsin(j14);
IkReal x5240=(cj15*r00);
IkReal x5241=(cj15*r10);
IkReal x5242=(cj15*r20);
IkReal x5243=(sj15*x5239);
IkReal x5244=((1.0)*x5238);
IkReal x5245=(sj15*x5238);
IkReal x5246=((1.0)*x5239);
evalcond[0]=(((r01*x5245))+(((-1.0)*x5240*x5244))+((r02*x5239)));
evalcond[1]=(((r11*x5245))+((r12*x5239))+(((-1.0)*x5241*x5244)));
evalcond[2]=((((-1.0)*x5242*x5246))+(((-1.0)*r22*x5244))+((r21*x5243)));
evalcond[3]=((1.0)+(((-1.0)*x5242*x5244))+((r21*x5245))+((r22*x5239)));
evalcond[4]=((((-1.0)*r12*x5244))+((r11*x5243))+cj10+(((-1.0)*x5241*x5246)));
evalcond[5]=(((r01*x5243))+(((-1.0)*r02*x5244))+(((-1.0)*sj10))+(((-1.0)*x5240*x5246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x5247=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x5247.valid){
continue;
}
CheckValue<IkReal> x5248 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r00))+((r01*sj15)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5248.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5247.value)))+(x5248.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5249=IKcos(j14);
IkReal x5250=IKsin(j14);
IkReal x5251=(cj15*r00);
IkReal x5252=(cj15*r10);
IkReal x5253=(cj15*r20);
IkReal x5254=(sj15*x5250);
IkReal x5255=((1.0)*x5249);
IkReal x5256=(sj15*x5249);
IkReal x5257=((1.0)*x5250);
evalcond[0]=(((r01*x5256))+(((-1.0)*x5251*x5255))+((r02*x5250)));
evalcond[1]=(((r12*x5250))+((r11*x5256))+(((-1.0)*x5252*x5255)));
evalcond[2]=(((r21*x5254))+(((-1.0)*r22*x5255))+(((-1.0)*x5253*x5257)));
evalcond[3]=((1.0)+((r22*x5250))+((r21*x5256))+(((-1.0)*x5253*x5255)));
evalcond[4]=((((-1.0)*r12*x5255))+((r11*x5254))+cj10+(((-1.0)*x5252*x5257)));
evalcond[5]=((((-1.0)*r02*x5255))+((r01*x5254))+(((-1.0)*sj10))+(((-1.0)*x5251*x5257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-3.67051685094268)*py))+(((-1.9337986785623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.67051685094268)*px))+(((1.9337986785623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))))+IKsqr(((((-3.67051685094268)*px))+(((1.9337986785623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))), ((((-3.67051685094268)*px))+(((1.9337986785623)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x5258=IKcos(j10);
IkReal x5259=IKsin(j10);
evalcond[0]=((((-0.11235)*x5259))+(((-1.0)*px))+(((-0.21325)*x5258)));
evalcond[1]=((((0.11235)*x5258))+(((-1.0)*py))+(((-0.21325)*x5259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x5260=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x5260;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x5260);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x5261=((1.0)*cj15);
IkReal x5262=((((-1.0)*r11*x5261))+(((-1.0)*r10*sj15)));
j14eval[0]=x5262;
j14eval[1]=IKsign(x5262);
j14eval[2]=((IKabs(((((-1.0)*cj10*r20*x5261))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x5263=cj15*cj15;
IkReal x5264=(cj15*sj15);
IkReal x5265=(r01*r21);
IkReal x5266=((1.0)*r20);
IkReal x5267=((((-1.0)*x5265))+(((-1.0)*r02*r22))+((x5263*x5265))+((r01*r20*x5264))+((r00*r21*x5264))+(((-1.0)*r00*x5263*x5266)));
j14eval[0]=x5267;
j14eval[1]=((IKabs(((((-1.0)*cj10*cj15*x5266))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x5267);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5268=cj15*cj15;
IkReal x5269=(cj15*sj15);
IkReal x5270=(r01*r21);
IkReal x5271=((1.0)*r20);
CheckValue<IkReal> x5272=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5268*x5271))+(((-1.0)*r02*r22))+((x5268*x5270))+(((-1.0)*x5270))+((r01*r20*x5269))+((r00*r21*x5269)))),-1);
if(!x5272.valid){
continue;
}
CheckValue<IkReal> x5273 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*x5271))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5273.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5272.value)))+(x5273.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5274=IKcos(j14);
IkReal x5275=IKsin(j14);
IkReal x5276=(cj15*r00);
IkReal x5277=(cj15*r10);
IkReal x5278=(cj15*r20);
IkReal x5279=(sj15*x5275);
IkReal x5280=((1.0)*x5274);
IkReal x5281=(sj15*x5274);
IkReal x5282=((1.0)*x5275);
evalcond[0]=(((r22*x5275))+(((-1.0)*x5278*x5280))+((r21*x5281)));
evalcond[1]=((((-1.0)*r22*x5280))+(((-1.0)*x5278*x5282))+((r21*x5279)));
evalcond[2]=(((r02*x5275))+(((-1.0)*x5276*x5280))+cj10+((r01*x5281)));
evalcond[3]=(sj10+(((-1.0)*x5277*x5280))+((r11*x5281))+((r12*x5275)));
evalcond[4]=((((-1.0)*r12*x5280))+cj10+(((-1.0)*x5277*x5282))+((r11*x5279)));
evalcond[5]=((((-1.0)*x5276*x5282))+((r01*x5279))+(((-1.0)*sj10))+(((-1.0)*r02*x5280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5283=((1.0)*cj15);
CheckValue<IkReal> x5284 = IKatan2WithCheck(IkReal((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x5283)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5284.valid){
continue;
}
CheckValue<IkReal> x5285=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5283))+(((-1.0)*r10*sj15)))),-1);
if(!x5285.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5284.value)+(((1.5707963267949)*(x5285.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5286=IKcos(j14);
IkReal x5287=IKsin(j14);
IkReal x5288=(cj15*r00);
IkReal x5289=(cj15*r10);
IkReal x5290=(cj15*r20);
IkReal x5291=(sj15*x5287);
IkReal x5292=((1.0)*x5286);
IkReal x5293=(sj15*x5286);
IkReal x5294=((1.0)*x5287);
evalcond[0]=(((r22*x5287))+((r21*x5293))+(((-1.0)*x5290*x5292)));
evalcond[1]=((((-1.0)*r22*x5292))+((r21*x5291))+(((-1.0)*x5290*x5294)));
evalcond[2]=(((r02*x5287))+(((-1.0)*x5288*x5292))+cj10+((r01*x5293)));
evalcond[3]=((((-1.0)*x5289*x5292))+((r12*x5287))+sj10+((r11*x5293)));
evalcond[4]=((((-1.0)*x5289*x5294))+(((-1.0)*r12*x5292))+cj10+((r11*x5291)));
evalcond[5]=((((-1.0)*x5288*x5294))+(((-1.0)*sj10))+((r01*x5291))+(((-1.0)*r02*x5292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x5295 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5295.valid){
continue;
}
CheckValue<IkReal> x5296=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x5296.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5295.value)+(((1.5707963267949)*(x5296.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5297=IKcos(j14);
IkReal x5298=IKsin(j14);
IkReal x5299=(cj15*r00);
IkReal x5300=(cj15*r10);
IkReal x5301=(cj15*r20);
IkReal x5302=(sj15*x5298);
IkReal x5303=((1.0)*x5297);
IkReal x5304=(sj15*x5297);
IkReal x5305=((1.0)*x5298);
evalcond[0]=(((r21*x5304))+((r22*x5298))+(((-1.0)*x5301*x5303)));
evalcond[1]=((((-1.0)*r22*x5303))+((r21*x5302))+(((-1.0)*x5301*x5305)));
evalcond[2]=(((r02*x5298))+cj10+((r01*x5304))+(((-1.0)*x5299*x5303)));
evalcond[3]=(((r12*x5298))+(((-1.0)*x5300*x5303))+sj10+((r11*x5304)));
evalcond[4]=((((-1.0)*r12*x5303))+(((-1.0)*x5300*x5305))+cj10+((r11*x5302)));
evalcond[5]=((((-1.0)*sj10))+(((-1.0)*r02*x5303))+((r01*x5302))+(((-1.0)*x5299*x5305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10, j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5306=cj11*cj11;
IkReal x5307=((20000.0)*py);
IkReal x5308=(cj11*sj12);
IkReal x5309=(cj12*sj11);
IkReal x5310=(r00*sj15);
IkReal x5311=(cj11*sj11);
IkReal x5312=(cj15*r01);
IkReal x5313=(sj12*x5306);
IkReal x5314=((1707.0)*cj15*r11);
IkReal x5315=((1707.0)*r10*sj15);
CheckValue<IkReal> x5316=IKPowWithIntegerCheck(((((-4873.0)*cj11*x5309))+(((-8530.0)*cj11*cj12*x5309))+(((-8530.0)*cj12*x5313))+(((4265.0)*cj12*sj12))+(((-4873.0)*x5313))+(((4265.0)*x5311))),-1);
if(!x5316.valid){
continue;
}
CheckValue<IkReal> x5317=IKPowWithIntegerCheck(((((-1.0)*x5309))+(((-1.0)*x5308))),-1);
if(!x5317.valid){
continue;
}
if( IKabs(((x5316.value)*(((((-1.0)*x5308*x5314))+(((-1.0)*x5308*x5315))+(((-1.0)*x5307*x5308))+(((-1.0)*x5307*x5309))+(((2247.0)*x5310))+(((2247.0)*x5312))+(((-1.0)*x5309*x5314))+(((-1.0)*x5309*x5315)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5317.value)*(((((-1.0)*x5312))+(((-1.0)*x5310)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5316.value)*(((((-1.0)*x5308*x5314))+(((-1.0)*x5308*x5315))+(((-1.0)*x5307*x5308))+(((-1.0)*x5307*x5309))+(((2247.0)*x5310))+(((2247.0)*x5312))+(((-1.0)*x5309*x5314))+(((-1.0)*x5309*x5315))))))+IKsqr(((x5317.value)*(((((-1.0)*x5312))+(((-1.0)*x5310))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x5316.value)*(((((-1.0)*x5308*x5314))+(((-1.0)*x5308*x5315))+(((-1.0)*x5307*x5308))+(((-1.0)*x5307*x5309))+(((2247.0)*x5310))+(((2247.0)*x5312))+(((-1.0)*x5309*x5314))+(((-1.0)*x5309*x5315))))), ((x5317.value)*(((((-1.0)*x5312))+(((-1.0)*x5310))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x5318=IKcos(j10);
IkReal x5319=IKsin(j10);
IkReal x5320=(sj11*sj12);
IkReal x5321=(r10*sj15);
IkReal x5322=((1.0)*sj12);
IkReal x5323=(r00*sj15);
IkReal x5324=((0.08535)*cj15);
IkReal x5325=(cj11*x5319);
IkReal x5326=((0.21325)*x5318);
IkReal x5327=((1.0)*cj12*sj11);
IkReal x5328=(cj11*x5318);
evalcond[0]=((((-1.0)*x5318*x5327))+((cj15*r01))+x5323+(((-1.0)*x5322*x5328)));
evalcond[1]=(((cj15*r11))+x5321+(((-1.0)*x5322*x5325))+(((-1.0)*x5319*x5327)));
evalcond[2]=((((-0.11235)*x5319))+(((-0.08535)*x5323))+(((0.24365)*x5328))+(((-1.0)*px))+((cj11*cj12*x5326))+(((-1.0)*x5320*x5326))+(((-1.0)*r01*x5324)));
evalcond[3]=((((-0.08535)*x5321))+(((0.24365)*x5325))+(((-0.21325)*x5319*x5320))+(((-1.0)*py))+(((-1.0)*r11*x5324))+(((0.11235)*x5318))+(((0.21325)*cj12*x5325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x5329=((1.0)*cj15);
IkReal x5330=((((-1.0)*r00*sj15))+(((-1.0)*r01*x5329)));
j14eval[0]=x5330;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x5329))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x5330);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x5331=((1.0)*cj15);
IkReal x5332=((((-1.0)*r11*x5331))+(((-1.0)*r10*sj15)));
j14eval[0]=x5332;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x5331))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x5332);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x5333=((1.0)*sj15);
IkReal x5334=((((-1.0)*r20*x5333))+(((-1.0)*cj15*r21)));
j14eval[0]=x5334;
j14eval[1]=((IKabs(((((-1.0)*cj10*r01*x5333))+((cj15*r10*sj10))+(((-1.0)*r11*sj10*x5333))+((cj10*cj15*r00)))))+(IKabs(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02))))));
j14eval[2]=IKsign(x5334);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5335=((-1.0)*r20);
IkReal x5337 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5337)==0){
continue;
}
IkReal x5336=pow(x5337,-0.5);
CheckValue<IkReal> x5338 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5335),IKFAST_ATAN2_MAGTHRESH);
if(!x5338.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5338.value));
IkReal gconst115=(r21*x5336);
IkReal gconst116=(x5335*x5336);
CheckValue<IkReal> x5339 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5339.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x5339.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x5340=((-1.0)*r20);
IkReal x5341=x5336;
CheckValue<IkReal> x5343 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5340),IKFAST_ATAN2_MAGTHRESH);
if(!x5343.valid){
continue;
}
IkReal x5342=((-1.0)*(x5343.value));
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst115;
cj15=gconst116;
j15=x5342;
IkReal gconst114=x5342;
IkReal gconst115=(r21*x5341);
IkReal gconst116=(x5340*x5341);
j14eval[0]=cj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x5344=((-1.0)*r20);
IkReal x5345=x5336;
CheckValue<IkReal> x5347 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5344),IKFAST_ATAN2_MAGTHRESH);
if(!x5347.valid){
continue;
}
IkReal x5346=((-1.0)*(x5347.value));
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst115;
cj15=gconst116;
j15=x5346;
IkReal gconst114=x5346;
IkReal gconst115=(r21*x5345);
IkReal gconst116=(x5344*x5345);
j14eval[0]=sj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x5348=((-1.0)*r20);
IkReal x5349=x5336;
CheckValue<IkReal> x5351 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5348),IKFAST_ATAN2_MAGTHRESH);
if(!x5351.valid){
continue;
}
IkReal x5350=((-1.0)*(x5351.value));
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst115;
cj15=gconst116;
j15=x5350;
IkReal gconst114=x5350;
IkReal gconst115=(r21*x5349);
IkReal gconst116=(x5348*x5349);
IkReal x5352=((1.0)*(r22*r22));
CheckValue<IkReal> x5356=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5352))),-1);
if(!x5356.valid){
continue;
}
IkReal x5353=x5356.value;
IkReal x5354=((1.0)*x5353);
IkReal x5355=((((-1.0)*x5352))+(((-1.0)*x5354*(r20*r20*r20*r20)))+(((-1.0)*x5354*(r21*r21*r21*r21)))+(((-2.0)*x5353*(r20*r20)*(r21*r21))));
j14eval[0]=x5355;
j14eval[1]=IKsign(x5355);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5357=(gconst115*r21);
IkReal x5358=(cj12*sj11);
IkReal x5359=(cj11*sj12);
IkReal x5360=(gconst116*r20);
CheckValue<IkReal> x5361=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5360*x5360)))+(((-1.0)*(r22*r22)))+(((2.0)*x5357*x5360))+(((-1.0)*(x5357*x5357))))),-1);
if(!x5361.valid){
continue;
}
CheckValue<IkReal> x5362 = IKatan2WithCheck(IkReal((((r22*x5359))+((r22*x5358)))),IkReal((((x5357*x5359))+((x5357*x5358))+(((-1.0)*x5358*x5360))+(((-1.0)*x5359*x5360)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5362.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5361.value)))+(x5362.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5363=IKsin(j14);
IkReal x5364=IKcos(j14);
IkReal x5365=((1.0)*sj10);
IkReal x5366=(gconst115*r11);
IkReal x5367=(sj11*sj12);
IkReal x5368=(cj11*cj12);
IkReal x5369=((1.0)*x5364);
IkReal x5370=(gconst115*x5363);
IkReal x5371=(gconst115*x5364);
IkReal x5372=((1.0)*gconst116*x5363);
evalcond[0]=((((-1.0)*r22*x5369))+((r21*x5370))+(((-1.0)*r20*x5372)));
evalcond[1]=(((x5363*x5366))+cj10+(((-1.0)*r12*x5369))+(((-1.0)*r10*x5372)));
evalcond[2]=((((-1.0)*r00*x5372))+(((-1.0)*r02*x5369))+(((-1.0)*x5365))+((r01*x5370)));
evalcond[3]=(((r22*x5363))+((r21*x5371))+((cj12*sj11))+(((-1.0)*gconst116*r20*x5369))+((cj11*sj12)));
evalcond[4]=(((r02*x5363))+(((-1.0)*cj10*x5368))+((cj10*x5367))+((r01*x5371))+(((-1.0)*gconst116*r00*x5369)));
evalcond[5]=(((r12*x5363))+((x5364*x5366))+(((-1.0)*x5365*x5368))+(((-1.0)*gconst116*r10*x5369))+((sj10*x5367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5373=((1.0)*gconst116);
CheckValue<IkReal> x5374=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5373))+(((-1.0)*gconst115*r10)))),-1);
if(!x5374.valid){
continue;
}
CheckValue<IkReal> x5375 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst115*r21*sj10))+(((-1.0)*r20*sj10*x5373)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5375.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5374.value)))+(x5375.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5376=IKsin(j14);
IkReal x5377=IKcos(j14);
IkReal x5378=((1.0)*sj10);
IkReal x5379=(gconst115*r11);
IkReal x5380=(sj11*sj12);
IkReal x5381=(cj11*cj12);
IkReal x5382=((1.0)*x5377);
IkReal x5383=(gconst115*x5376);
IkReal x5384=(gconst115*x5377);
IkReal x5385=((1.0)*gconst116*x5376);
evalcond[0]=((((-1.0)*r20*x5385))+(((-1.0)*r22*x5382))+((r21*x5383)));
evalcond[1]=(cj10+((x5376*x5379))+(((-1.0)*r12*x5382))+(((-1.0)*r10*x5385)));
evalcond[2]=((((-1.0)*x5378))+(((-1.0)*r02*x5382))+((r01*x5383))+(((-1.0)*r00*x5385)));
evalcond[3]=(((r22*x5376))+(((-1.0)*gconst116*r20*x5382))+((cj12*sj11))+((r21*x5384))+((cj11*sj12)));
evalcond[4]=(((cj10*x5380))+((r02*x5376))+(((-1.0)*gconst116*r00*x5382))+((r01*x5384))+(((-1.0)*cj10*x5381)));
evalcond[5]=((((-1.0)*gconst116*r10*x5382))+((r12*x5376))+((sj10*x5380))+((x5377*x5379))+(((-1.0)*x5378*x5381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5386=((1.0)*gconst116);
CheckValue<IkReal> x5387=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x5386)))),-1);
if(!x5387.valid){
continue;
}
CheckValue<IkReal> x5388 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x5386))+((cj10*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5388.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5387.value)))+(x5388.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5389=IKsin(j14);
IkReal x5390=IKcos(j14);
IkReal x5391=((1.0)*sj10);
IkReal x5392=(gconst115*r11);
IkReal x5393=(sj11*sj12);
IkReal x5394=(cj11*cj12);
IkReal x5395=((1.0)*x5390);
IkReal x5396=(gconst115*x5389);
IkReal x5397=(gconst115*x5390);
IkReal x5398=((1.0)*gconst116*x5389);
evalcond[0]=((((-1.0)*r20*x5398))+(((-1.0)*r22*x5395))+((r21*x5396)));
evalcond[1]=(((x5389*x5392))+cj10+(((-1.0)*r12*x5395))+(((-1.0)*r10*x5398)));
evalcond[2]=((((-1.0)*r02*x5395))+(((-1.0)*x5391))+((r01*x5396))+(((-1.0)*r00*x5398)));
evalcond[3]=((((-1.0)*gconst116*r20*x5395))+((cj12*sj11))+((r21*x5397))+((cj11*sj12))+((r22*x5389)));
evalcond[4]=(((r02*x5389))+(((-1.0)*gconst116*r00*x5395))+((cj10*x5393))+((r01*x5397))+(((-1.0)*cj10*x5394)));
evalcond[5]=((((-1.0)*gconst116*r10*x5395))+(((-1.0)*x5391*x5394))+((r12*x5389))+((sj10*x5393))+((x5390*x5392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5399=((-1.0)*r21);
IkReal x5401 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5401)==0){
continue;
}
IkReal x5400=pow(x5401,-0.5);
CheckValue<IkReal> x5402 = IKatan2WithCheck(IkReal(x5399),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5402.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5402.value))));
IkReal gconst118=(x5399*x5400);
IkReal gconst119=((1.0)*r20*x5400);
CheckValue<IkReal> x5403 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5403.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x5403.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x5404=((-1.0)*r21);
CheckValue<IkReal> x5407 = IKatan2WithCheck(IkReal(x5404),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5407.valid){
continue;
}
IkReal x5405=((1.0)*(x5407.value));
IkReal x5406=x5400;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst118;
cj15=gconst119;
j15=((3.14159265)+(((-1.0)*x5405)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5405)));
IkReal gconst118=(x5404*x5406);
IkReal gconst119=((1.0)*r20*x5406);
IkReal x5408=r22*r22;
IkReal x5409=((1.0)*x5408);
CheckValue<IkReal> x5413=IKPowWithIntegerCheck(((-1.0)+x5408),-1);
if(!x5413.valid){
continue;
}
IkReal x5410=x5413.value;
if((((1.0)+(((-1.0)*x5409)))) < -0.00001)
continue;
IkReal x5411=IKsqrt(((1.0)+(((-1.0)*x5409))));
IkReal x5412=(cj10*x5410*x5411);
j14eval[0]=((IKabs((cj10*r22)))+(IKabs((x5412+(((-1.0)*x5409*x5412))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x5414=((-1.0)*r21);
CheckValue<IkReal> x5417 = IKatan2WithCheck(IkReal(x5414),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5417.valid){
continue;
}
IkReal x5415=((1.0)*(x5417.value));
IkReal x5416=x5400;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst118;
cj15=gconst119;
j15=((3.14159265)+(((-1.0)*x5415)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5415)));
IkReal gconst118=(x5414*x5416);
IkReal gconst119=((1.0)*r20*x5416);
IkReal x5418=r22*r22;
IkReal x5419=((1.0)*x5418);
CheckValue<IkReal> x5423=IKPowWithIntegerCheck(((-1.0)+x5418),-1);
if(!x5423.valid){
continue;
}
IkReal x5420=x5423.value;
if((((1.0)+(((-1.0)*x5419)))) < -0.00001)
continue;
IkReal x5421=IKsqrt(((1.0)+(((-1.0)*x5419))));
IkReal x5422=(sj10*x5420*x5421);
j14eval[0]=((IKabs((x5422+(((-1.0)*x5419*x5422)))))+(IKabs((r22*sj10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x5424=((-1.0)*r21);
CheckValue<IkReal> x5427 = IKatan2WithCheck(IkReal(x5424),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5427.valid){
continue;
}
IkReal x5425=((1.0)*(x5427.value));
IkReal x5426=x5400;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst118;
cj15=gconst119;
j15=((3.14159265)+(((-1.0)*x5425)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5425)));
IkReal gconst118=(x5424*x5426);
IkReal gconst119=((1.0)*r20*x5426);
IkReal x5428=r22*r22;
IkReal x5429=(cj10*r02);
IkReal x5430=(r12*sj10);
CheckValue<IkReal> x5434=IKPowWithIntegerCheck(((-1.0)+x5428),-1);
if(!x5434.valid){
continue;
}
IkReal x5431=x5434.value;
if((((1.0)+(((-1.0)*x5428)))) < -0.00001)
continue;
IkReal x5432=IKsqrt(((1.0)+(((-1.0)*x5428))));
IkReal x5433=(r22*x5431*x5432);
j14eval[0]=0;
j14eval[1]=((IKabs((((x5429*x5433))+((x5430*x5433)))))+(IKabs(((((-1.0)*x5430))+(((-1.0)*x5429))))));
j14eval[2]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5435=((1.0)*gconst118);
CheckValue<IkReal> x5436 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x5435))+(((-1.0)*r11*sj10*x5435))+((gconst119*r10*sj10))+((cj10*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5436.valid){
continue;
}
CheckValue<IkReal> x5437=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5435)))),-1);
if(!x5437.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5436.value)+(((1.5707963267949)*(x5437.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5438=IKsin(j14);
IkReal x5439=IKcos(j14);
IkReal x5440=(gconst119*r10);
IkReal x5441=((1.0)*sj10);
IkReal x5442=(sj11*sj12);
IkReal x5443=(gconst119*r20);
IkReal x5444=(gconst119*r00);
IkReal x5445=(cj11*cj12);
IkReal x5446=(gconst118*x5438);
IkReal x5447=(gconst118*x5439);
IkReal x5448=((1.0)*x5439);
IkReal x5449=((1.0)*x5438);
evalcond[0]=((((-1.0)*x5443*x5449))+(((-1.0)*r22*x5448))+((r21*x5446)));
evalcond[1]=((((-1.0)*r12*x5448))+cj10+(((-1.0)*x5440*x5449))+((r11*x5446)));
evalcond[2]=((((-1.0)*x5444*x5449))+(((-1.0)*x5441))+((r01*x5446))+(((-1.0)*r02*x5448)));
evalcond[3]=(((r22*x5438))+(((-1.0)*x5443*x5448))+((cj12*sj11))+((r21*x5447))+((cj11*sj12)));
evalcond[4]=((((-1.0)*x5444*x5448))+(((-1.0)*cj10*x5445))+((r02*x5438))+((r01*x5447))+((cj10*x5442)));
evalcond[5]=(((sj10*x5442))+(((-1.0)*x5441*x5445))+(((-1.0)*x5440*x5448))+((r11*x5447))+((r12*x5438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5450=((1.0)*gconst119);
CheckValue<IkReal> x5451=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x5450)))),-1);
if(!x5451.valid){
continue;
}
CheckValue<IkReal> x5452 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst118*r21*sj10))+(((-1.0)*r20*sj10*x5450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5452.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5451.value)))+(x5452.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5453=IKsin(j14);
IkReal x5454=IKcos(j14);
IkReal x5455=(gconst119*r10);
IkReal x5456=((1.0)*sj10);
IkReal x5457=(sj11*sj12);
IkReal x5458=(gconst119*r20);
IkReal x5459=(gconst119*r00);
IkReal x5460=(cj11*cj12);
IkReal x5461=(gconst118*x5453);
IkReal x5462=(gconst118*x5454);
IkReal x5463=((1.0)*x5454);
IkReal x5464=((1.0)*x5453);
evalcond[0]=((((-1.0)*x5458*x5464))+((r21*x5461))+(((-1.0)*r22*x5463)));
evalcond[1]=(((r11*x5461))+cj10+(((-1.0)*r12*x5463))+(((-1.0)*x5455*x5464)));
evalcond[2]=((((-1.0)*x5459*x5464))+((r01*x5461))+(((-1.0)*r02*x5463))+(((-1.0)*x5456)));
evalcond[3]=((((-1.0)*x5458*x5463))+((r22*x5453))+((r21*x5462))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*x5459*x5463))+((r01*x5462))+((r02*x5453))+((cj10*x5457))+(((-1.0)*cj10*x5460)));
evalcond[5]=(((r12*x5453))+((r11*x5462))+(((-1.0)*x5456*x5460))+(((-1.0)*x5455*x5463))+((sj10*x5457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5465=((1.0)*gconst119);
CheckValue<IkReal> x5466=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5465))+(((-1.0)*gconst118*r00)))),-1);
if(!x5466.valid){
continue;
}
CheckValue<IkReal> x5467 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x5465))+((cj10*gconst118*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5467.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5466.value)))+(x5467.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5468=IKsin(j14);
IkReal x5469=IKcos(j14);
IkReal x5470=(gconst119*r10);
IkReal x5471=((1.0)*sj10);
IkReal x5472=(sj11*sj12);
IkReal x5473=(gconst119*r20);
IkReal x5474=(gconst119*r00);
IkReal x5475=(cj11*cj12);
IkReal x5476=(gconst118*x5468);
IkReal x5477=(gconst118*x5469);
IkReal x5478=((1.0)*x5469);
IkReal x5479=((1.0)*x5468);
evalcond[0]=((((-1.0)*x5473*x5479))+(((-1.0)*r22*x5478))+((r21*x5476)));
evalcond[1]=((((-1.0)*r12*x5478))+(((-1.0)*x5470*x5479))+cj10+((r11*x5476)));
evalcond[2]=(((r01*x5476))+(((-1.0)*x5471))+(((-1.0)*x5474*x5479))+(((-1.0)*r02*x5478)));
evalcond[3]=(((r22*x5468))+(((-1.0)*x5473*x5478))+((cj12*sj11))+((cj11*sj12))+((r21*x5477)));
evalcond[4]=((((-1.0)*cj10*x5475))+((r02*x5468))+((r01*x5477))+(((-1.0)*x5474*x5478))+((cj10*x5472)));
evalcond[5]=(((sj10*x5472))+((r12*x5468))+(((-1.0)*x5470*x5478))+(((-1.0)*x5471*x5475))+((r11*x5477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5480=((-1.0)*r10);
IkReal x5482 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5482)==0){
continue;
}
IkReal x5481=pow(x5482,-0.5);
CheckValue<IkReal> x5483 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5480),IKFAST_ATAN2_MAGTHRESH);
if(!x5483.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5483.value));
IkReal gconst121=(r11*x5481);
IkReal gconst122=(x5480*x5481);
CheckValue<IkReal> x5484 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5484.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x5484.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x5485=((-1.0)*r10);
IkReal x5486=x5481;
CheckValue<IkReal> x5488 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5485),IKFAST_ATAN2_MAGTHRESH);
if(!x5488.valid){
continue;
}
IkReal x5487=((-1.0)*(x5488.value));
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst121;
cj15=gconst122;
j15=x5487;
IkReal gconst120=x5487;
IkReal gconst121=(r11*x5486);
IkReal gconst122=(x5485*x5486);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5489=((1.0)*gconst121);
CheckValue<IkReal> x5490 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x5489))+(((-1.0)*cj10*r01*x5489))+((gconst122*r10*sj10))+((cj10*gconst122*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5490.valid){
continue;
}
CheckValue<IkReal> x5491=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5489))+(((-1.0)*gconst122*r21)))),-1);
if(!x5491.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5490.value)+(((1.5707963267949)*(x5491.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5492=IKsin(j14);
IkReal x5493=IKcos(j14);
IkReal x5494=(gconst122*r00);
IkReal x5495=((1.0)*sj10);
IkReal x5496=(sj11*sj12);
IkReal x5497=(gconst122*r10);
IkReal x5498=(gconst122*r20);
IkReal x5499=(cj11*cj12);
IkReal x5500=((1.0)*x5493);
IkReal x5501=(gconst121*x5492);
IkReal x5502=(gconst121*x5493);
IkReal x5503=((1.0)*x5492);
evalcond[0]=((((-1.0)*r22*x5500))+(((-1.0)*x5498*x5503))+((r21*x5501)));
evalcond[1]=((((-1.0)*x5497*x5503))+(((-1.0)*r12*x5500))+cj10+((r11*x5501)));
evalcond[2]=((((-1.0)*x5495))+(((-1.0)*r02*x5500))+((r01*x5501))+(((-1.0)*x5494*x5503)));
evalcond[3]=((((-1.0)*x5498*x5500))+((r21*x5502))+((cj12*sj11))+((r22*x5492))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj10*x5499))+((r01*x5502))+((cj10*x5496))+(((-1.0)*x5494*x5500))+((r02*x5492)));
evalcond[5]=(((sj10*x5496))+(((-1.0)*x5497*x5500))+((r12*x5492))+(((-1.0)*x5495*x5499))+((r11*x5502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5504=((1.0)*gconst122);
CheckValue<IkReal> x5505 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst121*r21))+(((-1.0)*cj10*r20*x5504)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5505.valid){
continue;
}
CheckValue<IkReal> x5506=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5504)))),-1);
if(!x5506.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5505.value)+(((1.5707963267949)*(x5506.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5507=IKsin(j14);
IkReal x5508=IKcos(j14);
IkReal x5509=(gconst122*r00);
IkReal x5510=((1.0)*sj10);
IkReal x5511=(sj11*sj12);
IkReal x5512=(gconst122*r10);
IkReal x5513=(gconst122*r20);
IkReal x5514=(cj11*cj12);
IkReal x5515=((1.0)*x5508);
IkReal x5516=(gconst121*x5507);
IkReal x5517=(gconst121*x5508);
IkReal x5518=((1.0)*x5507);
evalcond[0]=((((-1.0)*r22*x5515))+(((-1.0)*x5513*x5518))+((r21*x5516)));
evalcond[1]=((((-1.0)*x5512*x5518))+(((-1.0)*r12*x5515))+cj10+((r11*x5516)));
evalcond[2]=((((-1.0)*r02*x5515))+(((-1.0)*x5510))+((r01*x5516))+(((-1.0)*x5509*x5518)));
evalcond[3]=((((-1.0)*x5513*x5515))+((r21*x5517))+((r22*x5507))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((r02*x5507))+(((-1.0)*cj10*x5514))+((r01*x5517))+((cj10*x5511))+(((-1.0)*x5509*x5515)));
evalcond[5]=((((-1.0)*x5510*x5514))+(((-1.0)*x5512*x5515))+((r12*x5507))+((r11*x5517))+((sj10*x5511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5519=((-1.0)*r11);
IkReal x5521 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5521)==0){
continue;
}
IkReal x5520=pow(x5521,-0.5);
CheckValue<IkReal> x5522 = IKatan2WithCheck(IkReal(x5519),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5522.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5522.value))));
IkReal gconst124=(x5519*x5520);
IkReal gconst125=((1.0)*r10*x5520);
CheckValue<IkReal> x5523 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5523.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x5523.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x5524=((-1.0)*r11);
CheckValue<IkReal> x5527 = IKatan2WithCheck(IkReal(x5524),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5527.valid){
continue;
}
IkReal x5525=((1.0)*(x5527.value));
IkReal x5526=x5520;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst124;
cj15=gconst125;
j15=((3.14159265)+(((-1.0)*x5525)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5525)));
IkReal gconst124=(x5524*x5526);
IkReal gconst125=((1.0)*r10*x5526);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x5528=((-1.0)*r11);
CheckValue<IkReal> x5531 = IKatan2WithCheck(IkReal(x5528),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5531.valid){
continue;
}
IkReal x5529=((1.0)*(x5531.value));
IkReal x5530=x5520;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst124;
cj15=gconst125;
j15=((3.14159265)+(((-1.0)*x5529)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5529)));
IkReal gconst124=(x5528*x5530);
IkReal gconst125=((1.0)*r10*x5530);
IkReal x5532=r12*r12;
IkReal x5533=(cj10*r02);
IkReal x5534=x5520;
IkReal x5535=(sj10*x5534);
j14eval[0]=((IKabs(((((-1.0)*x5535))+((x5532*x5535))+((r12*x5533*x5534)))))+(IKabs(((((-1.0)*r12*sj10))+(((-1.0)*x5533))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x5536=((-1.0)*r11);
CheckValue<IkReal> x5539 = IKatan2WithCheck(IkReal(x5536),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5539.valid){
continue;
}
IkReal x5537=((1.0)*(x5539.value));
IkReal x5538=x5520;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst124;
cj15=gconst125;
j15=((3.14159265)+(((-1.0)*x5537)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5537)));
IkReal gconst124=(x5536*x5538);
IkReal gconst125=((1.0)*r10*x5538);
IkReal x5540=r12*r12;
IkReal x5541=(cj11*sj12);
IkReal x5542=(cj12*sj11);
IkReal x5543=((1.0)+(((-1.0)*x5540)));
CheckValue<IkReal> x5550=IKPowWithIntegerCheck(x5543,-1);
if(!x5550.valid){
continue;
}
IkReal x5544=x5550.value;
CheckValue<IkReal> x5551=IKPowWithIntegerCheck(((-1.0)+x5540),-1);
if(!x5551.valid){
continue;
}
IkReal x5545=x5551.value;
IkReal x5546=((1.0)*x5544);
if((x5543) < -0.00001)
continue;
IkReal x5547=IKsqrt(x5543);
IkReal x5548=((1.0)*r12*r22*x5545*x5547);
IkReal x5549=((((-2.0)*r10*r11*r20*r21*x5544))+(((-1.0)*x5546*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x5546*(r10*r10)*(r20*r20))));
j14eval[0]=x5549;
j14eval[1]=IKsign(x5549);
j14eval[2]=((IKabs((((r22*x5541))+((r22*x5542)))))+(IKabs(((((-1.0)*x5542*x5548))+(((-1.0)*x5541*x5548))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5552=(cj11*sj12);
IkReal x5553=(gconst125*r20);
IkReal x5554=(gconst124*r21);
IkReal x5555=(cj12*sj11);
CheckValue<IkReal> x5556 = IKatan2WithCheck(IkReal((((r22*x5555))+((r22*x5552)))),IkReal((((x5554*x5555))+(((-1.0)*x5553*x5555))+((x5552*x5554))+(((-1.0)*x5552*x5553)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5556.valid){
continue;
}
CheckValue<IkReal> x5557=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r22*r22)))+(((-1.0)*(x5554*x5554)))+(((2.0)*x5553*x5554))+(((-1.0)*(x5553*x5553))))),-1);
if(!x5557.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5556.value)+(((1.5707963267949)*(x5557.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5558=IKsin(j14);
IkReal x5559=IKcos(j14);
IkReal x5560=((1.0)*sj10);
IkReal x5561=(gconst125*r20);
IkReal x5562=(sj11*sj12);
IkReal x5563=(gconst125*r00);
IkReal x5564=(cj11*cj12);
IkReal x5565=(gconst125*r10);
IkReal x5566=((1.0)*x5559);
IkReal x5567=(gconst124*x5559);
IkReal x5568=(gconst124*x5558);
IkReal x5569=((1.0)*x5558);
evalcond[0]=((((-1.0)*r22*x5566))+((r21*x5568))+(((-1.0)*x5561*x5569)));
evalcond[1]=((((-1.0)*r12*x5566))+((r11*x5568))+cj10+(((-1.0)*x5565*x5569)));
evalcond[2]=((((-1.0)*x5563*x5569))+(((-1.0)*r02*x5566))+(((-1.0)*x5560))+((r01*x5568)));
evalcond[3]=(((r21*x5567))+((r22*x5558))+((cj12*sj11))+(((-1.0)*x5561*x5566))+((cj11*sj12)));
evalcond[4]=((((-1.0)*x5563*x5566))+((r02*x5558))+(((-1.0)*cj10*x5564))+((cj10*x5562))+((r01*x5567)));
evalcond[5]=(((r12*x5558))+((r11*x5567))+(((-1.0)*x5560*x5564))+((sj10*x5562))+(((-1.0)*x5565*x5566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5570=((1.0)*sj10);
IkReal x5571=((1.0)*gconst124);
CheckValue<IkReal> x5572 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5570))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*gconst124*r11*x5570))+(((-1.0)*cj10*r01*x5571))+((cj10*gconst125*r00))+((gconst125*r10*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5572.valid){
continue;
}
CheckValue<IkReal> x5573=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst125*r21))+(((-1.0)*r20*x5571)))),-1);
if(!x5573.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5572.value)+(((1.5707963267949)*(x5573.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5574=IKsin(j14);
IkReal x5575=IKcos(j14);
IkReal x5576=((1.0)*sj10);
IkReal x5577=(gconst125*r20);
IkReal x5578=(sj11*sj12);
IkReal x5579=(gconst125*r00);
IkReal x5580=(cj11*cj12);
IkReal x5581=(gconst125*r10);
IkReal x5582=((1.0)*x5575);
IkReal x5583=(gconst124*x5575);
IkReal x5584=(gconst124*x5574);
IkReal x5585=((1.0)*x5574);
evalcond[0]=(((r21*x5584))+(((-1.0)*x5577*x5585))+(((-1.0)*r22*x5582)));
evalcond[1]=((((-1.0)*r12*x5582))+((r11*x5584))+cj10+(((-1.0)*x5581*x5585)));
evalcond[2]=((((-1.0)*x5579*x5585))+(((-1.0)*r02*x5582))+(((-1.0)*x5576))+((r01*x5584)));
evalcond[3]=(((r21*x5583))+(((-1.0)*x5577*x5582))+((r22*x5574))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((r02*x5574))+(((-1.0)*x5579*x5582))+((cj10*x5578))+(((-1.0)*cj10*x5580))+((r01*x5583)));
evalcond[5]=((((-1.0)*x5576*x5580))+((r11*x5583))+((r12*x5574))+((sj10*x5578))+(((-1.0)*x5581*x5582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5586=((1.0)*gconst125);
CheckValue<IkReal> x5587=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5586)))),-1);
if(!x5587.valid){
continue;
}
CheckValue<IkReal> x5588 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x5586))+((cj10*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5588.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5587.value)))+(x5588.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5589=IKsin(j14);
IkReal x5590=IKcos(j14);
IkReal x5591=((1.0)*sj10);
IkReal x5592=(gconst125*r20);
IkReal x5593=(sj11*sj12);
IkReal x5594=(gconst125*r00);
IkReal x5595=(cj11*cj12);
IkReal x5596=(gconst125*r10);
IkReal x5597=((1.0)*x5590);
IkReal x5598=(gconst124*x5590);
IkReal x5599=(gconst124*x5589);
IkReal x5600=((1.0)*x5589);
evalcond[0]=(((r21*x5599))+(((-1.0)*x5592*x5600))+(((-1.0)*r22*x5597)));
evalcond[1]=((((-1.0)*r12*x5597))+(((-1.0)*x5596*x5600))+((r11*x5599))+cj10);
evalcond[2]=((((-1.0)*r02*x5597))+(((-1.0)*x5591))+(((-1.0)*x5594*x5600))+((r01*x5599)));
evalcond[3]=(((r21*x5598))+(((-1.0)*x5592*x5597))+((cj12*sj11))+((r22*x5589))+((cj11*sj12)));
evalcond[4]=(((cj10*x5593))+(((-1.0)*x5594*x5597))+((r02*x5589))+(((-1.0)*cj10*x5595))+((r01*x5598)));
evalcond[5]=(((sj10*x5593))+((r11*x5598))+((r12*x5589))+(((-1.0)*x5596*x5597))+(((-1.0)*x5591*x5595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x5601=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x5601;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj15*r00))+((r01*sj15))))));
j14eval[2]=IKsign(x5601);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x5602=((1.0)*cj15);
IkReal x5603=((((-1.0)*r01*x5602))+(((-1.0)*r00*sj15)));
j14eval[0]=x5603;
j14eval[1]=((IKabs(r22))+(IKabs((((r21*sj15))+(((-1.0)*r20*x5602))))));
j14eval[2]=IKsign(x5603);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x5604=r11*r11;
IkReal x5605=cj15*cj15;
IkReal x5606=(cj15*r10);
IkReal x5607=(r11*sj15);
IkReal x5608=((((-1.0)*x5604))+((x5604*x5605))+(((-1.0)*(r12*r12)))+(((-1.0)*x5605*(r10*r10)))+(((2.0)*x5606*x5607)));
j14eval[0]=x5608;
j14eval[1]=((IKabs(r12))+(IKabs((x5607+(((-1.0)*x5606))))));
j14eval[2]=IKsign(x5608);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5609=r11*r11;
IkReal x5610=cj15*cj15;
IkReal x5611=(r11*sj15);
IkReal x5612=(cj15*r10);
CheckValue<IkReal> x5613 = IKatan2WithCheck(IkReal(((((-1.0)*x5612))+x5611)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5613.valid){
continue;
}
CheckValue<IkReal> x5614=IKPowWithIntegerCheck(IKsign(((((2.0)*x5611*x5612))+(((-1.0)*x5609))+((x5609*x5610))+(((-1.0)*(r12*r12)))+(((-1.0)*x5610*(r10*r10))))),-1);
if(!x5614.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5613.value)+(((1.5707963267949)*(x5614.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5615=IKcos(j14);
IkReal x5616=IKsin(j14);
IkReal x5617=(cj15*r20);
IkReal x5618=(cj15*r10);
IkReal x5619=(cj15*r00);
IkReal x5620=((1.0)*x5615);
IkReal x5621=(sj15*x5615);
IkReal x5622=((1.0)*x5616);
IkReal x5623=(sj15*x5616);
evalcond[0]=((((-1.0)*x5618*x5620))+((r12*x5616))+((r11*x5621)));
evalcond[1]=((((-1.0)*r22*x5620))+((r21*x5623))+(((-1.0)*x5617*x5622)));
evalcond[2]=((((-1.0)*x5619*x5622))+((r01*x5623))+(((-1.0)*r02*x5620)));
evalcond[3]=((1.0)+(((-1.0)*x5618*x5622))+(((-1.0)*r12*x5620))+((r11*x5623)));
evalcond[4]=(((r21*x5621))+(((-1.0)*x5617*x5620))+((cj12*sj11))+((cj11*sj12))+((r22*x5616)));
evalcond[5]=(((sj11*sj12))+((r02*x5616))+(((-1.0)*x5619*x5620))+((r01*x5621))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5624=((1.0)*cj15);
CheckValue<IkReal> x5625 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj15))+(((-1.0)*r20*x5624)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5625.valid){
continue;
}
CheckValue<IkReal> x5626=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5624))+(((-1.0)*r00*sj15)))),-1);
if(!x5626.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5625.value)+(((1.5707963267949)*(x5626.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5627=IKcos(j14);
IkReal x5628=IKsin(j14);
IkReal x5629=(cj15*r20);
IkReal x5630=(cj15*r10);
IkReal x5631=(cj15*r00);
IkReal x5632=((1.0)*x5627);
IkReal x5633=(sj15*x5627);
IkReal x5634=((1.0)*x5628);
IkReal x5635=(sj15*x5628);
evalcond[0]=(((r11*x5633))+((r12*x5628))+(((-1.0)*x5630*x5632)));
evalcond[1]=((((-1.0)*x5629*x5634))+(((-1.0)*r22*x5632))+((r21*x5635)));
evalcond[2]=(((r01*x5635))+(((-1.0)*r02*x5632))+(((-1.0)*x5631*x5634)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5632))+((r11*x5635))+(((-1.0)*x5630*x5634)));
evalcond[4]=((((-1.0)*x5629*x5632))+((cj12*sj11))+((cj11*sj12))+((r22*x5628))+((r21*x5633)));
evalcond[5]=(((sj11*sj12))+((r01*x5633))+((r02*x5628))+(((-1.0)*cj11*cj12))+(((-1.0)*x5631*x5632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x5636 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj15*r00))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5636.valid){
continue;
}
CheckValue<IkReal> x5637=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x5637.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5636.value)+(((1.5707963267949)*(x5637.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5638=IKcos(j14);
IkReal x5639=IKsin(j14);
IkReal x5640=(cj15*r20);
IkReal x5641=(cj15*r10);
IkReal x5642=(cj15*r00);
IkReal x5643=((1.0)*x5638);
IkReal x5644=(sj15*x5638);
IkReal x5645=((1.0)*x5639);
IkReal x5646=(sj15*x5639);
evalcond[0]=(((r12*x5639))+((r11*x5644))+(((-1.0)*x5641*x5643)));
evalcond[1]=((((-1.0)*r22*x5643))+((r21*x5646))+(((-1.0)*x5640*x5645)));
evalcond[2]=((((-1.0)*x5642*x5645))+((r01*x5646))+(((-1.0)*r02*x5643)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5643))+((r11*x5646))+(((-1.0)*x5641*x5645)));
evalcond[4]=(((r22*x5639))+((r21*x5644))+(((-1.0)*x5640*x5643))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x5642*x5643))+((r01*x5644))+((r02*x5639))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x5647=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x5647;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x5647);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x5648=((1.0)*cj15);
IkReal x5649=((((-1.0)*r21*x5648))+(((-1.0)*r20*sj15)));
j14eval[0]=x5649;
j14eval[1]=IKsign(x5649);
j14eval[2]=((IKabs((((r01*sj15))+(((-1.0)*r00*x5648)))))+(IKabs(r02)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x5650=cj15*cj15;
IkReal x5651=r11*r11;
IkReal x5652=(r11*sj15);
IkReal x5653=(cj15*r10);
IkReal x5654=(x5651+(r12*r12)+((x5650*(r10*r10)))+(((-2.0)*x5652*x5653))+(((-1.0)*x5650*x5651)));
j14eval[0]=x5654;
j14eval[1]=((IKabs((x5652+(((-1.0)*x5653)))))+(IKabs(r12)));
j14eval[2]=IKsign(x5654);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5655=cj15*cj15;
IkReal x5656=r11*r11;
IkReal x5657=(r11*sj15);
IkReal x5658=(cj15*r10);
CheckValue<IkReal> x5659=IKPowWithIntegerCheck(IKsign((((x5655*(r10*r10)))+x5656+(r12*r12)+(((-2.0)*x5657*x5658))+(((-1.0)*x5655*x5656)))),-1);
if(!x5659.valid){
continue;
}
CheckValue<IkReal> x5660 = IKatan2WithCheck(IkReal((x5657+(((-1.0)*x5658)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5660.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5659.value)))+(x5660.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5661=IKcos(j14);
IkReal x5662=IKsin(j14);
IkReal x5663=(cj15*r20);
IkReal x5664=(cj15*r10);
IkReal x5665=(cj15*r00);
IkReal x5666=((1.0)*x5661);
IkReal x5667=(sj15*x5661);
IkReal x5668=((1.0)*x5662);
IkReal x5669=(sj15*x5662);
evalcond[0]=(((r11*x5667))+((r12*x5662))+(((-1.0)*x5664*x5666)));
evalcond[1]=((((-1.0)*r22*x5666))+(((-1.0)*x5663*x5668))+((r21*x5669)));
evalcond[2]=(((r01*x5669))+(((-1.0)*r02*x5666))+(((-1.0)*x5665*x5668)));
evalcond[3]=((-1.0)+((r11*x5669))+(((-1.0)*r12*x5666))+(((-1.0)*x5664*x5668)));
evalcond[4]=(((r22*x5662))+(((-1.0)*x5663*x5666))+((cj12*sj11))+((cj11*sj12))+((r21*x5667)));
evalcond[5]=(((r01*x5667))+(((-1.0)*sj11*sj12))+((cj11*cj12))+((r02*x5662))+(((-1.0)*x5665*x5666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5670=((1.0)*cj15);
CheckValue<IkReal> x5671=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15))+(((-1.0)*r21*x5670)))),-1);
if(!x5671.valid){
continue;
}
CheckValue<IkReal> x5672 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x5670))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5672.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5671.value)))+(x5672.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5673=IKcos(j14);
IkReal x5674=IKsin(j14);
IkReal x5675=(cj15*r20);
IkReal x5676=(cj15*r10);
IkReal x5677=(cj15*r00);
IkReal x5678=((1.0)*x5673);
IkReal x5679=(sj15*x5673);
IkReal x5680=((1.0)*x5674);
IkReal x5681=(sj15*x5674);
evalcond[0]=(((r11*x5679))+((r12*x5674))+(((-1.0)*x5676*x5678)));
evalcond[1]=((((-1.0)*r22*x5678))+(((-1.0)*x5675*x5680))+((r21*x5681)));
evalcond[2]=((((-1.0)*x5677*x5680))+((r01*x5681))+(((-1.0)*r02*x5678)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5678))+(((-1.0)*x5676*x5680))+((r11*x5681)));
evalcond[4]=(((cj12*sj11))+((r21*x5679))+((r22*x5674))+(((-1.0)*x5675*x5678))+((cj11*sj12)));
evalcond[5]=(((r02*x5674))+(((-1.0)*sj11*sj12))+((cj11*cj12))+((r01*x5679))+(((-1.0)*x5677*x5678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x5682 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5682.valid){
continue;
}
CheckValue<IkReal> x5683=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x5683.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5682.value)+(((1.5707963267949)*(x5683.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5684=IKcos(j14);
IkReal x5685=IKsin(j14);
IkReal x5686=(cj15*r20);
IkReal x5687=(cj15*r10);
IkReal x5688=(cj15*r00);
IkReal x5689=((1.0)*x5684);
IkReal x5690=(sj15*x5684);
IkReal x5691=((1.0)*x5685);
IkReal x5692=(sj15*x5685);
evalcond[0]=((((-1.0)*x5687*x5689))+((r12*x5685))+((r11*x5690)));
evalcond[1]=((((-1.0)*x5686*x5691))+(((-1.0)*r22*x5689))+((r21*x5692)));
evalcond[2]=((((-1.0)*r02*x5689))+(((-1.0)*x5688*x5691))+((r01*x5692)));
evalcond[3]=((-1.0)+(((-1.0)*x5687*x5691))+((r11*x5692))+(((-1.0)*r12*x5689)));
evalcond[4]=((((-1.0)*x5686*x5689))+((r22*x5685))+((cj12*sj11))+((r21*x5690))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+((r02*x5685))+(((-1.0)*x5688*x5689))+((r01*x5690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5693=((-1.0)*r00);
IkReal x5695 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5695)==0){
continue;
}
IkReal x5694=pow(x5695,-0.5);
CheckValue<IkReal> x5696 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5693),IKFAST_ATAN2_MAGTHRESH);
if(!x5696.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5696.value));
IkReal gconst127=(r01*x5694);
IkReal gconst128=(x5693*x5694);
CheckValue<IkReal> x5697 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5697.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x5697.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x5698=((-1.0)*r00);
IkReal x5699=x5694;
CheckValue<IkReal> x5701 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5698),IKFAST_ATAN2_MAGTHRESH);
if(!x5701.valid){
continue;
}
IkReal x5700=((-1.0)*(x5701.value));
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst127;
cj15=gconst128;
j15=x5700;
IkReal gconst126=x5700;
IkReal gconst127=(r01*x5699);
IkReal gconst128=(x5698*x5699);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5702=((1.0)*gconst127);
CheckValue<IkReal> x5703 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x5702))+((gconst128*r10*sj10))+((cj10*gconst128*r00))+(((-1.0)*cj10*r01*x5702)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5703.valid){
continue;
}
CheckValue<IkReal> x5704=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x5702)))),-1);
if(!x5704.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5703.value)+(((1.5707963267949)*(x5704.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5705=IKsin(j14);
IkReal x5706=IKcos(j14);
IkReal x5707=(gconst127*r11);
IkReal x5708=((1.0)*sj10);
IkReal x5709=(gconst127*r01);
IkReal x5710=(sj11*sj12);
IkReal x5711=(gconst127*r21);
IkReal x5712=(cj11*cj12);
IkReal x5713=((1.0)*x5706);
IkReal x5714=((1.0)*gconst128*x5705);
evalcond[0]=((((-1.0)*r22*x5713))+(((-1.0)*r20*x5714))+((x5705*x5711)));
evalcond[1]=(((x5705*x5707))+(((-1.0)*r10*x5714))+cj10+(((-1.0)*r12*x5713)));
evalcond[2]=((((-1.0)*r00*x5714))+((x5705*x5709))+(((-1.0)*x5708))+(((-1.0)*r02*x5713)));
evalcond[3]=(((r22*x5705))+(((-1.0)*gconst128*r20*x5713))+((cj12*sj11))+((cj11*sj12))+((x5706*x5711)));
evalcond[4]=((((-1.0)*gconst128*r00*x5713))+((r02*x5705))+((cj10*x5710))+((x5706*x5709))+(((-1.0)*cj10*x5712)));
evalcond[5]=((((-1.0)*gconst128*r10*x5713))+(((-1.0)*x5708*x5712))+((x5706*x5707))+((sj10*x5710))+((r12*x5705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5715=((1.0)*gconst128);
CheckValue<IkReal> x5716=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5715))+(((-1.0)*gconst127*r10)))),-1);
if(!x5716.valid){
continue;
}
CheckValue<IkReal> x5717 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x5715))+((gconst127*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5717.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5716.value)))+(x5717.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5718=IKsin(j14);
IkReal x5719=IKcos(j14);
IkReal x5720=(gconst127*r11);
IkReal x5721=((1.0)*sj10);
IkReal x5722=(gconst127*r01);
IkReal x5723=(sj11*sj12);
IkReal x5724=(gconst127*r21);
IkReal x5725=(cj11*cj12);
IkReal x5726=((1.0)*x5719);
IkReal x5727=((1.0)*gconst128*x5718);
evalcond[0]=((((-1.0)*r20*x5727))+((x5718*x5724))+(((-1.0)*r22*x5726)));
evalcond[1]=((((-1.0)*r12*x5726))+((x5718*x5720))+cj10+(((-1.0)*r10*x5727)));
evalcond[2]=((((-1.0)*x5721))+((x5718*x5722))+(((-1.0)*r02*x5726))+(((-1.0)*r00*x5727)));
evalcond[3]=(((r22*x5718))+((x5719*x5724))+((cj12*sj11))+(((-1.0)*gconst128*r20*x5726))+((cj11*sj12)));
evalcond[4]=(((r02*x5718))+(((-1.0)*gconst128*r00*x5726))+((x5719*x5722))+(((-1.0)*cj10*x5725))+((cj10*x5723)));
evalcond[5]=((((-1.0)*gconst128*r10*x5726))+((x5719*x5720))+((r12*x5718))+((sj10*x5723))+(((-1.0)*x5721*x5725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5728=((-1.0)*r01);
IkReal x5730 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5730)==0){
continue;
}
IkReal x5729=pow(x5730,-0.5);
CheckValue<IkReal> x5731 = IKatan2WithCheck(IkReal(x5728),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5731.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5731.value))));
IkReal gconst130=(x5728*x5729);
IkReal gconst131=((1.0)*r00*x5729);
CheckValue<IkReal> x5732 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5732.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x5732.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[5];
IkReal x5733=((-1.0)*r01);
CheckValue<IkReal> x5736 = IKatan2WithCheck(IkReal(x5733),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5736.valid){
continue;
}
IkReal x5734=((1.0)*(x5736.value));
IkReal x5735=x5729;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst130;
cj15=gconst131;
j15=((3.14159265)+(((-1.0)*x5734)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5734)));
IkReal gconst130=(x5733*x5735);
IkReal gconst131=((1.0)*r00*x5735);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=cj10;
j14eval[3]=r22;
j14eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  || IKabs(j14eval[4]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x5737=((-1.0)*r01);
CheckValue<IkReal> x5740 = IKatan2WithCheck(IkReal(x5737),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5740.valid){
continue;
}
IkReal x5738=((1.0)*(x5740.value));
IkReal x5739=x5729;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst130;
cj15=gconst131;
j15=((3.14159265)+(((-1.0)*x5738)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5738)));
IkReal gconst130=(x5737*x5739);
IkReal gconst131=((1.0)*r00*x5739);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x5741=((-1.0)*r01);
CheckValue<IkReal> x5744 = IKatan2WithCheck(IkReal(x5741),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5744.valid){
continue;
}
IkReal x5742=((1.0)*(x5744.value));
IkReal x5743=x5729;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst130;
cj15=gconst131;
j15=((3.14159265)+(((-1.0)*x5742)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5742)));
IkReal gconst130=(x5741*x5743);
IkReal gconst131=((1.0)*r00*x5743);
IkReal x5745=r02*r02;
IkReal x5746=(r12*sj10);
IkReal x5747=x5729;
IkReal x5748=(cj10*x5747);
j14eval[0]=((IKabs((((r02*x5746*x5747))+((x5745*x5748))+(((-1.0)*x5748)))))+(IKabs(((((-1.0)*x5746))+(((-1.0)*cj10*r02))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5749=((1.0)*gconst130);
CheckValue<IkReal> x5750 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x5749))+((gconst131*r10*sj10))+(((-1.0)*r11*sj10*x5749))+((cj10*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5750.valid){
continue;
}
CheckValue<IkReal> x5751=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5749))+(((-1.0)*gconst131*r21)))),-1);
if(!x5751.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5750.value)+(((1.5707963267949)*(x5751.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5752=IKsin(j14);
IkReal x5753=IKcos(j14);
IkReal x5754=(gconst131*r10);
IkReal x5755=((1.0)*sj10);
IkReal x5756=(gconst130*r11);
IkReal x5757=(gconst131*r20);
IkReal x5758=(sj11*sj12);
IkReal x5759=(gconst131*r00);
IkReal x5760=(cj11*cj12);
IkReal x5761=((1.0)*x5753);
IkReal x5762=((1.0)*x5752);
IkReal x5763=(gconst130*x5753);
IkReal x5764=(gconst130*x5752);
evalcond[0]=((((-1.0)*x5757*x5762))+((r21*x5764))+(((-1.0)*r22*x5761)));
evalcond[1]=((((-1.0)*r12*x5761))+cj10+((x5752*x5756))+(((-1.0)*x5754*x5762)));
evalcond[2]=(((r01*x5764))+(((-1.0)*x5755))+(((-1.0)*x5759*x5762))+(((-1.0)*r02*x5761)));
evalcond[3]=((((-1.0)*x5757*x5761))+((r21*x5763))+((cj12*sj11))+((cj11*sj12))+((r22*x5752)));
evalcond[4]=((((-1.0)*cj10*x5760))+((r01*x5763))+(((-1.0)*x5759*x5761))+((r02*x5752))+((cj10*x5758)));
evalcond[5]=(((sj10*x5758))+(((-1.0)*x5755*x5760))+((x5753*x5756))+(((-1.0)*x5754*x5761))+((r12*x5752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5765=((1.0)*gconst131);
CheckValue<IkReal> x5766 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x5765))+((gconst130*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5766.valid){
continue;
}
CheckValue<IkReal> x5767=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5765))+(((-1.0)*gconst130*r10)))),-1);
if(!x5767.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5766.value)+(((1.5707963267949)*(x5767.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5768=IKsin(j14);
IkReal x5769=IKcos(j14);
IkReal x5770=(gconst131*r10);
IkReal x5771=((1.0)*sj10);
IkReal x5772=(gconst130*r11);
IkReal x5773=(gconst131*r20);
IkReal x5774=(sj11*sj12);
IkReal x5775=(gconst131*r00);
IkReal x5776=(cj11*cj12);
IkReal x5777=((1.0)*x5769);
IkReal x5778=((1.0)*x5768);
IkReal x5779=(gconst130*x5769);
IkReal x5780=(gconst130*x5768);
evalcond[0]=(((r21*x5780))+(((-1.0)*r22*x5777))+(((-1.0)*x5773*x5778)));
evalcond[1]=((((-1.0)*r12*x5777))+(((-1.0)*x5770*x5778))+cj10+((x5768*x5772)));
evalcond[2]=(((r01*x5780))+(((-1.0)*r02*x5777))+(((-1.0)*x5771))+(((-1.0)*x5775*x5778)));
evalcond[3]=(((r22*x5768))+((r21*x5779))+((cj12*sj11))+(((-1.0)*x5773*x5777))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj10*x5776))+((r01*x5779))+((cj10*x5774))+((r02*x5768))+(((-1.0)*x5775*x5777)));
evalcond[5]=(((x5769*x5772))+(((-1.0)*x5770*x5777))+(((-1.0)*x5771*x5776))+((r12*x5768))+((sj10*x5774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5781=((1.0)*gconst131);
CheckValue<IkReal> x5782 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst130*r21))+(((-1.0)*cj10*r20*x5781)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5782.valid){
continue;
}
CheckValue<IkReal> x5783=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5781))+(((-1.0)*gconst130*r00)))),-1);
if(!x5783.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5782.value)+(((1.5707963267949)*(x5783.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5784=IKsin(j14);
IkReal x5785=IKcos(j14);
IkReal x5786=(gconst131*r10);
IkReal x5787=((1.0)*sj10);
IkReal x5788=(gconst130*r11);
IkReal x5789=(gconst131*r20);
IkReal x5790=(sj11*sj12);
IkReal x5791=(gconst131*r00);
IkReal x5792=(cj11*cj12);
IkReal x5793=((1.0)*x5785);
IkReal x5794=((1.0)*x5784);
IkReal x5795=(gconst130*x5785);
IkReal x5796=(gconst130*x5784);
evalcond[0]=(((r21*x5796))+(((-1.0)*r22*x5793))+(((-1.0)*x5789*x5794)));
evalcond[1]=(((x5784*x5788))+cj10+(((-1.0)*x5786*x5794))+(((-1.0)*r12*x5793)));
evalcond[2]=((((-1.0)*x5787))+((r01*x5796))+(((-1.0)*x5791*x5794))+(((-1.0)*r02*x5793)));
evalcond[3]=(((r21*x5795))+((r22*x5784))+(((-1.0)*x5789*x5793))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((cj10*x5790))+((r01*x5795))+(((-1.0)*x5791*x5793))+(((-1.0)*cj10*x5792))+((r02*x5784)));
evalcond[5]=(((r12*x5784))+((x5785*x5788))+(((-1.0)*x5786*x5793))+(((-1.0)*x5787*x5792))+((sj10*x5790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x5797=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x5797;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x5797);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x5798=((1.0)*cj15);
IkReal x5799=((((-1.0)*r11*x5798))+(((-1.0)*r10*sj15)));
j14eval[0]=x5799;
j14eval[1]=IKsign(x5799);
j14eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x5798))+((r21*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x5800=cj15*cj15;
IkReal x5801=r01*r01;
IkReal x5802=(cj15*r00);
IkReal x5803=(r01*sj15);
IkReal x5804=((((-1.0)*x5800*x5801))+((x5800*(r00*r00)))+(r02*r02)+(((-2.0)*x5802*x5803))+x5801);
j14eval[0]=x5804;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x5802))+x5803))));
j14eval[2]=IKsign(x5804);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5805=cj15*cj15;
IkReal x5806=r01*r01;
IkReal x5807=(r01*sj15);
IkReal x5808=(cj15*r00);
CheckValue<IkReal> x5809=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5805*x5806))+((x5805*(r00*r00)))+(r02*r02)+(((-2.0)*x5807*x5808))+x5806)),-1);
if(!x5809.valid){
continue;
}
CheckValue<IkReal> x5810 = IKatan2WithCheck(IkReal(((((-1.0)*x5808))+x5807)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5810.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5809.value)))+(x5810.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5811=IKcos(j14);
IkReal x5812=IKsin(j14);
IkReal x5813=(cj15*r20);
IkReal x5814=(cj15*r10);
IkReal x5815=(cj15*r00);
IkReal x5816=((1.0)*x5811);
IkReal x5817=(sj15*x5811);
IkReal x5818=((1.0)*x5812);
IkReal x5819=(sj15*x5812);
evalcond[0]=((((-1.0)*x5815*x5816))+((r02*x5812))+((r01*x5817)));
evalcond[1]=(((r21*x5819))+(((-1.0)*x5813*x5818))+(((-1.0)*r22*x5816)));
evalcond[2]=((((-1.0)*r12*x5816))+(((-1.0)*x5814*x5818))+((r11*x5819)));
evalcond[3]=((-1.0)+(((-1.0)*x5815*x5818))+(((-1.0)*r02*x5816))+((r01*x5819)));
evalcond[4]=(((r21*x5817))+(((-1.0)*x5813*x5816))+((r22*x5812))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x5814*x5816))+((r11*x5817))+((r12*x5812))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5820=((1.0)*cj15);
CheckValue<IkReal> x5821=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj15))+(((-1.0)*r11*x5820)))),-1);
if(!x5821.valid){
continue;
}
CheckValue<IkReal> x5822 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5820))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5822.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5821.value)))+(x5822.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5823=IKcos(j14);
IkReal x5824=IKsin(j14);
IkReal x5825=(cj15*r20);
IkReal x5826=(cj15*r10);
IkReal x5827=(cj15*r00);
IkReal x5828=((1.0)*x5823);
IkReal x5829=(sj15*x5823);
IkReal x5830=((1.0)*x5824);
IkReal x5831=(sj15*x5824);
evalcond[0]=(((r02*x5824))+((r01*x5829))+(((-1.0)*x5827*x5828)));
evalcond[1]=((((-1.0)*r22*x5828))+((r21*x5831))+(((-1.0)*x5825*x5830)));
evalcond[2]=(((r11*x5831))+(((-1.0)*x5826*x5830))+(((-1.0)*r12*x5828)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x5828))+((r01*x5831))+(((-1.0)*x5827*x5830)));
evalcond[4]=(((r21*x5829))+((cj12*sj11))+((r22*x5824))+(((-1.0)*x5825*x5828))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r12*x5824))+((r11*x5829))+(((-1.0)*x5826*x5828))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x5832=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x5832.valid){
continue;
}
CheckValue<IkReal> x5833 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5833.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5832.value)))+(x5833.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5834=IKcos(j14);
IkReal x5835=IKsin(j14);
IkReal x5836=(cj15*r20);
IkReal x5837=(cj15*r10);
IkReal x5838=(cj15*r00);
IkReal x5839=((1.0)*x5834);
IkReal x5840=(sj15*x5834);
IkReal x5841=((1.0)*x5835);
IkReal x5842=(sj15*x5835);
evalcond[0]=(((r02*x5835))+((r01*x5840))+(((-1.0)*x5838*x5839)));
evalcond[1]=((((-1.0)*r22*x5839))+((r21*x5842))+(((-1.0)*x5836*x5841)));
evalcond[2]=((((-1.0)*x5837*x5841))+((r11*x5842))+(((-1.0)*r12*x5839)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x5839))+((r01*x5842))+(((-1.0)*x5838*x5841)));
evalcond[4]=(((r21*x5840))+((cj12*sj11))+((r22*x5835))+((cj11*sj12))+(((-1.0)*x5836*x5839)));
evalcond[5]=(((sj11*sj12))+((r11*x5840))+((r12*x5835))+(((-1.0)*x5837*x5839))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x5843=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x5843;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x5843);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x5844=((1.0)*cj15);
IkReal x5845=((((-1.0)*r21*x5844))+(((-1.0)*r20*sj15)));
j14eval[0]=x5845;
j14eval[1]=IKsign(x5845);
j14eval[2]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*r10*x5844))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x5846=(cj11*sj12);
IkReal x5847=(r01*sj15);
IkReal x5848=((1.0)*r02);
IkReal x5849=(cj12*sj11);
IkReal x5850=((1.0)*cj15*r00);
IkReal x5851=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x5851;
j14eval[1]=IKsign(x5851);
j14eval[2]=((IKabs(((((-1.0)*x5849*x5850))+((x5846*x5847))+(((-1.0)*x5846*x5850))+((x5847*x5849)))))+(IKabs(((((-1.0)*x5848*x5849))+(((-1.0)*x5846*x5848))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5852=(cj11*sj12);
IkReal x5853=(r01*sj15);
IkReal x5854=((1.0)*r02);
IkReal x5855=(cj12*sj11);
IkReal x5856=((1.0)*cj15*r00);
CheckValue<IkReal> x5857 = IKatan2WithCheck(IkReal((((x5852*x5853))+(((-1.0)*x5855*x5856))+(((-1.0)*x5852*x5856))+((x5853*x5855)))),IkReal(((((-1.0)*x5854*x5855))+(((-1.0)*x5852*x5854)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5857.valid){
continue;
}
CheckValue<IkReal> x5858=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x5858.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5857.value)+(((1.5707963267949)*(x5858.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5859=IKcos(j14);
IkReal x5860=IKsin(j14);
IkReal x5861=(cj15*r20);
IkReal x5862=(cj15*r10);
IkReal x5863=(cj15*r00);
IkReal x5864=((1.0)*x5859);
IkReal x5865=(sj15*x5859);
IkReal x5866=((1.0)*x5860);
IkReal x5867=(sj15*x5860);
evalcond[0]=((((-1.0)*x5863*x5864))+((r02*x5860))+((r01*x5865)));
evalcond[1]=((((-1.0)*r22*x5864))+((r21*x5867))+(((-1.0)*x5861*x5866)));
evalcond[2]=((((-1.0)*x5862*x5866))+((r11*x5867))+(((-1.0)*r12*x5864)));
evalcond[3]=((1.0)+(((-1.0)*x5863*x5866))+(((-1.0)*r02*x5864))+((r01*x5867)));
evalcond[4]=(((r21*x5865))+((r22*x5860))+(((-1.0)*x5861*x5864))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*x5862*x5864))+((r11*x5865))+((r12*x5860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5868=((1.0)*cj15);
CheckValue<IkReal> x5869 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x5868))+((r11*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5869.valid){
continue;
}
CheckValue<IkReal> x5870=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15))+(((-1.0)*r21*x5868)))),-1);
if(!x5870.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5869.value)+(((1.5707963267949)*(x5870.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5871=IKcos(j14);
IkReal x5872=IKsin(j14);
IkReal x5873=(cj15*r20);
IkReal x5874=(cj15*r10);
IkReal x5875=(cj15*r00);
IkReal x5876=((1.0)*x5871);
IkReal x5877=(sj15*x5871);
IkReal x5878=((1.0)*x5872);
IkReal x5879=(sj15*x5872);
evalcond[0]=((((-1.0)*x5875*x5876))+((r02*x5872))+((r01*x5877)));
evalcond[1]=((((-1.0)*r22*x5876))+(((-1.0)*x5873*x5878))+((r21*x5879)));
evalcond[2]=((((-1.0)*r12*x5876))+(((-1.0)*x5874*x5878))+((r11*x5879)));
evalcond[3]=((1.0)+(((-1.0)*x5875*x5878))+(((-1.0)*r02*x5876))+((r01*x5879)));
evalcond[4]=(((r22*x5872))+(((-1.0)*x5873*x5876))+((cj12*sj11))+((cj11*sj12))+((r21*x5877)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*x5874*x5876))+((r12*x5872))+((r11*x5877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x5880=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x5880.valid){
continue;
}
CheckValue<IkReal> x5881 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5881.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5880.value)))+(x5881.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5882=IKcos(j14);
IkReal x5883=IKsin(j14);
IkReal x5884=(cj15*r20);
IkReal x5885=(cj15*r10);
IkReal x5886=(cj15*r00);
IkReal x5887=((1.0)*x5882);
IkReal x5888=(sj15*x5882);
IkReal x5889=((1.0)*x5883);
IkReal x5890=(sj15*x5883);
evalcond[0]=(((r01*x5888))+(((-1.0)*x5886*x5887))+((r02*x5883)));
evalcond[1]=(((r21*x5890))+(((-1.0)*x5884*x5889))+(((-1.0)*r22*x5887)));
evalcond[2]=((((-1.0)*x5885*x5889))+(((-1.0)*r12*x5887))+((r11*x5890)));
evalcond[3]=((1.0)+(((-1.0)*x5886*x5889))+(((-1.0)*r02*x5887))+((r01*x5890)));
evalcond[4]=(((r22*x5883))+((r21*x5888))+(((-1.0)*x5884*x5887))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((r12*x5883))+((cj11*cj12))+((r11*x5888))+(((-1.0)*x5885*x5887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x5891=((-1.0)*px);
sj13=0;
cj13=1.0;
j13=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5891);
rxp1_1=(px*r21);
rxp1_2=(r11*x5891);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x5892=((-1.0)*px);
sj13=0;
cj13=1.0;
j13=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5892);
rxp1_1=(px*r21);
rxp1_2=(r11*x5892);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=((((-1.0)*cj15*r20))+((r21*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x5893=((-1.0)*px);
sj13=0;
cj13=1.0;
j13=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5893);
rxp1_1=(px*r21);
rxp1_2=(r11*x5893);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=(((r11*sj15))+(((-1.0)*cj15*r10)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x5896=IKPowWithIntegerCheck((((r11*sj15))+(((-1.0)*cj15*r10))),-1);
if(!x5896.valid){
continue;
}
IkReal x5894=x5896.value;
IkReal x5895=(sj10*x5894);
cj14array[0]=((((-1.0)*sj11*sj12*x5895))+((cj11*cj12*x5895)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x5897=IKsin(j14);
IkReal x5898=IKcos(j14);
IkReal x5899=(sj15*x5897);
IkReal x5900=((1.0)*x5898);
IkReal x5901=((1.0)*cj15*x5897);
evalcond[0]=(r02*x5897);
evalcond[1]=((((-1.0)*sj10))+(((-1.0)*r02*x5900)));
evalcond[2]=(((r21*x5899))+(((-1.0)*r20*x5901)));
evalcond[3]=((((-1.0)*r10*x5901))+((r11*x5899)));
evalcond[4]=((((-1.0)*cj15*r20*x5900))+((cj12*sj11))+((r21*sj15*x5898))+((cj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x5904=IKPowWithIntegerCheck(((((-1.0)*cj15*r20))+((r21*sj15))),-1);
if(!x5904.valid){
continue;
}
IkReal x5902=x5904.value;
IkReal x5903=((1.0)*x5902);
cj14array[0]=((((-1.0)*cj11*sj12*x5903))+(((-1.0)*cj12*sj11*x5903)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x5905=IKsin(j14);
IkReal x5906=IKcos(j14);
IkReal x5907=(cj15*r10);
IkReal x5908=((1.0)*sj10);
IkReal x5909=(sj15*x5905);
IkReal x5910=((1.0)*x5906);
IkReal x5911=((1.0)*x5905);
evalcond[0]=(r02*x5905);
evalcond[1]=((((-1.0)*r02*x5910))+(((-1.0)*x5908)));
evalcond[2]=((((-1.0)*cj15*r20*x5911))+((r21*x5909)));
evalcond[3]=((((-1.0)*x5907*x5911))+((r11*x5909)));
evalcond[4]=((((-1.0)*x5907*x5910))+((r11*sj15*x5906))+((sj10*sj11*sj12))+(((-1.0)*cj11*cj12*x5908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x5912=IKPowWithIntegerCheck(r02,-1);
if(!x5912.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x5912.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x5913=IKsin(j14);
IkReal x5914=IKcos(j14);
IkReal x5915=((1.0)*cj15);
IkReal x5916=(sj15*x5913);
IkReal x5917=(sj15*x5914);
evalcond[0]=(r02*x5913);
evalcond[1]=((((-1.0)*r20*x5913*x5915))+((r21*x5916)));
evalcond[2]=((((-1.0)*r10*x5913*x5915))+((r11*x5916)));
evalcond[3]=((((-1.0)*r20*x5914*x5915))+((cj12*sj11))+((r21*x5917))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj11*cj12*sj10))+((sj10*sj11*sj12))+(((-1.0)*r10*x5914*x5915))+((r11*x5917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5918=((1.0)*sj15);
CheckValue<IkReal> x5919=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5918))+(((-1.0)*cj15*r21)))),-1);
if(!x5919.valid){
continue;
}
CheckValue<IkReal> x5920 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((cj15*r10*sj10))+(((-1.0)*r11*sj10*x5918))+(((-1.0)*cj10*r01*x5918))+((cj10*cj15*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5920.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5919.value)))+(x5920.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5921=IKsin(j14);
IkReal x5922=IKcos(j14);
IkReal x5923=(cj15*r20);
IkReal x5924=((1.0)*sj10);
IkReal x5925=(cj15*r10);
IkReal x5926=(sj11*sj12);
IkReal x5927=(cj15*r00);
IkReal x5928=(cj11*cj12);
IkReal x5929=((1.0)*x5922);
IkReal x5930=(sj15*x5922);
IkReal x5931=((1.0)*x5921);
IkReal x5932=(sj15*x5921);
evalcond[0]=((((-1.0)*r22*x5929))+((r21*x5932))+(((-1.0)*x5923*x5931)));
evalcond[1]=((((-1.0)*x5925*x5931))+((r11*x5932))+cj10+(((-1.0)*r12*x5929)));
evalcond[2]=((((-1.0)*r02*x5929))+(((-1.0)*x5924))+((r01*x5932))+(((-1.0)*x5927*x5931)));
evalcond[3]=(((r22*x5921))+((r21*x5930))+((cj12*sj11))+(((-1.0)*x5923*x5929))+((cj11*sj12)));
evalcond[4]=(((cj10*x5926))+(((-1.0)*x5927*x5929))+(((-1.0)*cj10*x5928))+((r01*x5930))+((r02*x5921)));
evalcond[5]=(((sj10*x5926))+(((-1.0)*x5925*x5929))+((r11*x5930))+((r12*x5921))+(((-1.0)*x5924*x5928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5933=((1.0)*cj15);
CheckValue<IkReal> x5934=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5933))+(((-1.0)*r10*sj15)))),-1);
if(!x5934.valid){
continue;
}
CheckValue<IkReal> x5935 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x5933))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5935.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5934.value)))+(x5935.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5936=IKsin(j14);
IkReal x5937=IKcos(j14);
IkReal x5938=(cj15*r20);
IkReal x5939=((1.0)*sj10);
IkReal x5940=(cj15*r10);
IkReal x5941=(sj11*sj12);
IkReal x5942=(cj15*r00);
IkReal x5943=(cj11*cj12);
IkReal x5944=((1.0)*x5937);
IkReal x5945=(sj15*x5937);
IkReal x5946=((1.0)*x5936);
IkReal x5947=(sj15*x5936);
evalcond[0]=((((-1.0)*r22*x5944))+((r21*x5947))+(((-1.0)*x5938*x5946)));
evalcond[1]=((((-1.0)*r12*x5944))+cj10+(((-1.0)*x5940*x5946))+((r11*x5947)));
evalcond[2]=((((-1.0)*x5942*x5946))+((r01*x5947))+(((-1.0)*x5939))+(((-1.0)*r02*x5944)));
evalcond[3]=(((r22*x5936))+((r21*x5945))+(((-1.0)*x5938*x5944))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((cj10*x5941))+(((-1.0)*x5942*x5944))+((r01*x5945))+(((-1.0)*cj10*x5943))+((r02*x5936)));
evalcond[5]=((((-1.0)*x5940*x5944))+((r12*x5936))+(((-1.0)*x5939*x5943))+((r11*x5945))+((sj10*x5941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5948=((1.0)*cj15);
CheckValue<IkReal> x5949=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x5948)))),-1);
if(!x5949.valid){
continue;
}
CheckValue<IkReal> x5950 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x5948))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5950.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5949.value)))+(x5950.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5951=IKsin(j14);
IkReal x5952=IKcos(j14);
IkReal x5953=(cj15*r20);
IkReal x5954=((1.0)*sj10);
IkReal x5955=(cj15*r10);
IkReal x5956=(sj11*sj12);
IkReal x5957=(cj15*r00);
IkReal x5958=(cj11*cj12);
IkReal x5959=((1.0)*x5952);
IkReal x5960=(sj15*x5952);
IkReal x5961=((1.0)*x5951);
IkReal x5962=(sj15*x5951);
evalcond[0]=(((r21*x5962))+(((-1.0)*r22*x5959))+(((-1.0)*x5953*x5961)));
evalcond[1]=(cj10+(((-1.0)*x5955*x5961))+((r11*x5962))+(((-1.0)*r12*x5959)));
evalcond[2]=(((r01*x5962))+(((-1.0)*x5957*x5961))+(((-1.0)*r02*x5959))+(((-1.0)*x5954)));
evalcond[3]=(((r21*x5960))+((cj12*sj11))+(((-1.0)*x5953*x5959))+((r22*x5951))+((cj11*sj12)));
evalcond[4]=(((r01*x5960))+((r02*x5951))+((cj10*x5956))+(((-1.0)*x5957*x5959))+(((-1.0)*cj10*x5958)));
evalcond[5]=(((r12*x5951))+((sj10*x5956))+((r11*x5960))+(((-1.0)*x5954*x5958))+(((-1.0)*x5955*x5959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5963=r21*r21;
IkReal x5964=cj15*cj15;
IkReal x5965=(cj15*r20);
IkReal x5966=(cj12*sj11);
IkReal x5967=(r21*sj15);
IkReal x5968=(cj11*sj12);
CheckValue<IkReal> x5969=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5963))+(((-1.0)*x5964*(r20*r20)))+((x5963*x5964))+(((2.0)*x5965*x5967))+(((-1.0)*(r22*r22))))),-1);
if(!x5969.valid){
continue;
}
CheckValue<IkReal> x5970 = IKatan2WithCheck(IkReal((((r22*x5968))+((r22*x5966)))),IkReal(((((-1.0)*x5965*x5968))+(((-1.0)*x5965*x5966))+((x5966*x5967))+((x5967*x5968)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5970.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5969.value)))+(x5970.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
IkReal x5971=IKsin(j14);
IkReal x5972=IKcos(j14);
IkReal x5973=(r21*sj15);
IkReal x5974=(cj15*r20);
IkReal x5975=((1.0)*x5972);
evalcond[0]=((((-1.0)*r22*x5975))+(((-1.0)*x5971*x5974))+((x5971*x5973)));
evalcond[1]=(((r22*x5971))+((cj12*sj11))+(((-1.0)*x5974*x5975))+((cj11*sj12))+((x5972*x5973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5976=(cj15*sj14);
IkReal x5977=(sj14*sj15);
if( IKabs((((r01*x5977))+(((-1.0)*cj14*r02))+(((-1.0)*r00*x5976)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x5977))+((cj14*r12))+((r10*x5976)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x5977))+(((-1.0)*cj14*r02))+(((-1.0)*r00*x5976))))+IKsqr(((((-1.0)*r11*x5977))+((cj14*r12))+((r10*x5976))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r01*x5977))+(((-1.0)*cj14*r02))+(((-1.0)*r00*x5976))), ((((-1.0)*r11*x5977))+((cj14*r12))+((r10*x5976))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x5978=IKcos(j10);
IkReal x5979=IKsin(j10);
IkReal x5980=(cj14*sj15);
IkReal x5981=(sj11*sj12);
IkReal x5982=((1.0)*cj14);
IkReal x5983=(r10*sj15);
IkReal x5984=(cj15*r00);
IkReal x5985=(sj14*sj15);
IkReal x5986=(cj11*cj12);
IkReal x5987=((1.0)*sj14);
IkReal x5988=((1.0)*sj12);
IkReal x5989=(cj12*sj11);
IkReal x5990=(r00*sj15);
IkReal x5991=(cj15*r10);
IkReal x5992=(cj15*r11);
IkReal x5993=(cj15*r01);
IkReal x5994=(cj11*x5979);
IkReal x5995=((0.21325)*x5978);
IkReal x5996=((1.0)*x5978);
IkReal x5997=(cj11*x5978);
IkReal x5998=((1.0)*x5979);
evalcond[0]=((((-1.0)*r12*x5982))+(((-1.0)*x5987*x5991))+((r11*x5985))+x5978);
evalcond[1]=((((-1.0)*x5984*x5987))+(((-1.0)*r02*x5982))+((r01*x5985))+(((-1.0)*x5998)));
evalcond[2]=((((-1.0)*x5988*x5997))+(((-1.0)*x5989*x5996))+x5990+x5993);
evalcond[3]=((((-1.0)*x5988*x5994))+(((-1.0)*x5989*x5998))+x5983+x5992);
evalcond[4]=(((r02*sj14))+((x5978*x5981))+(((-1.0)*x5986*x5996))+(((-1.0)*x5982*x5984))+((r01*x5980)));
evalcond[5]=(((x5979*x5981))+((r12*sj14))+(((-1.0)*x5986*x5998))+((r11*x5980))+(((-1.0)*x5982*x5991)));
evalcond[6]=(((x5986*x5995))+(((-0.08535)*x5990))+(((-0.08535)*x5993))+(((-1.0)*px))+(((0.24365)*x5997))+(((-1.0)*x5981*x5995))+(((-0.11235)*x5979)));
evalcond[7]=((((-0.08535)*x5983))+(((-0.08535)*x5992))+(((0.21325)*x5979*x5986))+(((-1.0)*py))+(((0.24365)*x5994))+(((-0.21325)*x5979*x5981))+(((0.11235)*x5978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5999=((1.0)*cj15);
IkReal x6000=((1.0)*sj15);
CheckValue<IkReal> x6001=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*sj11)))),-1);
if(!x6001.valid){
continue;
}
CheckValue<IkReal> x6002 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x5999))+(((-1.0)*r10*x6000)))),IkReal(((((-1.0)*r00*x6000))+(((-1.0)*r01*x5999)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6002.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6001.value)))+(x6002.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x6003=IKcos(j10);
IkReal x6004=IKsin(j10);
IkReal x6005=(sj11*sj12);
IkReal x6006=(r10*sj15);
IkReal x6007=((1.0)*sj12);
IkReal x6008=(r00*sj15);
IkReal x6009=((0.08535)*cj15);
IkReal x6010=(cj11*x6004);
IkReal x6011=((0.21325)*x6003);
IkReal x6012=((1.0)*cj12*sj11);
IkReal x6013=(cj11*x6003);
evalcond[0]=(((cj15*r01))+x6008+(((-1.0)*x6007*x6013))+(((-1.0)*x6003*x6012)));
evalcond[1]=(((cj15*r11))+x6006+(((-1.0)*x6004*x6012))+(((-1.0)*x6007*x6010)));
evalcond[2]=(((cj11*cj12*x6011))+(((-1.0)*r01*x6009))+(((-1.0)*px))+(((-0.08535)*x6008))+(((-1.0)*x6005*x6011))+(((0.24365)*x6013))+(((-0.11235)*x6004)));
evalcond[3]=((((0.11235)*x6003))+(((-0.21325)*x6004*x6005))+(((-1.0)*r11*x6009))+(((-1.0)*py))+(((-0.08535)*x6006))+(((0.21325)*cj12*x6010))+(((0.24365)*x6010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x6014=((1.0)*cj15);
IkReal x6015=((((-1.0)*r00*sj15))+(((-1.0)*r01*x6014)));
j14eval[0]=x6015;
j14eval[1]=((IKabs((cj10*r22)))+(IKabs(((((-1.0)*cj10*r20*x6014))+((cj10*r21*sj15))))));
j14eval[2]=IKsign(x6015);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x6016=((1.0)*cj15);
IkReal x6017=((((-1.0)*r11*x6016))+(((-1.0)*r10*sj15)));
j14eval[0]=x6017;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x6016))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x6017);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x6018=((1.0)*sj15);
IkReal x6019=((((-1.0)*cj15*r21))+(((-1.0)*r20*x6018)));
j14eval[0]=x6019;
j14eval[1]=((IKabs(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))))+(IKabs((((cj15*r10*sj10))+(((-1.0)*cj10*r01*x6018))+((cj10*cj15*r00))+(((-1.0)*r11*sj10*x6018))))));
j14eval[2]=IKsign(x6019);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6020=((-1.0)*r20);
IkReal x6022 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6022)==0){
continue;
}
IkReal x6021=pow(x6022,-0.5);
CheckValue<IkReal> x6023 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6020),IKFAST_ATAN2_MAGTHRESH);
if(!x6023.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6023.value));
IkReal gconst115=(r21*x6021);
IkReal gconst116=(x6020*x6021);
CheckValue<IkReal> x6024 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6024.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x6024.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x6025=((-1.0)*r20);
IkReal x6026=x6021;
CheckValue<IkReal> x6028 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6025),IKFAST_ATAN2_MAGTHRESH);
if(!x6028.valid){
continue;
}
IkReal x6027=((-1.0)*(x6028.value));
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst115;
cj15=gconst116;
j15=x6027;
IkReal gconst114=x6027;
IkReal gconst115=(r21*x6026);
IkReal gconst116=(x6025*x6026);
j14eval[0]=cj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x6029=((-1.0)*r20);
IkReal x6030=x6021;
CheckValue<IkReal> x6032 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6029),IKFAST_ATAN2_MAGTHRESH);
if(!x6032.valid){
continue;
}
IkReal x6031=((-1.0)*(x6032.value));
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst115;
cj15=gconst116;
j15=x6031;
IkReal gconst114=x6031;
IkReal gconst115=(r21*x6030);
IkReal gconst116=(x6029*x6030);
j14eval[0]=sj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x6033=((-1.0)*r20);
IkReal x6034=x6021;
CheckValue<IkReal> x6036 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6033),IKFAST_ATAN2_MAGTHRESH);
if(!x6036.valid){
continue;
}
IkReal x6035=((-1.0)*(x6036.value));
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst115;
cj15=gconst116;
j15=x6035;
IkReal gconst114=x6035;
IkReal gconst115=(r21*x6034);
IkReal gconst116=(x6033*x6034);
IkReal x6037=((1.0)*(r22*r22));
CheckValue<IkReal> x6041=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6037))),-1);
if(!x6041.valid){
continue;
}
IkReal x6038=x6041.value;
IkReal x6039=((1.0)*x6038);
IkReal x6040=((((-1.0)*x6037))+(((-1.0)*x6039*(r20*r20*r20*r20)))+(((-2.0)*x6038*(r20*r20)*(r21*r21)))+(((-1.0)*x6039*(r21*r21*r21*r21))));
j14eval[0]=x6040;
j14eval[1]=IKsign(x6040);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6042=(gconst115*r21);
IkReal x6043=(cj12*sj11);
IkReal x6044=(cj11*sj12);
IkReal x6045=(gconst116*r20);
CheckValue<IkReal> x6046=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6045*x6045)))+(((2.0)*x6042*x6045))+(((-1.0)*(x6042*x6042)))+(((-1.0)*(r22*r22))))),-1);
if(!x6046.valid){
continue;
}
CheckValue<IkReal> x6047 = IKatan2WithCheck(IkReal((((r22*x6044))+((r22*x6043)))),IkReal(((((-1.0)*x6044*x6045))+(((-1.0)*x6043*x6045))+((x6042*x6043))+((x6042*x6044)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6047.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6046.value)))+(x6047.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6048=IKsin(j14);
IkReal x6049=IKcos(j14);
IkReal x6050=((1.0)*sj10);
IkReal x6051=(gconst115*r11);
IkReal x6052=(sj11*sj12);
IkReal x6053=(cj11*cj12);
IkReal x6054=((1.0)*x6049);
IkReal x6055=(gconst115*x6048);
IkReal x6056=(gconst115*x6049);
IkReal x6057=((1.0)*gconst116*x6048);
evalcond[0]=((((-1.0)*r20*x6057))+(((-1.0)*r22*x6054))+((r21*x6055)));
evalcond[1]=((((-1.0)*r10*x6057))+cj10+((x6048*x6051))+(((-1.0)*r12*x6054)));
evalcond[2]=(((r01*x6055))+(((-1.0)*x6050))+(((-1.0)*r00*x6057))+(((-1.0)*r02*x6054)));
evalcond[3]=((((-1.0)*gconst116*r20*x6054))+((r22*x6048))+((cj12*sj11))+((cj11*sj12))+((r21*x6056)));
evalcond[4]=(((r01*x6056))+(((-1.0)*cj10*x6053))+((r02*x6048))+((cj10*x6052))+(((-1.0)*gconst116*r00*x6054)));
evalcond[5]=((((-1.0)*gconst116*r10*x6054))+(((-1.0)*x6050*x6053))+((x6049*x6051))+((sj10*x6052))+((r12*x6048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6058=((1.0)*gconst116);
CheckValue<IkReal> x6059 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst115*r21*sj10))+(((-1.0)*r20*sj10*x6058)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6059.valid){
continue;
}
CheckValue<IkReal> x6060=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x6058)))),-1);
if(!x6060.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6059.value)+(((1.5707963267949)*(x6060.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6061=IKsin(j14);
IkReal x6062=IKcos(j14);
IkReal x6063=((1.0)*sj10);
IkReal x6064=(gconst115*r11);
IkReal x6065=(sj11*sj12);
IkReal x6066=(cj11*cj12);
IkReal x6067=((1.0)*x6062);
IkReal x6068=(gconst115*x6061);
IkReal x6069=(gconst115*x6062);
IkReal x6070=((1.0)*gconst116*x6061);
evalcond[0]=((((-1.0)*r20*x6070))+(((-1.0)*r22*x6067))+((r21*x6068)));
evalcond[1]=(((x6061*x6064))+(((-1.0)*r10*x6070))+cj10+(((-1.0)*r12*x6067)));
evalcond[2]=(((r01*x6068))+(((-1.0)*r00*x6070))+(((-1.0)*x6063))+(((-1.0)*r02*x6067)));
evalcond[3]=(((r22*x6061))+((r21*x6069))+((cj12*sj11))+(((-1.0)*gconst116*r20*x6067))+((cj11*sj12)));
evalcond[4]=(((cj10*x6065))+((r01*x6069))+(((-1.0)*gconst116*r00*x6067))+(((-1.0)*cj10*x6066))+((r02*x6061)));
evalcond[5]=(((sj10*x6065))+((x6062*x6064))+((r12*x6061))+(((-1.0)*x6063*x6066))+(((-1.0)*gconst116*r10*x6067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6071=((1.0)*gconst116);
CheckValue<IkReal> x6072=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x6071)))),-1);
if(!x6072.valid){
continue;
}
CheckValue<IkReal> x6073 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst115*r21))+(((-1.0)*cj10*r20*x6071)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6073.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6072.value)))+(x6073.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6074=IKsin(j14);
IkReal x6075=IKcos(j14);
IkReal x6076=((1.0)*sj10);
IkReal x6077=(gconst115*r11);
IkReal x6078=(sj11*sj12);
IkReal x6079=(cj11*cj12);
IkReal x6080=((1.0)*x6075);
IkReal x6081=(gconst115*x6074);
IkReal x6082=(gconst115*x6075);
IkReal x6083=((1.0)*gconst116*x6074);
evalcond[0]=((((-1.0)*r22*x6080))+((r21*x6081))+(((-1.0)*r20*x6083)));
evalcond[1]=((((-1.0)*r12*x6080))+cj10+((x6074*x6077))+(((-1.0)*r10*x6083)));
evalcond[2]=((((-1.0)*r00*x6083))+((r01*x6081))+(((-1.0)*x6076))+(((-1.0)*r02*x6080)));
evalcond[3]=(((r22*x6074))+((r21*x6082))+((cj12*sj11))+(((-1.0)*gconst116*r20*x6080))+((cj11*sj12)));
evalcond[4]=(((r01*x6082))+(((-1.0)*cj10*x6079))+(((-1.0)*gconst116*r00*x6080))+((cj10*x6078))+((r02*x6074)));
evalcond[5]=(((x6075*x6077))+((sj10*x6078))+(((-1.0)*x6076*x6079))+(((-1.0)*gconst116*r10*x6080))+((r12*x6074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6084=((-1.0)*r21);
IkReal x6086 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6086)==0){
continue;
}
IkReal x6085=pow(x6086,-0.5);
CheckValue<IkReal> x6087 = IKatan2WithCheck(IkReal(x6084),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6087.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6087.value))));
IkReal gconst118=(x6084*x6085);
IkReal gconst119=((1.0)*r20*x6085);
CheckValue<IkReal> x6088 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6088.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x6088.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x6089=((-1.0)*r21);
CheckValue<IkReal> x6092 = IKatan2WithCheck(IkReal(x6089),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6092.valid){
continue;
}
IkReal x6090=((1.0)*(x6092.value));
IkReal x6091=x6085;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst118;
cj15=gconst119;
j15=((3.14159265)+(((-1.0)*x6090)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6090)));
IkReal gconst118=(x6089*x6091);
IkReal gconst119=((1.0)*r20*x6091);
IkReal x6093=r22*r22;
IkReal x6094=((1.0)*x6093);
CheckValue<IkReal> x6098=IKPowWithIntegerCheck(((-1.0)+x6093),-1);
if(!x6098.valid){
continue;
}
IkReal x6095=x6098.value;
if((((1.0)+(((-1.0)*x6094)))) < -0.00001)
continue;
IkReal x6096=IKsqrt(((1.0)+(((-1.0)*x6094))));
IkReal x6097=(cj10*x6095*x6096);
j14eval[0]=((IKabs((x6097+(((-1.0)*x6094*x6097)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x6099=((-1.0)*r21);
CheckValue<IkReal> x6102 = IKatan2WithCheck(IkReal(x6099),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6102.valid){
continue;
}
IkReal x6100=((1.0)*(x6102.value));
IkReal x6101=x6085;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst118;
cj15=gconst119;
j15=((3.14159265)+(((-1.0)*x6100)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6100)));
IkReal gconst118=(x6099*x6101);
IkReal gconst119=((1.0)*r20*x6101);
IkReal x6103=r22*r22;
IkReal x6104=((1.0)*x6103);
CheckValue<IkReal> x6108=IKPowWithIntegerCheck(((-1.0)+x6103),-1);
if(!x6108.valid){
continue;
}
IkReal x6105=x6108.value;
if((((1.0)+(((-1.0)*x6104)))) < -0.00001)
continue;
IkReal x6106=IKsqrt(((1.0)+(((-1.0)*x6104))));
IkReal x6107=(sj10*x6105*x6106);
j14eval[0]=((IKabs(((((-1.0)*x6104*x6107))+x6107)))+(IKabs((r22*sj10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x6109=((-1.0)*r21);
CheckValue<IkReal> x6112 = IKatan2WithCheck(IkReal(x6109),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6112.valid){
continue;
}
IkReal x6110=((1.0)*(x6112.value));
IkReal x6111=x6085;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst118;
cj15=gconst119;
j15=((3.14159265)+(((-1.0)*x6110)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6110)));
IkReal gconst118=(x6109*x6111);
IkReal gconst119=((1.0)*r20*x6111);
IkReal x6113=r22*r22;
IkReal x6114=(cj10*r02);
IkReal x6115=(r12*sj10);
CheckValue<IkReal> x6119=IKPowWithIntegerCheck(((-1.0)+x6113),-1);
if(!x6119.valid){
continue;
}
IkReal x6116=x6119.value;
if((((1.0)+(((-1.0)*x6113)))) < -0.00001)
continue;
IkReal x6117=IKsqrt(((1.0)+(((-1.0)*x6113))));
IkReal x6118=(r22*x6116*x6117);
j14eval[0]=0;
j14eval[1]=((IKabs(((((-1.0)*x6114))+(((-1.0)*x6115)))))+(IKabs((((x6115*x6118))+((x6114*x6118))))));
j14eval[2]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6120=((1.0)*gconst118);
CheckValue<IkReal> x6121 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x6120))+(((-1.0)*r11*sj10*x6120))+((gconst119*r10*sj10))+((cj10*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6121.valid){
continue;
}
CheckValue<IkReal> x6122=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6120)))),-1);
if(!x6122.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6121.value)+(((1.5707963267949)*(x6122.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6123=IKsin(j14);
IkReal x6124=IKcos(j14);
IkReal x6125=(gconst119*r10);
IkReal x6126=((1.0)*sj10);
IkReal x6127=(sj11*sj12);
IkReal x6128=(gconst119*r20);
IkReal x6129=(gconst119*r00);
IkReal x6130=(cj11*cj12);
IkReal x6131=(gconst118*x6123);
IkReal x6132=(gconst118*x6124);
IkReal x6133=((1.0)*x6124);
IkReal x6134=((1.0)*x6123);
evalcond[0]=(((r21*x6131))+(((-1.0)*x6128*x6134))+(((-1.0)*r22*x6133)));
evalcond[1]=(((r11*x6131))+(((-1.0)*x6125*x6134))+cj10+(((-1.0)*r12*x6133)));
evalcond[2]=((((-1.0)*x6129*x6134))+(((-1.0)*x6126))+((r01*x6131))+(((-1.0)*r02*x6133)));
evalcond[3]=(((r21*x6132))+(((-1.0)*x6128*x6133))+((cj12*sj11))+((cj11*sj12))+((r22*x6123)));
evalcond[4]=(((cj10*x6127))+(((-1.0)*x6129*x6133))+(((-1.0)*cj10*x6130))+((r02*x6123))+((r01*x6132)));
evalcond[5]=(((sj10*x6127))+((r11*x6132))+((r12*x6123))+(((-1.0)*x6125*x6133))+(((-1.0)*x6126*x6130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6135=((1.0)*gconst119);
CheckValue<IkReal> x6136 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst118*r21*sj10))+(((-1.0)*r20*sj10*x6135)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6136.valid){
continue;
}
CheckValue<IkReal> x6137=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x6135)))),-1);
if(!x6137.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6136.value)+(((1.5707963267949)*(x6137.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6138=IKsin(j14);
IkReal x6139=IKcos(j14);
IkReal x6140=(gconst119*r10);
IkReal x6141=((1.0)*sj10);
IkReal x6142=(sj11*sj12);
IkReal x6143=(gconst119*r20);
IkReal x6144=(gconst119*r00);
IkReal x6145=(cj11*cj12);
IkReal x6146=(gconst118*x6138);
IkReal x6147=(gconst118*x6139);
IkReal x6148=((1.0)*x6139);
IkReal x6149=((1.0)*x6138);
evalcond[0]=((((-1.0)*x6143*x6149))+((r21*x6146))+(((-1.0)*r22*x6148)));
evalcond[1]=(cj10+((r11*x6146))+(((-1.0)*x6140*x6149))+(((-1.0)*r12*x6148)));
evalcond[2]=((((-1.0)*x6144*x6149))+(((-1.0)*x6141))+(((-1.0)*r02*x6148))+((r01*x6146)));
evalcond[3]=(((r22*x6138))+(((-1.0)*x6143*x6148))+((cj12*sj11))+((r21*x6147))+((cj11*sj12)));
evalcond[4]=((((-1.0)*x6144*x6148))+(((-1.0)*cj10*x6145))+((r01*x6147))+((r02*x6138))+((cj10*x6142)));
evalcond[5]=(((r11*x6147))+(((-1.0)*x6140*x6148))+((sj10*x6142))+(((-1.0)*x6141*x6145))+((r12*x6138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6150=((1.0)*gconst119);
CheckValue<IkReal> x6151=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x6150)))),-1);
if(!x6151.valid){
continue;
}
CheckValue<IkReal> x6152 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst118*r21))+(((-1.0)*cj10*r20*x6150)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6152.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6151.value)))+(x6152.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6153=IKsin(j14);
IkReal x6154=IKcos(j14);
IkReal x6155=(gconst119*r10);
IkReal x6156=((1.0)*sj10);
IkReal x6157=(sj11*sj12);
IkReal x6158=(gconst119*r20);
IkReal x6159=(gconst119*r00);
IkReal x6160=(cj11*cj12);
IkReal x6161=(gconst118*x6153);
IkReal x6162=(gconst118*x6154);
IkReal x6163=((1.0)*x6154);
IkReal x6164=((1.0)*x6153);
evalcond[0]=(((r21*x6161))+(((-1.0)*x6158*x6164))+(((-1.0)*r22*x6163)));
evalcond[1]=((((-1.0)*x6155*x6164))+(((-1.0)*r12*x6163))+((r11*x6161))+cj10);
evalcond[2]=((((-1.0)*x6156))+((r01*x6161))+(((-1.0)*r02*x6163))+(((-1.0)*x6159*x6164)));
evalcond[3]=(((r22*x6153))+((r21*x6162))+(((-1.0)*x6158*x6163))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((cj10*x6157))+(((-1.0)*cj10*x6160))+((r02*x6153))+((r01*x6162))+(((-1.0)*x6159*x6163)));
evalcond[5]=(((r12*x6153))+((sj10*x6157))+(((-1.0)*x6156*x6160))+(((-1.0)*x6155*x6163))+((r11*x6162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6165=((-1.0)*r10);
IkReal x6167 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6167)==0){
continue;
}
IkReal x6166=pow(x6167,-0.5);
CheckValue<IkReal> x6168 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6165),IKFAST_ATAN2_MAGTHRESH);
if(!x6168.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6168.value));
IkReal gconst121=(r11*x6166);
IkReal gconst122=(x6165*x6166);
CheckValue<IkReal> x6169 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6169.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x6169.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x6170=((-1.0)*r10);
IkReal x6171=x6166;
CheckValue<IkReal> x6173 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6170),IKFAST_ATAN2_MAGTHRESH);
if(!x6173.valid){
continue;
}
IkReal x6172=((-1.0)*(x6173.value));
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst121;
cj15=gconst122;
j15=x6172;
IkReal gconst120=x6172;
IkReal gconst121=(r11*x6171);
IkReal gconst122=(x6170*x6171);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6174=((1.0)*gconst121);
CheckValue<IkReal> x6175=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6174))+(((-1.0)*gconst122*r21)))),-1);
if(!x6175.valid){
continue;
}
CheckValue<IkReal> x6176 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x6174))+(((-1.0)*cj10*r01*x6174))+((gconst122*r10*sj10))+((cj10*gconst122*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6176.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6175.value)))+(x6176.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6177=IKsin(j14);
IkReal x6178=IKcos(j14);
IkReal x6179=(gconst122*r00);
IkReal x6180=((1.0)*sj10);
IkReal x6181=(sj11*sj12);
IkReal x6182=(gconst122*r10);
IkReal x6183=(gconst122*r20);
IkReal x6184=(cj11*cj12);
IkReal x6185=((1.0)*x6178);
IkReal x6186=(gconst121*x6177);
IkReal x6187=(gconst121*x6178);
IkReal x6188=((1.0)*x6177);
evalcond[0]=((((-1.0)*r22*x6185))+((r21*x6186))+(((-1.0)*x6183*x6188)));
evalcond[1]=((((-1.0)*x6182*x6188))+cj10+(((-1.0)*r12*x6185))+((r11*x6186)));
evalcond[2]=((((-1.0)*r02*x6185))+((r01*x6186))+(((-1.0)*x6179*x6188))+(((-1.0)*x6180)));
evalcond[3]=(((r21*x6187))+(((-1.0)*x6183*x6185))+((cj12*sj11))+((r22*x6177))+((cj11*sj12)));
evalcond[4]=(((cj10*x6181))+((r01*x6187))+((r02*x6177))+(((-1.0)*x6179*x6185))+(((-1.0)*cj10*x6184)));
evalcond[5]=((((-1.0)*x6182*x6185))+((r12*x6177))+((sj10*x6181))+((r11*x6187))+(((-1.0)*x6180*x6184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6189=((1.0)*gconst122);
CheckValue<IkReal> x6190 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x6189))+((cj10*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6190.valid){
continue;
}
CheckValue<IkReal> x6191=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x6189)))),-1);
if(!x6191.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6190.value)+(((1.5707963267949)*(x6191.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6192=IKsin(j14);
IkReal x6193=IKcos(j14);
IkReal x6194=(gconst122*r00);
IkReal x6195=((1.0)*sj10);
IkReal x6196=(sj11*sj12);
IkReal x6197=(gconst122*r10);
IkReal x6198=(gconst122*r20);
IkReal x6199=(cj11*cj12);
IkReal x6200=((1.0)*x6193);
IkReal x6201=(gconst121*x6192);
IkReal x6202=(gconst121*x6193);
IkReal x6203=((1.0)*x6192);
evalcond[0]=((((-1.0)*x6198*x6203))+((r21*x6201))+(((-1.0)*r22*x6200)));
evalcond[1]=((((-1.0)*x6197*x6203))+cj10+(((-1.0)*r12*x6200))+((r11*x6201)));
evalcond[2]=(((r01*x6201))+(((-1.0)*x6195))+(((-1.0)*r02*x6200))+(((-1.0)*x6194*x6203)));
evalcond[3]=((((-1.0)*x6198*x6200))+((r21*x6202))+((cj12*sj11))+((r22*x6192))+((cj11*sj12)));
evalcond[4]=(((r01*x6202))+((r02*x6192))+(((-1.0)*cj10*x6199))+((cj10*x6196))+(((-1.0)*x6194*x6200)));
evalcond[5]=((((-1.0)*x6197*x6200))+((r12*x6192))+(((-1.0)*x6195*x6199))+((sj10*x6196))+((r11*x6202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6204=((-1.0)*r11);
IkReal x6206 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6206)==0){
continue;
}
IkReal x6205=pow(x6206,-0.5);
CheckValue<IkReal> x6207 = IKatan2WithCheck(IkReal(x6204),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6207.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6207.value))));
IkReal gconst124=(x6204*x6205);
IkReal gconst125=((1.0)*r10*x6205);
CheckValue<IkReal> x6208 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6208.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x6208.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x6209=((-1.0)*r11);
CheckValue<IkReal> x6212 = IKatan2WithCheck(IkReal(x6209),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6212.valid){
continue;
}
IkReal x6210=((1.0)*(x6212.value));
IkReal x6211=x6205;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst124;
cj15=gconst125;
j15=((3.14159265)+(((-1.0)*x6210)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6210)));
IkReal gconst124=(x6209*x6211);
IkReal gconst125=((1.0)*r10*x6211);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x6213=((-1.0)*r11);
CheckValue<IkReal> x6216 = IKatan2WithCheck(IkReal(x6213),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6216.valid){
continue;
}
IkReal x6214=((1.0)*(x6216.value));
IkReal x6215=x6205;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst124;
cj15=gconst125;
j15=((3.14159265)+(((-1.0)*x6214)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6214)));
IkReal gconst124=(x6213*x6215);
IkReal gconst125=((1.0)*r10*x6215);
IkReal x6217=r12*r12;
IkReal x6218=(cj10*r02);
IkReal x6219=x6205;
IkReal x6220=(sj10*x6219);
j14eval[0]=((IKabs(((((-1.0)*x6220))+((x6217*x6220))+((r12*x6218*x6219)))))+(IKabs(((((-1.0)*x6218))+(((-1.0)*r12*sj10))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x6221=((-1.0)*r11);
CheckValue<IkReal> x6224 = IKatan2WithCheck(IkReal(x6221),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6224.valid){
continue;
}
IkReal x6222=((1.0)*(x6224.value));
IkReal x6223=x6205;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst124;
cj15=gconst125;
j15=((3.14159265)+(((-1.0)*x6222)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6222)));
IkReal gconst124=(x6221*x6223);
IkReal gconst125=((1.0)*r10*x6223);
IkReal x6225=r12*r12;
IkReal x6226=(cj11*sj12);
IkReal x6227=(cj12*sj11);
IkReal x6228=((1.0)+(((-1.0)*x6225)));
CheckValue<IkReal> x6235=IKPowWithIntegerCheck(x6228,-1);
if(!x6235.valid){
continue;
}
IkReal x6229=x6235.value;
CheckValue<IkReal> x6236=IKPowWithIntegerCheck(((-1.0)+x6225),-1);
if(!x6236.valid){
continue;
}
IkReal x6230=x6236.value;
IkReal x6231=((1.0)*x6229);
if((x6228) < -0.00001)
continue;
IkReal x6232=IKsqrt(x6228);
IkReal x6233=((1.0)*r12*r22*x6230*x6232);
IkReal x6234=((((-1.0)*x6231*(r11*r11)*(r21*r21)))+(((-1.0)*x6231*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x6229)));
j14eval[0]=x6234;
j14eval[1]=IKsign(x6234);
j14eval[2]=((IKabs(((((-1.0)*x6226*x6233))+(((-1.0)*x6227*x6233)))))+(IKabs((((r22*x6227))+((r22*x6226))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6237=(cj11*sj12);
IkReal x6238=(gconst125*r20);
IkReal x6239=(gconst124*r21);
IkReal x6240=(cj12*sj11);
CheckValue<IkReal> x6241=IKPowWithIntegerCheck(IKsign(((((2.0)*x6238*x6239))+(((-1.0)*(x6238*x6238)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x6239*x6239))))),-1);
if(!x6241.valid){
continue;
}
CheckValue<IkReal> x6242 = IKatan2WithCheck(IkReal((((r22*x6237))+((r22*x6240)))),IkReal(((((-1.0)*x6237*x6238))+(((-1.0)*x6238*x6240))+((x6239*x6240))+((x6237*x6239)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6242.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6241.value)))+(x6242.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6243=IKsin(j14);
IkReal x6244=IKcos(j14);
IkReal x6245=((1.0)*sj10);
IkReal x6246=(gconst125*r20);
IkReal x6247=(sj11*sj12);
IkReal x6248=(gconst125*r00);
IkReal x6249=(cj11*cj12);
IkReal x6250=(gconst125*r10);
IkReal x6251=((1.0)*x6244);
IkReal x6252=(gconst124*x6244);
IkReal x6253=(gconst124*x6243);
IkReal x6254=((1.0)*x6243);
evalcond[0]=((((-1.0)*x6246*x6254))+((r21*x6253))+(((-1.0)*r22*x6251)));
evalcond[1]=((((-1.0)*x6250*x6254))+cj10+(((-1.0)*r12*x6251))+((r11*x6253)));
evalcond[2]=(((r01*x6253))+(((-1.0)*r02*x6251))+(((-1.0)*x6245))+(((-1.0)*x6248*x6254)));
evalcond[3]=((((-1.0)*x6246*x6251))+((r21*x6252))+((cj12*sj11))+((r22*x6243))+((cj11*sj12)));
evalcond[4]=(((r01*x6252))+((r02*x6243))+(((-1.0)*x6248*x6251))+((cj10*x6247))+(((-1.0)*cj10*x6249)));
evalcond[5]=((((-1.0)*x6250*x6251))+((sj10*x6247))+((r12*x6243))+(((-1.0)*x6245*x6249))+((r11*x6252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6255=((1.0)*sj10);
IkReal x6256=((1.0)*gconst124);
CheckValue<IkReal> x6257 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*r02))+(((-1.0)*r12*x6255)))),IkReal(((((-1.0)*gconst124*r11*x6255))+((cj10*gconst125*r00))+((gconst125*r10*sj10))+(((-1.0)*cj10*r01*x6256)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6257.valid){
continue;
}
CheckValue<IkReal> x6258=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst125*r21))+(((-1.0)*r20*x6256)))),-1);
if(!x6258.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6257.value)+(((1.5707963267949)*(x6258.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6259=IKsin(j14);
IkReal x6260=IKcos(j14);
IkReal x6261=((1.0)*sj10);
IkReal x6262=(gconst125*r20);
IkReal x6263=(sj11*sj12);
IkReal x6264=(gconst125*r00);
IkReal x6265=(cj11*cj12);
IkReal x6266=(gconst125*r10);
IkReal x6267=((1.0)*x6260);
IkReal x6268=(gconst124*x6260);
IkReal x6269=(gconst124*x6259);
IkReal x6270=((1.0)*x6259);
evalcond[0]=(((r21*x6269))+(((-1.0)*x6262*x6270))+(((-1.0)*r22*x6267)));
evalcond[1]=(cj10+(((-1.0)*x6266*x6270))+(((-1.0)*r12*x6267))+((r11*x6269)));
evalcond[2]=(((r01*x6269))+(((-1.0)*r02*x6267))+(((-1.0)*x6261))+(((-1.0)*x6264*x6270)));
evalcond[3]=(((r22*x6259))+((r21*x6268))+(((-1.0)*x6262*x6267))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((r01*x6268))+(((-1.0)*cj10*x6265))+((r02*x6259))+(((-1.0)*x6264*x6267))+((cj10*x6263)));
evalcond[5]=((((-1.0)*x6266*x6267))+((sj10*x6263))+(((-1.0)*x6261*x6265))+((r12*x6259))+((r11*x6268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6271=((1.0)*gconst125);
CheckValue<IkReal> x6272=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6271))+(((-1.0)*gconst124*r00)))),-1);
if(!x6272.valid){
continue;
}
CheckValue<IkReal> x6273 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x6271))+((cj10*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6273.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6272.value)))+(x6273.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6274=IKsin(j14);
IkReal x6275=IKcos(j14);
IkReal x6276=((1.0)*sj10);
IkReal x6277=(gconst125*r20);
IkReal x6278=(sj11*sj12);
IkReal x6279=(gconst125*r00);
IkReal x6280=(cj11*cj12);
IkReal x6281=(gconst125*r10);
IkReal x6282=((1.0)*x6275);
IkReal x6283=(gconst124*x6275);
IkReal x6284=(gconst124*x6274);
IkReal x6285=((1.0)*x6274);
evalcond[0]=((((-1.0)*r22*x6282))+((r21*x6284))+(((-1.0)*x6277*x6285)));
evalcond[1]=(cj10+((r11*x6284))+(((-1.0)*r12*x6282))+(((-1.0)*x6281*x6285)));
evalcond[2]=((((-1.0)*x6279*x6285))+(((-1.0)*r02*x6282))+(((-1.0)*x6276))+((r01*x6284)));
evalcond[3]=(((r22*x6274))+((cj12*sj11))+((r21*x6283))+((cj11*sj12))+(((-1.0)*x6277*x6282)));
evalcond[4]=(((cj10*x6278))+(((-1.0)*x6279*x6282))+((r02*x6274))+(((-1.0)*cj10*x6280))+((r01*x6283)));
evalcond[5]=(((r12*x6274))+((sj10*x6278))+((r11*x6283))+(((-1.0)*x6281*x6282))+(((-1.0)*x6276*x6280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x6286=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x6286;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj15*r00))+((r01*sj15))))));
j14eval[2]=IKsign(x6286);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x6287=((1.0)*cj15);
IkReal x6288=((((-1.0)*r00*sj15))+(((-1.0)*r01*x6287)));
j14eval[0]=x6288;
j14eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x6287))+((r21*sj15))))));
j14eval[2]=IKsign(x6288);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x6289=r11*r11;
IkReal x6290=cj15*cj15;
IkReal x6291=(cj15*r10);
IkReal x6292=(r11*sj15);
IkReal x6293=((((2.0)*x6291*x6292))+(((-1.0)*x6290*(r10*r10)))+(((-1.0)*(r12*r12)))+((x6289*x6290))+(((-1.0)*x6289)));
j14eval[0]=x6293;
j14eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x6291))+x6292))));
j14eval[2]=IKsign(x6293);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6294=r11*r11;
IkReal x6295=cj15*cj15;
IkReal x6296=(r11*sj15);
IkReal x6297=(cj15*r10);
CheckValue<IkReal> x6298=IKPowWithIntegerCheck(IKsign(((((2.0)*x6296*x6297))+(((-1.0)*x6294))+(((-1.0)*x6295*(r10*r10)))+((x6294*x6295))+(((-1.0)*(r12*r12))))),-1);
if(!x6298.valid){
continue;
}
CheckValue<IkReal> x6299 = IKatan2WithCheck(IkReal(((((-1.0)*x6297))+x6296)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6299.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6298.value)))+(x6299.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6300=IKcos(j14);
IkReal x6301=IKsin(j14);
IkReal x6302=(cj15*r20);
IkReal x6303=(cj15*r10);
IkReal x6304=(cj15*r00);
IkReal x6305=((1.0)*x6300);
IkReal x6306=(sj15*x6300);
IkReal x6307=((1.0)*x6301);
IkReal x6308=(sj15*x6301);
evalcond[0]=(((r11*x6306))+(((-1.0)*x6303*x6305))+((r12*x6301)));
evalcond[1]=((((-1.0)*x6302*x6307))+((r21*x6308))+(((-1.0)*r22*x6305)));
evalcond[2]=((((-1.0)*r02*x6305))+((r01*x6308))+(((-1.0)*x6304*x6307)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6305))+((r11*x6308))+(((-1.0)*x6303*x6307)));
evalcond[4]=((((-1.0)*x6302*x6305))+((r22*x6301))+((r21*x6306))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r01*x6306))+((r02*x6301))+(((-1.0)*x6304*x6305))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6309=((1.0)*cj15);
CheckValue<IkReal> x6310 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj15))+(((-1.0)*r20*x6309)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6310.valid){
continue;
}
CheckValue<IkReal> x6311=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6309))+(((-1.0)*r00*sj15)))),-1);
if(!x6311.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6310.value)+(((1.5707963267949)*(x6311.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6312=IKcos(j14);
IkReal x6313=IKsin(j14);
IkReal x6314=(cj15*r20);
IkReal x6315=(cj15*r10);
IkReal x6316=(cj15*r00);
IkReal x6317=((1.0)*x6312);
IkReal x6318=(sj15*x6312);
IkReal x6319=((1.0)*x6313);
IkReal x6320=(sj15*x6313);
evalcond[0]=(((r11*x6318))+(((-1.0)*x6315*x6317))+((r12*x6313)));
evalcond[1]=((((-1.0)*r22*x6317))+((r21*x6320))+(((-1.0)*x6314*x6319)));
evalcond[2]=((((-1.0)*r02*x6317))+((r01*x6320))+(((-1.0)*x6316*x6319)));
evalcond[3]=((1.0)+((r11*x6320))+(((-1.0)*r12*x6317))+(((-1.0)*x6315*x6319)));
evalcond[4]=(((r22*x6313))+((r21*x6318))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*x6314*x6317)));
evalcond[5]=(((sj11*sj12))+((r01*x6318))+((r02*x6313))+(((-1.0)*x6316*x6317))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x6321 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj15*r00))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6321.valid){
continue;
}
CheckValue<IkReal> x6322=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x6322.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6321.value)+(((1.5707963267949)*(x6322.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6323=IKcos(j14);
IkReal x6324=IKsin(j14);
IkReal x6325=(cj15*r20);
IkReal x6326=(cj15*r10);
IkReal x6327=(cj15*r00);
IkReal x6328=((1.0)*x6323);
IkReal x6329=(sj15*x6323);
IkReal x6330=((1.0)*x6324);
IkReal x6331=(sj15*x6324);
evalcond[0]=((((-1.0)*x6326*x6328))+((r11*x6329))+((r12*x6324)));
evalcond[1]=((((-1.0)*x6325*x6330))+(((-1.0)*r22*x6328))+((r21*x6331)));
evalcond[2]=((((-1.0)*x6327*x6330))+((r01*x6331))+(((-1.0)*r02*x6328)));
evalcond[3]=((1.0)+(((-1.0)*x6326*x6330))+((r11*x6331))+(((-1.0)*r12*x6328)));
evalcond[4]=((((-1.0)*x6325*x6328))+((cj12*sj11))+((r22*x6324))+((r21*x6329))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r02*x6324))+((r01*x6329))+(((-1.0)*x6327*x6328))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x6332=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x6332;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x6332);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x6333=((1.0)*cj15);
IkReal x6334=((((-1.0)*r21*x6333))+(((-1.0)*r20*sj15)));
j14eval[0]=x6334;
j14eval[1]=IKsign(x6334);
j14eval[2]=((IKabs((((r01*sj15))+(((-1.0)*r00*x6333)))))+(IKabs(r02)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x6335=cj15*cj15;
IkReal x6336=r11*r11;
IkReal x6337=(r11*sj15);
IkReal x6338=(cj15*r10);
IkReal x6339=((((-2.0)*x6337*x6338))+(r12*r12)+(((-1.0)*x6335*x6336))+x6336+((x6335*(r10*r10))));
j14eval[0]=x6339;
j14eval[1]=((IKabs(r12))+(IKabs((x6337+(((-1.0)*x6338))))));
j14eval[2]=IKsign(x6339);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6340=cj15*cj15;
IkReal x6341=r11*r11;
IkReal x6342=(r11*sj15);
IkReal x6343=(cj15*r10);
CheckValue<IkReal> x6344=IKPowWithIntegerCheck(IKsign(((r12*r12)+x6341+(((-2.0)*x6342*x6343))+(((-1.0)*x6340*x6341))+((x6340*(r10*r10))))),-1);
if(!x6344.valid){
continue;
}
CheckValue<IkReal> x6345 = IKatan2WithCheck(IkReal((x6342+(((-1.0)*x6343)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6345.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6344.value)))+(x6345.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6346=IKcos(j14);
IkReal x6347=IKsin(j14);
IkReal x6348=(cj15*r20);
IkReal x6349=(cj15*r10);
IkReal x6350=(cj15*r00);
IkReal x6351=((1.0)*x6346);
IkReal x6352=(sj15*x6346);
IkReal x6353=((1.0)*x6347);
IkReal x6354=(sj15*x6347);
evalcond[0]=((((-1.0)*x6349*x6351))+((r12*x6347))+((r11*x6352)));
evalcond[1]=(((r21*x6354))+(((-1.0)*r22*x6351))+(((-1.0)*x6348*x6353)));
evalcond[2]=((((-1.0)*x6350*x6353))+(((-1.0)*r02*x6351))+((r01*x6354)));
evalcond[3]=((-1.0)+(((-1.0)*x6349*x6353))+((r11*x6354))+(((-1.0)*r12*x6351)));
evalcond[4]=(((r21*x6352))+((r22*x6347))+((cj12*sj11))+(((-1.0)*x6348*x6351))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*x6350*x6351))+((r02*x6347))+((r01*x6352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6355=((1.0)*cj15);
CheckValue<IkReal> x6356 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x6355))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6356.valid){
continue;
}
CheckValue<IkReal> x6357=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6355))+(((-1.0)*r20*sj15)))),-1);
if(!x6357.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6356.value)+(((1.5707963267949)*(x6357.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6358=IKcos(j14);
IkReal x6359=IKsin(j14);
IkReal x6360=(cj15*r20);
IkReal x6361=(cj15*r10);
IkReal x6362=(cj15*r00);
IkReal x6363=((1.0)*x6358);
IkReal x6364=(sj15*x6358);
IkReal x6365=((1.0)*x6359);
IkReal x6366=(sj15*x6359);
evalcond[0]=((((-1.0)*x6361*x6363))+((r11*x6364))+((r12*x6359)));
evalcond[1]=((((-1.0)*x6360*x6365))+(((-1.0)*r22*x6363))+((r21*x6366)));
evalcond[2]=((((-1.0)*x6362*x6365))+(((-1.0)*r02*x6363))+((r01*x6366)));
evalcond[3]=((-1.0)+(((-1.0)*x6361*x6365))+((r11*x6366))+(((-1.0)*r12*x6363)));
evalcond[4]=((((-1.0)*x6360*x6363))+((r22*x6359))+((cj12*sj11))+((cj11*sj12))+((r21*x6364)));
evalcond[5]=((((-1.0)*x6362*x6363))+(((-1.0)*sj11*sj12))+((cj11*cj12))+((r01*x6364))+((r02*x6359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x6367 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6367.valid){
continue;
}
CheckValue<IkReal> x6368=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x6368.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6367.value)+(((1.5707963267949)*(x6368.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6369=IKcos(j14);
IkReal x6370=IKsin(j14);
IkReal x6371=(cj15*r20);
IkReal x6372=(cj15*r10);
IkReal x6373=(cj15*r00);
IkReal x6374=((1.0)*x6369);
IkReal x6375=(sj15*x6369);
IkReal x6376=((1.0)*x6370);
IkReal x6377=(sj15*x6370);
evalcond[0]=((((-1.0)*x6372*x6374))+((r12*x6370))+((r11*x6375)));
evalcond[1]=(((r21*x6377))+(((-1.0)*x6371*x6376))+(((-1.0)*r22*x6374)));
evalcond[2]=((((-1.0)*r02*x6374))+((r01*x6377))+(((-1.0)*x6373*x6376)));
evalcond[3]=((-1.0)+(((-1.0)*x6372*x6376))+((r11*x6377))+(((-1.0)*r12*x6374)));
evalcond[4]=(((r21*x6375))+(((-1.0)*x6371*x6374))+((cj12*sj11))+((r22*x6370))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+((r01*x6375))+(((-1.0)*x6373*x6374))+((r02*x6370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6378=((-1.0)*r00);
IkReal x6380 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6380)==0){
continue;
}
IkReal x6379=pow(x6380,-0.5);
CheckValue<IkReal> x6381 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6378),IKFAST_ATAN2_MAGTHRESH);
if(!x6381.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6381.value));
IkReal gconst127=(r01*x6379);
IkReal gconst128=(x6378*x6379);
CheckValue<IkReal> x6382 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6382.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x6382.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x6383=((-1.0)*r00);
IkReal x6384=x6379;
CheckValue<IkReal> x6386 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6383),IKFAST_ATAN2_MAGTHRESH);
if(!x6386.valid){
continue;
}
IkReal x6385=((-1.0)*(x6386.value));
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst127;
cj15=gconst128;
j15=x6385;
IkReal gconst126=x6385;
IkReal gconst127=(r01*x6384);
IkReal gconst128=(x6383*x6384);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6387=((1.0)*gconst127);
CheckValue<IkReal> x6388=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6387))+(((-1.0)*gconst128*r21)))),-1);
if(!x6388.valid){
continue;
}
CheckValue<IkReal> x6389 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x6387))+(((-1.0)*r11*sj10*x6387))+((gconst128*r10*sj10))+((cj10*gconst128*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6389.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6388.value)))+(x6389.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6390=IKsin(j14);
IkReal x6391=IKcos(j14);
IkReal x6392=(gconst127*r11);
IkReal x6393=((1.0)*sj10);
IkReal x6394=(gconst127*r01);
IkReal x6395=(sj11*sj12);
IkReal x6396=(gconst127*r21);
IkReal x6397=(cj11*cj12);
IkReal x6398=((1.0)*x6391);
IkReal x6399=((1.0)*gconst128*x6390);
evalcond[0]=(((x6390*x6396))+(((-1.0)*r20*x6399))+(((-1.0)*r22*x6398)));
evalcond[1]=(((x6390*x6392))+cj10+(((-1.0)*r10*x6399))+(((-1.0)*r12*x6398)));
evalcond[2]=((((-1.0)*r00*x6399))+((x6390*x6394))+(((-1.0)*x6393))+(((-1.0)*r02*x6398)));
evalcond[3]=(((x6391*x6396))+(((-1.0)*gconst128*r20*x6398))+((cj12*sj11))+((cj11*sj12))+((r22*x6390)));
evalcond[4]=(((x6391*x6394))+((cj10*x6395))+(((-1.0)*gconst128*r00*x6398))+(((-1.0)*cj10*x6397))+((r02*x6390)));
evalcond[5]=(((x6391*x6392))+((r12*x6390))+(((-1.0)*gconst128*r10*x6398))+((sj10*x6395))+(((-1.0)*x6393*x6397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6400=((1.0)*gconst128);
CheckValue<IkReal> x6401=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6400))+(((-1.0)*gconst127*r10)))),-1);
if(!x6401.valid){
continue;
}
CheckValue<IkReal> x6402 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x6400))+((gconst127*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6402.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6401.value)))+(x6402.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6403=IKsin(j14);
IkReal x6404=IKcos(j14);
IkReal x6405=(gconst127*r11);
IkReal x6406=((1.0)*sj10);
IkReal x6407=(gconst127*r01);
IkReal x6408=(sj11*sj12);
IkReal x6409=(gconst127*r21);
IkReal x6410=(cj11*cj12);
IkReal x6411=((1.0)*x6404);
IkReal x6412=((1.0)*gconst128*x6403);
evalcond[0]=((((-1.0)*r20*x6412))+(((-1.0)*r22*x6411))+((x6403*x6409)));
evalcond[1]=((((-1.0)*r10*x6412))+cj10+(((-1.0)*r12*x6411))+((x6403*x6405)));
evalcond[2]=((((-1.0)*r02*x6411))+(((-1.0)*x6406))+((x6403*x6407))+(((-1.0)*r00*x6412)));
evalcond[3]=((((-1.0)*gconst128*r20*x6411))+((x6404*x6409))+((cj12*sj11))+((r22*x6403))+((cj11*sj12)));
evalcond[4]=(((r02*x6403))+((cj10*x6408))+((x6404*x6407))+(((-1.0)*gconst128*r00*x6411))+(((-1.0)*cj10*x6410)));
evalcond[5]=((((-1.0)*gconst128*r10*x6411))+((sj10*x6408))+(((-1.0)*x6406*x6410))+((x6404*x6405))+((r12*x6403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6413=((-1.0)*r01);
IkReal x6415 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6415)==0){
continue;
}
IkReal x6414=pow(x6415,-0.5);
CheckValue<IkReal> x6416 = IKatan2WithCheck(IkReal(x6413),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6416.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6416.value))));
IkReal gconst130=(x6413*x6414);
IkReal gconst131=((1.0)*r00*x6414);
CheckValue<IkReal> x6417 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6417.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x6417.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[5];
IkReal x6418=((-1.0)*r01);
CheckValue<IkReal> x6421 = IKatan2WithCheck(IkReal(x6418),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6421.valid){
continue;
}
IkReal x6419=((1.0)*(x6421.value));
IkReal x6420=x6414;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst130;
cj15=gconst131;
j15=((3.14159265)+(((-1.0)*x6419)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6419)));
IkReal gconst130=(x6418*x6420);
IkReal gconst131=((1.0)*r00*x6420);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=cj10;
j14eval[3]=r22;
j14eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  || IKabs(j14eval[4]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x6422=((-1.0)*r01);
CheckValue<IkReal> x6425 = IKatan2WithCheck(IkReal(x6422),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6425.valid){
continue;
}
IkReal x6423=((1.0)*(x6425.value));
IkReal x6424=x6414;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst130;
cj15=gconst131;
j15=((3.14159265)+(((-1.0)*x6423)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6423)));
IkReal gconst130=(x6422*x6424);
IkReal gconst131=((1.0)*r00*x6424);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x6426=((-1.0)*r01);
CheckValue<IkReal> x6429 = IKatan2WithCheck(IkReal(x6426),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6429.valid){
continue;
}
IkReal x6427=((1.0)*(x6429.value));
IkReal x6428=x6414;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst130;
cj15=gconst131;
j15=((3.14159265)+(((-1.0)*x6427)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6427)));
IkReal gconst130=(x6426*x6428);
IkReal gconst131=((1.0)*r00*x6428);
IkReal x6430=r02*r02;
IkReal x6431=(r12*sj10);
IkReal x6432=x6414;
IkReal x6433=(cj10*x6432);
j14eval[0]=((IKabs(((((-1.0)*cj10*r02))+(((-1.0)*x6431)))))+(IKabs((((x6430*x6433))+((r02*x6431*x6432))+(((-1.0)*x6433))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6434=((1.0)*gconst130);
CheckValue<IkReal> x6435=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r21))+(((-1.0)*r20*x6434)))),-1);
if(!x6435.valid){
continue;
}
CheckValue<IkReal> x6436 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((gconst131*r10*sj10))+(((-1.0)*cj10*r01*x6434))+(((-1.0)*r11*sj10*x6434))+((cj10*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6436.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6435.value)))+(x6436.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6437=IKsin(j14);
IkReal x6438=IKcos(j14);
IkReal x6439=(gconst131*r10);
IkReal x6440=((1.0)*sj10);
IkReal x6441=(gconst130*r11);
IkReal x6442=(gconst131*r20);
IkReal x6443=(sj11*sj12);
IkReal x6444=(gconst131*r00);
IkReal x6445=(cj11*cj12);
IkReal x6446=((1.0)*x6438);
IkReal x6447=((1.0)*x6437);
IkReal x6448=(gconst130*x6438);
IkReal x6449=(gconst130*x6437);
evalcond[0]=(((r21*x6449))+(((-1.0)*x6442*x6447))+(((-1.0)*r22*x6446)));
evalcond[1]=((((-1.0)*x6439*x6447))+(((-1.0)*r12*x6446))+cj10+((x6437*x6441)));
evalcond[2]=(((r01*x6449))+(((-1.0)*r02*x6446))+(((-1.0)*x6444*x6447))+(((-1.0)*x6440)));
evalcond[3]=(((r22*x6437))+((r21*x6448))+((cj12*sj11))+(((-1.0)*x6442*x6446))+((cj11*sj12)));
evalcond[4]=(((r01*x6448))+(((-1.0)*x6444*x6446))+(((-1.0)*cj10*x6445))+((r02*x6437))+((cj10*x6443)));
evalcond[5]=(((sj10*x6443))+(((-1.0)*x6439*x6446))+((r12*x6437))+((x6438*x6441))+(((-1.0)*x6440*x6445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6450=((1.0)*gconst131);
CheckValue<IkReal> x6451 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst130*r21*sj10))+(((-1.0)*r20*sj10*x6450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6451.valid){
continue;
}
CheckValue<IkReal> x6452=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6450))+(((-1.0)*gconst130*r10)))),-1);
if(!x6452.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6451.value)+(((1.5707963267949)*(x6452.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6453=IKsin(j14);
IkReal x6454=IKcos(j14);
IkReal x6455=(gconst131*r10);
IkReal x6456=((1.0)*sj10);
IkReal x6457=(gconst130*r11);
IkReal x6458=(gconst131*r20);
IkReal x6459=(sj11*sj12);
IkReal x6460=(gconst131*r00);
IkReal x6461=(cj11*cj12);
IkReal x6462=((1.0)*x6454);
IkReal x6463=((1.0)*x6453);
IkReal x6464=(gconst130*x6454);
IkReal x6465=(gconst130*x6453);
evalcond[0]=((((-1.0)*x6458*x6463))+((r21*x6465))+(((-1.0)*r22*x6462)));
evalcond[1]=(((x6453*x6457))+cj10+(((-1.0)*x6455*x6463))+(((-1.0)*r12*x6462)));
evalcond[2]=(((r01*x6465))+(((-1.0)*x6456))+(((-1.0)*r02*x6462))+(((-1.0)*x6460*x6463)));
evalcond[3]=((((-1.0)*x6458*x6462))+((r21*x6464))+((r22*x6453))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((r01*x6464))+((r02*x6453))+(((-1.0)*cj10*x6461))+(((-1.0)*x6460*x6462))+((cj10*x6459)));
evalcond[5]=(((sj10*x6459))+((x6454*x6457))+(((-1.0)*x6455*x6462))+(((-1.0)*x6456*x6461))+((r12*x6453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6466=((1.0)*gconst131);
CheckValue<IkReal> x6467 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst130*r21))+(((-1.0)*cj10*r20*x6466)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6467.valid){
continue;
}
CheckValue<IkReal> x6468=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6466))+(((-1.0)*gconst130*r00)))),-1);
if(!x6468.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6467.value)+(((1.5707963267949)*(x6468.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6469=IKsin(j14);
IkReal x6470=IKcos(j14);
IkReal x6471=(gconst131*r10);
IkReal x6472=((1.0)*sj10);
IkReal x6473=(gconst130*r11);
IkReal x6474=(gconst131*r20);
IkReal x6475=(sj11*sj12);
IkReal x6476=(gconst131*r00);
IkReal x6477=(cj11*cj12);
IkReal x6478=((1.0)*x6470);
IkReal x6479=((1.0)*x6469);
IkReal x6480=(gconst130*x6470);
IkReal x6481=(gconst130*x6469);
evalcond[0]=(((r21*x6481))+(((-1.0)*r22*x6478))+(((-1.0)*x6474*x6479)));
evalcond[1]=((((-1.0)*r12*x6478))+cj10+(((-1.0)*x6471*x6479))+((x6469*x6473)));
evalcond[2]=(((r01*x6481))+(((-1.0)*r02*x6478))+(((-1.0)*x6476*x6479))+(((-1.0)*x6472)));
evalcond[3]=(((r21*x6480))+((r22*x6469))+((cj12*sj11))+(((-1.0)*x6474*x6478))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj10*x6477))+((r01*x6480))+((cj10*x6475))+(((-1.0)*x6476*x6478))+((r02*x6469)));
evalcond[5]=(((sj10*x6475))+((x6470*x6473))+(((-1.0)*x6472*x6477))+(((-1.0)*x6471*x6478))+((r12*x6469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x6482=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x6482;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x6482);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x6483=((1.0)*cj15);
IkReal x6484=((((-1.0)*r11*x6483))+(((-1.0)*r10*sj15)));
j14eval[0]=x6484;
j14eval[1]=IKsign(x6484);
j14eval[2]=((IKabs(r22))+(IKabs((((r21*sj15))+(((-1.0)*r20*x6483))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x6485=cj15*cj15;
IkReal x6486=r01*r01;
IkReal x6487=(cj15*r00);
IkReal x6488=(r01*sj15);
IkReal x6489=(((x6485*(r00*r00)))+x6486+(((-2.0)*x6487*x6488))+(((-1.0)*x6485*x6486))+(r02*r02));
j14eval[0]=x6489;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x6487))+x6488))));
j14eval[2]=IKsign(x6489);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6490=cj15*cj15;
IkReal x6491=r01*r01;
IkReal x6492=(r01*sj15);
IkReal x6493=(cj15*r00);
CheckValue<IkReal> x6494=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6492*x6493))+x6491+((x6490*(r00*r00)))+(r02*r02)+(((-1.0)*x6490*x6491)))),-1);
if(!x6494.valid){
continue;
}
CheckValue<IkReal> x6495 = IKatan2WithCheck(IkReal(((((-1.0)*x6493))+x6492)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6495.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6494.value)))+(x6495.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6496=IKcos(j14);
IkReal x6497=IKsin(j14);
IkReal x6498=(cj15*r20);
IkReal x6499=(cj15*r10);
IkReal x6500=(cj15*r00);
IkReal x6501=((1.0)*x6496);
IkReal x6502=(sj15*x6496);
IkReal x6503=((1.0)*x6497);
IkReal x6504=(sj15*x6497);
evalcond[0]=((((-1.0)*x6500*x6501))+((r02*x6497))+((r01*x6502)));
evalcond[1]=(((r21*x6504))+(((-1.0)*x6498*x6503))+(((-1.0)*r22*x6501)));
evalcond[2]=((((-1.0)*r12*x6501))+(((-1.0)*x6499*x6503))+((r11*x6504)));
evalcond[3]=((-1.0)+(((-1.0)*x6500*x6503))+(((-1.0)*r02*x6501))+((r01*x6504)));
evalcond[4]=(((r21*x6502))+(((-1.0)*x6498*x6501))+((cj12*sj11))+((cj11*sj12))+((r22*x6497)));
evalcond[5]=(((sj11*sj12))+((r12*x6497))+(((-1.0)*x6499*x6501))+((r11*x6502))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6505=((1.0)*cj15);
CheckValue<IkReal> x6506=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6505))+(((-1.0)*r10*sj15)))),-1);
if(!x6506.valid){
continue;
}
CheckValue<IkReal> x6507 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6505))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6507.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6506.value)))+(x6507.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6508=IKcos(j14);
IkReal x6509=IKsin(j14);
IkReal x6510=(cj15*r20);
IkReal x6511=(cj15*r10);
IkReal x6512=(cj15*r00);
IkReal x6513=((1.0)*x6508);
IkReal x6514=(sj15*x6508);
IkReal x6515=((1.0)*x6509);
IkReal x6516=(sj15*x6509);
evalcond[0]=(((r02*x6509))+(((-1.0)*x6512*x6513))+((r01*x6514)));
evalcond[1]=((((-1.0)*r22*x6513))+((r21*x6516))+(((-1.0)*x6510*x6515)));
evalcond[2]=(((r11*x6516))+(((-1.0)*r12*x6513))+(((-1.0)*x6511*x6515)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6513))+(((-1.0)*x6512*x6515))+((r01*x6516)));
evalcond[4]=(((r22*x6509))+((cj12*sj11))+((r21*x6514))+(((-1.0)*x6510*x6513))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r12*x6509))+((r11*x6514))+(((-1.0)*cj11*cj12))+(((-1.0)*x6511*x6513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x6517=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x6517.valid){
continue;
}
CheckValue<IkReal> x6518 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6518.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6517.value)))+(x6518.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6519=IKcos(j14);
IkReal x6520=IKsin(j14);
IkReal x6521=(cj15*r20);
IkReal x6522=(cj15*r10);
IkReal x6523=(cj15*r00);
IkReal x6524=((1.0)*x6519);
IkReal x6525=(sj15*x6519);
IkReal x6526=((1.0)*x6520);
IkReal x6527=(sj15*x6520);
evalcond[0]=(((r02*x6520))+((r01*x6525))+(((-1.0)*x6523*x6524)));
evalcond[1]=((((-1.0)*x6521*x6526))+(((-1.0)*r22*x6524))+((r21*x6527)));
evalcond[2]=((((-1.0)*x6522*x6526))+(((-1.0)*r12*x6524))+((r11*x6527)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6524))+((r01*x6527))+(((-1.0)*x6523*x6526)));
evalcond[4]=((((-1.0)*x6521*x6524))+((cj12*sj11))+((r21*x6525))+((r22*x6520))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x6522*x6524))+((r12*x6520))+((r11*x6525))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x6528=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x6528;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x6528);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x6529=((1.0)*cj15);
IkReal x6530=((((-1.0)*r21*x6529))+(((-1.0)*r20*sj15)));
j14eval[0]=x6530;
j14eval[1]=IKsign(x6530);
j14eval[2]=((IKabs((((r11*sj15))+(((-1.0)*r10*x6529)))))+(IKabs(r12)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x6531=(cj11*sj12);
IkReal x6532=(r01*sj15);
IkReal x6533=((1.0)*r02);
IkReal x6534=(cj12*sj11);
IkReal x6535=((1.0)*cj15*r00);
IkReal x6536=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x6536;
j14eval[1]=IKsign(x6536);
j14eval[2]=((IKabs(((((-1.0)*x6533*x6534))+(((-1.0)*x6531*x6533)))))+(IKabs(((((-1.0)*x6534*x6535))+((x6531*x6532))+((x6532*x6534))+(((-1.0)*x6531*x6535))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6537=(cj11*sj12);
IkReal x6538=(r01*sj15);
IkReal x6539=((1.0)*r02);
IkReal x6540=(cj12*sj11);
IkReal x6541=((1.0)*cj15*r00);
CheckValue<IkReal> x6542=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x6542.valid){
continue;
}
CheckValue<IkReal> x6543 = IKatan2WithCheck(IkReal((((x6538*x6540))+(((-1.0)*x6540*x6541))+(((-1.0)*x6537*x6541))+((x6537*x6538)))),IkReal(((((-1.0)*x6537*x6539))+(((-1.0)*x6539*x6540)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6543.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6542.value)))+(x6543.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6544=IKcos(j14);
IkReal x6545=IKsin(j14);
IkReal x6546=(cj15*r20);
IkReal x6547=(cj15*r10);
IkReal x6548=(cj15*r00);
IkReal x6549=((1.0)*x6544);
IkReal x6550=(sj15*x6544);
IkReal x6551=((1.0)*x6545);
IkReal x6552=(sj15*x6545);
evalcond[0]=(((r02*x6545))+(((-1.0)*x6548*x6549))+((r01*x6550)));
evalcond[1]=((((-1.0)*r22*x6549))+(((-1.0)*x6546*x6551))+((r21*x6552)));
evalcond[2]=((((-1.0)*r12*x6549))+((r11*x6552))+(((-1.0)*x6547*x6551)));
evalcond[3]=((1.0)+(((-1.0)*x6548*x6551))+(((-1.0)*r02*x6549))+((r01*x6552)));
evalcond[4]=((((-1.0)*x6546*x6549))+((r22*x6545))+((cj12*sj11))+((r21*x6550))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+((r11*x6550))+(((-1.0)*x6547*x6549))+((r12*x6545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6553=((1.0)*cj15);
CheckValue<IkReal> x6554=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15))+(((-1.0)*r21*x6553)))),-1);
if(!x6554.valid){
continue;
}
CheckValue<IkReal> x6555 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*r10*x6553)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6555.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6554.value)))+(x6555.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6556=IKcos(j14);
IkReal x6557=IKsin(j14);
IkReal x6558=(cj15*r20);
IkReal x6559=(cj15*r10);
IkReal x6560=(cj15*r00);
IkReal x6561=((1.0)*x6556);
IkReal x6562=(sj15*x6556);
IkReal x6563=((1.0)*x6557);
IkReal x6564=(sj15*x6557);
evalcond[0]=(((r02*x6557))+(((-1.0)*x6560*x6561))+((r01*x6562)));
evalcond[1]=((((-1.0)*r22*x6561))+((r21*x6564))+(((-1.0)*x6558*x6563)));
evalcond[2]=(((r11*x6564))+(((-1.0)*x6559*x6563))+(((-1.0)*r12*x6561)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6561))+(((-1.0)*x6560*x6563))+((r01*x6564)));
evalcond[4]=(((r21*x6562))+((cj12*sj11))+((r22*x6557))+(((-1.0)*x6558*x6561))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+((r11*x6562))+((r12*x6557))+(((-1.0)*x6559*x6561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x6565=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x6565.valid){
continue;
}
CheckValue<IkReal> x6566 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6566.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6565.value)))+(x6566.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6567=IKcos(j14);
IkReal x6568=IKsin(j14);
IkReal x6569=(cj15*r20);
IkReal x6570=(cj15*r10);
IkReal x6571=(cj15*r00);
IkReal x6572=((1.0)*x6567);
IkReal x6573=(sj15*x6567);
IkReal x6574=((1.0)*x6568);
IkReal x6575=(sj15*x6568);
evalcond[0]=((((-1.0)*x6571*x6572))+((r01*x6573))+((r02*x6568)));
evalcond[1]=((((-1.0)*r22*x6572))+((r21*x6575))+(((-1.0)*x6569*x6574)));
evalcond[2]=(((r11*x6575))+(((-1.0)*r12*x6572))+(((-1.0)*x6570*x6574)));
evalcond[3]=((1.0)+(((-1.0)*x6571*x6574))+((r01*x6575))+(((-1.0)*r02*x6572)));
evalcond[4]=(((r22*x6568))+((r21*x6573))+(((-1.0)*x6569*x6572))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((r12*x6568))+((cj11*cj12))+((r11*x6573))+(((-1.0)*x6570*x6572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x6576=((-1.0)*px);
sj13=0;
cj13=1.0;
j13=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6576);
rxp1_1=(px*r21);
rxp1_2=(r11*x6576);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x6577=((-1.0)*px);
sj13=0;
cj13=1.0;
j13=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6577);
rxp1_1=(px*r21);
rxp1_2=(r11*x6577);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=((((-1.0)*cj15*r20))+((r21*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x6578=((-1.0)*px);
sj13=0;
cj13=1.0;
j13=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6578);
rxp1_1=(px*r21);
rxp1_2=(r11*x6578);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=(((r11*sj15))+(((-1.0)*cj15*r10)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x6581=IKPowWithIntegerCheck((((r11*sj15))+(((-1.0)*cj15*r10))),-1);
if(!x6581.valid){
continue;
}
IkReal x6579=x6581.value;
IkReal x6580=(sj10*x6579);
cj14array[0]=(((cj11*cj12*x6580))+(((-1.0)*sj11*sj12*x6580)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x6582=IKsin(j14);
IkReal x6583=IKcos(j14);
IkReal x6584=(sj15*x6582);
IkReal x6585=((1.0)*x6583);
IkReal x6586=((1.0)*cj15*x6582);
evalcond[0]=(r02*x6582);
evalcond[1]=((((-1.0)*r02*x6585))+(((-1.0)*sj10)));
evalcond[2]=(((r21*x6584))+(((-1.0)*r20*x6586)));
evalcond[3]=(((r11*x6584))+(((-1.0)*r10*x6586)));
evalcond[4]=(((r21*sj15*x6583))+((cj12*sj11))+(((-1.0)*cj15*r20*x6585))+((cj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x6589=IKPowWithIntegerCheck(((((-1.0)*cj15*r20))+((r21*sj15))),-1);
if(!x6589.valid){
continue;
}
IkReal x6587=x6589.value;
IkReal x6588=((1.0)*x6587);
cj14array[0]=((((-1.0)*cj12*sj11*x6588))+(((-1.0)*cj11*sj12*x6588)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x6590=IKsin(j14);
IkReal x6591=IKcos(j14);
IkReal x6592=(cj15*r10);
IkReal x6593=((1.0)*sj10);
IkReal x6594=(sj15*x6590);
IkReal x6595=((1.0)*x6591);
IkReal x6596=((1.0)*x6590);
evalcond[0]=(r02*x6590);
evalcond[1]=((((-1.0)*r02*x6595))+(((-1.0)*x6593)));
evalcond[2]=(((r21*x6594))+(((-1.0)*cj15*r20*x6596)));
evalcond[3]=(((r11*x6594))+(((-1.0)*x6592*x6596)));
evalcond[4]=((((-1.0)*cj11*cj12*x6593))+((r11*sj15*x6591))+(((-1.0)*x6592*x6595))+((sj10*sj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x6597=IKPowWithIntegerCheck(r02,-1);
if(!x6597.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x6597.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x6598=IKsin(j14);
IkReal x6599=IKcos(j14);
IkReal x6600=((1.0)*cj15);
IkReal x6601=(sj15*x6598);
IkReal x6602=(sj15*x6599);
evalcond[0]=(r02*x6598);
evalcond[1]=(((r21*x6601))+(((-1.0)*r20*x6598*x6600)));
evalcond[2]=((((-1.0)*r10*x6598*x6600))+((r11*x6601)));
evalcond[3]=(((r21*x6602))+((cj12*sj11))+(((-1.0)*r20*x6599*x6600))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj11*cj12*sj10))+(((-1.0)*r10*x6599*x6600))+((r11*x6602))+((sj10*sj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6603=((1.0)*sj15);
CheckValue<IkReal> x6604=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj15*r21))+(((-1.0)*r20*x6603)))),-1);
if(!x6604.valid){
continue;
}
CheckValue<IkReal> x6605 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x6603))+((cj15*r10*sj10))+(((-1.0)*cj10*r01*x6603))+((cj10*cj15*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6605.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6604.value)))+(x6605.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6606=IKsin(j14);
IkReal x6607=IKcos(j14);
IkReal x6608=(cj15*r20);
IkReal x6609=((1.0)*sj10);
IkReal x6610=(cj15*r10);
IkReal x6611=(sj11*sj12);
IkReal x6612=(cj15*r00);
IkReal x6613=(cj11*cj12);
IkReal x6614=((1.0)*x6607);
IkReal x6615=(sj15*x6607);
IkReal x6616=((1.0)*x6606);
IkReal x6617=(sj15*x6606);
evalcond[0]=(((r21*x6617))+(((-1.0)*x6608*x6616))+(((-1.0)*r22*x6614)));
evalcond[1]=((((-1.0)*r12*x6614))+(((-1.0)*x6610*x6616))+cj10+((r11*x6617)));
evalcond[2]=((((-1.0)*x6612*x6616))+((r01*x6617))+(((-1.0)*r02*x6614))+(((-1.0)*x6609)));
evalcond[3]=(((r21*x6615))+((r22*x6606))+(((-1.0)*x6608*x6614))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*x6612*x6614))+(((-1.0)*cj10*x6613))+((r01*x6615))+((r02*x6606))+((cj10*x6611)));
evalcond[5]=(((sj10*x6611))+(((-1.0)*x6610*x6614))+(((-1.0)*x6609*x6613))+((r11*x6615))+((r12*x6606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6618=((1.0)*cj15);
CheckValue<IkReal> x6619 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x6618))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6619.valid){
continue;
}
CheckValue<IkReal> x6620=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6618))+(((-1.0)*r10*sj15)))),-1);
if(!x6620.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6619.value)+(((1.5707963267949)*(x6620.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6621=IKsin(j14);
IkReal x6622=IKcos(j14);
IkReal x6623=(cj15*r20);
IkReal x6624=((1.0)*sj10);
IkReal x6625=(cj15*r10);
IkReal x6626=(sj11*sj12);
IkReal x6627=(cj15*r00);
IkReal x6628=(cj11*cj12);
IkReal x6629=((1.0)*x6622);
IkReal x6630=(sj15*x6622);
IkReal x6631=((1.0)*x6621);
IkReal x6632=(sj15*x6621);
evalcond[0]=(((r21*x6632))+(((-1.0)*r22*x6629))+(((-1.0)*x6623*x6631)));
evalcond[1]=((((-1.0)*r12*x6629))+((r11*x6632))+cj10+(((-1.0)*x6625*x6631)));
evalcond[2]=((((-1.0)*x6624))+((r01*x6632))+(((-1.0)*r02*x6629))+(((-1.0)*x6627*x6631)));
evalcond[3]=(((r21*x6630))+((r22*x6621))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*x6623*x6629)));
evalcond[4]=(((r02*x6621))+(((-1.0)*cj10*x6628))+((r01*x6630))+(((-1.0)*x6627*x6629))+((cj10*x6626)));
evalcond[5]=(((sj10*x6626))+((r12*x6621))+((r11*x6630))+(((-1.0)*x6625*x6629))+(((-1.0)*x6624*x6628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6633=((1.0)*cj15);
CheckValue<IkReal> x6634=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x6633)))),-1);
if(!x6634.valid){
continue;
}
CheckValue<IkReal> x6635 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x6633))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6635.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6634.value)))+(x6635.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6636=IKsin(j14);
IkReal x6637=IKcos(j14);
IkReal x6638=(cj15*r20);
IkReal x6639=((1.0)*sj10);
IkReal x6640=(cj15*r10);
IkReal x6641=(sj11*sj12);
IkReal x6642=(cj15*r00);
IkReal x6643=(cj11*cj12);
IkReal x6644=((1.0)*x6637);
IkReal x6645=(sj15*x6637);
IkReal x6646=((1.0)*x6636);
IkReal x6647=(sj15*x6636);
evalcond[0]=((((-1.0)*x6638*x6646))+(((-1.0)*r22*x6644))+((r21*x6647)));
evalcond[1]=((((-1.0)*x6640*x6646))+((r11*x6647))+cj10+(((-1.0)*r12*x6644)));
evalcond[2]=((((-1.0)*x6642*x6646))+((r01*x6647))+(((-1.0)*r02*x6644))+(((-1.0)*x6639)));
evalcond[3]=((((-1.0)*x6638*x6644))+((r21*x6645))+((r22*x6636))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj10*x6643))+(((-1.0)*x6642*x6644))+((r01*x6645))+((r02*x6636))+((cj10*x6641)));
evalcond[5]=((((-1.0)*x6639*x6643))+(((-1.0)*x6640*x6644))+((r11*x6645))+((sj10*x6641))+((r12*x6636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x6648=((((-1.0)*cj11*sj12))+(((-1.0)*cj12*sj11)));
j10eval[0]=x6648;
j10eval[1]=IKsign(x6648);
j10eval[2]=((IKabs((((cj15*r01))+((r00*sj15)))))+(IKabs((((cj15*r11))+((r10*sj15))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x6649=cj15*cj15;
IkReal x6650=r21*r21;
IkReal x6651=(cj15*r20);
IkReal x6652=(cj12*sj11);
IkReal x6653=(r21*sj15);
IkReal x6654=(cj11*sj12);
IkReal x6655=((r22*r22)+x6650+(((-2.0)*x6651*x6653))+(((-1.0)*x6649*x6650))+((x6649*(r20*r20))));
j14eval[0]=x6655;
j14eval[1]=IKsign(x6655);
j14eval[2]=((IKabs((((r22*x6654))+((r22*x6652)))))+(IKabs((((x6653*x6654))+((x6652*x6653))+(((-1.0)*x6651*x6654))+(((-1.0)*x6651*x6652))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x6656=cj11*cj11;
IkReal x6657=(cj12*sj12);
IkReal x6658=(cj12*sj11);
IkReal x6659=(cj11*sj11);
j10eval[0]=((((-2.0)*cj11*cj12*x6658))+(((-2.0)*x6656*x6657))+x6659+x6657+(((-1.14255568581477)*sj12*x6656))+(((-1.14255568581477)*cj11*x6658)));
j10eval[1]=((((-1.0)*cj11*sj12))+(((-1.0)*x6658)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((2.06387083990023)*py))+(((-0.507498115261088)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.06387083990023)*px))+(((0.507498115261088)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.06387083990023)*py))+(((-0.507498115261088)*px))))+IKsqr(((((2.06387083990023)*px))+(((0.507498115261088)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((2.06387083990023)*py))+(((-0.507498115261088)*px))), ((((2.06387083990023)*px))+(((0.507498115261088)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x6660=IKsin(j10);
IkReal x6661=IKcos(j10);
evalcond[0]=((((-0.11235)*x6660))+(((0.4569)*x6661))+(((-1.0)*px)));
evalcond[1]=((((0.4569)*x6660))+(((-1.0)*py))+(((0.11235)*x6661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x6662=((1.0)*cj15);
IkReal x6663=((((-1.0)*r01*x6662))+(((-1.0)*r00*sj15)));
j14eval[0]=x6663;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x6662))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x6663);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x6664=((1.0)*cj15);
IkReal x6665=((((-1.0)*r11*x6664))+(((-1.0)*r10*sj15)));
j14eval[0]=x6665;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x6664))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x6665);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x6666=cj15*cj15;
IkReal x6667=(r11*r21);
IkReal x6668=(cj15*r20);
IkReal x6669=((1.0)*r21*sj15);
IkReal x6670=(x6667+((r12*r22))+(((-1.0)*r11*sj15*x6668))+(((-1.0)*x6666*x6667))+((r10*r20*x6666))+(((-1.0)*cj15*r10*x6669)));
j14eval[0]=x6670;
j14eval[1]=IKsign(x6670);
j14eval[2]=((IKabs((((cj10*x6668))+(((-1.0)*cj10*x6669)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6671=cj15*cj15;
IkReal x6672=(cj15*r20);
IkReal x6673=(r11*r21);
IkReal x6674=((1.0)*r21*sj15);
CheckValue<IkReal> x6675 = IKatan2WithCheck(IkReal((((cj10*x6672))+(((-1.0)*cj10*x6674)))),IkReal((cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6675.valid){
continue;
}
CheckValue<IkReal> x6676=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj15*x6672))+x6673+((r12*r22))+(((-1.0)*x6671*x6673))+((r10*r20*x6671))+(((-1.0)*cj15*r10*x6674)))),-1);
if(!x6676.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6675.value)+(((1.5707963267949)*(x6676.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6677=IKsin(j14);
IkReal x6678=IKcos(j14);
IkReal x6679=((1.0)*sj10);
IkReal x6680=(sj15*x6677);
IkReal x6681=((1.0)*x6678);
IkReal x6682=((1.0)*x6677);
IkReal x6683=(cj15*x6678);
IkReal x6684=(cj15*x6682);
evalcond[0]=((((-1.0)*r20*x6684))+((r21*x6680))+(((-1.0)*r22*x6681)));
evalcond[1]=(((r20*x6683))+(((-1.0)*r21*sj15*x6681))+(((-1.0)*r22*x6682)));
evalcond[2]=(((r11*x6680))+cj10+(((-1.0)*r10*x6684))+(((-1.0)*r12*x6681)));
evalcond[3]=((((-1.0)*r02*x6681))+(((-1.0)*r00*x6684))+(((-1.0)*x6679))+((r01*x6680)));
evalcond[4]=((((-1.0)*r02*x6682))+(((-1.0)*r01*sj15*x6681))+((r00*x6683))+(((-1.0)*cj10)));
evalcond[5]=((((-1.0)*x6679))+((r10*x6683))+(((-1.0)*r12*x6682))+(((-1.0)*r11*sj15*x6681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6685=((1.0)*cj15);
CheckValue<IkReal> x6686=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6685))+(((-1.0)*r10*sj15)))),-1);
if(!x6686.valid){
continue;
}
CheckValue<IkReal> x6687 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x6685))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6687.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6686.value)))+(x6687.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6688=IKsin(j14);
IkReal x6689=IKcos(j14);
IkReal x6690=((1.0)*sj10);
IkReal x6691=(sj15*x6688);
IkReal x6692=((1.0)*x6689);
IkReal x6693=((1.0)*x6688);
IkReal x6694=(cj15*x6689);
IkReal x6695=(cj15*x6693);
evalcond[0]=((((-1.0)*r20*x6695))+((r21*x6691))+(((-1.0)*r22*x6692)));
evalcond[1]=((((-1.0)*r21*sj15*x6692))+((r20*x6694))+(((-1.0)*r22*x6693)));
evalcond[2]=((((-1.0)*r10*x6695))+((r11*x6691))+cj10+(((-1.0)*r12*x6692)));
evalcond[3]=((((-1.0)*r00*x6695))+(((-1.0)*r02*x6692))+(((-1.0)*x6690))+((r01*x6691)));
evalcond[4]=((((-1.0)*r02*x6693))+(((-1.0)*r01*sj15*x6692))+((r00*x6694))+(((-1.0)*cj10)));
evalcond[5]=((((-1.0)*r11*sj15*x6692))+((r10*x6694))+(((-1.0)*x6690))+(((-1.0)*r12*x6693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6696=((1.0)*cj15);
CheckValue<IkReal> x6697 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x6696)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6697.valid){
continue;
}
CheckValue<IkReal> x6698=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6696))+(((-1.0)*r00*sj15)))),-1);
if(!x6698.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6697.value)+(((1.5707963267949)*(x6698.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6699=IKsin(j14);
IkReal x6700=IKcos(j14);
IkReal x6701=((1.0)*sj10);
IkReal x6702=(sj15*x6699);
IkReal x6703=((1.0)*x6700);
IkReal x6704=((1.0)*x6699);
IkReal x6705=(cj15*x6700);
IkReal x6706=(cj15*x6704);
evalcond[0]=(((r21*x6702))+(((-1.0)*r22*x6703))+(((-1.0)*r20*x6706)));
evalcond[1]=((((-1.0)*r21*sj15*x6703))+(((-1.0)*r22*x6704))+((r20*x6705)));
evalcond[2]=((((-1.0)*r10*x6706))+cj10+((r11*x6702))+(((-1.0)*r12*x6703)));
evalcond[3]=((((-1.0)*r02*x6703))+(((-1.0)*x6701))+((r01*x6702))+(((-1.0)*r00*x6706)));
evalcond[4]=((((-1.0)*r02*x6704))+((r00*x6705))+(((-1.0)*r01*sj15*x6703))+(((-1.0)*cj10)));
evalcond[5]=(((r10*x6705))+(((-1.0)*x6701))+(((-1.0)*r11*sj15*x6703))+(((-1.0)*r12*x6704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-8.29354345611924)*px))+(((2.24409186529617)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.24409186529617)*px))+(((8.29354345611924)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.29354345611924)*px))+(((2.24409186529617)*py))))+IKsqr(((((2.24409186529617)*px))+(((8.29354345611924)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-8.29354345611924)*px))+(((2.24409186529617)*py))), ((((2.24409186529617)*px))+(((8.29354345611924)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x6707=IKcos(j10);
IkReal x6708=IKsin(j10);
evalcond[0]=((((0.0304)*x6707))+(((-1.0)*px))+(((-0.11235)*x6708)));
evalcond[1]=((((0.0304)*x6708))+(((-1.0)*py))+(((0.11235)*x6707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x6709=((1.0)*cj15);
IkReal x6710=((((-1.0)*r00*sj15))+(((-1.0)*r01*x6709)));
j14eval[0]=x6710;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x6709))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x6710);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x6711=cj15*cj15;
IkReal x6712=(r01*r21);
IkReal x6713=((1.0)*cj15*sj15);
IkReal x6714=(((r00*r20*x6711))+x6712+(((-1.0)*x6711*x6712))+(((-1.0)*r01*r20*x6713))+((r02*r22))+(((-1.0)*r00*r21*x6713)));
j14eval[0]=x6714;
j14eval[1]=IKsign(x6714);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x6715=cj15*cj15;
IkReal x6716=(r21*sj15);
IkReal x6717=(r11*r21);
IkReal x6718=((1.0)*cj15);
IkReal x6719=((((-1.0)*r11*r20*sj15*x6718))+x6717+((r12*r22))+(((-1.0)*r10*x6716*x6718))+((r10*r20*x6715))+(((-1.0)*x6715*x6717)));
j14eval[0]=x6719;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x6718))+((sj10*x6716)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x6719);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6720=cj15*cj15;
IkReal x6721=(r21*sj15);
IkReal x6722=((1.0)*cj15);
IkReal x6723=(r11*r21);
CheckValue<IkReal> x6724=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*r20*sj15*x6722))+x6723+((r12*r22))+(((-1.0)*x6720*x6723))+((r10*r20*x6720))+(((-1.0)*r10*x6721*x6722)))),-1);
if(!x6724.valid){
continue;
}
CheckValue<IkReal> x6725 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x6722))+((sj10*x6721)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6725.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6724.value)))+(x6725.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6726=IKsin(j14);
IkReal x6727=IKcos(j14);
IkReal x6728=(sj15*x6726);
IkReal x6729=((1.0)*x6727);
IkReal x6730=((1.0)*x6726);
IkReal x6731=(cj15*x6727);
IkReal x6732=(cj15*x6730);
evalcond[0]=((((-1.0)*r22*x6729))+(((-1.0)*r20*x6732))+((r21*x6728)));
evalcond[1]=((((-1.0)*r22*x6730))+((r20*x6731))+(((-1.0)*r21*sj15*x6729)));
evalcond[2]=(((r11*x6728))+(((-1.0)*r10*x6732))+cj10+(((-1.0)*r12*x6729)));
evalcond[3]=((((-1.0)*r02*x6730))+cj10+(((-1.0)*r01*sj15*x6729))+((r00*x6731)));
evalcond[4]=((((-1.0)*r11*sj15*x6729))+(((-1.0)*r12*x6730))+sj10+((r10*x6731)));
evalcond[5]=((((-1.0)*r00*x6732))+(((-1.0)*sj10))+(((-1.0)*r02*x6729))+((r01*x6728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6733=cj15*cj15;
IkReal x6734=(r01*r21);
IkReal x6735=((1.0)*cj15*sj15);
CheckValue<IkReal> x6736 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6736.valid){
continue;
}
CheckValue<IkReal> x6737=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r20*x6735))+x6734+(((-1.0)*r00*r21*x6735))+((r00*r20*x6733))+((r02*r22))+(((-1.0)*x6733*x6734)))),-1);
if(!x6737.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6736.value)+(((1.5707963267949)*(x6737.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6738=IKsin(j14);
IkReal x6739=IKcos(j14);
IkReal x6740=(sj15*x6738);
IkReal x6741=((1.0)*x6739);
IkReal x6742=((1.0)*x6738);
IkReal x6743=(cj15*x6739);
IkReal x6744=(cj15*x6742);
evalcond[0]=(((r21*x6740))+(((-1.0)*r22*x6741))+(((-1.0)*r20*x6744)));
evalcond[1]=((((-1.0)*r22*x6742))+(((-1.0)*r21*sj15*x6741))+((r20*x6743)));
evalcond[2]=((((-1.0)*r12*x6741))+(((-1.0)*r10*x6744))+((r11*x6740))+cj10);
evalcond[3]=((((-1.0)*r01*sj15*x6741))+(((-1.0)*r02*x6742))+cj10+((r00*x6743)));
evalcond[4]=((((-1.0)*r12*x6742))+((r10*x6743))+sj10+(((-1.0)*r11*sj15*x6741)));
evalcond[5]=((((-1.0)*r00*x6744))+(((-1.0)*r02*x6741))+(((-1.0)*sj10))+((r01*x6740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6745=((1.0)*cj15);
CheckValue<IkReal> x6746 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x6745))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6746.valid){
continue;
}
CheckValue<IkReal> x6747=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6745))+(((-1.0)*r00*sj15)))),-1);
if(!x6747.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6746.value)+(((1.5707963267949)*(x6747.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6748=IKsin(j14);
IkReal x6749=IKcos(j14);
IkReal x6750=(sj15*x6748);
IkReal x6751=((1.0)*x6749);
IkReal x6752=((1.0)*x6748);
IkReal x6753=(cj15*x6749);
IkReal x6754=(cj15*x6752);
evalcond[0]=((((-1.0)*r20*x6754))+(((-1.0)*r22*x6751))+((r21*x6750)));
evalcond[1]=(((r20*x6753))+(((-1.0)*r21*sj15*x6751))+(((-1.0)*r22*x6752)));
evalcond[2]=(((r11*x6750))+(((-1.0)*r10*x6754))+cj10+(((-1.0)*r12*x6751)));
evalcond[3]=((((-1.0)*r01*sj15*x6751))+((r00*x6753))+cj10+(((-1.0)*r02*x6752)));
evalcond[4]=(sj10+((r10*x6753))+(((-1.0)*r12*x6752))+(((-1.0)*r11*sj15*x6751)));
evalcond[5]=(((r01*x6750))+(((-1.0)*sj10))+(((-1.0)*r00*x6754))+(((-1.0)*r02*x6751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6755=((1.0)*cj15);
IkReal x6756=((1.0)*sj15);
if( IKabs(((((-1.0)*r10*x6756))+(((-1.0)*r11*x6755)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x6755))+(((-1.0)*r00*x6756)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x6756))+(((-1.0)*r11*x6755))))+IKsqr(((((-1.0)*r01*x6755))+(((-1.0)*r00*x6756))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r10*x6756))+(((-1.0)*r11*x6755))), ((((-1.0)*r01*x6755))+(((-1.0)*r00*x6756))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x6757=IKsin(j10);
IkReal x6758=IKcos(j10);
IkReal x6759=((1.0)*cj15);
IkReal x6760=((0.08535)*sj15);
IkReal x6761=((1.0)*sj15);
IkReal x6762=((0.08535)*cj15);
evalcond[0]=((((-1.0)*x6758))+(((-1.0)*r01*x6759))+(((-1.0)*r00*x6761)));
evalcond[1]=((((-1.0)*x6757))+(((-1.0)*r10*x6761))+(((-1.0)*r11*x6759)));
evalcond[2]=((((-0.11235)*x6757))+(((-1.0)*px))+(((-1.0)*r01*x6762))+(((-1.0)*r00*x6760)));
evalcond[3]=((((0.11235)*x6758))+(((-1.0)*r10*x6760))+(((-1.0)*py))+(((-1.0)*r11*x6762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x6763=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x6763;
j14eval[1]=((IKabs(r02))+(IKabs((((cj15*r00))+(((-1.0)*r01*sj15))))));
j14eval[2]=IKsign(x6763);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x6764=((1.0)*cj15);
IkReal x6765=((((-1.0)*r01*x6764))+(((-1.0)*r00*sj15)));
j14eval[0]=x6765;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x6764))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x6765);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x6766=cj15*cj15;
IkReal x6767=r21*r21;
IkReal x6768=(cj15*r20);
IkReal x6769=(r21*sj15);
IkReal x6770=((r22*r22)+x6767+((x6766*(r20*r20)))+(((-1.0)*x6766*x6767))+(((-2.0)*x6768*x6769)));
j14eval[0]=x6770;
j14eval[1]=IKsign(x6770);
j14eval[2]=((IKabs(r22))+(IKabs((x6769+(((-1.0)*x6768))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6771=cj15*cj15;
IkReal x6772=r21*r21;
IkReal x6773=(cj15*r20);
IkReal x6774=(r21*sj15);
CheckValue<IkReal> x6775=IKPowWithIntegerCheck(IKsign(((r22*r22)+x6772+(((-2.0)*x6773*x6774))+((x6771*(r20*r20)))+(((-1.0)*x6771*x6772)))),-1);
if(!x6775.valid){
continue;
}
CheckValue<IkReal> x6776 = IKatan2WithCheck(IkReal(r22),IkReal((x6774+(((-1.0)*x6773)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6776.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6775.value)))+(x6776.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6777=IKsin(j14);
IkReal x6778=IKcos(j14);
IkReal x6779=(sj15*x6777);
IkReal x6780=(cj15*x6778);
IkReal x6781=((1.0)*x6778);
IkReal x6782=((1.0)*x6777);
IkReal x6783=(cj15*x6782);
evalcond[0]=(((r21*x6779))+(((-1.0)*r22*x6781))+(((-1.0)*r20*x6783)));
evalcond[1]=((((-1.0)*r02*x6782))+((r00*x6780))+(((-1.0)*r01*sj15*x6781)));
evalcond[2]=((((-1.0)*r12*x6782))+((r10*x6780))+(((-1.0)*r11*sj15*x6781)));
evalcond[3]=(((r11*x6779))+(((-1.0)*r12*x6781))+cj10+(((-1.0)*r10*x6783)));
evalcond[4]=((1.0)+((r20*x6780))+(((-1.0)*r21*sj15*x6781))+(((-1.0)*r22*x6782)));
evalcond[5]=((((-1.0)*r02*x6781))+(((-1.0)*sj10))+(((-1.0)*r00*x6783))+((r01*x6779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6784=((1.0)*cj15);
CheckValue<IkReal> x6785=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x6784)))),-1);
if(!x6785.valid){
continue;
}
CheckValue<IkReal> x6786 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x6784)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6786.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6785.value)))+(x6786.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6787=IKsin(j14);
IkReal x6788=IKcos(j14);
IkReal x6789=(sj15*x6787);
IkReal x6790=(cj15*x6788);
IkReal x6791=((1.0)*x6788);
IkReal x6792=((1.0)*x6787);
IkReal x6793=(cj15*x6792);
evalcond[0]=((((-1.0)*r22*x6791))+(((-1.0)*r20*x6793))+((r21*x6789)));
evalcond[1]=(((r00*x6790))+(((-1.0)*r01*sj15*x6791))+(((-1.0)*r02*x6792)));
evalcond[2]=((((-1.0)*r11*sj15*x6791))+((r10*x6790))+(((-1.0)*r12*x6792)));
evalcond[3]=((((-1.0)*r10*x6793))+((r11*x6789))+cj10+(((-1.0)*r12*x6791)));
evalcond[4]=((1.0)+(((-1.0)*r21*sj15*x6791))+((r20*x6790))+(((-1.0)*r22*x6792)));
evalcond[5]=((((-1.0)*r00*x6793))+(((-1.0)*sj10))+((r01*x6789))+(((-1.0)*r02*x6791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x6794=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x6794.valid){
continue;
}
CheckValue<IkReal> x6795 = IKatan2WithCheck(IkReal((((cj15*r00))+(((-1.0)*r01*sj15)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6795.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6794.value)))+(x6795.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6796=IKsin(j14);
IkReal x6797=IKcos(j14);
IkReal x6798=(sj15*x6796);
IkReal x6799=(cj15*x6797);
IkReal x6800=((1.0)*x6797);
IkReal x6801=((1.0)*x6796);
IkReal x6802=(cj15*x6801);
evalcond[0]=(((r21*x6798))+(((-1.0)*r22*x6800))+(((-1.0)*r20*x6802)));
evalcond[1]=(((r00*x6799))+(((-1.0)*r02*x6801))+(((-1.0)*r01*sj15*x6800)));
evalcond[2]=((((-1.0)*r12*x6801))+(((-1.0)*r11*sj15*x6800))+((r10*x6799)));
evalcond[3]=((((-1.0)*r12*x6800))+cj10+(((-1.0)*r10*x6802))+((r11*x6798)));
evalcond[4]=((1.0)+(((-1.0)*r22*x6801))+((r20*x6799))+(((-1.0)*r21*sj15*x6800)));
evalcond[5]=((((-1.0)*r02*x6800))+((r01*x6798))+(((-1.0)*sj10))+(((-1.0)*r00*x6802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-3.67051685094268)*py))+(((-1.9337986785623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.67051685094268)*px))+(((1.9337986785623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))))+IKsqr(((((-3.67051685094268)*px))+(((1.9337986785623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))), ((((-3.67051685094268)*px))+(((1.9337986785623)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x6803=IKcos(j10);
IkReal x6804=IKsin(j10);
evalcond[0]=((((-0.21325)*x6803))+(((-1.0)*px))+(((-0.11235)*x6804)));
evalcond[1]=((((-0.21325)*x6804))+(((-1.0)*py))+(((0.11235)*x6803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x6805=((1.0)*cj15);
IkReal x6806=((((-1.0)*r01*x6805))+(((-1.0)*r00*sj15)));
j14eval[0]=x6806;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x6805))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x6806);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x6807=cj15*cj15;
IkReal x6808=(r01*r21);
IkReal x6809=((1.0)*cj15*sj15);
IkReal x6810=(((r00*r20*x6807))+x6808+((r02*r22))+(((-1.0)*r00*r21*x6809))+(((-1.0)*x6807*x6808))+(((-1.0)*r01*r20*x6809)));
j14eval[0]=x6810;
j14eval[1]=IKsign(x6810);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x6811=cj15*cj15;
IkReal x6812=(r21*sj15);
IkReal x6813=(r11*r21);
IkReal x6814=((1.0)*cj15);
IkReal x6815=((((-1.0)*r10*x6812*x6814))+(((-1.0)*x6811*x6813))+((r10*r20*x6811))+(((-1.0)*r11*r20*sj15*x6814))+((r12*r22))+x6813);
j14eval[0]=x6815;
j14eval[1]=((IKabs((((sj10*x6812))+(((-1.0)*r20*sj10*x6814)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x6815);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6816=cj15*cj15;
IkReal x6817=(r21*sj15);
IkReal x6818=((1.0)*cj15);
IkReal x6819=(r11*r21);
CheckValue<IkReal> x6820=IKPowWithIntegerCheck(IKsign((((r10*r20*x6816))+(((-1.0)*r11*r20*sj15*x6818))+(((-1.0)*r10*x6817*x6818))+((r12*r22))+(((-1.0)*x6816*x6819))+x6819)),-1);
if(!x6820.valid){
continue;
}
CheckValue<IkReal> x6821 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((sj10*x6817))+(((-1.0)*r20*sj10*x6818)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6821.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6820.value)))+(x6821.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6822=IKsin(j14);
IkReal x6823=IKcos(j14);
IkReal x6824=(sj15*x6822);
IkReal x6825=((1.0)*x6823);
IkReal x6826=((1.0)*x6822);
IkReal x6827=(cj15*x6823);
IkReal x6828=(cj15*x6826);
evalcond[0]=(((r21*x6824))+(((-1.0)*r22*x6825))+(((-1.0)*r20*x6828)));
evalcond[1]=(((r20*x6827))+(((-1.0)*r22*x6826))+(((-1.0)*r21*sj15*x6825)));
evalcond[2]=((((-1.0)*r12*x6825))+(((-1.0)*r10*x6828))+cj10+((r11*x6824)));
evalcond[3]=(((r00*x6827))+(((-1.0)*r02*x6826))+(((-1.0)*r01*sj15*x6825))+cj10);
evalcond[4]=(((r10*x6827))+(((-1.0)*r12*x6826))+sj10+(((-1.0)*r11*sj15*x6825)));
evalcond[5]=((((-1.0)*r02*x6825))+((r01*x6824))+(((-1.0)*r00*x6828))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6829=cj15*cj15;
IkReal x6830=(r01*r21);
IkReal x6831=((1.0)*cj15*sj15);
CheckValue<IkReal> x6832 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6832.valid){
continue;
}
CheckValue<IkReal> x6833=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6829*x6830))+x6830+((r02*r22))+((r00*r20*x6829))+(((-1.0)*r01*r20*x6831))+(((-1.0)*r00*r21*x6831)))),-1);
if(!x6833.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6832.value)+(((1.5707963267949)*(x6833.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6834=IKsin(j14);
IkReal x6835=IKcos(j14);
IkReal x6836=(sj15*x6834);
IkReal x6837=((1.0)*x6835);
IkReal x6838=((1.0)*x6834);
IkReal x6839=(cj15*x6835);
IkReal x6840=(cj15*x6838);
evalcond[0]=((((-1.0)*r20*x6840))+((r21*x6836))+(((-1.0)*r22*x6837)));
evalcond[1]=(((r20*x6839))+(((-1.0)*r22*x6838))+(((-1.0)*r21*sj15*x6837)));
evalcond[2]=((((-1.0)*r12*x6837))+((r11*x6836))+cj10+(((-1.0)*r10*x6840)));
evalcond[3]=((((-1.0)*r02*x6838))+((r00*x6839))+(((-1.0)*r01*sj15*x6837))+cj10);
evalcond[4]=((((-1.0)*r12*x6838))+((r10*x6839))+sj10+(((-1.0)*r11*sj15*x6837)));
evalcond[5]=((((-1.0)*r00*x6840))+(((-1.0)*r02*x6837))+((r01*x6836))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6841=((1.0)*cj15);
CheckValue<IkReal> x6842 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x6841)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6842.valid){
continue;
}
CheckValue<IkReal> x6843=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6841))+(((-1.0)*r00*sj15)))),-1);
if(!x6843.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6842.value)+(((1.5707963267949)*(x6843.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6844=IKsin(j14);
IkReal x6845=IKcos(j14);
IkReal x6846=(sj15*x6844);
IkReal x6847=((1.0)*x6845);
IkReal x6848=((1.0)*x6844);
IkReal x6849=(cj15*x6845);
IkReal x6850=(cj15*x6848);
evalcond[0]=(((r21*x6846))+(((-1.0)*r22*x6847))+(((-1.0)*r20*x6850)));
evalcond[1]=((((-1.0)*r22*x6848))+(((-1.0)*r21*sj15*x6847))+((r20*x6849)));
evalcond[2]=(((r11*x6846))+(((-1.0)*r10*x6850))+cj10+(((-1.0)*r12*x6847)));
evalcond[3]=((((-1.0)*r01*sj15*x6847))+cj10+(((-1.0)*r02*x6848))+((r00*x6849)));
evalcond[4]=((((-1.0)*r11*sj15*x6847))+sj10+(((-1.0)*r12*x6848))+((r10*x6849)));
evalcond[5]=((((-1.0)*r00*x6850))+(((-1.0)*sj10))+(((-1.0)*r02*x6847))+((r01*x6846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs((((cj15*r11))+((r10*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*r01))+((r00*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj15*r11))+((r10*sj15))))+IKsqr((((cj15*r01))+((r00*sj15))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((cj15*r11))+((r10*sj15))), (((cj15*r01))+((r00*sj15))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x6851=IKsin(j10);
IkReal x6852=IKcos(j10);
IkReal x6853=((1.0)*cj15);
IkReal x6854=((0.08535)*sj15);
IkReal x6855=((1.0)*sj15);
IkReal x6856=((0.08535)*cj15);
evalcond[0]=((((-1.0)*r00*x6855))+(((-1.0)*r01*x6853))+x6852);
evalcond[1]=((((-1.0)*r10*x6855))+(((-1.0)*r11*x6853))+x6851);
evalcond[2]=((((-1.0)*r00*x6854))+(((-1.0)*px))+(((-1.0)*r01*x6856))+(((-0.11235)*x6851)));
evalcond[3]=((((-1.0)*r10*x6854))+(((-1.0)*r11*x6856))+(((-1.0)*py))+(((0.11235)*x6852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x6857=((1.0)*sj15);
IkReal x6858=((((-1.0)*r10*x6857))+(((-1.0)*cj15*r11)));
j14eval[0]=x6858;
j14eval[1]=IKsign(x6858);
j14eval[2]=((IKabs(r02))+(IKabs((((cj15*r00))+(((-1.0)*r01*x6857))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x6859=((1.0)*cj15);
IkReal x6860=((((-1.0)*r01*x6859))+(((-1.0)*r00*sj15)));
j14eval[0]=x6860;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x6859))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x6860);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x6861=r21*r21;
IkReal x6862=cj15*cj15;
IkReal x6863=(cj15*r20);
IkReal x6864=(r21*sj15);
IkReal x6865=((((2.0)*x6863*x6864))+(((-1.0)*x6862*(r20*r20)))+(((-1.0)*x6861))+(((-1.0)*(r22*r22)))+((x6861*x6862)));
j14eval[0]=x6865;
j14eval[1]=IKsign(x6865);
j14eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x6863))+x6864))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6866=r21*r21;
IkReal x6867=cj15*cj15;
IkReal x6868=(cj15*r20);
IkReal x6869=(r21*sj15);
CheckValue<IkReal> x6870=IKPowWithIntegerCheck(IKsign((((x6866*x6867))+(((-1.0)*x6867*(r20*r20)))+(((2.0)*x6868*x6869))+(((-1.0)*x6866))+(((-1.0)*(r22*r22))))),-1);
if(!x6870.valid){
continue;
}
CheckValue<IkReal> x6871 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x6868))+x6869)),IKFAST_ATAN2_MAGTHRESH);
if(!x6871.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6870.value)))+(x6871.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6872=IKsin(j14);
IkReal x6873=IKcos(j14);
IkReal x6874=(sj15*x6872);
IkReal x6875=(cj15*x6873);
IkReal x6876=((1.0)*x6873);
IkReal x6877=((1.0)*x6872);
IkReal x6878=(cj15*x6877);
evalcond[0]=((((-1.0)*r20*x6878))+((r21*x6874))+(((-1.0)*r22*x6876)));
evalcond[1]=((((-1.0)*r01*sj15*x6876))+(((-1.0)*r02*x6877))+((r00*x6875)));
evalcond[2]=((((-1.0)*r12*x6877))+((r10*x6875))+(((-1.0)*r11*sj15*x6876)));
evalcond[3]=(((r11*x6874))+cj10+(((-1.0)*r12*x6876))+(((-1.0)*r10*x6878)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x6877))+(((-1.0)*r21*sj15*x6876))+((r20*x6875)));
evalcond[5]=((((-1.0)*r00*x6878))+(((-1.0)*sj10))+(((-1.0)*r02*x6876))+((r01*x6874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6879=((1.0)*cj15);
CheckValue<IkReal> x6880 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x6879)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6880.valid){
continue;
}
CheckValue<IkReal> x6881=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6879))+(((-1.0)*r00*sj15)))),-1);
if(!x6881.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6880.value)+(((1.5707963267949)*(x6881.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6882=IKsin(j14);
IkReal x6883=IKcos(j14);
IkReal x6884=(sj15*x6882);
IkReal x6885=(cj15*x6883);
IkReal x6886=((1.0)*x6883);
IkReal x6887=((1.0)*x6882);
IkReal x6888=(cj15*x6887);
evalcond[0]=((((-1.0)*r20*x6888))+((r21*x6884))+(((-1.0)*r22*x6886)));
evalcond[1]=((((-1.0)*r02*x6887))+(((-1.0)*r01*sj15*x6886))+((r00*x6885)));
evalcond[2]=((((-1.0)*r11*sj15*x6886))+(((-1.0)*r12*x6887))+((r10*x6885)));
evalcond[3]=(((r11*x6884))+cj10+(((-1.0)*r12*x6886))+(((-1.0)*r10*x6888)));
evalcond[4]=((-1.0)+((r20*x6885))+(((-1.0)*r21*sj15*x6886))+(((-1.0)*r22*x6887)));
evalcond[5]=((((-1.0)*r02*x6886))+(((-1.0)*sj10))+((r01*x6884))+(((-1.0)*r00*x6888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6889=((1.0)*sj15);
CheckValue<IkReal> x6890 = IKatan2WithCheck(IkReal((((cj15*r00))+(((-1.0)*r01*x6889)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6890.valid){
continue;
}
CheckValue<IkReal> x6891=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj15*r11))+(((-1.0)*r10*x6889)))),-1);
if(!x6891.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6890.value)+(((1.5707963267949)*(x6891.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6892=IKsin(j14);
IkReal x6893=IKcos(j14);
IkReal x6894=(sj15*x6892);
IkReal x6895=(cj15*x6893);
IkReal x6896=((1.0)*x6893);
IkReal x6897=((1.0)*x6892);
IkReal x6898=(cj15*x6897);
evalcond[0]=((((-1.0)*r20*x6898))+((r21*x6894))+(((-1.0)*r22*x6896)));
evalcond[1]=((((-1.0)*r02*x6897))+(((-1.0)*r01*sj15*x6896))+((r00*x6895)));
evalcond[2]=(((r10*x6895))+(((-1.0)*r11*sj15*x6896))+(((-1.0)*r12*x6897)));
evalcond[3]=((((-1.0)*r10*x6898))+cj10+(((-1.0)*r12*x6896))+((r11*x6894)));
evalcond[4]=((-1.0)+(((-1.0)*r21*sj15*x6896))+(((-1.0)*r22*x6897))+((r20*x6895)));
evalcond[5]=((((-1.0)*sj10))+(((-1.0)*r02*x6896))+(((-1.0)*r00*x6898))+((r01*x6894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-1.9337986785623)*px))+(((3.67051685094268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.9337986785623)*py))+(((3.67051685094268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.9337986785623)*px))+(((3.67051685094268)*py))))+IKsqr(((((1.9337986785623)*py))+(((3.67051685094268)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.9337986785623)*px))+(((3.67051685094268)*py))), ((((1.9337986785623)*py))+(((3.67051685094268)*px))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x6899=IKcos(j10);
IkReal x6900=IKsin(j10);
evalcond[0]=((((-0.11235)*x6900))+(((-1.0)*px))+(((0.21325)*x6899)));
evalcond[1]=((((0.21325)*x6900))+(((0.11235)*x6899))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x6901=((1.0)*cj15);
IkReal x6902=((((-1.0)*r00*sj15))+(((-1.0)*r01*x6901)));
j14eval[0]=x6902;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x6901))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x6902);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x6903=((1.0)*cj15);
IkReal x6904=((((-1.0)*r11*x6903))+(((-1.0)*r10*sj15)));
j14eval[0]=x6904;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x6903))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x6904);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x6905=cj15*cj15;
IkReal x6906=(r11*r21);
IkReal x6907=(cj15*r20);
IkReal x6908=((1.0)*r21*sj15);
IkReal x6909=((((-1.0)*x6905*x6906))+((r12*r22))+(((-1.0)*r11*sj15*x6907))+((r10*r20*x6905))+(((-1.0)*cj15*r10*x6908))+x6906);
j14eval[0]=x6909;
j14eval[1]=IKsign(x6909);
j14eval[2]=((IKabs((((cj10*x6907))+(((-1.0)*cj10*x6908)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6910=cj15*cj15;
IkReal x6911=(cj15*r20);
IkReal x6912=(r11*r21);
IkReal x6913=((1.0)*r21*sj15);
CheckValue<IkReal> x6914=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6910*x6912))+((r12*r22))+((r10*r20*x6910))+(((-1.0)*r11*sj15*x6911))+x6912+(((-1.0)*cj15*r10*x6913)))),-1);
if(!x6914.valid){
continue;
}
CheckValue<IkReal> x6915 = IKatan2WithCheck(IkReal((((cj10*x6911))+(((-1.0)*cj10*x6913)))),IkReal((cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6915.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6914.value)))+(x6915.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6916=IKsin(j14);
IkReal x6917=IKcos(j14);
IkReal x6918=((1.0)*sj10);
IkReal x6919=(sj15*x6916);
IkReal x6920=((1.0)*x6917);
IkReal x6921=((1.0)*x6916);
IkReal x6922=(cj15*x6917);
IkReal x6923=(cj15*x6921);
evalcond[0]=((((-1.0)*r22*x6920))+((r21*x6919))+(((-1.0)*r20*x6923)));
evalcond[1]=(((r20*x6922))+(((-1.0)*r21*sj15*x6920))+(((-1.0)*r22*x6921)));
evalcond[2]=(cj10+((r11*x6919))+(((-1.0)*r12*x6920))+(((-1.0)*r10*x6923)));
evalcond[3]=((((-1.0)*r02*x6920))+(((-1.0)*x6918))+(((-1.0)*r00*x6923))+((r01*x6919)));
evalcond[4]=((((-1.0)*r02*x6921))+((r00*x6922))+(((-1.0)*cj10))+(((-1.0)*r01*sj15*x6920)));
evalcond[5]=((((-1.0)*r11*sj15*x6920))+((r10*x6922))+(((-1.0)*x6918))+(((-1.0)*r12*x6921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6924=((1.0)*cj15);
CheckValue<IkReal> x6925=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6924))+(((-1.0)*r10*sj15)))),-1);
if(!x6925.valid){
continue;
}
CheckValue<IkReal> x6926 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x6924))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6926.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6925.value)))+(x6926.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6927=IKsin(j14);
IkReal x6928=IKcos(j14);
IkReal x6929=((1.0)*sj10);
IkReal x6930=(sj15*x6927);
IkReal x6931=((1.0)*x6928);
IkReal x6932=((1.0)*x6927);
IkReal x6933=(cj15*x6928);
IkReal x6934=(cj15*x6932);
evalcond[0]=((((-1.0)*r22*x6931))+(((-1.0)*r20*x6934))+((r21*x6930)));
evalcond[1]=(((r20*x6933))+(((-1.0)*r21*sj15*x6931))+(((-1.0)*r22*x6932)));
evalcond[2]=((((-1.0)*r10*x6934))+cj10+((r11*x6930))+(((-1.0)*r12*x6931)));
evalcond[3]=((((-1.0)*r02*x6931))+((r01*x6930))+(((-1.0)*r00*x6934))+(((-1.0)*x6929)));
evalcond[4]=(((r00*x6933))+(((-1.0)*r02*x6932))+(((-1.0)*r01*sj15*x6931))+(((-1.0)*cj10)));
evalcond[5]=((((-1.0)*r11*sj15*x6931))+((r10*x6933))+(((-1.0)*r12*x6932))+(((-1.0)*x6929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6935=((1.0)*cj15);
CheckValue<IkReal> x6936=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6935))+(((-1.0)*r00*sj15)))),-1);
if(!x6936.valid){
continue;
}
CheckValue<IkReal> x6937 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x6935))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6937.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6936.value)))+(x6937.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6938=IKsin(j14);
IkReal x6939=IKcos(j14);
IkReal x6940=((1.0)*sj10);
IkReal x6941=(sj15*x6938);
IkReal x6942=((1.0)*x6939);
IkReal x6943=((1.0)*x6938);
IkReal x6944=(cj15*x6939);
IkReal x6945=(cj15*x6943);
evalcond[0]=((((-1.0)*r20*x6945))+(((-1.0)*r22*x6942))+((r21*x6941)));
evalcond[1]=((((-1.0)*r21*sj15*x6942))+((r20*x6944))+(((-1.0)*r22*x6943)));
evalcond[2]=((((-1.0)*r12*x6942))+cj10+(((-1.0)*r10*x6945))+((r11*x6941)));
evalcond[3]=((((-1.0)*x6940))+(((-1.0)*r02*x6942))+((r01*x6941))+(((-1.0)*r00*x6945)));
evalcond[4]=((((-1.0)*r01*sj15*x6942))+(((-1.0)*r02*x6943))+((r00*x6944))+(((-1.0)*cj10)));
evalcond[5]=(((r10*x6944))+(((-1.0)*r12*x6943))+(((-1.0)*r11*sj15*x6942))+(((-1.0)*x6940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-0.507498115261088)*px))+(((-2.06387083990023)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.06387083990023)*px))+(((0.507498115261088)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.507498115261088)*px))+(((-2.06387083990023)*py))))+IKsqr(((((-2.06387083990023)*px))+(((0.507498115261088)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-0.507498115261088)*px))+(((-2.06387083990023)*py))), ((((-2.06387083990023)*px))+(((0.507498115261088)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x6946=IKcos(j10);
IkReal x6947=IKsin(j10);
evalcond[0]=((((-1.0)*px))+(((-0.4569)*x6946))+(((-0.11235)*x6947)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*x6946))+(((-0.4569)*x6947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x6948=((1.0)*cj15);
IkReal x6949=((((-1.0)*r00*sj15))+(((-1.0)*r01*x6948)));
j14eval[0]=x6949;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x6948))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x6949);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x6950=cj15*cj15;
IkReal x6951=(r01*r21);
IkReal x6952=((1.0)*cj15*sj15);
IkReal x6953=((((-1.0)*x6950*x6951))+((r00*r20*x6950))+(((-1.0)*r01*r20*x6952))+x6951+((r02*r22))+(((-1.0)*r00*r21*x6952)));
j14eval[0]=x6953;
j14eval[1]=IKsign(x6953);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x6954=cj15*cj15;
IkReal x6955=(r21*sj15);
IkReal x6956=(r11*r21);
IkReal x6957=((1.0)*cj15);
IkReal x6958=(((r12*r22))+(((-1.0)*x6954*x6956))+(((-1.0)*r11*r20*sj15*x6957))+(((-1.0)*r10*x6955*x6957))+x6956+((r10*r20*x6954)));
j14eval[0]=x6958;
j14eval[1]=((IKabs((((sj10*x6955))+(((-1.0)*r20*sj10*x6957)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x6958);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6959=cj15*cj15;
IkReal x6960=(r21*sj15);
IkReal x6961=((1.0)*cj15);
IkReal x6962=(r11*r21);
CheckValue<IkReal> x6963 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((sj10*x6960))+(((-1.0)*r20*sj10*x6961)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6963.valid){
continue;
}
CheckValue<IkReal> x6964=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6960*x6961))+((r12*r22))+(((-1.0)*r11*r20*sj15*x6961))+(((-1.0)*x6959*x6962))+x6962+((r10*r20*x6959)))),-1);
if(!x6964.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6963.value)+(((1.5707963267949)*(x6964.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6965=IKsin(j14);
IkReal x6966=IKcos(j14);
IkReal x6967=(sj15*x6965);
IkReal x6968=((1.0)*x6966);
IkReal x6969=((1.0)*x6965);
IkReal x6970=(cj15*x6966);
IkReal x6971=(cj15*x6969);
evalcond[0]=(((r21*x6967))+(((-1.0)*r20*x6971))+(((-1.0)*r22*x6968)));
evalcond[1]=((((-1.0)*r22*x6969))+((r20*x6970))+(((-1.0)*r21*sj15*x6968)));
evalcond[2]=((((-1.0)*r10*x6971))+(((-1.0)*r12*x6968))+cj10+((r11*x6967)));
evalcond[3]=((((-1.0)*r02*x6969))+((r00*x6970))+(((-1.0)*r01*sj15*x6968))+cj10);
evalcond[4]=((((-1.0)*r12*x6969))+sj10+(((-1.0)*r11*sj15*x6968))+((r10*x6970)));
evalcond[5]=((((-1.0)*r02*x6968))+((r01*x6967))+(((-1.0)*sj10))+(((-1.0)*r00*x6971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6972=cj15*cj15;
IkReal x6973=(r01*r21);
IkReal x6974=((1.0)*cj15*sj15);
CheckValue<IkReal> x6975 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6975.valid){
continue;
}
CheckValue<IkReal> x6976=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6972*x6973))+(((-1.0)*r01*r20*x6974))+((r00*r20*x6972))+x6973+((r02*r22))+(((-1.0)*r00*r21*x6974)))),-1);
if(!x6976.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6975.value)+(((1.5707963267949)*(x6976.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6977=IKsin(j14);
IkReal x6978=IKcos(j14);
IkReal x6979=(sj15*x6977);
IkReal x6980=((1.0)*x6978);
IkReal x6981=((1.0)*x6977);
IkReal x6982=(cj15*x6978);
IkReal x6983=(cj15*x6981);
evalcond[0]=((((-1.0)*r20*x6983))+((r21*x6979))+(((-1.0)*r22*x6980)));
evalcond[1]=(((r20*x6982))+(((-1.0)*r22*x6981))+(((-1.0)*r21*sj15*x6980)));
evalcond[2]=((((-1.0)*r10*x6983))+(((-1.0)*r12*x6980))+cj10+((r11*x6979)));
evalcond[3]=(cj10+((r00*x6982))+(((-1.0)*r01*sj15*x6980))+(((-1.0)*r02*x6981)));
evalcond[4]=(((r10*x6982))+(((-1.0)*r11*sj15*x6980))+(((-1.0)*r12*x6981))+sj10);
evalcond[5]=(((r01*x6979))+(((-1.0)*sj10))+(((-1.0)*r00*x6983))+(((-1.0)*r02*x6980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6984=((1.0)*cj15);
CheckValue<IkReal> x6985=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x6984)))),-1);
if(!x6985.valid){
continue;
}
CheckValue<IkReal> x6986 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x6984))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6986.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6985.value)))+(x6986.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6987=IKsin(j14);
IkReal x6988=IKcos(j14);
IkReal x6989=(sj15*x6987);
IkReal x6990=((1.0)*x6988);
IkReal x6991=((1.0)*x6987);
IkReal x6992=(cj15*x6988);
IkReal x6993=(cj15*x6991);
evalcond[0]=((((-1.0)*r22*x6990))+((r21*x6989))+(((-1.0)*r20*x6993)));
evalcond[1]=(((r20*x6992))+(((-1.0)*r22*x6991))+(((-1.0)*r21*sj15*x6990)));
evalcond[2]=((((-1.0)*r12*x6990))+(((-1.0)*r10*x6993))+cj10+((r11*x6989)));
evalcond[3]=(cj10+((r00*x6992))+(((-1.0)*r02*x6991))+(((-1.0)*r01*sj15*x6990)));
evalcond[4]=((((-1.0)*r12*x6991))+((r10*x6992))+sj10+(((-1.0)*r11*sj15*x6990)));
evalcond[5]=((((-1.0)*r00*x6993))+(((-1.0)*sj10))+((r01*x6989))+(((-1.0)*r02*x6990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-2.24409186529617)*py))+(((-8.29354345611924)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.24409186529617)*px))+(((8.29354345611924)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.24409186529617)*py))+(((-8.29354345611924)*px))))+IKsqr(((((-2.24409186529617)*px))+(((8.29354345611924)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-2.24409186529617)*py))+(((-8.29354345611924)*px))), ((((-2.24409186529617)*px))+(((8.29354345611924)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x6994=IKcos(j10);
IkReal x6995=IKsin(j10);
evalcond[0]=((((-0.11235)*x6995))+(((-0.0304)*x6994))+(((-1.0)*px)));
evalcond[1]=((((-0.0304)*x6995))+(((0.11235)*x6994))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x6996=((1.0)*cj15);
IkReal x6997=((((-1.0)*r00*sj15))+(((-1.0)*r01*x6996)));
j14eval[0]=x6997;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x6996))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x6997);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x6998=((1.0)*cj15);
IkReal x6999=((((-1.0)*r11*x6998))+(((-1.0)*r10*sj15)));
j14eval[0]=x6999;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x6998))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x6999);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x7000=cj15*cj15;
IkReal x7001=(r11*r21);
IkReal x7002=(cj15*r20);
IkReal x7003=((1.0)*r21*sj15);
IkReal x7004=(x7001+(((-1.0)*cj15*r10*x7003))+((r10*r20*x7000))+((r12*r22))+(((-1.0)*r11*sj15*x7002))+(((-1.0)*x7000*x7001)));
j14eval[0]=x7004;
j14eval[1]=IKsign(x7004);
j14eval[2]=((IKabs(((((-1.0)*cj10*x7003))+((cj10*x7002)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7005=cj15*cj15;
IkReal x7006=(cj15*r20);
IkReal x7007=(r11*r21);
IkReal x7008=((1.0)*r21*sj15);
CheckValue<IkReal> x7009 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*x7008))+((cj10*x7006)))),IkReal((cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7009.valid){
continue;
}
CheckValue<IkReal> x7010=IKPowWithIntegerCheck(IKsign((x7007+(((-1.0)*cj15*r10*x7008))+((r10*r20*x7005))+(((-1.0)*x7005*x7007))+((r12*r22))+(((-1.0)*r11*sj15*x7006)))),-1);
if(!x7010.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7009.value)+(((1.5707963267949)*(x7010.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7011=IKsin(j14);
IkReal x7012=IKcos(j14);
IkReal x7013=((1.0)*sj10);
IkReal x7014=(sj15*x7011);
IkReal x7015=((1.0)*x7012);
IkReal x7016=((1.0)*x7011);
IkReal x7017=(cj15*x7012);
IkReal x7018=(cj15*x7016);
evalcond[0]=((((-1.0)*r20*x7018))+(((-1.0)*r22*x7015))+((r21*x7014)));
evalcond[1]=((((-1.0)*r22*x7016))+(((-1.0)*r21*sj15*x7015))+((r20*x7017)));
evalcond[2]=(cj10+(((-1.0)*r10*x7018))+(((-1.0)*r12*x7015))+((r11*x7014)));
evalcond[3]=((((-1.0)*r00*x7018))+(((-1.0)*x7013))+((r01*x7014))+(((-1.0)*r02*x7015)));
evalcond[4]=((((-1.0)*r01*sj15*x7015))+((r00*x7017))+(((-1.0)*cj10))+(((-1.0)*r02*x7016)));
evalcond[5]=((((-1.0)*r11*sj15*x7015))+(((-1.0)*x7013))+(((-1.0)*r12*x7016))+((r10*x7017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7019=((1.0)*cj15);
CheckValue<IkReal> x7020=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7019))+(((-1.0)*r10*sj15)))),-1);
if(!x7020.valid){
continue;
}
CheckValue<IkReal> x7021 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x7019))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7021.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7020.value)))+(x7021.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7022=IKsin(j14);
IkReal x7023=IKcos(j14);
IkReal x7024=((1.0)*sj10);
IkReal x7025=(sj15*x7022);
IkReal x7026=((1.0)*x7023);
IkReal x7027=((1.0)*x7022);
IkReal x7028=(cj15*x7023);
IkReal x7029=(cj15*x7027);
evalcond[0]=((((-1.0)*r22*x7026))+(((-1.0)*r20*x7029))+((r21*x7025)));
evalcond[1]=((((-1.0)*r22*x7027))+((r20*x7028))+(((-1.0)*r21*sj15*x7026)));
evalcond[2]=((((-1.0)*r12*x7026))+(((-1.0)*r10*x7029))+((r11*x7025))+cj10);
evalcond[3]=(((r01*x7025))+(((-1.0)*r02*x7026))+(((-1.0)*r00*x7029))+(((-1.0)*x7024)));
evalcond[4]=((((-1.0)*r01*sj15*x7026))+((r00*x7028))+(((-1.0)*r02*x7027))+(((-1.0)*cj10)));
evalcond[5]=((((-1.0)*r12*x7027))+(((-1.0)*r11*sj15*x7026))+((r10*x7028))+(((-1.0)*x7024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7030=((1.0)*cj15);
CheckValue<IkReal> x7031 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x7030))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7031.valid){
continue;
}
CheckValue<IkReal> x7032=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7030))+(((-1.0)*r00*sj15)))),-1);
if(!x7032.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7031.value)+(((1.5707963267949)*(x7032.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7033=IKsin(j14);
IkReal x7034=IKcos(j14);
IkReal x7035=((1.0)*sj10);
IkReal x7036=(sj15*x7033);
IkReal x7037=((1.0)*x7034);
IkReal x7038=((1.0)*x7033);
IkReal x7039=(cj15*x7034);
IkReal x7040=(cj15*x7038);
evalcond[0]=((((-1.0)*r22*x7037))+((r21*x7036))+(((-1.0)*r20*x7040)));
evalcond[1]=((((-1.0)*r22*x7038))+(((-1.0)*r21*sj15*x7037))+((r20*x7039)));
evalcond[2]=((((-1.0)*r12*x7037))+((r11*x7036))+cj10+(((-1.0)*r10*x7040)));
evalcond[3]=(((r01*x7036))+(((-1.0)*r02*x7037))+(((-1.0)*r00*x7040))+(((-1.0)*x7035)));
evalcond[4]=((((-1.0)*r01*sj15*x7037))+(((-1.0)*r02*x7038))+((r00*x7039))+(((-1.0)*cj10)));
evalcond[5]=((((-1.0)*r11*sj15*x7037))+(((-1.0)*r12*x7038))+((r10*x7039))+(((-1.0)*x7035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs((((cj15*r11))+((r10*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*r01))+((r00*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj15*r11))+((r10*sj15))))+IKsqr((((cj15*r01))+((r00*sj15))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((cj15*r11))+((r10*sj15))), (((cj15*r01))+((r00*sj15))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x7041=IKsin(j10);
IkReal x7042=IKcos(j10);
IkReal x7043=((1.0)*cj15);
IkReal x7044=((0.08535)*sj15);
IkReal x7045=((1.0)*sj15);
IkReal x7046=((0.08535)*cj15);
evalcond[0]=(x7042+(((-1.0)*r00*x7045))+(((-1.0)*r01*x7043)));
evalcond[1]=(x7041+(((-1.0)*r11*x7043))+(((-1.0)*r10*x7045)));
evalcond[2]=((((-0.11235)*x7041))+(((-1.0)*r00*x7044))+(((-1.0)*r01*x7046))+(((-1.0)*px)));
evalcond[3]=((((-1.0)*r11*x7046))+(((0.11235)*x7042))+(((-1.0)*py))+(((-1.0)*r10*x7044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x7047=((1.0)*sj15);
IkReal x7048=((((-1.0)*cj15*r11))+(((-1.0)*r10*x7047)));
j14eval[0]=x7048;
j14eval[1]=IKsign(x7048);
j14eval[2]=((IKabs(r02))+(IKabs((((cj15*r00))+(((-1.0)*r01*x7047))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x7049=((1.0)*cj15);
IkReal x7050=((((-1.0)*r01*x7049))+(((-1.0)*r00*sj15)));
j14eval[0]=x7050;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x7049))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x7050);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x7051=r21*r21;
IkReal x7052=cj15*cj15;
IkReal x7053=(cj15*r20);
IkReal x7054=(r21*sj15);
IkReal x7055=(((x7051*x7052))+(((2.0)*x7053*x7054))+(((-1.0)*x7051))+(((-1.0)*(r22*r22)))+(((-1.0)*x7052*(r20*r20))));
j14eval[0]=x7055;
j14eval[1]=IKsign(x7055);
j14eval[2]=((IKabs((x7054+(((-1.0)*x7053)))))+(IKabs(r22)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7056=r21*r21;
IkReal x7057=cj15*cj15;
IkReal x7058=(cj15*r20);
IkReal x7059=(r21*sj15);
CheckValue<IkReal> x7060 = IKatan2WithCheck(IkReal(r22),IkReal((x7059+(((-1.0)*x7058)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7060.valid){
continue;
}
CheckValue<IkReal> x7061=IKPowWithIntegerCheck(IKsign((((x7056*x7057))+(((2.0)*x7058*x7059))+(((-1.0)*x7056))+(((-1.0)*(r22*r22)))+(((-1.0)*x7057*(r20*r20))))),-1);
if(!x7061.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7060.value)+(((1.5707963267949)*(x7061.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7062=IKsin(j14);
IkReal x7063=IKcos(j14);
IkReal x7064=(sj15*x7062);
IkReal x7065=(cj15*x7063);
IkReal x7066=((1.0)*x7063);
IkReal x7067=((1.0)*x7062);
IkReal x7068=(cj15*x7067);
evalcond[0]=((((-1.0)*r20*x7068))+((r21*x7064))+(((-1.0)*r22*x7066)));
evalcond[1]=((((-1.0)*r01*sj15*x7066))+((r00*x7065))+(((-1.0)*r02*x7067)));
evalcond[2]=((((-1.0)*r11*sj15*x7066))+(((-1.0)*r12*x7067))+((r10*x7065)));
evalcond[3]=((((-1.0)*r12*x7066))+cj10+(((-1.0)*r10*x7068))+((r11*x7064)));
evalcond[4]=((-1.0)+(((-1.0)*r21*sj15*x7066))+((r20*x7065))+(((-1.0)*r22*x7067)));
evalcond[5]=((((-1.0)*r00*x7068))+((r01*x7064))+(((-1.0)*r02*x7066))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7069=((1.0)*cj15);
CheckValue<IkReal> x7070=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7069))+(((-1.0)*r00*sj15)))),-1);
if(!x7070.valid){
continue;
}
CheckValue<IkReal> x7071 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x7069))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7071.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7070.value)))+(x7071.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7072=IKsin(j14);
IkReal x7073=IKcos(j14);
IkReal x7074=(sj15*x7072);
IkReal x7075=(cj15*x7073);
IkReal x7076=((1.0)*x7073);
IkReal x7077=((1.0)*x7072);
IkReal x7078=(cj15*x7077);
evalcond[0]=((((-1.0)*r20*x7078))+((r21*x7074))+(((-1.0)*r22*x7076)));
evalcond[1]=((((-1.0)*r01*sj15*x7076))+((r00*x7075))+(((-1.0)*r02*x7077)));
evalcond[2]=((((-1.0)*r12*x7077))+((r10*x7075))+(((-1.0)*r11*sj15*x7076)));
evalcond[3]=(((r11*x7074))+cj10+(((-1.0)*r12*x7076))+(((-1.0)*r10*x7078)));
evalcond[4]=((-1.0)+(((-1.0)*r21*sj15*x7076))+((r20*x7075))+(((-1.0)*r22*x7077)));
evalcond[5]=((((-1.0)*r00*x7078))+((r01*x7074))+(((-1.0)*r02*x7076))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7079=((1.0)*sj15);
CheckValue<IkReal> x7080=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7079))+(((-1.0)*cj15*r11)))),-1);
if(!x7080.valid){
continue;
}
CheckValue<IkReal> x7081 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7079))+((cj15*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7081.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7080.value)))+(x7081.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7082=IKsin(j14);
IkReal x7083=IKcos(j14);
IkReal x7084=(sj15*x7082);
IkReal x7085=(cj15*x7083);
IkReal x7086=((1.0)*x7083);
IkReal x7087=((1.0)*x7082);
IkReal x7088=(cj15*x7087);
evalcond[0]=(((r21*x7084))+(((-1.0)*r20*x7088))+(((-1.0)*r22*x7086)));
evalcond[1]=(((r00*x7085))+(((-1.0)*r01*sj15*x7086))+(((-1.0)*r02*x7087)));
evalcond[2]=((((-1.0)*r11*sj15*x7086))+(((-1.0)*r12*x7087))+((r10*x7085)));
evalcond[3]=(((r11*x7084))+(((-1.0)*r10*x7088))+cj10+(((-1.0)*r12*x7086)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7087))+(((-1.0)*r21*sj15*x7086))+((r20*x7085)));
evalcond[5]=(((r01*x7084))+(((-1.0)*r00*x7088))+(((-1.0)*sj10))+(((-1.0)*r02*x7086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-1.9337986785623)*px))+(((3.67051685094268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.9337986785623)*py))+(((3.67051685094268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.9337986785623)*px))+(((3.67051685094268)*py))))+IKsqr(((((1.9337986785623)*py))+(((3.67051685094268)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.9337986785623)*px))+(((3.67051685094268)*py))), ((((1.9337986785623)*py))+(((3.67051685094268)*px))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x7089=IKcos(j10);
IkReal x7090=IKsin(j10);
evalcond[0]=((((-0.11235)*x7090))+(((-1.0)*px))+(((0.21325)*x7089)));
evalcond[1]=((((0.11235)*x7089))+(((-1.0)*py))+(((0.21325)*x7090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x7091=((1.0)*cj15);
IkReal x7092=((((-1.0)*r01*x7091))+(((-1.0)*r00*sj15)));
j14eval[0]=x7092;
j14eval[1]=((IKabs((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x7091)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x7092);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x7093=((1.0)*cj15);
IkReal x7094=((((-1.0)*r11*x7093))+(((-1.0)*r10*sj15)));
j14eval[0]=x7094;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x7093))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x7094);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x7095=cj15*cj15;
IkReal x7096=(r11*r21);
IkReal x7097=(cj15*r20);
IkReal x7098=((1.0)*r21*sj15);
IkReal x7099=(x7096+(((-1.0)*r11*sj15*x7097))+((r12*r22))+((r10*r20*x7095))+(((-1.0)*x7095*x7096))+(((-1.0)*cj15*r10*x7098)));
j14eval[0]=x7099;
j14eval[1]=IKsign(x7099);
j14eval[2]=((IKabs(((((-1.0)*cj10*x7098))+((cj10*x7097)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7100=cj15*cj15;
IkReal x7101=(cj15*r20);
IkReal x7102=(r11*r21);
IkReal x7103=((1.0)*r21*sj15);
CheckValue<IkReal> x7104=IKPowWithIntegerCheck(IKsign((x7102+(((-1.0)*r11*sj15*x7101))+(((-1.0)*x7100*x7102))+((r12*r22))+((r10*r20*x7100))+(((-1.0)*cj15*r10*x7103)))),-1);
if(!x7104.valid){
continue;
}
CheckValue<IkReal> x7105 = IKatan2WithCheck(IkReal((((cj10*x7101))+(((-1.0)*cj10*x7103)))),IkReal((cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7105.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7104.value)))+(x7105.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7106=IKsin(j14);
IkReal x7107=IKcos(j14);
IkReal x7108=((1.0)*sj10);
IkReal x7109=(sj15*x7106);
IkReal x7110=((1.0)*x7107);
IkReal x7111=((1.0)*x7106);
IkReal x7112=(cj15*x7107);
IkReal x7113=(cj15*x7111);
evalcond[0]=(((r21*x7109))+(((-1.0)*r20*x7113))+(((-1.0)*r22*x7110)));
evalcond[1]=((((-1.0)*r22*x7111))+((r20*x7112))+(((-1.0)*r21*sj15*x7110)));
evalcond[2]=((((-1.0)*r10*x7113))+(((-1.0)*r12*x7110))+cj10+((r11*x7109)));
evalcond[3]=((((-1.0)*x7108))+(((-1.0)*r02*x7110))+(((-1.0)*r00*x7113))+((r01*x7109)));
evalcond[4]=((((-1.0)*r01*sj15*x7110))+(((-1.0)*r02*x7111))+(((-1.0)*cj10))+((r00*x7112)));
evalcond[5]=((((-1.0)*x7108))+(((-1.0)*r12*x7111))+((r10*x7112))+(((-1.0)*r11*sj15*x7110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7114=((1.0)*cj15);
CheckValue<IkReal> x7115 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x7114))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7115.valid){
continue;
}
CheckValue<IkReal> x7116=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7114))+(((-1.0)*r10*sj15)))),-1);
if(!x7116.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7115.value)+(((1.5707963267949)*(x7116.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7117=IKsin(j14);
IkReal x7118=IKcos(j14);
IkReal x7119=((1.0)*sj10);
IkReal x7120=(sj15*x7117);
IkReal x7121=((1.0)*x7118);
IkReal x7122=((1.0)*x7117);
IkReal x7123=(cj15*x7118);
IkReal x7124=(cj15*x7122);
evalcond[0]=((((-1.0)*r22*x7121))+(((-1.0)*r20*x7124))+((r21*x7120)));
evalcond[1]=(((r20*x7123))+(((-1.0)*r21*sj15*x7121))+(((-1.0)*r22*x7122)));
evalcond[2]=(cj10+(((-1.0)*r12*x7121))+((r11*x7120))+(((-1.0)*r10*x7124)));
evalcond[3]=(((r01*x7120))+(((-1.0)*r00*x7124))+(((-1.0)*r02*x7121))+(((-1.0)*x7119)));
evalcond[4]=(((r00*x7123))+(((-1.0)*r01*sj15*x7121))+(((-1.0)*r02*x7122))+(((-1.0)*cj10)));
evalcond[5]=((((-1.0)*r11*sj15*x7121))+((r10*x7123))+(((-1.0)*r12*x7122))+(((-1.0)*x7119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7125=((1.0)*cj15);
CheckValue<IkReal> x7126 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x7125))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7126.valid){
continue;
}
CheckValue<IkReal> x7127=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7125))+(((-1.0)*r00*sj15)))),-1);
if(!x7127.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7126.value)+(((1.5707963267949)*(x7127.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7128=IKsin(j14);
IkReal x7129=IKcos(j14);
IkReal x7130=((1.0)*sj10);
IkReal x7131=(sj15*x7128);
IkReal x7132=((1.0)*x7129);
IkReal x7133=((1.0)*x7128);
IkReal x7134=(cj15*x7129);
IkReal x7135=(cj15*x7133);
evalcond[0]=(((r21*x7131))+(((-1.0)*r22*x7132))+(((-1.0)*r20*x7135)));
evalcond[1]=((((-1.0)*r21*sj15*x7132))+(((-1.0)*r22*x7133))+((r20*x7134)));
evalcond[2]=(((r11*x7131))+(((-1.0)*r10*x7135))+(((-1.0)*r12*x7132))+cj10);
evalcond[3]=((((-1.0)*r00*x7135))+((r01*x7131))+(((-1.0)*x7130))+(((-1.0)*r02*x7132)));
evalcond[4]=((((-1.0)*r01*sj15*x7132))+((r00*x7134))+(((-1.0)*cj10))+(((-1.0)*r02*x7133)));
evalcond[5]=((((-1.0)*r12*x7133))+((r10*x7134))+(((-1.0)*r11*sj15*x7132))+(((-1.0)*x7130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7136=((1.0)*cj15);
IkReal x7137=((1.0)*sj15);
if( IKabs(((((-1.0)*r10*x7137))+(((-1.0)*r11*x7136)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x7136))+(((-1.0)*r00*x7137)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x7137))+(((-1.0)*r11*x7136))))+IKsqr(((((-1.0)*r01*x7136))+(((-1.0)*r00*x7137))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r10*x7137))+(((-1.0)*r11*x7136))), ((((-1.0)*r01*x7136))+(((-1.0)*r00*x7137))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x7138=IKsin(j10);
IkReal x7139=IKcos(j10);
IkReal x7140=((1.0)*cj15);
IkReal x7141=((0.08535)*sj15);
IkReal x7142=((1.0)*sj15);
IkReal x7143=((0.08535)*cj15);
evalcond[0]=((((-1.0)*r01*x7140))+(((-1.0)*r00*x7142))+(((-1.0)*x7139)));
evalcond[1]=((((-1.0)*r11*x7140))+(((-1.0)*r10*x7142))+(((-1.0)*x7138)));
evalcond[2]=((((-0.11235)*x7138))+(((-1.0)*r01*x7143))+(((-1.0)*px))+(((-1.0)*r00*x7141)));
evalcond[3]=((((-1.0)*py))+(((-1.0)*r11*x7143))+(((0.11235)*x7139))+(((-1.0)*r10*x7141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x7144=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x7144;
j14eval[1]=((IKabs(r02))+(IKabs((((cj15*r00))+(((-1.0)*r01*sj15))))));
j14eval[2]=IKsign(x7144);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x7145=((1.0)*cj15);
IkReal x7146=((((-1.0)*r01*x7145))+(((-1.0)*r00*sj15)));
j14eval[0]=x7146;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x7145))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x7146);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x7147=cj15*cj15;
IkReal x7148=r21*r21;
IkReal x7149=(cj15*r20);
IkReal x7150=(r21*sj15);
IkReal x7151=(x7148+(r22*r22)+(((-1.0)*x7147*x7148))+(((-2.0)*x7149*x7150))+((x7147*(r20*r20))));
j14eval[0]=x7151;
j14eval[1]=IKsign(x7151);
j14eval[2]=((IKabs((x7150+(((-1.0)*x7149)))))+(IKabs(r22)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7152=cj15*cj15;
IkReal x7153=r21*r21;
IkReal x7154=(cj15*r20);
IkReal x7155=(r21*sj15);
CheckValue<IkReal> x7156=IKPowWithIntegerCheck(IKsign((x7153+(((-1.0)*x7152*x7153))+(r22*r22)+(((-2.0)*x7154*x7155))+((x7152*(r20*r20))))),-1);
if(!x7156.valid){
continue;
}
CheckValue<IkReal> x7157 = IKatan2WithCheck(IkReal(r22),IkReal((x7155+(((-1.0)*x7154)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7157.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7156.value)))+(x7157.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7158=IKsin(j14);
IkReal x7159=IKcos(j14);
IkReal x7160=(sj15*x7158);
IkReal x7161=(cj15*x7159);
IkReal x7162=((1.0)*x7159);
IkReal x7163=((1.0)*x7158);
IkReal x7164=(cj15*x7163);
evalcond[0]=((((-1.0)*r22*x7162))+((r21*x7160))+(((-1.0)*r20*x7164)));
evalcond[1]=((((-1.0)*r02*x7163))+((r00*x7161))+(((-1.0)*r01*sj15*x7162)));
evalcond[2]=((((-1.0)*r11*sj15*x7162))+(((-1.0)*r12*x7163))+((r10*x7161)));
evalcond[3]=(((r11*x7160))+cj10+(((-1.0)*r10*x7164))+(((-1.0)*r12*x7162)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7163))+(((-1.0)*r21*sj15*x7162))+((r20*x7161)));
evalcond[5]=((((-1.0)*r02*x7162))+((r01*x7160))+(((-1.0)*r00*x7164))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7165=((1.0)*cj15);
CheckValue<IkReal> x7166 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x7165))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7166.valid){
continue;
}
CheckValue<IkReal> x7167=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7165))+(((-1.0)*r00*sj15)))),-1);
if(!x7167.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7166.value)+(((1.5707963267949)*(x7167.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7168=IKsin(j14);
IkReal x7169=IKcos(j14);
IkReal x7170=(sj15*x7168);
IkReal x7171=(cj15*x7169);
IkReal x7172=((1.0)*x7169);
IkReal x7173=((1.0)*x7168);
IkReal x7174=(cj15*x7173);
evalcond[0]=(((r21*x7170))+(((-1.0)*r20*x7174))+(((-1.0)*r22*x7172)));
evalcond[1]=((((-1.0)*r02*x7173))+((r00*x7171))+(((-1.0)*r01*sj15*x7172)));
evalcond[2]=(((r10*x7171))+(((-1.0)*r12*x7173))+(((-1.0)*r11*sj15*x7172)));
evalcond[3]=((((-1.0)*r10*x7174))+((r11*x7170))+(((-1.0)*r12*x7172))+cj10);
evalcond[4]=((1.0)+(((-1.0)*r21*sj15*x7172))+(((-1.0)*r22*x7173))+((r20*x7171)));
evalcond[5]=((((-1.0)*r02*x7172))+(((-1.0)*sj10))+((r01*x7170))+(((-1.0)*r00*x7174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x7175=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x7175.valid){
continue;
}
CheckValue<IkReal> x7176 = IKatan2WithCheck(IkReal((((cj15*r00))+(((-1.0)*r01*sj15)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7176.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7175.value)))+(x7176.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7177=IKsin(j14);
IkReal x7178=IKcos(j14);
IkReal x7179=(sj15*x7177);
IkReal x7180=(cj15*x7178);
IkReal x7181=((1.0)*x7178);
IkReal x7182=((1.0)*x7177);
IkReal x7183=(cj15*x7182);
evalcond[0]=(((r21*x7179))+(((-1.0)*r20*x7183))+(((-1.0)*r22*x7181)));
evalcond[1]=(((r00*x7180))+(((-1.0)*r02*x7182))+(((-1.0)*r01*sj15*x7181)));
evalcond[2]=(((r10*x7180))+(((-1.0)*r12*x7182))+(((-1.0)*r11*sj15*x7181)));
evalcond[3]=(((r11*x7179))+(((-1.0)*r10*x7183))+cj10+(((-1.0)*r12*x7181)));
evalcond[4]=((1.0)+((r20*x7180))+(((-1.0)*r21*sj15*x7181))+(((-1.0)*r22*x7182)));
evalcond[5]=((((-1.0)*r00*x7183))+(((-1.0)*sj10))+((r01*x7179))+(((-1.0)*r02*x7181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-3.67051685094268)*py))+(((-1.9337986785623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.67051685094268)*px))+(((1.9337986785623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))))+IKsqr(((((-3.67051685094268)*px))+(((1.9337986785623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))), ((((-3.67051685094268)*px))+(((1.9337986785623)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x7184=IKcos(j10);
IkReal x7185=IKsin(j10);
evalcond[0]=((((-0.21325)*x7184))+(((-1.0)*px))+(((-0.11235)*x7185)));
evalcond[1]=((((0.11235)*x7184))+(((-0.21325)*x7185))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x7186=((1.0)*cj15);
IkReal x7187=((((-1.0)*r01*x7186))+(((-1.0)*r00*sj15)));
j14eval[0]=x7187;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x7186))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x7187);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x7188=cj15*cj15;
IkReal x7189=(r01*r21);
IkReal x7190=((1.0)*cj15*sj15);
IkReal x7191=(x7189+(((-1.0)*x7188*x7189))+(((-1.0)*r01*r20*x7190))+((r02*r22))+(((-1.0)*r00*r21*x7190))+((r00*r20*x7188)));
j14eval[0]=x7191;
j14eval[1]=IKsign(x7191);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x7192=cj15*cj15;
IkReal x7193=(r21*sj15);
IkReal x7194=(r11*r21);
IkReal x7195=((1.0)*cj15);
IkReal x7196=(x7194+(((-1.0)*r10*x7193*x7195))+(((-1.0)*x7192*x7194))+((r12*r22))+(((-1.0)*r11*r20*sj15*x7195))+((r10*r20*x7192)));
j14eval[0]=x7196;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x7195))+((sj10*x7193)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x7196);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7197=cj15*cj15;
IkReal x7198=(r21*sj15);
IkReal x7199=((1.0)*cj15);
IkReal x7200=(r11*r21);
CheckValue<IkReal> x7201=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7197*x7200))+x7200+((r12*r22))+(((-1.0)*r11*r20*sj15*x7199))+((r10*r20*x7197))+(((-1.0)*r10*x7198*x7199)))),-1);
if(!x7201.valid){
continue;
}
CheckValue<IkReal> x7202 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x7199))+((sj10*x7198)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7202.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7201.value)))+(x7202.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7203=IKsin(j14);
IkReal x7204=IKcos(j14);
IkReal x7205=(sj15*x7203);
IkReal x7206=((1.0)*x7204);
IkReal x7207=((1.0)*x7203);
IkReal x7208=(cj15*x7204);
IkReal x7209=(cj15*x7207);
evalcond[0]=(((r21*x7205))+(((-1.0)*r20*x7209))+(((-1.0)*r22*x7206)));
evalcond[1]=(((r20*x7208))+(((-1.0)*r21*sj15*x7206))+(((-1.0)*r22*x7207)));
evalcond[2]=((((-1.0)*r10*x7209))+cj10+((r11*x7205))+(((-1.0)*r12*x7206)));
evalcond[3]=(((r00*x7208))+cj10+(((-1.0)*r01*sj15*x7206))+(((-1.0)*r02*x7207)));
evalcond[4]=(((r10*x7208))+sj10+(((-1.0)*r11*sj15*x7206))+(((-1.0)*r12*x7207)));
evalcond[5]=(((r01*x7205))+(((-1.0)*sj10))+(((-1.0)*r00*x7209))+(((-1.0)*r02*x7206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7210=cj15*cj15;
IkReal x7211=(r01*r21);
IkReal x7212=((1.0)*cj15*sj15);
CheckValue<IkReal> x7213 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7213.valid){
continue;
}
CheckValue<IkReal> x7214=IKPowWithIntegerCheck(IKsign((x7211+((r00*r20*x7210))+(((-1.0)*r01*r20*x7212))+(((-1.0)*r00*r21*x7212))+((r02*r22))+(((-1.0)*x7210*x7211)))),-1);
if(!x7214.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7213.value)+(((1.5707963267949)*(x7214.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7215=IKsin(j14);
IkReal x7216=IKcos(j14);
IkReal x7217=(sj15*x7215);
IkReal x7218=((1.0)*x7216);
IkReal x7219=((1.0)*x7215);
IkReal x7220=(cj15*x7216);
IkReal x7221=(cj15*x7219);
evalcond[0]=((((-1.0)*r20*x7221))+((r21*x7217))+(((-1.0)*r22*x7218)));
evalcond[1]=((((-1.0)*r21*sj15*x7218))+((r20*x7220))+(((-1.0)*r22*x7219)));
evalcond[2]=(((r11*x7217))+(((-1.0)*r10*x7221))+cj10+(((-1.0)*r12*x7218)));
evalcond[3]=(((r00*x7220))+cj10+(((-1.0)*r02*x7219))+(((-1.0)*r01*sj15*x7218)));
evalcond[4]=(((r10*x7220))+(((-1.0)*r11*sj15*x7218))+(((-1.0)*r12*x7219))+sj10);
evalcond[5]=((((-1.0)*r00*x7221))+(((-1.0)*sj10))+(((-1.0)*r02*x7218))+((r01*x7217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7222=((1.0)*cj15);
CheckValue<IkReal> x7223=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7222))+(((-1.0)*r00*sj15)))),-1);
if(!x7223.valid){
continue;
}
CheckValue<IkReal> x7224 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x7222))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7224.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7223.value)))+(x7224.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7225=IKsin(j14);
IkReal x7226=IKcos(j14);
IkReal x7227=(sj15*x7225);
IkReal x7228=((1.0)*x7226);
IkReal x7229=((1.0)*x7225);
IkReal x7230=(cj15*x7226);
IkReal x7231=(cj15*x7229);
evalcond[0]=((((-1.0)*r20*x7231))+((r21*x7227))+(((-1.0)*r22*x7228)));
evalcond[1]=(((r20*x7230))+(((-1.0)*r21*sj15*x7228))+(((-1.0)*r22*x7229)));
evalcond[2]=((((-1.0)*r10*x7231))+cj10+(((-1.0)*r12*x7228))+((r11*x7227)));
evalcond[3]=((((-1.0)*r01*sj15*x7228))+(((-1.0)*r02*x7229))+((r00*x7230))+cj10);
evalcond[4]=((((-1.0)*r11*sj15*x7228))+((r10*x7230))+sj10+(((-1.0)*r12*x7229)));
evalcond[5]=((((-1.0)*r02*x7228))+((r01*x7227))+(((-1.0)*sj10))+(((-1.0)*r00*x7231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10, j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7232=cj11*cj11;
IkReal x7233=(cj11*sj12);
IkReal x7234=((20000.0)*py);
IkReal x7235=(cj12*sj11);
IkReal x7236=(r00*sj15);
IkReal x7237=(cj11*sj11);
IkReal x7238=(cj15*r01);
IkReal x7239=(sj12*x7232);
IkReal x7240=((1707.0)*cj15*r11);
IkReal x7241=((1707.0)*r10*sj15);
CheckValue<IkReal> x7242=IKPowWithIntegerCheck(((((-4873.0)*x7239))+(((-8530.0)*cj11*cj12*x7235))+(((-4873.0)*cj11*x7235))+(((4265.0)*x7237))+(((4265.0)*cj12*sj12))+(((-8530.0)*cj12*x7239))),-1);
if(!x7242.valid){
continue;
}
CheckValue<IkReal> x7243=IKPowWithIntegerCheck(((((-1.0)*x7235))+(((-1.0)*x7233))),-1);
if(!x7243.valid){
continue;
}
if( IKabs(((x7242.value)*(((((-1.0)*x7233*x7241))+(((-1.0)*x7233*x7240))+(((-1.0)*x7234*x7235))+(((-1.0)*x7233*x7234))+(((-2247.0)*x7238))+(((-2247.0)*x7236))+(((-1.0)*x7235*x7240))+(((-1.0)*x7235*x7241)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7243.value)*((x7236+x7238)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7242.value)*(((((-1.0)*x7233*x7241))+(((-1.0)*x7233*x7240))+(((-1.0)*x7234*x7235))+(((-1.0)*x7233*x7234))+(((-2247.0)*x7238))+(((-2247.0)*x7236))+(((-1.0)*x7235*x7240))+(((-1.0)*x7235*x7241))))))+IKsqr(((x7243.value)*((x7236+x7238))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x7242.value)*(((((-1.0)*x7233*x7241))+(((-1.0)*x7233*x7240))+(((-1.0)*x7234*x7235))+(((-1.0)*x7233*x7234))+(((-2247.0)*x7238))+(((-2247.0)*x7236))+(((-1.0)*x7235*x7240))+(((-1.0)*x7235*x7241))))), ((x7243.value)*((x7236+x7238))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x7244=IKcos(j10);
IkReal x7245=IKsin(j10);
IkReal x7246=(sj11*sj12);
IkReal x7247=((1.0)*cj15);
IkReal x7248=((1.0)*sj12);
IkReal x7249=((0.08535)*sj15);
IkReal x7250=((1.0)*sj15);
IkReal x7251=((0.08535)*cj15);
IkReal x7252=(cj11*x7245);
IkReal x7253=((0.21325)*x7244);
IkReal x7254=((1.0)*cj12*sj11);
IkReal x7255=(cj11*x7244);
evalcond[0]=((((-1.0)*x7244*x7254))+(((-1.0)*r00*x7250))+(((-1.0)*x7248*x7255))+(((-1.0)*r01*x7247)));
evalcond[1]=((((-1.0)*r10*x7250))+(((-1.0)*r11*x7247))+(((-1.0)*x7248*x7252))+(((-1.0)*x7245*x7254)));
evalcond[2]=((((-0.11235)*x7245))+(((-1.0)*x7246*x7253))+(((-1.0)*r01*x7251))+(((0.24365)*x7255))+(((-1.0)*px))+(((-1.0)*r00*x7249))+((cj11*cj12*x7253)));
evalcond[3]=((((0.21325)*cj12*x7252))+(((0.11235)*x7244))+(((-1.0)*r10*x7249))+(((-1.0)*r11*x7251))+(((0.24365)*x7252))+(((-0.21325)*x7245*x7246))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x7256=((1.0)*cj15);
IkReal x7257=((((-1.0)*r01*x7256))+(((-1.0)*r00*sj15)));
j14eval[0]=x7257;
j14eval[1]=((IKabs((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x7256)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x7257);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x7258=((1.0)*cj15);
IkReal x7259=((((-1.0)*r11*x7258))+(((-1.0)*r10*sj15)));
j14eval[0]=x7259;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x7258))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x7259);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x7260=((1.0)*sj15);
IkReal x7261=((((-1.0)*r20*x7260))+(((-1.0)*cj15*r21)));
j14eval[0]=x7261;
j14eval[1]=((IKabs(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))))+(IKabs((((cj15*r10*sj10))+(((-1.0)*cj10*r01*x7260))+(((-1.0)*r11*sj10*x7260))+((cj10*cj15*r00))))));
j14eval[2]=IKsign(x7261);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7262=((-1.0)*r20);
IkReal x7264 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7264)==0){
continue;
}
IkReal x7263=pow(x7264,-0.5);
CheckValue<IkReal> x7265 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7262),IKFAST_ATAN2_MAGTHRESH);
if(!x7265.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7265.value));
IkReal gconst133=(r21*x7263);
IkReal gconst134=(x7262*x7263);
CheckValue<IkReal> x7266 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7266.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x7266.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x7267=((-1.0)*r20);
IkReal x7268=x7263;
CheckValue<IkReal> x7270 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7267),IKFAST_ATAN2_MAGTHRESH);
if(!x7270.valid){
continue;
}
IkReal x7269=((-1.0)*(x7270.value));
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst133;
cj15=gconst134;
j15=x7269;
IkReal gconst132=x7269;
IkReal gconst133=(r21*x7268);
IkReal gconst134=(x7267*x7268);
j14eval[0]=cj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x7271=((-1.0)*r20);
IkReal x7272=x7263;
CheckValue<IkReal> x7274 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7271),IKFAST_ATAN2_MAGTHRESH);
if(!x7274.valid){
continue;
}
IkReal x7273=((-1.0)*(x7274.value));
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst133;
cj15=gconst134;
j15=x7273;
IkReal gconst132=x7273;
IkReal gconst133=(r21*x7272);
IkReal gconst134=(x7271*x7272);
j14eval[0]=sj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x7275=((-1.0)*r20);
IkReal x7276=x7263;
CheckValue<IkReal> x7278 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7275),IKFAST_ATAN2_MAGTHRESH);
if(!x7278.valid){
continue;
}
IkReal x7277=((-1.0)*(x7278.value));
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst133;
cj15=gconst134;
j15=x7277;
IkReal gconst132=x7277;
IkReal gconst133=(r21*x7276);
IkReal gconst134=(x7275*x7276);
IkReal x7279=r22*r22;
CheckValue<IkReal> x7282=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7279))),-1);
if(!x7282.valid){
continue;
}
IkReal x7280=x7282.value;
IkReal x7281=(x7279+(((2.0)*x7280*(r20*r20)*(r21*r21)))+((x7280*(r21*r21*r21*r21)))+((x7280*(r20*r20*r20*r20))));
j14eval[0]=x7281;
j14eval[1]=IKsign(x7281);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7283=(gconst134*r20);
IkReal x7284=(cj12*sj11);
IkReal x7285=(gconst133*r21);
IkReal x7286=(cj11*sj12);
CheckValue<IkReal> x7287=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7283*x7285))+(r22*r22)+(x7285*x7285)+(x7283*x7283))),-1);
if(!x7287.valid){
continue;
}
CheckValue<IkReal> x7288 = IKatan2WithCheck(IkReal((((r22*x7286))+((r22*x7284)))),IkReal((((x7284*x7285))+((x7285*x7286))+(((-1.0)*x7283*x7286))+(((-1.0)*x7283*x7284)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7288.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7287.value)))+(x7288.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7289=IKsin(j14);
IkReal x7290=IKcos(j14);
IkReal x7291=((1.0)*sj10);
IkReal x7292=(gconst134*r20);
IkReal x7293=(gconst134*r10);
IkReal x7294=(gconst134*r00);
IkReal x7295=(sj11*sj12);
IkReal x7296=(cj11*cj12);
IkReal x7297=((1.0)*x7290);
IkReal x7298=((1.0)*x7289);
IkReal x7299=(gconst133*x7289);
evalcond[0]=((((-1.0)*r22*x7297))+((r21*x7299))+(((-1.0)*x7292*x7298)));
evalcond[1]=(((r11*x7299))+cj10+(((-1.0)*x7293*x7298))+(((-1.0)*r12*x7297)));
evalcond[2]=((((-1.0)*x7291))+(((-1.0)*x7294*x7298))+(((-1.0)*r02*x7297))+((r01*x7299)));
evalcond[3]=((((-1.0)*r22*x7298))+(((-1.0)*gconst133*r21*x7297))+((x7290*x7292))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*gconst133*r01*x7297))+((x7290*x7294))+(((-1.0)*r02*x7298))+((cj10*x7295))+(((-1.0)*cj10*x7296)));
evalcond[5]=((((-1.0)*x7291*x7296))+((sj10*x7295))+((x7290*x7293))+(((-1.0)*r12*x7298))+(((-1.0)*gconst133*r11*x7297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7300=((1.0)*gconst134);
CheckValue<IkReal> x7301 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst133*r21*sj10))+(((-1.0)*r20*sj10*x7300)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7301.valid){
continue;
}
CheckValue<IkReal> x7302=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7300)))),-1);
if(!x7302.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7301.value)+(((1.5707963267949)*(x7302.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7303=IKsin(j14);
IkReal x7304=IKcos(j14);
IkReal x7305=((1.0)*sj10);
IkReal x7306=(gconst134*r20);
IkReal x7307=(gconst134*r10);
IkReal x7308=(gconst134*r00);
IkReal x7309=(sj11*sj12);
IkReal x7310=(cj11*cj12);
IkReal x7311=((1.0)*x7304);
IkReal x7312=((1.0)*x7303);
IkReal x7313=(gconst133*x7303);
evalcond[0]=(((r21*x7313))+(((-1.0)*r22*x7311))+(((-1.0)*x7306*x7312)));
evalcond[1]=(cj10+(((-1.0)*r12*x7311))+(((-1.0)*x7307*x7312))+((r11*x7313)));
evalcond[2]=((((-1.0)*x7308*x7312))+((r01*x7313))+(((-1.0)*x7305))+(((-1.0)*r02*x7311)));
evalcond[3]=((((-1.0)*gconst133*r21*x7311))+((x7304*x7306))+((cj12*sj11))+(((-1.0)*r22*x7312))+((cj11*sj12)));
evalcond[4]=(((cj10*x7309))+((x7304*x7308))+(((-1.0)*gconst133*r01*x7311))+(((-1.0)*cj10*x7310))+(((-1.0)*r02*x7312)));
evalcond[5]=((((-1.0)*gconst133*r11*x7311))+((x7304*x7307))+(((-1.0)*r12*x7312))+(((-1.0)*x7305*x7310))+((sj10*x7309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7314=((1.0)*gconst134);
CheckValue<IkReal> x7315 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst133*r21))+(((-1.0)*cj10*r20*x7314)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7315.valid){
continue;
}
CheckValue<IkReal> x7316=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7314)))),-1);
if(!x7316.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7315.value)+(((1.5707963267949)*(x7316.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7317=IKsin(j14);
IkReal x7318=IKcos(j14);
IkReal x7319=((1.0)*sj10);
IkReal x7320=(gconst134*r20);
IkReal x7321=(gconst134*r10);
IkReal x7322=(gconst134*r00);
IkReal x7323=(sj11*sj12);
IkReal x7324=(cj11*cj12);
IkReal x7325=((1.0)*x7318);
IkReal x7326=((1.0)*x7317);
IkReal x7327=(gconst133*x7317);
evalcond[0]=(((r21*x7327))+(((-1.0)*r22*x7325))+(((-1.0)*x7320*x7326)));
evalcond[1]=(cj10+(((-1.0)*x7321*x7326))+(((-1.0)*r12*x7325))+((r11*x7327)));
evalcond[2]=(((r01*x7327))+(((-1.0)*x7322*x7326))+(((-1.0)*x7319))+(((-1.0)*r02*x7325)));
evalcond[3]=((((-1.0)*r22*x7326))+(((-1.0)*gconst133*r21*x7325))+((cj12*sj11))+((x7318*x7320))+((cj11*sj12)));
evalcond[4]=((((-1.0)*gconst133*r01*x7325))+((cj10*x7323))+((x7318*x7322))+(((-1.0)*cj10*x7324))+(((-1.0)*r02*x7326)));
evalcond[5]=((((-1.0)*x7319*x7324))+(((-1.0)*gconst133*r11*x7325))+(((-1.0)*r12*x7326))+((x7318*x7321))+((sj10*x7323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7328=((-1.0)*r21);
IkReal x7330 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7330)==0){
continue;
}
IkReal x7329=pow(x7330,-0.5);
CheckValue<IkReal> x7331 = IKatan2WithCheck(IkReal(x7328),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7331.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7331.value))));
IkReal gconst136=(x7328*x7329);
IkReal gconst137=((1.0)*r20*x7329);
CheckValue<IkReal> x7332 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7332.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x7332.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x7333=((-1.0)*r21);
CheckValue<IkReal> x7336 = IKatan2WithCheck(IkReal(x7333),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7336.valid){
continue;
}
IkReal x7334=((1.0)*(x7336.value));
IkReal x7335=x7329;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst136;
cj15=gconst137;
j15=((3.14159265)+(((-1.0)*x7334)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7334)));
IkReal gconst136=(x7333*x7335);
IkReal gconst137=((1.0)*r20*x7335);
IkReal x7337=r22*r22;
IkReal x7338=((1.0)*x7337);
CheckValue<IkReal> x7342=IKPowWithIntegerCheck(((-1.0)+x7337),-1);
if(!x7342.valid){
continue;
}
IkReal x7339=x7342.value;
if((((1.0)+(((-1.0)*x7338)))) < -0.00001)
continue;
IkReal x7340=IKsqrt(((1.0)+(((-1.0)*x7338))));
IkReal x7341=(cj10*x7339*x7340);
j14eval[0]=((IKabs((x7341+(((-1.0)*x7338*x7341)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x7343=((-1.0)*r21);
CheckValue<IkReal> x7346 = IKatan2WithCheck(IkReal(x7343),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7346.valid){
continue;
}
IkReal x7344=((1.0)*(x7346.value));
IkReal x7345=x7329;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst136;
cj15=gconst137;
j15=((3.14159265)+(((-1.0)*x7344)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7344)));
IkReal gconst136=(x7343*x7345);
IkReal gconst137=((1.0)*r20*x7345);
IkReal x7347=r22*r22;
IkReal x7348=((1.0)*x7347);
CheckValue<IkReal> x7352=IKPowWithIntegerCheck(((-1.0)+x7347),-1);
if(!x7352.valid){
continue;
}
IkReal x7349=x7352.value;
if((((1.0)+(((-1.0)*x7348)))) < -0.00001)
continue;
IkReal x7350=IKsqrt(((1.0)+(((-1.0)*x7348))));
IkReal x7351=(sj10*x7349*x7350);
j14eval[0]=((IKabs((x7351+(((-1.0)*x7348*x7351)))))+(IKabs((r22*sj10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x7353=((-1.0)*r21);
CheckValue<IkReal> x7356 = IKatan2WithCheck(IkReal(x7353),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7356.valid){
continue;
}
IkReal x7354=((1.0)*(x7356.value));
IkReal x7355=x7329;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst136;
cj15=gconst137;
j15=((3.14159265)+(((-1.0)*x7354)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7354)));
IkReal gconst136=(x7353*x7355);
IkReal gconst137=((1.0)*r20*x7355);
IkReal x7357=r22*r22;
IkReal x7358=(cj10*r02);
IkReal x7359=(r12*sj10);
CheckValue<IkReal> x7363=IKPowWithIntegerCheck(((-1.0)+x7357),-1);
if(!x7363.valid){
continue;
}
IkReal x7360=x7363.value;
if((((1.0)+(((-1.0)*x7357)))) < -0.00001)
continue;
IkReal x7361=IKsqrt(((1.0)+(((-1.0)*x7357))));
IkReal x7362=(r22*x7360*x7361);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=((IKabs(((((-1.0)*x7359))+(((-1.0)*x7358)))))+(IKabs((((x7359*x7362))+((x7358*x7362))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7364=((1.0)*gconst136);
CheckValue<IkReal> x7365=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7364))+(((-1.0)*gconst137*r21)))),-1);
if(!x7365.valid){
continue;
}
CheckValue<IkReal> x7366 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x7364))+(((-1.0)*cj10*r01*x7364))+((gconst137*r10*sj10))+((cj10*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7366.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7365.value)))+(x7366.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7367=IKsin(j14);
IkReal x7368=IKcos(j14);
IkReal x7369=(gconst136*r01);
IkReal x7370=(gconst136*r11);
IkReal x7371=(gconst136*r21);
IkReal x7372=(sj11*sj12);
IkReal x7373=((1.0)*x7368);
IkReal x7374=(gconst137*x7368);
IkReal x7375=((1.0)*x7367);
IkReal x7376=((1.0)*cj11*cj12);
evalcond[0]=((((-1.0)*gconst137*r20*x7375))+(((-1.0)*r22*x7373))+((x7367*x7371)));
evalcond[1]=((((-1.0)*r12*x7373))+cj10+(((-1.0)*gconst137*r10*x7375))+((x7367*x7370)));
evalcond[2]=(((x7367*x7369))+(((-1.0)*gconst137*r00*x7375))+(((-1.0)*sj10))+(((-1.0)*r02*x7373)));
evalcond[3]=((((-1.0)*r22*x7375))+((r20*x7374))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*x7371*x7373)));
evalcond[4]=(((r00*x7374))+(((-1.0)*r02*x7375))+(((-1.0)*x7369*x7373))+((cj10*x7372))+(((-1.0)*cj10*x7376)));
evalcond[5]=((((-1.0)*r12*x7375))+(((-1.0)*x7370*x7373))+((sj10*x7372))+(((-1.0)*sj10*x7376))+((r10*x7374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7377=((1.0)*gconst137);
CheckValue<IkReal> x7378=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7377))+(((-1.0)*gconst136*r10)))),-1);
if(!x7378.valid){
continue;
}
CheckValue<IkReal> x7379 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x7377))+((gconst136*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7379.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7378.value)))+(x7379.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7380=IKsin(j14);
IkReal x7381=IKcos(j14);
IkReal x7382=(gconst136*r01);
IkReal x7383=(gconst136*r11);
IkReal x7384=(gconst136*r21);
IkReal x7385=(sj11*sj12);
IkReal x7386=((1.0)*x7381);
IkReal x7387=(gconst137*x7381);
IkReal x7388=((1.0)*x7380);
IkReal x7389=((1.0)*cj11*cj12);
evalcond[0]=((((-1.0)*gconst137*r20*x7388))+(((-1.0)*r22*x7386))+((x7380*x7384)));
evalcond[1]=(((x7380*x7383))+cj10+(((-1.0)*r12*x7386))+(((-1.0)*gconst137*r10*x7388)));
evalcond[2]=((((-1.0)*r02*x7386))+(((-1.0)*gconst137*r00*x7388))+((x7380*x7382))+(((-1.0)*sj10)));
evalcond[3]=((((-1.0)*r22*x7388))+((r20*x7387))+(((-1.0)*x7384*x7386))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*r02*x7388))+(((-1.0)*cj10*x7389))+((cj10*x7385))+((r00*x7387))+(((-1.0)*x7382*x7386)));
evalcond[5]=(((sj10*x7385))+(((-1.0)*sj10*x7389))+((r10*x7387))+(((-1.0)*x7383*x7386))+(((-1.0)*r12*x7388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7390=((1.0)*gconst137);
CheckValue<IkReal> x7391 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst136*r21))+(((-1.0)*cj10*r20*x7390)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7391.valid){
continue;
}
CheckValue<IkReal> x7392=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x7390)))),-1);
if(!x7392.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7391.value)+(((1.5707963267949)*(x7392.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7393=IKsin(j14);
IkReal x7394=IKcos(j14);
IkReal x7395=(gconst136*r01);
IkReal x7396=(gconst136*r11);
IkReal x7397=(gconst136*r21);
IkReal x7398=(sj11*sj12);
IkReal x7399=((1.0)*x7394);
IkReal x7400=(gconst137*x7394);
IkReal x7401=((1.0)*x7393);
IkReal x7402=((1.0)*cj11*cj12);
evalcond[0]=((((-1.0)*gconst137*r20*x7401))+(((-1.0)*r22*x7399))+((x7393*x7397)));
evalcond[1]=((((-1.0)*r12*x7399))+(((-1.0)*gconst137*r10*x7401))+cj10+((x7393*x7396)));
evalcond[2]=((((-1.0)*r02*x7399))+(((-1.0)*sj10))+(((-1.0)*gconst137*r00*x7401))+((x7393*x7395)));
evalcond[3]=(((r20*x7400))+(((-1.0)*x7397*x7399))+(((-1.0)*r22*x7401))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*x7395*x7399))+((cj10*x7398))+(((-1.0)*cj10*x7402))+((r00*x7400))+(((-1.0)*r02*x7401)));
evalcond[5]=(((sj10*x7398))+(((-1.0)*r12*x7401))+(((-1.0)*x7396*x7399))+(((-1.0)*sj10*x7402))+((r10*x7400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7403=((-1.0)*r10);
IkReal x7405 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7405)==0){
continue;
}
IkReal x7404=pow(x7405,-0.5);
CheckValue<IkReal> x7406 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7403),IKFAST_ATAN2_MAGTHRESH);
if(!x7406.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7406.value));
IkReal gconst139=(r11*x7404);
IkReal gconst140=(x7403*x7404);
CheckValue<IkReal> x7407 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7407.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x7407.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x7408=((-1.0)*r10);
IkReal x7409=x7404;
CheckValue<IkReal> x7411 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7408),IKFAST_ATAN2_MAGTHRESH);
if(!x7411.valid){
continue;
}
IkReal x7410=((-1.0)*(x7411.value));
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst139;
cj15=gconst140;
j15=x7410;
IkReal gconst138=x7410;
IkReal gconst139=(r11*x7409);
IkReal gconst140=(x7408*x7409);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7412=((1.0)*gconst139);
CheckValue<IkReal> x7413=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7412)))),-1);
if(!x7413.valid){
continue;
}
CheckValue<IkReal> x7414 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x7412))+(((-1.0)*cj10*r01*x7412))+((gconst140*r10*sj10))+((cj10*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7414.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7413.value)))+(x7414.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7415=IKsin(j14);
IkReal x7416=IKcos(j14);
IkReal x7417=(gconst139*r21);
IkReal x7418=((1.0)*sj10);
IkReal x7419=(gconst140*r20);
IkReal x7420=(gconst140*r10);
IkReal x7421=(sj11*sj12);
IkReal x7422=(gconst139*r01);
IkReal x7423=(gconst140*r00);
IkReal x7424=(cj11*cj12);
IkReal x7425=(gconst139*r11);
IkReal x7426=((1.0)*x7416);
IkReal x7427=((1.0)*x7415);
evalcond[0]=(((x7415*x7417))+(((-1.0)*r22*x7426))+(((-1.0)*x7419*x7427)));
evalcond[1]=((((-1.0)*r12*x7426))+cj10+((x7415*x7425))+(((-1.0)*x7420*x7427)));
evalcond[2]=((((-1.0)*r02*x7426))+(((-1.0)*x7418))+((x7415*x7422))+(((-1.0)*x7423*x7427)));
evalcond[3]=((((-1.0)*r22*x7427))+((cj12*sj11))+((x7416*x7419))+((cj11*sj12))+(((-1.0)*x7417*x7426)));
evalcond[4]=((((-1.0)*x7422*x7426))+((cj10*x7421))+(((-1.0)*r02*x7427))+(((-1.0)*cj10*x7424))+((x7416*x7423)));
evalcond[5]=((((-1.0)*r12*x7427))+((sj10*x7421))+(((-1.0)*x7418*x7424))+(((-1.0)*x7425*x7426))+((x7416*x7420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7428=((1.0)*gconst140);
CheckValue<IkReal> x7429=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x7428)))),-1);
if(!x7429.valid){
continue;
}
CheckValue<IkReal> x7430 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x7428))+((cj10*gconst139*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7430.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7429.value)))+(x7430.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7431=IKsin(j14);
IkReal x7432=IKcos(j14);
IkReal x7433=(gconst139*r21);
IkReal x7434=((1.0)*sj10);
IkReal x7435=(gconst140*r20);
IkReal x7436=(gconst140*r10);
IkReal x7437=(sj11*sj12);
IkReal x7438=(gconst139*r01);
IkReal x7439=(gconst140*r00);
IkReal x7440=(cj11*cj12);
IkReal x7441=(gconst139*r11);
IkReal x7442=((1.0)*x7432);
IkReal x7443=((1.0)*x7431);
evalcond[0]=((((-1.0)*x7435*x7443))+((x7431*x7433))+(((-1.0)*r22*x7442)));
evalcond[1]=((((-1.0)*x7436*x7443))+cj10+((x7431*x7441))+(((-1.0)*r12*x7442)));
evalcond[2]=((((-1.0)*x7434))+(((-1.0)*r02*x7442))+((x7431*x7438))+(((-1.0)*x7439*x7443)));
evalcond[3]=((((-1.0)*x7433*x7442))+((x7432*x7435))+((cj12*sj11))+(((-1.0)*r22*x7443))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj10*x7440))+((cj10*x7437))+(((-1.0)*x7438*x7442))+(((-1.0)*r02*x7443))+((x7432*x7439)));
evalcond[5]=(((sj10*x7437))+((x7432*x7436))+(((-1.0)*x7434*x7440))+(((-1.0)*x7441*x7442))+(((-1.0)*r12*x7443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7444=((-1.0)*r11);
IkReal x7446 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7446)==0){
continue;
}
IkReal x7445=pow(x7446,-0.5);
CheckValue<IkReal> x7447 = IKatan2WithCheck(IkReal(x7444),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7447.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7447.value))));
IkReal gconst142=(x7444*x7445);
IkReal gconst143=((1.0)*r10*x7445);
CheckValue<IkReal> x7448 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7448.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x7448.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x7449=((-1.0)*r11);
CheckValue<IkReal> x7452 = IKatan2WithCheck(IkReal(x7449),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7452.valid){
continue;
}
IkReal x7450=((1.0)*(x7452.value));
IkReal x7451=x7445;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst142;
cj15=gconst143;
j15=((3.14159265)+(((-1.0)*x7450)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7450)));
IkReal gconst142=(x7449*x7451);
IkReal gconst143=((1.0)*r10*x7451);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x7453=((-1.0)*r11);
CheckValue<IkReal> x7456 = IKatan2WithCheck(IkReal(x7453),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7456.valid){
continue;
}
IkReal x7454=((1.0)*(x7456.value));
IkReal x7455=x7445;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst142;
cj15=gconst143;
j15=((3.14159265)+(((-1.0)*x7454)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7454)));
IkReal gconst142=(x7453*x7455);
IkReal gconst143=((1.0)*r10*x7455);
IkReal x7457=r12*r12;
IkReal x7458=(cj10*r02);
IkReal x7459=x7445;
IkReal x7460=(sj10*x7459);
j14eval[0]=((IKabs(((((-1.0)*x7458))+(((-1.0)*r12*sj10)))))+(IKabs((((x7457*x7460))+((r12*x7458*x7459))+(((-1.0)*x7460))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x7461=((-1.0)*r11);
CheckValue<IkReal> x7464 = IKatan2WithCheck(IkReal(x7461),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7464.valid){
continue;
}
IkReal x7462=((1.0)*(x7464.value));
IkReal x7463=x7445;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst142;
cj15=gconst143;
j15=((3.14159265)+(((-1.0)*x7462)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7462)));
IkReal gconst142=(x7461*x7463);
IkReal gconst143=((1.0)*r10*x7463);
IkReal x7465=r12*r12;
IkReal x7466=(cj12*r22*sj11);
IkReal x7467=(cj11*r22*sj12);
CheckValue<IkReal> x7471=IKPowWithIntegerCheck(((-1.0)+x7465),-1);
if(!x7471.valid){
continue;
}
IkReal x7468=x7471.value;
if((((1.0)+(((-1.0)*x7465)))) < -0.00001)
continue;
IkReal x7469=IKsqrt(((1.0)+(((-1.0)*x7465))));
IkReal x7470=((1.0)*r12*x7468*x7469);
j14eval[0]=((IKabs((x7467+x7466)))+(IKabs(((((-1.0)*x7466*x7470))+(((-1.0)*x7467*x7470))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7472=(cj11*sj12);
IkReal x7473=(gconst143*r20);
IkReal x7474=(gconst142*r21);
IkReal x7475=(cj12*sj11);
CheckValue<IkReal> x7476=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7474*x7474)+(((-2.0)*x7473*x7474))+(x7473*x7473))),-1);
if(!x7476.valid){
continue;
}
CheckValue<IkReal> x7477 = IKatan2WithCheck(IkReal((((r22*x7472))+((r22*x7475)))),IkReal((((x7474*x7475))+((x7472*x7474))+(((-1.0)*x7472*x7473))+(((-1.0)*x7473*x7475)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7477.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7476.value)))+(x7477.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7478=IKsin(j14);
IkReal x7479=IKcos(j14);
IkReal x7480=((1.0)*sj10);
IkReal x7481=(gconst142*r21);
IkReal x7482=(gconst142*r01);
IkReal x7483=(sj11*sj12);
IkReal x7484=(cj11*cj12);
IkReal x7485=(gconst142*r11);
IkReal x7486=((1.0)*x7479);
IkReal x7487=((1.0)*x7478);
IkReal x7488=(gconst143*x7479);
evalcond[0]=(((x7478*x7481))+(((-1.0)*gconst143*r20*x7487))+(((-1.0)*r22*x7486)));
evalcond[1]=(((x7478*x7485))+(((-1.0)*gconst143*r10*x7487))+cj10+(((-1.0)*r12*x7486)));
evalcond[2]=(((x7478*x7482))+(((-1.0)*x7480))+(((-1.0)*gconst143*r00*x7487))+(((-1.0)*r02*x7486)));
evalcond[3]=((((-1.0)*x7481*x7486))+((r20*x7488))+((cj12*sj11))+(((-1.0)*r22*x7487))+((cj11*sj12)));
evalcond[4]=((((-1.0)*x7482*x7486))+(((-1.0)*cj10*x7484))+((r00*x7488))+((cj10*x7483))+(((-1.0)*r02*x7487)));
evalcond[5]=((((-1.0)*x7480*x7484))+((r10*x7488))+((sj10*x7483))+(((-1.0)*r12*x7487))+(((-1.0)*x7485*x7486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7489=((1.0)*sj10);
IkReal x7490=((1.0)*gconst142);
CheckValue<IkReal> x7491 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7489))+(((-1.0)*cj10*r02)))),IkReal((((cj10*gconst143*r00))+((gconst143*r10*sj10))+(((-1.0)*cj10*r01*x7490))+(((-1.0)*gconst142*r11*x7489)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7491.valid){
continue;
}
CheckValue<IkReal> x7492=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7490))+(((-1.0)*gconst143*r21)))),-1);
if(!x7492.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7491.value)+(((1.5707963267949)*(x7492.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7493=IKsin(j14);
IkReal x7494=IKcos(j14);
IkReal x7495=((1.0)*sj10);
IkReal x7496=(gconst142*r21);
IkReal x7497=(gconst142*r01);
IkReal x7498=(sj11*sj12);
IkReal x7499=(cj11*cj12);
IkReal x7500=(gconst142*r11);
IkReal x7501=((1.0)*x7494);
IkReal x7502=((1.0)*x7493);
IkReal x7503=(gconst143*x7494);
evalcond[0]=((((-1.0)*r22*x7501))+((x7493*x7496))+(((-1.0)*gconst143*r20*x7502)));
evalcond[1]=(((x7493*x7500))+(((-1.0)*gconst143*r10*x7502))+cj10+(((-1.0)*r12*x7501)));
evalcond[2]=((((-1.0)*r02*x7501))+((x7493*x7497))+(((-1.0)*gconst143*r00*x7502))+(((-1.0)*x7495)));
evalcond[3]=((((-1.0)*r22*x7502))+(((-1.0)*x7496*x7501))+((r20*x7503))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((r00*x7503))+(((-1.0)*x7497*x7501))+(((-1.0)*r02*x7502))+(((-1.0)*cj10*x7499))+((cj10*x7498)));
evalcond[5]=((((-1.0)*x7500*x7501))+(((-1.0)*x7495*x7499))+((r10*x7503))+((sj10*x7498))+(((-1.0)*r12*x7502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7504=((1.0)*gconst143);
CheckValue<IkReal> x7505 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x7504))+((cj10*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7505.valid){
continue;
}
CheckValue<IkReal> x7506=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7504))+(((-1.0)*gconst142*r00)))),-1);
if(!x7506.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7505.value)+(((1.5707963267949)*(x7506.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7507=IKsin(j14);
IkReal x7508=IKcos(j14);
IkReal x7509=((1.0)*sj10);
IkReal x7510=(gconst142*r21);
IkReal x7511=(gconst142*r01);
IkReal x7512=(sj11*sj12);
IkReal x7513=(cj11*cj12);
IkReal x7514=(gconst142*r11);
IkReal x7515=((1.0)*x7508);
IkReal x7516=((1.0)*x7507);
IkReal x7517=(gconst143*x7508);
evalcond[0]=((((-1.0)*gconst143*r20*x7516))+((x7507*x7510))+(((-1.0)*r22*x7515)));
evalcond[1]=((((-1.0)*gconst143*r10*x7516))+cj10+((x7507*x7514))+(((-1.0)*r12*x7515)));
evalcond[2]=((((-1.0)*gconst143*r00*x7516))+(((-1.0)*r02*x7515))+((x7507*x7511))+(((-1.0)*x7509)));
evalcond[3]=(((r20*x7517))+(((-1.0)*x7510*x7515))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*r22*x7516)));
evalcond[4]=(((r00*x7517))+((cj10*x7512))+(((-1.0)*x7511*x7515))+(((-1.0)*r02*x7516))+(((-1.0)*cj10*x7513)));
evalcond[5]=((((-1.0)*x7509*x7513))+((r10*x7517))+((sj10*x7512))+(((-1.0)*r12*x7516))+(((-1.0)*x7514*x7515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=1.0;
j10=0;
IkReal x7518=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x7518;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj15*r00))+((r01*sj15))))));
j14eval[2]=IKsign(x7518);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=1.0;
j10=0;
IkReal x7519=((1.0)*cj15);
IkReal x7520=((((-1.0)*r01*x7519))+(((-1.0)*r00*sj15)));
j14eval[0]=x7520;
j14eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x7519))+((r21*sj15))))));
j14eval[2]=IKsign(x7520);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=1.0;
j10=0;
IkReal x7521=cj15*cj15;
IkReal x7522=r11*r11;
IkReal x7523=(r11*sj15);
IkReal x7524=(cj15*r10);
IkReal x7525=((r12*r12)+(((-1.0)*x7521*x7522))+((x7521*(r10*r10)))+x7522+(((-2.0)*x7523*x7524)));
j14eval[0]=x7525;
j14eval[1]=IKsign(x7525);
j14eval[2]=((IKabs((x7524+(((-1.0)*x7523)))))+(IKabs(r12)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7526=cj15*cj15;
IkReal x7527=r11*r11;
IkReal x7528=(r11*sj15);
IkReal x7529=(cj15*r10);
CheckValue<IkReal> x7530 = IKatan2WithCheck(IkReal((x7529+(((-1.0)*x7528)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7530.valid){
continue;
}
CheckValue<IkReal> x7531=IKPowWithIntegerCheck(IKsign((((x7526*(r10*r10)))+(r12*r12)+(((-1.0)*x7526*x7527))+(((-2.0)*x7528*x7529))+x7527)),-1);
if(!x7531.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7530.value)+(((1.5707963267949)*(x7531.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7532=IKsin(j14);
IkReal x7533=IKcos(j14);
IkReal x7534=(r11*sj15);
IkReal x7535=(cj15*r10);
IkReal x7536=(cj15*r00);
IkReal x7537=(r21*sj15);
IkReal x7538=(r01*sj15);
IkReal x7539=(cj15*r20);
IkReal x7540=((1.0)*x7533);
IkReal x7541=((1.0)*x7532);
evalcond[0]=((((-1.0)*r22*x7540))+(((-1.0)*x7539*x7541))+((x7532*x7537)));
evalcond[1]=(((x7532*x7538))+(((-1.0)*x7536*x7541))+(((-1.0)*r02*x7540)));
evalcond[2]=(((x7533*x7535))+(((-1.0)*x7534*x7540))+(((-1.0)*r12*x7541)));
evalcond[3]=((1.0)+(((-1.0)*x7535*x7541))+(((-1.0)*r12*x7540))+((x7532*x7534)));
evalcond[4]=(((x7533*x7539))+(((-1.0)*x7537*x7540))+(((-1.0)*r22*x7541))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x7533*x7536))+(((-1.0)*x7538*x7540))+(((-1.0)*r02*x7541))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7542=((1.0)*cj15);
CheckValue<IkReal> x7543 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj15))+(((-1.0)*r20*x7542)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7543.valid){
continue;
}
CheckValue<IkReal> x7544=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7542))+(((-1.0)*r00*sj15)))),-1);
if(!x7544.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7543.value)+(((1.5707963267949)*(x7544.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7545=IKsin(j14);
IkReal x7546=IKcos(j14);
IkReal x7547=(r11*sj15);
IkReal x7548=(cj15*r10);
IkReal x7549=(cj15*r00);
IkReal x7550=(r21*sj15);
IkReal x7551=(r01*sj15);
IkReal x7552=(cj15*r20);
IkReal x7553=((1.0)*x7546);
IkReal x7554=((1.0)*x7545);
evalcond[0]=(((x7545*x7550))+(((-1.0)*r22*x7553))+(((-1.0)*x7552*x7554)));
evalcond[1]=(((x7545*x7551))+(((-1.0)*r02*x7553))+(((-1.0)*x7549*x7554)));
evalcond[2]=(((x7546*x7548))+(((-1.0)*r12*x7554))+(((-1.0)*x7547*x7553)));
evalcond[3]=((1.0)+((x7545*x7547))+(((-1.0)*r12*x7553))+(((-1.0)*x7548*x7554)));
evalcond[4]=(((x7546*x7552))+(((-1.0)*x7550*x7553))+(((-1.0)*r22*x7554))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x7546*x7549))+(((-1.0)*x7551*x7553))+(((-1.0)*cj11*cj12))+(((-1.0)*r02*x7554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x7555 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj15*r00))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7555.valid){
continue;
}
CheckValue<IkReal> x7556=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x7556.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7555.value)+(((1.5707963267949)*(x7556.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7557=IKsin(j14);
IkReal x7558=IKcos(j14);
IkReal x7559=(r11*sj15);
IkReal x7560=(cj15*r10);
IkReal x7561=(cj15*r00);
IkReal x7562=(r21*sj15);
IkReal x7563=(r01*sj15);
IkReal x7564=(cj15*r20);
IkReal x7565=((1.0)*x7558);
IkReal x7566=((1.0)*x7557);
evalcond[0]=((((-1.0)*x7564*x7566))+(((-1.0)*r22*x7565))+((x7557*x7562)));
evalcond[1]=((((-1.0)*r02*x7565))+((x7557*x7563))+(((-1.0)*x7561*x7566)));
evalcond[2]=((((-1.0)*x7559*x7565))+(((-1.0)*r12*x7566))+((x7558*x7560)));
evalcond[3]=((1.0)+((x7557*x7559))+(((-1.0)*r12*x7565))+(((-1.0)*x7560*x7566)));
evalcond[4]=((((-1.0)*x7562*x7565))+(((-1.0)*r22*x7566))+((cj12*sj11))+((x7558*x7564))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x7563*x7565))+(((-1.0)*r02*x7566))+((x7558*x7561))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x7567=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x7567;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x7567);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x7568=((1.0)*cj15);
IkReal x7569=((((-1.0)*r21*x7568))+(((-1.0)*r20*sj15)));
j14eval[0]=x7569;
j14eval[1]=IKsign(x7569);
j14eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x7568))+((r01*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x7570=r11*r11;
IkReal x7571=cj15*cj15;
IkReal x7572=(cj15*r10);
IkReal x7573=(r11*sj15);
IkReal x7574=((((-1.0)*(r12*r12)))+(((-1.0)*x7571*(r10*r10)))+((x7570*x7571))+(((2.0)*x7572*x7573))+(((-1.0)*x7570)));
j14eval[0]=x7574;
j14eval[1]=((IKabs((x7572+(((-1.0)*x7573)))))+(IKabs(r12)));
j14eval[2]=IKsign(x7574);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7575=r11*r11;
IkReal x7576=cj15*cj15;
IkReal x7577=(cj15*r10);
IkReal x7578=(r11*sj15);
CheckValue<IkReal> x7579 = IKatan2WithCheck(IkReal((x7577+(((-1.0)*x7578)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7579.valid){
continue;
}
CheckValue<IkReal> x7580=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7576*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x7577*x7578))+((x7575*x7576))+(((-1.0)*x7575)))),-1);
if(!x7580.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7579.value)+(((1.5707963267949)*(x7580.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7581=IKsin(j14);
IkReal x7582=IKcos(j14);
IkReal x7583=(r11*sj15);
IkReal x7584=(cj15*r10);
IkReal x7585=(cj15*r00);
IkReal x7586=(r21*sj15);
IkReal x7587=(r01*sj15);
IkReal x7588=(cj15*r20);
IkReal x7589=((1.0)*x7582);
IkReal x7590=((1.0)*x7581);
evalcond[0]=((((-1.0)*r22*x7589))+((x7581*x7586))+(((-1.0)*x7588*x7590)));
evalcond[1]=((((-1.0)*r02*x7589))+((x7581*x7587))+(((-1.0)*x7585*x7590)));
evalcond[2]=(((x7582*x7584))+(((-1.0)*r12*x7590))+(((-1.0)*x7583*x7589)));
evalcond[3]=((-1.0)+((x7581*x7583))+(((-1.0)*r12*x7589))+(((-1.0)*x7584*x7590)));
evalcond[4]=(((x7582*x7588))+(((-1.0)*x7586*x7589))+(((-1.0)*r22*x7590))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((x7582*x7585))+(((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*x7587*x7589))+(((-1.0)*r02*x7590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7591=((1.0)*cj15);
CheckValue<IkReal> x7592=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15))+(((-1.0)*r21*x7591)))),-1);
if(!x7592.valid){
continue;
}
CheckValue<IkReal> x7593 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj15))+(((-1.0)*r00*x7591)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7593.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7592.value)))+(x7593.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7594=IKsin(j14);
IkReal x7595=IKcos(j14);
IkReal x7596=(r11*sj15);
IkReal x7597=(cj15*r10);
IkReal x7598=(cj15*r00);
IkReal x7599=(r21*sj15);
IkReal x7600=(r01*sj15);
IkReal x7601=(cj15*r20);
IkReal x7602=((1.0)*x7595);
IkReal x7603=((1.0)*x7594);
evalcond[0]=(((x7594*x7599))+(((-1.0)*r22*x7602))+(((-1.0)*x7601*x7603)));
evalcond[1]=((((-1.0)*r02*x7602))+(((-1.0)*x7598*x7603))+((x7594*x7600)));
evalcond[2]=(((x7595*x7597))+(((-1.0)*x7596*x7602))+(((-1.0)*r12*x7603)));
evalcond[3]=((-1.0)+((x7594*x7596))+(((-1.0)*x7597*x7603))+(((-1.0)*r12*x7602)));
evalcond[4]=((((-1.0)*r22*x7603))+((cj12*sj11))+(((-1.0)*x7599*x7602))+((x7595*x7601))+((cj11*sj12)));
evalcond[5]=(((x7595*x7598))+(((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*x7600*x7602))+(((-1.0)*r02*x7603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x7604 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7604.valid){
continue;
}
CheckValue<IkReal> x7605=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x7605.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7604.value)+(((1.5707963267949)*(x7605.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7606=IKsin(j14);
IkReal x7607=IKcos(j14);
IkReal x7608=(r11*sj15);
IkReal x7609=(cj15*r10);
IkReal x7610=(cj15*r00);
IkReal x7611=(r21*sj15);
IkReal x7612=(r01*sj15);
IkReal x7613=(cj15*r20);
IkReal x7614=((1.0)*x7607);
IkReal x7615=((1.0)*x7606);
evalcond[0]=((((-1.0)*r22*x7614))+((x7606*x7611))+(((-1.0)*x7613*x7615)));
evalcond[1]=(((x7606*x7612))+(((-1.0)*x7610*x7615))+(((-1.0)*r02*x7614)));
evalcond[2]=((((-1.0)*r12*x7615))+((x7607*x7609))+(((-1.0)*x7608*x7614)));
evalcond[3]=((-1.0)+((x7606*x7608))+(((-1.0)*r12*x7614))+(((-1.0)*x7609*x7615)));
evalcond[4]=((((-1.0)*r22*x7615))+(((-1.0)*x7611*x7614))+((x7607*x7613))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*x7612*x7614))+(((-1.0)*r02*x7615))+((x7607*x7610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7616=((-1.0)*r00);
IkReal x7618 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7618)==0){
continue;
}
IkReal x7617=pow(x7618,-0.5);
CheckValue<IkReal> x7619 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7616),IKFAST_ATAN2_MAGTHRESH);
if(!x7619.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7619.value));
IkReal gconst145=(r01*x7617);
IkReal gconst146=(x7616*x7617);
CheckValue<IkReal> x7620 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7620.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x7620.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x7621=((-1.0)*r00);
IkReal x7622=x7617;
CheckValue<IkReal> x7624 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7621),IKFAST_ATAN2_MAGTHRESH);
if(!x7624.valid){
continue;
}
IkReal x7623=((-1.0)*(x7624.value));
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst145;
cj15=gconst146;
j15=x7623;
IkReal gconst144=x7623;
IkReal gconst145=(r01*x7622);
IkReal gconst146=(x7621*x7622);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7625=((1.0)*gconst145);
CheckValue<IkReal> x7626 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x7625))+((gconst146*r10*sj10))+((cj10*gconst146*r00))+(((-1.0)*cj10*r01*x7625)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7626.valid){
continue;
}
CheckValue<IkReal> x7627=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7625))+(((-1.0)*gconst146*r21)))),-1);
if(!x7627.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7626.value)+(((1.5707963267949)*(x7627.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7628=IKsin(j14);
IkReal x7629=IKcos(j14);
IkReal x7630=(gconst146*r10);
IkReal x7631=((1.0)*sj10);
IkReal x7632=(gconst146*r00);
IkReal x7633=(sj11*sj12);
IkReal x7634=(gconst145*r21);
IkReal x7635=(gconst146*r20);
IkReal x7636=(cj11*cj12);
IkReal x7637=((1.0)*x7629);
IkReal x7638=((1.0)*x7628);
IkReal x7639=(gconst145*x7628);
evalcond[0]=((((-1.0)*r22*x7637))+((x7628*x7634))+(((-1.0)*x7635*x7638)));
evalcond[1]=(((r11*x7639))+(((-1.0)*x7630*x7638))+cj10+(((-1.0)*r12*x7637)));
evalcond[2]=((((-1.0)*x7631))+((r01*x7639))+(((-1.0)*r02*x7637))+(((-1.0)*x7632*x7638)));
evalcond[3]=((((-1.0)*r22*x7638))+((x7629*x7635))+(((-1.0)*x7634*x7637))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((cj10*x7633))+((x7629*x7632))+(((-1.0)*cj10*x7636))+(((-1.0)*gconst145*r01*x7637))+(((-1.0)*r02*x7638)));
evalcond[5]=(((sj10*x7633))+((x7629*x7630))+(((-1.0)*x7631*x7636))+(((-1.0)*gconst145*r11*x7637))+(((-1.0)*r12*x7638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7640=((1.0)*gconst146);
CheckValue<IkReal> x7641=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r10))+(((-1.0)*r11*x7640)))),-1);
if(!x7641.valid){
continue;
}
CheckValue<IkReal> x7642 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x7640))+((gconst145*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7642.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7641.value)))+(x7642.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7643=IKsin(j14);
IkReal x7644=IKcos(j14);
IkReal x7645=(gconst146*r10);
IkReal x7646=((1.0)*sj10);
IkReal x7647=(gconst146*r00);
IkReal x7648=(sj11*sj12);
IkReal x7649=(gconst145*r21);
IkReal x7650=(gconst146*r20);
IkReal x7651=(cj11*cj12);
IkReal x7652=((1.0)*x7644);
IkReal x7653=((1.0)*x7643);
IkReal x7654=(gconst145*x7643);
evalcond[0]=((((-1.0)*x7650*x7653))+(((-1.0)*r22*x7652))+((x7643*x7649)));
evalcond[1]=(((r11*x7654))+cj10+(((-1.0)*r12*x7652))+(((-1.0)*x7645*x7653)));
evalcond[2]=((((-1.0)*x7647*x7653))+(((-1.0)*r02*x7652))+((r01*x7654))+(((-1.0)*x7646)));
evalcond[3]=(((x7644*x7650))+(((-1.0)*r22*x7653))+(((-1.0)*x7649*x7652))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((x7644*x7647))+(((-1.0)*r02*x7653))+(((-1.0)*cj10*x7651))+((cj10*x7648))+(((-1.0)*gconst145*r01*x7652)));
evalcond[5]=(((x7644*x7645))+(((-1.0)*x7646*x7651))+((sj10*x7648))+(((-1.0)*gconst145*r11*x7652))+(((-1.0)*r12*x7653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7655=((-1.0)*r01);
IkReal x7657 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7657)==0){
continue;
}
IkReal x7656=pow(x7657,-0.5);
CheckValue<IkReal> x7658 = IKatan2WithCheck(IkReal(x7655),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7658.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7658.value))));
IkReal gconst148=(x7655*x7656);
IkReal gconst149=((1.0)*r00*x7656);
CheckValue<IkReal> x7659 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7659.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x7659.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[5];
IkReal x7660=((-1.0)*r01);
CheckValue<IkReal> x7663 = IKatan2WithCheck(IkReal(x7660),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7663.valid){
continue;
}
IkReal x7661=((1.0)*(x7663.value));
IkReal x7662=x7656;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst148;
cj15=gconst149;
j15=((3.14159265)+(((-1.0)*x7661)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7661)));
IkReal gconst148=(x7660*x7662);
IkReal gconst149=((1.0)*r00*x7662);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=cj10;
j14eval[3]=r22;
j14eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  || IKabs(j14eval[4]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x7664=((-1.0)*r01);
CheckValue<IkReal> x7667 = IKatan2WithCheck(IkReal(x7664),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7667.valid){
continue;
}
IkReal x7665=((1.0)*(x7667.value));
IkReal x7666=x7656;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst148;
cj15=gconst149;
j15=((3.14159265)+(((-1.0)*x7665)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7665)));
IkReal gconst148=(x7664*x7666);
IkReal gconst149=((1.0)*r00*x7666);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x7668=((-1.0)*r01);
CheckValue<IkReal> x7671 = IKatan2WithCheck(IkReal(x7668),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7671.valid){
continue;
}
IkReal x7669=((1.0)*(x7671.value));
IkReal x7670=x7656;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst148;
cj15=gconst149;
j15=((3.14159265)+(((-1.0)*x7669)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7669)));
IkReal gconst148=(x7668*x7670);
IkReal gconst149=((1.0)*r00*x7670);
IkReal x7672=r02*r02;
IkReal x7673=(r12*sj10);
IkReal x7674=x7656;
IkReal x7675=(cj10*x7674);
j14eval[0]=((IKabs(((((-1.0)*cj10*r02))+(((-1.0)*x7673)))))+(IKabs((((x7672*x7675))+((r02*x7673*x7674))+(((-1.0)*x7675))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7676=((1.0)*gconst148);
CheckValue<IkReal> x7677=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7676))+(((-1.0)*gconst149*r21)))),-1);
if(!x7677.valid){
continue;
}
CheckValue<IkReal> x7678 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x7676))+(((-1.0)*cj10*r01*x7676))+((gconst149*r10*sj10))+((cj10*gconst149*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7678.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7677.value)))+(x7678.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7679=IKsin(j14);
IkReal x7680=IKcos(j14);
IkReal x7681=(gconst148*r21);
IkReal x7682=(gconst148*r01);
IkReal x7683=(gconst149*r20);
IkReal x7684=((1.0)*sj10);
IkReal x7685=(gconst149*r10);
IkReal x7686=(sj11*sj12);
IkReal x7687=(cj11*cj12);
IkReal x7688=(gconst148*r11);
IkReal x7689=(gconst149*r00);
IkReal x7690=((1.0)*x7680);
IkReal x7691=((1.0)*x7679);
evalcond[0]=(((x7679*x7681))+(((-1.0)*r22*x7690))+(((-1.0)*x7683*x7691)));
evalcond[1]=(((x7679*x7688))+(((-1.0)*r12*x7690))+cj10+(((-1.0)*x7685*x7691)));
evalcond[2]=((((-1.0)*r02*x7690))+((x7679*x7682))+(((-1.0)*x7684))+(((-1.0)*x7689*x7691)));
evalcond[3]=(((x7680*x7683))+(((-1.0)*r22*x7691))+(((-1.0)*x7681*x7690))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*r02*x7691))+(((-1.0)*cj10*x7687))+((cj10*x7686))+((x7680*x7689))+(((-1.0)*x7682*x7690)));
evalcond[5]=(((x7680*x7685))+((sj10*x7686))+(((-1.0)*r12*x7691))+(((-1.0)*x7688*x7690))+(((-1.0)*x7684*x7687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7692=((1.0)*gconst149);
CheckValue<IkReal> x7693 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst148*r21*sj10))+(((-1.0)*r20*sj10*x7692)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7693.valid){
continue;
}
CheckValue<IkReal> x7694=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7692))+(((-1.0)*gconst148*r10)))),-1);
if(!x7694.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7693.value)+(((1.5707963267949)*(x7694.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7695=IKsin(j14);
IkReal x7696=IKcos(j14);
IkReal x7697=(gconst148*r21);
IkReal x7698=(gconst148*r01);
IkReal x7699=(gconst149*r20);
IkReal x7700=((1.0)*sj10);
IkReal x7701=(gconst149*r10);
IkReal x7702=(sj11*sj12);
IkReal x7703=(cj11*cj12);
IkReal x7704=(gconst148*r11);
IkReal x7705=(gconst149*r00);
IkReal x7706=((1.0)*x7696);
IkReal x7707=((1.0)*x7695);
evalcond[0]=((((-1.0)*r22*x7706))+((x7695*x7697))+(((-1.0)*x7699*x7707)));
evalcond[1]=(((x7695*x7704))+(((-1.0)*r12*x7706))+cj10+(((-1.0)*x7701*x7707)));
evalcond[2]=(((x7695*x7698))+(((-1.0)*x7705*x7707))+(((-1.0)*x7700))+(((-1.0)*r02*x7706)));
evalcond[3]=((((-1.0)*x7697*x7706))+(((-1.0)*r22*x7707))+((x7696*x7699))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*x7698*x7706))+((cj10*x7702))+((x7696*x7705))+(((-1.0)*r02*x7707))+(((-1.0)*cj10*x7703)));
evalcond[5]=(((x7696*x7701))+(((-1.0)*r12*x7707))+((sj10*x7702))+(((-1.0)*x7700*x7703))+(((-1.0)*x7704*x7706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7708=((1.0)*gconst149);
CheckValue<IkReal> x7709 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x7708))+((cj10*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7709.valid){
continue;
}
CheckValue<IkReal> x7710=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7708))+(((-1.0)*gconst148*r00)))),-1);
if(!x7710.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7709.value)+(((1.5707963267949)*(x7710.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7711=IKsin(j14);
IkReal x7712=IKcos(j14);
IkReal x7713=(gconst148*r21);
IkReal x7714=(gconst148*r01);
IkReal x7715=(gconst149*r20);
IkReal x7716=((1.0)*sj10);
IkReal x7717=(gconst149*r10);
IkReal x7718=(sj11*sj12);
IkReal x7719=(cj11*cj12);
IkReal x7720=(gconst148*r11);
IkReal x7721=(gconst149*r00);
IkReal x7722=((1.0)*x7712);
IkReal x7723=((1.0)*x7711);
evalcond[0]=((((-1.0)*x7715*x7723))+((x7711*x7713))+(((-1.0)*r22*x7722)));
evalcond[1]=(((x7711*x7720))+cj10+(((-1.0)*x7717*x7723))+(((-1.0)*r12*x7722)));
evalcond[2]=((((-1.0)*x7716))+(((-1.0)*r02*x7722))+((x7711*x7714))+(((-1.0)*x7721*x7723)));
evalcond[3]=((((-1.0)*x7713*x7722))+((cj12*sj11))+((x7712*x7715))+(((-1.0)*r22*x7723))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj10*x7719))+((x7712*x7721))+(((-1.0)*x7714*x7722))+((cj10*x7718))+(((-1.0)*r02*x7723)));
evalcond[5]=(((sj10*x7718))+((x7712*x7717))+(((-1.0)*x7720*x7722))+(((-1.0)*x7716*x7719))+(((-1.0)*r12*x7723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x7724=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x7724;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x7724);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x7725=((1.0)*cj15);
IkReal x7726=((((-1.0)*r10*sj15))+(((-1.0)*r11*x7725)));
j14eval[0]=x7726;
j14eval[1]=IKsign(x7726);
j14eval[2]=((IKabs((((r21*sj15))+(((-1.0)*r20*x7725)))))+(IKabs(r22)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x7727=r01*r01;
IkReal x7728=cj15*cj15;
IkReal x7729=(r01*sj15);
IkReal x7730=(cj15*r00);
IkReal x7731=((((2.0)*x7729*x7730))+(((-1.0)*x7728*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x7727))+((x7727*x7728)));
j14eval[0]=x7731;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x7729))+x7730))));
j14eval[2]=IKsign(x7731);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7732=r01*r01;
IkReal x7733=cj15*cj15;
IkReal x7734=(r01*sj15);
IkReal x7735=(cj15*r00);
CheckValue<IkReal> x7736 = IKatan2WithCheck(IkReal(((((-1.0)*x7734))+x7735)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7736.valid){
continue;
}
CheckValue<IkReal> x7737=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7732))+((x7732*x7733))+(((-1.0)*(r02*r02)))+(((-1.0)*x7733*(r00*r00)))+(((2.0)*x7734*x7735)))),-1);
if(!x7737.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7736.value)+(((1.5707963267949)*(x7737.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7738=IKsin(j14);
IkReal x7739=IKcos(j14);
IkReal x7740=(r11*sj15);
IkReal x7741=(cj15*r10);
IkReal x7742=(cj15*r00);
IkReal x7743=(r21*sj15);
IkReal x7744=(r01*sj15);
IkReal x7745=(cj15*r20);
IkReal x7746=((1.0)*x7739);
IkReal x7747=((1.0)*x7738);
evalcond[0]=((((-1.0)*r22*x7746))+((x7738*x7743))+(((-1.0)*x7745*x7747)));
evalcond[1]=((((-1.0)*x7741*x7747))+((x7738*x7740))+(((-1.0)*r12*x7746)));
evalcond[2]=((((-1.0)*x7744*x7746))+(((-1.0)*r02*x7747))+((x7739*x7742)));
evalcond[3]=((-1.0)+(((-1.0)*x7742*x7747))+(((-1.0)*r02*x7746))+((x7738*x7744)));
evalcond[4]=((((-1.0)*r22*x7747))+(((-1.0)*x7743*x7746))+((x7739*x7745))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x7740*x7746))+(((-1.0)*r12*x7747))+((x7739*x7741))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7748=((1.0)*cj15);
CheckValue<IkReal> x7749 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj15))+(((-1.0)*r20*x7748)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7749.valid){
continue;
}
CheckValue<IkReal> x7750=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7748))+(((-1.0)*r10*sj15)))),-1);
if(!x7750.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7749.value)+(((1.5707963267949)*(x7750.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7751=IKsin(j14);
IkReal x7752=IKcos(j14);
IkReal x7753=(r11*sj15);
IkReal x7754=(cj15*r10);
IkReal x7755=(cj15*r00);
IkReal x7756=(r21*sj15);
IkReal x7757=(r01*sj15);
IkReal x7758=(cj15*r20);
IkReal x7759=((1.0)*x7752);
IkReal x7760=((1.0)*x7751);
evalcond[0]=((((-1.0)*r22*x7759))+(((-1.0)*x7758*x7760))+((x7751*x7756)));
evalcond[1]=((((-1.0)*x7754*x7760))+(((-1.0)*r12*x7759))+((x7751*x7753)));
evalcond[2]=((((-1.0)*x7757*x7759))+((x7752*x7755))+(((-1.0)*r02*x7760)));
evalcond[3]=((-1.0)+(((-1.0)*x7755*x7760))+(((-1.0)*r02*x7759))+((x7751*x7757)));
evalcond[4]=(((x7752*x7758))+(((-1.0)*r22*x7760))+(((-1.0)*x7756*x7759))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x7752*x7754))+(((-1.0)*x7753*x7759))+(((-1.0)*r12*x7760))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x7761=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x7761.valid){
continue;
}
CheckValue<IkReal> x7762 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7762.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7761.value)))+(x7762.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7763=IKsin(j14);
IkReal x7764=IKcos(j14);
IkReal x7765=(r11*sj15);
IkReal x7766=(cj15*r10);
IkReal x7767=(cj15*r00);
IkReal x7768=(r21*sj15);
IkReal x7769=(r01*sj15);
IkReal x7770=(cj15*r20);
IkReal x7771=((1.0)*x7764);
IkReal x7772=((1.0)*x7763);
evalcond[0]=((((-1.0)*r22*x7771))+(((-1.0)*x7770*x7772))+((x7763*x7768)));
evalcond[1]=((((-1.0)*x7766*x7772))+((x7763*x7765))+(((-1.0)*r12*x7771)));
evalcond[2]=((((-1.0)*r02*x7772))+(((-1.0)*x7769*x7771))+((x7764*x7767)));
evalcond[3]=((-1.0)+(((-1.0)*x7767*x7772))+(((-1.0)*r02*x7771))+((x7763*x7769)));
evalcond[4]=((((-1.0)*r22*x7772))+(((-1.0)*x7768*x7771))+((x7764*x7770))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x7764*x7766))+(((-1.0)*r12*x7772))+(((-1.0)*x7765*x7771))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x7773=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x7773;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x7773);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x7774=((1.0)*cj15);
IkReal x7775=((((-1.0)*r20*sj15))+(((-1.0)*r21*x7774)));
j14eval[0]=x7775;
j14eval[1]=IKsign(x7775);
j14eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x7774))+((r11*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x7776=cj15*cj15;
IkReal x7777=r01*r01;
IkReal x7778=(cj15*r00);
IkReal x7779=(r01*sj15);
IkReal x7780=((((-1.0)*x7776*x7777))+(((-2.0)*x7778*x7779))+((x7776*(r00*r00)))+(r02*r02)+x7777);
j14eval[0]=x7780;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x7779))+x7778))));
j14eval[2]=IKsign(x7780);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7781=cj15*cj15;
IkReal x7782=r01*r01;
IkReal x7783=(r01*sj15);
IkReal x7784=(cj15*r00);
CheckValue<IkReal> x7785=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7783*x7784))+(((-1.0)*x7781*x7782))+(r02*r02)+((x7781*(r00*r00)))+x7782)),-1);
if(!x7785.valid){
continue;
}
CheckValue<IkReal> x7786 = IKatan2WithCheck(IkReal((x7784+(((-1.0)*x7783)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7786.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7785.value)))+(x7786.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7787=IKsin(j14);
IkReal x7788=IKcos(j14);
IkReal x7789=(r11*sj15);
IkReal x7790=(cj15*r10);
IkReal x7791=(cj15*r00);
IkReal x7792=(r21*sj15);
IkReal x7793=(r01*sj15);
IkReal x7794=(cj15*r20);
IkReal x7795=((1.0)*x7788);
IkReal x7796=((1.0)*x7787);
evalcond[0]=((((-1.0)*r22*x7795))+((x7787*x7792))+(((-1.0)*x7794*x7796)));
evalcond[1]=(((x7787*x7789))+(((-1.0)*r12*x7795))+(((-1.0)*x7790*x7796)));
evalcond[2]=(((x7788*x7791))+(((-1.0)*x7793*x7795))+(((-1.0)*r02*x7796)));
evalcond[3]=((1.0)+(((-1.0)*x7791*x7796))+(((-1.0)*r02*x7795))+((x7787*x7793)));
evalcond[4]=((((-1.0)*r22*x7796))+((x7788*x7794))+(((-1.0)*x7792*x7795))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((x7788*x7790))+(((-1.0)*sj11*sj12))+(((-1.0)*r12*x7796))+((cj11*cj12))+(((-1.0)*x7789*x7795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7797=((1.0)*cj15);
CheckValue<IkReal> x7798 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x7797))+((r11*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7798.valid){
continue;
}
CheckValue<IkReal> x7799=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15))+(((-1.0)*r21*x7797)))),-1);
if(!x7799.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7798.value)+(((1.5707963267949)*(x7799.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7800=IKsin(j14);
IkReal x7801=IKcos(j14);
IkReal x7802=(r11*sj15);
IkReal x7803=(cj15*r10);
IkReal x7804=(cj15*r00);
IkReal x7805=(r21*sj15);
IkReal x7806=(r01*sj15);
IkReal x7807=(cj15*r20);
IkReal x7808=((1.0)*x7801);
IkReal x7809=((1.0)*x7800);
evalcond[0]=(((x7800*x7805))+(((-1.0)*x7807*x7809))+(((-1.0)*r22*x7808)));
evalcond[1]=(((x7800*x7802))+(((-1.0)*r12*x7808))+(((-1.0)*x7803*x7809)));
evalcond[2]=((((-1.0)*r02*x7809))+((x7801*x7804))+(((-1.0)*x7806*x7808)));
evalcond[3]=((1.0)+((x7800*x7806))+(((-1.0)*r02*x7808))+(((-1.0)*x7804*x7809)));
evalcond[4]=((((-1.0)*x7805*x7808))+(((-1.0)*r22*x7809))+((cj12*sj11))+((x7801*x7807))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+(((-1.0)*r12*x7809))+((cj11*cj12))+(((-1.0)*x7802*x7808))+((x7801*x7803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x7810=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x7810.valid){
continue;
}
CheckValue<IkReal> x7811 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7811.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7810.value)))+(x7811.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7812=IKsin(j14);
IkReal x7813=IKcos(j14);
IkReal x7814=(r11*sj15);
IkReal x7815=(cj15*r10);
IkReal x7816=(cj15*r00);
IkReal x7817=(r21*sj15);
IkReal x7818=(r01*sj15);
IkReal x7819=(cj15*r20);
IkReal x7820=((1.0)*x7813);
IkReal x7821=((1.0)*x7812);
evalcond[0]=(((x7812*x7817))+(((-1.0)*r22*x7820))+(((-1.0)*x7819*x7821)));
evalcond[1]=(((x7812*x7814))+(((-1.0)*x7815*x7821))+(((-1.0)*r12*x7820)));
evalcond[2]=(((x7813*x7816))+(((-1.0)*r02*x7821))+(((-1.0)*x7818*x7820)));
evalcond[3]=((1.0)+((x7812*x7818))+(((-1.0)*r02*x7820))+(((-1.0)*x7816*x7821)));
evalcond[4]=(((x7813*x7819))+(((-1.0)*x7817*x7820))+(((-1.0)*r22*x7821))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((x7813*x7815))+(((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*x7814*x7820))+(((-1.0)*r12*x7821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x7822=((-1.0)*px);
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7822);
rxp1_1=(px*r21);
rxp1_2=(r11*x7822);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x7823=((-1.0)*px);
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7823);
rxp1_1=(px*r21);
rxp1_2=(r11*x7823);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=((((-1.0)*r21*sj15))+((cj15*r20)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x7824=((-1.0)*px);
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7824);
rxp1_1=(px*r21);
rxp1_2=(r11*x7824);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=(((cj15*r10))+(((-1.0)*r11*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x7827=IKPowWithIntegerCheck((((cj15*r10))+(((-1.0)*r11*sj15))),-1);
if(!x7827.valid){
continue;
}
IkReal x7825=x7827.value;
IkReal x7826=(sj10*x7825);
cj14array[0]=((((-1.0)*sj11*sj12*x7826))+((cj11*cj12*x7826)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x7828=IKsin(j14);
IkReal x7829=IKcos(j14);
IkReal x7830=(sj15*x7828);
IkReal x7831=((1.0)*x7829);
IkReal x7832=((1.0)*cj15*x7828);
evalcond[0]=((-1.0)*r02*x7828);
evalcond[1]=((((-1.0)*r02*x7831))+(((-1.0)*sj10)));
evalcond[2]=(((r21*x7830))+(((-1.0)*r20*x7832)));
evalcond[3]=((((-1.0)*r10*x7832))+((r11*x7830)));
evalcond[4]=(((cj15*r20*x7829))+(((-1.0)*r21*sj15*x7831))+((cj12*sj11))+((cj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x7835=IKPowWithIntegerCheck(((((-1.0)*r21*sj15))+((cj15*r20))),-1);
if(!x7835.valid){
continue;
}
IkReal x7833=x7835.value;
IkReal x7834=((1.0)*x7833);
cj14array[0]=((((-1.0)*cj12*sj11*x7834))+(((-1.0)*cj11*sj12*x7834)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x7836=IKsin(j14);
IkReal x7837=IKcos(j14);
IkReal x7838=(cj15*r10);
IkReal x7839=((1.0)*sj10);
IkReal x7840=(sj15*x7836);
IkReal x7841=((1.0)*x7837);
IkReal x7842=((1.0)*x7836);
evalcond[0]=((-1.0)*r02*x7836);
evalcond[1]=((((-1.0)*r02*x7841))+(((-1.0)*x7839)));
evalcond[2]=(((r21*x7840))+(((-1.0)*cj15*r20*x7842)));
evalcond[3]=((((-1.0)*x7838*x7842))+((r11*x7840)));
evalcond[4]=((((-1.0)*cj11*cj12*x7839))+(((-1.0)*r11*sj15*x7841))+((x7837*x7838))+((sj10*sj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x7843=IKPowWithIntegerCheck(r02,-1);
if(!x7843.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x7843.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x7844=IKsin(j14);
IkReal x7845=IKcos(j14);
IkReal x7846=(cj15*r10);
IkReal x7847=(cj15*r20);
IkReal x7848=(sj15*x7844);
IkReal x7849=((1.0)*x7844);
IkReal x7850=((1.0)*sj15*x7845);
evalcond[0]=((-1.0)*r02*x7844);
evalcond[1]=(((r21*x7848))+(((-1.0)*x7847*x7849)));
evalcond[2]=((((-1.0)*x7846*x7849))+((r11*x7848)));
evalcond[3]=((((-1.0)*r21*x7850))+((cj12*sj11))+((x7845*x7847))+((cj11*sj12)));
evalcond[4]=((((-1.0)*r11*x7850))+(((-1.0)*cj11*cj12*sj10))+((sj10*sj11*sj12))+((x7845*x7846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7851=((1.0)*sj15);
CheckValue<IkReal> x7852=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj15*r21))+(((-1.0)*r20*x7851)))),-1);
if(!x7852.valid){
continue;
}
CheckValue<IkReal> x7853 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((cj15*r10*sj10))+(((-1.0)*cj10*r01*x7851))+(((-1.0)*r11*sj10*x7851))+((cj10*cj15*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7853.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7852.value)))+(x7853.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7854=IKsin(j14);
IkReal x7855=IKcos(j14);
IkReal x7856=(r11*sj15);
IkReal x7857=((1.0)*sj10);
IkReal x7858=(sj11*sj12);
IkReal x7859=(cj15*r10);
IkReal x7860=(r21*sj15);
IkReal x7861=(r01*sj15);
IkReal x7862=(cj11*cj12);
IkReal x7863=((1.0)*x7855);
IkReal x7864=((1.0)*x7854);
IkReal x7865=(cj15*x7855);
evalcond[0]=(((x7854*x7860))+(((-1.0)*cj15*r20*x7864))+(((-1.0)*r22*x7863)));
evalcond[1]=((((-1.0)*x7859*x7864))+cj10+(((-1.0)*r12*x7863))+((x7854*x7856)));
evalcond[2]=((((-1.0)*cj15*r00*x7864))+(((-1.0)*r02*x7863))+((x7854*x7861))+(((-1.0)*x7857)));
evalcond[3]=(((r20*x7865))+((cj12*sj11))+(((-1.0)*x7860*x7863))+((cj11*sj12))+(((-1.0)*r22*x7864)));
evalcond[4]=((((-1.0)*cj10*x7862))+((r00*x7865))+(((-1.0)*r02*x7864))+((cj10*x7858))+(((-1.0)*x7861*x7863)));
evalcond[5]=((((-1.0)*r12*x7864))+(((-1.0)*x7857*x7862))+(((-1.0)*x7856*x7863))+((sj10*x7858))+((x7855*x7859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7866=((1.0)*cj15);
CheckValue<IkReal> x7867 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x7866))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7867.valid){
continue;
}
CheckValue<IkReal> x7868=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7866))+(((-1.0)*r10*sj15)))),-1);
if(!x7868.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7867.value)+(((1.5707963267949)*(x7868.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7869=IKsin(j14);
IkReal x7870=IKcos(j14);
IkReal x7871=(r11*sj15);
IkReal x7872=((1.0)*sj10);
IkReal x7873=(sj11*sj12);
IkReal x7874=(cj15*r10);
IkReal x7875=(r21*sj15);
IkReal x7876=(r01*sj15);
IkReal x7877=(cj11*cj12);
IkReal x7878=((1.0)*x7870);
IkReal x7879=((1.0)*x7869);
IkReal x7880=(cj15*x7870);
evalcond[0]=((((-1.0)*r22*x7878))+((x7869*x7875))+(((-1.0)*cj15*r20*x7879)));
evalcond[1]=((((-1.0)*x7874*x7879))+(((-1.0)*r12*x7878))+cj10+((x7869*x7871)));
evalcond[2]=((((-1.0)*cj15*r00*x7879))+((x7869*x7876))+(((-1.0)*x7872))+(((-1.0)*r02*x7878)));
evalcond[3]=((((-1.0)*r22*x7879))+(((-1.0)*x7875*x7878))+((r20*x7880))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj10*x7877))+(((-1.0)*x7876*x7878))+((r00*x7880))+((cj10*x7873))+(((-1.0)*r02*x7879)));
evalcond[5]=((((-1.0)*x7872*x7877))+(((-1.0)*x7871*x7878))+(((-1.0)*r12*x7879))+((sj10*x7873))+((x7870*x7874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7881=((1.0)*cj15);
CheckValue<IkReal> x7882 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x7881))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7882.valid){
continue;
}
CheckValue<IkReal> x7883=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7881))+(((-1.0)*r00*sj15)))),-1);
if(!x7883.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7882.value)+(((1.5707963267949)*(x7883.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7884=IKsin(j14);
IkReal x7885=IKcos(j14);
IkReal x7886=(r11*sj15);
IkReal x7887=((1.0)*sj10);
IkReal x7888=(sj11*sj12);
IkReal x7889=(cj15*r10);
IkReal x7890=(r21*sj15);
IkReal x7891=(r01*sj15);
IkReal x7892=(cj11*cj12);
IkReal x7893=((1.0)*x7885);
IkReal x7894=((1.0)*x7884);
IkReal x7895=(cj15*x7885);
evalcond[0]=((((-1.0)*cj15*r20*x7894))+(((-1.0)*r22*x7893))+((x7884*x7890)));
evalcond[1]=(((x7884*x7886))+(((-1.0)*r12*x7893))+cj10+(((-1.0)*x7889*x7894)));
evalcond[2]=((((-1.0)*x7887))+((x7884*x7891))+(((-1.0)*cj15*r00*x7894))+(((-1.0)*r02*x7893)));
evalcond[3]=(((cj12*sj11))+(((-1.0)*r22*x7894))+(((-1.0)*x7890*x7893))+((cj11*sj12))+((r20*x7895)));
evalcond[4]=((((-1.0)*x7891*x7893))+((cj10*x7888))+(((-1.0)*cj10*x7892))+((r00*x7895))+(((-1.0)*r02*x7894)));
evalcond[5]=(((x7885*x7889))+(((-1.0)*x7886*x7893))+(((-1.0)*r12*x7894))+(((-1.0)*x7887*x7892))+((sj10*x7888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7896=cj15*cj15;
IkReal x7897=r21*r21;
IkReal x7898=(cj12*sj11);
IkReal x7899=(r21*sj15);
IkReal x7900=(cj11*sj12);
IkReal x7901=((1.0)*cj15*r20);
CheckValue<IkReal> x7902 = IKatan2WithCheck(IkReal((((r22*x7898))+((r22*x7900)))),IkReal(((((-1.0)*x7898*x7901))+((x7899*x7900))+(((-1.0)*x7900*x7901))+((x7898*x7899)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7902.valid){
continue;
}
CheckValue<IkReal> x7903=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7896*x7897))+(r22*r22)+(((-2.0)*cj15*r20*x7899))+x7897+((x7896*(r20*r20))))),-1);
if(!x7903.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7902.value)+(((1.5707963267949)*(x7903.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
IkReal x7904=IKsin(j14);
IkReal x7905=IKcos(j14);
IkReal x7906=(r21*sj15);
IkReal x7907=((1.0)*r22);
IkReal x7908=(cj15*r20);
evalcond[0]=((((-1.0)*x7905*x7907))+(((-1.0)*x7904*x7908))+((x7904*x7906)));
evalcond[1]=((((-1.0)*x7905*x7906))+(((-1.0)*x7904*x7907))+((cj12*sj11))+((cj11*sj12))+((x7905*x7908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7909=(cj15*sj14);
IkReal x7910=(sj14*sj15);
if( IKabs(((((-1.0)*r00*x7909))+(((-1.0)*cj14*r02))+((r01*x7910)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj14*r12))+((r10*x7909))+(((-1.0)*r11*x7910)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x7909))+(((-1.0)*cj14*r02))+((r01*x7910))))+IKsqr((((cj14*r12))+((r10*x7909))+(((-1.0)*r11*x7910))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r00*x7909))+(((-1.0)*cj14*r02))+((r01*x7910))), (((cj14*r12))+((r10*x7909))+(((-1.0)*r11*x7910))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x7911=IKcos(j10);
IkReal x7912=IKsin(j10);
IkReal x7913=(sj11*sj12);
IkReal x7914=((1.0)*cj14);
IkReal x7915=(r01*sj15);
IkReal x7916=((1.0)*cj15);
IkReal x7917=(cj14*cj15);
IkReal x7918=(r11*sj15);
IkReal x7919=(cj11*cj12);
IkReal x7920=((1.0)*sj12);
IkReal x7921=(cj12*sj11);
IkReal x7922=((0.08535)*sj15);
IkReal x7923=((1.0)*sj14);
IkReal x7924=((1.0)*sj15);
IkReal x7925=((0.08535)*cj15);
IkReal x7926=(cj11*x7912);
IkReal x7927=((0.21325)*x7911);
IkReal x7928=((1.0)*x7911);
IkReal x7929=(cj11*x7911);
IkReal x7930=((1.0)*x7912);
evalcond[0]=(((sj14*x7918))+x7911+(((-1.0)*r12*x7914))+(((-1.0)*r10*sj14*x7916)));
evalcond[1]=(((sj14*x7915))+(((-1.0)*r02*x7914))+(((-1.0)*r00*sj14*x7916))+(((-1.0)*x7930)));
evalcond[2]=((((-1.0)*x7921*x7928))+(((-1.0)*x7920*x7929))+(((-1.0)*r01*x7916))+(((-1.0)*r00*x7924)));
evalcond[3]=((((-1.0)*x7920*x7926))+(((-1.0)*r10*x7924))+(((-1.0)*r11*x7916))+(((-1.0)*x7921*x7930)));
evalcond[4]=((((-1.0)*r02*x7923))+((x7911*x7913))+(((-1.0)*x7914*x7915))+((r00*x7917))+(((-1.0)*x7919*x7928)));
evalcond[5]=((((-1.0)*x7919*x7930))+((x7912*x7913))+((r10*x7917))+(((-1.0)*x7914*x7918))+(((-1.0)*r12*x7923)));
evalcond[6]=((((-1.0)*x7913*x7927))+(((-1.0)*px))+(((0.24365)*x7929))+((x7919*x7927))+(((-1.0)*r01*x7925))+(((-0.11235)*x7912))+(((-1.0)*r00*x7922)));
evalcond[7]=((((0.21325)*x7912*x7919))+(((0.11235)*x7911))+(((-0.21325)*x7912*x7913))+(((-1.0)*r10*x7922))+(((-1.0)*r11*x7925))+(((-1.0)*py))+(((0.24365)*x7926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x7931=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*sj11)))),-1);
if(!x7931.valid){
continue;
}
CheckValue<IkReal> x7932 = IKatan2WithCheck(IkReal((((cj15*r11))+((r10*sj15)))),IkReal((((cj15*r01))+((r00*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7932.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7931.value)))+(x7932.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x7933=IKcos(j10);
IkReal x7934=IKsin(j10);
IkReal x7935=(sj11*sj12);
IkReal x7936=((1.0)*cj15);
IkReal x7937=((1.0)*sj12);
IkReal x7938=((0.08535)*sj15);
IkReal x7939=((1.0)*sj15);
IkReal x7940=((0.08535)*cj15);
IkReal x7941=(cj11*x7934);
IkReal x7942=((0.21325)*x7933);
IkReal x7943=((1.0)*cj12*sj11);
IkReal x7944=(cj11*x7933);
evalcond[0]=((((-1.0)*r00*x7939))+(((-1.0)*r01*x7936))+(((-1.0)*x7937*x7944))+(((-1.0)*x7933*x7943)));
evalcond[1]=((((-1.0)*x7934*x7943))+(((-1.0)*x7937*x7941))+(((-1.0)*r11*x7936))+(((-1.0)*r10*x7939)));
evalcond[2]=((((-1.0)*r01*x7940))+(((-1.0)*r00*x7938))+(((-1.0)*x7935*x7942))+(((-1.0)*px))+((cj11*cj12*x7942))+(((-0.11235)*x7934))+(((0.24365)*x7944)));
evalcond[3]=((((-1.0)*r11*x7940))+(((-0.21325)*x7934*x7935))+(((-1.0)*py))+(((-1.0)*r10*x7938))+(((0.24365)*x7941))+(((0.11235)*x7933))+(((0.21325)*cj12*x7941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x7945=((1.0)*cj15);
IkReal x7946=((((-1.0)*r01*x7945))+(((-1.0)*r00*sj15)));
j14eval[0]=x7946;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x7945))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x7946);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x7947=((1.0)*cj15);
IkReal x7948=((((-1.0)*r11*x7947))+(((-1.0)*r10*sj15)));
j14eval[0]=x7948;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x7947))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x7948);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x7949=((1.0)*sj15);
IkReal x7950=((((-1.0)*cj15*r21))+(((-1.0)*r20*x7949)));
j14eval[0]=x7950;
j14eval[1]=((IKabs((((cj15*r10*sj10))+(((-1.0)*r11*sj10*x7949))+(((-1.0)*cj10*r01*x7949))+((cj10*cj15*r00)))))+(IKabs(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02))))));
j14eval[2]=IKsign(x7950);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7951=((-1.0)*r20);
IkReal x7953 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7953)==0){
continue;
}
IkReal x7952=pow(x7953,-0.5);
CheckValue<IkReal> x7954 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7951),IKFAST_ATAN2_MAGTHRESH);
if(!x7954.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7954.value));
IkReal gconst133=(r21*x7952);
IkReal gconst134=(x7951*x7952);
CheckValue<IkReal> x7955 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7955.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x7955.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x7956=((-1.0)*r20);
IkReal x7957=x7952;
CheckValue<IkReal> x7959 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7956),IKFAST_ATAN2_MAGTHRESH);
if(!x7959.valid){
continue;
}
IkReal x7958=((-1.0)*(x7959.value));
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst133;
cj15=gconst134;
j15=x7958;
IkReal gconst132=x7958;
IkReal gconst133=(r21*x7957);
IkReal gconst134=(x7956*x7957);
j14eval[0]=cj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x7960=((-1.0)*r20);
IkReal x7961=x7952;
CheckValue<IkReal> x7963 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7960),IKFAST_ATAN2_MAGTHRESH);
if(!x7963.valid){
continue;
}
IkReal x7962=((-1.0)*(x7963.value));
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst133;
cj15=gconst134;
j15=x7962;
IkReal gconst132=x7962;
IkReal gconst133=(r21*x7961);
IkReal gconst134=(x7960*x7961);
j14eval[0]=sj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x7964=((-1.0)*r20);
IkReal x7965=x7952;
CheckValue<IkReal> x7967 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7964),IKFAST_ATAN2_MAGTHRESH);
if(!x7967.valid){
continue;
}
IkReal x7966=((-1.0)*(x7967.value));
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst133;
cj15=gconst134;
j15=x7966;
IkReal gconst132=x7966;
IkReal gconst133=(r21*x7965);
IkReal gconst134=(x7964*x7965);
IkReal x7968=r22*r22;
CheckValue<IkReal> x7971=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7968))),-1);
if(!x7971.valid){
continue;
}
IkReal x7969=x7971.value;
IkReal x7970=(((x7969*(r20*r20*r20*r20)))+(((2.0)*x7969*(r20*r20)*(r21*r21)))+((x7969*(r21*r21*r21*r21)))+x7968);
j14eval[0]=x7970;
j14eval[1]=IKsign(x7970);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7972=(gconst134*r20);
IkReal x7973=(cj12*sj11);
IkReal x7974=(gconst133*r21);
IkReal x7975=(cj11*sj12);
CheckValue<IkReal> x7976 = IKatan2WithCheck(IkReal((((r22*x7975))+((r22*x7973)))),IkReal(((((-1.0)*x7972*x7973))+(((-1.0)*x7972*x7975))+((x7973*x7974))+((x7974*x7975)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7976.valid){
continue;
}
CheckValue<IkReal> x7977=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x7972*x7974))+(x7972*x7972)+(x7974*x7974))),-1);
if(!x7977.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7976.value)+(((1.5707963267949)*(x7977.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7978=IKsin(j14);
IkReal x7979=IKcos(j14);
IkReal x7980=((1.0)*sj10);
IkReal x7981=(gconst134*r20);
IkReal x7982=(gconst134*r10);
IkReal x7983=(gconst134*r00);
IkReal x7984=(sj11*sj12);
IkReal x7985=(cj11*cj12);
IkReal x7986=((1.0)*x7979);
IkReal x7987=((1.0)*x7978);
IkReal x7988=(gconst133*x7978);
evalcond[0]=((((-1.0)*r22*x7986))+(((-1.0)*x7981*x7987))+((r21*x7988)));
evalcond[1]=((((-1.0)*r12*x7986))+(((-1.0)*x7982*x7987))+cj10+((r11*x7988)));
evalcond[2]=(((r01*x7988))+(((-1.0)*x7983*x7987))+(((-1.0)*x7980))+(((-1.0)*r02*x7986)));
evalcond[3]=((((-1.0)*r22*x7987))+(((-1.0)*gconst133*r21*x7986))+((cj12*sj11))+((x7979*x7981))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj10*x7985))+((cj10*x7984))+((x7979*x7983))+(((-1.0)*r02*x7987))+(((-1.0)*gconst133*r01*x7986)));
evalcond[5]=((((-1.0)*r12*x7987))+(((-1.0)*x7980*x7985))+(((-1.0)*gconst133*r11*x7986))+((x7979*x7982))+((sj10*x7984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7989=((1.0)*gconst134);
CheckValue<IkReal> x7990=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7989)))),-1);
if(!x7990.valid){
continue;
}
CheckValue<IkReal> x7991 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x7989))+((gconst133*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7991.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7990.value)))+(x7991.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7992=IKsin(j14);
IkReal x7993=IKcos(j14);
IkReal x7994=((1.0)*sj10);
IkReal x7995=(gconst134*r20);
IkReal x7996=(gconst134*r10);
IkReal x7997=(gconst134*r00);
IkReal x7998=(sj11*sj12);
IkReal x7999=(cj11*cj12);
IkReal x8000=((1.0)*x7993);
IkReal x8001=((1.0)*x7992);
IkReal x8002=(gconst133*x7992);
evalcond[0]=((((-1.0)*x7995*x8001))+((r21*x8002))+(((-1.0)*r22*x8000)));
evalcond[1]=((((-1.0)*x7996*x8001))+((r11*x8002))+(((-1.0)*r12*x8000))+cj10);
evalcond[2]=(((r01*x8002))+(((-1.0)*x7997*x8001))+(((-1.0)*x7994))+(((-1.0)*r02*x8000)));
evalcond[3]=(((x7993*x7995))+((cj12*sj11))+(((-1.0)*r22*x8001))+(((-1.0)*gconst133*r21*x8000))+((cj11*sj12)));
evalcond[4]=((((-1.0)*gconst133*r01*x8000))+(((-1.0)*cj10*x7999))+((x7993*x7997))+((cj10*x7998))+(((-1.0)*r02*x8001)));
evalcond[5]=((((-1.0)*r12*x8001))+((x7993*x7996))+(((-1.0)*gconst133*r11*x8000))+(((-1.0)*x7994*x7999))+((sj10*x7998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8003=((1.0)*gconst134);
CheckValue<IkReal> x8004 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst133*r21))+(((-1.0)*cj10*r20*x8003)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8004.valid){
continue;
}
CheckValue<IkReal> x8005=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x8003)))),-1);
if(!x8005.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8004.value)+(((1.5707963267949)*(x8005.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8006=IKsin(j14);
IkReal x8007=IKcos(j14);
IkReal x8008=((1.0)*sj10);
IkReal x8009=(gconst134*r20);
IkReal x8010=(gconst134*r10);
IkReal x8011=(gconst134*r00);
IkReal x8012=(sj11*sj12);
IkReal x8013=(cj11*cj12);
IkReal x8014=((1.0)*x8007);
IkReal x8015=((1.0)*x8006);
IkReal x8016=(gconst133*x8006);
evalcond[0]=((((-1.0)*r22*x8014))+(((-1.0)*x8009*x8015))+((r21*x8016)));
evalcond[1]=((((-1.0)*x8010*x8015))+cj10+((r11*x8016))+(((-1.0)*r12*x8014)));
evalcond[2]=((((-1.0)*x8011*x8015))+(((-1.0)*r02*x8014))+((r01*x8016))+(((-1.0)*x8008)));
evalcond[3]=((((-1.0)*r22*x8015))+((cj12*sj11))+(((-1.0)*gconst133*r21*x8014))+((cj11*sj12))+((x8007*x8009)));
evalcond[4]=((((-1.0)*r02*x8015))+((cj10*x8012))+(((-1.0)*gconst133*r01*x8014))+((x8007*x8011))+(((-1.0)*cj10*x8013)));
evalcond[5]=((((-1.0)*x8008*x8013))+((sj10*x8012))+((x8007*x8010))+(((-1.0)*r12*x8015))+(((-1.0)*gconst133*r11*x8014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8017=((-1.0)*r21);
IkReal x8019 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8019)==0){
continue;
}
IkReal x8018=pow(x8019,-0.5);
CheckValue<IkReal> x8020 = IKatan2WithCheck(IkReal(x8017),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8020.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8020.value))));
IkReal gconst136=(x8017*x8018);
IkReal gconst137=((1.0)*r20*x8018);
CheckValue<IkReal> x8021 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8021.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x8021.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x8022=((-1.0)*r21);
CheckValue<IkReal> x8025 = IKatan2WithCheck(IkReal(x8022),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8025.valid){
continue;
}
IkReal x8023=((1.0)*(x8025.value));
IkReal x8024=x8018;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst136;
cj15=gconst137;
j15=((3.14159265)+(((-1.0)*x8023)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8023)));
IkReal gconst136=(x8022*x8024);
IkReal gconst137=((1.0)*r20*x8024);
IkReal x8026=r22*r22;
IkReal x8027=((1.0)*x8026);
CheckValue<IkReal> x8031=IKPowWithIntegerCheck(((-1.0)+x8026),-1);
if(!x8031.valid){
continue;
}
IkReal x8028=x8031.value;
if((((1.0)+(((-1.0)*x8027)))) < -0.00001)
continue;
IkReal x8029=IKsqrt(((1.0)+(((-1.0)*x8027))));
IkReal x8030=(cj10*x8028*x8029);
j14eval[0]=((IKabs((x8030+(((-1.0)*x8027*x8030)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8032=((-1.0)*r21);
CheckValue<IkReal> x8035 = IKatan2WithCheck(IkReal(x8032),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8035.valid){
continue;
}
IkReal x8033=((1.0)*(x8035.value));
IkReal x8034=x8018;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst136;
cj15=gconst137;
j15=((3.14159265)+(((-1.0)*x8033)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8033)));
IkReal gconst136=(x8032*x8034);
IkReal gconst137=((1.0)*r20*x8034);
IkReal x8036=r22*r22;
IkReal x8037=((1.0)*x8036);
CheckValue<IkReal> x8041=IKPowWithIntegerCheck(((-1.0)+x8036),-1);
if(!x8041.valid){
continue;
}
IkReal x8038=x8041.value;
if((((1.0)+(((-1.0)*x8037)))) < -0.00001)
continue;
IkReal x8039=IKsqrt(((1.0)+(((-1.0)*x8037))));
IkReal x8040=(sj10*x8038*x8039);
j14eval[0]=((IKabs(((((-1.0)*x8037*x8040))+x8040)))+(IKabs((r22*sj10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x8042=((-1.0)*r21);
CheckValue<IkReal> x8045 = IKatan2WithCheck(IkReal(x8042),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8045.valid){
continue;
}
IkReal x8043=((1.0)*(x8045.value));
IkReal x8044=x8018;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst136;
cj15=gconst137;
j15=((3.14159265)+(((-1.0)*x8043)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8043)));
IkReal gconst136=(x8042*x8044);
IkReal gconst137=((1.0)*r20*x8044);
IkReal x8046=r22*r22;
IkReal x8047=(cj10*r02);
IkReal x8048=(r12*sj10);
CheckValue<IkReal> x8052=IKPowWithIntegerCheck(((-1.0)+x8046),-1);
if(!x8052.valid){
continue;
}
IkReal x8049=x8052.value;
if((((1.0)+(((-1.0)*x8046)))) < -0.00001)
continue;
IkReal x8050=IKsqrt(((1.0)+(((-1.0)*x8046))));
IkReal x8051=(r22*x8049*x8050);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=((IKabs((((x8047*x8051))+((x8048*x8051)))))+(IKabs(((((-1.0)*x8047))+(((-1.0)*x8048))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8053=((1.0)*gconst136);
CheckValue<IkReal> x8054=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r21))+(((-1.0)*r20*x8053)))),-1);
if(!x8054.valid){
continue;
}
CheckValue<IkReal> x8055 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x8053))+(((-1.0)*cj10*r01*x8053))+((gconst137*r10*sj10))+((cj10*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8055.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8054.value)))+(x8055.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8056=IKsin(j14);
IkReal x8057=IKcos(j14);
IkReal x8058=(gconst136*r01);
IkReal x8059=(gconst136*r11);
IkReal x8060=(gconst136*r21);
IkReal x8061=(sj11*sj12);
IkReal x8062=((1.0)*x8057);
IkReal x8063=(gconst137*x8057);
IkReal x8064=((1.0)*x8056);
IkReal x8065=((1.0)*cj11*cj12);
evalcond[0]=((((-1.0)*gconst137*r20*x8064))+(((-1.0)*r22*x8062))+((x8056*x8060)));
evalcond[1]=((((-1.0)*r12*x8062))+cj10+(((-1.0)*gconst137*r10*x8064))+((x8056*x8059)));
evalcond[2]=((((-1.0)*sj10))+(((-1.0)*gconst137*r00*x8064))+((x8056*x8058))+(((-1.0)*r02*x8062)));
evalcond[3]=(((r20*x8063))+(((-1.0)*x8060*x8062))+((cj12*sj11))+(((-1.0)*r22*x8064))+((cj11*sj12)));
evalcond[4]=(((cj10*x8061))+((r00*x8063))+(((-1.0)*cj10*x8065))+(((-1.0)*x8058*x8062))+(((-1.0)*r02*x8064)));
evalcond[5]=(((sj10*x8061))+((r10*x8063))+(((-1.0)*r12*x8064))+(((-1.0)*x8059*x8062))+(((-1.0)*sj10*x8065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8066=((1.0)*gconst137);
CheckValue<IkReal> x8067=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8066))+(((-1.0)*gconst136*r10)))),-1);
if(!x8067.valid){
continue;
}
CheckValue<IkReal> x8068 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x8066))+((gconst136*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8068.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8067.value)))+(x8068.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8069=IKsin(j14);
IkReal x8070=IKcos(j14);
IkReal x8071=(gconst136*r01);
IkReal x8072=(gconst136*r11);
IkReal x8073=(gconst136*r21);
IkReal x8074=(sj11*sj12);
IkReal x8075=((1.0)*x8070);
IkReal x8076=(gconst137*x8070);
IkReal x8077=((1.0)*x8069);
IkReal x8078=((1.0)*cj11*cj12);
evalcond[0]=(((x8069*x8073))+(((-1.0)*gconst137*r20*x8077))+(((-1.0)*r22*x8075)));
evalcond[1]=(((x8069*x8072))+(((-1.0)*gconst137*r10*x8077))+cj10+(((-1.0)*r12*x8075)));
evalcond[2]=((((-1.0)*r02*x8075))+((x8069*x8071))+(((-1.0)*gconst137*r00*x8077))+(((-1.0)*sj10)));
evalcond[3]=(((r20*x8076))+(((-1.0)*x8073*x8075))+((cj12*sj11))+(((-1.0)*r22*x8077))+((cj11*sj12)));
evalcond[4]=((((-1.0)*r02*x8077))+((cj10*x8074))+(((-1.0)*cj10*x8078))+((r00*x8076))+(((-1.0)*x8071*x8075)));
evalcond[5]=((((-1.0)*sj10*x8078))+(((-1.0)*x8072*x8075))+((r10*x8076))+((sj10*x8074))+(((-1.0)*r12*x8077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8079=((1.0)*gconst137);
CheckValue<IkReal> x8080 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst136*r21))+(((-1.0)*cj10*r20*x8079)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8080.valid){
continue;
}
CheckValue<IkReal> x8081=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8079))+(((-1.0)*gconst136*r00)))),-1);
if(!x8081.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8080.value)+(((1.5707963267949)*(x8081.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8082=IKsin(j14);
IkReal x8083=IKcos(j14);
IkReal x8084=(gconst136*r01);
IkReal x8085=(gconst136*r11);
IkReal x8086=(gconst136*r21);
IkReal x8087=(sj11*sj12);
IkReal x8088=((1.0)*x8083);
IkReal x8089=(gconst137*x8083);
IkReal x8090=((1.0)*x8082);
IkReal x8091=((1.0)*cj11*cj12);
evalcond[0]=((((-1.0)*gconst137*r20*x8090))+((x8082*x8086))+(((-1.0)*r22*x8088)));
evalcond[1]=((((-1.0)*gconst137*r10*x8090))+cj10+((x8082*x8085))+(((-1.0)*r12*x8088)));
evalcond[2]=((((-1.0)*r02*x8088))+(((-1.0)*gconst137*r00*x8090))+((x8082*x8084))+(((-1.0)*sj10)));
evalcond[3]=((((-1.0)*x8086*x8088))+(((-1.0)*r22*x8090))+((cj12*sj11))+((cj11*sj12))+((r20*x8089)));
evalcond[4]=((((-1.0)*cj10*x8091))+((cj10*x8087))+(((-1.0)*r02*x8090))+((r00*x8089))+(((-1.0)*x8084*x8088)));
evalcond[5]=(((r10*x8089))+(((-1.0)*sj10*x8091))+((sj10*x8087))+(((-1.0)*r12*x8090))+(((-1.0)*x8085*x8088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8092=((-1.0)*r10);
IkReal x8094 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8094)==0){
continue;
}
IkReal x8093=pow(x8094,-0.5);
CheckValue<IkReal> x8095 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8092),IKFAST_ATAN2_MAGTHRESH);
if(!x8095.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8095.value));
IkReal gconst139=(r11*x8093);
IkReal gconst140=(x8092*x8093);
CheckValue<IkReal> x8096 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8096.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x8096.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x8097=((-1.0)*r10);
IkReal x8098=x8093;
CheckValue<IkReal> x8100 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8097),IKFAST_ATAN2_MAGTHRESH);
if(!x8100.valid){
continue;
}
IkReal x8099=((-1.0)*(x8100.value));
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst139;
cj15=gconst140;
j15=x8099;
IkReal gconst138=x8099;
IkReal gconst139=(r11*x8098);
IkReal gconst140=(x8097*x8098);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8101=((1.0)*gconst139);
CheckValue<IkReal> x8102 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((gconst140*r10*sj10))+(((-1.0)*r11*sj10*x8101))+(((-1.0)*cj10*r01*x8101))+((cj10*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8102.valid){
continue;
}
CheckValue<IkReal> x8103=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x8101)))),-1);
if(!x8103.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8102.value)+(((1.5707963267949)*(x8103.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8104=IKsin(j14);
IkReal x8105=IKcos(j14);
IkReal x8106=(gconst139*r21);
IkReal x8107=((1.0)*sj10);
IkReal x8108=(gconst140*r20);
IkReal x8109=(gconst140*r10);
IkReal x8110=(sj11*sj12);
IkReal x8111=(gconst139*r01);
IkReal x8112=(gconst140*r00);
IkReal x8113=(cj11*cj12);
IkReal x8114=(gconst139*r11);
IkReal x8115=((1.0)*x8105);
IkReal x8116=((1.0)*x8104);
evalcond[0]=((((-1.0)*x8108*x8116))+((x8104*x8106))+(((-1.0)*r22*x8115)));
evalcond[1]=((((-1.0)*x8109*x8116))+(((-1.0)*r12*x8115))+cj10+((x8104*x8114)));
evalcond[2]=((((-1.0)*x8112*x8116))+(((-1.0)*x8107))+(((-1.0)*r02*x8115))+((x8104*x8111)));
evalcond[3]=(((x8105*x8108))+(((-1.0)*r22*x8116))+((cj12*sj11))+(((-1.0)*x8106*x8115))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj10*x8113))+(((-1.0)*x8111*x8115))+(((-1.0)*r02*x8116))+((x8105*x8112))+((cj10*x8110)));
evalcond[5]=((((-1.0)*x8114*x8115))+(((-1.0)*r12*x8116))+((x8105*x8109))+((sj10*x8110))+(((-1.0)*x8107*x8113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8117=((1.0)*gconst140);
CheckValue<IkReal> x8118 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x8117))+((cj10*gconst139*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8118.valid){
continue;
}
CheckValue<IkReal> x8119=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x8117)))),-1);
if(!x8119.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8118.value)+(((1.5707963267949)*(x8119.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8120=IKsin(j14);
IkReal x8121=IKcos(j14);
IkReal x8122=(gconst139*r21);
IkReal x8123=((1.0)*sj10);
IkReal x8124=(gconst140*r20);
IkReal x8125=(gconst140*r10);
IkReal x8126=(sj11*sj12);
IkReal x8127=(gconst139*r01);
IkReal x8128=(gconst140*r00);
IkReal x8129=(cj11*cj12);
IkReal x8130=(gconst139*r11);
IkReal x8131=((1.0)*x8121);
IkReal x8132=((1.0)*x8120);
evalcond[0]=(((x8120*x8122))+(((-1.0)*r22*x8131))+(((-1.0)*x8124*x8132)));
evalcond[1]=(((x8120*x8130))+(((-1.0)*x8125*x8132))+(((-1.0)*r12*x8131))+cj10);
evalcond[2]=((((-1.0)*r02*x8131))+((x8120*x8127))+(((-1.0)*x8123))+(((-1.0)*x8128*x8132)));
evalcond[3]=(((x8121*x8124))+(((-1.0)*r22*x8132))+(((-1.0)*x8122*x8131))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*r02*x8132))+((x8121*x8128))+(((-1.0)*cj10*x8129))+(((-1.0)*x8127*x8131))+((cj10*x8126)));
evalcond[5]=(((x8121*x8125))+(((-1.0)*x8130*x8131))+(((-1.0)*r12*x8132))+(((-1.0)*x8123*x8129))+((sj10*x8126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8133=((-1.0)*r11);
IkReal x8135 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8135)==0){
continue;
}
IkReal x8134=pow(x8135,-0.5);
CheckValue<IkReal> x8136 = IKatan2WithCheck(IkReal(x8133),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8136.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8136.value))));
IkReal gconst142=(x8133*x8134);
IkReal gconst143=((1.0)*r10*x8134);
CheckValue<IkReal> x8137 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8137.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x8137.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x8138=((-1.0)*r11);
CheckValue<IkReal> x8141 = IKatan2WithCheck(IkReal(x8138),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8141.valid){
continue;
}
IkReal x8139=((1.0)*(x8141.value));
IkReal x8140=x8134;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst142;
cj15=gconst143;
j15=((3.14159265)+(((-1.0)*x8139)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8139)));
IkReal gconst142=(x8138*x8140);
IkReal gconst143=((1.0)*r10*x8140);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8142=((-1.0)*r11);
CheckValue<IkReal> x8145 = IKatan2WithCheck(IkReal(x8142),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8145.valid){
continue;
}
IkReal x8143=((1.0)*(x8145.value));
IkReal x8144=x8134;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst142;
cj15=gconst143;
j15=((3.14159265)+(((-1.0)*x8143)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8143)));
IkReal gconst142=(x8142*x8144);
IkReal gconst143=((1.0)*r10*x8144);
IkReal x8146=r12*r12;
IkReal x8147=(cj10*r02);
IkReal x8148=x8134;
IkReal x8149=(sj10*x8148);
j14eval[0]=((IKabs(((((-1.0)*r12*sj10))+(((-1.0)*x8147)))))+(IKabs((((r12*x8147*x8148))+(((-1.0)*x8149))+((x8146*x8149))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8150=((-1.0)*r11);
CheckValue<IkReal> x8153 = IKatan2WithCheck(IkReal(x8150),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8153.valid){
continue;
}
IkReal x8151=((1.0)*(x8153.value));
IkReal x8152=x8134;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst142;
cj15=gconst143;
j15=((3.14159265)+(((-1.0)*x8151)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8151)));
IkReal gconst142=(x8150*x8152);
IkReal gconst143=((1.0)*r10*x8152);
IkReal x8154=r12*r12;
IkReal x8155=(cj12*r22*sj11);
IkReal x8156=(cj11*r22*sj12);
CheckValue<IkReal> x8160=IKPowWithIntegerCheck(((-1.0)+x8154),-1);
if(!x8160.valid){
continue;
}
IkReal x8157=x8160.value;
if((((1.0)+(((-1.0)*x8154)))) < -0.00001)
continue;
IkReal x8158=IKsqrt(((1.0)+(((-1.0)*x8154))));
IkReal x8159=((1.0)*r12*x8157*x8158);
j14eval[0]=((IKabs((x8156+x8155)))+(IKabs(((((-1.0)*x8156*x8159))+(((-1.0)*x8155*x8159))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8161=(cj11*sj12);
IkReal x8162=(gconst143*r20);
IkReal x8163=(gconst142*r21);
IkReal x8164=(cj12*sj11);
CheckValue<IkReal> x8165 = IKatan2WithCheck(IkReal((((r22*x8161))+((r22*x8164)))),IkReal((((x8163*x8164))+((x8161*x8163))+(((-1.0)*x8161*x8162))+(((-1.0)*x8162*x8164)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8165.valid){
continue;
}
CheckValue<IkReal> x8166=IKPowWithIntegerCheck(IKsign(((x8163*x8163)+(r22*r22)+(((-2.0)*x8162*x8163))+(x8162*x8162))),-1);
if(!x8166.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8165.value)+(((1.5707963267949)*(x8166.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8167=IKsin(j14);
IkReal x8168=IKcos(j14);
IkReal x8169=((1.0)*sj10);
IkReal x8170=(gconst142*r21);
IkReal x8171=(gconst142*r01);
IkReal x8172=(sj11*sj12);
IkReal x8173=(cj11*cj12);
IkReal x8174=(gconst142*r11);
IkReal x8175=((1.0)*x8168);
IkReal x8176=((1.0)*x8167);
IkReal x8177=(gconst143*x8168);
evalcond[0]=((((-1.0)*gconst143*r20*x8176))+((x8167*x8170))+(((-1.0)*r22*x8175)));
evalcond[1]=((((-1.0)*r12*x8175))+(((-1.0)*gconst143*r10*x8176))+cj10+((x8167*x8174)));
evalcond[2]=(((x8167*x8171))+(((-1.0)*x8169))+(((-1.0)*r02*x8175))+(((-1.0)*gconst143*r00*x8176)));
evalcond[3]=(((r20*x8177))+(((-1.0)*x8170*x8175))+(((-1.0)*r22*x8176))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((cj10*x8172))+(((-1.0)*cj10*x8173))+(((-1.0)*x8171*x8175))+(((-1.0)*r02*x8176))+((r00*x8177)));
evalcond[5]=(((sj10*x8172))+(((-1.0)*r12*x8176))+(((-1.0)*x8169*x8173))+((r10*x8177))+(((-1.0)*x8174*x8175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8178=((1.0)*sj10);
IkReal x8179=((1.0)*gconst142);
CheckValue<IkReal> x8180=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8179))+(((-1.0)*gconst143*r21)))),-1);
if(!x8180.valid){
continue;
}
CheckValue<IkReal> x8181 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8178))+(((-1.0)*cj10*r02)))),IkReal((((cj10*gconst143*r00))+((gconst143*r10*sj10))+(((-1.0)*cj10*r01*x8179))+(((-1.0)*gconst142*r11*x8178)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8181.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8180.value)))+(x8181.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8182=IKsin(j14);
IkReal x8183=IKcos(j14);
IkReal x8184=((1.0)*sj10);
IkReal x8185=(gconst142*r21);
IkReal x8186=(gconst142*r01);
IkReal x8187=(sj11*sj12);
IkReal x8188=(cj11*cj12);
IkReal x8189=(gconst142*r11);
IkReal x8190=((1.0)*x8183);
IkReal x8191=((1.0)*x8182);
IkReal x8192=(gconst143*x8183);
evalcond[0]=((((-1.0)*r22*x8190))+((x8182*x8185))+(((-1.0)*gconst143*r20*x8191)));
evalcond[1]=(cj10+((x8182*x8189))+(((-1.0)*r12*x8190))+(((-1.0)*gconst143*r10*x8191)));
evalcond[2]=((((-1.0)*r02*x8190))+((x8182*x8186))+(((-1.0)*gconst143*r00*x8191))+(((-1.0)*x8184)));
evalcond[3]=(((r20*x8192))+(((-1.0)*r22*x8191))+(((-1.0)*x8185*x8190))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*r02*x8191))+((r00*x8192))+((cj10*x8187))+(((-1.0)*cj10*x8188))+(((-1.0)*x8186*x8190)));
evalcond[5]=(((r10*x8192))+((sj10*x8187))+(((-1.0)*r12*x8191))+(((-1.0)*x8184*x8188))+(((-1.0)*x8189*x8190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8193=((1.0)*gconst143);
CheckValue<IkReal> x8194=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8193))+(((-1.0)*gconst142*r00)))),-1);
if(!x8194.valid){
continue;
}
CheckValue<IkReal> x8195 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst142*r21))+(((-1.0)*cj10*r20*x8193)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8195.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8194.value)))+(x8195.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8196=IKsin(j14);
IkReal x8197=IKcos(j14);
IkReal x8198=((1.0)*sj10);
IkReal x8199=(gconst142*r21);
IkReal x8200=(gconst142*r01);
IkReal x8201=(sj11*sj12);
IkReal x8202=(cj11*cj12);
IkReal x8203=(gconst142*r11);
IkReal x8204=((1.0)*x8197);
IkReal x8205=((1.0)*x8196);
IkReal x8206=(gconst143*x8197);
evalcond[0]=((((-1.0)*gconst143*r20*x8205))+(((-1.0)*r22*x8204))+((x8196*x8199)));
evalcond[1]=((((-1.0)*gconst143*r10*x8205))+(((-1.0)*r12*x8204))+cj10+((x8196*x8203)));
evalcond[2]=((((-1.0)*r02*x8204))+(((-1.0)*gconst143*r00*x8205))+(((-1.0)*x8198))+((x8196*x8200)));
evalcond[3]=((((-1.0)*r22*x8205))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*x8199*x8204))+((r20*x8206)));
evalcond[4]=((((-1.0)*x8200*x8204))+(((-1.0)*r02*x8205))+(((-1.0)*cj10*x8202))+((r00*x8206))+((cj10*x8201)));
evalcond[5]=((((-1.0)*x8198*x8202))+((sj10*x8201))+(((-1.0)*r12*x8205))+((r10*x8206))+(((-1.0)*x8203*x8204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=1.0;
j10=0;
IkReal x8207=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x8207;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj15*r00))+((r01*sj15))))));
j14eval[2]=IKsign(x8207);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=1.0;
j10=0;
IkReal x8208=((1.0)*cj15);
IkReal x8209=((((-1.0)*r01*x8208))+(((-1.0)*r00*sj15)));
j14eval[0]=x8209;
j14eval[1]=((IKabs(r22))+(IKabs((((r21*sj15))+(((-1.0)*r20*x8208))))));
j14eval[2]=IKsign(x8209);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=1.0;
j10=0;
IkReal x8210=cj15*cj15;
IkReal x8211=r11*r11;
IkReal x8212=(r11*sj15);
IkReal x8213=(cj15*r10);
IkReal x8214=((r12*r12)+(((-2.0)*x8212*x8213))+((x8210*(r10*r10)))+(((-1.0)*x8210*x8211))+x8211);
j14eval[0]=x8214;
j14eval[1]=IKsign(x8214);
j14eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x8212))+x8213))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8215=cj15*cj15;
IkReal x8216=r11*r11;
IkReal x8217=(r11*sj15);
IkReal x8218=(cj15*r10);
CheckValue<IkReal> x8219 = IKatan2WithCheck(IkReal(((((-1.0)*x8217))+x8218)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8219.valid){
continue;
}
CheckValue<IkReal> x8220=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x8215*(r10*r10)))+(((-2.0)*x8217*x8218))+(((-1.0)*x8215*x8216))+x8216)),-1);
if(!x8220.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8219.value)+(((1.5707963267949)*(x8220.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8221=IKsin(j14);
IkReal x8222=IKcos(j14);
IkReal x8223=(r11*sj15);
IkReal x8224=(cj15*r10);
IkReal x8225=(cj15*r00);
IkReal x8226=(r21*sj15);
IkReal x8227=(r01*sj15);
IkReal x8228=(cj15*r20);
IkReal x8229=((1.0)*x8222);
IkReal x8230=((1.0)*x8221);
evalcond[0]=((((-1.0)*x8228*x8230))+((x8221*x8226))+(((-1.0)*r22*x8229)));
evalcond[1]=((((-1.0)*r02*x8229))+((x8221*x8227))+(((-1.0)*x8225*x8230)));
evalcond[2]=(((x8222*x8224))+(((-1.0)*x8223*x8229))+(((-1.0)*r12*x8230)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8229))+(((-1.0)*x8224*x8230))+((x8221*x8223)));
evalcond[4]=(((x8222*x8228))+(((-1.0)*r22*x8230))+((cj12*sj11))+(((-1.0)*x8226*x8229))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x8222*x8225))+(((-1.0)*r02*x8230))+(((-1.0)*x8227*x8229))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8231=((1.0)*cj15);
CheckValue<IkReal> x8232 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj15))+(((-1.0)*r20*x8231)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8232.valid){
continue;
}
CheckValue<IkReal> x8233=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x8231)))),-1);
if(!x8233.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8232.value)+(((1.5707963267949)*(x8233.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8234=IKsin(j14);
IkReal x8235=IKcos(j14);
IkReal x8236=(r11*sj15);
IkReal x8237=(cj15*r10);
IkReal x8238=(cj15*r00);
IkReal x8239=(r21*sj15);
IkReal x8240=(r01*sj15);
IkReal x8241=(cj15*r20);
IkReal x8242=((1.0)*x8235);
IkReal x8243=((1.0)*x8234);
evalcond[0]=((((-1.0)*x8241*x8243))+((x8234*x8239))+(((-1.0)*r22*x8242)));
evalcond[1]=(((x8234*x8240))+(((-1.0)*x8238*x8243))+(((-1.0)*r02*x8242)));
evalcond[2]=(((x8235*x8237))+(((-1.0)*x8236*x8242))+(((-1.0)*r12*x8243)));
evalcond[3]=((1.0)+((x8234*x8236))+(((-1.0)*x8237*x8243))+(((-1.0)*r12*x8242)));
evalcond[4]=((((-1.0)*x8239*x8242))+(((-1.0)*r22*x8243))+((x8235*x8241))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x8240*x8242))+((x8235*x8238))+(((-1.0)*r02*x8243))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x8244 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj15*r00))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8244.valid){
continue;
}
CheckValue<IkReal> x8245=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x8245.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8244.value)+(((1.5707963267949)*(x8245.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8246=IKsin(j14);
IkReal x8247=IKcos(j14);
IkReal x8248=(r11*sj15);
IkReal x8249=(cj15*r10);
IkReal x8250=(cj15*r00);
IkReal x8251=(r21*sj15);
IkReal x8252=(r01*sj15);
IkReal x8253=(cj15*r20);
IkReal x8254=((1.0)*x8247);
IkReal x8255=((1.0)*x8246);
evalcond[0]=((((-1.0)*r22*x8254))+(((-1.0)*x8253*x8255))+((x8246*x8251)));
evalcond[1]=((((-1.0)*x8250*x8255))+(((-1.0)*r02*x8254))+((x8246*x8252)));
evalcond[2]=((((-1.0)*x8248*x8254))+(((-1.0)*r12*x8255))+((x8247*x8249)));
evalcond[3]=((1.0)+(((-1.0)*x8249*x8255))+((x8246*x8248))+(((-1.0)*r12*x8254)));
evalcond[4]=(((x8247*x8253))+(((-1.0)*x8251*x8254))+(((-1.0)*r22*x8255))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x8247*x8250))+(((-1.0)*x8252*x8254))+(((-1.0)*cj11*cj12))+(((-1.0)*r02*x8255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x8256=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x8256;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x8256);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x8257=((1.0)*cj15);
IkReal x8258=((((-1.0)*r21*x8257))+(((-1.0)*r20*sj15)));
j14eval[0]=x8258;
j14eval[1]=IKsign(x8258);
j14eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x8257))+((r01*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x8259=r11*r11;
IkReal x8260=cj15*cj15;
IkReal x8261=(cj15*r10);
IkReal x8262=(r11*sj15);
IkReal x8263=((((-1.0)*x8259))+(((-1.0)*(r12*r12)))+((x8259*x8260))+(((-1.0)*x8260*(r10*r10)))+(((2.0)*x8261*x8262)));
j14eval[0]=x8263;
j14eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x8262))+x8261))));
j14eval[2]=IKsign(x8263);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8264=r11*r11;
IkReal x8265=cj15*cj15;
IkReal x8266=(cj15*r10);
IkReal x8267=(r11*sj15);
CheckValue<IkReal> x8268=IKPowWithIntegerCheck(IKsign(((((2.0)*x8266*x8267))+(((-1.0)*x8265*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x8264))+((x8264*x8265)))),-1);
if(!x8268.valid){
continue;
}
CheckValue<IkReal> x8269 = IKatan2WithCheck(IkReal(((((-1.0)*x8267))+x8266)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8269.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8268.value)))+(x8269.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8270=IKsin(j14);
IkReal x8271=IKcos(j14);
IkReal x8272=(r11*sj15);
IkReal x8273=(cj15*r10);
IkReal x8274=(cj15*r00);
IkReal x8275=(r21*sj15);
IkReal x8276=(r01*sj15);
IkReal x8277=(cj15*r20);
IkReal x8278=((1.0)*x8271);
IkReal x8279=((1.0)*x8270);
evalcond[0]=((((-1.0)*x8277*x8279))+(((-1.0)*r22*x8278))+((x8270*x8275)));
evalcond[1]=((((-1.0)*x8274*x8279))+(((-1.0)*r02*x8278))+((x8270*x8276)));
evalcond[2]=((((-1.0)*x8272*x8278))+((x8271*x8273))+(((-1.0)*r12*x8279)));
evalcond[3]=((-1.0)+(((-1.0)*x8273*x8279))+(((-1.0)*r12*x8278))+((x8270*x8272)));
evalcond[4]=((((-1.0)*x8275*x8278))+(((-1.0)*r22*x8279))+((cj12*sj11))+((x8271*x8277))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*x8276*x8278))+((x8271*x8274))+(((-1.0)*r02*x8279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8280=((1.0)*cj15);
CheckValue<IkReal> x8281 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x8280))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8281.valid){
continue;
}
CheckValue<IkReal> x8282=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8280))+(((-1.0)*r20*sj15)))),-1);
if(!x8282.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8281.value)+(((1.5707963267949)*(x8282.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8283=IKsin(j14);
IkReal x8284=IKcos(j14);
IkReal x8285=(r11*sj15);
IkReal x8286=(cj15*r10);
IkReal x8287=(cj15*r00);
IkReal x8288=(r21*sj15);
IkReal x8289=(r01*sj15);
IkReal x8290=(cj15*r20);
IkReal x8291=((1.0)*x8284);
IkReal x8292=((1.0)*x8283);
evalcond[0]=((((-1.0)*x8290*x8292))+(((-1.0)*r22*x8291))+((x8283*x8288)));
evalcond[1]=((((-1.0)*x8287*x8292))+((x8283*x8289))+(((-1.0)*r02*x8291)));
evalcond[2]=((((-1.0)*x8285*x8291))+(((-1.0)*r12*x8292))+((x8284*x8286)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8291))+(((-1.0)*x8286*x8292))+((x8283*x8285)));
evalcond[4]=((((-1.0)*r22*x8292))+((cj12*sj11))+(((-1.0)*x8288*x8291))+((cj11*sj12))+((x8284*x8290)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*x8289*x8291))+((x8284*x8287))+(((-1.0)*r02*x8292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x8293 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8293.valid){
continue;
}
CheckValue<IkReal> x8294=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x8294.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8293.value)+(((1.5707963267949)*(x8294.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8295=IKsin(j14);
IkReal x8296=IKcos(j14);
IkReal x8297=(r11*sj15);
IkReal x8298=(cj15*r10);
IkReal x8299=(cj15*r00);
IkReal x8300=(r21*sj15);
IkReal x8301=(r01*sj15);
IkReal x8302=(cj15*r20);
IkReal x8303=((1.0)*x8296);
IkReal x8304=((1.0)*x8295);
evalcond[0]=((((-1.0)*r22*x8303))+(((-1.0)*x8302*x8304))+((x8295*x8300)));
evalcond[1]=((((-1.0)*r02*x8303))+((x8295*x8301))+(((-1.0)*x8299*x8304)));
evalcond[2]=(((x8296*x8298))+(((-1.0)*r12*x8304))+(((-1.0)*x8297*x8303)));
evalcond[3]=((-1.0)+(((-1.0)*x8298*x8304))+(((-1.0)*r12*x8303))+((x8295*x8297)));
evalcond[4]=((((-1.0)*r22*x8304))+(((-1.0)*x8300*x8303))+((cj12*sj11))+((x8296*x8302))+((cj11*sj12)));
evalcond[5]=(((x8296*x8299))+(((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*x8301*x8303))+(((-1.0)*r02*x8304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8305=((-1.0)*r00);
IkReal x8307 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8307)==0){
continue;
}
IkReal x8306=pow(x8307,-0.5);
CheckValue<IkReal> x8308 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8305),IKFAST_ATAN2_MAGTHRESH);
if(!x8308.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8308.value));
IkReal gconst145=(r01*x8306);
IkReal gconst146=(x8305*x8306);
CheckValue<IkReal> x8309 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8309.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x8309.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x8310=((-1.0)*r00);
IkReal x8311=x8306;
CheckValue<IkReal> x8313 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8310),IKFAST_ATAN2_MAGTHRESH);
if(!x8313.valid){
continue;
}
IkReal x8312=((-1.0)*(x8313.value));
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst145;
cj15=gconst146;
j15=x8312;
IkReal gconst144=x8312;
IkReal gconst145=(r01*x8311);
IkReal gconst146=(x8310*x8311);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8314=((1.0)*gconst145);
CheckValue<IkReal> x8315=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8314))+(((-1.0)*gconst146*r21)))),-1);
if(!x8315.valid){
continue;
}
CheckValue<IkReal> x8316 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x8314))+((gconst146*r10*sj10))+(((-1.0)*cj10*r01*x8314))+((cj10*gconst146*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8316.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8315.value)))+(x8316.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8317=IKsin(j14);
IkReal x8318=IKcos(j14);
IkReal x8319=(gconst146*r10);
IkReal x8320=((1.0)*sj10);
IkReal x8321=(gconst146*r00);
IkReal x8322=(sj11*sj12);
IkReal x8323=(gconst145*r21);
IkReal x8324=(gconst146*r20);
IkReal x8325=(cj11*cj12);
IkReal x8326=((1.0)*x8318);
IkReal x8327=((1.0)*x8317);
IkReal x8328=(gconst145*x8317);
evalcond[0]=(((x8317*x8323))+(((-1.0)*r22*x8326))+(((-1.0)*x8324*x8327)));
evalcond[1]=(cj10+((r11*x8328))+(((-1.0)*r12*x8326))+(((-1.0)*x8319*x8327)));
evalcond[2]=((((-1.0)*x8320))+((r01*x8328))+(((-1.0)*r02*x8326))+(((-1.0)*x8321*x8327)));
evalcond[3]=((((-1.0)*r22*x8327))+((x8318*x8324))+((cj12*sj11))+(((-1.0)*x8323*x8326))+((cj11*sj12)));
evalcond[4]=((((-1.0)*gconst145*r01*x8326))+((cj10*x8322))+((x8318*x8321))+(((-1.0)*cj10*x8325))+(((-1.0)*r02*x8327)));
evalcond[5]=(((sj10*x8322))+((x8318*x8319))+(((-1.0)*gconst145*r11*x8326))+(((-1.0)*r12*x8327))+(((-1.0)*x8320*x8325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8329=((1.0)*gconst146);
CheckValue<IkReal> x8330 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x8329))+((gconst145*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8330.valid){
continue;
}
CheckValue<IkReal> x8331=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r10))+(((-1.0)*r11*x8329)))),-1);
if(!x8331.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8330.value)+(((1.5707963267949)*(x8331.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8332=IKsin(j14);
IkReal x8333=IKcos(j14);
IkReal x8334=(gconst146*r10);
IkReal x8335=((1.0)*sj10);
IkReal x8336=(gconst146*r00);
IkReal x8337=(sj11*sj12);
IkReal x8338=(gconst145*r21);
IkReal x8339=(gconst146*r20);
IkReal x8340=(cj11*cj12);
IkReal x8341=((1.0)*x8333);
IkReal x8342=((1.0)*x8332);
IkReal x8343=(gconst145*x8332);
evalcond[0]=((((-1.0)*x8339*x8342))+((x8332*x8338))+(((-1.0)*r22*x8341)));
evalcond[1]=((((-1.0)*x8334*x8342))+cj10+((r11*x8343))+(((-1.0)*r12*x8341)));
evalcond[2]=(((r01*x8343))+(((-1.0)*r02*x8341))+(((-1.0)*x8336*x8342))+(((-1.0)*x8335)));
evalcond[3]=((((-1.0)*x8338*x8341))+((x8333*x8339))+(((-1.0)*r22*x8342))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((x8333*x8336))+((cj10*x8337))+(((-1.0)*r02*x8342))+(((-1.0)*cj10*x8340))+(((-1.0)*gconst145*r01*x8341)));
evalcond[5]=(((x8333*x8334))+(((-1.0)*x8335*x8340))+((sj10*x8337))+(((-1.0)*gconst145*r11*x8341))+(((-1.0)*r12*x8342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8344=((-1.0)*r01);
IkReal x8346 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8346)==0){
continue;
}
IkReal x8345=pow(x8346,-0.5);
CheckValue<IkReal> x8347 = IKatan2WithCheck(IkReal(x8344),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8347.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8347.value))));
IkReal gconst148=(x8344*x8345);
IkReal gconst149=((1.0)*r00*x8345);
CheckValue<IkReal> x8348 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8348.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x8348.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[5];
IkReal x8349=((-1.0)*r01);
CheckValue<IkReal> x8352 = IKatan2WithCheck(IkReal(x8349),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8352.valid){
continue;
}
IkReal x8350=((1.0)*(x8352.value));
IkReal x8351=x8345;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst148;
cj15=gconst149;
j15=((3.14159265)+(((-1.0)*x8350)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8350)));
IkReal gconst148=(x8349*x8351);
IkReal gconst149=((1.0)*r00*x8351);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=cj10;
j14eval[3]=r22;
j14eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  || IKabs(j14eval[4]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x8353=((-1.0)*r01);
CheckValue<IkReal> x8356 = IKatan2WithCheck(IkReal(x8353),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8356.valid){
continue;
}
IkReal x8354=((1.0)*(x8356.value));
IkReal x8355=x8345;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst148;
cj15=gconst149;
j15=((3.14159265)+(((-1.0)*x8354)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8354)));
IkReal gconst148=(x8353*x8355);
IkReal gconst149=((1.0)*r00*x8355);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8357=((-1.0)*r01);
CheckValue<IkReal> x8360 = IKatan2WithCheck(IkReal(x8357),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8360.valid){
continue;
}
IkReal x8358=((1.0)*(x8360.value));
IkReal x8359=x8345;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst148;
cj15=gconst149;
j15=((3.14159265)+(((-1.0)*x8358)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8358)));
IkReal gconst148=(x8357*x8359);
IkReal gconst149=((1.0)*r00*x8359);
IkReal x8361=r02*r02;
IkReal x8362=(r12*sj10);
IkReal x8363=x8345;
IkReal x8364=(cj10*x8363);
j14eval[0]=((IKabs(((((-1.0)*x8362))+(((-1.0)*cj10*r02)))))+(IKabs((((r02*x8362*x8363))+(((-1.0)*x8364))+((x8361*x8364))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8365=((1.0)*gconst148);
CheckValue<IkReal> x8366 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x8365))+((gconst149*r10*sj10))+((cj10*gconst149*r00))+(((-1.0)*cj10*r01*x8365)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8366.valid){
continue;
}
CheckValue<IkReal> x8367=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8365))+(((-1.0)*gconst149*r21)))),-1);
if(!x8367.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8366.value)+(((1.5707963267949)*(x8367.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8368=IKsin(j14);
IkReal x8369=IKcos(j14);
IkReal x8370=(gconst148*r21);
IkReal x8371=(gconst148*r01);
IkReal x8372=(gconst149*r20);
IkReal x8373=((1.0)*sj10);
IkReal x8374=(gconst149*r10);
IkReal x8375=(sj11*sj12);
IkReal x8376=(cj11*cj12);
IkReal x8377=(gconst148*r11);
IkReal x8378=(gconst149*r00);
IkReal x8379=((1.0)*x8369);
IkReal x8380=((1.0)*x8368);
evalcond[0]=((((-1.0)*x8372*x8380))+(((-1.0)*r22*x8379))+((x8368*x8370)));
evalcond[1]=((((-1.0)*r12*x8379))+cj10+((x8368*x8377))+(((-1.0)*x8374*x8380)));
evalcond[2]=((((-1.0)*r02*x8379))+(((-1.0)*x8373))+((x8368*x8371))+(((-1.0)*x8378*x8380)));
evalcond[3]=(((x8369*x8372))+((cj12*sj11))+(((-1.0)*r22*x8380))+(((-1.0)*x8370*x8379))+((cj11*sj12)));
evalcond[4]=((((-1.0)*x8371*x8379))+((x8369*x8378))+(((-1.0)*r02*x8380))+(((-1.0)*cj10*x8376))+((cj10*x8375)));
evalcond[5]=(((x8369*x8374))+(((-1.0)*x8377*x8379))+(((-1.0)*x8373*x8376))+((sj10*x8375))+(((-1.0)*r12*x8380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8381=((1.0)*gconst149);
CheckValue<IkReal> x8382 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst148*r21*sj10))+(((-1.0)*r20*sj10*x8381)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8382.valid){
continue;
}
CheckValue<IkReal> x8383=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r10))+(((-1.0)*r11*x8381)))),-1);
if(!x8383.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8382.value)+(((1.5707963267949)*(x8383.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8384=IKsin(j14);
IkReal x8385=IKcos(j14);
IkReal x8386=(gconst148*r21);
IkReal x8387=(gconst148*r01);
IkReal x8388=(gconst149*r20);
IkReal x8389=((1.0)*sj10);
IkReal x8390=(gconst149*r10);
IkReal x8391=(sj11*sj12);
IkReal x8392=(cj11*cj12);
IkReal x8393=(gconst148*r11);
IkReal x8394=(gconst149*r00);
IkReal x8395=((1.0)*x8385);
IkReal x8396=((1.0)*x8384);
evalcond[0]=((((-1.0)*x8388*x8396))+(((-1.0)*r22*x8395))+((x8384*x8386)));
evalcond[1]=((((-1.0)*x8390*x8396))+cj10+((x8384*x8393))+(((-1.0)*r12*x8395)));
evalcond[2]=((((-1.0)*r02*x8395))+(((-1.0)*x8389))+(((-1.0)*x8394*x8396))+((x8384*x8387)));
evalcond[3]=((((-1.0)*x8386*x8395))+((cj12*sj11))+(((-1.0)*r22*x8396))+((x8385*x8388))+((cj11*sj12)));
evalcond[4]=((((-1.0)*x8387*x8395))+(((-1.0)*r02*x8396))+((cj10*x8391))+(((-1.0)*cj10*x8392))+((x8385*x8394)));
evalcond[5]=((((-1.0)*x8393*x8395))+((sj10*x8391))+((x8385*x8390))+(((-1.0)*x8389*x8392))+(((-1.0)*r12*x8396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8397=((1.0)*gconst149);
CheckValue<IkReal> x8398=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8397)))),-1);
if(!x8398.valid){
continue;
}
CheckValue<IkReal> x8399 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x8397))+((cj10*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8399.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8398.value)))+(x8399.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8400=IKsin(j14);
IkReal x8401=IKcos(j14);
IkReal x8402=(gconst148*r21);
IkReal x8403=(gconst148*r01);
IkReal x8404=(gconst149*r20);
IkReal x8405=((1.0)*sj10);
IkReal x8406=(gconst149*r10);
IkReal x8407=(sj11*sj12);
IkReal x8408=(cj11*cj12);
IkReal x8409=(gconst148*r11);
IkReal x8410=(gconst149*r00);
IkReal x8411=((1.0)*x8401);
IkReal x8412=((1.0)*x8400);
evalcond[0]=((((-1.0)*x8404*x8412))+((x8400*x8402))+(((-1.0)*r22*x8411)));
evalcond[1]=((((-1.0)*r12*x8411))+cj10+(((-1.0)*x8406*x8412))+((x8400*x8409)));
evalcond[2]=((((-1.0)*x8405))+(((-1.0)*x8410*x8412))+(((-1.0)*r02*x8411))+((x8400*x8403)));
evalcond[3]=(((x8401*x8404))+((cj12*sj11))+(((-1.0)*x8402*x8411))+((cj11*sj12))+(((-1.0)*r22*x8412)));
evalcond[4]=((((-1.0)*cj10*x8408))+((cj10*x8407))+(((-1.0)*r02*x8412))+((x8401*x8410))+(((-1.0)*x8403*x8411)));
evalcond[5]=(((sj10*x8407))+((x8401*x8406))+(((-1.0)*r12*x8412))+(((-1.0)*x8409*x8411))+(((-1.0)*x8405*x8408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x8413=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x8413;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x8413);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x8414=((1.0)*cj15);
IkReal x8415=((((-1.0)*r11*x8414))+(((-1.0)*r10*sj15)));
j14eval[0]=x8415;
j14eval[1]=IKsign(x8415);
j14eval[2]=((IKabs(((((-1.0)*r20*x8414))+((r21*sj15)))))+(IKabs(r22)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x8416=r01*r01;
IkReal x8417=cj15*cj15;
IkReal x8418=(r01*sj15);
IkReal x8419=(cj15*r00);
IkReal x8420=((((-1.0)*x8417*(r00*r00)))+(((-1.0)*x8416))+(((-1.0)*(r02*r02)))+((x8416*x8417))+(((2.0)*x8418*x8419)));
j14eval[0]=x8420;
j14eval[1]=((IKabs(((((-1.0)*x8418))+x8419)))+(IKabs(r02)));
j14eval[2]=IKsign(x8420);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8421=r01*r01;
IkReal x8422=cj15*cj15;
IkReal x8423=(r01*sj15);
IkReal x8424=(cj15*r00);
CheckValue<IkReal> x8425=IKPowWithIntegerCheck(IKsign(((((2.0)*x8423*x8424))+(((-1.0)*(r02*r02)))+((x8421*x8422))+(((-1.0)*x8421))+(((-1.0)*x8422*(r00*r00))))),-1);
if(!x8425.valid){
continue;
}
CheckValue<IkReal> x8426 = IKatan2WithCheck(IkReal((x8424+(((-1.0)*x8423)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8426.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8425.value)))+(x8426.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8427=IKsin(j14);
IkReal x8428=IKcos(j14);
IkReal x8429=(r11*sj15);
IkReal x8430=(cj15*r10);
IkReal x8431=(cj15*r00);
IkReal x8432=(r21*sj15);
IkReal x8433=(r01*sj15);
IkReal x8434=(cj15*r20);
IkReal x8435=((1.0)*x8428);
IkReal x8436=((1.0)*x8427);
evalcond[0]=(((x8427*x8432))+(((-1.0)*r22*x8435))+(((-1.0)*x8434*x8436)));
evalcond[1]=((((-1.0)*r12*x8435))+((x8427*x8429))+(((-1.0)*x8430*x8436)));
evalcond[2]=(((x8428*x8431))+(((-1.0)*r02*x8436))+(((-1.0)*x8433*x8435)));
evalcond[3]=((-1.0)+((x8427*x8433))+(((-1.0)*x8431*x8436))+(((-1.0)*r02*x8435)));
evalcond[4]=((((-1.0)*x8432*x8435))+((cj12*sj11))+((x8428*x8434))+(((-1.0)*r22*x8436))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x8429*x8435))+(((-1.0)*r12*x8436))+((x8428*x8430))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8437=((1.0)*cj15);
CheckValue<IkReal> x8438 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8437))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8438.valid){
continue;
}
CheckValue<IkReal> x8439=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8437))+(((-1.0)*r10*sj15)))),-1);
if(!x8439.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8438.value)+(((1.5707963267949)*(x8439.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8440=IKsin(j14);
IkReal x8441=IKcos(j14);
IkReal x8442=(r11*sj15);
IkReal x8443=(cj15*r10);
IkReal x8444=(cj15*r00);
IkReal x8445=(r21*sj15);
IkReal x8446=(r01*sj15);
IkReal x8447=(cj15*r20);
IkReal x8448=((1.0)*x8441);
IkReal x8449=((1.0)*x8440);
evalcond[0]=((((-1.0)*x8447*x8449))+(((-1.0)*r22*x8448))+((x8440*x8445)));
evalcond[1]=((((-1.0)*r12*x8448))+(((-1.0)*x8443*x8449))+((x8440*x8442)));
evalcond[2]=(((x8441*x8444))+(((-1.0)*x8446*x8448))+(((-1.0)*r02*x8449)));
evalcond[3]=((-1.0)+(((-1.0)*x8444*x8449))+(((-1.0)*r02*x8448))+((x8440*x8446)));
evalcond[4]=(((x8441*x8447))+(((-1.0)*x8445*x8448))+(((-1.0)*r22*x8449))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x8441*x8443))+(((-1.0)*r12*x8449))+(((-1.0)*x8442*x8448))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x8450=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x8450.valid){
continue;
}
CheckValue<IkReal> x8451 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8451.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8450.value)))+(x8451.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8452=IKsin(j14);
IkReal x8453=IKcos(j14);
IkReal x8454=(r11*sj15);
IkReal x8455=(cj15*r10);
IkReal x8456=(cj15*r00);
IkReal x8457=(r21*sj15);
IkReal x8458=(r01*sj15);
IkReal x8459=(cj15*r20);
IkReal x8460=((1.0)*x8453);
IkReal x8461=((1.0)*x8452);
evalcond[0]=((((-1.0)*x8459*x8461))+((x8452*x8457))+(((-1.0)*r22*x8460)));
evalcond[1]=((((-1.0)*x8455*x8461))+((x8452*x8454))+(((-1.0)*r12*x8460)));
evalcond[2]=(((x8453*x8456))+(((-1.0)*r02*x8461))+(((-1.0)*x8458*x8460)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8460))+((x8452*x8458))+(((-1.0)*x8456*x8461)));
evalcond[4]=(((x8453*x8459))+(((-1.0)*x8457*x8460))+((cj12*sj11))+(((-1.0)*r22*x8461))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x8453*x8455))+(((-1.0)*x8454*x8460))+(((-1.0)*r12*x8461))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x8462=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x8462;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x8462);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x8463=((1.0)*cj15);
IkReal x8464=((((-1.0)*r20*sj15))+(((-1.0)*r21*x8463)));
j14eval[0]=x8464;
j14eval[1]=IKsign(x8464);
j14eval[2]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*r10*x8463))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x8465=cj15*cj15;
IkReal x8466=r01*r01;
IkReal x8467=(cj15*r00);
IkReal x8468=(r01*sj15);
IkReal x8469=(x8466+(((-1.0)*x8465*x8466))+(((-2.0)*x8467*x8468))+(r02*r02)+((x8465*(r00*r00))));
j14eval[0]=x8469;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x8468))+x8467))));
j14eval[2]=IKsign(x8469);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8470=cj15*cj15;
IkReal x8471=r01*r01;
IkReal x8472=(r01*sj15);
IkReal x8473=(cj15*r00);
CheckValue<IkReal> x8474=IKPowWithIntegerCheck(IKsign((x8471+((x8470*(r00*r00)))+(((-2.0)*x8472*x8473))+(((-1.0)*x8470*x8471))+(r02*r02))),-1);
if(!x8474.valid){
continue;
}
CheckValue<IkReal> x8475 = IKatan2WithCheck(IkReal((x8473+(((-1.0)*x8472)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8475.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8474.value)))+(x8475.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8476=IKsin(j14);
IkReal x8477=IKcos(j14);
IkReal x8478=(r11*sj15);
IkReal x8479=(cj15*r10);
IkReal x8480=(cj15*r00);
IkReal x8481=(r21*sj15);
IkReal x8482=(r01*sj15);
IkReal x8483=(cj15*r20);
IkReal x8484=((1.0)*x8477);
IkReal x8485=((1.0)*x8476);
evalcond[0]=((((-1.0)*x8483*x8485))+(((-1.0)*r22*x8484))+((x8476*x8481)));
evalcond[1]=(((x8476*x8478))+(((-1.0)*r12*x8484))+(((-1.0)*x8479*x8485)));
evalcond[2]=((((-1.0)*r02*x8485))+(((-1.0)*x8482*x8484))+((x8477*x8480)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8484))+(((-1.0)*x8480*x8485))+((x8476*x8482)));
evalcond[4]=((((-1.0)*x8481*x8484))+(((-1.0)*r22*x8485))+((cj12*sj11))+((x8477*x8483))+((cj11*sj12)));
evalcond[5]=(((x8477*x8479))+(((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*r12*x8485))+(((-1.0)*x8478*x8484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8486=((1.0)*cj15);
CheckValue<IkReal> x8487=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8486))+(((-1.0)*r20*sj15)))),-1);
if(!x8487.valid){
continue;
}
CheckValue<IkReal> x8488 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*r10*x8486)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8488.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8487.value)))+(x8488.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8489=IKsin(j14);
IkReal x8490=IKcos(j14);
IkReal x8491=(r11*sj15);
IkReal x8492=(cj15*r10);
IkReal x8493=(cj15*r00);
IkReal x8494=(r21*sj15);
IkReal x8495=(r01*sj15);
IkReal x8496=(cj15*r20);
IkReal x8497=((1.0)*x8490);
IkReal x8498=((1.0)*x8489);
evalcond[0]=(((x8489*x8494))+(((-1.0)*r22*x8497))+(((-1.0)*x8496*x8498)));
evalcond[1]=(((x8489*x8491))+(((-1.0)*x8492*x8498))+(((-1.0)*r12*x8497)));
evalcond[2]=((((-1.0)*r02*x8498))+((x8490*x8493))+(((-1.0)*x8495*x8497)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8497))+((x8489*x8495))+(((-1.0)*x8493*x8498)));
evalcond[4]=((((-1.0)*r22*x8498))+((x8490*x8496))+(((-1.0)*x8494*x8497))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*x8491*x8497))+((x8490*x8492))+(((-1.0)*r12*x8498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x8499=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x8499.valid){
continue;
}
CheckValue<IkReal> x8500 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8500.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8499.value)))+(x8500.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8501=IKsin(j14);
IkReal x8502=IKcos(j14);
IkReal x8503=(r11*sj15);
IkReal x8504=(cj15*r10);
IkReal x8505=(cj15*r00);
IkReal x8506=(r21*sj15);
IkReal x8507=(r01*sj15);
IkReal x8508=(cj15*r20);
IkReal x8509=((1.0)*x8502);
IkReal x8510=((1.0)*x8501);
evalcond[0]=((((-1.0)*x8508*x8510))+(((-1.0)*r22*x8509))+((x8501*x8506)));
evalcond[1]=((((-1.0)*x8504*x8510))+(((-1.0)*r12*x8509))+((x8501*x8503)));
evalcond[2]=(((x8502*x8505))+(((-1.0)*r02*x8510))+(((-1.0)*x8507*x8509)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8509))+((x8501*x8507))+(((-1.0)*x8505*x8510)));
evalcond[4]=((((-1.0)*x8506*x8509))+((x8502*x8508))+(((-1.0)*r22*x8510))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=((((-1.0)*x8503*x8509))+(((-1.0)*sj11*sj12))+((cj11*cj12))+((x8502*x8504))+(((-1.0)*r12*x8510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x8511=((-1.0)*px);
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8511);
rxp1_1=(px*r21);
rxp1_2=(r11*x8511);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8512=((-1.0)*px);
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8512);
rxp1_1=(px*r21);
rxp1_2=(r11*x8512);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=((((-1.0)*r21*sj15))+((cj15*r20)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8513=((-1.0)*px);
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8513);
rxp1_1=(px*r21);
rxp1_2=(r11*x8513);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=(((cj15*r10))+(((-1.0)*r11*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x8516=IKPowWithIntegerCheck((((cj15*r10))+(((-1.0)*r11*sj15))),-1);
if(!x8516.valid){
continue;
}
IkReal x8514=x8516.value;
IkReal x8515=(sj10*x8514);
cj14array[0]=(((cj11*cj12*x8515))+(((-1.0)*sj11*sj12*x8515)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x8517=IKsin(j14);
IkReal x8518=IKcos(j14);
IkReal x8519=(sj15*x8517);
IkReal x8520=((1.0)*x8518);
IkReal x8521=((1.0)*cj15*x8517);
evalcond[0]=((-1.0)*r02*x8517);
evalcond[1]=((((-1.0)*r02*x8520))+(((-1.0)*sj10)));
evalcond[2]=((((-1.0)*r20*x8521))+((r21*x8519)));
evalcond[3]=(((r11*x8519))+(((-1.0)*r10*x8521)));
evalcond[4]=(((cj15*r20*x8518))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*r21*sj15*x8520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x8524=IKPowWithIntegerCheck(((((-1.0)*r21*sj15))+((cj15*r20))),-1);
if(!x8524.valid){
continue;
}
IkReal x8522=x8524.value;
IkReal x8523=((1.0)*x8522);
cj14array[0]=((((-1.0)*cj11*sj12*x8523))+(((-1.0)*cj12*sj11*x8523)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x8525=IKsin(j14);
IkReal x8526=IKcos(j14);
IkReal x8527=(cj15*r10);
IkReal x8528=((1.0)*sj10);
IkReal x8529=(sj15*x8525);
IkReal x8530=((1.0)*x8526);
IkReal x8531=((1.0)*x8525);
evalcond[0]=((-1.0)*r02*x8525);
evalcond[1]=((((-1.0)*r02*x8530))+(((-1.0)*x8528)));
evalcond[2]=(((r21*x8529))+(((-1.0)*cj15*r20*x8531)));
evalcond[3]=((((-1.0)*x8527*x8531))+((r11*x8529)));
evalcond[4]=((((-1.0)*cj11*cj12*x8528))+((x8526*x8527))+(((-1.0)*r11*sj15*x8530))+((sj10*sj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x8532=IKPowWithIntegerCheck(r02,-1);
if(!x8532.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x8532.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x8533=IKsin(j14);
IkReal x8534=IKcos(j14);
IkReal x8535=(cj15*r10);
IkReal x8536=(cj15*r20);
IkReal x8537=(sj15*x8533);
IkReal x8538=((1.0)*x8533);
IkReal x8539=((1.0)*sj15*x8534);
evalcond[0]=((-1.0)*r02*x8533);
evalcond[1]=((((-1.0)*x8536*x8538))+((r21*x8537)));
evalcond[2]=(((r11*x8537))+(((-1.0)*x8535*x8538)));
evalcond[3]=(((x8534*x8536))+((cj12*sj11))+(((-1.0)*r21*x8539))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj11*cj12*sj10))+((x8534*x8535))+(((-1.0)*r11*x8539))+((sj10*sj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8540=((1.0)*sj15);
CheckValue<IkReal> x8541 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((cj15*r10*sj10))+(((-1.0)*cj10*r01*x8540))+(((-1.0)*r11*sj10*x8540))+((cj10*cj15*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8541.valid){
continue;
}
CheckValue<IkReal> x8542=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj15*r21))+(((-1.0)*r20*x8540)))),-1);
if(!x8542.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8541.value)+(((1.5707963267949)*(x8542.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8543=IKsin(j14);
IkReal x8544=IKcos(j14);
IkReal x8545=(r11*sj15);
IkReal x8546=((1.0)*sj10);
IkReal x8547=(sj11*sj12);
IkReal x8548=(cj15*r10);
IkReal x8549=(r21*sj15);
IkReal x8550=(r01*sj15);
IkReal x8551=(cj11*cj12);
IkReal x8552=((1.0)*x8544);
IkReal x8553=((1.0)*x8543);
IkReal x8554=(cj15*x8544);
evalcond[0]=((((-1.0)*r22*x8552))+((x8543*x8549))+(((-1.0)*cj15*r20*x8553)));
evalcond[1]=((((-1.0)*r12*x8552))+((x8543*x8545))+(((-1.0)*x8548*x8553))+cj10);
evalcond[2]=((((-1.0)*x8546))+((x8543*x8550))+(((-1.0)*cj15*r00*x8553))+(((-1.0)*r02*x8552)));
evalcond[3]=(((r20*x8554))+(((-1.0)*r22*x8553))+(((-1.0)*x8549*x8552))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((r00*x8554))+(((-1.0)*cj10*x8551))+((cj10*x8547))+(((-1.0)*x8550*x8552))+(((-1.0)*r02*x8553)));
evalcond[5]=((((-1.0)*r12*x8553))+(((-1.0)*x8546*x8551))+(((-1.0)*x8545*x8552))+((x8544*x8548))+((sj10*x8547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8555=((1.0)*cj15);
CheckValue<IkReal> x8556=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj15))+(((-1.0)*r11*x8555)))),-1);
if(!x8556.valid){
continue;
}
CheckValue<IkReal> x8557 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x8555))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8557.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8556.value)))+(x8557.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8558=IKsin(j14);
IkReal x8559=IKcos(j14);
IkReal x8560=(r11*sj15);
IkReal x8561=((1.0)*sj10);
IkReal x8562=(sj11*sj12);
IkReal x8563=(cj15*r10);
IkReal x8564=(r21*sj15);
IkReal x8565=(r01*sj15);
IkReal x8566=(cj11*cj12);
IkReal x8567=((1.0)*x8559);
IkReal x8568=((1.0)*x8558);
IkReal x8569=(cj15*x8559);
evalcond[0]=((((-1.0)*cj15*r20*x8568))+(((-1.0)*r22*x8567))+((x8558*x8564)));
evalcond[1]=((((-1.0)*r12*x8567))+(((-1.0)*x8563*x8568))+cj10+((x8558*x8560)));
evalcond[2]=((((-1.0)*cj15*r00*x8568))+(((-1.0)*r02*x8567))+(((-1.0)*x8561))+((x8558*x8565)));
evalcond[3]=((((-1.0)*x8564*x8567))+((r20*x8569))+(((-1.0)*r22*x8568))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((r00*x8569))+(((-1.0)*cj10*x8566))+((cj10*x8562))+(((-1.0)*x8565*x8567))+(((-1.0)*r02*x8568)));
evalcond[5]=((((-1.0)*r12*x8568))+((x8559*x8563))+(((-1.0)*x8560*x8567))+((sj10*x8562))+(((-1.0)*x8561*x8566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8570=((1.0)*cj15);
CheckValue<IkReal> x8571 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x8570)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8571.valid){
continue;
}
CheckValue<IkReal> x8572=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x8570)))),-1);
if(!x8572.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8571.value)+(((1.5707963267949)*(x8572.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8573=IKsin(j14);
IkReal x8574=IKcos(j14);
IkReal x8575=(r11*sj15);
IkReal x8576=((1.0)*sj10);
IkReal x8577=(sj11*sj12);
IkReal x8578=(cj15*r10);
IkReal x8579=(r21*sj15);
IkReal x8580=(r01*sj15);
IkReal x8581=(cj11*cj12);
IkReal x8582=((1.0)*x8574);
IkReal x8583=((1.0)*x8573);
IkReal x8584=(cj15*x8574);
evalcond[0]=((((-1.0)*r22*x8582))+((x8573*x8579))+(((-1.0)*cj15*r20*x8583)));
evalcond[1]=(((x8573*x8575))+cj10+(((-1.0)*r12*x8582))+(((-1.0)*x8578*x8583)));
evalcond[2]=((((-1.0)*cj15*r00*x8583))+(((-1.0)*x8576))+((x8573*x8580))+(((-1.0)*r02*x8582)));
evalcond[3]=((((-1.0)*r22*x8583))+((cj12*sj11))+(((-1.0)*x8579*x8582))+((r20*x8584))+((cj11*sj12)));
evalcond[4]=((((-1.0)*x8580*x8582))+(((-1.0)*r02*x8583))+((r00*x8584))+((cj10*x8577))+(((-1.0)*cj10*x8581)));
evalcond[5]=((((-1.0)*x8576*x8581))+((sj10*x8577))+(((-1.0)*r12*x8583))+((x8574*x8578))+(((-1.0)*x8575*x8582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10, j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8585=cj11*cj11;
IkReal x8586=cj12*cj12;
IkReal x8587=(cj15*r01);
IkReal x8588=((8318211.0)*cj11);
IkReal x8589=(sj11*sj12);
IkReal x8590=((85300000.0)*px);
IkReal x8591=(cj15*r11);
IkReal x8592=((7280355.0)*sj15);
IkReal x8593=(cj11*cj12);
IkReal x8594=((85300000.0)*py);
IkReal x8595=((97460000.0)*cj11);
IkReal x8596=(r00*sj15);
IkReal x8597=(r10*sj15);
CheckValue<IkReal> x8598 = IKatan2WithCheck(IkReal(((((-1.0)*x8589*x8594))+(((-3835629.0)*x8596))+(((-7280355.0)*x8589*x8591))+((x8588*x8597))+((x8588*x8591))+(((7280355.0)*x8591*x8593))+((x8593*x8594))+(((-1.0)*r10*x8589*x8592))+((py*x8595))+(((-3835629.0)*x8587))+(((-44940000.0)*px))+((r10*x8592*x8593)))),IkReal(((((3835629.0)*x8591))+(((3835629.0)*x8597))+(((-1.0)*x8589*x8590))+(((-7280355.0)*x8587*x8589))+(((-1.0)*r00*x8589*x8592))+((r00*x8592*x8593))+((x8588*x8596))+((x8590*x8593))+(((44940000.0)*py))+((px*x8595))+(((7280355.0)*x8587*x8593))+((x8587*x8588)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8598.valid){
continue;
}
CheckValue<IkReal> x8599=IKPowWithIntegerCheck(IKsign(((23239234.0)+(((5555904.0)*x8585))+(((-18190225.0)*x8586))+(((41566690.0)*cj12*x8585))+(((-41566690.0)*cj11*x8589))+(((-36380450.0)*x8589*x8593))+(((36380450.0)*x8585*x8586)))),-1);
if(!x8599.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(x8598.value)+(((1.5707963267949)*(x8599.value))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x8600=IKcos(j10);
IkReal x8601=IKsin(j10);
IkReal x8602=((0.08535)*sj15);
IkReal x8603=((0.21325)*cj12);
IkReal x8604=((0.08535)*cj15);
IkReal x8605=(cj11*x8601);
IkReal x8606=((0.21325)*sj11*sj12);
IkReal x8607=(cj11*x8600);
evalcond[0]=((((-1.0)*r00*x8602))+(((-1.0)*r01*x8604))+(((0.24365)*x8607))+(((-1.0)*px))+(((-0.11235)*x8601))+(((-1.0)*x8600*x8606))+((x8603*x8607)));
evalcond[1]=((((-1.0)*x8601*x8606))+(((0.24365)*x8605))+(((0.11235)*x8600))+(((-1.0)*r11*x8604))+(((-1.0)*py))+(((-1.0)*r10*x8602))+((x8603*x8605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
IkReal x8608=((1.0)*cj15);
IkReal x8609=((((-1.0)*r01*x8608))+(((-1.0)*r00*sj15)));
j14eval[0]=x8609;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x8608))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x8609);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x8610=((1.0)*cj15);
IkReal x8611=((((-1.0)*r11*x8610))+(((-1.0)*r10*sj15)));
j14eval[0]=x8611;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x8610))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x8611);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x8612=((1.0)*sj15);
IkReal x8613=((((-1.0)*cj15*r21))+(((-1.0)*r20*x8612)));
j14eval[0]=x8613;
j14eval[1]=((IKabs(((((-1.0)*r11*sj10*x8612))+((cj15*r10*sj10))+(((-1.0)*cj10*r01*x8612))+((cj10*cj15*r00)))))+(IKabs(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02))))));
j14eval[2]=IKsign(x8613);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8614=((-1.0)*r20);
IkReal x8616 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8616)==0){
continue;
}
IkReal x8615=pow(x8616,-0.5);
CheckValue<IkReal> x8617 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8614),IKFAST_ATAN2_MAGTHRESH);
if(!x8617.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8617.value));
IkReal gconst1=(r21*x8615);
IkReal gconst2=(x8614*x8615);
CheckValue<IkReal> x8618 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8618.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x8618.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x8619=((-1.0)*r20);
IkReal x8620=x8615;
CheckValue<IkReal> x8622 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8619),IKFAST_ATAN2_MAGTHRESH);
if(!x8622.valid){
continue;
}
IkReal x8621=((-1.0)*(x8622.value));
sj15=gconst1;
cj15=gconst2;
j15=x8621;
IkReal gconst0=x8621;
IkReal gconst1=(r21*x8620);
IkReal gconst2=(x8619*x8620);
j14eval[0]=cj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8623=((-1.0)*r20);
IkReal x8624=x8615;
CheckValue<IkReal> x8626 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8623),IKFAST_ATAN2_MAGTHRESH);
if(!x8626.valid){
continue;
}
IkReal x8625=((-1.0)*(x8626.value));
sj15=gconst1;
cj15=gconst2;
j15=x8625;
IkReal gconst0=x8625;
IkReal gconst1=(r21*x8624);
IkReal gconst2=(x8623*x8624);
j14eval[0]=sj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x8627=((-1.0)*r20);
IkReal x8628=x8615;
CheckValue<IkReal> x8630 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8627),IKFAST_ATAN2_MAGTHRESH);
if(!x8630.valid){
continue;
}
IkReal x8629=((-1.0)*(x8630.value));
sj15=gconst1;
cj15=gconst2;
j15=x8629;
IkReal gconst0=x8629;
IkReal gconst1=(r21*x8628);
IkReal gconst2=(x8627*x8628);
IkReal x8631=r22*r22;
CheckValue<IkReal> x8635=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8631))),-1);
if(!x8635.valid){
continue;
}
IkReal x8632=x8635.value;
IkReal x8633=(sj13*x8632);
IkReal x8634=((((2.0)*x8633*(r20*r20)*(r21*r21)))+((x8633*(r21*r21*r21*r21)))+((sj13*x8631))+((x8633*(r20*r20*r20*r20))));
j14eval[0]=x8634;
j14eval[1]=IKsign(x8634);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x8636=((-1.0)*r20);
IkReal x8637=x8615;
CheckValue<IkReal> x8639 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8636),IKFAST_ATAN2_MAGTHRESH);
if(!x8639.valid){
continue;
}
IkReal x8638=((-1.0)*(x8639.value));
sj15=gconst1;
cj15=gconst2;
j15=x8638;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst0=x8638;
IkReal gconst1=(r21*x8637);
IkReal gconst2=(x8636*x8637);
j14eval[0]=cj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8640=((-1.0)*r20);
IkReal x8641=x8615;
CheckValue<IkReal> x8643 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8640),IKFAST_ATAN2_MAGTHRESH);
if(!x8643.valid){
continue;
}
IkReal x8642=((-1.0)*(x8643.value));
sj15=gconst1;
cj15=gconst2;
j15=x8642;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst0=x8642;
IkReal gconst1=(r21*x8641);
IkReal gconst2=(x8640*x8641);
j14eval[0]=sj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x8644=((-1.0)*r20);
IkReal x8645=x8615;
CheckValue<IkReal> x8647 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8644),IKFAST_ATAN2_MAGTHRESH);
if(!x8647.valid){
continue;
}
IkReal x8646=((-1.0)*(x8647.value));
sj15=gconst1;
cj15=gconst2;
j15=x8646;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst0=x8646;
IkReal gconst1=(r21*x8645);
IkReal gconst2=(x8644*x8645);
IkReal x8648=((1.0)*(r22*r22));
CheckValue<IkReal> x8652=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8648))),-1);
if(!x8652.valid){
continue;
}
IkReal x8649=x8652.value;
IkReal x8650=((1.0)*x8649);
IkReal x8651=((((-2.0)*x8649*(r20*r20)*(r21*r21)))+(((-1.0)*x8650*(r20*r20*r20*r20)))+(((-1.0)*x8648))+(((-1.0)*x8650*(r21*r21*r21*r21))));
j14eval[0]=x8651;
j14eval[1]=IKsign(x8651);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x8653=((-1.0)*r20);
IkReal x8654=x8615;
CheckValue<IkReal> x8656 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8653),IKFAST_ATAN2_MAGTHRESH);
if(!x8656.valid){
continue;
}
IkReal x8655=((-1.0)*(x8656.value));
sj15=gconst1;
cj15=gconst2;
j15=x8655;
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst0=x8655;
IkReal gconst1=(r21*x8654);
IkReal gconst2=(x8653*x8654);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x8657=((-1.0)*r20);
IkReal x8658=x8615;
CheckValue<IkReal> x8660 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8657),IKFAST_ATAN2_MAGTHRESH);
if(!x8660.valid){
continue;
}
IkReal x8659=((-1.0)*(x8660.value));
sj15=gconst1;
cj15=gconst2;
j15=x8659;
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst0=x8659;
IkReal gconst1=(r21*x8658);
IkReal gconst2=(x8657*x8658);
IkReal x8661=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8665=IKPowWithIntegerCheck(x8661,-1);
if(!x8665.valid){
continue;
}
IkReal x8662=x8665.value;
IkReal x8663=((1.0)*x8662);
IkReal x8664=((((-1.0)*x8663*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x8662))+(((-1.0)*(r12*r12)))+(((-1.0)*x8663*(r10*r10)*(r20*r20))));
j14eval[0]=x8664;
j14eval[1]=r12;
j14eval[2]=x8661;
j14eval[3]=IKsign(x8664);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8666=((-1.0)*r20);
IkReal x8667=x8615;
CheckValue<IkReal> x8669 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8666),IKFAST_ATAN2_MAGTHRESH);
if(!x8669.valid){
continue;
}
IkReal x8668=((-1.0)*(x8669.value));
sj15=gconst1;
cj15=gconst2;
j15=x8668;
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst0=x8668;
IkReal gconst1=(r21*x8667);
IkReal gconst2=(x8666*x8667);
IkReal x8670=r22*r22;
IkReal x8671=((1.0)*r12);
IkReal x8672=(cj12*sj11);
IkReal x8673=(cj11*sj12);
CheckValue<IkReal> x8677=IKPowWithIntegerCheck(((-1.0)+x8670),-1);
if(!x8677.valid){
continue;
}
IkReal x8674=x8677.value;
if((((1.0)+(((-1.0)*x8670)))) < -0.00001)
continue;
IkReal x8675=IKsqrt(((1.0)+(((-1.0)*x8670))));
IkReal x8676=(r12*r22*x8674*x8675);
j14eval[0]=((IKabs((((x8673*x8676))+((x8672*x8676)))))+(IKabs(((((-1.0)*x8671*x8673))+(((-1.0)*x8671*x8672))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8678=(cj12*sj11);
IkReal x8679=(gconst1*r11);
IkReal x8680=(cj11*sj12);
IkReal x8681=((1.0)*r12);
IkReal x8682=((1.0)*gconst2*r10);
CheckValue<IkReal> x8683=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8683.valid){
continue;
}
CheckValue<IkReal> x8684 = IKatan2WithCheck(IkReal(((((-1.0)*x8678*x8682))+((x8679*x8680))+(((-1.0)*x8680*x8682))+((x8678*x8679)))),IkReal(((((-1.0)*x8678*x8681))+(((-1.0)*x8680*x8681)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8684.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8683.value)))+(x8684.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8685=IKcos(j14);
IkReal x8686=IKsin(j14);
IkReal x8687=(gconst1*r21);
IkReal x8688=((1.0)*x8685);
IkReal x8689=(gconst1*x8686);
IkReal x8690=(gconst1*x8685);
IkReal x8691=((1.0)*gconst2*x8686);
evalcond[0]=(((r12*x8686))+(((-1.0)*gconst2*r10*x8688))+((r11*x8690)));
evalcond[1]=((((-1.0)*r22*x8688))+((x8686*x8687))+(((-1.0)*r20*x8691)));
evalcond[2]=((((-1.0)*r02*x8688))+((r01*x8689))+(((-1.0)*r00*x8691)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8688))+((r11*x8689))+(((-1.0)*r10*x8691)));
evalcond[4]=(((r22*x8686))+((cj12*sj11))+((x8685*x8687))+((cj11*sj12))+(((-1.0)*gconst2*r20*x8688)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*gconst2*r00*x8688))+((r01*x8690))+((r02*x8686))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8692=(gconst2*r10);
IkReal x8693=(gconst1*r11);
CheckValue<IkReal> x8694=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8692*x8692)))+(((2.0)*x8692*x8693))+(((-1.0)*(x8693*x8693)))+(((-1.0)*(r12*r12))))),-1);
if(!x8694.valid){
continue;
}
CheckValue<IkReal> x8695 = IKatan2WithCheck(IkReal((x8693+(((-1.0)*x8692)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8695.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8694.value)))+(x8695.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8696=IKcos(j14);
IkReal x8697=IKsin(j14);
IkReal x8698=(gconst1*r21);
IkReal x8699=((1.0)*x8696);
IkReal x8700=(gconst1*x8697);
IkReal x8701=(gconst1*x8696);
IkReal x8702=((1.0)*gconst2*x8697);
evalcond[0]=(((r11*x8701))+(((-1.0)*gconst2*r10*x8699))+((r12*x8697)));
evalcond[1]=(((x8697*x8698))+(((-1.0)*r20*x8702))+(((-1.0)*r22*x8699)));
evalcond[2]=((((-1.0)*r02*x8699))+(((-1.0)*r00*x8702))+((r01*x8700)));
evalcond[3]=((1.0)+((r11*x8700))+(((-1.0)*r10*x8702))+(((-1.0)*r12*x8699)));
evalcond[4]=((((-1.0)*gconst2*r20*x8699))+((r22*x8697))+((cj12*sj11))+((x8696*x8698))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*gconst2*r00*x8699))+((r02*x8697))+((r01*x8701))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8703=((1.0)*gconst2);
CheckValue<IkReal> x8704 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8703))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8704.valid){
continue;
}
CheckValue<IkReal> x8705=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8703)))),-1);
if(!x8705.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8704.value)+(((1.5707963267949)*(x8705.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8706=IKcos(j14);
IkReal x8707=IKsin(j14);
IkReal x8708=(gconst1*r21);
IkReal x8709=((1.0)*x8706);
IkReal x8710=(gconst1*x8707);
IkReal x8711=(gconst1*x8706);
IkReal x8712=((1.0)*gconst2*x8707);
evalcond[0]=(((r12*x8707))+((r11*x8711))+(((-1.0)*gconst2*r10*x8709)));
evalcond[1]=((((-1.0)*r20*x8712))+((x8707*x8708))+(((-1.0)*r22*x8709)));
evalcond[2]=(((r01*x8710))+(((-1.0)*r02*x8709))+(((-1.0)*r00*x8712)));
evalcond[3]=((1.0)+((r11*x8710))+(((-1.0)*r10*x8712))+(((-1.0)*r12*x8709)));
evalcond[4]=(((r22*x8707))+((x8706*x8708))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*gconst2*r20*x8709)));
evalcond[5]=(((sj11*sj12))+((r02*x8707))+((r01*x8711))+(((-1.0)*gconst2*r00*x8709))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x8713=((-1.0)*r20);
IkReal x8714=x8615;
CheckValue<IkReal> x8716 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8713),IKFAST_ATAN2_MAGTHRESH);
if(!x8716.valid){
continue;
}
IkReal x8715=((-1.0)*(x8716.value));
sj15=gconst1;
cj15=gconst2;
j15=x8715;
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst0=x8715;
IkReal gconst1=(r21*x8714);
IkReal gconst2=(x8713*x8714);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x8717=((-1.0)*r20);
IkReal x8718=x8615;
CheckValue<IkReal> x8720 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8717),IKFAST_ATAN2_MAGTHRESH);
if(!x8720.valid){
continue;
}
IkReal x8719=((-1.0)*(x8720.value));
sj15=gconst1;
cj15=gconst2;
j15=x8719;
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst0=x8719;
IkReal gconst1=(r21*x8718);
IkReal gconst2=(x8717*x8718);
j14eval[0]=r12;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8721=((-1.0)*r20);
IkReal x8722=x8615;
CheckValue<IkReal> x8724 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8721),IKFAST_ATAN2_MAGTHRESH);
if(!x8724.valid){
continue;
}
IkReal x8723=((-1.0)*(x8724.value));
sj15=gconst1;
cj15=gconst2;
j15=x8723;
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst0=x8723;
IkReal gconst1=(r21*x8722);
IkReal gconst2=(x8721*x8722);
IkReal x8725=r22*r22;
IkReal x8726=((1.0)*r12);
IkReal x8727=(cj12*sj11);
IkReal x8728=(cj11*sj12);
CheckValue<IkReal> x8732=IKPowWithIntegerCheck(((-1.0)+x8725),-1);
if(!x8732.valid){
continue;
}
IkReal x8729=x8732.value;
if((((1.0)+(((-1.0)*x8725)))) < -0.00001)
continue;
IkReal x8730=IKsqrt(((1.0)+(((-1.0)*x8725))));
IkReal x8731=(r12*r22*x8729*x8730);
j14eval[0]=((IKabs(((((-1.0)*x8726*x8728))+(((-1.0)*x8726*x8727)))))+(IKabs((((x8727*x8731))+((x8728*x8731))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8733=(cj12*sj11);
IkReal x8734=(gconst1*r11);
IkReal x8735=(cj11*sj12);
IkReal x8736=((1.0)*r12);
IkReal x8737=((1.0)*gconst2*r10);
CheckValue<IkReal> x8738 = IKatan2WithCheck(IkReal((((x8734*x8735))+(((-1.0)*x8733*x8737))+((x8733*x8734))+(((-1.0)*x8735*x8737)))),IkReal(((((-1.0)*x8733*x8736))+(((-1.0)*x8735*x8736)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8738.valid){
continue;
}
CheckValue<IkReal> x8739=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8739.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8738.value)+(((1.5707963267949)*(x8739.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8740=IKcos(j14);
IkReal x8741=IKsin(j14);
IkReal x8742=(gconst1*r21);
IkReal x8743=((1.0)*x8740);
IkReal x8744=(gconst1*x8741);
IkReal x8745=(gconst1*x8740);
IkReal x8746=((1.0)*gconst2*x8741);
evalcond[0]=(((r12*x8741))+(((-1.0)*gconst2*r10*x8743))+((r11*x8745)));
evalcond[1]=(((x8741*x8742))+(((-1.0)*r22*x8743))+(((-1.0)*r20*x8746)));
evalcond[2]=(((r01*x8744))+(((-1.0)*r00*x8746))+(((-1.0)*r02*x8743)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8743))+(((-1.0)*r10*x8746))+((r11*x8744)));
evalcond[4]=(((x8740*x8742))+(((-1.0)*gconst2*r20*x8743))+((cj12*sj11))+((r22*x8741))+((cj11*sj12)));
evalcond[5]=(((r01*x8745))+(((-1.0)*sj11*sj12))+(((-1.0)*gconst2*r00*x8743))+((cj11*cj12))+((r02*x8741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8747=(gconst1*r11);
IkReal x8748=(gconst2*r10);
CheckValue<IkReal> x8749 = IKatan2WithCheck(IkReal((x8747+(((-1.0)*x8748)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8749.valid){
continue;
}
CheckValue<IkReal> x8750=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8748*x8748)+(((-2.0)*x8747*x8748))+(x8747*x8747))),-1);
if(!x8750.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8749.value)+(((1.5707963267949)*(x8750.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8751=IKcos(j14);
IkReal x8752=IKsin(j14);
IkReal x8753=(gconst1*r21);
IkReal x8754=((1.0)*x8751);
IkReal x8755=(gconst1*x8752);
IkReal x8756=(gconst1*x8751);
IkReal x8757=((1.0)*gconst2*x8752);
evalcond[0]=((((-1.0)*gconst2*r10*x8754))+((r11*x8756))+((r12*x8752)));
evalcond[1]=((((-1.0)*r22*x8754))+((x8752*x8753))+(((-1.0)*r20*x8757)));
evalcond[2]=((((-1.0)*r02*x8754))+(((-1.0)*r00*x8757))+((r01*x8755)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x8757))+((r11*x8755))+(((-1.0)*r12*x8754)));
evalcond[4]=(((r22*x8752))+(((-1.0)*gconst2*r20*x8754))+((x8751*x8753))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((r02*x8752))+(((-1.0)*gconst2*r00*x8754))+(((-1.0)*sj11*sj12))+((cj11*cj12))+((r01*x8756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x8758 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8758.valid){
continue;
}
CheckValue<IkReal> x8759=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8759.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8758.value)+(((1.5707963267949)*(x8759.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8760=IKcos(j14);
IkReal x8761=IKsin(j14);
IkReal x8762=(gconst1*r21);
IkReal x8763=((1.0)*x8760);
IkReal x8764=(gconst1*x8761);
IkReal x8765=(gconst1*x8760);
IkReal x8766=((1.0)*gconst2*x8761);
evalcond[0]=((((-1.0)*gconst2*r10*x8763))+((r12*x8761))+((r11*x8765)));
evalcond[1]=((((-1.0)*r20*x8766))+((x8761*x8762))+(((-1.0)*r22*x8763)));
evalcond[2]=((((-1.0)*r02*x8763))+((r01*x8764))+(((-1.0)*r00*x8766)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x8766))+(((-1.0)*r12*x8763))+((r11*x8764)));
evalcond[4]=(((x8760*x8762))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*gconst2*r20*x8763))+((r22*x8761)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+((r01*x8765))+(((-1.0)*gconst2*r00*x8763))+((r02*x8761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x8767=((-1.0)*r20);
IkReal x8768=x8615;
CheckValue<IkReal> x8770 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8767),IKFAST_ATAN2_MAGTHRESH);
if(!x8770.valid){
continue;
}
IkReal x8769=((-1.0)*(x8770.value));
sj15=gconst1;
cj15=gconst2;
j15=x8769;
sj13=0;
cj13=1.0;
j13=0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst0=x8769;
IkReal gconst1=(r21*x8768);
IkReal gconst2=(x8767*x8768);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x8771=((-1.0)*r20);
IkReal x8772=x8615;
CheckValue<IkReal> x8774 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8771),IKFAST_ATAN2_MAGTHRESH);
if(!x8774.valid){
continue;
}
IkReal x8773=((-1.0)*(x8774.value));
sj15=gconst1;
cj15=gconst2;
j15=x8773;
sj13=0;
cj13=1.0;
j13=0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst0=x8773;
IkReal gconst1=(r21*x8772);
IkReal gconst2=(x8771*x8772);
j14eval[0]=r02;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8775=((-1.0)*r20);
IkReal x8776=x8615;
CheckValue<IkReal> x8778 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8775),IKFAST_ATAN2_MAGTHRESH);
if(!x8778.valid){
continue;
}
IkReal x8777=((-1.0)*(x8778.value));
sj15=gconst1;
cj15=gconst2;
j15=x8777;
sj13=0;
cj13=1.0;
j13=0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst0=x8777;
IkReal gconst1=(r21*x8776);
IkReal gconst2=(x8775*x8776);
IkReal x8779=r22*r22;
IkReal x8780=(cj12*r02*sj11);
IkReal x8781=(cj11*r02*sj12);
CheckValue<IkReal> x8785=IKPowWithIntegerCheck(((-1.0)+x8779),-1);
if(!x8785.valid){
continue;
}
IkReal x8782=x8785.value;
if((((1.0)+(((-1.0)*x8779)))) < -0.00001)
continue;
IkReal x8783=IKsqrt(((1.0)+(((-1.0)*x8779))));
IkReal x8784=(r22*x8782*x8783);
j14eval[0]=((IKabs(((((-1.0)*x8781))+(((-1.0)*x8780)))))+(IKabs((((x8781*x8784))+((x8780*x8784))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8786=((1.0)*r02);
IkReal x8787=(cj12*sj11);
IkReal x8788=(cj11*sj12);
IkReal x8789=(gconst1*r01);
IkReal x8790=((1.0)*gconst2*r00);
CheckValue<IkReal> x8791=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8791.valid){
continue;
}
CheckValue<IkReal> x8792 = IKatan2WithCheck(IkReal((((x8788*x8789))+((x8787*x8789))+(((-1.0)*x8788*x8790))+(((-1.0)*x8787*x8790)))),IkReal(((((-1.0)*x8786*x8788))+(((-1.0)*x8786*x8787)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8792.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8791.value)))+(x8792.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8793=IKcos(j14);
IkReal x8794=IKsin(j14);
IkReal x8795=(gconst1*r21);
IkReal x8796=((1.0)*x8793);
IkReal x8797=(gconst1*x8794);
IkReal x8798=(gconst1*x8793);
IkReal x8799=((1.0)*gconst2*x8794);
evalcond[0]=(((r02*x8794))+(((-1.0)*gconst2*r00*x8796))+((r01*x8798)));
evalcond[1]=((((-1.0)*r20*x8799))+((x8794*x8795))+(((-1.0)*r22*x8796)));
evalcond[2]=((((-1.0)*r12*x8796))+((r11*x8797))+(((-1.0)*r10*x8799)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x8799))+(((-1.0)*r02*x8796))+((r01*x8797)));
evalcond[4]=((((-1.0)*gconst2*r20*x8796))+((x8793*x8795))+((r22*x8794))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r12*x8794))+((r11*x8798))+(((-1.0)*gconst2*r10*x8796))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8800=(gconst1*r01);
IkReal x8801=(gconst2*r00);
CheckValue<IkReal> x8802 = IKatan2WithCheck(IkReal(((((-1.0)*x8801))+x8800)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8802.valid){
continue;
}
CheckValue<IkReal> x8803=IKPowWithIntegerCheck(IKsign(((x8800*x8800)+(x8801*x8801)+(((-2.0)*x8800*x8801))+(r02*r02))),-1);
if(!x8803.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8802.value)+(((1.5707963267949)*(x8803.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8804=IKcos(j14);
IkReal x8805=IKsin(j14);
IkReal x8806=(gconst1*r21);
IkReal x8807=((1.0)*x8804);
IkReal x8808=(gconst1*x8805);
IkReal x8809=(gconst1*x8804);
IkReal x8810=((1.0)*gconst2*x8805);
evalcond[0]=(((r02*x8805))+(((-1.0)*gconst2*r00*x8807))+((r01*x8809)));
evalcond[1]=((((-1.0)*r22*x8807))+(((-1.0)*r20*x8810))+((x8805*x8806)));
evalcond[2]=((((-1.0)*r12*x8807))+(((-1.0)*r10*x8810))+((r11*x8808)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8807))+((r01*x8808))+(((-1.0)*r00*x8810)));
evalcond[4]=(((r22*x8805))+(((-1.0)*gconst2*r20*x8807))+((cj12*sj11))+((x8804*x8806))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r12*x8805))+((r11*x8809))+(((-1.0)*gconst2*r10*x8807))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8811=((1.0)*gconst2);
CheckValue<IkReal> x8812 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8811))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8812.valid){
continue;
}
CheckValue<IkReal> x8813=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8811))+(((-1.0)*gconst1*r10)))),-1);
if(!x8813.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8812.value)+(((1.5707963267949)*(x8813.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8814=IKcos(j14);
IkReal x8815=IKsin(j14);
IkReal x8816=(gconst1*r21);
IkReal x8817=((1.0)*x8814);
IkReal x8818=(gconst1*x8815);
IkReal x8819=(gconst1*x8814);
IkReal x8820=((1.0)*gconst2*x8815);
evalcond[0]=(((r02*x8815))+((r01*x8819))+(((-1.0)*gconst2*r00*x8817)));
evalcond[1]=((((-1.0)*r22*x8817))+(((-1.0)*r20*x8820))+((x8815*x8816)));
evalcond[2]=((((-1.0)*r12*x8817))+((r11*x8818))+(((-1.0)*r10*x8820)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8817))+((r01*x8818))+(((-1.0)*r00*x8820)));
evalcond[4]=((((-1.0)*gconst2*r20*x8817))+((r22*x8815))+((x8814*x8816))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r12*x8815))+((r11*x8819))+(((-1.0)*gconst2*r10*x8817))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x8821=((-1.0)*r20);
IkReal x8822=x8615;
CheckValue<IkReal> x8824 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8821),IKFAST_ATAN2_MAGTHRESH);
if(!x8824.valid){
continue;
}
IkReal x8823=((-1.0)*(x8824.value));
sj15=gconst1;
cj15=gconst2;
j15=x8823;
sj13=0;
cj13=1.0;
j13=0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst0=x8823;
IkReal gconst1=(r21*x8822);
IkReal gconst2=(x8821*x8822);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x8825=((-1.0)*r20);
IkReal x8826=x8615;
CheckValue<IkReal> x8828 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8825),IKFAST_ATAN2_MAGTHRESH);
if(!x8828.valid){
continue;
}
IkReal x8827=((-1.0)*(x8828.value));
sj15=gconst1;
cj15=gconst2;
j15=x8827;
sj13=0;
cj13=1.0;
j13=0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst0=x8827;
IkReal gconst1=(r21*x8826);
IkReal gconst2=(x8825*x8826);
IkReal x8829=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8833=IKPowWithIntegerCheck(x8829,-1);
if(!x8833.valid){
continue;
}
IkReal x8830=x8833.value;
IkReal x8831=((1.0)*x8830);
IkReal x8832=((((-2.0)*r00*r01*r20*r21*x8830))+(((-1.0)*(r02*r02)))+(((-1.0)*x8831*(r01*r01)*(r21*r21)))+(((-1.0)*x8831*(r00*r00)*(r20*r20))));
j14eval[0]=x8832;
j14eval[1]=IKsign(x8832);
j14eval[2]=r02;
j14eval[3]=x8829;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8834=((-1.0)*r20);
IkReal x8835=x8615;
CheckValue<IkReal> x8837 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8834),IKFAST_ATAN2_MAGTHRESH);
if(!x8837.valid){
continue;
}
IkReal x8836=((-1.0)*(x8837.value));
sj15=gconst1;
cj15=gconst2;
j15=x8836;
sj13=0;
cj13=1.0;
j13=0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst0=x8836;
IkReal gconst1=(r21*x8835);
IkReal gconst2=(x8834*x8835);
IkReal x8838=r22*r22;
IkReal x8839=(cj12*r02*sj11);
IkReal x8840=(cj11*r02*sj12);
CheckValue<IkReal> x8844=IKPowWithIntegerCheck(((-1.0)+x8838),-1);
if(!x8844.valid){
continue;
}
IkReal x8841=x8844.value;
if((((1.0)+(((-1.0)*x8838)))) < -0.00001)
continue;
IkReal x8842=IKsqrt(((1.0)+(((-1.0)*x8838))));
IkReal x8843=(r22*x8841*x8842);
j14eval[0]=((IKabs((((x8840*x8843))+((x8839*x8843)))))+(IKabs(((((-1.0)*x8839))+(((-1.0)*x8840))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8845=((1.0)*r02);
IkReal x8846=(cj12*sj11);
IkReal x8847=(cj11*sj12);
IkReal x8848=(gconst1*r01);
IkReal x8849=((1.0)*gconst2*r00);
CheckValue<IkReal> x8850=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8850.valid){
continue;
}
CheckValue<IkReal> x8851 = IKatan2WithCheck(IkReal((((x8846*x8848))+(((-1.0)*x8847*x8849))+(((-1.0)*x8846*x8849))+((x8847*x8848)))),IkReal(((((-1.0)*x8845*x8846))+(((-1.0)*x8845*x8847)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8851.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8850.value)))+(x8851.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8852=IKcos(j14);
IkReal x8853=IKsin(j14);
IkReal x8854=(gconst1*r21);
IkReal x8855=((1.0)*x8852);
IkReal x8856=(gconst1*x8853);
IkReal x8857=(gconst1*x8852);
IkReal x8858=((1.0)*gconst2*x8853);
evalcond[0]=((((-1.0)*gconst2*r00*x8855))+((r01*x8857))+((r02*x8853)));
evalcond[1]=((((-1.0)*r22*x8855))+((x8853*x8854))+(((-1.0)*r20*x8858)));
evalcond[2]=((((-1.0)*r12*x8855))+(((-1.0)*r10*x8858))+((r11*x8856)));
evalcond[3]=((1.0)+(((-1.0)*r00*x8858))+((r01*x8856))+(((-1.0)*r02*x8855)));
evalcond[4]=(((r22*x8853))+(((-1.0)*gconst2*r20*x8855))+((cj12*sj11))+((x8852*x8854))+((cj11*sj12)));
evalcond[5]=((((-1.0)*gconst2*r10*x8855))+(((-1.0)*sj11*sj12))+((cj11*cj12))+((r11*x8857))+((r12*x8853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8859=(gconst1*r01);
IkReal x8860=(gconst2*r00);
CheckValue<IkReal> x8861 = IKatan2WithCheck(IkReal((x8859+(((-1.0)*x8860)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8861.valid){
continue;
}
CheckValue<IkReal> x8862=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8859*x8859)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8860*x8860)))+(((2.0)*x8859*x8860)))),-1);
if(!x8862.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8861.value)+(((1.5707963267949)*(x8862.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8863=IKcos(j14);
IkReal x8864=IKsin(j14);
IkReal x8865=(gconst1*r21);
IkReal x8866=((1.0)*x8863);
IkReal x8867=(gconst1*x8864);
IkReal x8868=(gconst1*x8863);
IkReal x8869=((1.0)*gconst2*x8864);
evalcond[0]=(((r02*x8864))+((r01*x8868))+(((-1.0)*gconst2*r00*x8866)));
evalcond[1]=(((x8864*x8865))+(((-1.0)*r22*x8866))+(((-1.0)*r20*x8869)));
evalcond[2]=((((-1.0)*r10*x8869))+((r11*x8867))+(((-1.0)*r12*x8866)));
evalcond[3]=((1.0)+((r01*x8867))+(((-1.0)*r00*x8869))+(((-1.0)*r02*x8866)));
evalcond[4]=((((-1.0)*gconst2*r20*x8866))+((x8863*x8865))+((cj12*sj11))+((cj11*sj12))+((r22*x8864)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+((r12*x8864))+((r11*x8868))+(((-1.0)*gconst2*r10*x8866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x8870 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8870.valid){
continue;
}
CheckValue<IkReal> x8871=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8871.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8870.value)+(((1.5707963267949)*(x8871.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8872=IKcos(j14);
IkReal x8873=IKsin(j14);
IkReal x8874=(gconst1*r21);
IkReal x8875=((1.0)*x8872);
IkReal x8876=(gconst1*x8873);
IkReal x8877=(gconst1*x8872);
IkReal x8878=((1.0)*gconst2*x8873);
evalcond[0]=(((r02*x8873))+((r01*x8877))+(((-1.0)*gconst2*r00*x8875)));
evalcond[1]=((((-1.0)*r22*x8875))+((x8873*x8874))+(((-1.0)*r20*x8878)));
evalcond[2]=(((r11*x8876))+(((-1.0)*r10*x8878))+(((-1.0)*r12*x8875)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8875))+((r01*x8876))+(((-1.0)*r00*x8878)));
evalcond[4]=((((-1.0)*gconst2*r20*x8875))+((x8872*x8874))+((cj12*sj11))+((r22*x8873))+((cj11*sj12)));
evalcond[5]=((((-1.0)*gconst2*r10*x8875))+(((-1.0)*sj11*sj12))+((cj11*cj12))+((r11*x8877))+((r12*x8873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x8879=((-1.0)*r20);
IkReal x8880=((-1.0)*px);
CheckValue<IkReal> x8882 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8879),IKFAST_ATAN2_MAGTHRESH);
if(!x8882.valid){
continue;
}
IkReal x8881=((-1.0)*(x8882.value));
sj15=gconst1;
cj15=gconst2;
j15=x8881;
sj13=0;
cj13=1.0;
j13=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8880);
rxp1_1=(px*r21);
rxp1_2=(r11*x8880);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8881;
IkReal gconst1=r21;
IkReal gconst2=x8879;
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8883=((-1.0)*r20);
IkReal x8884=((-1.0)*px);
CheckValue<IkReal> x8886 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8883),IKFAST_ATAN2_MAGTHRESH);
if(!x8886.valid){
continue;
}
IkReal x8885=((-1.0)*(x8886.value));
sj15=gconst1;
cj15=gconst2;
j15=x8885;
sj13=0;
cj13=1.0;
j13=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8884);
rxp1_1=(px*r21);
rxp1_2=(r11*x8884);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8885;
IkReal gconst1=r21;
IkReal gconst2=x8883;
j14eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8887=((-1.0)*r20);
IkReal x8888=((-1.0)*px);
CheckValue<IkReal> x8890 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8887),IKFAST_ATAN2_MAGTHRESH);
if(!x8890.valid){
continue;
}
IkReal x8889=((-1.0)*(x8890.value));
sj15=gconst1;
cj15=gconst2;
j15=x8889;
sj13=0;
cj13=1.0;
j13=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8888);
rxp1_1=(px*r21);
rxp1_2=(r11*x8888);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8889;
IkReal gconst1=r21;
IkReal gconst2=x8887;
j14eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x8893=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x8893.valid){
continue;
}
IkReal x8891=x8893.value;
IkReal x8892=(sj10*x8891);
cj14array[0]=((((-1.0)*sj11*sj12*x8892))+((cj11*cj12*x8892)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x8894=IKsin(j14);
IkReal x8895=IKcos(j14);
IkReal x8896=(gconst1*r21);
IkReal x8897=((1.0)*x8895);
IkReal x8898=((1.0)*gconst2*x8894);
evalcond[0]=(r02*x8894);
evalcond[1]=((((-1.0)*sj10))+(((-1.0)*r02*x8897)));
evalcond[2]=((((-1.0)*r20*x8898))+((x8894*x8896)));
evalcond[3]=(((gconst1*r11*x8894))+(((-1.0)*r10*x8898)));
evalcond[4]=(((x8895*x8896))+((cj12*sj11))+(((-1.0)*gconst2*r20*x8897))+((cj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x8901=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x8901.valid){
continue;
}
IkReal x8899=x8901.value;
IkReal x8900=((1.0)*x8899);
cj14array[0]=((((-1.0)*cj11*sj12*x8900))+(((-1.0)*cj12*sj11*x8900)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x8902=IKsin(j14);
IkReal x8903=IKcos(j14);
IkReal x8904=(gconst2*r10);
IkReal x8905=((1.0)*sj10);
IkReal x8906=((1.0)*x8903);
IkReal x8907=(gconst1*x8902);
IkReal x8908=((1.0)*x8902);
evalcond[0]=(r02*x8902);
evalcond[1]=((((-1.0)*x8905))+(((-1.0)*r02*x8906)));
evalcond[2]=(((r21*x8907))+(((-1.0)*gconst2*r20*x8908)));
evalcond[3]=(((r11*x8907))+(((-1.0)*x8904*x8908)));
evalcond[4]=(((gconst1*r11*x8903))+(((-1.0)*cj11*cj12*x8905))+(((-1.0)*x8904*x8906))+((sj10*sj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x8909=IKPowWithIntegerCheck(r02,-1);
if(!x8909.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x8909.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x8910=IKsin(j14);
IkReal x8911=IKcos(j14);
IkReal x8912=(gconst1*r21);
IkReal x8913=(gconst1*r11);
IkReal x8914=((1.0)*gconst2*r10);
IkReal x8915=((1.0)*gconst2*r20);
evalcond[0]=(r02*x8910);
evalcond[1]=(((x8910*x8912))+(((-1.0)*x8910*x8915)));
evalcond[2]=(((x8910*x8913))+(((-1.0)*x8910*x8914)));
evalcond[3]=(((x8911*x8912))+(((-1.0)*x8911*x8915))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj11*cj12*sj10))+((x8911*x8913))+(((-1.0)*x8911*x8914))+((sj10*sj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8916=(gconst1*r21);
IkReal x8917=(cj11*sj12);
IkReal x8918=(cj12*sj11);
IkReal x8919=(gconst2*r20);
CheckValue<IkReal> x8920=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8916*x8916)))+(((-1.0)*(r22*r22)))+(((2.0)*x8916*x8919))+(((-1.0)*(x8919*x8919))))),-1);
if(!x8920.valid){
continue;
}
CheckValue<IkReal> x8921 = IKatan2WithCheck(IkReal((((r22*x8917))+((r22*x8918)))),IkReal(((((-1.0)*x8917*x8919))+(((-1.0)*x8918*x8919))+((x8916*x8917))+((x8916*x8918)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8921.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8920.value)))+(x8921.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8922=IKsin(j14);
IkReal x8923=IKcos(j14);
IkReal x8924=(gconst1*r21);
IkReal x8925=((1.0)*sj10);
IkReal x8926=(sj11*sj12);
IkReal x8927=(cj11*cj12);
IkReal x8928=((1.0)*x8923);
IkReal x8929=(gconst1*x8922);
IkReal x8930=(gconst1*x8923);
IkReal x8931=((1.0)*gconst2*x8922);
evalcond[0]=((((-1.0)*r22*x8928))+(((-1.0)*r20*x8931))+((x8922*x8924)));
evalcond[1]=((((-1.0)*r10*x8931))+cj10+(((-1.0)*r12*x8928))+((r11*x8929)));
evalcond[2]=((((-1.0)*r02*x8928))+(((-1.0)*x8925))+(((-1.0)*r00*x8931))+((r01*x8929)));
evalcond[3]=(((x8923*x8924))+(((-1.0)*gconst2*r20*x8928))+((r22*x8922))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((cj10*x8926))+(((-1.0)*cj10*x8927))+((r02*x8922))+(((-1.0)*gconst2*r00*x8928))+((r01*x8930)));
evalcond[5]=((((-1.0)*gconst2*r10*x8928))+((sj10*x8926))+((r12*x8922))+(((-1.0)*x8925*x8927))+((r11*x8930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8932=((1.0)*gconst2);
CheckValue<IkReal> x8933=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8932))+(((-1.0)*gconst1*r10)))),-1);
if(!x8933.valid){
continue;
}
CheckValue<IkReal> x8934 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst1*r21*sj10))+(((-1.0)*r20*sj10*x8932)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8934.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8933.value)))+(x8934.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8935=IKsin(j14);
IkReal x8936=IKcos(j14);
IkReal x8937=(gconst1*r21);
IkReal x8938=((1.0)*sj10);
IkReal x8939=(sj11*sj12);
IkReal x8940=(cj11*cj12);
IkReal x8941=((1.0)*x8936);
IkReal x8942=(gconst1*x8935);
IkReal x8943=(gconst1*x8936);
IkReal x8944=((1.0)*gconst2*x8935);
evalcond[0]=(((x8935*x8937))+(((-1.0)*r22*x8941))+(((-1.0)*r20*x8944)));
evalcond[1]=(((r11*x8942))+(((-1.0)*r12*x8941))+cj10+(((-1.0)*r10*x8944)));
evalcond[2]=((((-1.0)*r00*x8944))+((r01*x8942))+(((-1.0)*r02*x8941))+(((-1.0)*x8938)));
evalcond[3]=(((x8936*x8937))+(((-1.0)*gconst2*r20*x8941))+((cj12*sj11))+((cj11*sj12))+((r22*x8935)));
evalcond[4]=(((r01*x8943))+(((-1.0)*cj10*x8940))+(((-1.0)*gconst2*r00*x8941))+((r02*x8935))+((cj10*x8939)));
evalcond[5]=(((r12*x8935))+((r11*x8943))+(((-1.0)*x8938*x8940))+(((-1.0)*gconst2*r10*x8941))+((sj10*x8939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8945=((1.0)*gconst2);
CheckValue<IkReal> x8946=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8945))+(((-1.0)*gconst1*r00)))),-1);
if(!x8946.valid){
continue;
}
CheckValue<IkReal> x8947 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst1*r21))+(((-1.0)*cj10*r20*x8945)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8947.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8946.value)))+(x8947.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8948=IKsin(j14);
IkReal x8949=IKcos(j14);
IkReal x8950=(gconst1*r21);
IkReal x8951=((1.0)*sj10);
IkReal x8952=(sj11*sj12);
IkReal x8953=(cj11*cj12);
IkReal x8954=((1.0)*x8949);
IkReal x8955=(gconst1*x8948);
IkReal x8956=(gconst1*x8949);
IkReal x8957=((1.0)*gconst2*x8948);
evalcond[0]=((((-1.0)*r22*x8954))+(((-1.0)*r20*x8957))+((x8948*x8950)));
evalcond[1]=((((-1.0)*r10*x8957))+(((-1.0)*r12*x8954))+cj10+((r11*x8955)));
evalcond[2]=((((-1.0)*r00*x8957))+((r01*x8955))+(((-1.0)*r02*x8954))+(((-1.0)*x8951)));
evalcond[3]=(((r22*x8948))+(((-1.0)*gconst2*r20*x8954))+((cj12*sj11))+((cj11*sj12))+((x8949*x8950)));
evalcond[4]=(((r02*x8948))+((r01*x8956))+((cj10*x8952))+(((-1.0)*cj10*x8953))+(((-1.0)*gconst2*r00*x8954)));
evalcond[5]=((((-1.0)*x8951*x8953))+((sj10*x8952))+(((-1.0)*gconst2*r10*x8954))+((r12*x8948))+((r11*x8956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x8958=((-1.0)*r20);
IkReal x8959=x8615;
CheckValue<IkReal> x8961 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8958),IKFAST_ATAN2_MAGTHRESH);
if(!x8961.valid){
continue;
}
IkReal x8960=((-1.0)*(x8961.value));
sj15=gconst1;
cj15=gconst2;
j15=x8960;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst0=x8960;
IkReal gconst1=(r21*x8959);
IkReal gconst2=(x8958*x8959);
j14eval[0]=cj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8962=((-1.0)*r20);
IkReal x8963=x8615;
CheckValue<IkReal> x8965 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8962),IKFAST_ATAN2_MAGTHRESH);
if(!x8965.valid){
continue;
}
IkReal x8964=((-1.0)*(x8965.value));
sj15=gconst1;
cj15=gconst2;
j15=x8964;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst0=x8964;
IkReal gconst1=(r21*x8963);
IkReal gconst2=(x8962*x8963);
j14eval[0]=sj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x8966=((-1.0)*r20);
IkReal x8967=x8615;
CheckValue<IkReal> x8969 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8966),IKFAST_ATAN2_MAGTHRESH);
if(!x8969.valid){
continue;
}
IkReal x8968=((-1.0)*(x8969.value));
sj15=gconst1;
cj15=gconst2;
j15=x8968;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst0=x8968;
IkReal gconst1=(r21*x8967);
IkReal gconst2=(x8966*x8967);
IkReal x8970=r22*r22;
CheckValue<IkReal> x8973=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8970))),-1);
if(!x8973.valid){
continue;
}
IkReal x8971=x8973.value;
IkReal x8972=(((x8971*(r20*r20*r20*r20)))+((x8971*(r21*r21*r21*r21)))+x8970+(((2.0)*x8971*(r20*r20)*(r21*r21))));
j14eval[0]=x8972;
j14eval[1]=IKsign(x8972);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x8974=((-1.0)*r20);
IkReal x8975=x8615;
CheckValue<IkReal> x8977 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8974),IKFAST_ATAN2_MAGTHRESH);
if(!x8977.valid){
continue;
}
IkReal x8976=((-1.0)*(x8977.value));
sj15=gconst1;
cj15=gconst2;
j15=x8976;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst0=x8976;
IkReal gconst1=(r21*x8975);
IkReal gconst2=(x8974*x8975);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x8978=((-1.0)*r20);
IkReal x8979=x8615;
CheckValue<IkReal> x8981 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8978),IKFAST_ATAN2_MAGTHRESH);
if(!x8981.valid){
continue;
}
IkReal x8980=((-1.0)*(x8981.value));
sj15=gconst1;
cj15=gconst2;
j15=x8980;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst0=x8980;
IkReal gconst1=(r21*x8979);
IkReal gconst2=(x8978*x8979);
j14eval[0]=r12;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8982=((-1.0)*r20);
IkReal x8983=x8615;
CheckValue<IkReal> x8985 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8982),IKFAST_ATAN2_MAGTHRESH);
if(!x8985.valid){
continue;
}
IkReal x8984=((-1.0)*(x8985.value));
sj15=gconst1;
cj15=gconst2;
j15=x8984;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst0=x8984;
IkReal gconst1=(r21*x8983);
IkReal gconst2=(x8982*x8983);
IkReal x8986=r22*r22;
IkReal x8987=(cj12*r12*sj11);
IkReal x8988=(cj11*r12*sj12);
CheckValue<IkReal> x8992=IKPowWithIntegerCheck(((-1.0)+x8986),-1);
if(!x8992.valid){
continue;
}
IkReal x8989=x8992.value;
if((((1.0)+(((-1.0)*x8986)))) < -0.00001)
continue;
IkReal x8990=IKsqrt(((1.0)+(((-1.0)*x8986))));
IkReal x8991=((1.0)*r22*x8989*x8990);
j14eval[0]=((IKabs(((((-1.0)*x8987*x8991))+(((-1.0)*x8988*x8991)))))+(IKabs((x8987+x8988))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8993=(cj12*sj11);
IkReal x8994=((1.0)*gconst1);
IkReal x8995=(cj11*sj12);
IkReal x8996=(gconst2*r10);
CheckValue<IkReal> x8997=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x8994)))),-1);
if(!x8997.valid){
continue;
}
CheckValue<IkReal> x8998 = IKatan2WithCheck(IkReal((((x8995*x8996))+(((-1.0)*r11*x8993*x8994))+(((-1.0)*r11*x8994*x8995))+((x8993*x8996)))),IkReal((((r12*x8993))+((r12*x8995)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8998.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8997.value)))+(x8998.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8999=IKsin(j14);
IkReal x9000=IKcos(j14);
IkReal x9001=(gconst1*r21);
IkReal x9002=(gconst1*r11);
IkReal x9003=(gconst1*r01);
IkReal x9004=(gconst2*r10);
IkReal x9005=(gconst2*r20);
IkReal x9006=(gconst2*r00);
IkReal x9007=((1.0)*x9000);
IkReal x9008=((1.0)*x8999);
evalcond[0]=((((-1.0)*r22*x9007))+((x8999*x9001))+(((-1.0)*x9005*x9008)));
evalcond[1]=((((-1.0)*r02*x9007))+((x8999*x9003))+(((-1.0)*x9006*x9008)));
evalcond[2]=(((x9000*x9004))+(((-1.0)*r12*x9008))+(((-1.0)*x9002*x9007)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9007))+(((-1.0)*x9004*x9008))+((x8999*x9002)));
evalcond[4]=((((-1.0)*r22*x9008))+((x9000*x9005))+(((-1.0)*x9001*x9007))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r02*x9008))+((x9000*x9006))+(((-1.0)*x9003*x9007))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9009=(gconst1*r11);
IkReal x9010=(gconst2*r10);
CheckValue<IkReal> x9011 = IKatan2WithCheck(IkReal(((((-1.0)*x9009))+x9010)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9011.valid){
continue;
}
CheckValue<IkReal> x9012=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9009*x9010))+(x9009*x9009)+(x9010*x9010))),-1);
if(!x9012.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9011.value)+(((1.5707963267949)*(x9012.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9013=IKsin(j14);
IkReal x9014=IKcos(j14);
IkReal x9015=(gconst1*r21);
IkReal x9016=(gconst1*r11);
IkReal x9017=(gconst1*r01);
IkReal x9018=(gconst2*r10);
IkReal x9019=(gconst2*r20);
IkReal x9020=(gconst2*r00);
IkReal x9021=((1.0)*x9014);
IkReal x9022=((1.0)*x9013);
evalcond[0]=((((-1.0)*r22*x9021))+((x9013*x9015))+(((-1.0)*x9019*x9022)));
evalcond[1]=((((-1.0)*x9020*x9022))+((x9013*x9017))+(((-1.0)*r02*x9021)));
evalcond[2]=((((-1.0)*r12*x9022))+(((-1.0)*x9016*x9021))+((x9014*x9018)));
evalcond[3]=((1.0)+(((-1.0)*x9018*x9022))+(((-1.0)*r12*x9021))+((x9013*x9016)));
evalcond[4]=((((-1.0)*x9015*x9021))+((cj12*sj11))+(((-1.0)*r22*x9022))+((x9014*x9019))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x9017*x9021))+((x9014*x9020))+(((-1.0)*r02*x9022))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9023=((1.0)*gconst2);
CheckValue<IkReal> x9024 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9023))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9024.valid){
continue;
}
CheckValue<IkReal> x9025=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9023)))),-1);
if(!x9025.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9024.value)+(((1.5707963267949)*(x9025.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9026=IKsin(j14);
IkReal x9027=IKcos(j14);
IkReal x9028=(gconst1*r21);
IkReal x9029=(gconst1*r11);
IkReal x9030=(gconst1*r01);
IkReal x9031=(gconst2*r10);
IkReal x9032=(gconst2*r20);
IkReal x9033=(gconst2*r00);
IkReal x9034=((1.0)*x9027);
IkReal x9035=((1.0)*x9026);
evalcond[0]=(((x9026*x9028))+(((-1.0)*x9032*x9035))+(((-1.0)*r22*x9034)));
evalcond[1]=(((x9026*x9030))+(((-1.0)*x9033*x9035))+(((-1.0)*r02*x9034)));
evalcond[2]=(((x9027*x9031))+(((-1.0)*r12*x9035))+(((-1.0)*x9029*x9034)));
evalcond[3]=((1.0)+((x9026*x9029))+(((-1.0)*r12*x9034))+(((-1.0)*x9031*x9035)));
evalcond[4]=(((x9027*x9032))+((cj12*sj11))+(((-1.0)*x9028*x9034))+(((-1.0)*r22*x9035))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x9027*x9033))+(((-1.0)*x9030*x9034))+(((-1.0)*cj11*cj12))+(((-1.0)*r02*x9035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x9036=((-1.0)*r20);
IkReal x9037=x8615;
CheckValue<IkReal> x9039 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9036),IKFAST_ATAN2_MAGTHRESH);
if(!x9039.valid){
continue;
}
IkReal x9038=((-1.0)*(x9039.value));
sj15=gconst1;
cj15=gconst2;
j15=x9038;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst0=x9038;
IkReal gconst1=(r21*x9037);
IkReal gconst2=(x9036*x9037);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x9040=((-1.0)*r20);
IkReal x9041=x8615;
CheckValue<IkReal> x9043 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9040),IKFAST_ATAN2_MAGTHRESH);
if(!x9043.valid){
continue;
}
IkReal x9042=((-1.0)*(x9043.value));
sj15=gconst1;
cj15=gconst2;
j15=x9042;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst0=x9042;
IkReal gconst1=(r21*x9041);
IkReal gconst2=(x9040*x9041);
IkReal x9044=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9048=IKPowWithIntegerCheck(x9044,-1);
if(!x9048.valid){
continue;
}
IkReal x9045=x9048.value;
IkReal x9046=((1.0)*x9045);
IkReal x9047=((((-1.0)*x9046*(r11*r11)*(r21*r21)))+(((-1.0)*x9046*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x9045))+(((-1.0)*(r12*r12))));
j14eval[0]=x9047;
j14eval[1]=r12;
j14eval[2]=x9044;
j14eval[3]=IKsign(x9047);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9049=((-1.0)*r20);
IkReal x9050=x8615;
CheckValue<IkReal> x9052 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9049),IKFAST_ATAN2_MAGTHRESH);
if(!x9052.valid){
continue;
}
IkReal x9051=((-1.0)*(x9052.value));
sj15=gconst1;
cj15=gconst2;
j15=x9051;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst0=x9051;
IkReal gconst1=(r21*x9050);
IkReal gconst2=(x9049*x9050);
IkReal x9053=r22*r22;
IkReal x9054=(cj12*r12*sj11);
IkReal x9055=(cj11*r12*sj12);
CheckValue<IkReal> x9059=IKPowWithIntegerCheck(((-1.0)+x9053),-1);
if(!x9059.valid){
continue;
}
IkReal x9056=x9059.value;
if((((1.0)+(((-1.0)*x9053)))) < -0.00001)
continue;
IkReal x9057=IKsqrt(((1.0)+(((-1.0)*x9053))));
IkReal x9058=((1.0)*r22*x9056*x9057);
j14eval[0]=((IKabs(((((-1.0)*x9055*x9058))+(((-1.0)*x9054*x9058)))))+(IKabs((x9054+x9055))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9060=(cj12*sj11);
IkReal x9061=((1.0)*gconst1);
IkReal x9062=(cj11*sj12);
IkReal x9063=(gconst2*r10);
CheckValue<IkReal> x9064 = IKatan2WithCheck(IkReal((((x9060*x9063))+(((-1.0)*r11*x9061*x9062))+((x9062*x9063))+(((-1.0)*r11*x9060*x9061)))),IkReal((((r12*x9060))+((r12*x9062)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9064.valid){
continue;
}
CheckValue<IkReal> x9065=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9061)))),-1);
if(!x9065.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9064.value)+(((1.5707963267949)*(x9065.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9066=IKsin(j14);
IkReal x9067=IKcos(j14);
IkReal x9068=(gconst1*r21);
IkReal x9069=(gconst1*r11);
IkReal x9070=(gconst1*r01);
IkReal x9071=(gconst2*r10);
IkReal x9072=(gconst2*r20);
IkReal x9073=(gconst2*r00);
IkReal x9074=((1.0)*x9067);
IkReal x9075=((1.0)*x9066);
evalcond[0]=((((-1.0)*x9072*x9075))+(((-1.0)*r22*x9074))+((x9066*x9068)));
evalcond[1]=(((x9066*x9070))+(((-1.0)*r02*x9074))+(((-1.0)*x9073*x9075)));
evalcond[2]=(((x9067*x9071))+(((-1.0)*r12*x9075))+(((-1.0)*x9069*x9074)));
evalcond[3]=((-1.0)+(((-1.0)*x9071*x9075))+(((-1.0)*r12*x9074))+((x9066*x9069)));
evalcond[4]=(((x9067*x9072))+(((-1.0)*x9068*x9074))+(((-1.0)*r22*x9075))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+(((-1.0)*r02*x9075))+((cj11*cj12))+((x9067*x9073))+(((-1.0)*x9070*x9074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9076=(gconst1*r11);
IkReal x9077=(gconst2*r10);
CheckValue<IkReal> x9078=IKPowWithIntegerCheck(IKsign(((((2.0)*x9076*x9077))+(((-1.0)*(x9077*x9077)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9076*x9076))))),-1);
if(!x9078.valid){
continue;
}
CheckValue<IkReal> x9079 = IKatan2WithCheck(IkReal(((((-1.0)*x9076))+x9077)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9079.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9078.value)))+(x9079.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9080=IKsin(j14);
IkReal x9081=IKcos(j14);
IkReal x9082=(gconst1*r21);
IkReal x9083=(gconst1*r11);
IkReal x9084=(gconst1*r01);
IkReal x9085=(gconst2*r10);
IkReal x9086=(gconst2*r20);
IkReal x9087=(gconst2*r00);
IkReal x9088=((1.0)*x9081);
IkReal x9089=((1.0)*x9080);
evalcond[0]=((((-1.0)*x9086*x9089))+((x9080*x9082))+(((-1.0)*r22*x9088)));
evalcond[1]=(((x9080*x9084))+(((-1.0)*r02*x9088))+(((-1.0)*x9087*x9089)));
evalcond[2]=(((x9081*x9085))+(((-1.0)*x9083*x9088))+(((-1.0)*r12*x9089)));
evalcond[3]=((-1.0)+((x9080*x9083))+(((-1.0)*x9085*x9089))+(((-1.0)*r12*x9088)));
evalcond[4]=(((x9081*x9086))+(((-1.0)*x9082*x9088))+(((-1.0)*r22*x9089))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((x9081*x9087))+(((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*x9084*x9088))+(((-1.0)*r02*x9089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x9090 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9090.valid){
continue;
}
CheckValue<IkReal> x9091=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9091.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9090.value)+(((1.5707963267949)*(x9091.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9092=IKsin(j14);
IkReal x9093=IKcos(j14);
IkReal x9094=(gconst1*r21);
IkReal x9095=(gconst1*r11);
IkReal x9096=(gconst1*r01);
IkReal x9097=(gconst2*r10);
IkReal x9098=(gconst2*r20);
IkReal x9099=(gconst2*r00);
IkReal x9100=((1.0)*x9093);
IkReal x9101=((1.0)*x9092);
evalcond[0]=(((x9092*x9094))+(((-1.0)*r22*x9100))+(((-1.0)*x9098*x9101)));
evalcond[1]=((((-1.0)*r02*x9100))+((x9092*x9096))+(((-1.0)*x9099*x9101)));
evalcond[2]=((((-1.0)*x9095*x9100))+(((-1.0)*r12*x9101))+((x9093*x9097)));
evalcond[3]=((-1.0)+((x9092*x9095))+(((-1.0)*r12*x9100))+(((-1.0)*x9097*x9101)));
evalcond[4]=((((-1.0)*x9094*x9100))+(((-1.0)*r22*x9101))+((cj12*sj11))+((x9093*x9098))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*r02*x9101))+((x9093*x9099))+(((-1.0)*x9096*x9100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x9102=((-1.0)*r20);
IkReal x9103=x8615;
CheckValue<IkReal> x9105 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9102),IKFAST_ATAN2_MAGTHRESH);
if(!x9105.valid){
continue;
}
IkReal x9104=((-1.0)*(x9105.value));
sj15=gconst1;
cj15=gconst2;
j15=x9104;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst0=x9104;
IkReal gconst1=(r21*x9103);
IkReal gconst2=(x9102*x9103);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x9106=((-1.0)*r20);
IkReal x9107=x8615;
CheckValue<IkReal> x9109 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9106),IKFAST_ATAN2_MAGTHRESH);
if(!x9109.valid){
continue;
}
IkReal x9108=((-1.0)*(x9109.value));
sj15=gconst1;
cj15=gconst2;
j15=x9108;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst0=x9108;
IkReal gconst1=(r21*x9107);
IkReal gconst2=(x9106*x9107);
IkReal x9110=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9114=IKPowWithIntegerCheck(x9110,-1);
if(!x9114.valid){
continue;
}
IkReal x9111=x9114.value;
IkReal x9112=((1.0)*x9111);
IkReal x9113=((((-2.0)*r00*r01*r20*r21*x9111))+(((-1.0)*(r02*r02)))+(((-1.0)*x9112*(r00*r00)*(r20*r20)))+(((-1.0)*x9112*(r01*r01)*(r21*r21))));
j14eval[0]=x9113;
j14eval[1]=IKsign(x9113);
j14eval[2]=r02;
j14eval[3]=x9110;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9115=((-1.0)*r20);
IkReal x9116=x8615;
CheckValue<IkReal> x9118 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9115),IKFAST_ATAN2_MAGTHRESH);
if(!x9118.valid){
continue;
}
IkReal x9117=((-1.0)*(x9118.value));
sj15=gconst1;
cj15=gconst2;
j15=x9117;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst0=x9117;
IkReal gconst1=(r21*x9116);
IkReal gconst2=(x9115*x9116);
IkReal x9119=r22*r22;
IkReal x9120=(cj12*r02*sj11);
IkReal x9121=(cj11*r02*sj12);
CheckValue<IkReal> x9125=IKPowWithIntegerCheck(((-1.0)+x9119),-1);
if(!x9125.valid){
continue;
}
IkReal x9122=x9125.value;
if((((1.0)+(((-1.0)*x9119)))) < -0.00001)
continue;
IkReal x9123=IKsqrt(((1.0)+(((-1.0)*x9119))));
IkReal x9124=((1.0)*r22*x9122*x9123);
j14eval[0]=((IKabs((x9120+x9121)))+(IKabs(((((-1.0)*x9121*x9124))+(((-1.0)*x9120*x9124))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9126=(cj12*sj11);
IkReal x9127=(cj11*sj12);
IkReal x9128=(gconst2*r00);
IkReal x9129=((1.0)*gconst1*r01);
CheckValue<IkReal> x9130 = IKatan2WithCheck(IkReal((((x9126*x9128))+((x9127*x9128))+(((-1.0)*x9127*x9129))+(((-1.0)*x9126*x9129)))),IkReal((((r02*x9127))+((r02*x9126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9130.valid){
continue;
}
CheckValue<IkReal> x9131=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9131.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9130.value)+(((1.5707963267949)*(x9131.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9132=IKsin(j14);
IkReal x9133=IKcos(j14);
IkReal x9134=(gconst1*r21);
IkReal x9135=(gconst1*r11);
IkReal x9136=(gconst1*r01);
IkReal x9137=(gconst2*r10);
IkReal x9138=(gconst2*r20);
IkReal x9139=(gconst2*r00);
IkReal x9140=((1.0)*x9133);
IkReal x9141=((1.0)*x9132);
evalcond[0]=(((x9132*x9134))+(((-1.0)*r22*x9140))+(((-1.0)*x9138*x9141)));
evalcond[1]=(((x9132*x9135))+(((-1.0)*r12*x9140))+(((-1.0)*x9137*x9141)));
evalcond[2]=(((x9133*x9139))+(((-1.0)*r02*x9141))+(((-1.0)*x9136*x9140)));
evalcond[3]=((-1.0)+((x9132*x9136))+(((-1.0)*r02*x9140))+(((-1.0)*x9139*x9141)));
evalcond[4]=((((-1.0)*r22*x9141))+((x9133*x9138))+((cj12*sj11))+(((-1.0)*x9134*x9140))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x9133*x9137))+(((-1.0)*x9135*x9140))+(((-1.0)*r12*x9141))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9142=(gconst2*r00);
IkReal x9143=(gconst1*r01);
CheckValue<IkReal> x9144=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9143*x9143)))+(((-1.0)*(x9142*x9142)))+(((-1.0)*(r02*r02)))+(((2.0)*x9142*x9143)))),-1);
if(!x9144.valid){
continue;
}
CheckValue<IkReal> x9145 = IKatan2WithCheck(IkReal(((((-1.0)*x9143))+x9142)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9145.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9144.value)))+(x9145.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9146=IKsin(j14);
IkReal x9147=IKcos(j14);
IkReal x9148=(gconst1*r21);
IkReal x9149=(gconst1*r11);
IkReal x9150=(gconst1*r01);
IkReal x9151=(gconst2*r10);
IkReal x9152=(gconst2*r20);
IkReal x9153=(gconst2*r00);
IkReal x9154=((1.0)*x9147);
IkReal x9155=((1.0)*x9146);
evalcond[0]=((((-1.0)*x9152*x9155))+(((-1.0)*r22*x9154))+((x9146*x9148)));
evalcond[1]=((((-1.0)*r12*x9154))+(((-1.0)*x9151*x9155))+((x9146*x9149)));
evalcond[2]=((((-1.0)*r02*x9155))+(((-1.0)*x9150*x9154))+((x9147*x9153)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9154))+(((-1.0)*x9153*x9155))+((x9146*x9150)));
evalcond[4]=(((x9147*x9152))+(((-1.0)*r22*x9155))+(((-1.0)*x9148*x9154))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r12*x9155))+((x9147*x9151))+(((-1.0)*x9149*x9154))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9156=((1.0)*gconst2);
CheckValue<IkReal> x9157=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9156))+(((-1.0)*gconst1*r10)))),-1);
if(!x9157.valid){
continue;
}
CheckValue<IkReal> x9158 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9156))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9158.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9157.value)))+(x9158.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9159=IKsin(j14);
IkReal x9160=IKcos(j14);
IkReal x9161=(gconst1*r21);
IkReal x9162=(gconst1*r11);
IkReal x9163=(gconst1*r01);
IkReal x9164=(gconst2*r10);
IkReal x9165=(gconst2*r20);
IkReal x9166=(gconst2*r00);
IkReal x9167=((1.0)*x9160);
IkReal x9168=((1.0)*x9159);
evalcond[0]=(((x9159*x9161))+(((-1.0)*r22*x9167))+(((-1.0)*x9165*x9168)));
evalcond[1]=(((x9159*x9162))+(((-1.0)*r12*x9167))+(((-1.0)*x9164*x9168)));
evalcond[2]=((((-1.0)*x9163*x9167))+((x9160*x9166))+(((-1.0)*r02*x9168)));
evalcond[3]=((-1.0)+((x9159*x9163))+(((-1.0)*x9166*x9168))+(((-1.0)*r02*x9167)));
evalcond[4]=((((-1.0)*r22*x9168))+(((-1.0)*x9161*x9167))+((x9160*x9165))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r12*x9168))+(((-1.0)*x9162*x9167))+((x9160*x9164))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x9169=((-1.0)*r20);
IkReal x9170=x8615;
CheckValue<IkReal> x9172 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9169),IKFAST_ATAN2_MAGTHRESH);
if(!x9172.valid){
continue;
}
IkReal x9171=((-1.0)*(x9172.value));
sj15=gconst1;
cj15=gconst2;
j15=x9171;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst0=x9171;
IkReal gconst1=(r21*x9170);
IkReal gconst2=(x9169*x9170);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x9173=((-1.0)*r20);
IkReal x9174=x8615;
CheckValue<IkReal> x9176 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9173),IKFAST_ATAN2_MAGTHRESH);
if(!x9176.valid){
continue;
}
IkReal x9175=((-1.0)*(x9176.value));
sj15=gconst1;
cj15=gconst2;
j15=x9175;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst0=x9175;
IkReal gconst1=(r21*x9174);
IkReal gconst2=(x9173*x9174);
j14eval[0]=r02;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9177=((-1.0)*r20);
IkReal x9178=x8615;
CheckValue<IkReal> x9180 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9177),IKFAST_ATAN2_MAGTHRESH);
if(!x9180.valid){
continue;
}
IkReal x9179=((-1.0)*(x9180.value));
sj15=gconst1;
cj15=gconst2;
j15=x9179;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst0=x9179;
IkReal gconst1=(r21*x9178);
IkReal gconst2=(x9177*x9178);
IkReal x9181=r22*r22;
IkReal x9182=(cj12*r02*sj11);
IkReal x9183=(cj11*r02*sj12);
CheckValue<IkReal> x9187=IKPowWithIntegerCheck(((-1.0)+x9181),-1);
if(!x9187.valid){
continue;
}
IkReal x9184=x9187.value;
if((((1.0)+(((-1.0)*x9181)))) < -0.00001)
continue;
IkReal x9185=IKsqrt(((1.0)+(((-1.0)*x9181))));
IkReal x9186=((1.0)*r22*x9184*x9185);
j14eval[0]=((IKabs((x9182+x9183)))+(IKabs(((((-1.0)*x9183*x9186))+(((-1.0)*x9182*x9186))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9188=(cj12*sj11);
IkReal x9189=(cj11*sj12);
IkReal x9190=(gconst2*r00);
IkReal x9191=((1.0)*gconst1*r01);
CheckValue<IkReal> x9192=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9192.valid){
continue;
}
CheckValue<IkReal> x9193 = IKatan2WithCheck(IkReal((((x9189*x9190))+(((-1.0)*x9189*x9191))+(((-1.0)*x9188*x9191))+((x9188*x9190)))),IkReal((((r02*x9188))+((r02*x9189)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9193.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9192.value)))+(x9193.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9194=IKsin(j14);
IkReal x9195=IKcos(j14);
IkReal x9196=(gconst1*r21);
IkReal x9197=(gconst1*r11);
IkReal x9198=(gconst1*r01);
IkReal x9199=(gconst2*r10);
IkReal x9200=(gconst2*r20);
IkReal x9201=(gconst2*r00);
IkReal x9202=((1.0)*x9195);
IkReal x9203=((1.0)*x9194);
evalcond[0]=((((-1.0)*x9200*x9203))+((x9194*x9196))+(((-1.0)*r22*x9202)));
evalcond[1]=((((-1.0)*r12*x9202))+(((-1.0)*x9199*x9203))+((x9194*x9197)));
evalcond[2]=((((-1.0)*r02*x9203))+(((-1.0)*x9198*x9202))+((x9195*x9201)));
evalcond[3]=((1.0)+(((-1.0)*x9201*x9203))+(((-1.0)*r02*x9202))+((x9194*x9198)));
evalcond[4]=(((x9195*x9200))+((cj12*sj11))+(((-1.0)*r22*x9203))+(((-1.0)*x9196*x9202))+((cj11*sj12)));
evalcond[5]=((((-1.0)*x9197*x9202))+(((-1.0)*sj11*sj12))+((x9195*x9199))+((cj11*cj12))+(((-1.0)*r12*x9203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9204=(gconst1*r01);
IkReal x9205=(gconst2*r00);
CheckValue<IkReal> x9206 = IKatan2WithCheck(IkReal((x9205+(((-1.0)*x9204)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9206.valid){
continue;
}
CheckValue<IkReal> x9207=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9204*x9205))+(x9204*x9204)+(x9205*x9205)+(r02*r02))),-1);
if(!x9207.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9206.value)+(((1.5707963267949)*(x9207.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9208=IKsin(j14);
IkReal x9209=IKcos(j14);
IkReal x9210=(gconst1*r21);
IkReal x9211=(gconst1*r11);
IkReal x9212=(gconst1*r01);
IkReal x9213=(gconst2*r10);
IkReal x9214=(gconst2*r20);
IkReal x9215=(gconst2*r00);
IkReal x9216=((1.0)*x9209);
IkReal x9217=((1.0)*x9208);
evalcond[0]=(((x9208*x9210))+(((-1.0)*x9214*x9217))+(((-1.0)*r22*x9216)));
evalcond[1]=((((-1.0)*x9213*x9217))+((x9208*x9211))+(((-1.0)*r12*x9216)));
evalcond[2]=((((-1.0)*x9212*x9216))+(((-1.0)*r02*x9217))+((x9209*x9215)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9216))+((x9208*x9212))+(((-1.0)*x9215*x9217)));
evalcond[4]=(((x9209*x9214))+(((-1.0)*x9210*x9216))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*r22*x9217)));
evalcond[5]=((((-1.0)*x9211*x9216))+((x9209*x9213))+(((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*r12*x9217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x9218 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9218.valid){
continue;
}
CheckValue<IkReal> x9219=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9219.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9218.value)+(((1.5707963267949)*(x9219.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9220=IKsin(j14);
IkReal x9221=IKcos(j14);
IkReal x9222=(gconst1*r21);
IkReal x9223=(gconst1*r11);
IkReal x9224=(gconst1*r01);
IkReal x9225=(gconst2*r10);
IkReal x9226=(gconst2*r20);
IkReal x9227=(gconst2*r00);
IkReal x9228=((1.0)*x9221);
IkReal x9229=((1.0)*x9220);
evalcond[0]=(((x9220*x9222))+(((-1.0)*x9226*x9229))+(((-1.0)*r22*x9228)));
evalcond[1]=((((-1.0)*x9225*x9229))+((x9220*x9223))+(((-1.0)*r12*x9228)));
evalcond[2]=((((-1.0)*r02*x9229))+((x9221*x9227))+(((-1.0)*x9224*x9228)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9228))+((x9220*x9224))+(((-1.0)*x9227*x9229)));
evalcond[4]=(((x9221*x9226))+((cj12*sj11))+(((-1.0)*x9222*x9228))+((cj11*sj12))+(((-1.0)*r22*x9229)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+((x9221*x9225))+(((-1.0)*x9223*x9228))+(((-1.0)*r12*x9229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x9230=((-1.0)*r20);
IkReal x9231=((-1.0)*px);
CheckValue<IkReal> x9233 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9230),IKFAST_ATAN2_MAGTHRESH);
if(!x9233.valid){
continue;
}
IkReal x9232=((-1.0)*(x9233.value));
sj15=gconst1;
cj15=gconst2;
j15=x9232;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9231);
rxp1_1=(px*r21);
rxp1_2=(r11*x9231);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9232;
IkReal gconst1=r21;
IkReal gconst2=x9230;
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9234=((-1.0)*r20);
IkReal x9235=((-1.0)*px);
CheckValue<IkReal> x9237 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9234),IKFAST_ATAN2_MAGTHRESH);
if(!x9237.valid){
continue;
}
IkReal x9236=((-1.0)*(x9237.value));
sj15=gconst1;
cj15=gconst2;
j15=x9236;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9235);
rxp1_1=(px*r21);
rxp1_2=(r11*x9235);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9236;
IkReal gconst1=r21;
IkReal gconst2=x9234;
j14eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9238=((-1.0)*r20);
IkReal x9239=((-1.0)*px);
CheckValue<IkReal> x9241 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9238),IKFAST_ATAN2_MAGTHRESH);
if(!x9241.valid){
continue;
}
IkReal x9240=((-1.0)*(x9241.value));
sj15=gconst1;
cj15=gconst2;
j15=x9240;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9239);
rxp1_1=(px*r21);
rxp1_2=(r11*x9239);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9240;
IkReal gconst1=r21;
IkReal gconst2=x9238;
j14eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x9244=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9244.valid){
continue;
}
IkReal x9242=x9244.value;
IkReal x9243=(sj10*x9242);
cj14array[0]=((((-1.0)*sj11*sj12*x9243))+((cj11*cj12*x9243)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x9245=IKsin(j14);
IkReal x9246=IKcos(j14);
IkReal x9247=(gconst1*r21);
IkReal x9248=((1.0)*x9246);
IkReal x9249=((1.0)*gconst2*x9245);
evalcond[0]=((-1.0)*r02*x9245);
evalcond[1]=((((-1.0)*sj10))+(((-1.0)*r02*x9248)));
evalcond[2]=((((-1.0)*r20*x9249))+((x9245*x9247)));
evalcond[3]=((((-1.0)*r10*x9249))+((gconst1*r11*x9245)));
evalcond[4]=((((-1.0)*x9247*x9248))+((cj12*sj11))+((gconst2*r20*x9246))+((cj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x9252=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9252.valid){
continue;
}
IkReal x9250=x9252.value;
IkReal x9251=((1.0)*x9250);
cj14array[0]=((((-1.0)*cj12*sj11*x9251))+(((-1.0)*cj11*sj12*x9251)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x9253=IKsin(j14);
IkReal x9254=IKcos(j14);
IkReal x9255=(gconst2*r10);
IkReal x9256=((1.0)*sj10);
IkReal x9257=((1.0)*x9254);
IkReal x9258=(gconst1*x9253);
IkReal x9259=((1.0)*x9253);
evalcond[0]=((-1.0)*r02*x9253);
evalcond[1]=((((-1.0)*x9256))+(((-1.0)*r02*x9257)));
evalcond[2]=(((r21*x9258))+(((-1.0)*gconst2*r20*x9259)));
evalcond[3]=((((-1.0)*x9255*x9259))+((r11*x9258)));
evalcond[4]=((((-1.0)*cj11*cj12*x9256))+((x9254*x9255))+((sj10*sj11*sj12))+(((-1.0)*gconst1*r11*x9257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x9260=IKPowWithIntegerCheck(r02,-1);
if(!x9260.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x9260.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x9261=IKsin(j14);
IkReal x9262=IKcos(j14);
IkReal x9263=(gconst2*r10);
IkReal x9264=(gconst2*r20);
IkReal x9265=(gconst1*x9261);
IkReal x9266=((1.0)*x9261);
IkReal x9267=((1.0)*gconst1*x9262);
evalcond[0]=((-1.0)*r02*x9261);
evalcond[1]=(((r21*x9265))+(((-1.0)*x9264*x9266)));
evalcond[2]=((((-1.0)*x9263*x9266))+((r11*x9265)));
evalcond[3]=(((x9262*x9264))+(((-1.0)*r21*x9267))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((x9262*x9263))+(((-1.0)*cj11*cj12*sj10))+((sj10*sj11*sj12))+(((-1.0)*r11*x9267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9268=(gconst1*r21);
IkReal x9269=(cj11*sj12);
IkReal x9270=(cj12*sj11);
IkReal x9271=(gconst2*r20);
CheckValue<IkReal> x9272 = IKatan2WithCheck(IkReal((((r22*x9269))+((r22*x9270)))),IkReal((((x9268*x9270))+((x9268*x9269))+(((-1.0)*x9269*x9271))+(((-1.0)*x9270*x9271)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9272.valid){
continue;
}
CheckValue<IkReal> x9273=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x9271*x9271)+(x9268*x9268)+(((-2.0)*x9268*x9271)))),-1);
if(!x9273.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9272.value)+(((1.5707963267949)*(x9273.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9274=IKsin(j14);
IkReal x9275=IKcos(j14);
IkReal x9276=(gconst1*r21);
IkReal x9277=(gconst2*r20);
IkReal x9278=((1.0)*sj10);
IkReal x9279=(gconst1*r11);
IkReal x9280=(gconst1*r01);
IkReal x9281=(gconst2*r10);
IkReal x9282=(sj11*sj12);
IkReal x9283=(cj11*cj12);
IkReal x9284=(gconst2*r00);
IkReal x9285=((1.0)*x9275);
IkReal x9286=((1.0)*x9274);
evalcond[0]=((((-1.0)*r22*x9285))+(((-1.0)*x9277*x9286))+((x9274*x9276)));
evalcond[1]=((((-1.0)*r12*x9285))+(((-1.0)*x9281*x9286))+cj10+((x9274*x9279)));
evalcond[2]=((((-1.0)*x9278))+(((-1.0)*r02*x9285))+(((-1.0)*x9284*x9286))+((x9274*x9280)));
evalcond[3]=((((-1.0)*x9276*x9285))+((x9275*x9277))+(((-1.0)*r22*x9286))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj10*x9283))+((x9275*x9284))+(((-1.0)*r02*x9286))+(((-1.0)*x9280*x9285))+((cj10*x9282)));
evalcond[5]=((((-1.0)*r12*x9286))+((sj10*x9282))+(((-1.0)*x9278*x9283))+((x9275*x9281))+(((-1.0)*x9279*x9285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9287=((1.0)*gconst2);
CheckValue<IkReal> x9288=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9287))+(((-1.0)*gconst1*r10)))),-1);
if(!x9288.valid){
continue;
}
CheckValue<IkReal> x9289 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x9287))+((gconst1*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9289.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9288.value)))+(x9289.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9290=IKsin(j14);
IkReal x9291=IKcos(j14);
IkReal x9292=(gconst1*r21);
IkReal x9293=(gconst2*r20);
IkReal x9294=((1.0)*sj10);
IkReal x9295=(gconst1*r11);
IkReal x9296=(gconst1*r01);
IkReal x9297=(gconst2*r10);
IkReal x9298=(sj11*sj12);
IkReal x9299=(cj11*cj12);
IkReal x9300=(gconst2*r00);
IkReal x9301=((1.0)*x9291);
IkReal x9302=((1.0)*x9290);
evalcond[0]=(((x9290*x9292))+(((-1.0)*r22*x9301))+(((-1.0)*x9293*x9302)));
evalcond[1]=((((-1.0)*x9297*x9302))+cj10+((x9290*x9295))+(((-1.0)*r12*x9301)));
evalcond[2]=((((-1.0)*x9300*x9302))+(((-1.0)*x9294))+(((-1.0)*r02*x9301))+((x9290*x9296)));
evalcond[3]=(((x9291*x9293))+((cj12*sj11))+(((-1.0)*x9292*x9301))+(((-1.0)*r22*x9302))+((cj11*sj12)));
evalcond[4]=((((-1.0)*x9296*x9301))+((x9291*x9300))+(((-1.0)*cj10*x9299))+(((-1.0)*r02*x9302))+((cj10*x9298)));
evalcond[5]=((((-1.0)*x9295*x9301))+((x9291*x9297))+(((-1.0)*x9294*x9299))+(((-1.0)*r12*x9302))+((sj10*x9298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9303=((1.0)*gconst2);
CheckValue<IkReal> x9304 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x9303))+((cj10*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9304.valid){
continue;
}
CheckValue<IkReal> x9305=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9303)))),-1);
if(!x9305.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9304.value)+(((1.5707963267949)*(x9305.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9306=IKsin(j14);
IkReal x9307=IKcos(j14);
IkReal x9308=(gconst1*r21);
IkReal x9309=(gconst2*r20);
IkReal x9310=((1.0)*sj10);
IkReal x9311=(gconst1*r11);
IkReal x9312=(gconst1*r01);
IkReal x9313=(gconst2*r10);
IkReal x9314=(sj11*sj12);
IkReal x9315=(cj11*cj12);
IkReal x9316=(gconst2*r00);
IkReal x9317=((1.0)*x9307);
IkReal x9318=((1.0)*x9306);
evalcond[0]=((((-1.0)*x9309*x9318))+((x9306*x9308))+(((-1.0)*r22*x9317)));
evalcond[1]=(cj10+((x9306*x9311))+(((-1.0)*x9313*x9318))+(((-1.0)*r12*x9317)));
evalcond[2]=((((-1.0)*x9316*x9318))+(((-1.0)*r02*x9317))+(((-1.0)*x9310))+((x9306*x9312)));
evalcond[3]=(((cj12*sj11))+((x9307*x9309))+(((-1.0)*x9308*x9317))+(((-1.0)*r22*x9318))+((cj11*sj12)));
evalcond[4]=(((cj10*x9314))+(((-1.0)*x9312*x9317))+(((-1.0)*r02*x9318))+((x9307*x9316))+(((-1.0)*cj10*x9315)));
evalcond[5]=(((sj10*x9314))+(((-1.0)*x9310*x9315))+(((-1.0)*x9311*x9317))+((x9307*x9313))+(((-1.0)*r12*x9318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x9319=((-1.0)*r20);
IkReal x9320=x8615;
CheckValue<IkReal> x9322 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9319),IKFAST_ATAN2_MAGTHRESH);
if(!x9322.valid){
continue;
}
IkReal x9321=((-1.0)*(x9322.value));
sj15=gconst1;
cj15=gconst2;
j15=x9321;
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst0=x9321;
IkReal gconst1=(r21*x9320);
IkReal gconst2=(x9319*x9320);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9323=((-1.0)*r20);
IkReal x9324=x8615;
CheckValue<IkReal> x9326 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9323),IKFAST_ATAN2_MAGTHRESH);
if(!x9326.valid){
continue;
}
IkReal x9325=((-1.0)*(x9326.value));
sj15=gconst1;
cj15=gconst2;
j15=x9325;
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst0=x9325;
IkReal gconst1=(r21*x9324);
IkReal gconst2=(x9323*x9324);
CheckValue<IkReal> x9334=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9334.valid){
continue;
}
IkReal x9327=x9334.value;
IkReal x9328=(sj13*x9327);
IkReal x9329=(r01*x9328);
IkReal x9330=(r11*x9328);
IkReal x9331=(r10*x9328);
IkReal x9332=(r00*x9328);
IkReal x9333=(r20*r21*x9328);
j14eval[0]=IKsign((((r00*r20*r21*x9330))+((r00*x9331*(r20*r20)))+((r11*x9329*(r21*r21)))+((r02*r12*sj13))+((r10*r20*r21*x9329))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9335=gconst1*gconst1;
IkReal x9336=gconst2*gconst2;
IkReal x9337=(cj13*r10);
IkReal x9338=(r10*sj13);
IkReal x9339=(r11*sj13);
IkReal x9340=(gconst1*gconst2);
IkReal x9341=(cj13*r11);
IkReal x9342=(r01*x9335);
IkReal x9343=((1.0)*r00*x9336);
CheckValue<IkReal> x9344 = IKatan2WithCheck(IkReal((((gconst2*r02*x9339))+((gconst1*r02*x9338)))),IkReal((((r01*x9339*x9340))+((x9338*x9342))+(((-1.0)*r00*x9338*x9340))+(((-1.0)*x9339*x9343)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9344.valid){
continue;
}
CheckValue<IkReal> x9345=IKPowWithIntegerCheck(IKsign((((r01*x9337*x9340))+((r00*x9340*x9341))+(((-1.0)*x9341*x9342))+(((-1.0)*x9337*x9343))+(((-1.0)*cj13*r02*r12)))),-1);
if(!x9345.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9344.value)+(((1.5707963267949)*(x9345.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9346=IKsin(j14);
IkReal x9347=IKcos(j14);
IkReal x9348=(sj11*sj12);
IkReal x9349=(gconst2*sj13);
IkReal x9350=(gconst1*sj13);
IkReal x9351=(cj11*sj12);
IkReal x9352=((1.0)*cj12);
IkReal x9353=(cj13*gconst2);
IkReal x9354=(cj13*gconst1);
IkReal x9355=(cj11*x9352);
IkReal x9356=((1.0)*x9347);
IkReal x9357=(gconst1*x9346);
IkReal x9358=(cj13*x9346);
IkReal x9359=((1.0)*sj13*x9346);
IkReal x9360=((1.0)*gconst2*x9346);
evalcond[0]=((((-1.0)*r22*x9356))+(((-1.0)*r20*x9360))+((r21*x9357)));
evalcond[1]=((((-1.0)*r02*x9356))+((r01*x9357))+(((-1.0)*r00*x9360)));
evalcond[2]=((1.0)+((r11*x9357))+(((-1.0)*r10*x9360))+(((-1.0)*r12*x9356)));
evalcond[3]=(((r11*x9349))+((r11*x9347*x9354))+((r10*x9350))+(((-1.0)*r10*x9353*x9356))+((r12*x9358)));
evalcond[4]=(((r11*x9353))+(((-1.0)*r11*x9350*x9356))+(((-1.0)*r12*x9359))+((r10*x9354))+((r10*x9347*x9349)));
evalcond[5]=(x9351+(((-1.0)*r20*x9353*x9356))+((r21*x9347*x9354))+((r20*x9350))+((r21*x9349))+((cj12*sj11))+((r22*x9358)));
evalcond[6]=(((r01*x9347*x9354))+x9348+(((-1.0)*x9355))+((r00*x9350))+((r01*x9349))+((r02*x9358))+(((-1.0)*r00*x9353*x9356)));
evalcond[7]=((((-1.0)*r21*x9350*x9356))+(((-1.0)*r22*x9359))+x9348+(((-1.0)*x9355))+((r20*x9354))+((r20*x9347*x9349))+((r21*x9353)));
evalcond[8]=((((-1.0)*r02*x9359))+((r01*x9353))+((r00*x9354))+(((-1.0)*x9351))+(((-1.0)*r01*x9350*x9356))+(((-1.0)*sj11*x9352))+((r00*x9347*x9349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9361=gconst1*gconst1;
IkReal x9362=gconst2*gconst2;
IkReal x9363=(r01*r10);
IkReal x9364=(gconst1*gconst2);
IkReal x9365=((1.0)*sj13);
IkReal x9366=(r01*r11);
IkReal x9367=(r00*r10);
IkReal x9368=((1.0)*cj13);
IkReal x9369=(r00*r11);
IkReal x9370=(cj13*r02);
CheckValue<IkReal> x9371 = IKatan2WithCheck(IkReal((((gconst2*r11*x9370))+((gconst1*r10*x9370)))),IkReal((((cj13*x9364*x9366))+(((-1.0)*x9362*x9368*x9369))+(((-1.0)*x9364*x9367*x9368))+((cj13*x9361*x9363)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9371.valid){
continue;
}
CheckValue<IkReal> x9372=IKPowWithIntegerCheck(IKsign((((sj13*x9362*x9367))+(((-1.0)*x9364*x9365*x9369))+((r02*r12*sj13))+((sj13*x9361*x9366))+(((-1.0)*x9363*x9364*x9365)))),-1);
if(!x9372.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9371.value)+(((1.5707963267949)*(x9372.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9373=IKsin(j14);
IkReal x9374=IKcos(j14);
IkReal x9375=(sj11*sj12);
IkReal x9376=(gconst2*sj13);
IkReal x9377=(gconst1*sj13);
IkReal x9378=(cj11*sj12);
IkReal x9379=((1.0)*cj12);
IkReal x9380=(cj13*gconst2);
IkReal x9381=(cj13*gconst1);
IkReal x9382=(cj11*x9379);
IkReal x9383=((1.0)*x9374);
IkReal x9384=(gconst1*x9373);
IkReal x9385=(cj13*x9373);
IkReal x9386=((1.0)*sj13*x9373);
IkReal x9387=((1.0)*gconst2*x9373);
evalcond[0]=(((r21*x9384))+(((-1.0)*r20*x9387))+(((-1.0)*r22*x9383)));
evalcond[1]=((((-1.0)*r02*x9383))+(((-1.0)*r00*x9387))+((r01*x9384)));
evalcond[2]=((1.0)+((r11*x9384))+(((-1.0)*r10*x9387))+(((-1.0)*r12*x9383)));
evalcond[3]=(((r11*x9376))+((r11*x9374*x9381))+((r12*x9385))+((r10*x9377))+(((-1.0)*r10*x9380*x9383)));
evalcond[4]=(((r10*x9381))+((r11*x9380))+(((-1.0)*r11*x9377*x9383))+(((-1.0)*r12*x9386))+((r10*x9374*x9376)));
evalcond[5]=(x9378+((r21*x9376))+(((-1.0)*r20*x9380*x9383))+((r22*x9385))+((cj12*sj11))+((r21*x9374*x9381))+((r20*x9377)));
evalcond[6]=(((r02*x9385))+x9375+(((-1.0)*x9382))+(((-1.0)*r00*x9380*x9383))+((r00*x9377))+((r01*x9376))+((r01*x9374*x9381)));
evalcond[7]=(x9375+((r21*x9380))+((r20*x9374*x9376))+(((-1.0)*x9382))+(((-1.0)*r22*x9386))+((r20*x9381))+(((-1.0)*r21*x9377*x9383)));
evalcond[8]=((((-1.0)*x9378))+(((-1.0)*r01*x9377*x9383))+(((-1.0)*r02*x9386))+((r00*x9374*x9376))+((r01*x9380))+((r00*x9381))+(((-1.0)*sj11*x9379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9388=((1.0)*gconst2);
CheckValue<IkReal> x9389 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9388))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9389.valid){
continue;
}
CheckValue<IkReal> x9390=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9388)))),-1);
if(!x9390.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9389.value)+(((1.5707963267949)*(x9390.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9391=IKsin(j14);
IkReal x9392=IKcos(j14);
IkReal x9393=(sj11*sj12);
IkReal x9394=(gconst2*sj13);
IkReal x9395=(gconst1*sj13);
IkReal x9396=(cj11*sj12);
IkReal x9397=((1.0)*cj12);
IkReal x9398=(cj13*gconst2);
IkReal x9399=(cj13*gconst1);
IkReal x9400=(cj11*x9397);
IkReal x9401=((1.0)*x9392);
IkReal x9402=(gconst1*x9391);
IkReal x9403=(cj13*x9391);
IkReal x9404=((1.0)*sj13*x9391);
IkReal x9405=((1.0)*gconst2*x9391);
evalcond[0]=((((-1.0)*r22*x9401))+(((-1.0)*r20*x9405))+((r21*x9402)));
evalcond[1]=(((r01*x9402))+(((-1.0)*r02*x9401))+(((-1.0)*r00*x9405)));
evalcond[2]=((1.0)+((r11*x9402))+(((-1.0)*r10*x9405))+(((-1.0)*r12*x9401)));
evalcond[3]=(((r12*x9403))+((r10*x9395))+((r11*x9394))+((r11*x9392*x9399))+(((-1.0)*r10*x9398*x9401)));
evalcond[4]=(((r10*x9392*x9394))+((r10*x9399))+((r11*x9398))+(((-1.0)*r12*x9404))+(((-1.0)*r11*x9395*x9401)));
evalcond[5]=(((r22*x9403))+(((-1.0)*r20*x9398*x9401))+x9396+((r20*x9395))+((cj12*sj11))+((r21*x9394))+((r21*x9392*x9399)));
evalcond[6]=(((r01*x9394))+(((-1.0)*x9400))+x9393+((r01*x9392*x9399))+(((-1.0)*r00*x9398*x9401))+((r02*x9403))+((r00*x9395)));
evalcond[7]=((((-1.0)*r22*x9404))+(((-1.0)*x9400))+x9393+((r20*x9399))+(((-1.0)*r21*x9395*x9401))+((r20*x9392*x9394))+((r21*x9398)));
evalcond[8]=((((-1.0)*sj11*x9397))+(((-1.0)*r01*x9395*x9401))+((r01*x9398))+(((-1.0)*r02*x9404))+(((-1.0)*x9396))+((r00*x9392*x9394))+((r00*x9399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x9406=((-1.0)*r20);
IkReal x9407=x8615;
CheckValue<IkReal> x9409 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9406),IKFAST_ATAN2_MAGTHRESH);
if(!x9409.valid){
continue;
}
IkReal x9408=((-1.0)*(x9409.value));
sj15=gconst1;
cj15=gconst2;
j15=x9408;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst0=x9408;
IkReal gconst1=(r21*x9407);
IkReal gconst2=(x9406*x9407);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9410=((-1.0)*r20);
IkReal x9411=x8615;
CheckValue<IkReal> x9413 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9410),IKFAST_ATAN2_MAGTHRESH);
if(!x9413.valid){
continue;
}
IkReal x9412=((-1.0)*(x9413.value));
sj15=gconst1;
cj15=gconst2;
j15=x9412;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst0=x9412;
IkReal gconst1=(r21*x9411);
IkReal gconst2=(x9410*x9411);
CheckValue<IkReal> x9421=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9421.valid){
continue;
}
IkReal x9414=x9421.value;
IkReal x9415=(sj13*x9414);
IkReal x9416=(r01*x9415);
IkReal x9417=(r11*x9415);
IkReal x9418=(r10*x9415);
IkReal x9419=(r00*x9415);
IkReal x9420=(r20*r21*x9415);
j14eval[0]=IKsign((((r00*x9418*(r20*r20)))+((r02*r12*sj13))+((r11*x9416*(r21*r21)))+((r00*r20*r21*x9417))+((r10*r20*r21*x9416))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9422=gconst1*gconst1;
IkReal x9423=gconst2*gconst2;
IkReal x9424=(cj13*r10);
IkReal x9425=(r10*sj13);
IkReal x9426=(r11*sj13);
IkReal x9427=(gconst1*gconst2);
IkReal x9428=(cj13*r11);
IkReal x9429=(r01*x9422);
IkReal x9430=((1.0)*r00*x9423);
CheckValue<IkReal> x9431 = IKatan2WithCheck(IkReal((((gconst2*r02*x9426))+((gconst1*r02*x9425)))),IkReal((((x9425*x9429))+(((-1.0)*x9426*x9430))+((r01*x9426*x9427))+(((-1.0)*r00*x9425*x9427)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9431.valid){
continue;
}
CheckValue<IkReal> x9432=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9424*x9430))+((r00*x9427*x9428))+((r01*x9424*x9427))+(((-1.0)*cj13*r02*r12))+(((-1.0)*x9428*x9429)))),-1);
if(!x9432.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9431.value)+(((1.5707963267949)*(x9432.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9433=IKsin(j14);
IkReal x9434=IKcos(j14);
IkReal x9435=(cj12*sj11);
IkReal x9436=(cj11*sj12);
IkReal x9437=(gconst2*sj13);
IkReal x9438=(gconst1*sj13);
IkReal x9439=(sj11*sj12);
IkReal x9440=(cj11*cj12);
IkReal x9441=(cj13*gconst2);
IkReal x9442=(cj13*gconst1);
IkReal x9443=((1.0)*x9434);
IkReal x9444=(gconst1*x9433);
IkReal x9445=(cj13*x9433);
IkReal x9446=(x9436+x9435);
IkReal x9447=((1.0)*sj13*x9433);
IkReal x9448=((1.0)*gconst2*x9433);
evalcond[0]=(((r21*x9444))+(((-1.0)*r22*x9443))+(((-1.0)*r20*x9448)));
evalcond[1]=(((r01*x9444))+(((-1.0)*r00*x9448))+(((-1.0)*r02*x9443)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x9448))+((r11*x9444))+(((-1.0)*r12*x9443)));
evalcond[3]=(((r11*x9437))+((r12*x9445))+(((-1.0)*r10*x9441*x9443))+((r10*x9438))+((r11*x9434*x9442)));
evalcond[4]=(((r10*x9442))+((r10*x9434*x9437))+(((-1.0)*r11*x9438*x9443))+((r11*x9441))+(((-1.0)*r12*x9447)));
evalcond[5]=(((r21*x9434*x9442))+((r22*x9445))+((r20*x9438))+(((-1.0)*r20*x9441*x9443))+((r21*x9437))+x9446);
evalcond[6]=((((-1.0)*x9439))+(((-1.0)*r00*x9441*x9443))+((r01*x9434*x9442))+x9440+((r01*x9437))+((r02*x9445))+((r00*x9438)));
evalcond[7]=(((r00*x9442))+((r00*x9434*x9437))+((r01*x9441))+(((-1.0)*r01*x9438*x9443))+x9446+(((-1.0)*r02*x9447)));
evalcond[8]=((((-1.0)*r21*x9438*x9443))+((r21*x9441))+(((-1.0)*x9440))+((r20*x9434*x9437))+(((-1.0)*r22*x9447))+x9439+((r20*x9442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9449=gconst1*gconst1;
IkReal x9450=gconst2*gconst2;
IkReal x9451=(r01*r10);
IkReal x9452=(gconst1*gconst2);
IkReal x9453=((1.0)*sj13);
IkReal x9454=(r01*r11);
IkReal x9455=(r00*r10);
IkReal x9456=((1.0)*cj13);
IkReal x9457=(r00*r11);
IkReal x9458=(cj13*r02);
CheckValue<IkReal> x9459=IKPowWithIntegerCheck(IKsign((((sj13*x9449*x9454))+((r02*r12*sj13))+(((-1.0)*x9452*x9453*x9457))+((sj13*x9450*x9455))+(((-1.0)*x9451*x9452*x9453)))),-1);
if(!x9459.valid){
continue;
}
CheckValue<IkReal> x9460 = IKatan2WithCheck(IkReal((((gconst2*r11*x9458))+((gconst1*r10*x9458)))),IkReal(((((-1.0)*x9452*x9455*x9456))+((cj13*x9449*x9451))+((cj13*x9452*x9454))+(((-1.0)*x9450*x9456*x9457)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9460.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9459.value)))+(x9460.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9461=IKsin(j14);
IkReal x9462=IKcos(j14);
IkReal x9463=(cj12*sj11);
IkReal x9464=(cj11*sj12);
IkReal x9465=(gconst2*sj13);
IkReal x9466=(gconst1*sj13);
IkReal x9467=(sj11*sj12);
IkReal x9468=(cj11*cj12);
IkReal x9469=(cj13*gconst2);
IkReal x9470=(cj13*gconst1);
IkReal x9471=((1.0)*x9462);
IkReal x9472=(gconst1*x9461);
IkReal x9473=(cj13*x9461);
IkReal x9474=(x9464+x9463);
IkReal x9475=((1.0)*sj13*x9461);
IkReal x9476=((1.0)*gconst2*x9461);
evalcond[0]=(((r21*x9472))+(((-1.0)*r22*x9471))+(((-1.0)*r20*x9476)));
evalcond[1]=((((-1.0)*r02*x9471))+((r01*x9472))+(((-1.0)*r00*x9476)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x9476))+((r11*x9472))+(((-1.0)*r12*x9471)));
evalcond[3]=(((r10*x9466))+((r11*x9465))+((r11*x9462*x9470))+((r12*x9473))+(((-1.0)*r10*x9469*x9471)));
evalcond[4]=((((-1.0)*r11*x9466*x9471))+((r10*x9470))+(((-1.0)*r12*x9475))+((r11*x9469))+((r10*x9462*x9465)));
evalcond[5]=(((r22*x9473))+((r21*x9465))+((r21*x9462*x9470))+((r20*x9466))+x9474+(((-1.0)*r20*x9469*x9471)));
evalcond[6]=((((-1.0)*r00*x9469*x9471))+((r01*x9462*x9470))+((r01*x9465))+((r00*x9466))+x9468+(((-1.0)*x9467))+((r02*x9473)));
evalcond[7]=((((-1.0)*r02*x9475))+((r00*x9470))+((r01*x9469))+x9474+((r00*x9462*x9465))+(((-1.0)*r01*x9466*x9471)));
evalcond[8]=((((-1.0)*r21*x9466*x9471))+((r20*x9462*x9465))+((r21*x9469))+(((-1.0)*r22*x9475))+x9467+((r20*x9470))+(((-1.0)*x9468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x9477 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9477.valid){
continue;
}
CheckValue<IkReal> x9478=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9478.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9477.value)+(((1.5707963267949)*(x9478.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9479=IKsin(j14);
IkReal x9480=IKcos(j14);
IkReal x9481=(cj12*sj11);
IkReal x9482=(cj11*sj12);
IkReal x9483=(gconst2*sj13);
IkReal x9484=(gconst1*sj13);
IkReal x9485=(sj11*sj12);
IkReal x9486=(cj11*cj12);
IkReal x9487=(cj13*gconst2);
IkReal x9488=(cj13*gconst1);
IkReal x9489=((1.0)*x9480);
IkReal x9490=(gconst1*x9479);
IkReal x9491=(cj13*x9479);
IkReal x9492=(x9482+x9481);
IkReal x9493=((1.0)*sj13*x9479);
IkReal x9494=((1.0)*gconst2*x9479);
evalcond[0]=((((-1.0)*r22*x9489))+(((-1.0)*r20*x9494))+((r21*x9490)));
evalcond[1]=((((-1.0)*r02*x9489))+((r01*x9490))+(((-1.0)*r00*x9494)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x9494))+((r11*x9490))+(((-1.0)*r12*x9489)));
evalcond[3]=(((r12*x9491))+((r11*x9480*x9488))+(((-1.0)*r10*x9487*x9489))+((r11*x9483))+((r10*x9484)));
evalcond[4]=(((r10*x9480*x9483))+((r11*x9487))+(((-1.0)*r12*x9493))+((r10*x9488))+(((-1.0)*r11*x9484*x9489)));
evalcond[5]=(((r21*x9483))+((r22*x9491))+(((-1.0)*r20*x9487*x9489))+((r20*x9484))+x9492+((r21*x9480*x9488)));
evalcond[6]=(((r02*x9491))+((r01*x9483))+(((-1.0)*x9485))+((r00*x9484))+((r01*x9480*x9488))+(((-1.0)*r00*x9487*x9489))+x9486);
evalcond[7]=((((-1.0)*r02*x9493))+(((-1.0)*r01*x9484*x9489))+((r01*x9487))+((r00*x9488))+((r00*x9480*x9483))+x9492);
evalcond[8]=(((r21*x9487))+(((-1.0)*r22*x9493))+(((-1.0)*x9486))+((r20*x9488))+((r20*x9480*x9483))+x9485+(((-1.0)*r21*x9484*x9489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x9495=((-1.0)*r20);
IkReal x9496=x8615;
CheckValue<IkReal> x9498 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9495),IKFAST_ATAN2_MAGTHRESH);
if(!x9498.valid){
continue;
}
IkReal x9497=((-1.0)*(x9498.value));
sj15=gconst1;
cj15=gconst2;
j15=x9497;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst0=x9497;
IkReal gconst1=(r21*x9496);
IkReal gconst2=(x9495*x9496);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9499=((-1.0)*r20);
IkReal x9500=x8615;
CheckValue<IkReal> x9502 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9499),IKFAST_ATAN2_MAGTHRESH);
if(!x9502.valid){
continue;
}
IkReal x9501=((-1.0)*(x9502.value));
sj15=gconst1;
cj15=gconst2;
j15=x9501;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst0=x9501;
IkReal gconst1=(r21*x9500);
IkReal gconst2=(x9499*x9500);
CheckValue<IkReal> x9510=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9510.valid){
continue;
}
IkReal x9503=x9510.value;
IkReal x9504=(sj13*x9503);
IkReal x9505=(r01*x9504);
IkReal x9506=(r11*x9504);
IkReal x9507=(r10*x9504);
IkReal x9508=(r00*x9504);
IkReal x9509=(r20*r21*x9504);
j14eval[0]=IKsign((((r00*x9507*(r20*r20)))+((r00*r20*r21*x9506))+((r02*r12*sj13))+((r10*r20*r21*x9505))+((r11*x9505*(r21*r21)))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9511=gconst1*gconst1;
IkReal x9512=gconst2*gconst2;
IkReal x9513=(cj13*r00);
IkReal x9514=((1.0)*r10);
IkReal x9515=(gconst2*r01);
IkReal x9516=(r12*sj13);
IkReal x9517=(gconst1*r11);
IkReal x9518=((1.0)*cj13);
IkReal x9519=(r00*sj13);
IkReal x9520=(r11*x9511);
CheckValue<IkReal> x9521=IKPowWithIntegerCheck(IKsign((((cj13*gconst1*r10*x9515))+(((-1.0)*r01*x9518*x9520))+(((-1.0)*x9512*x9513*x9514))+((gconst2*x9513*x9517))+(((-1.0)*r02*r12*x9518)))),-1);
if(!x9521.valid){
continue;
}
CheckValue<IkReal> x9522 = IKatan2WithCheck(IkReal((((gconst1*r00*x9516))+((x9515*x9516)))),IkReal((((x9519*x9520))+((sj13*x9515*x9517))+(((-1.0)*r01*sj13*x9512*x9514))+(((-1.0)*gconst1*gconst2*x9514*x9519)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9522.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9521.value)))+(x9522.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9523=IKsin(j14);
IkReal x9524=IKcos(j14);
IkReal x9525=(sj11*sj12);
IkReal x9526=(gconst2*sj13);
IkReal x9527=(cj11*sj12);
IkReal x9528=(gconst1*sj13);
IkReal x9529=((1.0)*cj12);
IkReal x9530=(cj13*gconst2);
IkReal x9531=(cj13*gconst1);
IkReal x9532=(cj11*x9529);
IkReal x9533=((1.0)*x9524);
IkReal x9534=(gconst1*x9523);
IkReal x9535=(cj13*x9523);
IkReal x9536=((1.0)*sj13*x9523);
IkReal x9537=((1.0)*gconst2*x9523);
evalcond[0]=((((-1.0)*r22*x9533))+(((-1.0)*r20*x9537))+((r21*x9534)));
evalcond[1]=(((r11*x9534))+(((-1.0)*r10*x9537))+(((-1.0)*r12*x9533)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x9537))+(((-1.0)*r02*x9533))+((r01*x9534)));
evalcond[3]=(((r02*x9535))+((r01*x9524*x9531))+((r01*x9526))+((r00*x9528))+(((-1.0)*r00*x9530*x9533)));
evalcond[4]=((((-1.0)*r01*x9528*x9533))+((r00*x9524*x9526))+(((-1.0)*r02*x9536))+((r00*x9531))+((r01*x9530)));
evalcond[5]=(((r20*x9528))+(((-1.0)*r20*x9530*x9533))+((r21*x9524*x9531))+((r22*x9535))+x9527+((cj12*sj11))+((r21*x9526)));
evalcond[6]=(((r11*x9524*x9531))+((r10*x9528))+((r12*x9535))+((r11*x9526))+(((-1.0)*x9532))+x9525+(((-1.0)*r10*x9530*x9533)));
evalcond[7]=((((-1.0)*r21*x9528*x9533))+((r20*x9531))+(((-1.0)*r22*x9536))+(((-1.0)*x9532))+x9525+((r20*x9524*x9526))+((r21*x9530)));
evalcond[8]=(((r11*x9530))+((r10*x9531))+(((-1.0)*x9527))+((r10*x9524*x9526))+(((-1.0)*r11*x9528*x9533))+(((-1.0)*r12*x9536))+(((-1.0)*sj11*x9529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9538=gconst1*gconst1;
IkReal x9539=gconst2*gconst2;
IkReal x9540=((1.0)*r10);
IkReal x9541=(cj13*r11);
IkReal x9542=(cj13*gconst2);
IkReal x9543=(gconst1*r00);
IkReal x9544=(r11*sj13);
IkReal x9545=(gconst1*gconst2*r01);
CheckValue<IkReal> x9546=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj13*x9540*x9545))+((r02*r12*sj13))+((r01*x9538*x9544))+(((-1.0)*gconst2*x9543*x9544))+((r00*r10*sj13*x9539)))),-1);
if(!x9546.valid){
continue;
}
CheckValue<IkReal> x9547 = IKatan2WithCheck(IkReal((((r01*r12*x9542))+((cj13*r12*x9543)))),IkReal((((r00*x9538*x9541))+(((-1.0)*cj13*r01*x9539*x9540))+((x9541*x9545))+(((-1.0)*x9540*x9542*x9543)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9547.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9546.value)))+(x9547.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9548=IKsin(j14);
IkReal x9549=IKcos(j14);
IkReal x9550=(sj11*sj12);
IkReal x9551=(gconst2*sj13);
IkReal x9552=(cj11*sj12);
IkReal x9553=(gconst1*sj13);
IkReal x9554=((1.0)*cj12);
IkReal x9555=(cj13*gconst2);
IkReal x9556=(cj13*gconst1);
IkReal x9557=(cj11*x9554);
IkReal x9558=((1.0)*x9549);
IkReal x9559=(gconst1*x9548);
IkReal x9560=(cj13*x9548);
IkReal x9561=((1.0)*sj13*x9548);
IkReal x9562=((1.0)*gconst2*x9548);
evalcond[0]=((((-1.0)*r20*x9562))+(((-1.0)*r22*x9558))+((r21*x9559)));
evalcond[1]=(((r11*x9559))+(((-1.0)*r10*x9562))+(((-1.0)*r12*x9558)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x9562))+(((-1.0)*r02*x9558))+((r01*x9559)));
evalcond[3]=((((-1.0)*r00*x9555*x9558))+((r01*x9549*x9556))+((r00*x9553))+((r01*x9551))+((r02*x9560)));
evalcond[4]=((((-1.0)*r01*x9553*x9558))+((r00*x9549*x9551))+((r00*x9556))+((r01*x9555))+(((-1.0)*r02*x9561)));
evalcond[5]=(((r21*x9549*x9556))+((r20*x9553))+((r22*x9560))+x9552+((cj12*sj11))+(((-1.0)*r20*x9555*x9558))+((r21*x9551)));
evalcond[6]=(((r11*x9551))+((r11*x9549*x9556))+((r12*x9560))+((r10*x9553))+x9550+(((-1.0)*r10*x9555*x9558))+(((-1.0)*x9557)));
evalcond[7]=((((-1.0)*r21*x9553*x9558))+((r20*x9556))+(((-1.0)*r22*x9561))+x9550+((r20*x9549*x9551))+((r21*x9555))+(((-1.0)*x9557)));
evalcond[8]=(((r11*x9555))+(((-1.0)*r11*x9553*x9558))+(((-1.0)*sj11*x9554))+((r10*x9549*x9551))+((r10*x9556))+(((-1.0)*r12*x9561))+(((-1.0)*x9552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9563=((1.0)*gconst2);
CheckValue<IkReal> x9564=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9563)))),-1);
if(!x9564.valid){
continue;
}
CheckValue<IkReal> x9565 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9563))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9565.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9564.value)))+(x9565.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9566=IKsin(j14);
IkReal x9567=IKcos(j14);
IkReal x9568=(sj11*sj12);
IkReal x9569=(gconst2*sj13);
IkReal x9570=(cj11*sj12);
IkReal x9571=(gconst1*sj13);
IkReal x9572=((1.0)*cj12);
IkReal x9573=(cj13*gconst2);
IkReal x9574=(cj13*gconst1);
IkReal x9575=(cj11*x9572);
IkReal x9576=((1.0)*x9567);
IkReal x9577=(gconst1*x9566);
IkReal x9578=(cj13*x9566);
IkReal x9579=((1.0)*sj13*x9566);
IkReal x9580=((1.0)*gconst2*x9566);
evalcond[0]=(((r21*x9577))+(((-1.0)*r20*x9580))+(((-1.0)*r22*x9576)));
evalcond[1]=(((r11*x9577))+(((-1.0)*r12*x9576))+(((-1.0)*r10*x9580)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x9576))+((r01*x9577))+(((-1.0)*r00*x9580)));
evalcond[3]=(((r01*x9569))+((r01*x9567*x9574))+(((-1.0)*r00*x9573*x9576))+((r00*x9571))+((r02*x9578)));
evalcond[4]=((((-1.0)*r02*x9579))+((r00*x9574))+(((-1.0)*r01*x9571*x9576))+((r01*x9573))+((r00*x9567*x9569)));
evalcond[5]=(((r21*x9569))+((r21*x9567*x9574))+((r22*x9578))+(((-1.0)*r20*x9573*x9576))+x9570+((cj12*sj11))+((r20*x9571)));
evalcond[6]=((((-1.0)*r10*x9573*x9576))+(((-1.0)*x9575))+x9568+((r11*x9569))+((r12*x9578))+((r11*x9567*x9574))+((r10*x9571)));
evalcond[7]=(((r21*x9573))+(((-1.0)*x9575))+(((-1.0)*r22*x9579))+x9568+((r20*x9574))+((r20*x9567*x9569))+(((-1.0)*r21*x9571*x9576)));
evalcond[8]=((((-1.0)*x9570))+(((-1.0)*r11*x9571*x9576))+((r11*x9573))+(((-1.0)*r12*x9579))+(((-1.0)*sj11*x9572))+((r10*x9567*x9569))+((r10*x9574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x9581=((-1.0)*r20);
IkReal x9582=x8615;
CheckValue<IkReal> x9584 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9581),IKFAST_ATAN2_MAGTHRESH);
if(!x9584.valid){
continue;
}
IkReal x9583=((-1.0)*(x9584.value));
sj15=gconst1;
cj15=gconst2;
j15=x9583;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst0=x9583;
IkReal gconst1=(r21*x9582);
IkReal gconst2=(x9581*x9582);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9585=((-1.0)*r20);
IkReal x9586=x8615;
CheckValue<IkReal> x9588 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9585),IKFAST_ATAN2_MAGTHRESH);
if(!x9588.valid){
continue;
}
IkReal x9587=((-1.0)*(x9588.value));
sj15=gconst1;
cj15=gconst2;
j15=x9587;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst0=x9587;
IkReal gconst1=(r21*x9586);
IkReal gconst2=(x9585*x9586);
CheckValue<IkReal> x9596=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9596.valid){
continue;
}
IkReal x9589=x9596.value;
IkReal x9590=(sj13*x9589);
IkReal x9591=(r01*x9590);
IkReal x9592=(r11*x9590);
IkReal x9593=(r10*x9590);
IkReal x9594=(r00*x9590);
IkReal x9595=(r20*r21*x9590);
j14eval[0]=IKsign((((r11*x9591*(r21*r21)))+((r02*r12*sj13))+((r10*r20*r21*x9591))+((r00*x9593*(r20*r20)))+((r00*r20*r21*x9592))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9597=gconst1*gconst1;
IkReal x9598=gconst2*gconst2;
IkReal x9599=(cj13*r00);
IkReal x9600=((1.0)*r10);
IkReal x9601=(gconst2*r01);
IkReal x9602=(r12*sj13);
IkReal x9603=(gconst1*r11);
IkReal x9604=((1.0)*cj13);
IkReal x9605=(r00*sj13);
IkReal x9606=(r11*x9597);
CheckValue<IkReal> x9607 = IKatan2WithCheck(IkReal((((gconst1*r00*x9602))+((x9601*x9602)))),IkReal(((((-1.0)*gconst1*gconst2*x9600*x9605))+(((-1.0)*r01*sj13*x9598*x9600))+((x9605*x9606))+((sj13*x9601*x9603)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9607.valid){
continue;
}
CheckValue<IkReal> x9608=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9598*x9599*x9600))+((gconst2*x9599*x9603))+(((-1.0)*r02*r12*x9604))+(((-1.0)*r01*x9604*x9606))+((cj13*gconst1*r10*x9601)))),-1);
if(!x9608.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9607.value)+(((1.5707963267949)*(x9608.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9609=IKsin(j14);
IkReal x9610=IKcos(j14);
IkReal x9611=(cj12*sj11);
IkReal x9612=(cj11*sj12);
IkReal x9613=(gconst2*sj13);
IkReal x9614=(gconst1*sj13);
IkReal x9615=(sj11*sj12);
IkReal x9616=(cj11*cj12);
IkReal x9617=(cj13*gconst2);
IkReal x9618=(cj13*gconst1);
IkReal x9619=((1.0)*x9610);
IkReal x9620=(gconst1*x9609);
IkReal x9621=(cj13*x9609);
IkReal x9622=(x9612+x9611);
IkReal x9623=((1.0)*sj13*x9609);
IkReal x9624=((1.0)*gconst2*x9609);
evalcond[0]=((((-1.0)*r22*x9619))+((r21*x9620))+(((-1.0)*r20*x9624)));
evalcond[1]=((((-1.0)*r10*x9624))+(((-1.0)*r12*x9619))+((r11*x9620)));
evalcond[2]=((1.0)+((r01*x9620))+(((-1.0)*r00*x9624))+(((-1.0)*r02*x9619)));
evalcond[3]=(((r00*x9614))+((r01*x9610*x9618))+((r01*x9613))+(((-1.0)*r00*x9617*x9619))+((r02*x9621)));
evalcond[4]=((((-1.0)*r01*x9614*x9619))+((r00*x9618))+((r01*x9617))+(((-1.0)*r02*x9623))+((r00*x9610*x9613)));
evalcond[5]=(((r20*x9614))+(((-1.0)*r20*x9617*x9619))+((r21*x9613))+((r22*x9621))+x9622+((r21*x9610*x9618)));
evalcond[6]=(((r11*x9610*x9618))+((r10*x9614))+(((-1.0)*x9615))+((r12*x9621))+((r11*x9613))+x9616+(((-1.0)*r10*x9617*x9619)));
evalcond[7]=((((-1.0)*r11*x9614*x9619))+((r10*x9618))+((r11*x9617))+(((-1.0)*r12*x9623))+x9622+((r10*x9610*x9613)));
evalcond[8]=(((r20*x9610*x9613))+((r20*x9618))+(((-1.0)*r21*x9614*x9619))+(((-1.0)*r22*x9623))+(((-1.0)*x9616))+((r21*x9617))+x9615);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9625=gconst1*gconst1;
IkReal x9626=gconst2*gconst2;
IkReal x9627=((1.0)*r10);
IkReal x9628=(cj13*r11);
IkReal x9629=(cj13*gconst2);
IkReal x9630=(gconst1*r00);
IkReal x9631=(r11*sj13);
IkReal x9632=(gconst1*gconst2*r01);
CheckValue<IkReal> x9633=IKPowWithIntegerCheck(IKsign((((r01*x9625*x9631))+((r00*r10*sj13*x9626))+(((-1.0)*gconst2*x9630*x9631))+((r02*r12*sj13))+(((-1.0)*sj13*x9627*x9632)))),-1);
if(!x9633.valid){
continue;
}
CheckValue<IkReal> x9634 = IKatan2WithCheck(IkReal((((cj13*r12*x9630))+((r01*r12*x9629)))),IkReal((((x9628*x9632))+((r00*x9625*x9628))+(((-1.0)*cj13*r01*x9626*x9627))+(((-1.0)*x9627*x9629*x9630)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9634.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9633.value)))+(x9634.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9635=IKsin(j14);
IkReal x9636=IKcos(j14);
IkReal x9637=(cj12*sj11);
IkReal x9638=(cj11*sj12);
IkReal x9639=(gconst2*sj13);
IkReal x9640=(gconst1*sj13);
IkReal x9641=(sj11*sj12);
IkReal x9642=(cj11*cj12);
IkReal x9643=(cj13*gconst2);
IkReal x9644=(cj13*gconst1);
IkReal x9645=((1.0)*x9636);
IkReal x9646=(gconst1*x9635);
IkReal x9647=(cj13*x9635);
IkReal x9648=(x9638+x9637);
IkReal x9649=((1.0)*sj13*x9635);
IkReal x9650=((1.0)*gconst2*x9635);
evalcond[0]=((((-1.0)*r20*x9650))+((r21*x9646))+(((-1.0)*r22*x9645)));
evalcond[1]=((((-1.0)*r10*x9650))+(((-1.0)*r12*x9645))+((r11*x9646)));
evalcond[2]=((1.0)+(((-1.0)*r00*x9650))+((r01*x9646))+(((-1.0)*r02*x9645)));
evalcond[3]=(((r01*x9639))+((r02*x9647))+(((-1.0)*r00*x9643*x9645))+((r01*x9636*x9644))+((r00*x9640)));
evalcond[4]=(((r00*x9636*x9639))+(((-1.0)*r01*x9640*x9645))+((r00*x9644))+((r01*x9643))+(((-1.0)*r02*x9649)));
evalcond[5]=(((r22*x9647))+((r21*x9639))+(((-1.0)*r20*x9643*x9645))+x9648+((r20*x9640))+((r21*x9636*x9644)));
evalcond[6]=(((r11*x9636*x9644))+x9642+((r10*x9640))+((r11*x9639))+(((-1.0)*x9641))+(((-1.0)*r10*x9643*x9645))+((r12*x9647)));
evalcond[7]=((((-1.0)*r12*x9649))+((r11*x9643))+((r10*x9636*x9639))+x9648+((r10*x9644))+(((-1.0)*r11*x9640*x9645)));
evalcond[8]=((((-1.0)*r21*x9640*x9645))+x9641+((r20*x9644))+(((-1.0)*x9642))+((r21*x9643))+(((-1.0)*r22*x9649))+((r20*x9636*x9639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x9651 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9651.valid){
continue;
}
CheckValue<IkReal> x9652=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9652.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9651.value)+(((1.5707963267949)*(x9652.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9653=IKsin(j14);
IkReal x9654=IKcos(j14);
IkReal x9655=(cj12*sj11);
IkReal x9656=(cj11*sj12);
IkReal x9657=(gconst2*sj13);
IkReal x9658=(gconst1*sj13);
IkReal x9659=(sj11*sj12);
IkReal x9660=(cj11*cj12);
IkReal x9661=(cj13*gconst2);
IkReal x9662=(cj13*gconst1);
IkReal x9663=((1.0)*x9654);
IkReal x9664=(gconst1*x9653);
IkReal x9665=(cj13*x9653);
IkReal x9666=(x9656+x9655);
IkReal x9667=((1.0)*sj13*x9653);
IkReal x9668=((1.0)*gconst2*x9653);
evalcond[0]=(((r21*x9664))+(((-1.0)*r20*x9668))+(((-1.0)*r22*x9663)));
evalcond[1]=((((-1.0)*r10*x9668))+((r11*x9664))+(((-1.0)*r12*x9663)));
evalcond[2]=((1.0)+(((-1.0)*r00*x9668))+((r01*x9664))+(((-1.0)*r02*x9663)));
evalcond[3]=(((r01*x9657))+((r00*x9658))+((r01*x9654*x9662))+((r02*x9665))+(((-1.0)*r00*x9661*x9663)));
evalcond[4]=((((-1.0)*r01*x9658*x9663))+((r00*x9662))+((r00*x9654*x9657))+((r01*x9661))+(((-1.0)*r02*x9667)));
evalcond[5]=(((r21*x9657))+((r20*x9658))+x9666+((r22*x9665))+(((-1.0)*r20*x9661*x9663))+((r21*x9654*x9662)));
evalcond[6]=((((-1.0)*r10*x9661*x9663))+((r11*x9657))+((r12*x9665))+x9660+((r10*x9658))+(((-1.0)*x9659))+((r11*x9654*x9662)));
evalcond[7]=(((r11*x9661))+((r10*x9662))+(((-1.0)*r12*x9667))+x9666+(((-1.0)*r11*x9658*x9663))+((r10*x9654*x9657)));
evalcond[8]=(((r21*x9661))+((r20*x9662))+x9659+(((-1.0)*x9660))+(((-1.0)*r21*x9658*x9663))+((r20*x9654*x9657))+(((-1.0)*r22*x9667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x9669=((-1.0)*r20);
IkReal x9670=((-1.0)*px);
CheckValue<IkReal> x9672 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9669),IKFAST_ATAN2_MAGTHRESH);
if(!x9672.valid){
continue;
}
IkReal x9671=((-1.0)*(x9672.value));
sj15=gconst1;
cj15=gconst2;
j15=x9671;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9670);
rxp1_1=(px*r21);
rxp1_2=(r11*x9670);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9671;
IkReal gconst1=r21;
IkReal gconst2=x9669;
j14eval[0]=(((r11*r21))+((r10*r20)));
j14eval[1]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x9673=((-1.0)*r20);
IkReal x9674=((-1.0)*px);
CheckValue<IkReal> x9676 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9673),IKFAST_ATAN2_MAGTHRESH);
if(!x9676.valid){
continue;
}
IkReal x9675=((-1.0)*(x9676.value));
sj15=gconst1;
cj15=gconst2;
j15=x9675;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9674);
rxp1_1=(px*r21);
rxp1_2=(r11*x9674);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9675;
IkReal gconst1=r21;
IkReal gconst2=x9673;
j14eval[0]=(((r11*r21))+((r10*r20)));
j14eval[1]=((((-1.0)*cj13*(r10*r10)))+((cj13*(r21*r21)))+cj13);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x9677=((-1.0)*r20);
IkReal x9678=((-1.0)*px);
CheckValue<IkReal> x9680 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9677),IKFAST_ATAN2_MAGTHRESH);
if(!x9680.valid){
continue;
}
IkReal x9679=((-1.0)*(x9680.value));
sj15=gconst1;
cj15=gconst2;
j15=x9679;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9678);
rxp1_1=(px*r21);
rxp1_2=(r11*x9678);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9679;
IkReal gconst1=r21;
IkReal gconst2=x9677;
j14eval[0]=cj13;
j14eval[1]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x9681=((-1.0)*r20);
IkReal x9682=((-1.0)*px);
CheckValue<IkReal> x9684 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9681),IKFAST_ATAN2_MAGTHRESH);
if(!x9684.valid){
continue;
}
IkReal x9683=((-1.0)*(x9684.value));
sj15=gconst1;
cj15=gconst2;
j15=x9683;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9682);
rxp1_1=(px*r21);
rxp1_2=(r11*x9682);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst0=x9683;
IkReal gconst1=r21;
IkReal gconst2=x9681;
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9685=((-1.0)*r20);
IkReal x9686=((-1.0)*px);
CheckValue<IkReal> x9688 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9685),IKFAST_ATAN2_MAGTHRESH);
if(!x9688.valid){
continue;
}
IkReal x9687=((-1.0)*(x9688.value));
sj15=gconst1;
cj15=gconst2;
j15=x9687;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9686);
rxp1_1=(px*r21);
rxp1_2=(r11*x9686);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst0=x9687;
IkReal gconst1=r21;
IkReal gconst2=x9685;
j14eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9689=((-1.0)*r20);
IkReal x9690=((-1.0)*px);
CheckValue<IkReal> x9692 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9689),IKFAST_ATAN2_MAGTHRESH);
if(!x9692.valid){
continue;
}
IkReal x9691=((-1.0)*(x9692.value));
sj15=gconst1;
cj15=gconst2;
j15=x9691;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9690);
rxp1_1=(px*r21);
rxp1_2=(r11*x9690);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst0=x9691;
IkReal gconst1=r21;
IkReal gconst2=x9689;
j14eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x9695=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9695.valid){
continue;
}
IkReal x9693=x9695.value;
IkReal x9694=(sj10*x9693);
cj14array[0]=(((cj12*sj11*x9694))+((cj11*sj12*x9694)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x9696=IKsin(j14);
IkReal x9697=IKcos(j14);
IkReal x9698=(gconst1*r21);
IkReal x9699=((1.0)*x9697);
IkReal x9700=((1.0)*gconst2*x9696);
evalcond[0]=((-1.0)*r02*x9696);
evalcond[1]=((((-1.0)*r02*x9699))+(((-1.0)*sj10)));
evalcond[2]=(((x9696*x9698))+(((-1.0)*r20*x9700)));
evalcond[3]=(((gconst1*r11*x9696))+(((-1.0)*r10*x9700)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x9698*x9699))+((gconst2*r20*x9697))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x9702=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9702.valid){
continue;
}
IkReal x9701=x9702.value;
cj14array[0]=((((-1.0)*sj11*sj12*x9701))+((cj11*cj12*x9701)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x9703=IKsin(j14);
IkReal x9704=IKcos(j14);
IkReal x9705=((1.0)*sj10);
IkReal x9706=(gconst2*r10);
IkReal x9707=((1.0)*x9704);
IkReal x9708=(gconst1*x9703);
IkReal x9709=((1.0)*x9703);
evalcond[0]=((-1.0)*r02*x9703);
evalcond[1]=((((-1.0)*r02*x9707))+(((-1.0)*x9705)));
evalcond[2]=(((r21*x9708))+(((-1.0)*gconst2*r20*x9709)));
evalcond[3]=(((r11*x9708))+(((-1.0)*x9706*x9709)));
evalcond[4]=(((x9704*x9706))+(((-1.0)*gconst1*r11*x9707))+(((-1.0)*cj11*sj12*x9705))+(((-1.0)*cj12*sj11*x9705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x9710=IKPowWithIntegerCheck(r02,-1);
if(!x9710.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x9710.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x9711=IKsin(j14);
IkReal x9712=IKcos(j14);
IkReal x9713=((1.0)*cj12);
IkReal x9714=(gconst2*r10);
IkReal x9715=(gconst2*r20);
IkReal x9716=(gconst1*x9711);
IkReal x9717=((1.0)*x9711);
IkReal x9718=((1.0)*gconst1*x9712);
evalcond[0]=((-1.0)*r02*x9711);
evalcond[1]=((((-1.0)*x9715*x9717))+((r21*x9716)));
evalcond[2]=((((-1.0)*x9714*x9717))+((r11*x9716)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r21*x9718))+((x9712*x9715))+(((-1.0)*cj11*x9713)));
evalcond[4]=((((-1.0)*cj11*sj10*sj12))+((x9712*x9714))+(((-1.0)*r11*x9718))+(((-1.0)*sj10*sj11*x9713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x9719=((-1.0)*r20);
IkReal x9720=((-1.0)*px);
CheckValue<IkReal> x9722 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9719),IKFAST_ATAN2_MAGTHRESH);
if(!x9722.valid){
continue;
}
IkReal x9721=((-1.0)*(x9722.value));
sj15=gconst1;
cj15=gconst2;
j15=x9721;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9720);
rxp1_1=(px*r21);
rxp1_2=(r11*x9720);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst0=x9721;
IkReal gconst1=r21;
IkReal gconst2=x9719;
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9723=((-1.0)*r20);
IkReal x9724=((-1.0)*px);
CheckValue<IkReal> x9726 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9723),IKFAST_ATAN2_MAGTHRESH);
if(!x9726.valid){
continue;
}
IkReal x9725=((-1.0)*(x9726.value));
sj15=gconst1;
cj15=gconst2;
j15=x9725;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9724);
rxp1_1=(px*r21);
rxp1_2=(r11*x9724);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst0=x9725;
IkReal gconst1=r21;
IkReal gconst2=x9723;
j14eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9727=((-1.0)*r20);
IkReal x9728=((-1.0)*px);
CheckValue<IkReal> x9730 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9727),IKFAST_ATAN2_MAGTHRESH);
if(!x9730.valid){
continue;
}
IkReal x9729=((-1.0)*(x9730.value));
sj15=gconst1;
cj15=gconst2;
j15=x9729;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9728);
rxp1_1=(px*r21);
rxp1_2=(r11*x9728);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst0=x9729;
IkReal gconst1=r21;
IkReal gconst2=x9727;
j14eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x9733=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9733.valid){
continue;
}
IkReal x9731=x9733.value;
IkReal x9732=(sj10*x9731);
cj14array[0]=(((cj12*sj11*x9732))+((cj11*sj12*x9732)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x9734=IKsin(j14);
IkReal x9735=IKcos(j14);
IkReal x9736=(gconst1*r21);
IkReal x9737=((1.0)*x9735);
IkReal x9738=((1.0)*gconst2*x9734);
evalcond[0]=(r02*x9734);
evalcond[1]=((((-1.0)*r02*x9737))+(((-1.0)*sj10)));
evalcond[2]=(((x9734*x9736))+(((-1.0)*r20*x9738)));
evalcond[3]=((((-1.0)*r10*x9738))+((gconst1*r11*x9734)));
evalcond[4]=(((sj11*sj12))+((x9735*x9736))+(((-1.0)*cj11*cj12))+(((-1.0)*gconst2*r20*x9737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x9740=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9740.valid){
continue;
}
IkReal x9739=x9740.value;
cj14array[0]=((((-1.0)*sj11*sj12*x9739))+((cj11*cj12*x9739)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x9741=IKsin(j14);
IkReal x9742=IKcos(j14);
IkReal x9743=((1.0)*sj10);
IkReal x9744=(gconst2*r10);
IkReal x9745=((1.0)*x9742);
IkReal x9746=(gconst1*x9741);
IkReal x9747=((1.0)*x9741);
evalcond[0]=(r02*x9741);
evalcond[1]=((((-1.0)*r02*x9745))+(((-1.0)*x9743)));
evalcond[2]=(((r21*x9746))+(((-1.0)*gconst2*r20*x9747)));
evalcond[3]=(((r11*x9746))+(((-1.0)*x9744*x9747)));
evalcond[4]=((((-1.0)*x9744*x9745))+(((-1.0)*cj11*sj12*x9743))+(((-1.0)*cj12*sj11*x9743))+((gconst1*r11*x9742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x9748=IKPowWithIntegerCheck(r02,-1);
if(!x9748.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x9748.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x9749=IKsin(j14);
IkReal x9750=IKcos(j14);
IkReal x9751=((1.0)*cj12);
IkReal x9752=(gconst1*r21);
IkReal x9753=(gconst1*r11);
IkReal x9754=((1.0)*gconst2*r10);
IkReal x9755=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9749);
evalcond[1]=((((-1.0)*x9749*x9755))+((x9749*x9752)));
evalcond[2]=((((-1.0)*x9749*x9754))+((x9749*x9753)));
evalcond[3]=(((sj11*sj12))+((x9750*x9752))+(((-1.0)*cj11*x9751))+(((-1.0)*x9750*x9755)));
evalcond[4]=((((-1.0)*cj11*sj10*sj12))+((x9750*x9753))+(((-1.0)*sj10*sj11*x9751))+(((-1.0)*x9750*x9754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x9757=IKPowWithIntegerCheck(r02,-1);
if(!x9757.valid){
continue;
}
IkReal x9756=x9757.value;
CheckValue<IkReal> x9758=IKPowWithIntegerCheck(cj13,-1);
if(!x9758.valid){
continue;
}
if( IKabs((x9756*(x9758.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj10*x9756)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9756*(x9758.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12))))))+IKsqr(((-1.0)*sj10*x9756))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((x9756*(x9758.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12))))), ((-1.0)*sj10*x9756));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9759=IKsin(j14);
IkReal x9760=IKcos(j14);
IkReal x9761=((1.0)*cj11);
IkReal x9762=(cj10*sj12);
IkReal x9763=(gconst1*r21);
IkReal x9764=(cj13*gconst2);
IkReal x9765=(gconst2*sj13);
IkReal x9766=((1.0)*sj10);
IkReal x9767=(gconst1*r11);
IkReal x9768=(sj11*sj12);
IkReal x9769=(cj12*sj11);
IkReal x9770=(cj13*gconst1);
IkReal x9771=(gconst1*sj13);
IkReal x9772=((1.0)*x9760);
IkReal x9773=((1.0)*x9759);
IkReal x9774=(cj13*x9760);
evalcond[0]=((((-1.0)*r02*x9772))+(((-1.0)*x9766)));
evalcond[1]=((((-1.0)*gconst2*r20*x9773))+((x9759*x9763)));
evalcond[2]=((((-1.0)*gconst2*r10*x9773))+cj10+((x9759*x9767)));
evalcond[3]=((((-1.0)*cj10*cj12*x9761))+((cj13*r02*x9759))+((sj11*x9762)));
evalcond[4]=((((-1.0)*cj10*x9769))+(((-1.0)*r02*sj13*x9773))+(((-1.0)*x9761*x9762)));
evalcond[5]=(((x9763*x9774))+(((-1.0)*r20*x9764*x9772))+x9769+((r21*x9765))+((r20*x9771))+((cj11*sj12)));
evalcond[6]=((((-1.0)*sj13*x9763*x9772))+x9768+((r20*x9760*x9765))+((r21*x9764))+((r20*x9770))+(((-1.0)*cj12*x9761)));
evalcond[7]=(((x9767*x9774))+((r10*x9771))+((sj10*x9768))+(((-1.0)*cj12*sj10*x9761))+(((-1.0)*r10*x9764*x9772))+((r11*x9765)));
evalcond[8]=((((-1.0)*sj10*sj12*x9761))+((r10*x9770))+((r10*x9760*x9765))+(((-1.0)*x9766*x9769))+((r11*x9764))+(((-1.0)*sj13*x9767*x9772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9775=((1.0)*gconst2);
CheckValue<IkReal> x9776=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x9775))),-1);
if(!x9776.valid){
continue;
}
CheckValue<IkReal> x9777=IKPowWithIntegerCheck(((((-1.0)*cj13*r20*x9775))+((cj13*gconst1*r21))),-1);
if(!x9777.valid){
continue;
}
if( IKabs(((-1.0)*cj10*(x9776.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9777.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*sj11))+(((-1.0)*r21*sj13*x9775))+(((-1.0)*gconst1*r20*sj13)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj10*(x9776.value)))+IKsqr(((x9777.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*sj11))+(((-1.0)*r21*sj13*x9775))+(((-1.0)*gconst1*r20*sj13))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*cj10*(x9776.value)), ((x9777.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*sj11))+(((-1.0)*r21*sj13*x9775))+(((-1.0)*gconst1*r20*sj13))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9778=IKsin(j14);
IkReal x9779=IKcos(j14);
IkReal x9780=((1.0)*cj11);
IkReal x9781=(cj10*sj12);
IkReal x9782=(gconst1*r21);
IkReal x9783=(cj13*gconst2);
IkReal x9784=(gconst2*sj13);
IkReal x9785=((1.0)*sj10);
IkReal x9786=(gconst1*r11);
IkReal x9787=(sj11*sj12);
IkReal x9788=(cj12*sj11);
IkReal x9789=(cj13*gconst1);
IkReal x9790=(gconst1*sj13);
IkReal x9791=((1.0)*x9779);
IkReal x9792=((1.0)*x9778);
IkReal x9793=(cj13*x9779);
evalcond[0]=((((-1.0)*r02*x9791))+(((-1.0)*x9785)));
evalcond[1]=(((x9778*x9782))+(((-1.0)*gconst2*r20*x9792)));
evalcond[2]=(((x9778*x9786))+(((-1.0)*gconst2*r10*x9792))+cj10);
evalcond[3]=(((cj13*r02*x9778))+(((-1.0)*cj10*cj12*x9780))+((sj11*x9781)));
evalcond[4]=((((-1.0)*r02*sj13*x9792))+(((-1.0)*cj10*x9788))+(((-1.0)*x9780*x9781)));
evalcond[5]=(((r21*x9784))+((r20*x9790))+((x9782*x9793))+x9788+(((-1.0)*r20*x9783*x9791))+((cj11*sj12)));
evalcond[6]=((((-1.0)*cj12*x9780))+((r20*x9779*x9784))+((r21*x9783))+(((-1.0)*sj13*x9782*x9791))+x9787+((r20*x9789)));
evalcond[7]=((((-1.0)*cj12*sj10*x9780))+((r10*x9790))+((x9786*x9793))+((sj10*x9787))+((r11*x9784))+(((-1.0)*r10*x9783*x9791)));
evalcond[8]=(((r10*x9779*x9784))+(((-1.0)*x9785*x9788))+((r10*x9789))+(((-1.0)*sj10*sj12*x9780))+((r11*x9783))+(((-1.0)*sj13*x9786*x9791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x9794=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9794.valid){
continue;
}
CheckValue<IkReal> x9795=IKPowWithIntegerCheck(r02,-1);
if(!x9795.valid){
continue;
}
if( IKabs(((-1.0)*cj10*(x9794.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj10*(x9795.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj10*(x9794.value)))+IKsqr(((-1.0)*sj10*(x9795.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*cj10*(x9794.value)), ((-1.0)*sj10*(x9795.value)));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9796=IKsin(j14);
IkReal x9797=IKcos(j14);
IkReal x9798=((1.0)*cj11);
IkReal x9799=(cj10*sj12);
IkReal x9800=(gconst1*r21);
IkReal x9801=(cj13*gconst2);
IkReal x9802=(gconst2*sj13);
IkReal x9803=((1.0)*sj10);
IkReal x9804=(gconst1*r11);
IkReal x9805=(sj11*sj12);
IkReal x9806=(cj12*sj11);
IkReal x9807=(cj13*gconst1);
IkReal x9808=(gconst1*sj13);
IkReal x9809=((1.0)*x9797);
IkReal x9810=((1.0)*x9796);
IkReal x9811=(cj13*x9797);
evalcond[0]=((((-1.0)*r02*x9809))+(((-1.0)*x9803)));
evalcond[1]=((((-1.0)*gconst2*r20*x9810))+((x9796*x9800)));
evalcond[2]=((((-1.0)*gconst2*r10*x9810))+cj10+((x9796*x9804)));
evalcond[3]=(((sj11*x9799))+((cj13*r02*x9796))+(((-1.0)*cj10*cj12*x9798)));
evalcond[4]=((((-1.0)*r02*sj13*x9810))+(((-1.0)*x9798*x9799))+(((-1.0)*cj10*x9806)));
evalcond[5]=(((r21*x9802))+((x9800*x9811))+((r20*x9808))+x9806+((cj11*sj12))+(((-1.0)*r20*x9801*x9809)));
evalcond[6]=(((r21*x9801))+(((-1.0)*sj13*x9800*x9809))+(((-1.0)*cj12*x9798))+((r20*x9797*x9802))+((r20*x9807))+x9805);
evalcond[7]=(((r10*x9808))+((sj10*x9805))+((r11*x9802))+((x9804*x9811))+(((-1.0)*cj12*sj10*x9798))+(((-1.0)*r10*x9801*x9809)));
evalcond[8]=(((r10*x9807))+(((-1.0)*sj10*sj12*x9798))+((r11*x9801))+(((-1.0)*x9803*x9806))+((r10*x9797*x9802))+(((-1.0)*sj13*x9804*x9809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9812=r21*r21;
IkReal x9813=gconst1*gconst1;
IkReal x9814=r20*r20;
IkReal x9815=gconst2*gconst2;
IkReal x9816=(gconst2*r20);
IkReal x9817=(gconst1*r21);
IkReal x9818=(cj11*cj12);
IkReal x9819=(sj11*sj12);
IkReal x9820=(cj13*r20);
IkReal x9821=(cj13*gconst1*gconst2);
CheckValue<IkReal> x9822=IKPowWithIntegerCheck(IKsign((((sj13*x9812*x9813))+((sj13*(r22*r22)))+((sj13*x9814*x9815))+(((-2.0)*sj13*x9816*x9817)))),-1);
if(!x9822.valid){
continue;
}
CheckValue<IkReal> x9823 = IKatan2WithCheck(IkReal((((r22*x9819))+((cj13*gconst2*r21*r22))+((gconst1*r22*x9820))+(((-1.0)*r22*x9818)))),IkReal(((((-1.0)*r21*x9815*x9820))+((r21*x9813*x9820))+((x9812*x9821))+((x9816*x9818))+((x9817*x9819))+(((-1.0)*x9814*x9821))+(((-1.0)*x9817*x9818))+(((-1.0)*x9816*x9819)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9823.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9822.value)))+(x9823.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9824=IKsin(j14);
IkReal x9825=IKcos(j14);
IkReal x9826=((1.0)*cj11);
IkReal x9827=(cj10*sj12);
IkReal x9828=(cj13*gconst2);
IkReal x9829=(cj13*gconst1);
IkReal x9830=(gconst2*sj13);
IkReal x9831=((1.0)*sj10);
IkReal x9832=(sj10*sj12);
IkReal x9833=(gconst1*sj13);
IkReal x9834=(cj12*sj11);
IkReal x9835=((1.0)*x9825);
IkReal x9836=(gconst1*x9824);
IkReal x9837=((1.0)*x9824);
IkReal x9838=(cj13*x9824);
evalcond[0]=(((r21*x9836))+(((-1.0)*r22*x9835))+(((-1.0)*gconst2*r20*x9837)));
evalcond[1]=(((r11*x9836))+(((-1.0)*gconst2*r10*x9837))+cj10+(((-1.0)*r12*x9835)));
evalcond[2]=((((-1.0)*x9831))+((r01*x9836))+(((-1.0)*r02*x9835))+(((-1.0)*gconst2*r00*x9837)));
evalcond[3]=(((r21*x9830))+((r22*x9838))+((r21*x9825*x9829))+(((-1.0)*r20*x9828*x9835))+((r20*x9833))+x9834+((cj11*sj12)));
evalcond[4]=(((sj11*sj12))+((r20*x9829))+(((-1.0)*cj12*x9826))+((r20*x9825*x9830))+((r21*x9828))+(((-1.0)*r22*sj13*x9837))+(((-1.0)*r21*x9833*x9835)));
evalcond[5]=(((r00*x9833))+((r01*x9830))+(((-1.0)*r00*x9828*x9835))+((sj11*x9827))+((r02*x9838))+((r01*x9825*x9829))+(((-1.0)*cj10*cj12*x9826)));
evalcond[6]=(((r11*x9830))+((r10*x9833))+(((-1.0)*cj12*sj10*x9826))+((r12*x9838))+((sj11*x9832))+(((-1.0)*r10*x9828*x9835))+((r11*x9825*x9829)));
evalcond[7]=((((-1.0)*r01*x9833*x9835))+((r00*x9825*x9830))+(((-1.0)*x9826*x9827))+((r00*x9829))+((r01*x9828))+(((-1.0)*cj10*x9834))+(((-1.0)*r02*sj13*x9837)));
evalcond[8]=(((r11*x9828))+(((-1.0)*r12*sj13*x9837))+(((-1.0)*r11*x9833*x9835))+(((-1.0)*x9826*x9832))+(((-1.0)*x9831*x9834))+((r10*x9829))+((r10*x9825*x9830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9839=((1.0)*gconst2);
CheckValue<IkReal> x9840=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9839)))),-1);
if(!x9840.valid){
continue;
}
CheckValue<IkReal> x9841 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst1*r21*sj10))+(((-1.0)*r20*sj10*x9839)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9841.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9840.value)))+(x9841.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9842=IKsin(j14);
IkReal x9843=IKcos(j14);
IkReal x9844=((1.0)*cj11);
IkReal x9845=(cj10*sj12);
IkReal x9846=(cj13*gconst2);
IkReal x9847=(cj13*gconst1);
IkReal x9848=(gconst2*sj13);
IkReal x9849=((1.0)*sj10);
IkReal x9850=(sj10*sj12);
IkReal x9851=(gconst1*sj13);
IkReal x9852=(cj12*sj11);
IkReal x9853=((1.0)*x9843);
IkReal x9854=(gconst1*x9842);
IkReal x9855=((1.0)*x9842);
IkReal x9856=(cj13*x9842);
evalcond[0]=(((r21*x9854))+(((-1.0)*gconst2*r20*x9855))+(((-1.0)*r22*x9853)));
evalcond[1]=(((r11*x9854))+(((-1.0)*gconst2*r10*x9855))+cj10+(((-1.0)*r12*x9853)));
evalcond[2]=((((-1.0)*r02*x9853))+(((-1.0)*x9849))+((r01*x9854))+(((-1.0)*gconst2*r00*x9855)));
evalcond[3]=(((r20*x9851))+(((-1.0)*r20*x9846*x9853))+((r22*x9856))+x9852+((cj11*sj12))+((r21*x9843*x9847))+((r21*x9848)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r22*sj13*x9855))+(((-1.0)*r21*x9851*x9853))+((r20*x9847))+(((-1.0)*cj12*x9844))+((r20*x9843*x9848))+((r21*x9846)));
evalcond[5]=(((r02*x9856))+((sj11*x9845))+((r01*x9843*x9847))+(((-1.0)*cj10*cj12*x9844))+((r01*x9848))+((r00*x9851))+(((-1.0)*r00*x9846*x9853)));
evalcond[6]=(((r10*x9851))+((r11*x9848))+((r11*x9843*x9847))+((sj11*x9850))+(((-1.0)*cj12*sj10*x9844))+(((-1.0)*r10*x9846*x9853))+((r12*x9856)));
evalcond[7]=((((-1.0)*x9844*x9845))+(((-1.0)*r02*sj13*x9855))+((r01*x9846))+((r00*x9847))+(((-1.0)*r01*x9851*x9853))+((r00*x9843*x9848))+(((-1.0)*cj10*x9852)));
evalcond[8]=((((-1.0)*r12*sj13*x9855))+((r11*x9846))+((r10*x9847))+((r10*x9843*x9848))+(((-1.0)*r11*x9851*x9853))+(((-1.0)*x9849*x9852))+(((-1.0)*x9844*x9850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9857=((1.0)*gconst2);
CheckValue<IkReal> x9858=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9857)))),-1);
if(!x9858.valid){
continue;
}
CheckValue<IkReal> x9859 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst1*r21))+(((-1.0)*cj10*r20*x9857)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9859.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9858.value)))+(x9859.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9860=IKsin(j14);
IkReal x9861=IKcos(j14);
IkReal x9862=((1.0)*cj11);
IkReal x9863=(cj10*sj12);
IkReal x9864=(cj13*gconst2);
IkReal x9865=(cj13*gconst1);
IkReal x9866=(gconst2*sj13);
IkReal x9867=((1.0)*sj10);
IkReal x9868=(sj10*sj12);
IkReal x9869=(gconst1*sj13);
IkReal x9870=(cj12*sj11);
IkReal x9871=((1.0)*x9861);
IkReal x9872=(gconst1*x9860);
IkReal x9873=((1.0)*x9860);
IkReal x9874=(cj13*x9860);
evalcond[0]=((((-1.0)*gconst2*r20*x9873))+((r21*x9872))+(((-1.0)*r22*x9871)));
evalcond[1]=((((-1.0)*gconst2*r10*x9873))+cj10+((r11*x9872))+(((-1.0)*r12*x9871)));
evalcond[2]=((((-1.0)*x9867))+(((-1.0)*r02*x9871))+(((-1.0)*gconst2*r00*x9873))+((r01*x9872)));
evalcond[3]=((((-1.0)*r20*x9864*x9871))+((r21*x9861*x9865))+((r22*x9874))+((r21*x9866))+((r20*x9869))+x9870+((cj11*sj12)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r22*sj13*x9873))+(((-1.0)*cj12*x9862))+((r21*x9864))+((r20*x9865))+(((-1.0)*r21*x9869*x9871))+((r20*x9861*x9866)));
evalcond[5]=((((-1.0)*cj10*cj12*x9862))+((r02*x9874))+((r01*x9861*x9865))+((r00*x9869))+((r01*x9866))+(((-1.0)*r00*x9864*x9871))+((sj11*x9863)));
evalcond[6]=(((r12*x9874))+(((-1.0)*cj12*sj10*x9862))+((r11*x9866))+((r10*x9869))+((sj11*x9868))+(((-1.0)*r10*x9864*x9871))+((r11*x9861*x9865)));
evalcond[7]=((((-1.0)*r02*sj13*x9873))+((r00*x9865))+((r01*x9864))+((r00*x9861*x9866))+(((-1.0)*cj10*x9870))+(((-1.0)*x9862*x9863))+(((-1.0)*r01*x9869*x9871)));
evalcond[8]=((((-1.0)*r11*x9869*x9871))+(((-1.0)*x9867*x9870))+((r11*x9864))+((r10*x9861*x9866))+((r10*x9865))+(((-1.0)*x9862*x9868))+(((-1.0)*r12*sj13*x9873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9875=((-1.0)*r21);
IkReal x9877 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x9877)==0){
continue;
}
IkReal x9876=pow(x9877,-0.5);
CheckValue<IkReal> x9878 = IKatan2WithCheck(IkReal(x9875),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9878.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x9878.value))));
IkReal gconst4=(x9875*x9876);
IkReal gconst5=((1.0)*r20*x9876);
CheckValue<IkReal> x9879 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9879.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x9879.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x9880=((-1.0)*r21);
CheckValue<IkReal> x9883 = IKatan2WithCheck(IkReal(x9880),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9883.valid){
continue;
}
IkReal x9881=((1.0)*(x9883.value));
IkReal x9882=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x9881)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9881)));
IkReal gconst4=(x9880*x9882);
IkReal gconst5=((1.0)*r20*x9882);
IkReal x9884=r22*r22;
IkReal x9885=((1.0)*x9884);
CheckValue<IkReal> x9889=IKPowWithIntegerCheck(((-1.0)+x9884),-1);
if(!x9889.valid){
continue;
}
IkReal x9886=x9889.value;
if((((1.0)+(((-1.0)*x9885)))) < -0.00001)
continue;
IkReal x9887=IKsqrt(((1.0)+(((-1.0)*x9885))));
IkReal x9888=(cj10*x9886*x9887);
j14eval[0]=((IKabs(((((-1.0)*x9885*x9888))+x9888)))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9890=((-1.0)*r21);
CheckValue<IkReal> x9893 = IKatan2WithCheck(IkReal(x9890),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9893.valid){
continue;
}
IkReal x9891=((1.0)*(x9893.value));
IkReal x9892=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x9891)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9891)));
IkReal gconst4=(x9890*x9892);
IkReal gconst5=((1.0)*r20*x9892);
IkReal x9894=r22*r22;
IkReal x9895=((1.0)*x9894);
CheckValue<IkReal> x9899=IKPowWithIntegerCheck(((-1.0)+x9894),-1);
if(!x9899.valid){
continue;
}
IkReal x9896=x9899.value;
if((((1.0)+(((-1.0)*x9895)))) < -0.00001)
continue;
IkReal x9897=IKsqrt(((1.0)+(((-1.0)*x9895))));
IkReal x9898=(sj10*x9896*x9897);
j14eval[0]=((IKabs(((((-1.0)*x9895*x9898))+x9898)))+(IKabs((r22*sj10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x9900=((-1.0)*r21);
CheckValue<IkReal> x9903 = IKatan2WithCheck(IkReal(x9900),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9903.valid){
continue;
}
IkReal x9901=((1.0)*(x9903.value));
IkReal x9902=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x9901)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9901)));
IkReal gconst4=(x9900*x9902);
IkReal gconst5=((1.0)*r20*x9902);
IkReal x9904=r22*r22;
IkReal x9905=(cj10*r02);
IkReal x9906=(r12*sj10);
CheckValue<IkReal> x9910=IKPowWithIntegerCheck(((-1.0)+x9904),-1);
if(!x9910.valid){
continue;
}
IkReal x9907=x9910.value;
if((((1.0)+(((-1.0)*x9904)))) < -0.00001)
continue;
IkReal x9908=IKsqrt(((1.0)+(((-1.0)*x9904))));
IkReal x9909=(r22*x9907*x9908);
j14eval[0]=0;
j14eval[1]=((IKabs((((x9905*x9909))+((x9906*x9909)))))+(IKabs(((((-1.0)*x9905))+(((-1.0)*x9906))))));
j14eval[2]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
IkReal x9911=((-1.0)*r21);
CheckValue<IkReal> x9914 = IKatan2WithCheck(IkReal(x9911),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9914.valid){
continue;
}
IkReal x9912=((1.0)*(x9914.value));
IkReal x9913=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x9912)));
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9912)));
IkReal gconst4=(x9911*x9913);
IkReal gconst5=((1.0)*r20*x9913);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=r02;
j14eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9915=((-1.0)*r21);
CheckValue<IkReal> x9918 = IKatan2WithCheck(IkReal(x9915),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9918.valid){
continue;
}
IkReal x9916=((1.0)*(x9918.value));
IkReal x9917=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x9916)));
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9916)));
IkReal gconst4=(x9915*x9917);
IkReal gconst5=((1.0)*r20*x9917);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x9919=((-1.0)*r21);
CheckValue<IkReal> x9922 = IKatan2WithCheck(IkReal(x9919),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9922.valid){
continue;
}
IkReal x9920=((1.0)*(x9922.value));
IkReal x9921=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x9920)));
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9920)));
IkReal gconst4=(x9919*x9921);
IkReal gconst5=((1.0)*r20*x9921);
j14eval[0]=r02;
j14eval[1]=sj13;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
IkReal x9923=((-1.0)*r21);
CheckValue<IkReal> x9926 = IKatan2WithCheck(IkReal(x9923),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9926.valid){
continue;
}
IkReal x9924=((1.0)*(x9926.value));
IkReal x9925=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x9924)));
sj10=0;
cj10=1.0;
j10=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9924)));
IkReal gconst4=(x9923*x9925);
IkReal gconst5=((1.0)*r20*x9925);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=r02;
j14eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9927=((-1.0)*r21);
CheckValue<IkReal> x9930 = IKatan2WithCheck(IkReal(x9927),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9930.valid){
continue;
}
IkReal x9928=((1.0)*(x9930.value));
IkReal x9929=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x9928)));
sj10=0;
cj10=1.0;
j10=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9928)));
IkReal gconst4=(x9927*x9929);
IkReal gconst5=((1.0)*r20*x9929);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x9931=((-1.0)*r21);
CheckValue<IkReal> x9934 = IKatan2WithCheck(IkReal(x9931),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9934.valid){
continue;
}
IkReal x9932=((1.0)*(x9934.value));
IkReal x9933=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x9932)));
sj10=0;
cj10=1.0;
j10=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9932)));
IkReal gconst4=(x9931*x9933);
IkReal gconst5=((1.0)*r20*x9933);
j14eval[0]=r12;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9935=(gconst5*r10);
IkReal x9936=(gconst4*r11);
CheckValue<IkReal> x9937 = IKatan2WithCheck(IkReal(((((-1.0)*x9936))+x9935)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9937.valid){
continue;
}
CheckValue<IkReal> x9938=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9935*x9936))+(x9936*x9936)+(x9935*x9935))),-1);
if(!x9938.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9937.value)+(((1.5707963267949)*(x9938.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9939=IKsin(j14);
IkReal x9940=IKcos(j14);
IkReal x9941=((1.0)*cj11);
IkReal x9942=(gconst4*r21);
IkReal x9943=(gconst5*r00);
IkReal x9944=(gconst4*r01);
IkReal x9945=(gconst5*r10);
IkReal x9946=(gconst5*r20);
IkReal x9947=(gconst4*r11);
IkReal x9948=((1.0)*x9940);
IkReal x9949=((1.0)*x9939);
evalcond[0]=((((-1.0)*r22*x9948))+((x9939*x9942))+(((-1.0)*x9946*x9949)));
evalcond[1]=((((-1.0)*x9943*x9949))+(((-1.0)*r02*x9948))+((x9939*x9944)));
evalcond[2]=((((-1.0)*x9947*x9948))+(((-1.0)*r12*x9949))+((x9940*x9945)));
evalcond[3]=((1.0)+(((-1.0)*x9945*x9949))+(((-1.0)*r12*x9948))+((x9939*x9947)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r22*x9949))+(((-1.0)*cj12*x9941))+((x9940*x9946))+(((-1.0)*x9942*x9948)));
evalcond[5]=((((-1.0)*sj12*x9941))+(((-1.0)*x9944*x9948))+(((-1.0)*cj12*sj11))+((x9940*x9943))+(((-1.0)*r02*x9949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9950=((1.0)*gconst5);
CheckValue<IkReal> x9951=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9950)))),-1);
if(!x9951.valid){
continue;
}
CheckValue<IkReal> x9952 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9950))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9952.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9951.value)))+(x9952.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9953=IKsin(j14);
IkReal x9954=IKcos(j14);
IkReal x9955=((1.0)*cj11);
IkReal x9956=(gconst4*r21);
IkReal x9957=(gconst5*r00);
IkReal x9958=(gconst4*r01);
IkReal x9959=(gconst5*r10);
IkReal x9960=(gconst5*r20);
IkReal x9961=(gconst4*r11);
IkReal x9962=((1.0)*x9954);
IkReal x9963=((1.0)*x9953);
evalcond[0]=((((-1.0)*x9960*x9963))+((x9953*x9956))+(((-1.0)*r22*x9962)));
evalcond[1]=((((-1.0)*x9957*x9963))+((x9953*x9958))+(((-1.0)*r02*x9962)));
evalcond[2]=((((-1.0)*x9961*x9962))+(((-1.0)*r12*x9963))+((x9954*x9959)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9962))+((x9953*x9961))+(((-1.0)*x9959*x9963)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x9956*x9962))+(((-1.0)*r22*x9963))+((x9954*x9960))+(((-1.0)*cj12*x9955)));
evalcond[5]=((((-1.0)*sj12*x9955))+((x9954*x9957))+(((-1.0)*cj12*sj11))+(((-1.0)*r02*x9963))+(((-1.0)*x9958*x9962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x9964 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9964.valid){
continue;
}
CheckValue<IkReal> x9965=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9965.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9964.value)+(((1.5707963267949)*(x9965.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9966=IKsin(j14);
IkReal x9967=IKcos(j14);
IkReal x9968=((1.0)*cj11);
IkReal x9969=(gconst4*r21);
IkReal x9970=(gconst5*r00);
IkReal x9971=(gconst4*r01);
IkReal x9972=(gconst5*r10);
IkReal x9973=(gconst5*r20);
IkReal x9974=(gconst4*r11);
IkReal x9975=((1.0)*x9967);
IkReal x9976=((1.0)*x9966);
evalcond[0]=(((x9966*x9969))+(((-1.0)*r22*x9975))+(((-1.0)*x9973*x9976)));
evalcond[1]=((((-1.0)*r02*x9975))+(((-1.0)*x9970*x9976))+((x9966*x9971)));
evalcond[2]=((((-1.0)*r12*x9976))+(((-1.0)*x9974*x9975))+((x9967*x9972)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9975))+((x9966*x9974))+(((-1.0)*x9972*x9976)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x9968))+(((-1.0)*x9969*x9975))+(((-1.0)*r22*x9976))+((x9967*x9973)));
evalcond[5]=((((-1.0)*r02*x9976))+(((-1.0)*cj12*sj11))+(((-1.0)*x9971*x9975))+(((-1.0)*sj12*x9968))+((x9967*x9970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
IkReal x9977=((-1.0)*r21);
CheckValue<IkReal> x9980 = IKatan2WithCheck(IkReal(x9977),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9980.valid){
continue;
}
IkReal x9978=((1.0)*(x9980.value));
IkReal x9979=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x9978)));
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9978)));
IkReal gconst4=(x9977*x9979);
IkReal gconst5=((1.0)*r20*x9979);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=r02;
j14eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9981=((-1.0)*r21);
CheckValue<IkReal> x9984 = IKatan2WithCheck(IkReal(x9981),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9984.valid){
continue;
}
IkReal x9982=((1.0)*(x9984.value));
IkReal x9983=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x9982)));
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9982)));
IkReal gconst4=(x9981*x9983);
IkReal gconst5=((1.0)*r20*x9983);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x9985=((-1.0)*r21);
CheckValue<IkReal> x9988 = IKatan2WithCheck(IkReal(x9985),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9988.valid){
continue;
}
IkReal x9986=((1.0)*(x9988.value));
IkReal x9987=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x9986)));
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9986)));
IkReal gconst4=(x9985*x9987);
IkReal gconst5=((1.0)*r20*x9987);
IkReal x9989=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9993=IKPowWithIntegerCheck(x9989,-1);
if(!x9993.valid){
continue;
}
IkReal x9990=x9993.value;
IkReal x9991=((1.0)*x9990);
IkReal x9992=((((-1.0)*x9991*(r11*r11)*(r21*r21)))+(((-1.0)*x9991*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x9990))+(((-1.0)*(r12*r12))));
j14eval[0]=x9992;
j14eval[1]=r12;
j14eval[2]=x9989;
j14eval[3]=IKsign(x9992);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9994=(gconst5*r10);
IkReal x9995=(gconst4*r11);
CheckValue<IkReal> x9996 = IKatan2WithCheck(IkReal(((((-1.0)*x9994))+x9995)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9996.valid){
continue;
}
CheckValue<IkReal> x9997=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9994*x9994)))+(((-1.0)*(x9995*x9995)))+(((-1.0)*(r12*r12)))+(((2.0)*x9994*x9995)))),-1);
if(!x9997.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9996.value)+(((1.5707963267949)*(x9997.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9998=IKcos(j14);
IkReal x9999=IKsin(j14);
IkReal x10000=((1.0)*cj11);
IkReal x10001=((1.0)*x9998);
IkReal x10002=(gconst4*x9998);
IkReal x10003=(gconst4*x9999);
IkReal x10004=((1.0)*gconst5*x9999);
evalcond[0]=(((r12*x9999))+((r11*x10002))+(((-1.0)*gconst5*r10*x10001)));
evalcond[1]=((((-1.0)*r20*x10004))+(((-1.0)*r22*x10001))+((r21*x10003)));
evalcond[2]=((((-1.0)*r00*x10004))+(((-1.0)*r02*x10001))+((r01*x10003)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10001))+((r11*x10003))+(((-1.0)*r10*x10004)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*gconst5*r20*x10001))+(((-1.0)*cj12*x10000))+((r22*x9999))+((r21*x10002)));
evalcond[5]=((((-1.0)*cj12*sj11))+(((-1.0)*sj12*x10000))+((r01*x10002))+((r02*x9999))+(((-1.0)*gconst5*r00*x10001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10005=((1.0)*gconst5);
CheckValue<IkReal> x10006 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10005))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10006.valid){
continue;
}
CheckValue<IkReal> x10007=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10005)))),-1);
if(!x10007.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10006.value)+(((1.5707963267949)*(x10007.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10008=IKcos(j14);
IkReal x10009=IKsin(j14);
IkReal x10010=((1.0)*cj11);
IkReal x10011=((1.0)*x10008);
IkReal x10012=(gconst4*x10008);
IkReal x10013=(gconst4*x10009);
IkReal x10014=((1.0)*gconst5*x10009);
evalcond[0]=(((r12*x10009))+((r11*x10012))+(((-1.0)*gconst5*r10*x10011)));
evalcond[1]=(((r21*x10013))+(((-1.0)*r20*x10014))+(((-1.0)*r22*x10011)));
evalcond[2]=((((-1.0)*r02*x10011))+((r01*x10013))+(((-1.0)*r00*x10014)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10011))+((r11*x10013))+(((-1.0)*r10*x10014)));
evalcond[4]=(((sj11*sj12))+((r21*x10012))+(((-1.0)*gconst5*r20*x10011))+(((-1.0)*cj12*x10010))+((r22*x10009)));
evalcond[5]=(((r02*x10009))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x10010))+((r01*x10012))+(((-1.0)*gconst5*r00*x10011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10015 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10015.valid){
continue;
}
CheckValue<IkReal> x10016=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10016.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10015.value)+(((1.5707963267949)*(x10016.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10017=IKcos(j14);
IkReal x10018=IKsin(j14);
IkReal x10019=((1.0)*cj11);
IkReal x10020=((1.0)*x10017);
IkReal x10021=(gconst4*x10017);
IkReal x10022=(gconst4*x10018);
IkReal x10023=((1.0)*gconst5*x10018);
evalcond[0]=(((r12*x10018))+(((-1.0)*gconst5*r10*x10020))+((r11*x10021)));
evalcond[1]=(((r21*x10022))+(((-1.0)*r22*x10020))+(((-1.0)*r20*x10023)));
evalcond[2]=((((-1.0)*r02*x10020))+(((-1.0)*r00*x10023))+((r01*x10022)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10020))+(((-1.0)*r10*x10023))+((r11*x10022)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*gconst5*r20*x10020))+(((-1.0)*cj12*x10019))+((r22*x10018))+((r21*x10021)));
evalcond[5]=(((r02*x10018))+(((-1.0)*cj12*sj11))+((r01*x10021))+(((-1.0)*sj12*x10019))+(((-1.0)*gconst5*r00*x10020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
IkReal x10024=((-1.0)*r21);
CheckValue<IkReal> x10027 = IKatan2WithCheck(IkReal(x10024),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10027.valid){
continue;
}
IkReal x10025=((1.0)*(x10027.value));
IkReal x10026=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10025)));
sj10=0;
cj10=1.0;
j10=0;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10025)));
IkReal gconst4=(x10024*x10026);
IkReal gconst5=((1.0)*r20*x10026);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=r02;
j14eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x10028=((-1.0)*r21);
CheckValue<IkReal> x10031 = IKatan2WithCheck(IkReal(x10028),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10031.valid){
continue;
}
IkReal x10029=((1.0)*(x10031.value));
IkReal x10030=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10029)));
sj10=0;
cj10=1.0;
j10=0;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10029)));
IkReal gconst4=(x10028*x10030);
IkReal gconst5=((1.0)*r20*x10030);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10032=((-1.0)*r21);
CheckValue<IkReal> x10035 = IKatan2WithCheck(IkReal(x10032),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10035.valid){
continue;
}
IkReal x10033=((1.0)*(x10035.value));
IkReal x10034=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10033)));
sj10=0;
cj10=1.0;
j10=0;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10033)));
IkReal gconst4=(x10032*x10034);
IkReal gconst5=((1.0)*r20*x10034);
IkReal x10036=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10040=IKPowWithIntegerCheck(x10036,-1);
if(!x10040.valid){
continue;
}
IkReal x10037=x10040.value;
IkReal x10038=((1.0)*x10037);
IkReal x10039=((((-1.0)*x10038*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10038*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10037)));
j14eval[0]=x10039;
j14eval[1]=r12;
j14eval[2]=x10036;
j14eval[3]=IKsign(x10039);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10041=(gconst5*r10);
IkReal x10042=(gconst4*r11);
CheckValue<IkReal> x10043=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10041*x10041)))+(((2.0)*x10041*x10042))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10042*x10042))))),-1);
if(!x10043.valid){
continue;
}
CheckValue<IkReal> x10044 = IKatan2WithCheck(IkReal(((((-1.0)*x10041))+x10042)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10044.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10043.value)))+(x10044.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10045=IKcos(j14);
IkReal x10046=IKsin(j14);
IkReal x10047=((1.0)*x10045);
IkReal x10048=(gconst4*x10045);
IkReal x10049=(gconst4*x10046);
IkReal x10050=((1.0)*gconst5*x10046);
evalcond[0]=(((r12*x10046))+((r11*x10048))+(((-1.0)*gconst5*r10*x10047)));
evalcond[1]=(((r21*x10049))+(((-1.0)*r22*x10047))+(((-1.0)*r20*x10050)));
evalcond[2]=((((-1.0)*r02*x10047))+((r01*x10049))+(((-1.0)*r00*x10050)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10047))+(((-1.0)*r10*x10050))+((r11*x10049)));
evalcond[4]=((((-1.0)*gconst5*r20*x10047))+((r21*x10048))+((cj12*sj11))+((cj11*sj12))+((r22*x10046)));
evalcond[5]=(((sj11*sj12))+((r01*x10048))+(((-1.0)*gconst5*r00*x10047))+(((-1.0)*cj11*cj12))+((r02*x10046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10051=((1.0)*gconst5);
CheckValue<IkReal> x10052=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10051)))),-1);
if(!x10052.valid){
continue;
}
CheckValue<IkReal> x10053 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10051)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10053.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10052.value)))+(x10053.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10054=IKcos(j14);
IkReal x10055=IKsin(j14);
IkReal x10056=((1.0)*x10054);
IkReal x10057=(gconst4*x10054);
IkReal x10058=(gconst4*x10055);
IkReal x10059=((1.0)*gconst5*x10055);
evalcond[0]=(((r11*x10057))+(((-1.0)*gconst5*r10*x10056))+((r12*x10055)));
evalcond[1]=(((r21*x10058))+(((-1.0)*r20*x10059))+(((-1.0)*r22*x10056)));
evalcond[2]=(((r01*x10058))+(((-1.0)*r00*x10059))+(((-1.0)*r02*x10056)));
evalcond[3]=((1.0)+(((-1.0)*r10*x10059))+(((-1.0)*r12*x10056))+((r11*x10058)));
evalcond[4]=((((-1.0)*gconst5*r20*x10056))+((r22*x10055))+((r21*x10057))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r01*x10057))+(((-1.0)*gconst5*r00*x10056))+((r02*x10055))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10060 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10060.valid){
continue;
}
CheckValue<IkReal> x10061=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10061.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10060.value)+(((1.5707963267949)*(x10061.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10062=IKcos(j14);
IkReal x10063=IKsin(j14);
IkReal x10064=((1.0)*x10062);
IkReal x10065=(gconst4*x10062);
IkReal x10066=(gconst4*x10063);
IkReal x10067=((1.0)*gconst5*x10063);
evalcond[0]=(((r12*x10063))+((r11*x10065))+(((-1.0)*gconst5*r10*x10064)));
evalcond[1]=((((-1.0)*r20*x10067))+((r21*x10066))+(((-1.0)*r22*x10064)));
evalcond[2]=(((r01*x10066))+(((-1.0)*r00*x10067))+(((-1.0)*r02*x10064)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10064))+(((-1.0)*r10*x10067))+((r11*x10066)));
evalcond[4]=((((-1.0)*gconst5*r20*x10064))+((r22*x10063))+((cj12*sj11))+((r21*x10065))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*gconst5*r00*x10064))+((r01*x10065))+((r02*x10063))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
IkReal x10068=((-1.0)*r21);
CheckValue<IkReal> x10071 = IKatan2WithCheck(IkReal(x10068),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10071.valid){
continue;
}
IkReal x10069=((1.0)*(x10071.value));
IkReal x10070=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10069)));
sj10=0;
cj10=1.0;
j10=0;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10069)));
IkReal gconst4=(x10068*x10070);
IkReal gconst5=((1.0)*r20*x10070);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=r02;
j14eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x10072=((-1.0)*r21);
CheckValue<IkReal> x10075 = IKatan2WithCheck(IkReal(x10072),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10075.valid){
continue;
}
IkReal x10073=((1.0)*(x10075.value));
IkReal x10074=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10073)));
sj10=0;
cj10=1.0;
j10=0;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10073)));
IkReal gconst4=(x10072*x10074);
IkReal gconst5=((1.0)*r20*x10074);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x10076=((-1.0)*r21);
CheckValue<IkReal> x10079 = IKatan2WithCheck(IkReal(x10076),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10079.valid){
continue;
}
IkReal x10077=((1.0)*(x10079.value));
IkReal x10078=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10077)));
sj10=0;
cj10=1.0;
j10=0;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10077)));
IkReal gconst4=(x10076*x10078);
IkReal gconst5=((1.0)*r20*x10078);
j14eval[0]=r12;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10080=(gconst5*r10);
IkReal x10081=(gconst4*r11);
CheckValue<IkReal> x10082=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10081*x10081)+(((-2.0)*x10080*x10081))+(x10080*x10080))),-1);
if(!x10082.valid){
continue;
}
CheckValue<IkReal> x10083 = IKatan2WithCheck(IkReal((x10080+(((-1.0)*x10081)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10083.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10082.value)))+(x10083.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10084=IKsin(j14);
IkReal x10085=IKcos(j14);
IkReal x10086=(gconst4*r21);
IkReal x10087=(gconst5*r00);
IkReal x10088=(gconst4*r01);
IkReal x10089=(gconst5*r10);
IkReal x10090=(gconst5*r20);
IkReal x10091=(gconst4*r11);
IkReal x10092=((1.0)*x10085);
IkReal x10093=((1.0)*x10084);
evalcond[0]=(((x10084*x10086))+(((-1.0)*x10090*x10093))+(((-1.0)*r22*x10092)));
evalcond[1]=(((x10084*x10088))+(((-1.0)*x10087*x10093))+(((-1.0)*r02*x10092)));
evalcond[2]=(((x10085*x10089))+(((-1.0)*r12*x10093))+(((-1.0)*x10091*x10092)));
evalcond[3]=((1.0)+((x10084*x10091))+(((-1.0)*r12*x10092))+(((-1.0)*x10089*x10093)));
evalcond[4]=(((x10085*x10090))+(((-1.0)*x10086*x10092))+((cj12*sj11))+(((-1.0)*r22*x10093))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x10088*x10092))+((x10085*x10087))+(((-1.0)*r02*x10093))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10094=((1.0)*gconst5);
CheckValue<IkReal> x10095 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10094))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10095.valid){
continue;
}
CheckValue<IkReal> x10096=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10094)))),-1);
if(!x10096.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10095.value)+(((1.5707963267949)*(x10096.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10097=IKsin(j14);
IkReal x10098=IKcos(j14);
IkReal x10099=(gconst4*r21);
IkReal x10100=(gconst5*r00);
IkReal x10101=(gconst4*r01);
IkReal x10102=(gconst5*r10);
IkReal x10103=(gconst5*r20);
IkReal x10104=(gconst4*r11);
IkReal x10105=((1.0)*x10098);
IkReal x10106=((1.0)*x10097);
evalcond[0]=((((-1.0)*x10103*x10106))+(((-1.0)*r22*x10105))+((x10097*x10099)));
evalcond[1]=((((-1.0)*x10100*x10106))+((x10097*x10101))+(((-1.0)*r02*x10105)));
evalcond[2]=((((-1.0)*x10104*x10105))+(((-1.0)*r12*x10106))+((x10098*x10102)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10105))+(((-1.0)*x10102*x10106))+((x10097*x10104)));
evalcond[4]=(((x10098*x10103))+(((-1.0)*r22*x10106))+((cj12*sj11))+(((-1.0)*x10099*x10105))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x10098*x10100))+(((-1.0)*x10101*x10105))+(((-1.0)*r02*x10106))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10107 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10107.valid){
continue;
}
CheckValue<IkReal> x10108=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10108.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10107.value)+(((1.5707963267949)*(x10108.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10109=IKsin(j14);
IkReal x10110=IKcos(j14);
IkReal x10111=(gconst4*r21);
IkReal x10112=(gconst5*r00);
IkReal x10113=(gconst4*r01);
IkReal x10114=(gconst5*r10);
IkReal x10115=(gconst5*r20);
IkReal x10116=(gconst4*r11);
IkReal x10117=((1.0)*x10110);
IkReal x10118=((1.0)*x10109);
evalcond[0]=(((x10109*x10111))+(((-1.0)*r22*x10117))+(((-1.0)*x10115*x10118)));
evalcond[1]=((((-1.0)*x10112*x10118))+((x10109*x10113))+(((-1.0)*r02*x10117)));
evalcond[2]=(((x10110*x10114))+(((-1.0)*r12*x10118))+(((-1.0)*x10116*x10117)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10117))+((x10109*x10116))+(((-1.0)*x10114*x10118)));
evalcond[4]=(((x10110*x10115))+(((-1.0)*r22*x10118))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*x10111*x10117)));
evalcond[5]=(((sj11*sj12))+((x10110*x10112))+(((-1.0)*x10113*x10117))+(((-1.0)*r02*x10118))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j14array[2], cj14array[2], sj14array[2], tempj14array[1];
int numsolutions = 0;
for(int ij14 = 0; ij14 < numroots; ++ij14)
{
IkReal htj14 = zeror[ij14];
tempj14array[0]=((2.0)*(atan(htj14)));
for(int kj14 = 0; kj14 < 1; ++kj14)
{
j14array[numsolutions] = tempj14array[kj14];
if( j14array[numsolutions] > IKPI )
{
    j14array[numsolutions]-=IK2PI;
}
else if( j14array[numsolutions] < -IKPI )
{
    j14array[numsolutions]+=IK2PI;
}
sj14array[numsolutions] = IKsin(j14array[numsolutions]);
cj14array[numsolutions] = IKcos(j14array[numsolutions]);
numsolutions++;
}
}
bool j14valid[2]={true,true};
_nj14 = 2;
for(int ij14 = 0; ij14 < numsolutions; ++ij14)
    {
if( !j14valid[ij14] )
{
    continue;
}
    j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
htj14 = IKtan(j14/2);

_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < numsolutions; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10119=gconst4*gconst4;
IkReal x10120=gconst5*gconst5;
IkReal x10121=(gconst4*r10);
IkReal x10122=(cj13*gconst5);
IkReal x10123=(r22*sj13);
IkReal x10124=(r11*r20);
IkReal x10125=(gconst5*r11);
IkReal x10126=((1.0)*cj13);
IkReal x10127=((1.0)*sj13);
IkReal x10128=(r21*x10119);
CheckValue<IkReal> x10129=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x10120*x10126))+(((-1.0)*r11*x10126*x10128))+((gconst4*x10122*x10124))+((r21*x10121*x10122))+(((-1.0)*r12*r22*x10126)))),-1);
if(!x10129.valid){
continue;
}
CheckValue<IkReal> x10130 = IKatan2WithCheck(IkReal((((x10121*x10123))+((x10123*x10125)))),IkReal((((r10*sj13*x10128))+((gconst4*r21*sj13*x10125))+(((-1.0)*gconst5*r20*x10121*x10127))+(((-1.0)*x10120*x10124*x10127)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10130.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10129.value)))+(x10130.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x10131=IKsin(j14);
IkReal x10132=IKcos(j14);
IkReal x10133=(sj11*sj12);
IkReal x10134=(r21*sj13);
IkReal x10135=(gconst5*sj13);
IkReal x10136=((1.0)*cj11);
IkReal x10137=(gconst5*r00);
IkReal x10138=(cj13*gconst5);
IkReal x10139=(gconst4*sj13);
IkReal x10140=(cj12*sj11);
IkReal x10141=(cj13*gconst4);
IkReal x10142=(cj12*x10136);
IkReal x10143=((1.0)*x10132);
IkReal x10144=((1.0)*x10131);
IkReal x10145=(gconst4*x10131);
IkReal x10146=(cj13*x10131);
evalcond[0]=(((r21*x10145))+(((-1.0)*r22*x10143))+(((-1.0)*gconst5*r20*x10144)));
evalcond[1]=((((-1.0)*r02*x10143))+(((-1.0)*x10137*x10144))+((r01*x10145)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10144))+(((-1.0)*r12*x10143))+((r11*x10145)));
evalcond[3]=(((r11*x10135))+((r12*x10146))+(((-1.0)*r10*x10138*x10143))+((r10*x10139))+((r11*x10132*x10141)));
evalcond[4]=(((r11*x10138))+((r10*x10141))+(((-1.0)*r12*sj13*x10144))+((r10*x10132*x10135))+(((-1.0)*r11*x10139*x10143)));
evalcond[5]=(((r20*x10139))+((gconst5*x10134))+(((-1.0)*r20*x10138*x10143))+x10140+((r22*x10146))+((r21*x10132*x10141))+((cj11*sj12)));
evalcond[6]=(((r02*x10146))+x10133+(((-1.0)*cj13*x10137*x10143))+((r01*x10135))+(((-1.0)*x10142))+((r00*x10139))+((r01*x10132*x10141)));
evalcond[7]=(((r21*x10138))+((r20*x10132*x10135))+x10133+(((-1.0)*x10142))+(((-1.0)*gconst4*x10134*x10143))+(((-1.0)*r22*sj13*x10144))+((r20*x10141)));
evalcond[8]=(((r00*x10132*x10135))+(((-1.0)*sj12*x10136))+(((-1.0)*r02*sj13*x10144))+(((-1.0)*r01*x10139*x10143))+((r01*x10138))+(((-1.0)*x10140))+((r00*x10141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10147=((1.0)*gconst5);
CheckValue<IkReal> x10148 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10147))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10148.valid){
continue;
}
CheckValue<IkReal> x10149=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10147)))),-1);
if(!x10149.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10148.value)+(((1.5707963267949)*(x10149.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x10150=IKsin(j14);
IkReal x10151=IKcos(j14);
IkReal x10152=(sj11*sj12);
IkReal x10153=(r21*sj13);
IkReal x10154=(gconst5*sj13);
IkReal x10155=((1.0)*cj11);
IkReal x10156=(gconst5*r00);
IkReal x10157=(cj13*gconst5);
IkReal x10158=(gconst4*sj13);
IkReal x10159=(cj12*sj11);
IkReal x10160=(cj13*gconst4);
IkReal x10161=(cj12*x10155);
IkReal x10162=((1.0)*x10151);
IkReal x10163=((1.0)*x10150);
IkReal x10164=(gconst4*x10150);
IkReal x10165=(cj13*x10150);
evalcond[0]=((((-1.0)*r22*x10162))+(((-1.0)*gconst5*r20*x10163))+((r21*x10164)));
evalcond[1]=((((-1.0)*x10156*x10163))+((r01*x10164))+(((-1.0)*r02*x10162)));
evalcond[2]=((1.0)+(((-1.0)*r12*x10162))+((r11*x10164))+(((-1.0)*gconst5*r10*x10163)));
evalcond[3]=(((r11*x10151*x10160))+((r10*x10158))+((r12*x10165))+((r11*x10154))+(((-1.0)*r10*x10157*x10162)));
evalcond[4]=(((r10*x10160))+(((-1.0)*r12*sj13*x10163))+(((-1.0)*r11*x10158*x10162))+((r10*x10151*x10154))+((r11*x10157)));
evalcond[5]=(((gconst5*x10153))+((r22*x10165))+(((-1.0)*r20*x10157*x10162))+((r21*x10151*x10160))+x10159+((r20*x10158))+((cj11*sj12)));
evalcond[6]=((((-1.0)*x10161))+x10152+((r02*x10165))+((r01*x10154))+((r00*x10158))+(((-1.0)*cj13*x10156*x10162))+((r01*x10151*x10160)));
evalcond[7]=((((-1.0)*x10161))+((r21*x10157))+(((-1.0)*r22*sj13*x10163))+((r20*x10160))+(((-1.0)*gconst4*x10153*x10162))+x10152+((r20*x10151*x10154)));
evalcond[8]=((((-1.0)*r02*sj13*x10163))+((r00*x10151*x10154))+((r00*x10160))+(((-1.0)*sj12*x10155))+(((-1.0)*r01*x10158*x10162))+(((-1.0)*x10159))+((r01*x10157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10166 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10166.valid){
continue;
}
CheckValue<IkReal> x10167=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10167.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10166.value)+(((1.5707963267949)*(x10167.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x10168=IKsin(j14);
IkReal x10169=IKcos(j14);
IkReal x10170=(sj11*sj12);
IkReal x10171=(r21*sj13);
IkReal x10172=(gconst5*sj13);
IkReal x10173=((1.0)*cj11);
IkReal x10174=(gconst5*r00);
IkReal x10175=(cj13*gconst5);
IkReal x10176=(gconst4*sj13);
IkReal x10177=(cj12*sj11);
IkReal x10178=(cj13*gconst4);
IkReal x10179=(cj12*x10173);
IkReal x10180=((1.0)*x10169);
IkReal x10181=((1.0)*x10168);
IkReal x10182=(gconst4*x10168);
IkReal x10183=(cj13*x10168);
evalcond[0]=(((r21*x10182))+(((-1.0)*r22*x10180))+(((-1.0)*gconst5*r20*x10181)));
evalcond[1]=((((-1.0)*x10174*x10181))+(((-1.0)*r02*x10180))+((r01*x10182)));
evalcond[2]=((1.0)+((r11*x10182))+(((-1.0)*r12*x10180))+(((-1.0)*gconst5*r10*x10181)));
evalcond[3]=(((r10*x10176))+((r11*x10172))+((r11*x10169*x10178))+((r12*x10183))+(((-1.0)*r10*x10175*x10180)));
evalcond[4]=(((r10*x10178))+((r11*x10175))+(((-1.0)*r11*x10176*x10180))+(((-1.0)*r12*sj13*x10181))+((r10*x10169*x10172)));
evalcond[5]=(((r21*x10169*x10178))+((r22*x10183))+(((-1.0)*r20*x10175*x10180))+x10177+((r20*x10176))+((cj11*sj12))+((gconst5*x10171)));
evalcond[6]=(((r02*x10183))+((r00*x10176))+x10170+((r01*x10172))+(((-1.0)*x10179))+(((-1.0)*cj13*x10174*x10180))+((r01*x10169*x10178)));
evalcond[7]=((((-1.0)*gconst4*x10171*x10180))+((r20*x10169*x10172))+x10170+((r21*x10175))+(((-1.0)*x10179))+(((-1.0)*r22*sj13*x10181))+((r20*x10178)));
evalcond[8]=((((-1.0)*r01*x10176*x10180))+(((-1.0)*x10177))+((r00*x10169*x10172))+((r00*x10178))+(((-1.0)*sj12*x10173))+((r01*x10175))+(((-1.0)*r02*sj13*x10181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x10184=((-1.0)*r21);
CheckValue<IkReal> x10187 = IKatan2WithCheck(IkReal(x10184),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10187.valid){
continue;
}
IkReal x10185=((1.0)*(x10187.value));
IkReal x10186=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10185)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10185)));
IkReal gconst4=(x10184*x10186);
IkReal gconst5=((1.0)*r20*x10186);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10188=((-1.0)*r21);
CheckValue<IkReal> x10191 = IKatan2WithCheck(IkReal(x10188),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10191.valid){
continue;
}
IkReal x10189=((1.0)*(x10191.value));
IkReal x10190=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10189)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10189)));
IkReal gconst4=(x10188*x10190);
IkReal gconst5=((1.0)*r20*x10190);
j14eval[0]=0;
j14eval[1]=r02;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x10192=((-1.0)*r21);
CheckValue<IkReal> x10195 = IKatan2WithCheck(IkReal(x10192),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10195.valid){
continue;
}
IkReal x10193=((1.0)*(x10195.value));
IkReal x10194=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10193)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10193)));
IkReal gconst4=(x10192*x10194);
IkReal gconst5=((1.0)*r20*x10194);
j14eval[0]=r02;
j14eval[1]=sj13;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x10196=((-1.0)*r21);
CheckValue<IkReal> x10199 = IKatan2WithCheck(IkReal(x10196),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10199.valid){
continue;
}
IkReal x10197=((1.0)*(x10199.value));
IkReal x10198=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10197)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10197)));
IkReal gconst4=(x10196*x10198);
IkReal gconst5=((1.0)*r20*x10198);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10200=((-1.0)*r21);
CheckValue<IkReal> x10203 = IKatan2WithCheck(IkReal(x10200),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10203.valid){
continue;
}
IkReal x10201=((1.0)*(x10203.value));
IkReal x10202=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10201)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10201)));
IkReal gconst4=(x10200*x10202);
IkReal gconst5=((1.0)*r20*x10202);
j14eval[0]=0;
j14eval[1]=r02;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10204=((-1.0)*r21);
CheckValue<IkReal> x10207 = IKatan2WithCheck(IkReal(x10204),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10207.valid){
continue;
}
IkReal x10205=((1.0)*(x10207.value));
IkReal x10206=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10205)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10205)));
IkReal gconst4=(x10204*x10206);
IkReal gconst5=((1.0)*r20*x10206);
IkReal x10208=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10212=IKPowWithIntegerCheck(x10208,-1);
if(!x10212.valid){
continue;
}
IkReal x10209=x10212.value;
IkReal x10210=((1.0)*x10209);
IkReal x10211=((((-2.0)*r10*r11*r20*r21*x10209))+(((-1.0)*(r12*r12)))+(((-1.0)*x10210*(r11*r11)*(r21*r21)))+(((-1.0)*x10210*(r10*r10)*(r20*r20))));
j14eval[0]=x10211;
j14eval[1]=r12;
j14eval[2]=x10208;
j14eval[3]=IKsign(x10211);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10213=(gconst5*r10);
IkReal x10214=(gconst4*r11);
CheckValue<IkReal> x10215 = IKatan2WithCheck(IkReal((x10213+(((-1.0)*x10214)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10215.valid){
continue;
}
CheckValue<IkReal> x10216=IKPowWithIntegerCheck(IKsign(((((2.0)*x10213*x10214))+(((-1.0)*(x10213*x10213)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10214*x10214))))),-1);
if(!x10216.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10215.value)+(((1.5707963267949)*(x10216.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10217=IKsin(j14);
IkReal x10218=IKcos(j14);
IkReal x10219=(gconst4*r21);
IkReal x10220=(gconst5*r00);
IkReal x10221=(gconst4*r01);
IkReal x10222=(gconst5*r10);
IkReal x10223=(gconst5*r20);
IkReal x10224=(gconst4*r11);
IkReal x10225=((1.0)*x10218);
IkReal x10226=((1.0)*x10217);
evalcond[0]=(((x10217*x10219))+(((-1.0)*r22*x10225))+(((-1.0)*x10223*x10226)));
evalcond[1]=((((-1.0)*x10220*x10226))+(((-1.0)*r02*x10225))+((x10217*x10221)));
evalcond[2]=((((-1.0)*x10224*x10225))+((x10218*x10222))+(((-1.0)*r12*x10226)));
evalcond[3]=((-1.0)+(((-1.0)*x10222*x10226))+(((-1.0)*r12*x10225))+((x10217*x10224)));
evalcond[4]=((((-1.0)*r02*x10226))+((x10218*x10220))+(((-1.0)*x10221*x10225))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x10218*x10223))+(((-1.0)*x10219*x10225))+(((-1.0)*r22*x10226))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10227=((1.0)*gconst5);
CheckValue<IkReal> x10228 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10227)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10228.valid){
continue;
}
CheckValue<IkReal> x10229=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10227))+(((-1.0)*gconst4*r20)))),-1);
if(!x10229.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10228.value)+(((1.5707963267949)*(x10229.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10230=IKsin(j14);
IkReal x10231=IKcos(j14);
IkReal x10232=(gconst4*r21);
IkReal x10233=(gconst5*r00);
IkReal x10234=(gconst4*r01);
IkReal x10235=(gconst5*r10);
IkReal x10236=(gconst5*r20);
IkReal x10237=(gconst4*r11);
IkReal x10238=((1.0)*x10231);
IkReal x10239=((1.0)*x10230);
evalcond[0]=(((x10230*x10232))+(((-1.0)*x10236*x10239))+(((-1.0)*r22*x10238)));
evalcond[1]=((((-1.0)*x10233*x10239))+((x10230*x10234))+(((-1.0)*r02*x10238)));
evalcond[2]=((((-1.0)*x10237*x10238))+((x10231*x10235))+(((-1.0)*r12*x10239)));
evalcond[3]=((-1.0)+((x10230*x10237))+(((-1.0)*x10235*x10239))+(((-1.0)*r12*x10238)));
evalcond[4]=((((-1.0)*x10234*x10238))+((cj12*sj11))+((x10231*x10233))+((cj11*sj12))+(((-1.0)*r02*x10239)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x10232*x10238))+((x10231*x10236))+(((-1.0)*r22*x10239))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10240=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10240.valid){
continue;
}
CheckValue<IkReal> x10241 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10241.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10240.value)))+(x10241.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10242=IKsin(j14);
IkReal x10243=IKcos(j14);
IkReal x10244=(gconst4*r21);
IkReal x10245=(gconst5*r00);
IkReal x10246=(gconst4*r01);
IkReal x10247=(gconst5*r10);
IkReal x10248=(gconst5*r20);
IkReal x10249=(gconst4*r11);
IkReal x10250=((1.0)*x10243);
IkReal x10251=((1.0)*x10242);
evalcond[0]=(((x10242*x10244))+(((-1.0)*x10248*x10251))+(((-1.0)*r22*x10250)));
evalcond[1]=((((-1.0)*r02*x10250))+((x10242*x10246))+(((-1.0)*x10245*x10251)));
evalcond[2]=(((x10243*x10247))+(((-1.0)*r12*x10251))+(((-1.0)*x10249*x10250)));
evalcond[3]=((-1.0)+((x10242*x10249))+(((-1.0)*x10247*x10251))+(((-1.0)*r12*x10250)));
evalcond[4]=(((x10243*x10245))+(((-1.0)*r02*x10251))+(((-1.0)*x10246*x10250))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x10243*x10248))+(((-1.0)*r22*x10251))+(((-1.0)*x10244*x10250))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x10252=((-1.0)*r21);
CheckValue<IkReal> x10255 = IKatan2WithCheck(IkReal(x10252),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10255.valid){
continue;
}
IkReal x10253=((1.0)*(x10255.value));
IkReal x10254=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10253)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10253)));
IkReal gconst4=(x10252*x10254);
IkReal gconst5=((1.0)*r20*x10254);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10256=((-1.0)*r21);
CheckValue<IkReal> x10259 = IKatan2WithCheck(IkReal(x10256),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10259.valid){
continue;
}
IkReal x10257=((1.0)*(x10259.value));
IkReal x10258=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10257)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10257)));
IkReal gconst4=(x10256*x10258);
IkReal gconst5=((1.0)*r20*x10258);
j14eval[0]=0;
j14eval[1]=r02;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x10260=((-1.0)*r21);
CheckValue<IkReal> x10263 = IKatan2WithCheck(IkReal(x10260),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10263.valid){
continue;
}
IkReal x10261=((1.0)*(x10263.value));
IkReal x10262=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10261)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10261)));
IkReal gconst4=(x10260*x10262);
IkReal gconst5=((1.0)*r20*x10262);
j14eval[0]=r12;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10264=(gconst5*r10);
IkReal x10265=(gconst4*r11);
CheckValue<IkReal> x10266 = IKatan2WithCheck(IkReal(((((-1.0)*x10264))+x10265)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10266.valid){
continue;
}
CheckValue<IkReal> x10267=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10264*x10264)+(((-2.0)*x10264*x10265))+(x10265*x10265))),-1);
if(!x10267.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10266.value)+(((1.5707963267949)*(x10267.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10268=IKcos(j14);
IkReal x10269=IKsin(j14);
IkReal x10270=((1.0)*x10268);
IkReal x10271=(gconst4*x10268);
IkReal x10272=(gconst4*x10269);
IkReal x10273=((1.0)*gconst5*x10269);
evalcond[0]=((((-1.0)*gconst5*r10*x10270))+((r12*x10269))+((r11*x10271)));
evalcond[1]=((((-1.0)*r22*x10270))+((r21*x10272))+(((-1.0)*r20*x10273)));
evalcond[2]=(((r01*x10272))+(((-1.0)*r00*x10273))+(((-1.0)*r02*x10270)));
evalcond[3]=((-1.0)+((r11*x10272))+(((-1.0)*r10*x10273))+(((-1.0)*r12*x10270)));
evalcond[4]=((((-1.0)*gconst5*r00*x10270))+((r02*x10269))+((r01*x10271))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r22*x10269))+(((-1.0)*gconst5*r20*x10270))+((r21*x10271))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10274=((1.0)*gconst5);
CheckValue<IkReal> x10275 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10274))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10275.valid){
continue;
}
CheckValue<IkReal> x10276=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10274))+(((-1.0)*gconst4*r20)))),-1);
if(!x10276.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10275.value)+(((1.5707963267949)*(x10276.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10277=IKcos(j14);
IkReal x10278=IKsin(j14);
IkReal x10279=((1.0)*x10277);
IkReal x10280=(gconst4*x10277);
IkReal x10281=(gconst4*x10278);
IkReal x10282=((1.0)*gconst5*x10278);
evalcond[0]=((((-1.0)*gconst5*r10*x10279))+((r12*x10278))+((r11*x10280)));
evalcond[1]=((((-1.0)*r22*x10279))+((r21*x10281))+(((-1.0)*r20*x10282)));
evalcond[2]=(((r01*x10281))+(((-1.0)*r02*x10279))+(((-1.0)*r00*x10282)));
evalcond[3]=((-1.0)+((r11*x10281))+(((-1.0)*r12*x10279))+(((-1.0)*r10*x10282)));
evalcond[4]=((((-1.0)*gconst5*r00*x10279))+((r01*x10280))+((cj12*sj11))+((r02*x10278))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*gconst5*r20*x10279))+((r21*x10280))+(((-1.0)*cj11*cj12))+((r22*x10278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10283=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10283.valid){
continue;
}
CheckValue<IkReal> x10284 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10284.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10283.value)))+(x10284.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10285=IKcos(j14);
IkReal x10286=IKsin(j14);
IkReal x10287=((1.0)*x10285);
IkReal x10288=(gconst4*x10285);
IkReal x10289=(gconst4*x10286);
IkReal x10290=((1.0)*gconst5*x10286);
evalcond[0]=((((-1.0)*gconst5*r10*x10287))+((r11*x10288))+((r12*x10286)));
evalcond[1]=((((-1.0)*r22*x10287))+((r21*x10289))+(((-1.0)*r20*x10290)));
evalcond[2]=(((r01*x10289))+(((-1.0)*r00*x10290))+(((-1.0)*r02*x10287)));
evalcond[3]=((-1.0)+((r11*x10289))+(((-1.0)*r12*x10287))+(((-1.0)*r10*x10290)));
evalcond[4]=(((r01*x10288))+(((-1.0)*gconst5*r00*x10287))+((r02*x10286))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*gconst5*r20*x10287))+((r22*x10286))+((r21*x10288))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x10291=((-1.0)*r21);
CheckValue<IkReal> x10294 = IKatan2WithCheck(IkReal(x10291),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10294.valid){
continue;
}
IkReal x10292=((1.0)*(x10294.value));
IkReal x10293=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10292)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10292)));
IkReal gconst4=(x10291*x10293);
IkReal gconst5=((1.0)*r20*x10293);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10295=((-1.0)*r21);
CheckValue<IkReal> x10298 = IKatan2WithCheck(IkReal(x10295),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10298.valid){
continue;
}
IkReal x10296=((1.0)*(x10298.value));
IkReal x10297=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10296)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10296)));
IkReal gconst4=(x10295*x10297);
IkReal gconst5=((1.0)*r20*x10297);
j14eval[0]=0;
j14eval[1]=r02;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x10299=((-1.0)*r21);
CheckValue<IkReal> x10302 = IKatan2WithCheck(IkReal(x10299),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10302.valid){
continue;
}
IkReal x10300=((1.0)*(x10302.value));
IkReal x10301=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10300)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10300)));
IkReal gconst4=(x10299*x10301);
IkReal gconst5=((1.0)*r20*x10301);
j14eval[0]=r12;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10303=(gconst5*r10);
IkReal x10304=(gconst4*r11);
CheckValue<IkReal> x10305=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10303*x10303)+(((-2.0)*x10303*x10304))+(x10304*x10304))),-1);
if(!x10305.valid){
continue;
}
CheckValue<IkReal> x10306 = IKatan2WithCheck(IkReal(((((-1.0)*x10303))+x10304)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10306.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10305.value)))+(x10306.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10307=IKcos(j14);
IkReal x10308=IKsin(j14);
IkReal x10309=((1.0)*x10307);
IkReal x10310=(gconst4*x10307);
IkReal x10311=(gconst4*x10308);
IkReal x10312=((1.0)*gconst5*x10308);
evalcond[0]=((((-1.0)*gconst5*r10*x10309))+((r11*x10310))+((r12*x10308)));
evalcond[1]=((((-1.0)*r22*x10309))+((r21*x10311))+(((-1.0)*r20*x10312)));
evalcond[2]=(((r01*x10311))+(((-1.0)*r02*x10309))+(((-1.0)*r00*x10312)));
evalcond[3]=((-1.0)+((r11*x10311))+(((-1.0)*r12*x10309))+(((-1.0)*r10*x10312)));
evalcond[4]=((((-1.0)*gconst5*r20*x10309))+((r21*x10310))+((cj12*sj11))+((cj11*sj12))+((r22*x10308)));
evalcond[5]=(((r02*x10308))+((r01*x10310))+(((-1.0)*gconst5*r00*x10309))+(((-1.0)*sj11*sj12))+((cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10313=((1.0)*gconst5);
CheckValue<IkReal> x10314=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10313))+(((-1.0)*gconst4*r20)))),-1);
if(!x10314.valid){
continue;
}
CheckValue<IkReal> x10315 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10313)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10315.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10314.value)))+(x10315.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10316=IKcos(j14);
IkReal x10317=IKsin(j14);
IkReal x10318=((1.0)*x10316);
IkReal x10319=(gconst4*x10316);
IkReal x10320=(gconst4*x10317);
IkReal x10321=((1.0)*gconst5*x10317);
evalcond[0]=(((r11*x10319))+((r12*x10317))+(((-1.0)*gconst5*r10*x10318)));
evalcond[1]=(((r21*x10320))+(((-1.0)*r22*x10318))+(((-1.0)*r20*x10321)));
evalcond[2]=((((-1.0)*r00*x10321))+((r01*x10320))+(((-1.0)*r02*x10318)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10318))+((r11*x10320))+(((-1.0)*r10*x10321)));
evalcond[4]=(((r21*x10319))+((r22*x10317))+(((-1.0)*gconst5*r20*x10318))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((r01*x10319))+(((-1.0)*sj11*sj12))+((cj11*cj12))+((r02*x10317))+(((-1.0)*gconst5*r00*x10318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10322=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10322.valid){
continue;
}
CheckValue<IkReal> x10323 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10323.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10322.value)))+(x10323.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10324=IKcos(j14);
IkReal x10325=IKsin(j14);
IkReal x10326=((1.0)*x10324);
IkReal x10327=(gconst4*x10324);
IkReal x10328=(gconst4*x10325);
IkReal x10329=((1.0)*gconst5*x10325);
evalcond[0]=((((-1.0)*gconst5*r10*x10326))+((r12*x10325))+((r11*x10327)));
evalcond[1]=((((-1.0)*r22*x10326))+((r21*x10328))+(((-1.0)*r20*x10329)));
evalcond[2]=((((-1.0)*r02*x10326))+(((-1.0)*r00*x10329))+((r01*x10328)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10326))+((r11*x10328))+(((-1.0)*r10*x10329)));
evalcond[4]=(((r22*x10325))+(((-1.0)*gconst5*r20*x10326))+((r21*x10327))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((r02*x10325))+(((-1.0)*gconst5*r00*x10326))+((cj11*cj12))+((r01*x10327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x10330=((-1.0)*r21);
CheckValue<IkReal> x10333 = IKatan2WithCheck(IkReal(x10330),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10333.valid){
continue;
}
IkReal x10331=((1.0)*(x10333.value));
IkReal x10332=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10331)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10331)));
IkReal gconst4=(x10330*x10332);
IkReal gconst5=((1.0)*r20*x10332);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10334=((-1.0)*r21);
CheckValue<IkReal> x10337 = IKatan2WithCheck(IkReal(x10334),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10337.valid){
continue;
}
IkReal x10335=((1.0)*(x10337.value));
IkReal x10336=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10335)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10335)));
IkReal gconst4=(x10334*x10336);
IkReal gconst5=((1.0)*r20*x10336);
j14eval[0]=0;
j14eval[1]=r02;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10338=((-1.0)*r21);
CheckValue<IkReal> x10341 = IKatan2WithCheck(IkReal(x10338),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10341.valid){
continue;
}
IkReal x10339=((1.0)*(x10341.value));
IkReal x10340=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10339)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10339)));
IkReal gconst4=(x10338*x10340);
IkReal gconst5=((1.0)*r20*x10340);
IkReal x10342=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10346=IKPowWithIntegerCheck(x10342,-1);
if(!x10346.valid){
continue;
}
IkReal x10343=x10346.value;
IkReal x10344=((1.0)*x10343);
IkReal x10345=((((-2.0)*r10*r11*r20*r21*x10343))+(((-1.0)*x10344*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10344*(r10*r10)*(r20*r20))));
j14eval[0]=x10345;
j14eval[1]=r12;
j14eval[2]=x10342;
j14eval[3]=IKsign(x10345);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10347=(gconst5*r10);
IkReal x10348=(gconst4*r11);
CheckValue<IkReal> x10349 = IKatan2WithCheck(IkReal((x10347+(((-1.0)*x10348)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10349.valid){
continue;
}
CheckValue<IkReal> x10350=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10347*x10347)))+(((2.0)*x10347*x10348))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10348*x10348))))),-1);
if(!x10350.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10349.value)+(((1.5707963267949)*(x10350.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10351=IKsin(j14);
IkReal x10352=IKcos(j14);
IkReal x10353=(gconst4*r21);
IkReal x10354=(gconst5*r00);
IkReal x10355=(gconst4*r01);
IkReal x10356=(gconst5*r10);
IkReal x10357=(gconst5*r20);
IkReal x10358=(gconst4*r11);
IkReal x10359=((1.0)*x10352);
IkReal x10360=((1.0)*x10351);
evalcond[0]=(((x10351*x10353))+(((-1.0)*x10357*x10360))+(((-1.0)*r22*x10359)));
evalcond[1]=((((-1.0)*x10354*x10360))+((x10351*x10355))+(((-1.0)*r02*x10359)));
evalcond[2]=(((x10352*x10356))+(((-1.0)*x10358*x10359))+(((-1.0)*r12*x10360)));
evalcond[3]=((-1.0)+(((-1.0)*x10356*x10360))+((x10351*x10358))+(((-1.0)*r12*x10359)));
evalcond[4]=(((x10352*x10357))+((cj12*sj11))+(((-1.0)*x10353*x10359))+((cj11*sj12))+(((-1.0)*r22*x10360)));
evalcond[5]=(((x10352*x10354))+(((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*r02*x10360))+(((-1.0)*x10355*x10359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10361=((1.0)*gconst5);
CheckValue<IkReal> x10362 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10361)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10362.valid){
continue;
}
CheckValue<IkReal> x10363=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10361))+(((-1.0)*gconst4*r20)))),-1);
if(!x10363.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10362.value)+(((1.5707963267949)*(x10363.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10364=IKsin(j14);
IkReal x10365=IKcos(j14);
IkReal x10366=(gconst4*r21);
IkReal x10367=(gconst5*r00);
IkReal x10368=(gconst4*r01);
IkReal x10369=(gconst5*r10);
IkReal x10370=(gconst5*r20);
IkReal x10371=(gconst4*r11);
IkReal x10372=((1.0)*x10365);
IkReal x10373=((1.0)*x10364);
evalcond[0]=(((x10364*x10366))+(((-1.0)*r22*x10372))+(((-1.0)*x10370*x10373)));
evalcond[1]=(((x10364*x10368))+(((-1.0)*r02*x10372))+(((-1.0)*x10367*x10373)));
evalcond[2]=(((x10365*x10369))+(((-1.0)*x10371*x10372))+(((-1.0)*r12*x10373)));
evalcond[3]=((-1.0)+((x10364*x10371))+(((-1.0)*x10369*x10373))+(((-1.0)*r12*x10372)));
evalcond[4]=(((x10365*x10370))+((cj12*sj11))+(((-1.0)*x10366*x10372))+(((-1.0)*r22*x10373))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*r02*x10373))+((x10365*x10367))+(((-1.0)*x10368*x10372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10374=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10374.valid){
continue;
}
CheckValue<IkReal> x10375 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10375.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10374.value)))+(x10375.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10376=IKsin(j14);
IkReal x10377=IKcos(j14);
IkReal x10378=(gconst4*r21);
IkReal x10379=(gconst5*r00);
IkReal x10380=(gconst4*r01);
IkReal x10381=(gconst5*r10);
IkReal x10382=(gconst5*r20);
IkReal x10383=(gconst4*r11);
IkReal x10384=((1.0)*x10377);
IkReal x10385=((1.0)*x10376);
evalcond[0]=(((x10376*x10378))+(((-1.0)*r22*x10384))+(((-1.0)*x10382*x10385)));
evalcond[1]=(((x10376*x10380))+(((-1.0)*x10379*x10385))+(((-1.0)*r02*x10384)));
evalcond[2]=(((x10377*x10381))+(((-1.0)*r12*x10385))+(((-1.0)*x10383*x10384)));
evalcond[3]=((-1.0)+((x10376*x10383))+(((-1.0)*x10381*x10385))+(((-1.0)*r12*x10384)));
evalcond[4]=(((x10377*x10382))+(((-1.0)*x10378*x10384))+((cj12*sj11))+(((-1.0)*r22*x10385))+((cj11*sj12)));
evalcond[5]=(((x10377*x10379))+(((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*r02*x10385))+(((-1.0)*x10380*x10384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x10386=((-1.0)*r21);
IkReal x10387=((-1.0)*px);
CheckValue<IkReal> x10389 = IKatan2WithCheck(IkReal(x10386),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10389.valid){
continue;
}
IkReal x10388=((1.0)*(x10389.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10388)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10387);
rxp1_1=(px*r21);
rxp1_2=(r11*x10387);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10388)));
IkReal gconst4=x10386;
IkReal gconst5=((1.0)*r20);
IkReal x10390=((1.0)*r11*r21);
IkReal x10391=((1.0)*r10*r20);
j14eval[0]=((((-1.0)*x10391))+(((-1.0)*x10390)));
j14eval[1]=((((-1.0)*cj13*x10390))+(((-1.0)*cj13*x10391)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x10392=((-1.0)*r21);
IkReal x10393=((-1.0)*px);
CheckValue<IkReal> x10395 = IKatan2WithCheck(IkReal(x10392),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10395.valid){
continue;
}
IkReal x10394=((1.0)*(x10395.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10394)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10393);
rxp1_1=(px*r21);
rxp1_2=(r11*x10393);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10394)));
IkReal gconst4=x10392;
IkReal gconst5=((1.0)*r20);
IkReal x10396=((1.0)*r11*r21);
IkReal x10397=((1.0)*r10*r20);
j14eval[0]=((((-1.0)*x10397))+(((-1.0)*x10396)));
j14eval[1]=(((sj13*x10396))+((sj13*x10397)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x10398=((-1.0)*r21);
IkReal x10399=((-1.0)*px);
CheckValue<IkReal> x10401 = IKatan2WithCheck(IkReal(x10398),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10401.valid){
continue;
}
IkReal x10400=((1.0)*(x10401.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10400)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10399);
rxp1_1=(px*r21);
rxp1_2=(r11*x10399);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10400)));
IkReal gconst4=x10398;
IkReal gconst5=((1.0)*r20);
IkReal x10402=((1.0)*cj13);
j14eval[0]=cj13;
j14eval[1]=r02;
j14eval[2]=((((-1.0)*r11*r21*x10402))+(((-1.0)*r10*r20*x10402)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10403=((1.0)*gconst5);
CheckValue<IkReal> x10404=IKPowWithIntegerCheck(cj13,-1);
if(!x10404.valid){
continue;
}
CheckValue<IkReal> x10405=IKPowWithIntegerCheck(r02,-1);
if(!x10405.valid){
continue;
}
CheckValue<IkReal> x10406=IKPowWithIntegerCheck((((cj13*gconst4*r11))+(((-1.0)*cj13*r10*x10403))),-1);
if(!x10406.valid){
continue;
}
if( IKabs(((x10404.value)*(x10405.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10406.value)*(((((-1.0)*gconst4*r10*sj13))+(((-1.0)*r11*sj13*x10403)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10404.value)*(x10405.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12))))))+IKsqr(((x10406.value)*(((((-1.0)*gconst4*r10*sj13))+(((-1.0)*r11*sj13*x10403))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x10404.value)*(x10405.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12))))), ((x10406.value)*(((((-1.0)*gconst4*r10*sj13))+(((-1.0)*r11*sj13*x10403))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x10407=IKsin(j14);
IkReal x10408=IKcos(j14);
IkReal x10409=(cj12*sj11);
IkReal x10410=(cj11*sj12);
IkReal x10411=(r21*sj13);
IkReal x10412=(cj11*cj12);
IkReal x10413=(gconst5*r10);
IkReal x10414=(sj11*sj12);
IkReal x10415=(cj13*gconst5);
IkReal x10416=(gconst4*r21);
IkReal x10417=(gconst4*sj13);
IkReal x10418=(gconst5*r20);
IkReal x10419=(cj13*gconst4);
IkReal x10420=((1.0)*x10408);
IkReal x10421=(sj13*x10408);
IkReal x10422=(r02*x10407);
IkReal x10423=((1.0)*x10407);
IkReal x10424=(x10410+x10409);
evalcond[0]=((-1.0)*r02*x10408);
evalcond[1]=(((x10407*x10416))+(((-1.0)*x10418*x10423)));
evalcond[2]=(((cj13*x10422))+x10412+(((-1.0)*x10414)));
evalcond[3]=((((-1.0)*sj13*x10422))+x10424);
evalcond[4]=((-1.0)+((gconst4*r11*x10407))+(((-1.0)*x10413*x10423)));
evalcond[5]=(((r11*x10408*x10419))+(((-1.0)*cj13*x10413*x10420))+((r10*x10417))+((gconst5*r11*sj13)));
evalcond[6]=((((-1.0)*r11*x10417*x10420))+((x10413*x10421))+((r11*x10415))+((r10*x10419)));
evalcond[7]=(((gconst5*x10411))+(((-1.0)*r20*x10415*x10420))+((cj13*x10408*x10416))+x10424+((r20*x10417)));
evalcond[8]=(((r21*x10415))+x10414+((r20*x10419))+(((-1.0)*x10412))+((x10418*x10421))+(((-1.0)*gconst4*x10411*x10420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10425=((1.0)*gconst5);
IkReal x10426=(gconst4*r11);
CheckValue<IkReal> x10427=IKPowWithIntegerCheck(((((-1.0)*r10*x10425))+x10426),-1);
if(!x10427.valid){
continue;
}
CheckValue<IkReal> x10428=IKPowWithIntegerCheck((((gconst5*r10*sj13))+(((-1.0)*sj13*x10426))),-1);
if(!x10428.valid){
continue;
}
if( IKabs(x10427.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10428.value)*(((((-1.0)*cj13*r11*x10425))+(((-1.0)*cj13*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10427.value)+IKsqr(((x10428.value)*(((((-1.0)*cj13*r11*x10425))+(((-1.0)*cj13*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(x10427.value, ((x10428.value)*(((((-1.0)*cj13*r11*x10425))+(((-1.0)*cj13*gconst4*r10))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x10429=IKsin(j14);
IkReal x10430=IKcos(j14);
IkReal x10431=(cj12*sj11);
IkReal x10432=(cj11*sj12);
IkReal x10433=(r21*sj13);
IkReal x10434=(cj11*cj12);
IkReal x10435=(gconst5*r10);
IkReal x10436=(sj11*sj12);
IkReal x10437=(cj13*gconst5);
IkReal x10438=(gconst4*r21);
IkReal x10439=(gconst4*sj13);
IkReal x10440=(gconst5*r20);
IkReal x10441=(cj13*gconst4);
IkReal x10442=((1.0)*x10430);
IkReal x10443=(sj13*x10430);
IkReal x10444=(r02*x10429);
IkReal x10445=((1.0)*x10429);
IkReal x10446=(x10432+x10431);
evalcond[0]=((-1.0)*r02*x10430);
evalcond[1]=((((-1.0)*x10440*x10445))+((x10429*x10438)));
evalcond[2]=(((cj13*x10444))+(((-1.0)*x10436))+x10434);
evalcond[3]=(x10446+(((-1.0)*sj13*x10444)));
evalcond[4]=((-1.0)+((gconst4*r11*x10429))+(((-1.0)*x10435*x10445)));
evalcond[5]=(((r10*x10439))+(((-1.0)*cj13*x10435*x10442))+((r11*x10430*x10441))+((gconst5*r11*sj13)));
evalcond[6]=((((-1.0)*r11*x10439*x10442))+((r11*x10437))+((r10*x10441))+((x10435*x10443)));
evalcond[7]=(((gconst5*x10433))+((cj13*x10430*x10438))+x10446+(((-1.0)*r20*x10437*x10442))+((r20*x10439)));
evalcond[8]=(((r20*x10441))+(((-1.0)*gconst4*x10433*x10442))+(((-1.0)*x10434))+x10436+((x10440*x10443))+((r21*x10437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10447=((1.0)*r10);
IkReal x10448=(gconst4*r11);
CheckValue<IkReal> x10449=IKPowWithIntegerCheck((x10448+(((-1.0)*gconst5*x10447))),-1);
if(!x10449.valid){
continue;
}
CheckValue<IkReal> x10450=IKPowWithIntegerCheck((((cj13*x10448))+(((-1.0)*cj13*gconst5*x10447))),-1);
if(!x10450.valid){
continue;
}
if( IKabs(x10449.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10450.value)*(((((-1.0)*gconst5*r11*sj13))+(((-1.0)*gconst4*sj13*x10447)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10449.value)+IKsqr(((x10450.value)*(((((-1.0)*gconst5*r11*sj13))+(((-1.0)*gconst4*sj13*x10447))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(x10449.value, ((x10450.value)*(((((-1.0)*gconst5*r11*sj13))+(((-1.0)*gconst4*sj13*x10447))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x10451=IKsin(j14);
IkReal x10452=IKcos(j14);
IkReal x10453=(cj12*sj11);
IkReal x10454=(cj11*sj12);
IkReal x10455=(r21*sj13);
IkReal x10456=(cj11*cj12);
IkReal x10457=(gconst5*r10);
IkReal x10458=(sj11*sj12);
IkReal x10459=(cj13*gconst5);
IkReal x10460=(gconst4*r21);
IkReal x10461=(gconst4*sj13);
IkReal x10462=(gconst5*r20);
IkReal x10463=(cj13*gconst4);
IkReal x10464=((1.0)*x10452);
IkReal x10465=(sj13*x10452);
IkReal x10466=(r02*x10451);
IkReal x10467=((1.0)*x10451);
IkReal x10468=(x10453+x10454);
evalcond[0]=((-1.0)*r02*x10452);
evalcond[1]=((((-1.0)*x10462*x10467))+((x10451*x10460)));
evalcond[2]=((((-1.0)*x10458))+((cj13*x10466))+x10456);
evalcond[3]=((((-1.0)*sj13*x10466))+x10468);
evalcond[4]=((-1.0)+(((-1.0)*x10457*x10467))+((gconst4*r11*x10451)));
evalcond[5]=(((r11*x10452*x10463))+((gconst5*r11*sj13))+(((-1.0)*cj13*x10457*x10464))+((r10*x10461)));
evalcond[6]=(((r11*x10459))+((x10457*x10465))+(((-1.0)*r11*x10461*x10464))+((r10*x10463)));
evalcond[7]=(((r20*x10461))+(((-1.0)*r20*x10459*x10464))+((cj13*x10452*x10460))+((gconst5*x10455))+x10468);
evalcond[8]=(((r20*x10463))+(((-1.0)*x10456))+x10458+(((-1.0)*gconst4*x10455*x10464))+((x10462*x10465))+((r21*x10459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10469=gconst4*gconst4;
IkReal x10470=gconst5*gconst5;
IkReal x10471=(gconst4*r10);
IkReal x10472=(cj13*gconst5);
IkReal x10473=(r22*sj13);
IkReal x10474=(r11*r20);
IkReal x10475=(gconst5*r11);
IkReal x10476=((1.0)*cj13);
IkReal x10477=((1.0)*sj13);
IkReal x10478=(r21*x10469);
CheckValue<IkReal> x10479 = IKatan2WithCheck(IkReal((((x10471*x10473))+((x10473*x10475)))),IkReal(((((-1.0)*x10470*x10474*x10477))+((gconst4*r21*sj13*x10475))+((r10*sj13*x10478))+(((-1.0)*gconst5*r20*x10471*x10477)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10479.valid){
continue;
}
CheckValue<IkReal> x10480=IKPowWithIntegerCheck(IKsign((((r21*x10471*x10472))+(((-1.0)*r11*x10476*x10478))+((gconst4*x10472*x10474))+(((-1.0)*r12*r22*x10476))+(((-1.0)*r10*r20*x10470*x10476)))),-1);
if(!x10480.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10479.value)+(((1.5707963267949)*(x10480.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x10481=IKsin(j14);
IkReal x10482=IKcos(j14);
IkReal x10483=(cj12*sj11);
IkReal x10484=(cj11*sj12);
IkReal x10485=(r21*sj13);
IkReal x10486=(gconst5*sj13);
IkReal x10487=(cj11*cj12);
IkReal x10488=(gconst5*r00);
IkReal x10489=(cj13*gconst5);
IkReal x10490=(sj11*sj12);
IkReal x10491=(gconst4*sj13);
IkReal x10492=(cj13*gconst4);
IkReal x10493=((1.0)*x10482);
IkReal x10494=((1.0)*x10481);
IkReal x10495=(gconst4*x10481);
IkReal x10496=(cj13*x10481);
IkReal x10497=(x10483+x10484);
evalcond[0]=((((-1.0)*gconst5*r20*x10494))+((r21*x10495))+(((-1.0)*r22*x10493)));
evalcond[1]=(((r01*x10495))+(((-1.0)*x10488*x10494))+(((-1.0)*r02*x10493)));
evalcond[2]=((-1.0)+((r11*x10495))+(((-1.0)*r12*x10493))+(((-1.0)*gconst5*r10*x10494)));
evalcond[3]=((((-1.0)*r10*x10489*x10493))+((r10*x10491))+((r12*x10496))+((r11*x10486))+((r11*x10482*x10492)));
evalcond[4]=(((r10*x10492))+((r10*x10482*x10486))+((r11*x10489))+(((-1.0)*r12*sj13*x10494))+(((-1.0)*r11*x10491*x10493)));
evalcond[5]=(((r22*x10496))+(((-1.0)*r20*x10489*x10493))+((r21*x10482*x10492))+x10497+((r20*x10491))+((gconst5*x10485)));
evalcond[6]=(((r01*x10482*x10492))+(((-1.0)*cj13*x10488*x10493))+(((-1.0)*x10490))+x10487+((r02*x10496))+((r00*x10491))+((r01*x10486)));
evalcond[7]=(((r00*x10482*x10486))+x10497+(((-1.0)*r02*sj13*x10494))+((r00*x10492))+((r01*x10489))+(((-1.0)*r01*x10491*x10493)));
evalcond[8]=((((-1.0)*r22*sj13*x10494))+((r21*x10489))+(((-1.0)*x10487))+((r20*x10482*x10486))+x10490+((r20*x10492))+(((-1.0)*gconst4*x10485*x10493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10498=((1.0)*gconst5);
CheckValue<IkReal> x10499=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10498))+(((-1.0)*gconst4*r20)))),-1);
if(!x10499.valid){
continue;
}
CheckValue<IkReal> x10500 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10498)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10500.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10499.value)))+(x10500.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x10501=IKsin(j14);
IkReal x10502=IKcos(j14);
IkReal x10503=(cj12*sj11);
IkReal x10504=(cj11*sj12);
IkReal x10505=(r21*sj13);
IkReal x10506=(gconst5*sj13);
IkReal x10507=(cj11*cj12);
IkReal x10508=(gconst5*r00);
IkReal x10509=(cj13*gconst5);
IkReal x10510=(sj11*sj12);
IkReal x10511=(gconst4*sj13);
IkReal x10512=(cj13*gconst4);
IkReal x10513=((1.0)*x10502);
IkReal x10514=((1.0)*x10501);
IkReal x10515=(gconst4*x10501);
IkReal x10516=(cj13*x10501);
IkReal x10517=(x10503+x10504);
evalcond[0]=((((-1.0)*r22*x10513))+((r21*x10515))+(((-1.0)*gconst5*r20*x10514)));
evalcond[1]=((((-1.0)*r02*x10513))+(((-1.0)*x10508*x10514))+((r01*x10515)));
evalcond[2]=((-1.0)+(((-1.0)*gconst5*r10*x10514))+(((-1.0)*r12*x10513))+((r11*x10515)));
evalcond[3]=(((r12*x10516))+((r10*x10511))+((r11*x10502*x10512))+(((-1.0)*r10*x10509*x10513))+((r11*x10506)));
evalcond[4]=(((r10*x10512))+(((-1.0)*r11*x10511*x10513))+((r10*x10502*x10506))+(((-1.0)*r12*sj13*x10514))+((r11*x10509)));
evalcond[5]=(((r21*x10502*x10512))+((r20*x10511))+(((-1.0)*r20*x10509*x10513))+x10517+((gconst5*x10505))+((r22*x10516)));
evalcond[6]=(((r01*x10506))+(((-1.0)*x10510))+((r00*x10511))+x10507+((r01*x10502*x10512))+((r02*x10516))+(((-1.0)*cj13*x10508*x10513)));
evalcond[7]=(((r01*x10509))+((r00*x10512))+(((-1.0)*r01*x10511*x10513))+((r00*x10502*x10506))+x10517+(((-1.0)*r02*sj13*x10514)));
evalcond[8]=((((-1.0)*gconst4*x10505*x10513))+((r20*x10512))+((r21*x10509))+(((-1.0)*r22*sj13*x10514))+x10510+(((-1.0)*x10507))+((r20*x10502*x10506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10518=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10518.valid){
continue;
}
CheckValue<IkReal> x10519 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10519.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10518.value)))+(x10519.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x10520=IKsin(j14);
IkReal x10521=IKcos(j14);
IkReal x10522=(cj12*sj11);
IkReal x10523=(cj11*sj12);
IkReal x10524=(r21*sj13);
IkReal x10525=(gconst5*sj13);
IkReal x10526=(cj11*cj12);
IkReal x10527=(gconst5*r00);
IkReal x10528=(cj13*gconst5);
IkReal x10529=(sj11*sj12);
IkReal x10530=(gconst4*sj13);
IkReal x10531=(cj13*gconst4);
IkReal x10532=((1.0)*x10521);
IkReal x10533=((1.0)*x10520);
IkReal x10534=(gconst4*x10520);
IkReal x10535=(cj13*x10520);
IkReal x10536=(x10523+x10522);
evalcond[0]=((((-1.0)*r22*x10532))+((r21*x10534))+(((-1.0)*gconst5*r20*x10533)));
evalcond[1]=((((-1.0)*r02*x10532))+((r01*x10534))+(((-1.0)*x10527*x10533)));
evalcond[2]=((-1.0)+(((-1.0)*gconst5*r10*x10533))+(((-1.0)*r12*x10532))+((r11*x10534)));
evalcond[3]=((((-1.0)*r10*x10528*x10532))+((r10*x10530))+((r11*x10521*x10531))+((r12*x10535))+((r11*x10525)));
evalcond[4]=((((-1.0)*r11*x10530*x10532))+((r10*x10531))+(((-1.0)*r12*sj13*x10533))+((r10*x10521*x10525))+((r11*x10528)));
evalcond[5]=(((gconst5*x10524))+(((-1.0)*r20*x10528*x10532))+((r22*x10535))+x10536+((r20*x10530))+((r21*x10521*x10531)));
evalcond[6]=(((r02*x10535))+(((-1.0)*x10529))+((r01*x10521*x10531))+(((-1.0)*cj13*x10527*x10532))+x10526+((r00*x10530))+((r01*x10525)));
evalcond[7]=(((r00*x10521*x10525))+x10536+((r00*x10531))+((r01*x10528))+(((-1.0)*r02*sj13*x10533))+(((-1.0)*r01*x10530*x10532)));
evalcond[8]=(((r20*x10521*x10525))+((r21*x10528))+(((-1.0)*x10526))+x10529+(((-1.0)*r22*sj13*x10533))+((r20*x10531))+(((-1.0)*gconst4*x10524*x10532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
IkReal x10537=((-1.0)*r21);
CheckValue<IkReal> x10540 = IKatan2WithCheck(IkReal(x10537),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10540.valid){
continue;
}
IkReal x10538=((1.0)*(x10540.value));
IkReal x10539=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10538)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10538)));
IkReal gconst4=(x10537*x10539);
IkReal gconst5=((1.0)*r20*x10539);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=r12;
j14eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x10541=((-1.0)*r21);
CheckValue<IkReal> x10544 = IKatan2WithCheck(IkReal(x10541),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10544.valid){
continue;
}
IkReal x10542=((1.0)*(x10544.value));
IkReal x10543=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10542)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10542)));
IkReal gconst4=(x10541*x10543);
IkReal gconst5=((1.0)*r20*x10543);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x10545=((-1.0)*r21);
CheckValue<IkReal> x10548 = IKatan2WithCheck(IkReal(x10545),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10548.valid){
continue;
}
IkReal x10546=((1.0)*(x10548.value));
IkReal x10547=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10546)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10546)));
IkReal gconst4=(x10545*x10547);
IkReal gconst5=((1.0)*r20*x10547);
j14eval[0]=r12;
j14eval[1]=sj13;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
IkReal x10549=((-1.0)*r21);
CheckValue<IkReal> x10552 = IKatan2WithCheck(IkReal(x10549),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10552.valid){
continue;
}
IkReal x10550=((1.0)*(x10552.value));
IkReal x10551=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10550)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10550)));
IkReal gconst4=(x10549*x10551);
IkReal gconst5=((1.0)*r20*x10551);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=r12;
j14eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x10553=((-1.0)*r21);
CheckValue<IkReal> x10556 = IKatan2WithCheck(IkReal(x10553),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10556.valid){
continue;
}
IkReal x10554=((1.0)*(x10556.value));
IkReal x10555=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10554)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10554)));
IkReal gconst4=(x10553*x10555);
IkReal gconst5=((1.0)*r20*x10555);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10557=((-1.0)*r21);
CheckValue<IkReal> x10560 = IKatan2WithCheck(IkReal(x10557),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10560.valid){
continue;
}
IkReal x10558=((1.0)*(x10560.value));
IkReal x10559=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10558)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10558)));
IkReal gconst4=(x10557*x10559);
IkReal gconst5=((1.0)*r20*x10559);
IkReal x10561=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10565=IKPowWithIntegerCheck(x10561,-1);
if(!x10565.valid){
continue;
}
IkReal x10562=x10565.value;
IkReal x10563=((1.0)*x10562);
IkReal x10564=((((-1.0)*x10563*(r01*r01)*(r21*r21)))+(((-1.0)*x10563*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10562)));
j14eval[0]=x10564;
j14eval[1]=r02;
j14eval[2]=x10561;
j14eval[3]=IKsign(x10564);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10566=(gconst5*r00);
IkReal x10567=(gconst4*r01);
CheckValue<IkReal> x10568 = IKatan2WithCheck(IkReal(((((-1.0)*x10567))+x10566)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10568.valid){
continue;
}
CheckValue<IkReal> x10569=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10566*x10566)))+(((2.0)*x10566*x10567))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10567*x10567))))),-1);
if(!x10569.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10568.value)+(((1.5707963267949)*(x10569.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10570=IKsin(j14);
IkReal x10571=IKcos(j14);
IkReal x10572=((1.0)*cj11);
IkReal x10573=(gconst4*r21);
IkReal x10574=(gconst5*r00);
IkReal x10575=(gconst4*r01);
IkReal x10576=(gconst5*r10);
IkReal x10577=(gconst5*r20);
IkReal x10578=(gconst4*r11);
IkReal x10579=((1.0)*x10571);
IkReal x10580=((1.0)*x10570);
evalcond[0]=((((-1.0)*x10577*x10580))+(((-1.0)*r22*x10579))+((x10570*x10573)));
evalcond[1]=((((-1.0)*r12*x10579))+((x10570*x10578))+(((-1.0)*x10576*x10580)));
evalcond[2]=((((-1.0)*x10575*x10579))+((x10571*x10574))+(((-1.0)*r02*x10580)));
evalcond[3]=((-1.0)+(((-1.0)*x10574*x10580))+((x10570*x10575))+(((-1.0)*r02*x10579)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r22*x10580))+((x10571*x10577))+(((-1.0)*x10573*x10579))+(((-1.0)*cj12*x10572)));
evalcond[5]=((((-1.0)*cj12*sj11))+((x10571*x10576))+(((-1.0)*x10578*x10579))+(((-1.0)*r12*x10580))+(((-1.0)*sj12*x10572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10581=((1.0)*gconst5);
CheckValue<IkReal> x10582=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10581))+(((-1.0)*gconst4*r10)))),-1);
if(!x10582.valid){
continue;
}
CheckValue<IkReal> x10583 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10581))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10583.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10582.value)))+(x10583.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10584=IKsin(j14);
IkReal x10585=IKcos(j14);
IkReal x10586=((1.0)*cj11);
IkReal x10587=(gconst4*r21);
IkReal x10588=(gconst5*r00);
IkReal x10589=(gconst4*r01);
IkReal x10590=(gconst5*r10);
IkReal x10591=(gconst5*r20);
IkReal x10592=(gconst4*r11);
IkReal x10593=((1.0)*x10585);
IkReal x10594=((1.0)*x10584);
evalcond[0]=((((-1.0)*r22*x10593))+(((-1.0)*x10591*x10594))+((x10584*x10587)));
evalcond[1]=((((-1.0)*r12*x10593))+(((-1.0)*x10590*x10594))+((x10584*x10592)));
evalcond[2]=((((-1.0)*r02*x10594))+(((-1.0)*x10589*x10593))+((x10585*x10588)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10593))+((x10584*x10589))+(((-1.0)*x10588*x10594)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x10587*x10593))+(((-1.0)*r22*x10594))+((x10585*x10591))+(((-1.0)*cj12*x10586)));
evalcond[5]=((((-1.0)*x10592*x10593))+(((-1.0)*r12*x10594))+(((-1.0)*sj12*x10586))+((x10585*x10590))+(((-1.0)*cj12*sj11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10595 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10595.valid){
continue;
}
CheckValue<IkReal> x10596=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10596.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10595.value)+(((1.5707963267949)*(x10596.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10597=IKsin(j14);
IkReal x10598=IKcos(j14);
IkReal x10599=((1.0)*cj11);
IkReal x10600=(gconst4*r21);
IkReal x10601=(gconst5*r00);
IkReal x10602=(gconst4*r01);
IkReal x10603=(gconst5*r10);
IkReal x10604=(gconst5*r20);
IkReal x10605=(gconst4*r11);
IkReal x10606=((1.0)*x10598);
IkReal x10607=((1.0)*x10597);
evalcond[0]=((((-1.0)*x10604*x10607))+(((-1.0)*r22*x10606))+((x10597*x10600)));
evalcond[1]=((((-1.0)*r12*x10606))+(((-1.0)*x10603*x10607))+((x10597*x10605)));
evalcond[2]=(((x10598*x10601))+(((-1.0)*r02*x10607))+(((-1.0)*x10602*x10606)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10606))+((x10597*x10602))+(((-1.0)*x10601*x10607)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x10600*x10606))+(((-1.0)*cj12*x10599))+((x10598*x10604))+(((-1.0)*r22*x10607)));
evalcond[5]=((((-1.0)*sj12*x10599))+(((-1.0)*r12*x10607))+(((-1.0)*cj12*sj11))+((x10598*x10603))+(((-1.0)*x10605*x10606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
IkReal x10608=((-1.0)*r21);
CheckValue<IkReal> x10611 = IKatan2WithCheck(IkReal(x10608),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10611.valid){
continue;
}
IkReal x10609=((1.0)*(x10611.value));
IkReal x10610=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10609)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10609)));
IkReal gconst4=(x10608*x10610);
IkReal gconst5=((1.0)*r20*x10610);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=r12;
j14eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x10612=((-1.0)*r21);
CheckValue<IkReal> x10615 = IKatan2WithCheck(IkReal(x10612),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10615.valid){
continue;
}
IkReal x10613=((1.0)*(x10615.value));
IkReal x10614=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10613)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10613)));
IkReal gconst4=(x10612*x10614);
IkReal gconst5=((1.0)*r20*x10614);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x10616=((-1.0)*r21);
CheckValue<IkReal> x10619 = IKatan2WithCheck(IkReal(x10616),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10619.valid){
continue;
}
IkReal x10617=((1.0)*(x10619.value));
IkReal x10618=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10617)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10617)));
IkReal gconst4=(x10616*x10618);
IkReal gconst5=((1.0)*r20*x10618);
j14eval[0]=r02;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10620=(gconst4*r01);
IkReal x10621=(gconst5*r00);
CheckValue<IkReal> x10622 = IKatan2WithCheck(IkReal(((((-1.0)*x10621))+x10620)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10622.valid){
continue;
}
CheckValue<IkReal> x10623=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10620*x10621))+(x10620*x10620)+(x10621*x10621)+(r02*r02))),-1);
if(!x10623.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10622.value)+(((1.5707963267949)*(x10623.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10624=IKcos(j14);
IkReal x10625=IKsin(j14);
IkReal x10626=((1.0)*cj11);
IkReal x10627=((1.0)*x10624);
IkReal x10628=(gconst4*x10625);
IkReal x10629=(gconst4*x10624);
IkReal x10630=((1.0)*gconst5*x10625);
evalcond[0]=((((-1.0)*gconst5*r00*x10627))+((r01*x10629))+((r02*x10625)));
evalcond[1]=(((r21*x10628))+(((-1.0)*r22*x10627))+(((-1.0)*r20*x10630)));
evalcond[2]=((((-1.0)*r12*x10627))+(((-1.0)*r10*x10630))+((r11*x10628)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x10630))+(((-1.0)*r02*x10627))+((r01*x10628)));
evalcond[4]=(((sj11*sj12))+((r21*x10629))+(((-1.0)*gconst5*r20*x10627))+(((-1.0)*cj12*x10626))+((r22*x10625)));
evalcond[5]=((((-1.0)*gconst5*r10*x10627))+(((-1.0)*cj12*sj11))+((r11*x10629))+(((-1.0)*sj12*x10626))+((r12*x10625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10631=((1.0)*gconst5);
CheckValue<IkReal> x10632 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10631)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10632.valid){
continue;
}
CheckValue<IkReal> x10633=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10631))+(((-1.0)*gconst4*r10)))),-1);
if(!x10633.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10632.value)+(((1.5707963267949)*(x10633.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10634=IKcos(j14);
IkReal x10635=IKsin(j14);
IkReal x10636=((1.0)*cj11);
IkReal x10637=((1.0)*x10634);
IkReal x10638=(gconst4*x10635);
IkReal x10639=(gconst4*x10634);
IkReal x10640=((1.0)*gconst5*x10635);
evalcond[0]=(((r01*x10639))+(((-1.0)*gconst5*r00*x10637))+((r02*x10635)));
evalcond[1]=((((-1.0)*r22*x10637))+((r21*x10638))+(((-1.0)*r20*x10640)));
evalcond[2]=((((-1.0)*r12*x10637))+(((-1.0)*r10*x10640))+((r11*x10638)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10637))+((r01*x10638))+(((-1.0)*r00*x10640)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x10636))+(((-1.0)*gconst5*r20*x10637))+((r22*x10635))+((r21*x10639)));
evalcond[5]=((((-1.0)*gconst5*r10*x10637))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x10636))+((r12*x10635))+((r11*x10639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10641 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10641.valid){
continue;
}
CheckValue<IkReal> x10642=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10642.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10641.value)+(((1.5707963267949)*(x10642.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10643=IKcos(j14);
IkReal x10644=IKsin(j14);
IkReal x10645=((1.0)*cj11);
IkReal x10646=((1.0)*x10643);
IkReal x10647=(gconst4*x10644);
IkReal x10648=(gconst4*x10643);
IkReal x10649=((1.0)*gconst5*x10644);
evalcond[0]=((((-1.0)*gconst5*r00*x10646))+((r01*x10648))+((r02*x10644)));
evalcond[1]=(((r21*x10647))+(((-1.0)*r22*x10646))+(((-1.0)*r20*x10649)));
evalcond[2]=((((-1.0)*r12*x10646))+(((-1.0)*r10*x10649))+((r11*x10647)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10646))+((r01*x10647))+(((-1.0)*r00*x10649)));
evalcond[4]=(((sj11*sj12))+((r21*x10648))+(((-1.0)*gconst5*r20*x10646))+(((-1.0)*cj12*x10645))+((r22*x10644)));
evalcond[5]=((((-1.0)*gconst5*r10*x10646))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x10645))+((r11*x10648))+((r12*x10644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
IkReal x10650=((-1.0)*r21);
CheckValue<IkReal> x10653 = IKatan2WithCheck(IkReal(x10650),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10653.valid){
continue;
}
IkReal x10651=((1.0)*(x10653.value));
IkReal x10652=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10651)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10651)));
IkReal gconst4=(x10650*x10652);
IkReal gconst5=((1.0)*r20*x10652);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=r12;
j14eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x10654=((-1.0)*r21);
CheckValue<IkReal> x10657 = IKatan2WithCheck(IkReal(x10654),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10657.valid){
continue;
}
IkReal x10655=((1.0)*(x10657.value));
IkReal x10656=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10655)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10655)));
IkReal gconst4=(x10654*x10656);
IkReal gconst5=((1.0)*r20*x10656);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x10658=((-1.0)*r21);
CheckValue<IkReal> x10661 = IKatan2WithCheck(IkReal(x10658),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10661.valid){
continue;
}
IkReal x10659=((1.0)*(x10661.value));
IkReal x10660=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10659)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10659)));
IkReal gconst4=(x10658*x10660);
IkReal gconst5=((1.0)*r20*x10660);
j14eval[0]=r02;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10662=(gconst4*r01);
IkReal x10663=(gconst5*r00);
CheckValue<IkReal> x10664 = IKatan2WithCheck(IkReal(((((-1.0)*x10663))+x10662)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10664.valid){
continue;
}
CheckValue<IkReal> x10665=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10662*x10663))+(x10662*x10662)+(x10663*x10663)+(r02*r02))),-1);
if(!x10665.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10664.value)+(((1.5707963267949)*(x10665.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10666=IKcos(j14);
IkReal x10667=IKsin(j14);
IkReal x10668=((1.0)*x10666);
IkReal x10669=(gconst4*x10666);
IkReal x10670=(gconst4*x10667);
IkReal x10671=((1.0)*gconst5*x10667);
evalcond[0]=(((r02*x10667))+(((-1.0)*gconst5*r00*x10668))+((r01*x10669)));
evalcond[1]=((((-1.0)*r20*x10671))+(((-1.0)*r22*x10668))+((r21*x10670)));
evalcond[2]=(((r11*x10670))+(((-1.0)*r10*x10671))+(((-1.0)*r12*x10668)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10668))+((r01*x10670))+(((-1.0)*r00*x10671)));
evalcond[4]=(((r22*x10667))+(((-1.0)*gconst5*r20*x10668))+((cj12*sj11))+((cj11*sj12))+((r21*x10669)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*gconst5*r10*x10668))+((r12*x10667))+((r11*x10669))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10672=((1.0)*gconst5);
CheckValue<IkReal> x10673 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10672))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10673.valid){
continue;
}
CheckValue<IkReal> x10674=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10672))+(((-1.0)*gconst4*r10)))),-1);
if(!x10674.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10673.value)+(((1.5707963267949)*(x10674.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10675=IKcos(j14);
IkReal x10676=IKsin(j14);
IkReal x10677=((1.0)*x10675);
IkReal x10678=(gconst4*x10675);
IkReal x10679=(gconst4*x10676);
IkReal x10680=((1.0)*gconst5*x10676);
evalcond[0]=(((r02*x10676))+(((-1.0)*gconst5*r00*x10677))+((r01*x10678)));
evalcond[1]=((((-1.0)*r22*x10677))+((r21*x10679))+(((-1.0)*r20*x10680)));
evalcond[2]=(((r11*x10679))+(((-1.0)*r10*x10680))+(((-1.0)*r12*x10677)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10677))+((r01*x10679))+(((-1.0)*r00*x10680)));
evalcond[4]=(((r22*x10676))+(((-1.0)*gconst5*r20*x10677))+((cj12*sj11))+((r21*x10678))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*gconst5*r10*x10677))+((r11*x10678))+((r12*x10676))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10681 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10681.valid){
continue;
}
CheckValue<IkReal> x10682=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10682.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10681.value)+(((1.5707963267949)*(x10682.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10683=IKcos(j14);
IkReal x10684=IKsin(j14);
IkReal x10685=((1.0)*x10683);
IkReal x10686=(gconst4*x10683);
IkReal x10687=(gconst4*x10684);
IkReal x10688=((1.0)*gconst5*x10684);
evalcond[0]=((((-1.0)*gconst5*r00*x10685))+((r01*x10686))+((r02*x10684)));
evalcond[1]=((((-1.0)*r22*x10685))+((r21*x10687))+(((-1.0)*r20*x10688)));
evalcond[2]=((((-1.0)*r12*x10685))+((r11*x10687))+(((-1.0)*r10*x10688)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10685))+((r01*x10687))+(((-1.0)*r00*x10688)));
evalcond[4]=((((-1.0)*gconst5*r20*x10685))+((cj12*sj11))+((r22*x10684))+((r21*x10686))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r11*x10686))+((r12*x10684))+(((-1.0)*gconst5*r10*x10685))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
IkReal x10689=((-1.0)*r21);
CheckValue<IkReal> x10692 = IKatan2WithCheck(IkReal(x10689),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10692.valid){
continue;
}
IkReal x10690=((1.0)*(x10692.value));
IkReal x10691=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10690)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10690)));
IkReal gconst4=(x10689*x10691);
IkReal gconst5=((1.0)*r20*x10691);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=r12;
j14eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x10693=((-1.0)*r21);
CheckValue<IkReal> x10696 = IKatan2WithCheck(IkReal(x10693),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10696.valid){
continue;
}
IkReal x10694=((1.0)*(x10696.value));
IkReal x10695=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10694)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10694)));
IkReal gconst4=(x10693*x10695);
IkReal gconst5=((1.0)*r20*x10695);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10697=((-1.0)*r21);
CheckValue<IkReal> x10700 = IKatan2WithCheck(IkReal(x10697),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10700.valid){
continue;
}
IkReal x10698=((1.0)*(x10700.value));
IkReal x10699=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10698)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10698)));
IkReal gconst4=(x10697*x10699);
IkReal gconst5=((1.0)*r20*x10699);
IkReal x10701=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10705=IKPowWithIntegerCheck(x10701,-1);
if(!x10705.valid){
continue;
}
IkReal x10702=x10705.value;
IkReal x10703=((1.0)*x10702);
IkReal x10704=((((-1.0)*(r02*r02)))+(((-1.0)*x10703*(r00*r00)*(r20*r20)))+(((-1.0)*x10703*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x10702)));
j14eval[0]=x10704;
j14eval[1]=r02;
j14eval[2]=x10701;
j14eval[3]=IKsign(x10704);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10706=(gconst5*r00);
IkReal x10707=(gconst4*r01);
CheckValue<IkReal> x10708 = IKatan2WithCheck(IkReal(((((-1.0)*x10707))+x10706)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10708.valid){
continue;
}
CheckValue<IkReal> x10709=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10707*x10707)))+(((-1.0)*(r02*r02)))+(((2.0)*x10706*x10707))+(((-1.0)*(x10706*x10706))))),-1);
if(!x10709.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10708.value)+(((1.5707963267949)*(x10709.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10710=IKsin(j14);
IkReal x10711=IKcos(j14);
IkReal x10712=(gconst4*r21);
IkReal x10713=(gconst5*r00);
IkReal x10714=(gconst4*r01);
IkReal x10715=(gconst5*r10);
IkReal x10716=(gconst5*r20);
IkReal x10717=(gconst4*r11);
IkReal x10718=((1.0)*x10711);
IkReal x10719=((1.0)*x10710);
evalcond[0]=((((-1.0)*r22*x10718))+(((-1.0)*x10716*x10719))+((x10710*x10712)));
evalcond[1]=((((-1.0)*r12*x10718))+(((-1.0)*x10715*x10719))+((x10710*x10717)));
evalcond[2]=((((-1.0)*x10714*x10718))+(((-1.0)*r02*x10719))+((x10711*x10713)));
evalcond[3]=((-1.0)+(((-1.0)*x10713*x10719))+((x10710*x10714))+(((-1.0)*r02*x10718)));
evalcond[4]=((((-1.0)*x10712*x10718))+(((-1.0)*r22*x10719))+((cj12*sj11))+((cj11*sj12))+((x10711*x10716)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r12*x10719))+(((-1.0)*x10717*x10718))+(((-1.0)*cj11*cj12))+((x10711*x10715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10720=((1.0)*gconst5);
CheckValue<IkReal> x10721 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10720))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10721.valid){
continue;
}
CheckValue<IkReal> x10722=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10720))+(((-1.0)*gconst4*r10)))),-1);
if(!x10722.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10721.value)+(((1.5707963267949)*(x10722.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10723=IKsin(j14);
IkReal x10724=IKcos(j14);
IkReal x10725=(gconst4*r21);
IkReal x10726=(gconst5*r00);
IkReal x10727=(gconst4*r01);
IkReal x10728=(gconst5*r10);
IkReal x10729=(gconst5*r20);
IkReal x10730=(gconst4*r11);
IkReal x10731=((1.0)*x10724);
IkReal x10732=((1.0)*x10723);
evalcond[0]=((((-1.0)*r22*x10731))+((x10723*x10725))+(((-1.0)*x10729*x10732)));
evalcond[1]=(((x10723*x10730))+(((-1.0)*r12*x10731))+(((-1.0)*x10728*x10732)));
evalcond[2]=(((x10724*x10726))+(((-1.0)*r02*x10732))+(((-1.0)*x10727*x10731)));
evalcond[3]=((-1.0)+((x10723*x10727))+(((-1.0)*r02*x10731))+(((-1.0)*x10726*x10732)));
evalcond[4]=((((-1.0)*x10725*x10731))+(((-1.0)*r22*x10732))+((x10724*x10729))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x10724*x10728))+(((-1.0)*x10730*x10731))+(((-1.0)*r12*x10732))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10733 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10733.valid){
continue;
}
CheckValue<IkReal> x10734=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10734.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10733.value)+(((1.5707963267949)*(x10734.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10735=IKsin(j14);
IkReal x10736=IKcos(j14);
IkReal x10737=(gconst4*r21);
IkReal x10738=(gconst5*r00);
IkReal x10739=(gconst4*r01);
IkReal x10740=(gconst5*r10);
IkReal x10741=(gconst5*r20);
IkReal x10742=(gconst4*r11);
IkReal x10743=((1.0)*x10736);
IkReal x10744=((1.0)*x10735);
evalcond[0]=((((-1.0)*x10741*x10744))+(((-1.0)*r22*x10743))+((x10735*x10737)));
evalcond[1]=(((x10735*x10742))+(((-1.0)*r12*x10743))+(((-1.0)*x10740*x10744)));
evalcond[2]=((((-1.0)*r02*x10744))+(((-1.0)*x10739*x10743))+((x10736*x10738)));
evalcond[3]=((-1.0)+(((-1.0)*x10738*x10744))+(((-1.0)*r02*x10743))+((x10735*x10739)));
evalcond[4]=(((x10736*x10741))+(((-1.0)*x10737*x10743))+((cj12*sj11))+(((-1.0)*r22*x10744))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x10736*x10740))+(((-1.0)*r12*x10744))+(((-1.0)*x10742*x10743))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
j14array[0]=0;
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10745=gconst4*gconst4;
IkReal x10746=gconst5*gconst5;
IkReal x10747=(r00*sj13);
IkReal x10748=(cj13*r00);
IkReal x10749=(r01*sj13);
IkReal x10750=(cj13*r01);
IkReal x10751=(r21*x10745);
IkReal x10752=(gconst4*gconst5*r21);
IkReal x10753=(gconst4*gconst5*r20);
IkReal x10754=((1.0)*r20*x10746);
CheckValue<IkReal> x10755=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj13*r02*r22))+((x10748*x10752))+(((-1.0)*x10748*x10754))+(((-1.0)*x10750*x10751))+((x10750*x10753)))),-1);
if(!x10755.valid){
continue;
}
CheckValue<IkReal> x10756 = IKatan2WithCheck(IkReal((((gconst4*r22*x10747))+((gconst5*r22*x10749)))),IkReal((((x10749*x10752))+((x10747*x10751))+(((-1.0)*x10747*x10753))+(((-1.0)*x10749*x10754)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10756.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10755.value)))+(x10756.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x10757=IKsin(j14);
IkReal x10758=IKcos(j14);
IkReal x10759=(sj11*sj12);
IkReal x10760=(gconst4*r21);
IkReal x10761=(gconst5*sj13);
IkReal x10762=((1.0)*cj11);
IkReal x10763=(gconst5*r00);
IkReal x10764=(cj13*gconst5);
IkReal x10765=(gconst4*r20);
IkReal x10766=(cj12*sj11);
IkReal x10767=(gconst4*r00);
IkReal x10768=(gconst4*r10);
IkReal x10769=(gconst4*r01);
IkReal x10770=(gconst4*r11);
IkReal x10771=(cj12*x10762);
IkReal x10772=((1.0)*x10758);
IkReal x10773=((1.0)*x10757);
IkReal x10774=(cj13*x10757);
IkReal x10775=(cj13*x10758);
evalcond[0]=((((-1.0)*gconst5*r20*x10773))+(((-1.0)*r22*x10772))+((x10757*x10760)));
evalcond[1]=((((-1.0)*gconst5*r10*x10773))+(((-1.0)*r12*x10772))+((x10757*x10770)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x10772))+(((-1.0)*x10763*x10773))+((x10757*x10769)));
evalcond[3]=((((-1.0)*cj13*x10763*x10772))+((sj13*x10767))+((r01*x10761))+((r02*x10774))+((x10769*x10775)));
evalcond[4]=(((r00*x10758*x10761))+(((-1.0)*sj13*x10769*x10772))+((r01*x10764))+(((-1.0)*r02*sj13*x10773))+((cj13*x10767)));
evalcond[5]=(((sj13*x10765))+((x10760*x10775))+((r21*x10761))+((r22*x10774))+(((-1.0)*r20*x10764*x10772))+x10766+((cj11*sj12)));
evalcond[6]=(((sj13*x10768))+((r12*x10774))+((r11*x10761))+(((-1.0)*x10771))+(((-1.0)*r10*x10764*x10772))+((x10770*x10775))+x10759);
evalcond[7]=(((r20*x10758*x10761))+(((-1.0)*x10771))+((r21*x10764))+((cj13*x10765))+(((-1.0)*sj13*x10760*x10772))+x10759+(((-1.0)*r22*sj13*x10773)));
evalcond[8]=(((r10*x10758*x10761))+(((-1.0)*r12*sj13*x10773))+(((-1.0)*x10766))+((r11*x10764))+(((-1.0)*sj12*x10762))+((cj13*x10768))+(((-1.0)*sj13*x10770*x10772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10776=((1.0)*gconst5);
CheckValue<IkReal> x10777 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10776))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10777.valid){
continue;
}
CheckValue<IkReal> x10778=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10776))+(((-1.0)*gconst4*r10)))),-1);
if(!x10778.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10777.value)+(((1.5707963267949)*(x10778.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x10779=IKsin(j14);
IkReal x10780=IKcos(j14);
IkReal x10781=(sj11*sj12);
IkReal x10782=(gconst4*r21);
IkReal x10783=(gconst5*sj13);
IkReal x10784=((1.0)*cj11);
IkReal x10785=(gconst5*r00);
IkReal x10786=(cj13*gconst5);
IkReal x10787=(gconst4*r20);
IkReal x10788=(cj12*sj11);
IkReal x10789=(gconst4*r00);
IkReal x10790=(gconst4*r10);
IkReal x10791=(gconst4*r01);
IkReal x10792=(gconst4*r11);
IkReal x10793=(cj12*x10784);
IkReal x10794=((1.0)*x10780);
IkReal x10795=((1.0)*x10779);
IkReal x10796=(cj13*x10779);
IkReal x10797=(cj13*x10780);
evalcond[0]=(((x10779*x10782))+(((-1.0)*gconst5*r20*x10795))+(((-1.0)*r22*x10794)));
evalcond[1]=((((-1.0)*r12*x10794))+((x10779*x10792))+(((-1.0)*gconst5*r10*x10795)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x10794))+((x10779*x10791))+(((-1.0)*x10785*x10795)));
evalcond[3]=(((r02*x10796))+((sj13*x10789))+((r01*x10783))+(((-1.0)*cj13*x10785*x10794))+((x10791*x10797)));
evalcond[4]=(((cj13*x10789))+(((-1.0)*sj13*x10791*x10794))+(((-1.0)*r02*sj13*x10795))+((r01*x10786))+((r00*x10780*x10783)));
evalcond[5]=(((r21*x10783))+((x10782*x10797))+((sj13*x10787))+x10788+((cj11*sj12))+((r22*x10796))+(((-1.0)*r20*x10786*x10794)));
evalcond[6]=(((r11*x10783))+((r12*x10796))+((x10792*x10797))+((sj13*x10790))+(((-1.0)*r10*x10786*x10794))+(((-1.0)*x10793))+x10781);
evalcond[7]=(((cj13*x10787))+((r21*x10786))+(((-1.0)*sj13*x10782*x10794))+(((-1.0)*x10793))+((r20*x10780*x10783))+x10781+(((-1.0)*r22*sj13*x10795)));
evalcond[8]=(((r11*x10786))+((cj13*x10790))+(((-1.0)*sj13*x10792*x10794))+(((-1.0)*sj12*x10784))+(((-1.0)*r12*sj13*x10795))+(((-1.0)*x10788))+((r10*x10780*x10783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10798 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10798.valid){
continue;
}
CheckValue<IkReal> x10799=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10799.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10798.value)+(((1.5707963267949)*(x10799.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x10800=IKsin(j14);
IkReal x10801=IKcos(j14);
IkReal x10802=(sj11*sj12);
IkReal x10803=(gconst4*r21);
IkReal x10804=(gconst5*sj13);
IkReal x10805=((1.0)*cj11);
IkReal x10806=(gconst5*r00);
IkReal x10807=(cj13*gconst5);
IkReal x10808=(gconst4*r20);
IkReal x10809=(cj12*sj11);
IkReal x10810=(gconst4*r00);
IkReal x10811=(gconst4*r10);
IkReal x10812=(gconst4*r01);
IkReal x10813=(gconst4*r11);
IkReal x10814=(cj12*x10805);
IkReal x10815=((1.0)*x10801);
IkReal x10816=((1.0)*x10800);
IkReal x10817=(cj13*x10800);
IkReal x10818=(cj13*x10801);
evalcond[0]=((((-1.0)*gconst5*r20*x10816))+((x10800*x10803))+(((-1.0)*r22*x10815)));
evalcond[1]=((((-1.0)*r12*x10815))+(((-1.0)*gconst5*r10*x10816))+((x10800*x10813)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x10815))+(((-1.0)*x10806*x10816))+((x10800*x10812)));
evalcond[3]=(((r02*x10817))+(((-1.0)*cj13*x10806*x10815))+((sj13*x10810))+((x10812*x10818))+((r01*x10804)));
evalcond[4]=(((r00*x10801*x10804))+((cj13*x10810))+((r01*x10807))+(((-1.0)*sj13*x10812*x10815))+(((-1.0)*r02*sj13*x10816)));
evalcond[5]=(((r22*x10817))+(((-1.0)*r20*x10807*x10815))+((r21*x10804))+((x10803*x10818))+((cj11*sj12))+((sj13*x10808))+x10809);
evalcond[6]=((((-1.0)*r10*x10807*x10815))+((x10813*x10818))+((sj13*x10811))+((r11*x10804))+(((-1.0)*x10814))+((r12*x10817))+x10802);
evalcond[7]=((((-1.0)*r22*sj13*x10816))+((r20*x10801*x10804))+((cj13*x10808))+((r21*x10807))+(((-1.0)*sj13*x10803*x10815))+(((-1.0)*x10814))+x10802);
evalcond[8]=(((cj13*x10811))+(((-1.0)*r12*sj13*x10816))+((r11*x10807))+(((-1.0)*x10809))+(((-1.0)*sj12*x10805))+(((-1.0)*sj13*x10813*x10815))+((r10*x10801*x10804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x10819=((-1.0)*r21);
CheckValue<IkReal> x10822 = IKatan2WithCheck(IkReal(x10819),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10822.valid){
continue;
}
IkReal x10820=((1.0)*(x10822.value));
IkReal x10821=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10820)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10820)));
IkReal gconst4=(x10819*x10821);
IkReal gconst5=((1.0)*r20*x10821);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10823=((-1.0)*r21);
CheckValue<IkReal> x10826 = IKatan2WithCheck(IkReal(x10823),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10826.valid){
continue;
}
IkReal x10824=((1.0)*(x10826.value));
IkReal x10825=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10824)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10824)));
IkReal gconst4=(x10823*x10825);
IkReal gconst5=((1.0)*r20*x10825);
j14eval[0]=0;
j14eval[1]=r12;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x10827=((-1.0)*r21);
CheckValue<IkReal> x10830 = IKatan2WithCheck(IkReal(x10827),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10830.valid){
continue;
}
IkReal x10828=((1.0)*(x10830.value));
IkReal x10829=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10828)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10828)));
IkReal gconst4=(x10827*x10829);
IkReal gconst5=((1.0)*r20*x10829);
j14eval[0]=r12;
j14eval[1]=sj13;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x10831=((-1.0)*r21);
CheckValue<IkReal> x10834 = IKatan2WithCheck(IkReal(x10831),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10834.valid){
continue;
}
IkReal x10832=((1.0)*(x10834.value));
IkReal x10833=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10832)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10832)));
IkReal gconst4=(x10831*x10833);
IkReal gconst5=((1.0)*r20*x10833);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10835=((-1.0)*r21);
CheckValue<IkReal> x10838 = IKatan2WithCheck(IkReal(x10835),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10838.valid){
continue;
}
IkReal x10836=((1.0)*(x10838.value));
IkReal x10837=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10836)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10836)));
IkReal gconst4=(x10835*x10837);
IkReal gconst5=((1.0)*r20*x10837);
j14eval[0]=0;
j14eval[1]=r12;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x10839=((-1.0)*r21);
CheckValue<IkReal> x10842 = IKatan2WithCheck(IkReal(x10839),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10842.valid){
continue;
}
IkReal x10840=((1.0)*(x10842.value));
IkReal x10841=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10840)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10840)));
IkReal gconst4=(x10839*x10841);
IkReal gconst5=((1.0)*r20*x10841);
j14eval[0]=r02;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10843=(gconst5*r00);
IkReal x10844=(gconst4*r01);
CheckValue<IkReal> x10845=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10843*x10844))+(x10844*x10844)+(r02*r02)+(x10843*x10843))),-1);
if(!x10845.valid){
continue;
}
CheckValue<IkReal> x10846 = IKatan2WithCheck(IkReal(((((-1.0)*x10844))+x10843)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10846.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10845.value)))+(x10846.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10847=IKsin(j14);
IkReal x10848=IKcos(j14);
IkReal x10849=(gconst4*r21);
IkReal x10850=(gconst5*r00);
IkReal x10851=(gconst4*r01);
IkReal x10852=(gconst5*r10);
IkReal x10853=(gconst5*r20);
IkReal x10854=(gconst4*r11);
IkReal x10855=((1.0)*x10848);
IkReal x10856=((1.0)*x10847);
evalcond[0]=((((-1.0)*x10853*x10856))+((x10847*x10849))+(((-1.0)*r22*x10855)));
evalcond[1]=((((-1.0)*r12*x10855))+((x10847*x10854))+(((-1.0)*x10852*x10856)));
evalcond[2]=(((x10848*x10850))+(((-1.0)*r02*x10856))+(((-1.0)*x10851*x10855)));
evalcond[3]=((1.0)+((x10847*x10851))+(((-1.0)*r02*x10855))+(((-1.0)*x10850*x10856)));
evalcond[4]=((((-1.0)*r12*x10856))+((x10848*x10852))+(((-1.0)*x10854*x10855))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x10849*x10855))+((x10848*x10853))+(((-1.0)*r22*x10856))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10857=((1.0)*gconst5);
CheckValue<IkReal> x10858=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10857))+(((-1.0)*gconst4*r20)))),-1);
if(!x10858.valid){
continue;
}
CheckValue<IkReal> x10859 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x10857)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10859.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10858.value)))+(x10859.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10860=IKsin(j14);
IkReal x10861=IKcos(j14);
IkReal x10862=(gconst4*r21);
IkReal x10863=(gconst5*r00);
IkReal x10864=(gconst4*r01);
IkReal x10865=(gconst5*r10);
IkReal x10866=(gconst5*r20);
IkReal x10867=(gconst4*r11);
IkReal x10868=((1.0)*x10861);
IkReal x10869=((1.0)*x10860);
evalcond[0]=((((-1.0)*r22*x10868))+(((-1.0)*x10866*x10869))+((x10860*x10862)));
evalcond[1]=((((-1.0)*r12*x10868))+(((-1.0)*x10865*x10869))+((x10860*x10867)));
evalcond[2]=((((-1.0)*x10864*x10868))+(((-1.0)*r02*x10869))+((x10861*x10863)));
evalcond[3]=((1.0)+(((-1.0)*x10863*x10869))+((x10860*x10864))+(((-1.0)*r02*x10868)));
evalcond[4]=((((-1.0)*r12*x10869))+(((-1.0)*x10867*x10868))+((cj12*sj11))+((cj11*sj12))+((x10861*x10865)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r22*x10869))+(((-1.0)*x10862*x10868))+(((-1.0)*cj11*cj12))+((x10861*x10866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10870=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10870.valid){
continue;
}
CheckValue<IkReal> x10871 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10871.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10870.value)))+(x10871.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10872=IKsin(j14);
IkReal x10873=IKcos(j14);
IkReal x10874=(gconst4*r21);
IkReal x10875=(gconst5*r00);
IkReal x10876=(gconst4*r01);
IkReal x10877=(gconst5*r10);
IkReal x10878=(gconst5*r20);
IkReal x10879=(gconst4*r11);
IkReal x10880=((1.0)*x10873);
IkReal x10881=((1.0)*x10872);
evalcond[0]=((((-1.0)*x10878*x10881))+(((-1.0)*r22*x10880))+((x10872*x10874)));
evalcond[1]=((((-1.0)*x10877*x10881))+(((-1.0)*r12*x10880))+((x10872*x10879)));
evalcond[2]=((((-1.0)*r02*x10881))+(((-1.0)*x10876*x10880))+((x10873*x10875)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10880))+(((-1.0)*x10875*x10881))+((x10872*x10876)));
evalcond[4]=((((-1.0)*x10879*x10880))+((cj12*sj11))+(((-1.0)*r12*x10881))+((cj11*sj12))+((x10873*x10877)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r22*x10881))+(((-1.0)*x10874*x10880))+(((-1.0)*cj11*cj12))+((x10873*x10878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x10882=((-1.0)*r21);
CheckValue<IkReal> x10885 = IKatan2WithCheck(IkReal(x10882),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10885.valid){
continue;
}
IkReal x10883=((1.0)*(x10885.value));
IkReal x10884=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10883)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10883)));
IkReal gconst4=(x10882*x10884);
IkReal gconst5=((1.0)*r20*x10884);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10886=((-1.0)*r21);
CheckValue<IkReal> x10889 = IKatan2WithCheck(IkReal(x10886),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10889.valid){
continue;
}
IkReal x10887=((1.0)*(x10889.value));
IkReal x10888=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10887)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10887)));
IkReal gconst4=(x10886*x10888);
IkReal gconst5=((1.0)*r20*x10888);
j14eval[0]=0;
j14eval[1]=r12;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10890=((-1.0)*r21);
CheckValue<IkReal> x10893 = IKatan2WithCheck(IkReal(x10890),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10893.valid){
continue;
}
IkReal x10891=((1.0)*(x10893.value));
IkReal x10892=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10891)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10891)));
IkReal gconst4=(x10890*x10892);
IkReal gconst5=((1.0)*r20*x10892);
IkReal x10894=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10898=IKPowWithIntegerCheck(x10894,-1);
if(!x10898.valid){
continue;
}
IkReal x10895=x10898.value;
IkReal x10896=((1.0)*x10895);
IkReal x10897=((((-1.0)*x10896*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x10896*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x10895)));
j14eval[0]=x10897;
j14eval[1]=IKsign(x10897);
j14eval[2]=r02;
j14eval[3]=x10894;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10899=(gconst4*r01);
IkReal x10900=(gconst5*r00);
CheckValue<IkReal> x10901=IKPowWithIntegerCheck(IKsign(((((2.0)*x10899*x10900))+(((-1.0)*(x10899*x10899)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10900*x10900))))),-1);
if(!x10901.valid){
continue;
}
CheckValue<IkReal> x10902 = IKatan2WithCheck(IkReal(((((-1.0)*x10900))+x10899)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10902.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10901.value)))+(x10902.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10903=IKcos(j14);
IkReal x10904=IKsin(j14);
IkReal x10905=((1.0)*x10903);
IkReal x10906=(gconst4*x10903);
IkReal x10907=(gconst4*x10904);
IkReal x10908=((1.0)*gconst5*x10904);
evalcond[0]=(((r01*x10906))+(((-1.0)*gconst5*r00*x10905))+((r02*x10904)));
evalcond[1]=((((-1.0)*r20*x10908))+(((-1.0)*r22*x10905))+((r21*x10907)));
evalcond[2]=((((-1.0)*r10*x10908))+(((-1.0)*r12*x10905))+((r11*x10907)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10908))+((r01*x10907))+(((-1.0)*r02*x10905)));
evalcond[4]=(((r12*x10904))+(((-1.0)*gconst5*r10*x10905))+((cj12*sj11))+((cj11*sj12))+((r11*x10906)));
evalcond[5]=(((sj11*sj12))+((r22*x10904))+(((-1.0)*gconst5*r20*x10905))+((r21*x10906))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10909=((1.0)*gconst5);
CheckValue<IkReal> x10910=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10909))+(((-1.0)*gconst4*r20)))),-1);
if(!x10910.valid){
continue;
}
CheckValue<IkReal> x10911 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x10909)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10911.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10910.value)))+(x10911.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10912=IKcos(j14);
IkReal x10913=IKsin(j14);
IkReal x10914=((1.0)*x10912);
IkReal x10915=(gconst4*x10912);
IkReal x10916=(gconst4*x10913);
IkReal x10917=((1.0)*gconst5*x10913);
evalcond[0]=(((r02*x10913))+((r01*x10915))+(((-1.0)*gconst5*r00*x10914)));
evalcond[1]=((((-1.0)*r22*x10914))+(((-1.0)*r20*x10917))+((r21*x10916)));
evalcond[2]=((((-1.0)*r12*x10914))+(((-1.0)*r10*x10917))+((r11*x10916)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10914))+((r01*x10916))+(((-1.0)*r00*x10917)));
evalcond[4]=((((-1.0)*gconst5*r10*x10914))+((r12*x10913))+((cj12*sj11))+((r11*x10915))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r21*x10915))+((r22*x10913))+(((-1.0)*gconst5*r20*x10914))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10918=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10918.valid){
continue;
}
CheckValue<IkReal> x10919 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10919.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10918.value)))+(x10919.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10920=IKcos(j14);
IkReal x10921=IKsin(j14);
IkReal x10922=((1.0)*x10920);
IkReal x10923=(gconst4*x10920);
IkReal x10924=(gconst4*x10921);
IkReal x10925=((1.0)*gconst5*x10921);
evalcond[0]=((((-1.0)*gconst5*r00*x10922))+((r02*x10921))+((r01*x10923)));
evalcond[1]=((((-1.0)*r22*x10922))+((r21*x10924))+(((-1.0)*r20*x10925)));
evalcond[2]=((((-1.0)*r10*x10925))+(((-1.0)*r12*x10922))+((r11*x10924)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10922))+((r01*x10924))+(((-1.0)*r00*x10925)));
evalcond[4]=((((-1.0)*gconst5*r10*x10922))+((r12*x10921))+((cj12*sj11))+((r11*x10923))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*gconst5*r20*x10922))+((r21*x10923))+((r22*x10921))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x10926=((-1.0)*r21);
CheckValue<IkReal> x10929 = IKatan2WithCheck(IkReal(x10926),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10929.valid){
continue;
}
IkReal x10927=((1.0)*(x10929.value));
IkReal x10928=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10927)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10927)));
IkReal gconst4=(x10926*x10928);
IkReal gconst5=((1.0)*r20*x10928);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10930=((-1.0)*r21);
CheckValue<IkReal> x10933 = IKatan2WithCheck(IkReal(x10930),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10933.valid){
continue;
}
IkReal x10931=((1.0)*(x10933.value));
IkReal x10932=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10931)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10931)));
IkReal gconst4=(x10930*x10932);
IkReal gconst5=((1.0)*r20*x10932);
j14eval[0]=0;
j14eval[1]=r12;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10934=((-1.0)*r21);
CheckValue<IkReal> x10937 = IKatan2WithCheck(IkReal(x10934),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10937.valid){
continue;
}
IkReal x10935=((1.0)*(x10937.value));
IkReal x10936=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10935)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10935)));
IkReal gconst4=(x10934*x10936);
IkReal gconst5=((1.0)*r20*x10936);
IkReal x10938=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10942=IKPowWithIntegerCheck(x10938,-1);
if(!x10942.valid){
continue;
}
IkReal x10939=x10942.value;
IkReal x10940=((1.0)*x10939);
IkReal x10941=((((-1.0)*(r02*r02)))+(((-1.0)*x10940*(r01*r01)*(r21*r21)))+(((-1.0)*x10940*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x10939)));
j14eval[0]=x10941;
j14eval[1]=IKsign(x10941);
j14eval[2]=r02;
j14eval[3]=x10938;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10943=(gconst4*r01);
IkReal x10944=(gconst5*r00);
CheckValue<IkReal> x10945 = IKatan2WithCheck(IkReal(((((-1.0)*x10944))+x10943)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10945.valid){
continue;
}
CheckValue<IkReal> x10946=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10943*x10943)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x10944*x10944)))+(((2.0)*x10943*x10944)))),-1);
if(!x10946.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10945.value)+(((1.5707963267949)*(x10946.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10947=IKcos(j14);
IkReal x10948=IKsin(j14);
IkReal x10949=((1.0)*x10947);
IkReal x10950=(gconst4*x10947);
IkReal x10951=(gconst4*x10948);
IkReal x10952=((1.0)*gconst5*x10948);
evalcond[0]=(((r01*x10950))+(((-1.0)*gconst5*r00*x10949))+((r02*x10948)));
evalcond[1]=((((-1.0)*r20*x10952))+(((-1.0)*r22*x10949))+((r21*x10951)));
evalcond[2]=((((-1.0)*r12*x10949))+(((-1.0)*r10*x10952))+((r11*x10951)));
evalcond[3]=((1.0)+((r01*x10951))+(((-1.0)*r02*x10949))+(((-1.0)*r00*x10952)));
evalcond[4]=(((cj12*sj11))+(((-1.0)*gconst5*r20*x10949))+((r21*x10950))+((cj11*sj12))+((r22*x10948)));
evalcond[5]=((((-1.0)*sj11*sj12))+(((-1.0)*gconst5*r10*x10949))+((r12*x10948))+((cj11*cj12))+((r11*x10950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10953=((1.0)*gconst5);
CheckValue<IkReal> x10954 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x10953)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10954.valid){
continue;
}
CheckValue<IkReal> x10955=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10953))+(((-1.0)*gconst4*r20)))),-1);
if(!x10955.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10954.value)+(((1.5707963267949)*(x10955.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10956=IKcos(j14);
IkReal x10957=IKsin(j14);
IkReal x10958=((1.0)*x10956);
IkReal x10959=(gconst4*x10956);
IkReal x10960=(gconst4*x10957);
IkReal x10961=((1.0)*gconst5*x10957);
evalcond[0]=(((r02*x10957))+((r01*x10959))+(((-1.0)*gconst5*r00*x10958)));
evalcond[1]=((((-1.0)*r20*x10961))+(((-1.0)*r22*x10958))+((r21*x10960)));
evalcond[2]=(((r11*x10960))+(((-1.0)*r10*x10961))+(((-1.0)*r12*x10958)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10961))+((r01*x10960))+(((-1.0)*r02*x10958)));
evalcond[4]=(((r22*x10957))+((cj12*sj11))+((r21*x10959))+(((-1.0)*gconst5*r20*x10958))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*gconst5*r10*x10958))+((r12*x10957))+((r11*x10959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10962=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10962.valid){
continue;
}
CheckValue<IkReal> x10963 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10963.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10962.value)))+(x10963.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10964=IKcos(j14);
IkReal x10965=IKsin(j14);
IkReal x10966=((1.0)*x10964);
IkReal x10967=(gconst4*x10964);
IkReal x10968=(gconst4*x10965);
IkReal x10969=((1.0)*gconst5*x10965);
evalcond[0]=(((r02*x10965))+((r01*x10967))+(((-1.0)*gconst5*r00*x10966)));
evalcond[1]=((((-1.0)*r20*x10969))+(((-1.0)*r22*x10966))+((r21*x10968)));
evalcond[2]=(((r11*x10968))+(((-1.0)*r10*x10969))+(((-1.0)*r12*x10966)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10969))+((r01*x10968))+(((-1.0)*r02*x10966)));
evalcond[4]=(((r22*x10965))+((cj12*sj11))+((r21*x10967))+(((-1.0)*gconst5*r20*x10966))+((cj11*sj12)));
evalcond[5]=(((r11*x10967))+(((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*gconst5*r10*x10966))+((r12*x10965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x10970=((-1.0)*r21);
CheckValue<IkReal> x10973 = IKatan2WithCheck(IkReal(x10970),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10973.valid){
continue;
}
IkReal x10971=((1.0)*(x10973.value));
IkReal x10972=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10971)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10971)));
IkReal gconst4=(x10970*x10972);
IkReal gconst5=((1.0)*r20*x10972);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10974=((-1.0)*r21);
CheckValue<IkReal> x10977 = IKatan2WithCheck(IkReal(x10974),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10977.valid){
continue;
}
IkReal x10975=((1.0)*(x10977.value));
IkReal x10976=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10975)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10975)));
IkReal gconst4=(x10974*x10976);
IkReal gconst5=((1.0)*r20*x10976);
j14eval[0]=0;
j14eval[1]=r12;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x10978=((-1.0)*r21);
CheckValue<IkReal> x10981 = IKatan2WithCheck(IkReal(x10978),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10981.valid){
continue;
}
IkReal x10979=((1.0)*(x10981.value));
IkReal x10980=x9876;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10979)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10979)));
IkReal gconst4=(x10978*x10980);
IkReal gconst5=((1.0)*r20*x10980);
j14eval[0]=r02;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10982=(gconst5*r00);
IkReal x10983=(gconst4*r01);
CheckValue<IkReal> x10984=IKPowWithIntegerCheck(IKsign(((x10982*x10982)+(((-2.0)*x10982*x10983))+(x10983*x10983)+(r02*r02))),-1);
if(!x10984.valid){
continue;
}
CheckValue<IkReal> x10985 = IKatan2WithCheck(IkReal(((((-1.0)*x10983))+x10982)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10985.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10984.value)))+(x10985.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10986=IKsin(j14);
IkReal x10987=IKcos(j14);
IkReal x10988=(gconst4*r21);
IkReal x10989=(gconst5*r00);
IkReal x10990=(gconst4*r01);
IkReal x10991=(gconst5*r10);
IkReal x10992=(gconst5*r20);
IkReal x10993=(gconst4*r11);
IkReal x10994=((1.0)*x10987);
IkReal x10995=((1.0)*x10986);
evalcond[0]=((((-1.0)*x10992*x10995))+((x10986*x10988))+(((-1.0)*r22*x10994)));
evalcond[1]=((((-1.0)*x10991*x10995))+((x10986*x10993))+(((-1.0)*r12*x10994)));
evalcond[2]=(((x10987*x10989))+(((-1.0)*x10990*x10994))+(((-1.0)*r02*x10995)));
evalcond[3]=((1.0)+(((-1.0)*x10989*x10995))+((x10986*x10990))+(((-1.0)*r02*x10994)));
evalcond[4]=(((x10987*x10992))+(((-1.0)*r22*x10995))+(((-1.0)*x10988*x10994))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((x10987*x10991))+(((-1.0)*x10993*x10994))+(((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*r12*x10995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10996=((1.0)*gconst5);
CheckValue<IkReal> x10997=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10996))+(((-1.0)*gconst4*r20)))),-1);
if(!x10997.valid){
continue;
}
CheckValue<IkReal> x10998 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x10996)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10998.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10997.value)))+(x10998.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10999=IKsin(j14);
IkReal x11000=IKcos(j14);
IkReal x11001=(gconst4*r21);
IkReal x11002=(gconst5*r00);
IkReal x11003=(gconst4*r01);
IkReal x11004=(gconst5*r10);
IkReal x11005=(gconst5*r20);
IkReal x11006=(gconst4*r11);
IkReal x11007=((1.0)*x11000);
IkReal x11008=((1.0)*x10999);
evalcond[0]=((((-1.0)*r22*x11007))+(((-1.0)*x11005*x11008))+((x10999*x11001)));
evalcond[1]=((((-1.0)*x11004*x11008))+(((-1.0)*r12*x11007))+((x10999*x11006)));
evalcond[2]=((((-1.0)*r02*x11008))+((x11000*x11002))+(((-1.0)*x11003*x11007)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11007))+(((-1.0)*x11002*x11008))+((x10999*x11003)));
evalcond[4]=((((-1.0)*r22*x11008))+((x11000*x11005))+(((-1.0)*x11001*x11007))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+((x11000*x11004))+(((-1.0)*r12*x11008))+(((-1.0)*x11006*x11007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x11009=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11009.valid){
continue;
}
CheckValue<IkReal> x11010 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11010.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11009.value)))+(x11010.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11011=IKsin(j14);
IkReal x11012=IKcos(j14);
IkReal x11013=(gconst4*r21);
IkReal x11014=(gconst5*r00);
IkReal x11015=(gconst4*r01);
IkReal x11016=(gconst5*r10);
IkReal x11017=(gconst5*r20);
IkReal x11018=(gconst4*r11);
IkReal x11019=((1.0)*x11012);
IkReal x11020=((1.0)*x11011);
evalcond[0]=((((-1.0)*r22*x11019))+((x11011*x11013))+(((-1.0)*x11017*x11020)));
evalcond[1]=((((-1.0)*r12*x11019))+((x11011*x11018))+(((-1.0)*x11016*x11020)));
evalcond[2]=((((-1.0)*r02*x11020))+(((-1.0)*x11015*x11019))+((x11012*x11014)));
evalcond[3]=((1.0)+(((-1.0)*x11014*x11020))+(((-1.0)*r02*x11019))+((x11011*x11015)));
evalcond[4]=((((-1.0)*x11013*x11019))+((x11012*x11017))+(((-1.0)*r22*x11020))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+(((-1.0)*x11018*x11019))+((cj11*cj12))+((x11012*x11016))+(((-1.0)*r12*x11020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x11021=((-1.0)*r21);
IkReal x11022=((-1.0)*r20);
CheckValue<IkReal> x11024 = IKatan2WithCheck(IkReal(x11021),IkReal(x11022),IKFAST_ATAN2_MAGTHRESH);
if(!x11024.valid){
continue;
}
IkReal x11023=((1.0)*(x11024.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x11023)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11022);
rxp0_2=(py*r00);
rxp1_0=(py*x11021);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11023)));
IkReal gconst4=x11021;
IkReal gconst5=((1.0)*r20);
IkReal x11025=((1.0)*r01*r21);
IkReal x11026=((1.0)*r00*r20);
j14eval[0]=((((-1.0)*x11025))+(((-1.0)*x11026)));
j14eval[1]=((((-1.0)*cj13*x11026))+(((-1.0)*cj13*x11025)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x11027=((-1.0)*r21);
IkReal x11028=((-1.0)*r20);
CheckValue<IkReal> x11030 = IKatan2WithCheck(IkReal(x11027),IkReal(x11028),IKFAST_ATAN2_MAGTHRESH);
if(!x11030.valid){
continue;
}
IkReal x11029=((1.0)*(x11030.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x11029)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11028);
rxp0_2=(py*r00);
rxp1_0=(py*x11027);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11029)));
IkReal gconst4=x11027;
IkReal gconst5=((1.0)*r20);
IkReal x11031=((1.0)*r01*r21);
IkReal x11032=((1.0)*r00*r20);
j14eval[0]=((((-1.0)*x11032))+(((-1.0)*x11031)));
j14eval[1]=(((sj13*x11031))+((sj13*x11032)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x11033=((-1.0)*r21);
IkReal x11034=((-1.0)*r20);
CheckValue<IkReal> x11036 = IKatan2WithCheck(IkReal(x11033),IkReal(x11034),IKFAST_ATAN2_MAGTHRESH);
if(!x11036.valid){
continue;
}
IkReal x11035=((1.0)*(x11036.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x11035)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11034);
rxp0_2=(py*r00);
rxp1_0=(py*x11033);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11035)));
IkReal gconst4=x11033;
IkReal gconst5=((1.0)*r20);
IkReal x11037=((1.0)*cj13);
j14eval[0]=cj13;
j14eval[1]=r12;
j14eval[2]=((((-1.0)*r00*r20*x11037))+(((-1.0)*r01*r21*x11037)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11038=((1.0)*gconst5);
CheckValue<IkReal> x11039=IKPowWithIntegerCheck(cj13,-1);
if(!x11039.valid){
continue;
}
CheckValue<IkReal> x11040=IKPowWithIntegerCheck(r12,-1);
if(!x11040.valid){
continue;
}
CheckValue<IkReal> x11041=IKPowWithIntegerCheck((((cj13*gconst4*r01))+(((-1.0)*cj13*r00*x11038))),-1);
if(!x11041.valid){
continue;
}
if( IKabs(((x11039.value)*(x11040.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11041.value)*(((((-1.0)*r01*sj13*x11038))+(((-1.0)*gconst4*r00*sj13)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11039.value)*(x11040.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12))))))+IKsqr(((x11041.value)*(((((-1.0)*r01*sj13*x11038))+(((-1.0)*gconst4*r00*sj13))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x11039.value)*(x11040.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12))))), ((x11041.value)*(((((-1.0)*r01*sj13*x11038))+(((-1.0)*gconst4*r00*sj13))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11042=IKsin(j14);
IkReal x11043=IKcos(j14);
IkReal x11044=(cj12*sj11);
IkReal x11045=(cj11*sj12);
IkReal x11046=(gconst4*r21);
IkReal x11047=(gconst5*r01);
IkReal x11048=(cj11*cj12);
IkReal x11049=(gconst5*r00);
IkReal x11050=(gconst4*r20);
IkReal x11051=(sj11*sj12);
IkReal x11052=(gconst5*r20);
IkReal x11053=(gconst4*r01);
IkReal x11054=(gconst4*r00);
IkReal x11055=(gconst5*r21);
IkReal x11056=(sj13*x11043);
IkReal x11057=(cj13*x11043);
IkReal x11058=(r12*x11042);
IkReal x11059=(x11045+x11044);
IkReal x11060=((1.0)*gconst5*x11042);
evalcond[0]=((-1.0)*r12*x11043);
evalcond[1]=(((x11042*x11046))+(((-1.0)*x11042*x11052)));
evalcond[2]=(x11048+(((-1.0)*x11051))+((cj13*x11058)));
evalcond[3]=(x11059+(((-1.0)*sj13*x11058)));
evalcond[4]=((1.0)+(((-1.0)*x11042*x11049))+((x11042*x11053)));
evalcond[5]=((((-1.0)*x11049*x11057))+((sj13*x11047))+((x11053*x11057))+((sj13*x11054)));
evalcond[6]=((((-1.0)*x11053*x11056))+((cj13*x11047))+((cj13*x11054))+((x11049*x11056)));
evalcond[7]=(((x11046*x11057))+(((-1.0)*x11052*x11057))+x11059+((sj13*x11050))+((sj13*x11055)));
evalcond[8]=((((-1.0)*x11046*x11056))+((x11052*x11056))+x11051+(((-1.0)*x11048))+((cj13*x11055))+((cj13*x11050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11061=((1.0)*cj13);
IkReal x11062=(gconst4*r01);
IkReal x11063=(gconst5*r00);
CheckValue<IkReal> x11064=IKPowWithIntegerCheck((x11062+(((-1.0)*x11063))),-1);
if(!x11064.valid){
continue;
}
CheckValue<IkReal> x11065=IKPowWithIntegerCheck((((sj13*x11063))+(((-1.0)*sj13*x11062))),-1);
if(!x11065.valid){
continue;
}
if( IKabs(((-1.0)*(x11064.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11065.value)*(((((-1.0)*gconst5*r01*x11061))+(((-1.0)*gconst4*r00*x11061)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11064.value)))+IKsqr(((x11065.value)*(((((-1.0)*gconst5*r01*x11061))+(((-1.0)*gconst4*r00*x11061))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*(x11064.value)), ((x11065.value)*(((((-1.0)*gconst5*r01*x11061))+(((-1.0)*gconst4*r00*x11061))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11066=IKsin(j14);
IkReal x11067=IKcos(j14);
IkReal x11068=(cj12*sj11);
IkReal x11069=(cj11*sj12);
IkReal x11070=(gconst4*r21);
IkReal x11071=(gconst5*r01);
IkReal x11072=(cj11*cj12);
IkReal x11073=(gconst5*r00);
IkReal x11074=(gconst4*r20);
IkReal x11075=(sj11*sj12);
IkReal x11076=(gconst5*r20);
IkReal x11077=(gconst4*r01);
IkReal x11078=(gconst4*r00);
IkReal x11079=(gconst5*r21);
IkReal x11080=(sj13*x11067);
IkReal x11081=(cj13*x11067);
IkReal x11082=(r12*x11066);
IkReal x11083=(x11069+x11068);
IkReal x11084=((1.0)*gconst5*x11066);
evalcond[0]=((-1.0)*r12*x11067);
evalcond[1]=(((x11066*x11070))+(((-1.0)*x11066*x11076)));
evalcond[2]=(x11072+((cj13*x11082))+(((-1.0)*x11075)));
evalcond[3]=((((-1.0)*sj13*x11082))+x11083);
evalcond[4]=((1.0)+((x11066*x11077))+(((-1.0)*x11066*x11073)));
evalcond[5]=(((sj13*x11078))+((sj13*x11071))+(((-1.0)*x11073*x11081))+((x11077*x11081)));
evalcond[6]=(((x11073*x11080))+((cj13*x11071))+((cj13*x11078))+(((-1.0)*x11077*x11080)));
evalcond[7]=(((x11070*x11081))+x11083+((sj13*x11079))+((sj13*x11074))+(((-1.0)*x11076*x11081)));
evalcond[8]=(((cj13*x11079))+((cj13*x11074))+(((-1.0)*x11070*x11080))+x11075+((x11076*x11080))+(((-1.0)*x11072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11085=(gconst4*r01);
IkReal x11086=((1.0)*r00);
CheckValue<IkReal> x11087=IKPowWithIntegerCheck((x11085+(((-1.0)*gconst5*x11086))),-1);
if(!x11087.valid){
continue;
}
CheckValue<IkReal> x11088=IKPowWithIntegerCheck(((((-1.0)*cj13*gconst5*x11086))+((cj13*x11085))),-1);
if(!x11088.valid){
continue;
}
if( IKabs(((-1.0)*(x11087.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11088.value)*(((((-1.0)*gconst5*r01*sj13))+(((-1.0)*gconst4*sj13*x11086)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11087.value)))+IKsqr(((x11088.value)*(((((-1.0)*gconst5*r01*sj13))+(((-1.0)*gconst4*sj13*x11086))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*(x11087.value)), ((x11088.value)*(((((-1.0)*gconst5*r01*sj13))+(((-1.0)*gconst4*sj13*x11086))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11089=IKsin(j14);
IkReal x11090=IKcos(j14);
IkReal x11091=(cj12*sj11);
IkReal x11092=(cj11*sj12);
IkReal x11093=(gconst4*r21);
IkReal x11094=(gconst5*r01);
IkReal x11095=(cj11*cj12);
IkReal x11096=(gconst5*r00);
IkReal x11097=(gconst4*r20);
IkReal x11098=(sj11*sj12);
IkReal x11099=(gconst5*r20);
IkReal x11100=(gconst4*r01);
IkReal x11101=(gconst4*r00);
IkReal x11102=(gconst5*r21);
IkReal x11103=(sj13*x11090);
IkReal x11104=(cj13*x11090);
IkReal x11105=(r12*x11089);
IkReal x11106=(x11092+x11091);
IkReal x11107=((1.0)*gconst5*x11089);
evalcond[0]=((-1.0)*r12*x11090);
evalcond[1]=(((x11089*x11093))+(((-1.0)*x11089*x11099)));
evalcond[2]=(((cj13*x11105))+(((-1.0)*x11098))+x11095);
evalcond[3]=((((-1.0)*sj13*x11105))+x11106);
evalcond[4]=((1.0)+((x11089*x11100))+(((-1.0)*x11089*x11096)));
evalcond[5]=((((-1.0)*x11096*x11104))+((x11100*x11104))+((sj13*x11094))+((sj13*x11101)));
evalcond[6]=(((cj13*x11094))+((cj13*x11101))+((x11096*x11103))+(((-1.0)*x11100*x11103)));
evalcond[7]=(((x11093*x11104))+((sj13*x11097))+x11106+((sj13*x11102))+(((-1.0)*x11099*x11104)));
evalcond[8]=(((cj13*x11097))+((cj13*x11102))+(((-1.0)*x11095))+x11098+(((-1.0)*x11093*x11103))+((x11099*x11103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11108=gconst4*gconst4;
IkReal x11109=gconst5*gconst5;
IkReal x11110=(r00*sj13);
IkReal x11111=(cj13*r00);
IkReal x11112=(r01*sj13);
IkReal x11113=(cj13*r01);
IkReal x11114=(r21*x11108);
IkReal x11115=(gconst4*gconst5*r21);
IkReal x11116=(gconst4*gconst5*r20);
IkReal x11117=((1.0)*r20*x11109);
CheckValue<IkReal> x11118 = IKatan2WithCheck(IkReal((((gconst4*r22*x11110))+((gconst5*r22*x11112)))),IkReal(((((-1.0)*x11110*x11116))+((x11112*x11115))+(((-1.0)*x11112*x11117))+((x11110*x11114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11118.valid){
continue;
}
CheckValue<IkReal> x11119=IKPowWithIntegerCheck(IKsign((((x11111*x11115))+(((-1.0)*cj13*r02*r22))+((x11113*x11116))+(((-1.0)*x11111*x11117))+(((-1.0)*x11113*x11114)))),-1);
if(!x11119.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11118.value)+(((1.5707963267949)*(x11119.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11120=IKsin(j14);
IkReal x11121=IKcos(j14);
IkReal x11122=(cj12*sj11);
IkReal x11123=(cj11*sj12);
IkReal x11124=(gconst4*r21);
IkReal x11125=(gconst5*sj13);
IkReal x11126=(cj11*cj12);
IkReal x11127=(gconst5*r00);
IkReal x11128=(cj13*gconst5);
IkReal x11129=(gconst4*r20);
IkReal x11130=(sj11*sj12);
IkReal x11131=(gconst4*r00);
IkReal x11132=(gconst4*r10);
IkReal x11133=(gconst4*r01);
IkReal x11134=(gconst4*r11);
IkReal x11135=((1.0)*x11121);
IkReal x11136=((1.0)*x11120);
IkReal x11137=(cj13*x11120);
IkReal x11138=(cj13*x11121);
IkReal x11139=(x11122+x11123);
evalcond[0]=(((x11120*x11124))+(((-1.0)*r22*x11135))+(((-1.0)*gconst5*r20*x11136)));
evalcond[1]=(((x11120*x11134))+(((-1.0)*gconst5*r10*x11136))+(((-1.0)*r12*x11135)));
evalcond[2]=((1.0)+((x11120*x11133))+(((-1.0)*x11127*x11136))+(((-1.0)*r02*x11135)));
evalcond[3]=(((r02*x11137))+(((-1.0)*cj13*x11127*x11135))+((sj13*x11131))+((r01*x11125))+((x11133*x11138)));
evalcond[4]=(((cj13*x11131))+(((-1.0)*sj13*x11133*x11135))+((r00*x11121*x11125))+(((-1.0)*r02*sj13*x11136))+((r01*x11128)));
evalcond[5]=(((r22*x11137))+((r21*x11125))+((x11124*x11138))+(((-1.0)*r20*x11128*x11135))+x11139+((sj13*x11129)));
evalcond[6]=((((-1.0)*x11130))+(((-1.0)*r10*x11128*x11135))+((x11134*x11138))+x11126+((r11*x11125))+((sj13*x11132))+((r12*x11137)));
evalcond[7]=(((cj13*x11132))+(((-1.0)*sj13*x11134*x11135))+((r10*x11121*x11125))+x11139+((r11*x11128))+(((-1.0)*r12*sj13*x11136)));
evalcond[8]=(((r21*x11128))+(((-1.0)*x11126))+(((-1.0)*r22*sj13*x11136))+((cj13*x11129))+x11130+(((-1.0)*sj13*x11124*x11135))+((r20*x11121*x11125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11140=((1.0)*gconst5);
CheckValue<IkReal> x11141 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11140)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11141.valid){
continue;
}
CheckValue<IkReal> x11142=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11140))+(((-1.0)*gconst4*r20)))),-1);
if(!x11142.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11141.value)+(((1.5707963267949)*(x11142.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11143=IKsin(j14);
IkReal x11144=IKcos(j14);
IkReal x11145=(cj12*sj11);
IkReal x11146=(cj11*sj12);
IkReal x11147=(gconst4*r21);
IkReal x11148=(gconst5*sj13);
IkReal x11149=(cj11*cj12);
IkReal x11150=(gconst5*r00);
IkReal x11151=(cj13*gconst5);
IkReal x11152=(gconst4*r20);
IkReal x11153=(sj11*sj12);
IkReal x11154=(gconst4*r00);
IkReal x11155=(gconst4*r10);
IkReal x11156=(gconst4*r01);
IkReal x11157=(gconst4*r11);
IkReal x11158=((1.0)*x11144);
IkReal x11159=((1.0)*x11143);
IkReal x11160=(cj13*x11143);
IkReal x11161=(cj13*x11144);
IkReal x11162=(x11145+x11146);
evalcond[0]=((((-1.0)*gconst5*r20*x11159))+((x11143*x11147))+(((-1.0)*r22*x11158)));
evalcond[1]=((((-1.0)*gconst5*r10*x11159))+((x11143*x11157))+(((-1.0)*r12*x11158)));
evalcond[2]=((1.0)+((x11143*x11156))+(((-1.0)*x11150*x11159))+(((-1.0)*r02*x11158)));
evalcond[3]=(((r01*x11148))+(((-1.0)*cj13*x11150*x11158))+((x11156*x11161))+((r02*x11160))+((sj13*x11154)));
evalcond[4]=((((-1.0)*sj13*x11156*x11158))+((r01*x11151))+(((-1.0)*r02*sj13*x11159))+((cj13*x11154))+((r00*x11144*x11148)));
evalcond[5]=(((x11147*x11161))+((r21*x11148))+(((-1.0)*r20*x11151*x11158))+x11162+((r22*x11160))+((sj13*x11152)));
evalcond[6]=(((r12*x11160))+(((-1.0)*x11153))+((r11*x11148))+x11149+((x11157*x11161))+((sj13*x11155))+(((-1.0)*r10*x11151*x11158)));
evalcond[7]=((((-1.0)*sj13*x11157*x11158))+((r10*x11144*x11148))+((r11*x11151))+x11162+(((-1.0)*r12*sj13*x11159))+((cj13*x11155)));
evalcond[8]=(((r21*x11151))+(((-1.0)*sj13*x11147*x11158))+(((-1.0)*r22*sj13*x11159))+(((-1.0)*x11149))+((r20*x11144*x11148))+x11153+((cj13*x11152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x11163=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11163.valid){
continue;
}
CheckValue<IkReal> x11164 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11164.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11163.value)))+(x11164.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11165=IKsin(j14);
IkReal x11166=IKcos(j14);
IkReal x11167=(cj12*sj11);
IkReal x11168=(cj11*sj12);
IkReal x11169=(gconst4*r21);
IkReal x11170=(gconst5*sj13);
IkReal x11171=(cj11*cj12);
IkReal x11172=(gconst5*r00);
IkReal x11173=(cj13*gconst5);
IkReal x11174=(gconst4*r20);
IkReal x11175=(sj11*sj12);
IkReal x11176=(gconst4*r00);
IkReal x11177=(gconst4*r10);
IkReal x11178=(gconst4*r01);
IkReal x11179=(gconst4*r11);
IkReal x11180=((1.0)*x11166);
IkReal x11181=((1.0)*x11165);
IkReal x11182=(cj13*x11165);
IkReal x11183=(cj13*x11166);
IkReal x11184=(x11168+x11167);
evalcond[0]=((((-1.0)*r22*x11180))+((x11165*x11169))+(((-1.0)*gconst5*r20*x11181)));
evalcond[1]=((((-1.0)*r12*x11180))+((x11165*x11179))+(((-1.0)*gconst5*r10*x11181)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11180))+((x11165*x11178))+(((-1.0)*x11172*x11181)));
evalcond[3]=(((r01*x11170))+((sj13*x11176))+((x11178*x11183))+((r02*x11182))+(((-1.0)*cj13*x11172*x11180)));
evalcond[4]=(((r01*x11173))+((r00*x11166*x11170))+((cj13*x11176))+(((-1.0)*r02*sj13*x11181))+(((-1.0)*sj13*x11178*x11180)));
evalcond[5]=(((x11169*x11183))+((sj13*x11174))+x11184+((r22*x11182))+(((-1.0)*r20*x11173*x11180))+((r21*x11170)));
evalcond[6]=(((r11*x11170))+((r12*x11182))+((sj13*x11177))+(((-1.0)*x11175))+x11171+((x11179*x11183))+(((-1.0)*r10*x11173*x11180)));
evalcond[7]=((((-1.0)*sj13*x11179*x11180))+(((-1.0)*r12*sj13*x11181))+((r11*x11173))+((r10*x11166*x11170))+x11184+((cj13*x11177)));
evalcond[8]=((((-1.0)*sj13*x11169*x11180))+((r20*x11166*x11170))+(((-1.0)*x11171))+x11175+(((-1.0)*r22*sj13*x11181))+((cj13*x11174))+((r21*x11173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x11185=((-1.0)*r21);
IkReal x11186=((-1.0)*px);
CheckValue<IkReal> x11188 = IKatan2WithCheck(IkReal(x11185),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11188.valid){
continue;
}
IkReal x11187=((1.0)*(x11188.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x11187)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11186);
rxp1_1=(px*r21);
rxp1_2=(r11*x11186);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11187)));
IkReal gconst4=x11185;
IkReal gconst5=((1.0)*r20);
j14eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j14eval[1]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x11189=((-1.0)*r21);
IkReal x11190=((-1.0)*px);
CheckValue<IkReal> x11192 = IKatan2WithCheck(IkReal(x11189),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11192.valid){
continue;
}
IkReal x11191=((1.0)*(x11192.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x11191)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11190);
rxp1_1=(px*r21);
rxp1_2=(r11*x11190);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11191)));
IkReal gconst4=x11189;
IkReal gconst5=((1.0)*r20);
IkReal x11193=((1.0)*cj13);
j14eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j14eval[1]=((((-1.0)*x11193))+((x11193*(r10*r10)))+(((-1.0)*x11193*(r21*r21))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x11194=((-1.0)*r21);
IkReal x11195=((-1.0)*px);
CheckValue<IkReal> x11197 = IKatan2WithCheck(IkReal(x11194),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11197.valid){
continue;
}
IkReal x11196=((1.0)*(x11197.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x11196)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11195);
rxp1_1=(px*r21);
rxp1_2=(r11*x11195);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11196)));
IkReal gconst4=x11194;
IkReal gconst5=((1.0)*r20);
j14eval[0]=cj13;
j14eval[1]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x11198=((-1.0)*r21);
IkReal x11199=((-1.0)*px);
CheckValue<IkReal> x11201 = IKatan2WithCheck(IkReal(x11198),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11201.valid){
continue;
}
IkReal x11200=((1.0)*(x11201.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x11200)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11199);
rxp1_1=(px*r21);
rxp1_2=(r11*x11199);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11200)));
IkReal gconst4=x11198;
IkReal gconst5=((1.0)*r20);
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11202=((-1.0)*r21);
IkReal x11203=((-1.0)*px);
CheckValue<IkReal> x11205 = IKatan2WithCheck(IkReal(x11202),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11205.valid){
continue;
}
IkReal x11204=((1.0)*(x11205.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x11204)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11203);
rxp1_1=(px*r21);
rxp1_2=(r11*x11203);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11204)));
IkReal gconst4=x11202;
IkReal gconst5=((1.0)*r20);
j14eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11206=((-1.0)*r21);
IkReal x11207=((-1.0)*px);
CheckValue<IkReal> x11209 = IKatan2WithCheck(IkReal(x11206),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11209.valid){
continue;
}
IkReal x11208=((1.0)*(x11209.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x11208)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11207);
rxp1_1=(px*r21);
rxp1_2=(r11*x11207);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11208)));
IkReal gconst4=x11206;
IkReal gconst5=((1.0)*r20);
j14eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x11212=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11212.valid){
continue;
}
IkReal x11210=x11212.value;
IkReal x11211=(sj10*x11210);
cj14array[0]=(((cj11*sj12*x11211))+((cj12*sj11*x11211)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x11213=IKsin(j14);
IkReal x11214=IKcos(j14);
IkReal x11215=(gconst4*r21);
IkReal x11216=(gconst5*r20);
IkReal x11217=((1.0)*x11214);
IkReal x11218=((1.0)*x11213);
evalcond[0]=((-1.0)*r02*x11213);
evalcond[1]=((((-1.0)*sj10))+(((-1.0)*r02*x11217)));
evalcond[2]=((((-1.0)*x11216*x11218))+((x11213*x11215)));
evalcond[3]=(((gconst4*r11*x11213))+(((-1.0)*gconst5*r10*x11218)));
evalcond[4]=(((sj11*sj12))+((x11214*x11216))+(((-1.0)*x11215*x11217))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x11220=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11220.valid){
continue;
}
IkReal x11219=x11220.value;
cj14array[0]=((((-1.0)*sj11*sj12*x11219))+((cj11*cj12*x11219)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x11221=IKsin(j14);
IkReal x11222=IKcos(j14);
IkReal x11223=((1.0)*sj10);
IkReal x11224=(gconst5*r10);
IkReal x11225=(gconst4*r11);
IkReal x11226=((1.0)*x11222);
IkReal x11227=((1.0)*x11221);
evalcond[0]=((-1.0)*r02*x11221);
evalcond[1]=((((-1.0)*x11223))+(((-1.0)*r02*x11226)));
evalcond[2]=(((gconst4*r21*x11221))+(((-1.0)*gconst5*r20*x11227)));
evalcond[3]=(((x11221*x11225))+(((-1.0)*x11224*x11227)));
evalcond[4]=((((-1.0)*cj12*sj11*x11223))+(((-1.0)*x11225*x11226))+((x11222*x11224))+(((-1.0)*cj11*sj12*x11223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x11228=IKPowWithIntegerCheck(r02,-1);
if(!x11228.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x11228.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x11229=IKsin(j14);
IkReal x11230=IKcos(j14);
IkReal x11231=((1.0)*cj12);
IkReal x11232=(gconst5*x11230);
IkReal x11233=(gconst4*x11229);
IkReal x11234=((1.0)*gconst4*x11230);
IkReal x11235=((1.0)*gconst5*x11229);
evalcond[0]=((-1.0)*r02*x11229);
evalcond[1]=((((-1.0)*r20*x11235))+((r21*x11233)));
evalcond[2]=(((r11*x11233))+(((-1.0)*r10*x11235)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj11*x11231))+((r20*x11232))+(((-1.0)*r21*x11234)));
evalcond[4]=((((-1.0)*cj11*sj10*sj12))+(((-1.0)*sj10*sj11*x11231))+((r10*x11232))+(((-1.0)*r11*x11234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x11236=((-1.0)*r21);
IkReal x11237=((-1.0)*px);
CheckValue<IkReal> x11239 = IKatan2WithCheck(IkReal(x11236),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11239.valid){
continue;
}
IkReal x11238=((1.0)*(x11239.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x11238)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11237);
rxp1_1=(px*r21);
rxp1_2=(r11*x11237);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11238)));
IkReal gconst4=x11236;
IkReal gconst5=((1.0)*r20);
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11240=((-1.0)*r21);
IkReal x11241=((-1.0)*px);
CheckValue<IkReal> x11243 = IKatan2WithCheck(IkReal(x11240),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11243.valid){
continue;
}
IkReal x11242=((1.0)*(x11243.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x11242)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11241);
rxp1_1=(px*r21);
rxp1_2=(r11*x11241);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11242)));
IkReal gconst4=x11240;
IkReal gconst5=((1.0)*r20);
j14eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11244=((-1.0)*r21);
IkReal x11245=((-1.0)*px);
CheckValue<IkReal> x11247 = IKatan2WithCheck(IkReal(x11244),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11247.valid){
continue;
}
IkReal x11246=((1.0)*(x11247.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x11246)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11245);
rxp1_1=(px*r21);
rxp1_2=(r11*x11245);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11246)));
IkReal gconst4=x11244;
IkReal gconst5=((1.0)*r20);
j14eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x11250=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11250.valid){
continue;
}
IkReal x11248=x11250.value;
IkReal x11249=(sj10*x11248);
cj14array[0]=(((cj11*sj12*x11249))+((cj12*sj11*x11249)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x11251=IKsin(j14);
IkReal x11252=IKcos(j14);
IkReal x11253=(gconst4*r21);
IkReal x11254=((1.0)*x11252);
IkReal x11255=((1.0)*gconst5*x11251);
evalcond[0]=(r02*x11251);
evalcond[1]=((((-1.0)*r02*x11254))+(((-1.0)*sj10)));
evalcond[2]=((((-1.0)*r20*x11255))+((x11251*x11253)));
evalcond[3]=(((gconst4*r11*x11251))+(((-1.0)*r10*x11255)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*gconst5*r20*x11254))+((x11252*x11253))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x11257=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11257.valid){
continue;
}
IkReal x11256=x11257.value;
cj14array[0]=(((cj11*cj12*x11256))+(((-1.0)*sj11*sj12*x11256)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x11258=IKsin(j14);
IkReal x11259=IKcos(j14);
IkReal x11260=((1.0)*sj10);
IkReal x11261=(gconst4*r11);
IkReal x11262=(gconst5*r10);
IkReal x11263=((1.0)*x11259);
IkReal x11264=((1.0)*x11258);
evalcond[0]=(r02*x11258);
evalcond[1]=((((-1.0)*r02*x11263))+(((-1.0)*x11260)));
evalcond[2]=((((-1.0)*gconst5*r20*x11264))+((gconst4*r21*x11258)));
evalcond[3]=(((x11258*x11261))+(((-1.0)*x11262*x11264)));
evalcond[4]=(((x11259*x11261))+(((-1.0)*x11262*x11263))+(((-1.0)*cj12*sj11*x11260))+(((-1.0)*cj11*sj12*x11260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x11265=IKPowWithIntegerCheck(r02,-1);
if(!x11265.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x11265.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x11266=IKsin(j14);
IkReal x11267=IKcos(j14);
IkReal x11268=((1.0)*cj12);
IkReal x11269=((1.0)*gconst5);
IkReal x11270=(gconst4*x11267);
IkReal x11271=(gconst4*x11266);
evalcond[0]=(r02*x11266);
evalcond[1]=(((r21*x11271))+(((-1.0)*r20*x11266*x11269)));
evalcond[2]=((((-1.0)*r10*x11266*x11269))+((r11*x11271)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj11*x11268))+((r21*x11270))+(((-1.0)*r20*x11267*x11269)));
evalcond[4]=((((-1.0)*cj11*sj10*sj12))+(((-1.0)*sj10*sj11*x11268))+(((-1.0)*r10*x11267*x11269))+((r11*x11270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x11273=IKPowWithIntegerCheck(r02,-1);
if(!x11273.valid){
continue;
}
IkReal x11272=x11273.value;
CheckValue<IkReal> x11274=IKPowWithIntegerCheck(cj13,-1);
if(!x11274.valid){
continue;
}
if( IKabs((x11272*(x11274.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj10*x11272)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11272*(x11274.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12))))))+IKsqr(((-1.0)*sj10*x11272))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((x11272*(x11274.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12))))), ((-1.0)*sj10*x11272));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11275=IKsin(j14);
IkReal x11276=IKcos(j14);
IkReal x11277=(r21*sj13);
IkReal x11278=((1.0)*cj11);
IkReal x11279=(cj10*sj12);
IkReal x11280=(gconst5*r10);
IkReal x11281=((1.0)*sj10);
IkReal x11282=(sj11*sj12);
IkReal x11283=(cj13*gconst5);
IkReal x11284=(gconst4*r21);
IkReal x11285=(gconst4*sj13);
IkReal x11286=(cj12*sj11);
IkReal x11287=(gconst5*r20);
IkReal x11288=(cj13*gconst4);
IkReal x11289=((1.0)*x11276);
IkReal x11290=(sj13*x11276);
IkReal x11291=(r02*x11275);
IkReal x11292=((1.0)*x11275);
evalcond[0]=((((-1.0)*r02*x11289))+(((-1.0)*x11281)));
evalcond[1]=(((x11275*x11284))+(((-1.0)*x11287*x11292)));
evalcond[2]=(((gconst4*r11*x11275))+cj10+(((-1.0)*x11280*x11292)));
evalcond[3]=(((cj13*x11291))+(((-1.0)*cj10*cj12*x11278))+((sj11*x11279)));
evalcond[4]=((((-1.0)*sj13*x11291))+(((-1.0)*x11278*x11279))+(((-1.0)*cj10*x11286)));
evalcond[5]=(x11286+((cj13*x11276*x11284))+(((-1.0)*r20*x11283*x11289))+((r20*x11285))+((cj11*sj12))+((gconst5*x11277)));
evalcond[6]=(((x11287*x11290))+x11282+((r21*x11283))+(((-1.0)*gconst4*x11277*x11289))+(((-1.0)*cj12*x11278))+((r20*x11288)));
evalcond[7]=((((-1.0)*cj13*x11280*x11289))+((r10*x11285))+(((-1.0)*cj12*sj10*x11278))+((r11*x11276*x11288))+((sj10*x11282))+((gconst5*r11*sj13)));
evalcond[8]=((((-1.0)*r11*x11285*x11289))+((r10*x11288))+(((-1.0)*x11281*x11286))+((r11*x11283))+((x11280*x11290))+(((-1.0)*sj10*sj12*x11278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11293=((1.0)*gconst5);
CheckValue<IkReal> x11294=IKPowWithIntegerCheck(((((-1.0)*r10*x11293))+((gconst4*r11))),-1);
if(!x11294.valid){
continue;
}
CheckValue<IkReal> x11295=IKPowWithIntegerCheck((((cj13*gconst4*r21))+(((-1.0)*cj13*r20*x11293))),-1);
if(!x11295.valid){
continue;
}
if( IKabs(((-1.0)*cj10*(x11294.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11295.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*r21*sj13*x11293))+(((-1.0)*gconst4*r20*sj13))+(((-1.0)*cj12*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj10*(x11294.value)))+IKsqr(((x11295.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*r21*sj13*x11293))+(((-1.0)*gconst4*r20*sj13))+(((-1.0)*cj12*sj11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*cj10*(x11294.value)), ((x11295.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*r21*sj13*x11293))+(((-1.0)*gconst4*r20*sj13))+(((-1.0)*cj12*sj11))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11296=IKsin(j14);
IkReal x11297=IKcos(j14);
IkReal x11298=(r21*sj13);
IkReal x11299=((1.0)*cj11);
IkReal x11300=(cj10*sj12);
IkReal x11301=(gconst5*r10);
IkReal x11302=((1.0)*sj10);
IkReal x11303=(sj11*sj12);
IkReal x11304=(cj13*gconst5);
IkReal x11305=(gconst4*r21);
IkReal x11306=(gconst4*sj13);
IkReal x11307=(cj12*sj11);
IkReal x11308=(gconst5*r20);
IkReal x11309=(cj13*gconst4);
IkReal x11310=((1.0)*x11297);
IkReal x11311=(sj13*x11297);
IkReal x11312=(r02*x11296);
IkReal x11313=((1.0)*x11296);
evalcond[0]=((((-1.0)*r02*x11310))+(((-1.0)*x11302)));
evalcond[1]=(((x11296*x11305))+(((-1.0)*x11308*x11313)));
evalcond[2]=((((-1.0)*x11301*x11313))+cj10+((gconst4*r11*x11296)));
evalcond[3]=(((sj11*x11300))+((cj13*x11312))+(((-1.0)*cj10*cj12*x11299)));
evalcond[4]=((((-1.0)*x11299*x11300))+(((-1.0)*cj10*x11307))+(((-1.0)*sj13*x11312)));
evalcond[5]=(((gconst5*x11298))+((r20*x11306))+x11307+(((-1.0)*r20*x11304*x11310))+((cj13*x11297*x11305))+((cj11*sj12)));
evalcond[6]=(((r20*x11309))+x11303+((x11308*x11311))+((r21*x11304))+(((-1.0)*cj12*x11299))+(((-1.0)*gconst4*x11298*x11310)));
evalcond[7]=((((-1.0)*cj13*x11301*x11310))+((sj10*x11303))+(((-1.0)*cj12*sj10*x11299))+((r11*x11297*x11309))+((gconst5*r11*sj13))+((r10*x11306)));
evalcond[8]=(((x11301*x11311))+(((-1.0)*sj10*sj12*x11299))+(((-1.0)*x11302*x11307))+(((-1.0)*r11*x11306*x11310))+((r11*x11304))+((r10*x11309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x11314=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11314.valid){
continue;
}
CheckValue<IkReal> x11315=IKPowWithIntegerCheck(r02,-1);
if(!x11315.valid){
continue;
}
if( IKabs(((-1.0)*cj10*(x11314.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj10*(x11315.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj10*(x11314.value)))+IKsqr(((-1.0)*sj10*(x11315.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*cj10*(x11314.value)), ((-1.0)*sj10*(x11315.value)));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11316=IKsin(j14);
IkReal x11317=IKcos(j14);
IkReal x11318=(r21*sj13);
IkReal x11319=((1.0)*cj11);
IkReal x11320=(cj10*sj12);
IkReal x11321=(gconst5*r10);
IkReal x11322=((1.0)*sj10);
IkReal x11323=(sj11*sj12);
IkReal x11324=(cj13*gconst5);
IkReal x11325=(gconst4*r21);
IkReal x11326=(gconst4*sj13);
IkReal x11327=(cj12*sj11);
IkReal x11328=(gconst5*r20);
IkReal x11329=(cj13*gconst4);
IkReal x11330=((1.0)*x11317);
IkReal x11331=(sj13*x11317);
IkReal x11332=(r02*x11316);
IkReal x11333=((1.0)*x11316);
evalcond[0]=((((-1.0)*r02*x11330))+(((-1.0)*x11322)));
evalcond[1]=(((x11316*x11325))+(((-1.0)*x11328*x11333)));
evalcond[2]=((((-1.0)*x11321*x11333))+cj10+((gconst4*r11*x11316)));
evalcond[3]=(((cj13*x11332))+((sj11*x11320))+(((-1.0)*cj10*cj12*x11319)));
evalcond[4]=((((-1.0)*cj10*x11327))+(((-1.0)*sj13*x11332))+(((-1.0)*x11319*x11320)));
evalcond[5]=(x11327+((gconst5*x11318))+((cj13*x11317*x11325))+(((-1.0)*r20*x11324*x11330))+((r20*x11326))+((cj11*sj12)));
evalcond[6]=(((x11328*x11331))+(((-1.0)*cj12*x11319))+x11323+((r21*x11324))+((r20*x11329))+(((-1.0)*gconst4*x11318*x11330)));
evalcond[7]=(((r10*x11326))+(((-1.0)*cj13*x11321*x11330))+((r11*x11317*x11329))+(((-1.0)*cj12*sj10*x11319))+((gconst5*r11*sj13))+((sj10*x11323)));
evalcond[8]=((((-1.0)*x11322*x11327))+((r10*x11329))+(((-1.0)*r11*x11326*x11330))+(((-1.0)*sj10*sj12*x11319))+((x11321*x11331))+((r11*x11324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11334=((1.0)*gconst4);
CheckValue<IkReal> x11335=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11334))+(((-1.0)*gconst5*r21)))),-1);
if(!x11335.valid){
continue;
}
CheckValue<IkReal> x11336 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x11334))+((gconst5*r10*sj10))+((cj10*gconst5*r00))+(((-1.0)*r11*sj10*x11334)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11336.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11335.value)))+(x11336.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11337=IKsin(j14);
IkReal x11338=IKcos(j14);
IkReal x11339=(r21*sj13);
IkReal x11340=(gconst5*sj13);
IkReal x11341=((1.0)*cj11);
IkReal x11342=(cj10*sj12);
IkReal x11343=(gconst5*r00);
IkReal x11344=(cj13*gconst5);
IkReal x11345=((1.0)*sj10);
IkReal x11346=(sj10*sj12);
IkReal x11347=(gconst4*sj13);
IkReal x11348=(cj13*gconst4);
IkReal x11349=(cj12*sj11);
IkReal x11350=((1.0)*x11338);
IkReal x11351=((1.0)*x11337);
IkReal x11352=(gconst4*x11337);
IkReal x11353=(cj13*x11337);
evalcond[0]=((((-1.0)*gconst5*r20*x11351))+(((-1.0)*r22*x11350))+((r21*x11352)));
evalcond[1]=((((-1.0)*r12*x11350))+(((-1.0)*gconst5*r10*x11351))+((r11*x11352))+cj10);
evalcond[2]=((((-1.0)*x11343*x11351))+(((-1.0)*x11345))+((r01*x11352))+(((-1.0)*r02*x11350)));
evalcond[3]=(((r21*x11338*x11348))+x11349+((r20*x11347))+(((-1.0)*r20*x11344*x11350))+((r22*x11353))+((cj11*sj12))+((gconst5*x11339)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r22*sj13*x11351))+(((-1.0)*cj12*x11341))+((r20*x11348))+((r20*x11338*x11340))+(((-1.0)*gconst4*x11339*x11350))+((r21*x11344)));
evalcond[5]=(((r02*x11353))+(((-1.0)*cj10*cj12*x11341))+(((-1.0)*cj13*x11343*x11350))+((r00*x11347))+((r01*x11338*x11348))+((r01*x11340))+((sj11*x11342)));
evalcond[6]=((((-1.0)*cj12*sj10*x11341))+((r11*x11340))+((r12*x11353))+((r11*x11338*x11348))+((r10*x11347))+(((-1.0)*r10*x11344*x11350))+((sj11*x11346)));
evalcond[7]=((((-1.0)*r01*x11347*x11350))+((r00*x11338*x11340))+((r00*x11348))+(((-1.0)*r02*sj13*x11351))+((r01*x11344))+(((-1.0)*cj10*x11349))+(((-1.0)*x11341*x11342)));
evalcond[8]=(((r11*x11344))+((r10*x11348))+((r10*x11338*x11340))+(((-1.0)*r11*x11347*x11350))+(((-1.0)*x11345*x11349))+(((-1.0)*r12*sj13*x11351))+(((-1.0)*x11341*x11346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11354=((1.0)*gconst5);
CheckValue<IkReal> x11355 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x11354))+((gconst4*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11355.valid){
continue;
}
CheckValue<IkReal> x11356=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11354))+(((-1.0)*gconst4*r10)))),-1);
if(!x11356.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11355.value)+(((1.5707963267949)*(x11356.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11357=IKsin(j14);
IkReal x11358=IKcos(j14);
IkReal x11359=(r21*sj13);
IkReal x11360=(gconst5*sj13);
IkReal x11361=((1.0)*cj11);
IkReal x11362=(cj10*sj12);
IkReal x11363=(gconst5*r00);
IkReal x11364=(cj13*gconst5);
IkReal x11365=((1.0)*sj10);
IkReal x11366=(sj10*sj12);
IkReal x11367=(gconst4*sj13);
IkReal x11368=(cj13*gconst4);
IkReal x11369=(cj12*sj11);
IkReal x11370=((1.0)*x11358);
IkReal x11371=((1.0)*x11357);
IkReal x11372=(gconst4*x11357);
IkReal x11373=(cj13*x11357);
evalcond[0]=(((r21*x11372))+(((-1.0)*r22*x11370))+(((-1.0)*gconst5*r20*x11371)));
evalcond[1]=(cj10+((r11*x11372))+(((-1.0)*r12*x11370))+(((-1.0)*gconst5*r10*x11371)));
evalcond[2]=((((-1.0)*x11365))+((r01*x11372))+(((-1.0)*x11363*x11371))+(((-1.0)*r02*x11370)));
evalcond[3]=(((gconst5*x11359))+x11369+((r22*x11373))+(((-1.0)*r20*x11364*x11370))+((r21*x11358*x11368))+((cj11*sj12))+((r20*x11367)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*gconst4*x11359*x11370))+((r21*x11364))+(((-1.0)*cj12*x11361))+((r20*x11358*x11360))+(((-1.0)*r22*sj13*x11371))+((r20*x11368)));
evalcond[5]=(((r01*x11360))+((r00*x11367))+((sj11*x11362))+((r01*x11358*x11368))+((r02*x11373))+(((-1.0)*cj13*x11363*x11370))+(((-1.0)*cj10*cj12*x11361)));
evalcond[6]=(((sj11*x11366))+((r11*x11358*x11368))+((r12*x11373))+((r10*x11367))+(((-1.0)*cj12*sj10*x11361))+(((-1.0)*r10*x11364*x11370))+((r11*x11360)));
evalcond[7]=(((r01*x11364))+((r00*x11368))+((r00*x11358*x11360))+(((-1.0)*r01*x11367*x11370))+(((-1.0)*cj10*x11369))+(((-1.0)*x11361*x11362))+(((-1.0)*r02*sj13*x11371)));
evalcond[8]=((((-1.0)*r12*sj13*x11371))+((r10*x11358*x11360))+((r10*x11368))+((r11*x11364))+(((-1.0)*x11365*x11369))+(((-1.0)*r11*x11367*x11370))+(((-1.0)*x11361*x11366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11374=((1.0)*gconst5);
CheckValue<IkReal> x11375=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11374)))),-1);
if(!x11375.valid){
continue;
}
CheckValue<IkReal> x11376 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x11374))+((cj10*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11376.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11375.value)))+(x11376.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11377=IKsin(j14);
IkReal x11378=IKcos(j14);
IkReal x11379=(r21*sj13);
IkReal x11380=(gconst5*sj13);
IkReal x11381=((1.0)*cj11);
IkReal x11382=(cj10*sj12);
IkReal x11383=(gconst5*r00);
IkReal x11384=(cj13*gconst5);
IkReal x11385=((1.0)*sj10);
IkReal x11386=(sj10*sj12);
IkReal x11387=(gconst4*sj13);
IkReal x11388=(cj13*gconst4);
IkReal x11389=(cj12*sj11);
IkReal x11390=((1.0)*x11378);
IkReal x11391=((1.0)*x11377);
IkReal x11392=(gconst4*x11377);
IkReal x11393=(cj13*x11377);
evalcond[0]=((((-1.0)*gconst5*r20*x11391))+(((-1.0)*r22*x11390))+((r21*x11392)));
evalcond[1]=((((-1.0)*gconst5*r10*x11391))+((r11*x11392))+cj10+(((-1.0)*r12*x11390)));
evalcond[2]=((((-1.0)*x11383*x11391))+((r01*x11392))+(((-1.0)*x11385))+(((-1.0)*r02*x11390)));
evalcond[3]=(((r20*x11387))+x11389+((r21*x11378*x11388))+(((-1.0)*r20*x11384*x11390))+((gconst5*x11379))+((r22*x11393))+((cj11*sj12)));
evalcond[4]=(((sj11*sj12))+((r20*x11378*x11380))+((r20*x11388))+(((-1.0)*gconst4*x11379*x11390))+(((-1.0)*cj12*x11381))+(((-1.0)*r22*sj13*x11391))+((r21*x11384)));
evalcond[5]=(((r02*x11393))+((sj11*x11382))+(((-1.0)*cj10*cj12*x11381))+((r01*x11378*x11388))+((r01*x11380))+((r00*x11387))+(((-1.0)*cj13*x11383*x11390)));
evalcond[6]=(((r11*x11380))+((r10*x11387))+((sj11*x11386))+((r11*x11378*x11388))+((r12*x11393))+(((-1.0)*cj12*sj10*x11381))+(((-1.0)*r10*x11384*x11390)));
evalcond[7]=((((-1.0)*x11381*x11382))+(((-1.0)*r01*x11387*x11390))+((r01*x11384))+((r00*x11388))+(((-1.0)*cj10*x11389))+((r00*x11378*x11380))+(((-1.0)*r02*sj13*x11391)));
evalcond[8]=(((r11*x11384))+((r10*x11388))+(((-1.0)*x11381*x11386))+((r10*x11378*x11380))+(((-1.0)*r11*x11387*x11390))+(((-1.0)*r12*sj13*x11391))+(((-1.0)*x11385*x11389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11394=((-1.0)*r10);
IkReal x11396 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11396)==0){
continue;
}
IkReal x11395=pow(x11396,-0.5);
CheckValue<IkReal> x11397 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11394),IKFAST_ATAN2_MAGTHRESH);
if(!x11397.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11397.value));
IkReal gconst7=(r11*x11395);
IkReal gconst8=(x11394*x11395);
CheckValue<IkReal> x11398 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11398.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x11398.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x11399=((-1.0)*r10);
IkReal x11400=x11395;
CheckValue<IkReal> x11402 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11399),IKFAST_ATAN2_MAGTHRESH);
if(!x11402.valid){
continue;
}
IkReal x11401=((-1.0)*(x11402.value));
sj15=gconst7;
cj15=gconst8;
j15=x11401;
IkReal gconst6=x11401;
IkReal gconst7=(r11*x11400);
IkReal gconst8=(x11399*x11400);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11403=((1.0)*sj10);
IkReal x11404=((1.0)*gconst7);
CheckValue<IkReal> x11405=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst8*r21))+(((-1.0)*r20*x11404)))),-1);
if(!x11405.valid){
continue;
}
CheckValue<IkReal> x11406 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11403))+(((-1.0)*cj10*r02)))),IkReal((((cj10*gconst8*r00))+(((-1.0)*gconst7*r11*x11403))+((gconst8*r10*sj10))+(((-1.0)*cj10*r01*x11404)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11406.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11405.value)))+(x11406.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11407=IKsin(j14);
IkReal x11408=IKcos(j14);
IkReal x11409=(cj13*gconst7);
IkReal x11410=((1.0)*cj11);
IkReal x11411=(cj10*sj12);
IkReal x11412=(gconst7*sj13);
IkReal x11413=((1.0)*sj10);
IkReal x11414=(gconst8*r00);
IkReal x11415=(sj10*sj12);
IkReal x11416=(gconst8*sj13);
IkReal x11417=(gconst8*r20);
IkReal x11418=(cj12*sj11);
IkReal x11419=(gconst8*r10);
IkReal x11420=(cj13*gconst8);
IkReal x11421=((1.0)*x11408);
IkReal x11422=(gconst7*x11407);
IkReal x11423=((1.0)*x11407);
IkReal x11424=(cj13*x11407);
evalcond[0]=((((-1.0)*x11417*x11423))+((r21*x11422))+(((-1.0)*r22*x11421)));
evalcond[1]=((((-1.0)*r12*x11421))+cj10+(((-1.0)*x11419*x11423))+((r11*x11422)));
evalcond[2]=((((-1.0)*r02*x11421))+(((-1.0)*x11413))+((r01*x11422))+(((-1.0)*x11414*x11423)));
evalcond[3]=(x11418+((r21*x11416))+((r22*x11424))+((r20*x11412))+(((-1.0)*cj13*x11417*x11421))+((cj11*sj12))+((r21*x11408*x11409)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x11410))+((r21*x11420))+(((-1.0)*r21*x11412*x11421))+((r20*x11409))+((r20*x11408*x11416))+(((-1.0)*r22*sj13*x11423)));
evalcond[5]=(((r02*x11424))+((r01*x11416))+((r00*x11412))+(((-1.0)*cj13*x11414*x11421))+((sj11*x11411))+(((-1.0)*cj10*cj12*x11410))+((r01*x11408*x11409)));
evalcond[6]=(((r10*x11412))+((sj11*x11415))+((r11*x11408*x11409))+((r11*x11416))+((r12*x11424))+(((-1.0)*cj13*x11419*x11421))+(((-1.0)*cj12*sj10*x11410)));
evalcond[7]=((((-1.0)*x11410*x11411))+((sj13*x11408*x11414))+(((-1.0)*r02*sj13*x11423))+(((-1.0)*cj10*x11418))+((r01*x11420))+((r00*x11409))+(((-1.0)*r01*x11412*x11421)));
evalcond[8]=((((-1.0)*x11410*x11415))+(((-1.0)*x11413*x11418))+(((-1.0)*r12*sj13*x11423))+((r10*x11409))+(((-1.0)*r11*x11412*x11421))+((r11*x11420))+((r10*x11408*x11416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11425=((1.0)*gconst8);
CheckValue<IkReal> x11426 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst7*r21))+(((-1.0)*cj10*r20*x11425)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11426.valid){
continue;
}
CheckValue<IkReal> x11427=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x11425))+(((-1.0)*gconst7*r00)))),-1);
if(!x11427.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11426.value)+(((1.5707963267949)*(x11427.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11428=IKsin(j14);
IkReal x11429=IKcos(j14);
IkReal x11430=(cj13*gconst7);
IkReal x11431=((1.0)*cj11);
IkReal x11432=(cj10*sj12);
IkReal x11433=(gconst7*sj13);
IkReal x11434=((1.0)*sj10);
IkReal x11435=(gconst8*r00);
IkReal x11436=(sj10*sj12);
IkReal x11437=(gconst8*sj13);
IkReal x11438=(gconst8*r20);
IkReal x11439=(cj12*sj11);
IkReal x11440=(gconst8*r10);
IkReal x11441=(cj13*gconst8);
IkReal x11442=((1.0)*x11429);
IkReal x11443=(gconst7*x11428);
IkReal x11444=((1.0)*x11428);
IkReal x11445=(cj13*x11428);
evalcond[0]=((((-1.0)*x11438*x11444))+(((-1.0)*r22*x11442))+((r21*x11443)));
evalcond[1]=((((-1.0)*x11440*x11444))+(((-1.0)*r12*x11442))+((r11*x11443))+cj10);
evalcond[2]=((((-1.0)*x11435*x11444))+(((-1.0)*r02*x11442))+(((-1.0)*x11434))+((r01*x11443)));
evalcond[3]=(((r20*x11433))+x11439+((r22*x11445))+((r21*x11429*x11430))+((r21*x11437))+(((-1.0)*cj13*x11438*x11442))+((cj11*sj12)));
evalcond[4]=(((sj11*sj12))+((r20*x11429*x11437))+((r20*x11430))+(((-1.0)*cj12*x11431))+((r21*x11441))+(((-1.0)*r22*sj13*x11444))+(((-1.0)*r21*x11433*x11442)));
evalcond[5]=((((-1.0)*cj10*cj12*x11431))+((sj11*x11432))+((r01*x11429*x11430))+((r01*x11437))+((r00*x11433))+((r02*x11445))+(((-1.0)*cj13*x11435*x11442)));
evalcond[6]=(((r12*x11445))+(((-1.0)*cj13*x11440*x11442))+((r10*x11433))+((r11*x11429*x11430))+((sj11*x11436))+((r11*x11437))+(((-1.0)*cj12*sj10*x11431)));
evalcond[7]=((((-1.0)*cj10*x11439))+(((-1.0)*r01*x11433*x11442))+(((-1.0)*r02*sj13*x11444))+((sj13*x11429*x11435))+((r00*x11430))+(((-1.0)*x11431*x11432))+((r01*x11441)));
evalcond[8]=(((r10*x11430))+((r11*x11441))+(((-1.0)*x11434*x11439))+((r10*x11429*x11437))+(((-1.0)*r12*sj13*x11444))+(((-1.0)*x11431*x11436))+(((-1.0)*r11*x11433*x11442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11446=((-1.0)*r11);
IkReal x11448 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11448)==0){
continue;
}
IkReal x11447=pow(x11448,-0.5);
CheckValue<IkReal> x11449 = IKatan2WithCheck(IkReal(x11446),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11449.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11449.value))));
IkReal gconst10=(x11446*x11447);
IkReal gconst11=((1.0)*r10*x11447);
CheckValue<IkReal> x11450 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11450.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x11450.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x11451=((-1.0)*r11);
CheckValue<IkReal> x11454 = IKatan2WithCheck(IkReal(x11451),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11454.valid){
continue;
}
IkReal x11452=((1.0)*(x11454.value));
IkReal x11453=x11447;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11452)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11452)));
IkReal gconst10=(x11451*x11453);
IkReal gconst11=((1.0)*r10*x11453);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11455=((-1.0)*r11);
CheckValue<IkReal> x11458 = IKatan2WithCheck(IkReal(x11455),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11458.valid){
continue;
}
IkReal x11456=((1.0)*(x11458.value));
IkReal x11457=x11447;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11456)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11456)));
IkReal gconst10=(x11455*x11457);
IkReal gconst11=((1.0)*r10*x11457);
IkReal x11459=r12*r12;
IkReal x11460=(cj10*r02);
IkReal x11461=x11447;
IkReal x11462=(sj10*x11461);
j14eval[0]=((IKabs((((r12*x11460*x11461))+((x11459*x11462))+(((-1.0)*x11462)))))+(IKabs(((((-1.0)*r12*sj10))+(((-1.0)*x11460))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x11463=((-1.0)*r11);
CheckValue<IkReal> x11466 = IKatan2WithCheck(IkReal(x11463),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11466.valid){
continue;
}
IkReal x11464=((1.0)*(x11466.value));
IkReal x11465=x11447;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11464)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11464)));
IkReal gconst10=(x11463*x11465);
IkReal gconst11=((1.0)*r10*x11465);
IkReal x11467=((1.0)*cj13);
CheckValue<IkReal> x11471=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11471.valid){
continue;
}
IkReal x11468=x11471.value;
IkReal x11469=(cj13*x11468);
IkReal x11470=((((-1.0)*x11467*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x11469))+(((-1.0)*x11467*x11468*(r11*r11)*(r21*r21)))+(((-1.0)*x11467*x11468*(r10*r10)*(r20*r20))));
j14eval[0]=x11470;
j14eval[1]=IKsign(x11470);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x11472=((-1.0)*r11);
CheckValue<IkReal> x11475 = IKatan2WithCheck(IkReal(x11472),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11475.valid){
continue;
}
IkReal x11473=((1.0)*(x11475.value));
IkReal x11474=x11447;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11473)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11473)));
IkReal gconst10=(x11472*x11474);
IkReal gconst11=((1.0)*r10*x11474);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11476=((-1.0)*r11);
CheckValue<IkReal> x11479 = IKatan2WithCheck(IkReal(x11476),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11479.valid){
continue;
}
IkReal x11477=((1.0)*(x11479.value));
IkReal x11478=x11447;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11477)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11477)));
IkReal gconst10=(x11476*x11478);
IkReal gconst11=((1.0)*r10*x11478);
IkReal x11480=r12*r12;
IkReal x11481=(cj10*r02);
IkReal x11482=x11447;
IkReal x11483=(sj10*x11482);
j14eval[0]=((IKabs(((((-1.0)*x11481))+(((-1.0)*r12*sj10)))))+(IKabs(((((-1.0)*x11483))+((x11480*x11483))+((r12*x11481*x11482))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11484=((-1.0)*r11);
CheckValue<IkReal> x11487 = IKatan2WithCheck(IkReal(x11484),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11487.valid){
continue;
}
IkReal x11485=((1.0)*(x11487.value));
IkReal x11486=x11447;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11485)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11485)));
IkReal gconst10=(x11484*x11486);
IkReal gconst11=((1.0)*r10*x11486);
IkReal x11488=r12*r12;
IkReal x11489=(cj11*cj12*r22);
IkReal x11490=(r22*sj11*sj12);
CheckValue<IkReal> x11494=IKPowWithIntegerCheck(((-1.0)+x11488),-1);
if(!x11494.valid){
continue;
}
IkReal x11491=x11494.value;
if((((1.0)+(((-1.0)*x11488)))) < -0.00001)
continue;
IkReal x11492=IKsqrt(((1.0)+(((-1.0)*x11488))));
IkReal x11493=(r12*x11491*x11492);
j14eval[0]=((IKabs(((((-1.0)*x11490*x11493))+((x11489*x11493)))))+(IKabs((x11490+(((-1.0)*x11489))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x11495=((-1.0)*r11);
CheckValue<IkReal> x11498 = IKatan2WithCheck(IkReal(x11495),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11498.valid){
continue;
}
IkReal x11496=((1.0)*(x11498.value));
IkReal x11497=x11447;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11496)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11496)));
IkReal gconst10=(x11495*x11497);
IkReal gconst11=((1.0)*r10*x11497);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x11499=((-1.0)*r11);
CheckValue<IkReal> x11502 = IKatan2WithCheck(IkReal(x11499),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11502.valid){
continue;
}
IkReal x11500=((1.0)*(x11502.value));
IkReal x11501=x11447;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11500)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11500)));
IkReal gconst10=(x11499*x11501);
IkReal gconst11=((1.0)*r10*x11501);
IkReal x11503=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11507=IKPowWithIntegerCheck(x11503,-1);
if(!x11507.valid){
continue;
}
IkReal x11504=x11507.value;
IkReal x11505=((1.0)*x11504);
IkReal x11506=((((-1.0)*(r02*r02)))+(((-1.0)*x11505*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x11504))+(((-1.0)*x11505*(r00*r00)*(r10*r10))));
j14eval[0]=x11506;
j14eval[1]=IKsign(x11506);
j14eval[2]=r02;
j14eval[3]=x11503;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11508=((-1.0)*r11);
CheckValue<IkReal> x11511 = IKatan2WithCheck(IkReal(x11508),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11511.valid){
continue;
}
IkReal x11509=((1.0)*(x11511.value));
IkReal x11510=x11447;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11509)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11509)));
IkReal gconst10=(x11508*x11510);
IkReal gconst11=((1.0)*r10*x11510);
IkReal x11512=r12*r12;
IkReal x11513=(cj11*cj12*r22);
IkReal x11514=(r22*sj11*sj12);
CheckValue<IkReal> x11518=IKPowWithIntegerCheck(((-1.0)+x11512),-1);
if(!x11518.valid){
continue;
}
IkReal x11515=x11518.value;
if((((1.0)+(((-1.0)*x11512)))) < -0.00001)
continue;
IkReal x11516=IKsqrt(((1.0)+(((-1.0)*x11512))));
IkReal x11517=(r12*x11515*x11516);
j14eval[0]=((IKabs(((((-1.0)*x11513))+x11514)))+(IKabs(((((-1.0)*x11514*x11517))+((x11513*x11517))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11519=(gconst10*r21);
IkReal x11520=(cj11*cj12);
IkReal x11521=(sj11*sj12);
IkReal x11522=(gconst11*r20);
CheckValue<IkReal> x11523=IKPowWithIntegerCheck(IKsign(((x11522*x11522)+(r22*r22)+(((-2.0)*x11519*x11522))+(x11519*x11519))),-1);
if(!x11523.valid){
continue;
}
CheckValue<IkReal> x11524 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11520))+((r22*x11521)))),IkReal(((((-1.0)*x11521*x11522))+(((-1.0)*x11519*x11520))+((x11519*x11521))+((x11520*x11522)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11524.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11523.value)))+(x11524.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11525=IKsin(j14);
IkReal x11526=IKcos(j14);
IkReal x11527=(gconst11*r10);
IkReal x11528=((1.0)*cj11);
IkReal x11529=(gconst11*r20);
IkReal x11530=(gconst10*r21);
IkReal x11531=(gconst11*r00);
IkReal x11532=((1.0)*x11525);
IkReal x11533=((1.0)*x11526);
IkReal x11534=(gconst10*x11525);
evalcond[0]=((((-1.0)*r22*x11533))+((x11525*x11530))+(((-1.0)*x11529*x11532)));
evalcond[1]=((((-1.0)*r12*x11533))+(((-1.0)*x11527*x11532))+((r11*x11534)));
evalcond[2]=((((-1.0)*gconst10*r01*x11533))+((x11526*x11531))+(((-1.0)*r02*x11532)));
evalcond[3]=((-1.0)+((r01*x11534))+(((-1.0)*x11531*x11532))+(((-1.0)*r02*x11533)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x11530*x11533))+(((-1.0)*r22*x11532))+((x11526*x11529))+(((-1.0)*cj12*x11528)));
evalcond[5]=((((-1.0)*r12*x11532))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x11528))+((x11526*x11527))+(((-1.0)*gconst10*r11*x11533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11535=(gconst11*r00);
IkReal x11536=(gconst10*r01);
CheckValue<IkReal> x11537=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11536*x11536)))+(((-1.0)*(x11535*x11535)))+(((2.0)*x11535*x11536)))),-1);
if(!x11537.valid){
continue;
}
CheckValue<IkReal> x11538 = IKatan2WithCheck(IkReal((x11535+(((-1.0)*x11536)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11538.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11537.value)))+(x11538.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11539=IKsin(j14);
IkReal x11540=IKcos(j14);
IkReal x11541=(gconst11*r10);
IkReal x11542=((1.0)*cj11);
IkReal x11543=(gconst11*r20);
IkReal x11544=(gconst10*r21);
IkReal x11545=(gconst11*r00);
IkReal x11546=((1.0)*x11539);
IkReal x11547=((1.0)*x11540);
IkReal x11548=(gconst10*x11539);
evalcond[0]=(((x11539*x11544))+(((-1.0)*x11543*x11546))+(((-1.0)*r22*x11547)));
evalcond[1]=((((-1.0)*x11541*x11546))+((r11*x11548))+(((-1.0)*r12*x11547)));
evalcond[2]=((((-1.0)*gconst10*r01*x11547))+((x11540*x11545))+(((-1.0)*r02*x11546)));
evalcond[3]=((-1.0)+((r01*x11548))+(((-1.0)*x11545*x11546))+(((-1.0)*r02*x11547)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x11542))+((x11540*x11543))+(((-1.0)*x11544*x11547))+(((-1.0)*r22*x11546)));
evalcond[5]=((((-1.0)*gconst10*r11*x11547))+(((-1.0)*cj12*sj11))+((x11540*x11541))+(((-1.0)*r12*x11546))+(((-1.0)*sj12*x11542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x11549 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11549.valid){
continue;
}
CheckValue<IkReal> x11550=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11550.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11549.value)+(((1.5707963267949)*(x11550.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11551=IKsin(j14);
IkReal x11552=IKcos(j14);
IkReal x11553=(gconst11*r10);
IkReal x11554=((1.0)*cj11);
IkReal x11555=(gconst11*r20);
IkReal x11556=(gconst10*r21);
IkReal x11557=(gconst11*r00);
IkReal x11558=((1.0)*x11551);
IkReal x11559=((1.0)*x11552);
IkReal x11560=(gconst10*x11551);
evalcond[0]=((((-1.0)*x11555*x11558))+((x11551*x11556))+(((-1.0)*r22*x11559)));
evalcond[1]=((((-1.0)*r12*x11559))+((r11*x11560))+(((-1.0)*x11553*x11558)));
evalcond[2]=((((-1.0)*r02*x11558))+((x11552*x11557))+(((-1.0)*gconst10*r01*x11559)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11559))+((r01*x11560))+(((-1.0)*x11557*x11558)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r22*x11558))+((x11552*x11555))+(((-1.0)*x11556*x11559))+(((-1.0)*cj12*x11554)));
evalcond[5]=((((-1.0)*r12*x11558))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x11554))+((x11552*x11553))+(((-1.0)*gconst10*r11*x11559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x11561=((-1.0)*r11);
CheckValue<IkReal> x11564 = IKatan2WithCheck(IkReal(x11561),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11564.valid){
continue;
}
IkReal x11562=((1.0)*(x11564.value));
IkReal x11563=x11447;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11562)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11562)));
IkReal gconst10=(x11561*x11563);
IkReal gconst11=((1.0)*r10*x11563);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x11565=((-1.0)*r11);
CheckValue<IkReal> x11568 = IKatan2WithCheck(IkReal(x11565),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11568.valid){
continue;
}
IkReal x11566=((1.0)*(x11568.value));
IkReal x11567=x11447;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11566)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11566)));
IkReal gconst10=(x11565*x11567);
IkReal gconst11=((1.0)*r10*x11567);
j14eval[0]=r02;
j14eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11569=((-1.0)*r11);
CheckValue<IkReal> x11572 = IKatan2WithCheck(IkReal(x11569),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11572.valid){
continue;
}
IkReal x11570=((1.0)*(x11572.value));
IkReal x11571=x11447;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11570)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11570)));
IkReal gconst10=(x11569*x11571);
IkReal gconst11=((1.0)*r10*x11571);
IkReal x11573=r12*r12;
CheckValue<IkReal> x11576=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11573))),-1);
if(!x11576.valid){
continue;
}
IkReal x11574=x11576.value;
IkReal x11575=((1.0)*x11574);
j14eval[0]=IKsign((x11573+(((2.0)*x11574*(r10*r10)*(r11*r11)))+((x11575*(r11*r11*r11*r11)))+((x11575*(r10*r10*r10*r10)))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11577=(cj12*sj11);
IkReal x11578=(cj11*sj12);
IkReal x11579=(gconst10*r11);
IkReal x11580=((1.0)*gconst11*r10);
CheckValue<IkReal> x11581 = IKatan2WithCheck(IkReal((((r12*x11578))+((r12*x11577)))),IkReal(((((-1.0)*x11577*x11580))+(((-1.0)*x11578*x11580))+((x11578*x11579))+((x11577*x11579)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11581.valid){
continue;
}
CheckValue<IkReal> x11582=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*gconst11*r10*x11579))+(x11579*x11579)+(((gconst11*gconst11)*(r10*r10))))),-1);
if(!x11582.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11581.value)+(((1.5707963267949)*(x11582.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11583=IKsin(j14);
IkReal x11584=IKcos(j14);
IkReal x11585=(gconst11*r10);
IkReal x11586=(gconst11*r20);
IkReal x11587=(gconst10*r21);
IkReal x11588=(gconst11*r00);
IkReal x11589=((1.0)*x11583);
IkReal x11590=((1.0)*x11584);
IkReal x11591=(gconst10*x11583);
evalcond[0]=(((x11583*x11587))+(((-1.0)*x11586*x11589))+(((-1.0)*r22*x11590)));
evalcond[1]=((((-1.0)*x11585*x11589))+((r11*x11591))+(((-1.0)*r12*x11590)));
evalcond[2]=(((x11584*x11588))+(((-1.0)*r02*x11589))+(((-1.0)*gconst10*r01*x11590)));
evalcond[3]=((1.0)+((r01*x11591))+(((-1.0)*x11588*x11589))+(((-1.0)*r02*x11590)));
evalcond[4]=(((x11584*x11585))+(((-1.0)*r12*x11589))+((cj12*sj11))+(((-1.0)*gconst10*r11*x11590))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x11584*x11586))+(((-1.0)*x11587*x11590))+(((-1.0)*r22*x11589))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11592=(gconst11*r00);
IkReal x11593=(gconst10*r01);
CheckValue<IkReal> x11594=IKPowWithIntegerCheck(IKsign(((x11593*x11593)+(x11592*x11592)+(((-2.0)*x11592*x11593))+(r02*r02))),-1);
if(!x11594.valid){
continue;
}
CheckValue<IkReal> x11595 = IKatan2WithCheck(IkReal((x11592+(((-1.0)*x11593)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11595.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11594.value)))+(x11595.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11596=IKsin(j14);
IkReal x11597=IKcos(j14);
IkReal x11598=(gconst11*r10);
IkReal x11599=(gconst11*r20);
IkReal x11600=(gconst10*r21);
IkReal x11601=(gconst11*r00);
IkReal x11602=((1.0)*x11596);
IkReal x11603=((1.0)*x11597);
IkReal x11604=(gconst10*x11596);
evalcond[0]=((((-1.0)*r22*x11603))+(((-1.0)*x11599*x11602))+((x11596*x11600)));
evalcond[1]=((((-1.0)*x11598*x11602))+(((-1.0)*r12*x11603))+((r11*x11604)));
evalcond[2]=((((-1.0)*gconst10*r01*x11603))+(((-1.0)*r02*x11602))+((x11597*x11601)));
evalcond[3]=((1.0)+((r01*x11604))+(((-1.0)*r02*x11603))+(((-1.0)*x11601*x11602)));
evalcond[4]=((((-1.0)*gconst10*r11*x11603))+(((-1.0)*r12*x11602))+((cj12*sj11))+((cj11*sj12))+((x11597*x11598)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r22*x11602))+(((-1.0)*cj11*cj12))+(((-1.0)*x11600*x11603))+((x11597*x11599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11605=((1.0)*gconst11);
CheckValue<IkReal> x11606 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11606.valid){
continue;
}
CheckValue<IkReal> x11607=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11605))+(((-1.0)*gconst10*r20)))),-1);
if(!x11607.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11606.value)+(((1.5707963267949)*(x11607.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11608=IKsin(j14);
IkReal x11609=IKcos(j14);
IkReal x11610=(gconst11*r10);
IkReal x11611=(gconst11*r20);
IkReal x11612=(gconst10*r21);
IkReal x11613=(gconst11*r00);
IkReal x11614=((1.0)*x11608);
IkReal x11615=((1.0)*x11609);
IkReal x11616=(gconst10*x11608);
evalcond[0]=((((-1.0)*r22*x11615))+(((-1.0)*x11611*x11614))+((x11608*x11612)));
evalcond[1]=((((-1.0)*r12*x11615))+((r11*x11616))+(((-1.0)*x11610*x11614)));
evalcond[2]=((((-1.0)*gconst10*r01*x11615))+((x11609*x11613))+(((-1.0)*r02*x11614)));
evalcond[3]=((1.0)+(((-1.0)*x11613*x11614))+((r01*x11616))+(((-1.0)*r02*x11615)));
evalcond[4]=((((-1.0)*r12*x11614))+((x11609*x11610))+(((-1.0)*gconst10*r11*x11615))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x11609*x11611))+(((-1.0)*r22*x11614))+(((-1.0)*x11612*x11615))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x11617=((-1.0)*r11);
IkReal x11618=((-1.0)*r10);
CheckValue<IkReal> x11620 = IKatan2WithCheck(IkReal(x11617),IkReal(x11618),IKFAST_ATAN2_MAGTHRESH);
if(!x11620.valid){
continue;
}
IkReal x11619=((1.0)*(x11620.value));
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11619)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11618);
rxp1_1=(px*r21);
rxp1_2=(px*x11617);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11619)));
IkReal gconst10=x11617;
IkReal gconst11=((1.0)*r10);
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11621=((-1.0)*r11);
IkReal x11622=((-1.0)*r10);
CheckValue<IkReal> x11624 = IKatan2WithCheck(IkReal(x11621),IkReal(x11622),IKFAST_ATAN2_MAGTHRESH);
if(!x11624.valid){
continue;
}
IkReal x11623=((1.0)*(x11624.value));
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11623)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11622);
rxp1_1=(px*r21);
rxp1_2=(px*x11621);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11623)));
IkReal gconst10=x11621;
IkReal gconst11=((1.0)*r10);
j14eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11625=((-1.0)*r11);
IkReal x11626=((-1.0)*r10);
CheckValue<IkReal> x11628 = IKatan2WithCheck(IkReal(x11625),IkReal(x11626),IKFAST_ATAN2_MAGTHRESH);
if(!x11628.valid){
continue;
}
IkReal x11627=((1.0)*(x11628.value));
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11627)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11626);
rxp1_1=(px*r21);
rxp1_2=(px*x11625);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11627)));
IkReal gconst10=x11625;
IkReal gconst11=((1.0)*r10);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x11631=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x11631.valid){
continue;
}
IkReal x11629=x11631.value;
IkReal x11630=(sj10*x11629);
cj14array[0]=(((cj12*sj11*x11630))+((cj11*sj12*x11630)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x11632=IKsin(j14);
IkReal x11633=IKcos(j14);
IkReal x11634=(gconst11*r20);
IkReal x11635=(gconst10*r21);
IkReal x11636=((1.0)*x11632);
IkReal x11637=((1.0)*x11633);
evalcond[0]=((-1.0)*r02*x11632);
evalcond[1]=((((-1.0)*r02*x11637))+(((-1.0)*sj10)));
evalcond[2]=((((-1.0)*x11634*x11636))+((x11632*x11635)));
evalcond[3]=(((gconst10*r11*x11632))+(((-1.0)*gconst11*r10*x11636)));
evalcond[4]=(((sj11*sj12))+((x11633*x11634))+(((-1.0)*x11635*x11637))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x11639=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11639.valid){
continue;
}
IkReal x11638=x11639.value;
cj14array[0]=((((-1.0)*sj11*sj12*x11638))+((cj11*cj12*x11638)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x11640=IKsin(j14);
IkReal x11641=IKcos(j14);
IkReal x11642=((1.0)*sj10);
IkReal x11643=((1.0)*x11641);
IkReal x11644=(gconst10*x11640);
IkReal x11645=((1.0)*gconst11*x11640);
evalcond[0]=((-1.0)*r02*x11640);
evalcond[1]=((((-1.0)*r02*x11643))+(((-1.0)*x11642)));
evalcond[2]=(((r21*x11644))+(((-1.0)*r20*x11645)));
evalcond[3]=(((r11*x11644))+(((-1.0)*r10*x11645)));
evalcond[4]=((((-1.0)*cj11*sj12*x11642))+(((-1.0)*cj12*sj11*x11642))+((gconst11*r10*x11641))+(((-1.0)*gconst10*r11*x11643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x11646=IKPowWithIntegerCheck(r02,-1);
if(!x11646.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x11646.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x11647=IKsin(j14);
IkReal x11648=IKcos(j14);
IkReal x11649=(gconst11*r20);
IkReal x11650=((1.0)*cj12);
IkReal x11651=(gconst11*r10);
IkReal x11652=(gconst10*r21);
IkReal x11653=(gconst10*r11);
IkReal x11654=((1.0)*x11647);
IkReal x11655=((1.0)*x11648);
evalcond[0]=((-1.0)*r02*x11647);
evalcond[1]=(((x11647*x11652))+(((-1.0)*x11649*x11654)));
evalcond[2]=(((x11647*x11653))+(((-1.0)*x11651*x11654)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj11*x11650))+((x11648*x11649))+(((-1.0)*x11652*x11655)));
evalcond[4]=((((-1.0)*sj10*sj11*x11650))+(((-1.0)*cj11*sj10*sj12))+((x11648*x11651))+(((-1.0)*x11653*x11655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11656=((1.0)*gconst11);
CheckValue<IkReal> x11657 = IKatan2WithCheck(IkReal((((r12*sj10))+((cj10*r02)))),IkReal((((gconst10*r11*sj10))+(((-1.0)*cj10*r00*x11656))+((cj10*gconst10*r01))+(((-1.0)*r10*sj10*x11656)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11657.valid){
continue;
}
CheckValue<IkReal> x11658=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11658.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11657.value)+(((1.5707963267949)*(x11658.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11659=IKsin(j14);
IkReal x11660=IKcos(j14);
IkReal x11661=((1.0)*cj11);
IkReal x11662=((1.0)*sj10);
IkReal x11663=(gconst10*r21);
IkReal x11664=(cj12*sj11);
IkReal x11665=((1.0)*x11660);
IkReal x11666=(gconst11*x11660);
IkReal x11667=(gconst10*x11659);
IkReal x11668=((1.0)*x11659);
IkReal x11669=(gconst11*x11668);
evalcond[0]=((((-1.0)*r20*x11669))+((x11659*x11663)));
evalcond[1]=((((-1.0)*r12*x11665))+cj10+((r11*x11667))+(((-1.0)*r10*x11669)));
evalcond[2]=(((sj11*sj12))+(((-1.0)*cj12*x11661))+((r20*x11666))+(((-1.0)*x11663*x11665)));
evalcond[3]=((((-1.0)*r00*x11669))+((r01*x11667))+(((-1.0)*r02*x11665))+(((-1.0)*x11662)));
evalcond[4]=((((-1.0)*gconst10*r01*x11665))+(((-1.0)*r02*x11668))+(((-1.0)*cj10*x11664))+((r00*x11666))+(((-1.0)*cj10*sj12*x11661)));
evalcond[5]=((((-1.0)*gconst10*r11*x11665))+(((-1.0)*sj10*sj12*x11661))+(((-1.0)*r12*x11668))+(((-1.0)*x11662*x11664))+((r10*x11666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11670=(gconst10*r21);
IkReal x11671=(cj11*cj12);
IkReal x11672=(sj11*sj12);
IkReal x11673=(gconst11*r20);
CheckValue<IkReal> x11674 = IKatan2WithCheck(IkReal((((r22*x11672))+(((-1.0)*r22*x11671)))),IkReal((((x11670*x11672))+(((-1.0)*x11670*x11671))+((x11671*x11673))+(((-1.0)*x11672*x11673)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11674.valid){
continue;
}
CheckValue<IkReal> x11675=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x11670*x11673))+(x11673*x11673)+(x11670*x11670))),-1);
if(!x11675.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11674.value)+(((1.5707963267949)*(x11675.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11676=IKsin(j14);
IkReal x11677=IKcos(j14);
IkReal x11678=(gconst11*r10);
IkReal x11679=((1.0)*cj11);
IkReal x11680=((1.0)*sj10);
IkReal x11681=(gconst11*r20);
IkReal x11682=(gconst10*r21);
IkReal x11683=(cj12*sj11);
IkReal x11684=(gconst11*r00);
IkReal x11685=((1.0)*x11676);
IkReal x11686=((1.0)*x11677);
IkReal x11687=(gconst10*x11676);
evalcond[0]=(((x11676*x11682))+(((-1.0)*r22*x11686))+(((-1.0)*x11681*x11685)));
evalcond[1]=(((r11*x11687))+cj10+(((-1.0)*r12*x11686))+(((-1.0)*x11678*x11685)));
evalcond[2]=((((-1.0)*x11684*x11685))+(((-1.0)*r02*x11686))+(((-1.0)*x11680))+((r01*x11687)));
evalcond[3]=(((x11677*x11681))+((sj11*sj12))+(((-1.0)*cj12*x11679))+(((-1.0)*r22*x11685))+(((-1.0)*x11682*x11686)));
evalcond[4]=(((x11677*x11684))+(((-1.0)*cj10*sj12*x11679))+(((-1.0)*r02*x11685))+(((-1.0)*gconst10*r01*x11686))+(((-1.0)*cj10*x11683)));
evalcond[5]=((((-1.0)*x11680*x11683))+((x11677*x11678))+(((-1.0)*r12*x11685))+(((-1.0)*gconst10*r11*x11686))+(((-1.0)*sj10*sj12*x11679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11688=((1.0)*gconst10);
CheckValue<IkReal> x11689=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11688))+(((-1.0)*gconst11*r21)))),-1);
if(!x11689.valid){
continue;
}
CheckValue<IkReal> x11690 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((gconst11*r10*sj10))+(((-1.0)*r11*sj10*x11688))+((cj10*gconst11*r00))+(((-1.0)*cj10*r01*x11688)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11690.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11689.value)))+(x11690.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11691=IKsin(j14);
IkReal x11692=IKcos(j14);
IkReal x11693=(gconst11*r10);
IkReal x11694=((1.0)*cj11);
IkReal x11695=((1.0)*sj10);
IkReal x11696=(gconst11*r20);
IkReal x11697=(gconst10*r21);
IkReal x11698=(cj12*sj11);
IkReal x11699=(gconst11*r00);
IkReal x11700=((1.0)*x11691);
IkReal x11701=((1.0)*x11692);
IkReal x11702=(gconst10*x11691);
evalcond[0]=((((-1.0)*r22*x11701))+((x11691*x11697))+(((-1.0)*x11696*x11700)));
evalcond[1]=(cj10+((r11*x11702))+(((-1.0)*r12*x11701))+(((-1.0)*x11693*x11700)));
evalcond[2]=(((r01*x11702))+(((-1.0)*x11695))+(((-1.0)*x11699*x11700))+(((-1.0)*r02*x11701)));
evalcond[3]=(((sj11*sj12))+((x11692*x11696))+(((-1.0)*r22*x11700))+(((-1.0)*x11697*x11701))+(((-1.0)*cj12*x11694)));
evalcond[4]=((((-1.0)*cj10*sj12*x11694))+(((-1.0)*cj10*x11698))+((x11692*x11699))+(((-1.0)*gconst10*r01*x11701))+(((-1.0)*r02*x11700)));
evalcond[5]=(((x11692*x11693))+(((-1.0)*sj10*sj12*x11694))+(((-1.0)*x11695*x11698))+(((-1.0)*gconst10*r11*x11701))+(((-1.0)*r12*x11700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11703=((1.0)*gconst11);
CheckValue<IkReal> x11704=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x11703)))),-1);
if(!x11704.valid){
continue;
}
CheckValue<IkReal> x11705 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x11703))+((cj10*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11705.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11704.value)))+(x11705.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11706=IKsin(j14);
IkReal x11707=IKcos(j14);
IkReal x11708=(gconst11*r10);
IkReal x11709=((1.0)*cj11);
IkReal x11710=((1.0)*sj10);
IkReal x11711=(gconst11*r20);
IkReal x11712=(gconst10*r21);
IkReal x11713=(cj12*sj11);
IkReal x11714=(gconst11*r00);
IkReal x11715=((1.0)*x11706);
IkReal x11716=((1.0)*x11707);
IkReal x11717=(gconst10*x11706);
evalcond[0]=((((-1.0)*r22*x11716))+((x11706*x11712))+(((-1.0)*x11711*x11715)));
evalcond[1]=((((-1.0)*x11708*x11715))+(((-1.0)*r12*x11716))+cj10+((r11*x11717)));
evalcond[2]=((((-1.0)*x11710))+((r01*x11717))+(((-1.0)*r02*x11716))+(((-1.0)*x11714*x11715)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r22*x11715))+(((-1.0)*cj12*x11709))+(((-1.0)*x11712*x11716))+((x11707*x11711)));
evalcond[4]=((((-1.0)*cj10*x11713))+(((-1.0)*cj10*sj12*x11709))+(((-1.0)*gconst10*r01*x11716))+((x11707*x11714))+(((-1.0)*r02*x11715)));
evalcond[5]=((((-1.0)*r12*x11715))+(((-1.0)*gconst10*r11*x11716))+(((-1.0)*x11710*x11713))+((x11707*x11708))+(((-1.0)*sj10*sj12*x11709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x11718=((-1.0)*r11);
CheckValue<IkReal> x11721 = IKatan2WithCheck(IkReal(x11718),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11721.valid){
continue;
}
IkReal x11719=((1.0)*(x11721.value));
IkReal x11720=x11447;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11719)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11719)));
IkReal gconst10=(x11718*x11720);
IkReal gconst11=((1.0)*r10*x11720);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11722=((-1.0)*r11);
CheckValue<IkReal> x11725 = IKatan2WithCheck(IkReal(x11722),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11725.valid){
continue;
}
IkReal x11723=((1.0)*(x11725.value));
IkReal x11724=x11447;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11723)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11723)));
IkReal gconst10=(x11722*x11724);
IkReal gconst11=((1.0)*r10*x11724);
IkReal x11726=r12*r12;
IkReal x11727=(cj10*r02);
IkReal x11728=x11447;
IkReal x11729=(sj10*x11728);
j14eval[0]=((IKabs(((((-1.0)*x11727))+(((-1.0)*r12*sj10)))))+(IKabs((((x11726*x11729))+(((-1.0)*x11729))+((r12*x11727*x11728))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x11730=((-1.0)*r11);
CheckValue<IkReal> x11733 = IKatan2WithCheck(IkReal(x11730),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11733.valid){
continue;
}
IkReal x11731=((1.0)*(x11733.value));
IkReal x11732=x11447;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11731)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11731)));
IkReal gconst10=(x11730*x11732);
IkReal gconst11=((1.0)*r10*x11732);
IkReal x11734=r12*r12;
IkReal x11735=(cj11*cj12);
IkReal x11736=(sj11*sj12);
IkReal x11737=((1.0)+(((-1.0)*x11734)));
CheckValue<IkReal> x11744=IKPowWithIntegerCheck(x11737,-1);
if(!x11744.valid){
continue;
}
IkReal x11738=x11744.value;
CheckValue<IkReal> x11745=IKPowWithIntegerCheck(((-1.0)+x11734),-1);
if(!x11745.valid){
continue;
}
IkReal x11739=x11745.value;
IkReal x11740=((1.0)*x11738);
if((x11737) < -0.00001)
continue;
IkReal x11741=IKsqrt(x11737);
IkReal x11742=(r12*r22*x11739*x11741);
IkReal x11743=((((-1.0)*x11740*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x11740*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x11738)));
j14eval[0]=x11743;
j14eval[1]=((IKabs(((((-1.0)*r22*x11735))+((r22*x11736)))))+(IKabs((((x11735*x11742))+(((-1.0)*x11736*x11742))))));
j14eval[2]=IKsign(x11743);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x11746=((-1.0)*r11);
CheckValue<IkReal> x11749 = IKatan2WithCheck(IkReal(x11746),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11749.valid){
continue;
}
IkReal x11747=((1.0)*(x11749.value));
IkReal x11748=x11447;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11747)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11747)));
IkReal gconst10=(x11746*x11748);
IkReal gconst11=((1.0)*r10*x11748);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x11750=((-1.0)*r11);
CheckValue<IkReal> x11753 = IKatan2WithCheck(IkReal(x11750),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11753.valid){
continue;
}
IkReal x11751=((1.0)*(x11753.value));
IkReal x11752=x11447;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11751)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11751)));
IkReal gconst10=(x11750*x11752);
IkReal gconst11=((1.0)*r10*x11752);
j14eval[0]=r02;
j14eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11754=((-1.0)*r11);
CheckValue<IkReal> x11757 = IKatan2WithCheck(IkReal(x11754),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11757.valid){
continue;
}
IkReal x11755=((1.0)*(x11757.value));
IkReal x11756=x11447;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11755)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11755)));
IkReal gconst10=(x11754*x11756);
IkReal gconst11=((1.0)*r10*x11756);
IkReal x11758=(cj12*r02*sj11);
IkReal x11759=(cj11*r02*sj12);
IkReal x11760=x11447;
IkReal x11761=(r12*x11760);
j14eval[0]=((IKabs((x11759+x11758)))+(IKabs((((x11759*x11761))+((x11758*x11761))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11762=(cj12*sj11);
IkReal x11763=((1.0)*gconst10);
IkReal x11764=(cj11*sj12);
IkReal x11765=(gconst11*r00);
CheckValue<IkReal> x11766=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x11763)))),-1);
if(!x11766.valid){
continue;
}
CheckValue<IkReal> x11767 = IKatan2WithCheck(IkReal((((x11762*x11765))+(((-1.0)*r01*x11763*x11764))+(((-1.0)*r01*x11762*x11763))+((x11764*x11765)))),IkReal((((r02*x11762))+((r02*x11764)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11767.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11766.value)))+(x11767.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11768=IKcos(j14);
IkReal x11769=IKsin(j14);
IkReal x11770=((1.0)*gconst11);
IkReal x11771=((1.0)*cj11);
IkReal x11772=(gconst10*r21);
IkReal x11773=(gconst10*r11);
IkReal x11774=(gconst10*r01);
IkReal x11775=((1.0)*x11768);
evalcond[0]=(((x11768*x11774))+((r02*x11769))+(((-1.0)*r00*x11768*x11770)));
evalcond[1]=(((x11769*x11772))+(((-1.0)*r22*x11775))+(((-1.0)*r20*x11769*x11770)));
evalcond[2]=((((-1.0)*r12*x11775))+(((-1.0)*r10*x11769*x11770))+((x11769*x11773)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11775))+((x11769*x11774))+(((-1.0)*r00*x11769*x11770)));
evalcond[4]=(((sj11*sj12))+((x11768*x11772))+((r22*x11769))+(((-1.0)*r20*x11768*x11770))+(((-1.0)*cj12*x11771)));
evalcond[5]=(((x11768*x11773))+(((-1.0)*sj12*x11771))+((r12*x11769))+(((-1.0)*cj12*sj11))+(((-1.0)*r10*x11768*x11770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11776=(gconst10*r01);
IkReal x11777=(gconst11*r00);
CheckValue<IkReal> x11778 = IKatan2WithCheck(IkReal((x11776+(((-1.0)*x11777)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11778.valid){
continue;
}
CheckValue<IkReal> x11779=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11776*x11777))+(x11776*x11776)+(x11777*x11777)+(r02*r02))),-1);
if(!x11779.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11778.value)+(((1.5707963267949)*(x11779.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11780=IKcos(j14);
IkReal x11781=IKsin(j14);
IkReal x11782=((1.0)*gconst11);
IkReal x11783=((1.0)*cj11);
IkReal x11784=(gconst10*r21);
IkReal x11785=(gconst10*r11);
IkReal x11786=(gconst10*r01);
IkReal x11787=((1.0)*x11780);
evalcond[0]=((((-1.0)*r00*x11780*x11782))+((x11780*x11786))+((r02*x11781)));
evalcond[1]=((((-1.0)*r20*x11781*x11782))+(((-1.0)*r22*x11787))+((x11781*x11784)));
evalcond[2]=((((-1.0)*r12*x11787))+(((-1.0)*r10*x11781*x11782))+((x11781*x11785)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x11781*x11782))+(((-1.0)*r02*x11787))+((x11781*x11786)));
evalcond[4]=(((sj11*sj12))+((x11780*x11784))+(((-1.0)*r20*x11780*x11782))+((r22*x11781))+(((-1.0)*cj12*x11783)));
evalcond[5]=(((x11780*x11785))+((r12*x11781))+(((-1.0)*sj12*x11783))+(((-1.0)*cj12*sj11))+(((-1.0)*r10*x11780*x11782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x11788 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11788.valid){
continue;
}
CheckValue<IkReal> x11789=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11789.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11788.value)+(((1.5707963267949)*(x11789.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11790=IKcos(j14);
IkReal x11791=IKsin(j14);
IkReal x11792=((1.0)*gconst11);
IkReal x11793=((1.0)*cj11);
IkReal x11794=(gconst10*r21);
IkReal x11795=(gconst10*r11);
IkReal x11796=(gconst10*r01);
IkReal x11797=((1.0)*x11790);
evalcond[0]=(((r02*x11791))+((x11790*x11796))+(((-1.0)*r00*x11790*x11792)));
evalcond[1]=((((-1.0)*r20*x11791*x11792))+(((-1.0)*r22*x11797))+((x11791*x11794)));
evalcond[2]=((((-1.0)*r10*x11791*x11792))+(((-1.0)*r12*x11797))+((x11791*x11795)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x11791*x11792))+(((-1.0)*r02*x11797))+((x11791*x11796)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r20*x11790*x11792))+((x11790*x11794))+(((-1.0)*cj12*x11793))+((r22*x11791)));
evalcond[5]=(((r12*x11791))+(((-1.0)*sj12*x11793))+(((-1.0)*cj12*sj11))+((x11790*x11795))+(((-1.0)*r10*x11790*x11792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x11798=((-1.0)*r11);
CheckValue<IkReal> x11801 = IKatan2WithCheck(IkReal(x11798),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11801.valid){
continue;
}
IkReal x11799=((1.0)*(x11801.value));
IkReal x11800=x11447;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11799)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11799)));
IkReal gconst10=(x11798*x11800);
IkReal gconst11=((1.0)*r10*x11800);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x11802=((-1.0)*r11);
CheckValue<IkReal> x11805 = IKatan2WithCheck(IkReal(x11802),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11805.valid){
continue;
}
IkReal x11803=((1.0)*(x11805.value));
IkReal x11804=x11447;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11803)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11803)));
IkReal gconst10=(x11802*x11804);
IkReal gconst11=((1.0)*r10*x11804);
IkReal x11806=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11810=IKPowWithIntegerCheck(x11806,-1);
if(!x11810.valid){
continue;
}
IkReal x11807=x11810.value;
IkReal x11808=((1.0)*x11807);
IkReal x11809=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r10*r11*x11807))+(((-1.0)*x11808*(r00*r00)*(r10*r10)))+(((-1.0)*x11808*(r01*r01)*(r11*r11))));
j14eval[0]=x11809;
j14eval[1]=r02;
j14eval[2]=x11806;
j14eval[3]=IKsign(x11809);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11811=((-1.0)*r11);
CheckValue<IkReal> x11814 = IKatan2WithCheck(IkReal(x11811),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11814.valid){
continue;
}
IkReal x11812=((1.0)*(x11814.value));
IkReal x11813=x11447;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11812)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11812)));
IkReal gconst10=(x11811*x11813);
IkReal gconst11=((1.0)*r10*x11813);
IkReal x11815=r12*r12;
CheckValue<IkReal> x11821=IKPowWithIntegerCheck(((-1.0)+x11815),-1);
if(!x11821.valid){
continue;
}
IkReal x11816=x11821.value;
IkReal x11817=((1.0)*cj12*r02*sj11);
IkReal x11818=((1.0)*cj11*r02*sj12);
if((((1.0)+(((-1.0)*x11815)))) < -0.00001)
continue;
IkReal x11819=IKsqrt(((1.0)+(((-1.0)*x11815))));
IkReal x11820=(r12*x11816*x11819);
j14eval[0]=((IKabs(((((-1.0)*x11818))+(((-1.0)*x11817)))))+(IKabs(((((-1.0)*x11818*x11820))+(((-1.0)*x11817*x11820))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11822=(cj11*sj12);
IkReal x11823=(cj12*sj11);
IkReal x11824=((1.0)*r02);
IkReal x11825=(gconst10*r01);
IkReal x11826=((1.0)*gconst11*r00);
CheckValue<IkReal> x11827=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x11827.valid){
continue;
}
CheckValue<IkReal> x11828 = IKatan2WithCheck(IkReal(((((-1.0)*x11822*x11826))+((x11823*x11825))+(((-1.0)*x11823*x11826))+((x11822*x11825)))),IkReal(((((-1.0)*x11822*x11824))+(((-1.0)*x11823*x11824)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11828.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11827.value)))+(x11828.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11829=IKcos(j14);
IkReal x11830=IKsin(j14);
IkReal x11831=((1.0)*gconst11);
IkReal x11832=(gconst10*r21);
IkReal x11833=(gconst10*r11);
IkReal x11834=(gconst10*r01);
IkReal x11835=((1.0)*x11829);
evalcond[0]=((((-1.0)*r00*x11829*x11831))+((x11829*x11834))+((r02*x11830)));
evalcond[1]=((((-1.0)*r20*x11830*x11831))+((x11830*x11832))+(((-1.0)*r22*x11835)));
evalcond[2]=((((-1.0)*r10*x11830*x11831))+(((-1.0)*r12*x11835))+((x11830*x11833)));
evalcond[3]=((1.0)+(((-1.0)*r00*x11830*x11831))+((x11830*x11834))+(((-1.0)*r02*x11835)));
evalcond[4]=(((x11829*x11833))+(((-1.0)*r10*x11829*x11831))+((cj12*sj11))+((r12*x11830))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r22*x11830))+((x11829*x11832))+(((-1.0)*r20*x11829*x11831))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11836=(gconst10*r01);
IkReal x11837=(gconst11*r00);
CheckValue<IkReal> x11838=IKPowWithIntegerCheck(IKsign(((((2.0)*x11836*x11837))+(((-1.0)*(x11837*x11837)))+(((-1.0)*(x11836*x11836)))+(((-1.0)*(r02*r02))))),-1);
if(!x11838.valid){
continue;
}
CheckValue<IkReal> x11839 = IKatan2WithCheck(IkReal(((((-1.0)*x11837))+x11836)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11839.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11838.value)))+(x11839.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11840=IKcos(j14);
IkReal x11841=IKsin(j14);
IkReal x11842=((1.0)*gconst11);
IkReal x11843=(gconst10*r21);
IkReal x11844=(gconst10*r11);
IkReal x11845=(gconst10*r01);
IkReal x11846=((1.0)*x11840);
evalcond[0]=(((x11840*x11845))+(((-1.0)*r00*x11840*x11842))+((r02*x11841)));
evalcond[1]=((((-1.0)*r20*x11841*x11842))+((x11841*x11843))+(((-1.0)*r22*x11846)));
evalcond[2]=(((x11841*x11844))+(((-1.0)*r10*x11841*x11842))+(((-1.0)*r12*x11846)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11846))+((x11841*x11845))+(((-1.0)*r00*x11841*x11842)));
evalcond[4]=((((-1.0)*r10*x11840*x11842))+((x11840*x11844))+((cj12*sj11))+((r12*x11841))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x11840*x11843))+(((-1.0)*r20*x11840*x11842))+((r22*x11841))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11847=((1.0)*gconst11);
CheckValue<IkReal> x11848 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11847)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11848.valid){
continue;
}
CheckValue<IkReal> x11849=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11847))+(((-1.0)*gconst10*r20)))),-1);
if(!x11849.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11848.value)+(((1.5707963267949)*(x11849.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11850=IKcos(j14);
IkReal x11851=IKsin(j14);
IkReal x11852=((1.0)*gconst11);
IkReal x11853=(gconst10*r21);
IkReal x11854=(gconst10*r11);
IkReal x11855=(gconst10*r01);
IkReal x11856=((1.0)*x11850);
evalcond[0]=((((-1.0)*r00*x11850*x11852))+((r02*x11851))+((x11850*x11855)));
evalcond[1]=((((-1.0)*r20*x11851*x11852))+(((-1.0)*r22*x11856))+((x11851*x11853)));
evalcond[2]=((((-1.0)*r10*x11851*x11852))+(((-1.0)*r12*x11856))+((x11851*x11854)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11856))+(((-1.0)*r00*x11851*x11852))+((x11851*x11855)));
evalcond[4]=((((-1.0)*r10*x11850*x11852))+((r12*x11851))+((cj12*sj11))+((cj11*sj12))+((x11850*x11854)));
evalcond[5]=(((sj11*sj12))+((r22*x11851))+(((-1.0)*r20*x11850*x11852))+(((-1.0)*cj11*cj12))+((x11850*x11853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x11857=((-1.0)*r11);
IkReal x11858=((-1.0)*r10);
CheckValue<IkReal> x11860 = IKatan2WithCheck(IkReal(x11857),IkReal(x11858),IKFAST_ATAN2_MAGTHRESH);
if(!x11860.valid){
continue;
}
IkReal x11859=((1.0)*(x11860.value));
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11859)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11858);
rxp1_1=(px*r21);
rxp1_2=(px*x11857);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11859)));
IkReal gconst10=x11857;
IkReal gconst11=((1.0)*r10);
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11861=((-1.0)*r11);
IkReal x11862=((-1.0)*r10);
CheckValue<IkReal> x11864 = IKatan2WithCheck(IkReal(x11861),IkReal(x11862),IKFAST_ATAN2_MAGTHRESH);
if(!x11864.valid){
continue;
}
IkReal x11863=((1.0)*(x11864.value));
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11863)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11862);
rxp1_1=(px*r21);
rxp1_2=(px*x11861);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11863)));
IkReal gconst10=x11861;
IkReal gconst11=((1.0)*r10);
j14eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11865=((-1.0)*r11);
IkReal x11866=((-1.0)*r10);
CheckValue<IkReal> x11868 = IKatan2WithCheck(IkReal(x11865),IkReal(x11866),IKFAST_ATAN2_MAGTHRESH);
if(!x11868.valid){
continue;
}
IkReal x11867=((1.0)*(x11868.value));
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11867)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11866);
rxp1_1=(px*r21);
rxp1_2=(px*x11865);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11867)));
IkReal gconst10=x11865;
IkReal gconst11=((1.0)*r10);
j14eval[0]=-1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x11871=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x11871.valid){
continue;
}
IkReal x11869=x11871.value;
IkReal x11870=(sj10*x11869);
cj14array[0]=(((cj12*sj11*x11870))+((cj11*sj12*x11870)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x11872=IKsin(j14);
IkReal x11873=IKcos(j14);
IkReal x11874=(gconst10*r21);
IkReal x11875=((1.0)*gconst11*r20);
evalcond[0]=(r02*x11872);
evalcond[1]=((((-1.0)*sj10))+(((-1.0)*r02*x11873)));
evalcond[2]=((((-1.0)*x11872*x11875))+((x11872*x11874)));
evalcond[3]=(((gconst10*r11*x11872))+(((-1.0)*gconst11*r10*x11872)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x11873*x11875))+((x11873*x11874))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x11877=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x11877.valid){
continue;
}
IkReal x11876=x11877.value;
cj14array[0]=((((-1.0)*sj11*sj12*x11876))+((cj11*cj12*x11876)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x11878=IKsin(j14);
IkReal x11879=IKcos(j14);
IkReal x11880=((1.0)*sj10);
IkReal x11881=((1.0)*x11879);
IkReal x11882=(gconst10*x11878);
IkReal x11883=((1.0)*gconst11*x11878);
evalcond[0]=(r02*x11878);
evalcond[1]=((((-1.0)*r02*x11881))+(((-1.0)*x11880)));
evalcond[2]=(((r21*x11882))+(((-1.0)*r20*x11883)));
evalcond[3]=(((r11*x11882))+(((-1.0)*r10*x11883)));
evalcond[4]=((((-1.0)*cj11*sj12*x11880))+(((-1.0)*cj12*sj11*x11880))+((gconst10*r11*x11879))+(((-1.0)*gconst11*r10*x11881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x11884=IKPowWithIntegerCheck(r02,-1);
if(!x11884.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x11884.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x11885=IKsin(j14);
IkReal x11886=IKcos(j14);
IkReal x11887=((1.0)*cj12);
IkReal x11888=(gconst10*r21);
IkReal x11889=(gconst10*r11);
IkReal x11890=((1.0)*gconst11*x11885);
IkReal x11891=((1.0)*gconst11*x11886);
evalcond[0]=(r02*x11885);
evalcond[1]=((((-1.0)*r20*x11890))+((x11885*x11888)));
evalcond[2]=((((-1.0)*r10*x11890))+((x11885*x11889)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r20*x11891))+((x11886*x11888))+(((-1.0)*cj11*x11887)));
evalcond[4]=((((-1.0)*r10*x11891))+((x11886*x11889))+(((-1.0)*cj11*sj10*sj12))+(((-1.0)*sj10*sj11*x11887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11892=((1.0)*gconst11);
CheckValue<IkReal> x11893 = IKatan2WithCheck(IkReal((((r12*sj10))+((cj10*r02)))),IkReal((((gconst10*r11*sj10))+(((-1.0)*cj10*r00*x11892))+((cj10*gconst10*r01))+(((-1.0)*r10*sj10*x11892)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11893.valid){
continue;
}
CheckValue<IkReal> x11894=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11894.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11893.value)+(((1.5707963267949)*(x11894.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11895=IKsin(j14);
IkReal x11896=IKcos(j14);
IkReal x11897=((1.0)*gconst11);
IkReal x11898=((1.0)*cj11);
IkReal x11899=(gconst10*r21);
IkReal x11900=((1.0)*sj10);
IkReal x11901=(gconst10*r11);
IkReal x11902=(cj12*sj11);
IkReal x11903=(gconst10*r01);
IkReal x11904=((1.0)*x11896);
evalcond[0]=(((x11895*x11899))+(((-1.0)*r20*x11895*x11897)));
evalcond[1]=((((-1.0)*r10*x11895*x11897))+(((-1.0)*r12*x11904))+cj10+((x11895*x11901)));
evalcond[2]=(((sj11*sj12))+(((-1.0)*cj12*x11898))+((x11896*x11899))+(((-1.0)*r20*x11896*x11897)));
evalcond[3]=((((-1.0)*r02*x11904))+(((-1.0)*r00*x11895*x11897))+(((-1.0)*x11900))+((x11895*x11903)));
evalcond[4]=((((-1.0)*cj10*sj12*x11898))+((x11896*x11903))+((r02*x11895))+(((-1.0)*cj10*x11902))+(((-1.0)*r00*x11896*x11897)));
evalcond[5]=((((-1.0)*x11900*x11902))+(((-1.0)*r10*x11896*x11897))+((x11896*x11901))+(((-1.0)*sj10*sj12*x11898))+((r12*x11895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11905=(gconst10*r21);
IkReal x11906=(cj11*cj12);
IkReal x11907=(sj11*sj12);
IkReal x11908=(gconst11*r20);
CheckValue<IkReal> x11909 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11906))+((r22*x11907)))),IkReal((((x11906*x11908))+((x11905*x11907))+(((-1.0)*x11905*x11906))+(((-1.0)*x11907*x11908)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11909.valid){
continue;
}
CheckValue<IkReal> x11910=IKPowWithIntegerCheck(IKsign(((((2.0)*x11905*x11908))+(((-1.0)*(x11905*x11905)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x11908*x11908))))),-1);
if(!x11910.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11909.value)+(((1.5707963267949)*(x11910.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11911=IKsin(j14);
IkReal x11912=IKcos(j14);
IkReal x11913=((1.0)*gconst11);
IkReal x11914=((1.0)*cj11);
IkReal x11915=(gconst10*r21);
IkReal x11916=((1.0)*sj10);
IkReal x11917=(gconst10*r11);
IkReal x11918=(cj12*sj11);
IkReal x11919=(gconst10*r01);
IkReal x11920=((1.0)*x11912);
evalcond[0]=((((-1.0)*r22*x11920))+(((-1.0)*r20*x11911*x11913))+((x11911*x11915)));
evalcond[1]=((((-1.0)*r10*x11911*x11913))+cj10+((x11911*x11917))+(((-1.0)*r12*x11920)));
evalcond[2]=((((-1.0)*r00*x11911*x11913))+(((-1.0)*r02*x11920))+((x11911*x11919))+(((-1.0)*x11916)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r20*x11912*x11913))+((r22*x11911))+(((-1.0)*cj12*x11914))+((x11912*x11915)));
evalcond[4]=(((x11912*x11919))+(((-1.0)*cj10*x11918))+(((-1.0)*r00*x11912*x11913))+(((-1.0)*cj10*sj12*x11914))+((r02*x11911)));
evalcond[5]=((((-1.0)*x11916*x11918))+((x11912*x11917))+(((-1.0)*sj10*sj12*x11914))+(((-1.0)*r10*x11912*x11913))+((r12*x11911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11921=((1.0)*gconst10);
CheckValue<IkReal> x11922=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11921))+(((-1.0)*gconst11*r21)))),-1);
if(!x11922.valid){
continue;
}
CheckValue<IkReal> x11923 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((gconst11*r10*sj10))+(((-1.0)*cj10*r01*x11921))+((cj10*gconst11*r00))+(((-1.0)*r11*sj10*x11921)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11923.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11922.value)))+(x11923.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11924=IKsin(j14);
IkReal x11925=IKcos(j14);
IkReal x11926=((1.0)*gconst11);
IkReal x11927=((1.0)*cj11);
IkReal x11928=(gconst10*r21);
IkReal x11929=((1.0)*sj10);
IkReal x11930=(gconst10*r11);
IkReal x11931=(cj12*sj11);
IkReal x11932=(gconst10*r01);
IkReal x11933=((1.0)*x11925);
evalcond[0]=(((x11924*x11928))+(((-1.0)*r20*x11924*x11926))+(((-1.0)*r22*x11933)));
evalcond[1]=((((-1.0)*r10*x11924*x11926))+cj10+((x11924*x11930))+(((-1.0)*r12*x11933)));
evalcond[2]=((((-1.0)*x11929))+(((-1.0)*r02*x11933))+((x11924*x11932))+(((-1.0)*r00*x11924*x11926)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x11927))+((x11925*x11928))+(((-1.0)*r20*x11925*x11926))+((r22*x11924)));
evalcond[4]=(((r02*x11924))+(((-1.0)*cj10*x11931))+((x11925*x11932))+(((-1.0)*r00*x11925*x11926))+(((-1.0)*cj10*sj12*x11927)));
evalcond[5]=((((-1.0)*r10*x11925*x11926))+((x11925*x11930))+((r12*x11924))+(((-1.0)*x11929*x11931))+(((-1.0)*sj10*sj12*x11927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11934=((1.0)*gconst11);
CheckValue<IkReal> x11935 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x11934))+((cj10*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11935.valid){
continue;
}
CheckValue<IkReal> x11936=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x11934)))),-1);
if(!x11936.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11935.value)+(((1.5707963267949)*(x11936.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11937=IKsin(j14);
IkReal x11938=IKcos(j14);
IkReal x11939=((1.0)*gconst11);
IkReal x11940=((1.0)*cj11);
IkReal x11941=(gconst10*r21);
IkReal x11942=((1.0)*sj10);
IkReal x11943=(gconst10*r11);
IkReal x11944=(cj12*sj11);
IkReal x11945=(gconst10*r01);
IkReal x11946=((1.0)*x11938);
evalcond[0]=((((-1.0)*r20*x11937*x11939))+(((-1.0)*r22*x11946))+((x11937*x11941)));
evalcond[1]=((((-1.0)*r10*x11937*x11939))+cj10+((x11937*x11943))+(((-1.0)*r12*x11946)));
evalcond[2]=((((-1.0)*x11942))+(((-1.0)*r02*x11946))+(((-1.0)*r00*x11937*x11939))+((x11937*x11945)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r20*x11938*x11939))+((r22*x11937))+(((-1.0)*cj12*x11940))+((x11938*x11941)));
evalcond[4]=(((r02*x11937))+(((-1.0)*cj10*x11944))+((x11938*x11945))+(((-1.0)*cj10*sj12*x11940))+(((-1.0)*r00*x11938*x11939)));
evalcond[5]=((((-1.0)*r10*x11938*x11939))+(((-1.0)*x11942*x11944))+(((-1.0)*sj10*sj12*x11940))+((r12*x11937))+((x11938*x11943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x11947=((-1.0)*r11);
CheckValue<IkReal> x11950 = IKatan2WithCheck(IkReal(x11947),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11950.valid){
continue;
}
IkReal x11948=((1.0)*(x11950.value));
IkReal x11949=x11447;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11948)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11948)));
IkReal gconst10=(x11947*x11949);
IkReal gconst11=((1.0)*r10*x11949);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11951=gconst10*gconst10;
IkReal x11952=gconst11*gconst11;
IkReal x11953=(cj13*gconst10);
IkReal x11954=(gconst11*r21);
IkReal x11955=((1.0)*r20);
IkReal x11956=(cj13*r01);
IkReal x11957=(r00*sj13);
IkReal x11958=(r01*sj13);
IkReal x11959=(r21*x11951);
CheckValue<IkReal> x11960 = IKatan2WithCheck(IkReal((((r00*r22*x11953))+((gconst11*r22*x11956)))),IkReal(((((-1.0)*gconst11*r00*x11953*x11955))+((cj13*r00*x11959))+((r01*x11953*x11954))+(((-1.0)*x11952*x11955*x11956)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11960.valid){
continue;
}
CheckValue<IkReal> x11961=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*gconst11*x11955*x11958))+(((-1.0)*gconst10*x11954*x11957))+((x11958*x11959))+((r20*x11952*x11957))+((r02*r22*sj13)))),-1);
if(!x11961.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11960.value)+(((1.5707963267949)*(x11961.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11962=IKsin(j14);
IkReal x11963=IKcos(j14);
IkReal x11964=(sj11*sj12);
IkReal x11965=(gconst11*r10);
IkReal x11966=((1.0)*cj11);
IkReal x11967=(cj13*r21);
IkReal x11968=((1.0)*sj13);
IkReal x11969=(gconst11*sj13);
IkReal x11970=(gconst10*r00);
IkReal x11971=(cj13*gconst11);
IkReal x11972=(cj12*sj11);
IkReal x11973=(gconst10*r20);
IkReal x11974=(gconst10*r10);
IkReal x11975=(cj12*x11966);
IkReal x11976=((1.0)*x11962);
IkReal x11977=(gconst10*x11963);
IkReal x11978=((1.0)*x11963);
IkReal x11979=(cj13*x11962);
IkReal x11980=(gconst10*x11962);
evalcond[0]=(((r21*x11980))+(((-1.0)*r22*x11978))+(((-1.0)*gconst11*r20*x11976)));
evalcond[1]=((((-1.0)*x11965*x11976))+(((-1.0)*r12*x11978))+((r11*x11980)));
evalcond[2]=((-1.0)+(((-1.0)*gconst11*r00*x11976))+(((-1.0)*r02*x11978))+((r01*x11980)));
evalcond[3]=(((r01*x11969))+((sj13*x11970))+((r02*x11979))+((cj13*r01*x11977))+(((-1.0)*r00*x11971*x11978)));
evalcond[4]=(((r01*x11971))+((cj13*x11970))+(((-1.0)*r02*x11962*x11968))+(((-1.0)*r01*x11968*x11977))+((r00*x11963*x11969)));
evalcond[5]=(x11972+((sj13*x11973))+(((-1.0)*r20*x11971*x11978))+((r21*x11969))+((x11967*x11977))+((r22*x11979))+((cj11*sj12)));
evalcond[6]=(x11964+((sj13*x11974))+((r11*x11969))+((r12*x11979))+(((-1.0)*x11975))+(((-1.0)*cj13*x11965*x11978))+((cj13*r11*x11977)));
evalcond[7]=((((-1.0)*r22*x11962*x11968))+x11964+((r20*x11963*x11969))+((cj13*x11973))+(((-1.0)*x11975))+(((-1.0)*r21*x11968*x11977))+((gconst11*x11967)));
evalcond[8]=((((-1.0)*x11972))+((cj13*x11974))+((r11*x11971))+(((-1.0)*sj12*x11966))+((sj13*x11963*x11965))+(((-1.0)*r12*x11962*x11968))+(((-1.0)*r11*x11968*x11977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x11981 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11981.valid){
continue;
}
CheckValue<IkReal> x11982=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11982.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11981.value)+(((1.5707963267949)*(x11982.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11983=IKsin(j14);
IkReal x11984=IKcos(j14);
IkReal x11985=(sj11*sj12);
IkReal x11986=(gconst11*r10);
IkReal x11987=((1.0)*cj11);
IkReal x11988=(cj13*r21);
IkReal x11989=((1.0)*sj13);
IkReal x11990=(gconst11*sj13);
IkReal x11991=(gconst10*r00);
IkReal x11992=(cj13*gconst11);
IkReal x11993=(cj12*sj11);
IkReal x11994=(gconst10*r20);
IkReal x11995=(gconst10*r10);
IkReal x11996=(cj12*x11987);
IkReal x11997=((1.0)*x11983);
IkReal x11998=(gconst10*x11984);
IkReal x11999=((1.0)*x11984);
IkReal x12000=(cj13*x11983);
IkReal x12001=(gconst10*x11983);
evalcond[0]=((((-1.0)*gconst11*r20*x11997))+((r21*x12001))+(((-1.0)*r22*x11999)));
evalcond[1]=((((-1.0)*r12*x11999))+((r11*x12001))+(((-1.0)*x11986*x11997)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x11999))+(((-1.0)*gconst11*r00*x11997))+((r01*x12001)));
evalcond[3]=((((-1.0)*r00*x11992*x11999))+((r01*x11990))+((sj13*x11991))+((cj13*r01*x11998))+((r02*x12000)));
evalcond[4]=(((r00*x11984*x11990))+(((-1.0)*r02*x11983*x11989))+(((-1.0)*r01*x11989*x11998))+((cj13*x11991))+((r01*x11992)));
evalcond[5]=(x11993+(((-1.0)*r20*x11992*x11999))+((x11988*x11998))+((r21*x11990))+((r22*x12000))+((sj13*x11994))+((cj11*sj12)));
evalcond[6]=(x11985+(((-1.0)*cj13*x11986*x11999))+((cj13*r11*x11998))+((r12*x12000))+((r11*x11990))+((sj13*x11995))+(((-1.0)*x11996)));
evalcond[7]=(x11985+((r20*x11984*x11990))+((gconst11*x11988))+((cj13*x11994))+(((-1.0)*r22*x11983*x11989))+(((-1.0)*x11996))+(((-1.0)*r21*x11989*x11998)));
evalcond[8]=((((-1.0)*sj12*x11987))+(((-1.0)*r11*x11989*x11998))+((sj13*x11984*x11986))+((cj13*x11995))+(((-1.0)*x11993))+(((-1.0)*r12*x11983*x11989))+((r11*x11992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x12002=((-1.0)*r11);
CheckValue<IkReal> x12005 = IKatan2WithCheck(IkReal(x12002),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12005.valid){
continue;
}
IkReal x12003=((1.0)*(x12005.value));
IkReal x12004=x11447;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x12003)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12003)));
IkReal gconst10=(x12002*x12004);
IkReal gconst11=((1.0)*r10*x12004);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12006=gconst10*gconst10;
IkReal x12007=gconst11*gconst11;
IkReal x12008=(cj13*gconst10);
IkReal x12009=(gconst11*r21);
IkReal x12010=((1.0)*r20);
IkReal x12011=(cj13*r01);
IkReal x12012=(r00*sj13);
IkReal x12013=(r01*sj13);
IkReal x12014=(r21*x12006);
CheckValue<IkReal> x12015 = IKatan2WithCheck(IkReal((((gconst11*r22*x12011))+((r00*r22*x12008)))),IkReal((((cj13*r00*x12014))+((r01*x12008*x12009))+(((-1.0)*x12007*x12010*x12011))+(((-1.0)*gconst11*r00*x12008*x12010)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12015.valid){
continue;
}
CheckValue<IkReal> x12016=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*gconst11*x12010*x12013))+(((-1.0)*gconst10*x12009*x12012))+((r20*x12007*x12012))+((x12013*x12014))+((r02*r22*sj13)))),-1);
if(!x12016.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12015.value)+(((1.5707963267949)*(x12016.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12017=IKsin(j14);
IkReal x12018=IKcos(j14);
IkReal x12019=(cj12*sj11);
IkReal x12020=(cj11*sj12);
IkReal x12021=(gconst11*r10);
IkReal x12022=(cj11*cj12);
IkReal x12023=(cj13*r21);
IkReal x12024=((1.0)*sj13);
IkReal x12025=(gconst11*sj13);
IkReal x12026=(gconst10*r00);
IkReal x12027=(cj13*gconst11);
IkReal x12028=(sj11*sj12);
IkReal x12029=(gconst10*r20);
IkReal x12030=(gconst10*r10);
IkReal x12031=((1.0)*x12017);
IkReal x12032=(gconst10*x12018);
IkReal x12033=((1.0)*x12018);
IkReal x12034=(cj13*x12017);
IkReal x12035=(gconst10*x12017);
IkReal x12036=(x12020+x12019);
evalcond[0]=(((r21*x12035))+(((-1.0)*gconst11*r20*x12031))+(((-1.0)*r22*x12033)));
evalcond[1]=((((-1.0)*x12021*x12031))+(((-1.0)*r12*x12033))+((r11*x12035)));
evalcond[2]=((1.0)+((r01*x12035))+(((-1.0)*r02*x12033))+(((-1.0)*gconst11*r00*x12031)));
evalcond[3]=((((-1.0)*r00*x12027*x12033))+((sj13*x12026))+((r01*x12025))+((cj13*r01*x12032))+((r02*x12034)));
evalcond[4]=(((cj13*x12026))+(((-1.0)*r02*x12017*x12024))+((r00*x12018*x12025))+(((-1.0)*r01*x12024*x12032))+((r01*x12027)));
evalcond[5]=(((x12023*x12032))+((sj13*x12029))+x12036+((r22*x12034))+((r21*x12025))+(((-1.0)*r20*x12027*x12033)));
evalcond[6]=(((cj13*r11*x12032))+(((-1.0)*x12028))+((sj13*x12030))+x12022+((r12*x12034))+(((-1.0)*cj13*x12021*x12033))+((r11*x12025)));
evalcond[7]=(((cj13*x12030))+(((-1.0)*r11*x12024*x12032))+(((-1.0)*r12*x12017*x12024))+x12036+((sj13*x12018*x12021))+((r11*x12027)));
evalcond[8]=(((cj13*x12029))+((r20*x12018*x12025))+(((-1.0)*r21*x12024*x12032))+(((-1.0)*x12022))+x12028+(((-1.0)*r22*x12017*x12024))+((gconst11*x12023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12037=((1.0)*gconst11);
CheckValue<IkReal> x12038 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12037)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12038.valid){
continue;
}
CheckValue<IkReal> x12039=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12037)))),-1);
if(!x12039.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12038.value)+(((1.5707963267949)*(x12039.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12040=IKsin(j14);
IkReal x12041=IKcos(j14);
IkReal x12042=(cj12*sj11);
IkReal x12043=(cj11*sj12);
IkReal x12044=(gconst11*r10);
IkReal x12045=(cj11*cj12);
IkReal x12046=(cj13*r21);
IkReal x12047=((1.0)*sj13);
IkReal x12048=(gconst11*sj13);
IkReal x12049=(gconst10*r00);
IkReal x12050=(cj13*gconst11);
IkReal x12051=(sj11*sj12);
IkReal x12052=(gconst10*r20);
IkReal x12053=(gconst10*r10);
IkReal x12054=((1.0)*x12040);
IkReal x12055=(gconst10*x12041);
IkReal x12056=((1.0)*x12041);
IkReal x12057=(cj13*x12040);
IkReal x12058=(gconst10*x12040);
IkReal x12059=(x12042+x12043);
evalcond[0]=((((-1.0)*gconst11*r20*x12054))+(((-1.0)*r22*x12056))+((r21*x12058)));
evalcond[1]=((((-1.0)*x12044*x12054))+(((-1.0)*r12*x12056))+((r11*x12058)));
evalcond[2]=((1.0)+((r01*x12058))+(((-1.0)*r02*x12056))+(((-1.0)*gconst11*r00*x12054)));
evalcond[3]=(((cj13*r01*x12055))+((sj13*x12049))+((r01*x12048))+((r02*x12057))+(((-1.0)*r00*x12050*x12056)));
evalcond[4]=((((-1.0)*r02*x12040*x12047))+((r01*x12050))+((cj13*x12049))+((r00*x12041*x12048))+(((-1.0)*r01*x12047*x12055)));
evalcond[5]=(((sj13*x12052))+((r22*x12057))+x12059+((r21*x12048))+(((-1.0)*r20*x12050*x12056))+((x12046*x12055)));
evalcond[6]=(((sj13*x12053))+(((-1.0)*cj13*x12044*x12056))+(((-1.0)*x12051))+x12045+((r11*x12048))+((r12*x12057))+((cj13*r11*x12055)));
evalcond[7]=(((sj13*x12041*x12044))+(((-1.0)*r11*x12047*x12055))+((cj13*x12053))+(((-1.0)*r12*x12040*x12047))+x12059+((r11*x12050)));
evalcond[8]=(((r20*x12041*x12048))+((cj13*x12052))+(((-1.0)*r22*x12040*x12047))+(((-1.0)*x12045))+x12051+((gconst11*x12046))+(((-1.0)*r21*x12047*x12055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x12060=((-1.0)*r11);
IkReal x12061=((-1.0)*r10);
CheckValue<IkReal> x12063 = IKatan2WithCheck(IkReal(x12060),IkReal(x12061),IKFAST_ATAN2_MAGTHRESH);
if(!x12063.valid){
continue;
}
IkReal x12062=((1.0)*(x12063.value));
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x12062)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12061);
rxp1_1=(px*r21);
rxp1_2=(px*x12060);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12062)));
IkReal gconst10=x12060;
IkReal gconst11=((1.0)*r10);
j14eval[0]=-1.0;
j14eval[1]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x12064=((-1.0)*r11);
IkReal x12065=((-1.0)*r10);
CheckValue<IkReal> x12067 = IKatan2WithCheck(IkReal(x12064),IkReal(x12065),IKFAST_ATAN2_MAGTHRESH);
if(!x12067.valid){
continue;
}
IkReal x12066=((1.0)*(x12067.value));
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x12066)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12065);
rxp1_1=(px*r21);
rxp1_2=(px*x12064);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12066)));
IkReal gconst10=x12064;
IkReal gconst11=((1.0)*r10);
IkReal x12068=((1.0)*cj13);
j14eval[0]=-1.0;
j14eval[1]=((((-1.0)*r10*r20*x12068))+(((-1.0)*r11*r21*x12068)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x12069=((-1.0)*r11);
IkReal x12070=((-1.0)*r10);
CheckValue<IkReal> x12072 = IKatan2WithCheck(IkReal(x12069),IkReal(x12070),IKFAST_ATAN2_MAGTHRESH);
if(!x12072.valid){
continue;
}
IkReal x12071=((1.0)*(x12072.value));
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x12071)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12070);
rxp1_1=(px*r21);
rxp1_2=(px*x12069);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12071)));
IkReal gconst10=x12069;
IkReal gconst11=((1.0)*r10);
j14eval[0]=cj13;
j14eval[1]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j14]

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12074=IKPowWithIntegerCheck(r02,-1);
if(!x12074.valid){
continue;
}
IkReal x12073=x12074.value;
CheckValue<IkReal> x12075=IKPowWithIntegerCheck(cj13,-1);
if(!x12075.valid){
continue;
}
if( IKabs((x12073*(x12075.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj10*x12073)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12073*(x12075.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12))))))+IKsqr(((-1.0)*sj10*x12073))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((x12073*(x12075.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12))))), ((-1.0)*sj10*x12073));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12076=IKsin(j14);
IkReal x12077=IKcos(j14);
IkReal x12078=((1.0)*cj11);
IkReal x12079=(cj10*sj12);
IkReal x12080=(gconst10*r21);
IkReal x12081=((1.0)*sj10);
IkReal x12082=(gconst11*r10);
IkReal x12083=(sj11*sj12);
IkReal x12084=(gconst11*sj13);
IkReal x12085=(cj12*sj11);
IkReal x12086=(gconst10*r11);
IkReal x12087=(gconst11*r20);
IkReal x12088=(cj13*gconst11);
IkReal x12089=(gconst10*r20);
IkReal x12090=(gconst10*r10);
IkReal x12091=((1.0)*x12077);
IkReal x12092=(cj13*x12077);
IkReal x12093=((1.0)*x12076);
evalcond[0]=((((-1.0)*x12081))+(((-1.0)*r02*x12091)));
evalcond[1]=((((-1.0)*x12087*x12093))+((x12076*x12080)));
evalcond[2]=(cj10+((x12076*x12086))+(((-1.0)*x12082*x12093)));
evalcond[3]=(((sj11*x12079))+(((-1.0)*cj10*cj12*x12078))+((cj13*r02*x12076)));
evalcond[4]=((((-1.0)*x12078*x12079))+(((-1.0)*cj10*x12085))+(((-1.0)*r02*sj13*x12093)));
evalcond[5]=(((sj13*x12089))+((x12080*x12092))+(((-1.0)*cj13*x12087*x12091))+x12085+((r21*x12084))+((cj11*sj12)));
evalcond[6]=((((-1.0)*cj12*x12078))+((cj13*x12089))+(((-1.0)*sj13*x12080*x12091))+x12083+((r21*x12088))+((r20*x12077*x12084)));
evalcond[7]=(((x12086*x12092))+((sj10*x12083))+(((-1.0)*cj13*x12082*x12091))+((r11*x12084))+(((-1.0)*cj12*sj10*x12078))+((sj13*x12090)));
evalcond[8]=((((-1.0)*sj13*x12086*x12091))+((sj13*x12077*x12082))+((cj13*x12090))+(((-1.0)*x12081*x12085))+((r11*x12088))+(((-1.0)*sj10*sj12*x12078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12094=((1.0)*r20);
IkReal x12095=((1.0)*gconst11);
CheckValue<IkReal> x12096=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12095))),-1);
if(!x12096.valid){
continue;
}
CheckValue<IkReal> x12097=IKPowWithIntegerCheck((((cj13*gconst10*r21))+(((-1.0)*cj13*gconst11*x12094))),-1);
if(!x12097.valid){
continue;
}
if( IKabs(((-1.0)*cj10*(x12096.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12097.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*r21*sj13*x12095))+(((-1.0)*cj12*sj11))+(((-1.0)*gconst10*sj13*x12094)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj10*(x12096.value)))+IKsqr(((x12097.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*r21*sj13*x12095))+(((-1.0)*cj12*sj11))+(((-1.0)*gconst10*sj13*x12094))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*cj10*(x12096.value)), ((x12097.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*r21*sj13*x12095))+(((-1.0)*cj12*sj11))+(((-1.0)*gconst10*sj13*x12094))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12098=IKsin(j14);
IkReal x12099=IKcos(j14);
IkReal x12100=((1.0)*cj11);
IkReal x12101=(cj10*sj12);
IkReal x12102=(gconst10*r21);
IkReal x12103=((1.0)*sj10);
IkReal x12104=(gconst11*r10);
IkReal x12105=(sj11*sj12);
IkReal x12106=(gconst11*sj13);
IkReal x12107=(cj12*sj11);
IkReal x12108=(gconst10*r11);
IkReal x12109=(gconst11*r20);
IkReal x12110=(cj13*gconst11);
IkReal x12111=(gconst10*r20);
IkReal x12112=(gconst10*r10);
IkReal x12113=((1.0)*x12099);
IkReal x12114=(cj13*x12099);
IkReal x12115=((1.0)*x12098);
evalcond[0]=((((-1.0)*x12103))+(((-1.0)*r02*x12113)));
evalcond[1]=(((x12098*x12102))+(((-1.0)*x12109*x12115)));
evalcond[2]=(((x12098*x12108))+cj10+(((-1.0)*x12104*x12115)));
evalcond[3]=(((sj11*x12101))+((cj13*r02*x12098))+(((-1.0)*cj10*cj12*x12100)));
evalcond[4]=((((-1.0)*x12100*x12101))+(((-1.0)*cj10*x12107))+(((-1.0)*r02*sj13*x12115)));
evalcond[5]=(x12107+((x12102*x12114))+((sj13*x12111))+(((-1.0)*cj13*x12109*x12113))+((cj11*sj12))+((r21*x12106)));
evalcond[6]=((((-1.0)*sj13*x12102*x12113))+x12105+((r20*x12099*x12106))+(((-1.0)*cj12*x12100))+((cj13*x12111))+((r21*x12110)));
evalcond[7]=((((-1.0)*cj13*x12104*x12113))+(((-1.0)*cj12*sj10*x12100))+((x12108*x12114))+((sj10*x12105))+((sj13*x12112))+((r11*x12106)));
evalcond[8]=(((sj13*x12099*x12104))+(((-1.0)*x12103*x12107))+(((-1.0)*sj10*sj12*x12100))+((cj13*x12112))+(((-1.0)*sj13*x12108*x12113))+((r11*x12110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12116=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12116.valid){
continue;
}
CheckValue<IkReal> x12117=IKPowWithIntegerCheck(r02,-1);
if(!x12117.valid){
continue;
}
if( IKabs(((-1.0)*cj10*(x12116.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj10*(x12117.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj10*(x12116.value)))+IKsqr(((-1.0)*sj10*(x12117.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*cj10*(x12116.value)), ((-1.0)*sj10*(x12117.value)));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12118=IKsin(j14);
IkReal x12119=IKcos(j14);
IkReal x12120=((1.0)*cj11);
IkReal x12121=(cj10*sj12);
IkReal x12122=(gconst10*r21);
IkReal x12123=((1.0)*sj10);
IkReal x12124=(gconst11*r10);
IkReal x12125=(sj11*sj12);
IkReal x12126=(gconst11*sj13);
IkReal x12127=(cj12*sj11);
IkReal x12128=(gconst10*r11);
IkReal x12129=(gconst11*r20);
IkReal x12130=(cj13*gconst11);
IkReal x12131=(gconst10*r20);
IkReal x12132=(gconst10*r10);
IkReal x12133=((1.0)*x12119);
IkReal x12134=(cj13*x12119);
IkReal x12135=((1.0)*x12118);
evalcond[0]=((((-1.0)*x12123))+(((-1.0)*r02*x12133)));
evalcond[1]=((((-1.0)*x12129*x12135))+((x12118*x12122)));
evalcond[2]=((((-1.0)*x12124*x12135))+cj10+((x12118*x12128)));
evalcond[3]=((((-1.0)*cj10*cj12*x12120))+((sj11*x12121))+((cj13*r02*x12118)));
evalcond[4]=((((-1.0)*cj10*x12127))+(((-1.0)*x12120*x12121))+(((-1.0)*r02*sj13*x12135)));
evalcond[5]=(((sj13*x12131))+((r21*x12126))+x12127+(((-1.0)*cj13*x12129*x12133))+((x12122*x12134))+((cj11*sj12)));
evalcond[6]=(((r20*x12119*x12126))+(((-1.0)*sj13*x12122*x12133))+((r21*x12130))+x12125+(((-1.0)*cj12*x12120))+((cj13*x12131)));
evalcond[7]=(((sj13*x12132))+(((-1.0)*cj13*x12124*x12133))+((sj10*x12125))+(((-1.0)*cj12*sj10*x12120))+((x12128*x12134))+((r11*x12126)));
evalcond[8]=((((-1.0)*sj10*sj12*x12120))+(((-1.0)*sj13*x12128*x12133))+((cj13*x12132))+(((-1.0)*x12123*x12127))+((sj13*x12119*x12124))+((r11*x12130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x12136=((-1.0)*r11);
CheckValue<IkReal> x12139 = IKatan2WithCheck(IkReal(x12136),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12139.valid){
continue;
}
IkReal x12137=((1.0)*(x12139.value));
IkReal x12138=x11447;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x12137)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12137)));
IkReal gconst10=(x12136*x12138);
IkReal gconst11=((1.0)*r10*x12138);
IkReal x12140=r12*r12;
IkReal x12141=(cj10*r02);
IkReal x12142=x11447;
IkReal x12143=(sj10*x12142);
j14eval[0]=((IKabs(((((-1.0)*x12141))+(((-1.0)*r12*sj10)))))+(IKabs((((r12*x12141*x12142))+((x12140*x12143))+(((-1.0)*x12143))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12144=((1.0)*gconst11);
IkReal x12145=(r20*sj13);
IkReal x12146=(cj13*r12);
IkReal x12147=(cj11*cj12);
IkReal x12148=(gconst10*r21*sj13);
IkReal x12149=((1.0)*gconst10*r20);
IkReal x12150=((1.0)*sj11*sj12);
CheckValue<IkReal> x12151=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11*x12148))+((gconst11*r10*x12148))+((gconst10*gconst11*r11*x12145))+(((-1.0)*gconst11*r10*x12144*x12145))),-1);
if(!x12151.valid){
continue;
}
CheckValue<IkReal> x12152=IKPowWithIntegerCheck(((((-1.0)*x12148))+((gconst11*x12145))),-1);
if(!x12152.valid){
continue;
}
if( IKabs(((x12151.value)*((((cj10*x12148))+(((-1.0)*cj10*x12144*x12145))+((r12*x12147))+(((-1.0)*r12*x12150))+(((-1.0)*r21*x12144*x12146))+(((-1.0)*x12146*x12149)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12152.value)*(((((-1.0)*cj13*r21*x12144))+x12147+(((-1.0)*cj13*x12149))+(((-1.0)*x12150)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12151.value)*((((cj10*x12148))+(((-1.0)*cj10*x12144*x12145))+((r12*x12147))+(((-1.0)*r12*x12150))+(((-1.0)*r21*x12144*x12146))+(((-1.0)*x12146*x12149))))))+IKsqr(((x12152.value)*(((((-1.0)*cj13*r21*x12144))+x12147+(((-1.0)*cj13*x12149))+(((-1.0)*x12150))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x12151.value)*((((cj10*x12148))+(((-1.0)*cj10*x12144*x12145))+((r12*x12147))+(((-1.0)*r12*x12150))+(((-1.0)*r21*x12144*x12146))+(((-1.0)*x12146*x12149))))), ((x12152.value)*(((((-1.0)*cj13*r21*x12144))+x12147+(((-1.0)*cj13*x12149))+(((-1.0)*x12150))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12153=IKsin(j14);
IkReal x12154=IKcos(j14);
IkReal x12155=(gconst11*r10);
IkReal x12156=((1.0)*cj11);
IkReal x12157=(cj10*sj12);
IkReal x12158=(cj13*r21);
IkReal x12159=((1.0)*sj13);
IkReal x12160=((1.0)*sj10);
IkReal x12161=(gconst11*sj13);
IkReal x12162=(gconst10*r00);
IkReal x12163=(sj11*sj12);
IkReal x12164=(cj12*sj11);
IkReal x12165=(cj13*r11);
IkReal x12166=(gconst10*r20);
IkReal x12167=(cj13*r01);
IkReal x12168=(gconst10*r10);
IkReal x12169=((1.0)*x12153);
IkReal x12170=(gconst10*x12154);
IkReal x12171=(r00*x12154);
IkReal x12172=(gconst10*x12153);
IkReal x12173=(r20*x12154);
IkReal x12174=(cj13*x12153);
IkReal x12175=((1.0)*x12154);
IkReal x12176=((1.0)*cj13*gconst11);
evalcond[0]=(((r21*x12172))+(((-1.0)*gconst11*r20*x12169)));
evalcond[1]=((((-1.0)*x12155*x12169))+cj10+((r11*x12172))+(((-1.0)*r12*x12175)));
evalcond[2]=((((-1.0)*gconst11*r00*x12169))+(((-1.0)*x12160))+((r01*x12172))+(((-1.0)*r02*x12175)));
evalcond[3]=(((r21*x12161))+((x12158*x12170))+(((-1.0)*x12173*x12176))+((sj13*x12166))+x12164+((cj11*sj12)));
evalcond[4]=(((cj13*x12166))+x12163+(((-1.0)*cj12*x12156))+((x12161*x12173))+((gconst11*x12158))+(((-1.0)*r21*x12159*x12170)));
evalcond[5]=(((x12167*x12170))+(((-1.0)*x12171*x12176))+((sj13*x12162))+((r01*x12161))+(((-1.0)*cj10*cj12*x12156))+((sj11*x12157))+((r02*x12174)));
evalcond[6]=((((-1.0)*cj13*x12155*x12175))+(((-1.0)*cj12*sj10*x12156))+((sj13*x12168))+((x12165*x12170))+((sj10*x12163))+((r11*x12161))+((r12*x12174)));
evalcond[7]=(((cj13*x12162))+(((-1.0)*x12156*x12157))+(((-1.0)*r01*x12159*x12170))+(((-1.0)*cj10*x12164))+((gconst11*x12167))+((x12161*x12171))+(((-1.0)*r02*x12153*x12159)));
evalcond[8]=(((cj13*x12168))+(((-1.0)*r11*x12159*x12170))+(((-1.0)*x12160*x12164))+((gconst11*x12165))+(((-1.0)*sj10*sj12*x12156))+((sj13*x12154*x12155))+(((-1.0)*r12*x12153*x12159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12177=((1.0)*gconst10);
CheckValue<IkReal> x12178 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((gconst11*r10*sj10))+((cj10*gconst11*r00))+(((-1.0)*r11*sj10*x12177))+(((-1.0)*cj10*r01*x12177)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12178.valid){
continue;
}
CheckValue<IkReal> x12179=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12177))+(((-1.0)*gconst11*r21)))),-1);
if(!x12179.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12178.value)+(((1.5707963267949)*(x12179.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12180=IKsin(j14);
IkReal x12181=IKcos(j14);
IkReal x12182=(gconst11*r10);
IkReal x12183=((1.0)*cj11);
IkReal x12184=(cj10*sj12);
IkReal x12185=(cj13*r21);
IkReal x12186=((1.0)*sj13);
IkReal x12187=((1.0)*sj10);
IkReal x12188=(gconst11*sj13);
IkReal x12189=(gconst10*r00);
IkReal x12190=(sj11*sj12);
IkReal x12191=(cj12*sj11);
IkReal x12192=(cj13*r11);
IkReal x12193=(gconst10*r20);
IkReal x12194=(cj13*r01);
IkReal x12195=(gconst10*r10);
IkReal x12196=((1.0)*x12180);
IkReal x12197=(gconst10*x12181);
IkReal x12198=(r00*x12181);
IkReal x12199=(gconst10*x12180);
IkReal x12200=(r20*x12181);
IkReal x12201=(cj13*x12180);
IkReal x12202=((1.0)*x12181);
IkReal x12203=((1.0)*cj13*gconst11);
evalcond[0]=(((r21*x12199))+(((-1.0)*gconst11*r20*x12196)));
evalcond[1]=((((-1.0)*x12182*x12196))+((r11*x12199))+(((-1.0)*r12*x12202))+cj10);
evalcond[2]=((((-1.0)*r02*x12202))+(((-1.0)*x12187))+(((-1.0)*gconst11*r00*x12196))+((r01*x12199)));
evalcond[3]=(((sj13*x12193))+((x12185*x12197))+(((-1.0)*x12200*x12203))+((r21*x12188))+x12191+((cj11*sj12)));
evalcond[4]=(((x12188*x12200))+(((-1.0)*cj12*x12183))+((cj13*x12193))+x12190+(((-1.0)*r21*x12186*x12197))+((gconst11*x12185)));
evalcond[5]=(((r02*x12201))+((x12194*x12197))+(((-1.0)*cj10*cj12*x12183))+((sj11*x12184))+((r01*x12188))+((sj13*x12189))+(((-1.0)*x12198*x12203)));
evalcond[6]=(((sj13*x12195))+((r12*x12201))+((r11*x12188))+(((-1.0)*cj12*sj10*x12183))+(((-1.0)*cj13*x12182*x12202))+((x12192*x12197))+((sj10*x12190)));
evalcond[7]=((((-1.0)*x12183*x12184))+(((-1.0)*r01*x12186*x12197))+((gconst11*x12194))+((cj13*x12189))+((x12188*x12198))+(((-1.0)*r02*x12180*x12186))+(((-1.0)*cj10*x12191)));
evalcond[8]=(((gconst11*x12192))+((cj13*x12195))+(((-1.0)*r11*x12186*x12197))+(((-1.0)*x12187*x12191))+((sj13*x12181*x12182))+(((-1.0)*r12*x12180*x12186))+(((-1.0)*sj10*sj12*x12183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12204=gconst11*gconst11;
IkReal x12205=r20*r20;
IkReal x12206=gconst10*gconst10;
IkReal x12207=r21*r21;
IkReal x12208=((1.0)*cj13);
IkReal x12209=(r22*sj13);
IkReal x12210=(gconst10*r20);
IkReal x12211=(gconst11*r21);
IkReal x12212=(gconst10*r21);
IkReal x12213=(cj12*sj11);
IkReal x12214=(cj11*sj12);
IkReal x12215=(r20*r21*sj13);
IkReal x12216=(gconst10*gconst11*sj13);
IkReal x12217=((1.0)*gconst11*r20);
CheckValue<IkReal> x12218=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12206*x12207*x12208))+(((-1.0)*x12208*(r22*r22)))+(((2.0)*cj13*x12210*x12211))+(((-1.0)*x12204*x12205*x12208)))),-1);
if(!x12218.valid){
continue;
}
CheckValue<IkReal> x12219 = IKatan2WithCheck(IkReal((((r22*x12214))+((r22*x12213))+((x12209*x12210))+((x12209*x12211)))),IkReal((((x12212*x12214))+((x12212*x12213))+(((-1.0)*x12205*x12216))+(((-1.0)*x12204*x12215))+((x12207*x12216))+(((-1.0)*x12213*x12217))+((x12206*x12215))+(((-1.0)*x12214*x12217)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12219.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12218.value)))+(x12219.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12220=IKsin(j14);
IkReal x12221=IKcos(j14);
IkReal x12222=(gconst11*r10);
IkReal x12223=((1.0)*cj11);
IkReal x12224=(cj10*sj12);
IkReal x12225=(cj13*r21);
IkReal x12226=((1.0)*sj13);
IkReal x12227=((1.0)*sj10);
IkReal x12228=(gconst11*sj13);
IkReal x12229=(gconst10*r00);
IkReal x12230=(sj11*sj12);
IkReal x12231=(cj12*sj11);
IkReal x12232=(cj13*r11);
IkReal x12233=(gconst10*r20);
IkReal x12234=(cj13*r01);
IkReal x12235=(gconst10*r10);
IkReal x12236=((1.0)*x12220);
IkReal x12237=(gconst10*x12221);
IkReal x12238=(r00*x12221);
IkReal x12239=(cj13*x12220);
IkReal x12240=(gconst10*x12220);
IkReal x12241=(r20*x12221);
IkReal x12242=((1.0)*x12221);
IkReal x12243=((1.0)*cj13*gconst11);
evalcond[0]=((((-1.0)*gconst11*r20*x12236))+(((-1.0)*r22*x12242))+((r21*x12240)));
evalcond[1]=((((-1.0)*r12*x12242))+((r11*x12240))+(((-1.0)*x12222*x12236))+cj10);
evalcond[2]=((((-1.0)*x12227))+(((-1.0)*gconst11*r00*x12236))+((r01*x12240))+(((-1.0)*r02*x12242)));
evalcond[3]=(((x12225*x12237))+((sj13*x12233))+x12231+((r21*x12228))+((r22*x12239))+(((-1.0)*x12241*x12243))+((cj11*sj12)));
evalcond[4]=(((cj13*x12233))+(((-1.0)*cj12*x12223))+x12230+((x12228*x12241))+(((-1.0)*r22*x12220*x12226))+(((-1.0)*r21*x12226*x12237))+((gconst11*x12225)));
evalcond[5]=(((sj11*x12224))+((x12234*x12237))+((r01*x12228))+((r02*x12239))+(((-1.0)*x12238*x12243))+(((-1.0)*cj10*cj12*x12223))+((sj13*x12229)));
evalcond[6]=(((r11*x12228))+((sj10*x12230))+((sj13*x12235))+((r12*x12239))+(((-1.0)*cj13*x12222*x12242))+((x12232*x12237))+(((-1.0)*cj12*sj10*x12223)));
evalcond[7]=((((-1.0)*r02*x12220*x12226))+((gconst11*x12234))+(((-1.0)*r01*x12226*x12237))+((x12228*x12238))+(((-1.0)*x12223*x12224))+(((-1.0)*cj10*x12231))+((cj13*x12229)));
evalcond[8]=((((-1.0)*r11*x12226*x12237))+((cj13*x12235))+(((-1.0)*r12*x12220*x12226))+((gconst11*x12232))+(((-1.0)*sj10*sj12*x12223))+(((-1.0)*x12227*x12231))+((sj13*x12221*x12222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12244=((1.0)*gconst10);
CheckValue<IkReal> x12245 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x12244))+(((-1.0)*r11*sj10*x12244))+((gconst11*r10*sj10))+((cj10*gconst11*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12245.valid){
continue;
}
CheckValue<IkReal> x12246=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12244))+(((-1.0)*gconst11*r21)))),-1);
if(!x12246.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12245.value)+(((1.5707963267949)*(x12246.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12247=IKsin(j14);
IkReal x12248=IKcos(j14);
IkReal x12249=(gconst11*r10);
IkReal x12250=((1.0)*cj11);
IkReal x12251=(cj10*sj12);
IkReal x12252=(cj13*r21);
IkReal x12253=((1.0)*sj13);
IkReal x12254=((1.0)*sj10);
IkReal x12255=(gconst11*sj13);
IkReal x12256=(gconst10*r00);
IkReal x12257=(sj11*sj12);
IkReal x12258=(cj12*sj11);
IkReal x12259=(cj13*r11);
IkReal x12260=(gconst10*r20);
IkReal x12261=(cj13*r01);
IkReal x12262=(gconst10*r10);
IkReal x12263=((1.0)*x12247);
IkReal x12264=(gconst10*x12248);
IkReal x12265=(r00*x12248);
IkReal x12266=(cj13*x12247);
IkReal x12267=(gconst10*x12247);
IkReal x12268=(r20*x12248);
IkReal x12269=((1.0)*x12248);
IkReal x12270=((1.0)*cj13*gconst11);
evalcond[0]=((((-1.0)*gconst11*r20*x12263))+((r21*x12267))+(((-1.0)*r22*x12269)));
evalcond[1]=((((-1.0)*r12*x12269))+((r11*x12267))+(((-1.0)*x12249*x12263))+cj10);
evalcond[2]=((((-1.0)*gconst11*r00*x12263))+((r01*x12267))+(((-1.0)*r02*x12269))+(((-1.0)*x12254)));
evalcond[3]=(((x12252*x12264))+x12258+(((-1.0)*x12268*x12270))+((sj13*x12260))+((r21*x12255))+((cj11*sj12))+((r22*x12266)));
evalcond[4]=((((-1.0)*r22*x12247*x12253))+x12257+((cj13*x12260))+(((-1.0)*r21*x12253*x12264))+((gconst11*x12252))+((x12255*x12268))+(((-1.0)*cj12*x12250)));
evalcond[5]=((((-1.0)*x12265*x12270))+(((-1.0)*cj10*cj12*x12250))+((r01*x12255))+((x12261*x12264))+((sj13*x12256))+((sj11*x12251))+((r02*x12266)));
evalcond[6]=(((r12*x12266))+(((-1.0)*cj13*x12249*x12269))+((r11*x12255))+((sj10*x12257))+(((-1.0)*cj12*sj10*x12250))+((sj13*x12262))+((x12259*x12264)));
evalcond[7]=((((-1.0)*r02*x12247*x12253))+(((-1.0)*x12250*x12251))+((cj13*x12256))+(((-1.0)*r01*x12253*x12264))+((gconst11*x12261))+((x12255*x12265))+(((-1.0)*cj10*x12258)));
evalcond[8]=((((-1.0)*sj10*sj12*x12250))+((sj13*x12248*x12249))+((cj13*x12262))+(((-1.0)*x12254*x12258))+((gconst11*x12259))+(((-1.0)*r12*x12247*x12253))+(((-1.0)*r11*x12253*x12264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12271=((1.0)*gconst11);
CheckValue<IkReal> x12272=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12271)))),-1);
if(!x12272.valid){
continue;
}
CheckValue<IkReal> x12273 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x12271))+((cj10*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12273.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12272.value)))+(x12273.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12274=IKsin(j14);
IkReal x12275=IKcos(j14);
IkReal x12276=(gconst11*r10);
IkReal x12277=((1.0)*cj11);
IkReal x12278=(cj10*sj12);
IkReal x12279=(cj13*r21);
IkReal x12280=((1.0)*sj13);
IkReal x12281=((1.0)*sj10);
IkReal x12282=(gconst11*sj13);
IkReal x12283=(gconst10*r00);
IkReal x12284=(sj11*sj12);
IkReal x12285=(cj12*sj11);
IkReal x12286=(cj13*r11);
IkReal x12287=(gconst10*r20);
IkReal x12288=(cj13*r01);
IkReal x12289=(gconst10*r10);
IkReal x12290=((1.0)*x12274);
IkReal x12291=(gconst10*x12275);
IkReal x12292=(r00*x12275);
IkReal x12293=(cj13*x12274);
IkReal x12294=(gconst10*x12274);
IkReal x12295=(r20*x12275);
IkReal x12296=((1.0)*x12275);
IkReal x12297=((1.0)*cj13*gconst11);
evalcond[0]=(((r21*x12294))+(((-1.0)*gconst11*r20*x12290))+(((-1.0)*r22*x12296)));
evalcond[1]=(((r11*x12294))+cj10+(((-1.0)*x12276*x12290))+(((-1.0)*r12*x12296)));
evalcond[2]=(((r01*x12294))+(((-1.0)*r02*x12296))+(((-1.0)*gconst11*r00*x12290))+(((-1.0)*x12281)));
evalcond[3]=((((-1.0)*x12295*x12297))+x12285+((r22*x12293))+((x12279*x12291))+((sj13*x12287))+((cj11*sj12))+((r21*x12282)));
evalcond[4]=(((gconst11*x12279))+x12284+(((-1.0)*cj12*x12277))+((x12282*x12295))+(((-1.0)*r22*x12274*x12280))+((cj13*x12287))+(((-1.0)*r21*x12280*x12291)));
evalcond[5]=(((x12288*x12291))+(((-1.0)*x12292*x12297))+((sj11*x12278))+((r01*x12282))+((r02*x12293))+((sj13*x12283))+(((-1.0)*cj10*cj12*x12277)));
evalcond[6]=((((-1.0)*cj13*x12276*x12296))+((x12286*x12291))+((r12*x12293))+((r11*x12282))+((sj10*x12284))+(((-1.0)*cj12*sj10*x12277))+((sj13*x12289)));
evalcond[7]=(((gconst11*x12288))+(((-1.0)*r02*x12274*x12280))+(((-1.0)*r01*x12280*x12291))+((x12282*x12292))+(((-1.0)*cj10*x12285))+((cj13*x12283))+(((-1.0)*x12277*x12278)));
evalcond[8]=(((gconst11*x12286))+(((-1.0)*x12281*x12285))+(((-1.0)*r12*x12274*x12280))+(((-1.0)*sj10*sj12*x12277))+((cj13*x12289))+((sj13*x12275*x12276))+(((-1.0)*r11*x12280*x12291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
IkReal x12298=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x12298;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj15*r00))+((r01*sj15))))));
j14eval[2]=IKsign(x12298);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
IkReal x12299=((1.0)*cj15);
IkReal x12300=((((-1.0)*r01*x12299))+(((-1.0)*r00*sj15)));
j14eval[0]=x12300;
j14eval[1]=((IKabs(((((-1.0)*r20*x12299))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x12300);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj10=0;
cj10=1.0;
j10=0;
IkReal x12301=cj15*cj15;
IkReal x12302=(cj13*r21);
IkReal x12303=(cj15*sj15);
IkReal x12304=(cj13*r20);
IkReal x12305=((((-1.0)*r10*x12301*x12304))+((r10*x12302*x12303))+(((-1.0)*cj13*r12*r22))+((r11*x12301*x12302))+((r11*x12303*x12304))+(((-1.0)*r11*x12302)));
j14eval[0]=x12305;
j14eval[1]=IKsign(x12305);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x12306=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x12306;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj15*r00))+((r01*sj15))))));
j14eval[2]=IKsign(x12306);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x12307=((1.0)*cj15);
IkReal x12308=((((-1.0)*r01*x12307))+(((-1.0)*r00*sj15)));
j14eval[0]=x12308;
j14eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12307))+((r21*sj15))))));
j14eval[2]=IKsign(x12308);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x12309=cj15*cj15;
IkReal x12310=r11*r11;
IkReal x12311=(r11*sj15);
IkReal x12312=(cj15*r10);
IkReal x12313=((r12*r12)+(((-2.0)*x12311*x12312))+x12310+(((-1.0)*x12309*x12310))+((x12309*(r10*r10))));
j14eval[0]=x12313;
j14eval[1]=IKsign(x12313);
j14eval[2]=((IKabs((x12312+(((-1.0)*x12311)))))+(IKabs(r12)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x12314=((-1.0)*px);
sj10=0;
cj10=1.0;
j10=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12314);
rxp1_1=(px*r21);
rxp1_2=(r11*x12314);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=(((r11*sj15))+(((-1.0)*cj15*r10)));
j14eval[1]=((((-1.0)*r21*sj15))+((cj15*r20)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x12315=((-1.0)*px);
sj10=0;
cj10=1.0;
j10=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12315);
rxp1_1=(px*r21);
rxp1_2=(r11*x12315);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=r02;
j14eval[1]=((((-1.0)*r21*sj15))+((cj15*r20)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12316=((1.0)*sj11);
CheckValue<IkReal> x12317=IKPowWithIntegerCheck(r02,-1);
if(!x12317.valid){
continue;
}
CheckValue<IkReal> x12318=IKPowWithIntegerCheck(((((-1.0)*r21*sj15))+((cj15*r20))),-1);
if(!x12318.valid){
continue;
}
if( IKabs(((x12317.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*x12316)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12318.value)*(((((-1.0)*sj12*x12316))+((cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12317.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*x12316))))))+IKsqr(((x12318.value)*(((((-1.0)*sj12*x12316))+((cj11*cj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x12317.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*x12316))))), ((x12318.value)*(((((-1.0)*sj12*x12316))+((cj11*cj12))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12319=IKsin(j14);
IkReal x12320=IKcos(j14);
IkReal x12321=((1.0)*cj12);
IkReal x12322=(cj15*r10);
IkReal x12323=(cj15*r20);
IkReal x12324=(sj15*x12319);
IkReal x12325=((1.0)*x12319);
IkReal x12326=((1.0)*sj15*x12320);
evalcond[0]=((-1.0)*r02*x12320);
evalcond[1]=(((r21*x12324))+(((-1.0)*x12323*x12325)));
evalcond[2]=((((-1.0)*r11*x12326))+((x12320*x12322)));
evalcond[3]=((1.0)+((r11*x12324))+(((-1.0)*x12322*x12325)));
evalcond[4]=((((-1.0)*cj11*sj12))+(((-1.0)*sj11*x12321))+(((-1.0)*r02*x12325)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r21*x12326))+(((-1.0)*cj11*x12321))+((x12320*x12323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12327=IKPowWithIntegerCheck((((r11*sj15))+(((-1.0)*cj15*r10))),-1);
if(!x12327.valid){
continue;
}
CheckValue<IkReal> x12328=IKPowWithIntegerCheck(((((-1.0)*r21*sj15))+((cj15*r20))),-1);
if(!x12328.valid){
continue;
}
if( IKabs(((-1.0)*(x12327.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12328.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12327.value)))+IKsqr(((x12328.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*(x12327.value)), ((x12328.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12329=IKsin(j14);
IkReal x12330=IKcos(j14);
IkReal x12331=((1.0)*cj12);
IkReal x12332=(cj15*r10);
IkReal x12333=(cj15*r20);
IkReal x12334=(sj15*x12329);
IkReal x12335=((1.0)*x12329);
IkReal x12336=((1.0)*sj15*x12330);
evalcond[0]=((-1.0)*r02*x12330);
evalcond[1]=(((r21*x12334))+(((-1.0)*x12333*x12335)));
evalcond[2]=(((x12330*x12332))+(((-1.0)*r11*x12336)));
evalcond[3]=((1.0)+(((-1.0)*x12332*x12335))+((r11*x12334)));
evalcond[4]=((((-1.0)*cj11*sj12))+(((-1.0)*sj11*x12331))+(((-1.0)*r02*x12335)));
evalcond[5]=(((sj11*sj12))+((x12330*x12333))+(((-1.0)*r21*x12336))+(((-1.0)*cj11*x12331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x12337=((-1.0)*pz);
sj10=0;
cj10=1.0;
j10=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12337);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12337);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j14eval[0]=(((r11*sj15))+(((-1.0)*cj15*r10)));
j14eval[1]=(((cj15*r00))+(((-1.0)*r01*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x12338=((-1.0)*pz);
sj10=0;
cj10=1.0;
j10=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12338);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12338);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j14eval[0]=r22;
j14eval[1]=(((cj15*r00))+(((-1.0)*r01*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12339=IKPowWithIntegerCheck(r22,-1);
if(!x12339.valid){
continue;
}
CheckValue<IkReal> x12340=IKPowWithIntegerCheck((((cj15*r00))+(((-1.0)*r01*sj15))),-1);
if(!x12340.valid){
continue;
}
if( IKabs(((x12339.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12340.value)*((((cj12*sj11))+((cj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12339.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12))))))+IKsqr(((x12340.value)*((((cj12*sj11))+((cj11*sj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x12339.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12))))), ((x12340.value)*((((cj12*sj11))+((cj11*sj12))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12341=IKsin(j14);
IkReal x12342=IKcos(j14);
IkReal x12343=((1.0)*cj12);
IkReal x12344=(sj15*x12341);
IkReal x12345=(cj15*x12342);
IkReal x12346=((1.0)*cj15*x12341);
IkReal x12347=((1.0)*sj15*x12342);
evalcond[0]=((-1.0)*r22*x12342);
evalcond[1]=(((r01*x12344))+(((-1.0)*r00*x12346)));
evalcond[2]=(((sj11*sj12))+(((-1.0)*cj11*x12343))+(((-1.0)*r22*x12341)));
evalcond[3]=((((-1.0)*r11*x12347))+((r10*x12345)));
evalcond[4]=((1.0)+((r11*x12344))+(((-1.0)*r10*x12346)));
evalcond[5]=((((-1.0)*cj11*sj12))+((r00*x12345))+(((-1.0)*r01*x12347))+(((-1.0)*sj11*x12343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12348=IKPowWithIntegerCheck((((r11*sj15))+(((-1.0)*cj15*r10))),-1);
if(!x12348.valid){
continue;
}
CheckValue<IkReal> x12349=IKPowWithIntegerCheck((((cj15*r00))+(((-1.0)*r01*sj15))),-1);
if(!x12349.valid){
continue;
}
if( IKabs(((-1.0)*(x12348.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12349.value)*((((cj12*sj11))+((cj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12348.value)))+IKsqr(((x12349.value)*((((cj12*sj11))+((cj11*sj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*(x12348.value)), ((x12349.value)*((((cj12*sj11))+((cj11*sj12))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12350=IKsin(j14);
IkReal x12351=IKcos(j14);
IkReal x12352=((1.0)*cj12);
IkReal x12353=(sj15*x12350);
IkReal x12354=(cj15*x12351);
IkReal x12355=((1.0)*cj15*x12350);
IkReal x12356=((1.0)*sj15*x12351);
evalcond[0]=((-1.0)*r22*x12351);
evalcond[1]=(((r01*x12353))+(((-1.0)*r00*x12355)));
evalcond[2]=(((sj11*sj12))+(((-1.0)*r22*x12350))+(((-1.0)*cj11*x12352)));
evalcond[3]=((((-1.0)*r11*x12356))+((r10*x12354)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12355))+((r11*x12353)));
evalcond[5]=((((-1.0)*cj11*sj12))+((r00*x12354))+(((-1.0)*r01*x12356))+(((-1.0)*sj11*x12352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12357=cj15*cj15;
IkReal x12358=r11*r11;
IkReal x12359=(r11*sj15);
IkReal x12360=(cj15*r10);
CheckValue<IkReal> x12361 = IKatan2WithCheck(IkReal(((((-1.0)*x12359))+x12360)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12361.valid){
continue;
}
CheckValue<IkReal> x12362=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x12357*(r10*r10)))+x12358+(((-1.0)*x12357*x12358))+(((-2.0)*x12359*x12360)))),-1);
if(!x12362.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12361.value)+(((1.5707963267949)*(x12362.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12363=IKsin(j14);
IkReal x12364=IKcos(j14);
IkReal x12365=(r11*sj15);
IkReal x12366=((1.0)*cj11);
IkReal x12367=(cj15*r10);
IkReal x12368=(cj15*r00);
IkReal x12369=(r21*sj15);
IkReal x12370=(r01*sj15);
IkReal x12371=(cj15*r20);
IkReal x12372=((1.0)*x12364);
IkReal x12373=((1.0)*x12363);
evalcond[0]=((((-1.0)*r22*x12372))+(((-1.0)*x12371*x12373))+((x12363*x12369)));
evalcond[1]=((((-1.0)*x12368*x12373))+(((-1.0)*r02*x12372))+((x12363*x12370)));
evalcond[2]=((((-1.0)*x12365*x12372))+((x12364*x12367))+(((-1.0)*r12*x12373)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12372))+(((-1.0)*x12367*x12373))+((x12363*x12365)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r22*x12373))+(((-1.0)*cj12*x12366))+((x12364*x12371))+(((-1.0)*x12369*x12372)));
evalcond[5]=((((-1.0)*sj12*x12366))+((x12364*x12368))+(((-1.0)*cj12*sj11))+(((-1.0)*r02*x12373))+(((-1.0)*x12370*x12372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12374=((1.0)*cj15);
CheckValue<IkReal> x12375=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12374))+(((-1.0)*r00*sj15)))),-1);
if(!x12375.valid){
continue;
}
CheckValue<IkReal> x12376 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12374))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12376.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12375.value)))+(x12376.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12377=IKsin(j14);
IkReal x12378=IKcos(j14);
IkReal x12379=(r11*sj15);
IkReal x12380=((1.0)*cj11);
IkReal x12381=(cj15*r10);
IkReal x12382=(cj15*r00);
IkReal x12383=(r21*sj15);
IkReal x12384=(r01*sj15);
IkReal x12385=(cj15*r20);
IkReal x12386=((1.0)*x12378);
IkReal x12387=((1.0)*x12377);
evalcond[0]=((((-1.0)*r22*x12386))+((x12377*x12383))+(((-1.0)*x12385*x12387)));
evalcond[1]=((((-1.0)*r02*x12386))+(((-1.0)*x12382*x12387))+((x12377*x12384)));
evalcond[2]=(((x12378*x12381))+(((-1.0)*x12379*x12386))+(((-1.0)*r12*x12387)));
evalcond[3]=((1.0)+(((-1.0)*x12381*x12387))+((x12377*x12379))+(((-1.0)*r12*x12386)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x12383*x12386))+(((-1.0)*cj12*x12380))+(((-1.0)*r22*x12387))+((x12378*x12385)));
evalcond[5]=((((-1.0)*x12384*x12386))+(((-1.0)*r02*x12387))+(((-1.0)*sj12*x12380))+(((-1.0)*cj12*sj11))+((x12378*x12382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12388 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj15*r00))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12388.valid){
continue;
}
CheckValue<IkReal> x12389=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x12389.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12388.value)+(((1.5707963267949)*(x12389.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12390=IKsin(j14);
IkReal x12391=IKcos(j14);
IkReal x12392=(r11*sj15);
IkReal x12393=((1.0)*cj11);
IkReal x12394=(cj15*r10);
IkReal x12395=(cj15*r00);
IkReal x12396=(r21*sj15);
IkReal x12397=(r01*sj15);
IkReal x12398=(cj15*r20);
IkReal x12399=((1.0)*x12391);
IkReal x12400=((1.0)*x12390);
evalcond[0]=((((-1.0)*x12398*x12400))+((x12390*x12396))+(((-1.0)*r22*x12399)));
evalcond[1]=((((-1.0)*x12395*x12400))+(((-1.0)*r02*x12399))+((x12390*x12397)));
evalcond[2]=((((-1.0)*r12*x12400))+((x12391*x12394))+(((-1.0)*x12392*x12399)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12399))+(((-1.0)*x12394*x12400))+((x12390*x12392)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x12393))+(((-1.0)*x12396*x12399))+(((-1.0)*r22*x12400))+((x12391*x12398)));
evalcond[5]=((((-1.0)*x12397*x12399))+(((-1.0)*sj12*x12393))+(((-1.0)*cj12*sj11))+((x12391*x12395))+(((-1.0)*r02*x12400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x12401=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x12401;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj15*r00))+((r01*sj15))))));
j14eval[2]=IKsign(x12401);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x12402=((1.0)*cj15);
IkReal x12403=((((-1.0)*r01*x12402))+(((-1.0)*r00*sj15)));
j14eval[0]=x12403;
j14eval[1]=((IKabs((((r21*sj15))+(((-1.0)*r20*x12402)))))+(IKabs(r22)));
j14eval[2]=IKsign(x12403);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x12404=((1.0)*cj15);
IkReal x12405=(r11*sj15);
IkReal x12406=(sj11*sj12);
IkReal x12407=(cj11*cj12);
IkReal x12408=((((-1.0)*r01*x12404))+(((-1.0)*r00*sj15)));
j14eval[0]=x12408;
j14eval[1]=((IKabs(((((-1.0)*r10*x12404*x12406))+(((-1.0)*x12405*x12407))+((x12405*x12406))+((cj15*r10*x12407)))))+(IKabs(((((-1.0)*r12*x12406))+((r12*x12407))))));
j14eval[2]=IKsign(x12408);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x12409=((-1.0)*px);
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12409);
rxp1_1=(px*r21);
rxp1_2=(r11*x12409);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=r02;
j14eval[1]=((((-1.0)*cj15*r20))+((r21*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x12410=((-1.0)*px);
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12410);
rxp1_1=(px*r21);
rxp1_2=(r11*x12410);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12411=((1.0)*cj15);
j14eval[0]=((((-1.0)*r10*x12411))+((r11*sj15)));
j14eval[1]=((((-1.0)*r20*x12411))+((r21*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12412=((1.0)*cj15);
CheckValue<IkReal> x12413=IKPowWithIntegerCheck(((((-1.0)*r10*x12412))+((r11*sj15))),-1);
if(!x12413.valid){
continue;
}
CheckValue<IkReal> x12414=IKPowWithIntegerCheck(((((-1.0)*r20*x12412))+((r21*sj15))),-1);
if(!x12414.valid){
continue;
}
if( IKabs(((-1.0)*(x12413.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12414.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12413.value)))+IKsqr(((x12414.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*(x12413.value)), ((x12414.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12415=IKsin(j14);
IkReal x12416=IKcos(j14);
IkReal x12417=((1.0)*cj12);
IkReal x12418=(sj15*x12415);
IkReal x12419=((1.0)*cj15*r10);
IkReal x12420=(sj15*x12416);
IkReal x12421=((1.0)*cj15*r20);
evalcond[0]=((-1.0)*r02*x12416);
evalcond[1]=(((r21*x12418))+(((-1.0)*x12415*x12421)));
evalcond[2]=((((-1.0)*cj11*sj12))+((r02*x12415))+(((-1.0)*sj11*x12417)));
evalcond[3]=((((-1.0)*x12416*x12419))+((r11*x12420)));
evalcond[4]=((1.0)+(((-1.0)*x12415*x12419))+((r11*x12418)));
evalcond[5]=(((sj11*sj12))+((r21*x12420))+(((-1.0)*cj11*x12417))+(((-1.0)*x12416*x12421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12422=IKPowWithIntegerCheck(r02,-1);
if(!x12422.valid){
continue;
}
CheckValue<IkReal> x12423=IKPowWithIntegerCheck(((((-1.0)*cj15*r20))+((r21*sj15))),-1);
if(!x12423.valid){
continue;
}
if( IKabs(((x12422.value)*((((cj12*sj11))+((cj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12423.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12422.value)*((((cj12*sj11))+((cj11*sj12))))))+IKsqr(((x12423.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x12422.value)*((((cj12*sj11))+((cj11*sj12))))), ((x12423.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12424=IKsin(j14);
IkReal x12425=IKcos(j14);
IkReal x12426=((1.0)*cj12);
IkReal x12427=(sj15*x12424);
IkReal x12428=((1.0)*cj15*r10);
IkReal x12429=(sj15*x12425);
IkReal x12430=((1.0)*cj15*r20);
evalcond[0]=((-1.0)*r02*x12425);
evalcond[1]=(((r21*x12427))+(((-1.0)*x12424*x12430)));
evalcond[2]=((((-1.0)*cj11*sj12))+(((-1.0)*sj11*x12426))+((r02*x12424)));
evalcond[3]=((((-1.0)*x12425*x12428))+((r11*x12429)));
evalcond[4]=((1.0)+(((-1.0)*x12424*x12428))+((r11*x12427)));
evalcond[5]=(((sj11*sj12))+((r21*x12429))+(((-1.0)*x12425*x12430))+(((-1.0)*cj11*x12426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x12431=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x12431;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x12431);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x12432=((1.0)*cj15);
IkReal x12433=((((-1.0)*r21*x12432))+(((-1.0)*r20*sj15)));
j14eval[0]=x12433;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*r10*x12432))))));
j14eval[2]=IKsign(x12433);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x12434=cj15*cj15;
IkReal x12435=(r11*r21);
IkReal x12436=(cj15*r20);
IkReal x12437=(r21*sj15);
IkReal x12438=((((-1.0)*r12*r22))+(((-1.0)*r10*r20*x12434))+((r11*sj15*x12436))+((cj15*r10*x12437))+((x12434*x12435))+(((-1.0)*x12435)));
j14eval[0]=x12438;
j14eval[1]=IKsign(x12438);
j14eval[2]=((IKabs((x12437+(((-1.0)*x12436)))))+(IKabs(r22)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12439=cj15*cj15;
IkReal x12440=(r11*r21);
IkReal x12441=(cj15*r20);
IkReal x12442=(r21*sj15);
CheckValue<IkReal> x12443=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12440))+(((-1.0)*r12*r22))+((x12439*x12440))+(((-1.0)*r10*r20*x12439))+((r11*sj15*x12441))+((cj15*r10*x12442)))),-1);
if(!x12443.valid){
continue;
}
CheckValue<IkReal> x12444 = IKatan2WithCheck(IkReal(((((-1.0)*x12441))+x12442)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12444.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12443.value)))+(x12444.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12445=IKcos(j14);
IkReal x12446=IKsin(j14);
IkReal x12447=(sj15*x12446);
IkReal x12448=((1.0)*x12445);
IkReal x12449=(sj15*x12445);
IkReal x12450=((1.0)*cj15*x12446);
evalcond[0]=(((r21*x12449))+((r22*x12446))+(((-1.0)*cj15*r20*x12448)));
evalcond[1]=(((r11*x12449))+((r12*x12446))+(((-1.0)*cj15*r10*x12448)));
evalcond[2]=((((-1.0)*r22*x12448))+((r21*x12447))+(((-1.0)*r20*x12450)));
evalcond[3]=((((-1.0)*r02*x12448))+((r01*x12447))+(((-1.0)*r00*x12450)));
evalcond[4]=((-1.0)+((r01*x12449))+((r02*x12446))+(((-1.0)*cj15*r00*x12448)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12450))+(((-1.0)*r12*x12448))+((r11*x12447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12451=((1.0)*cj15);
CheckValue<IkReal> x12452=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15))+(((-1.0)*r21*x12451)))),-1);
if(!x12452.valid){
continue;
}
CheckValue<IkReal> x12453 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12451))+((r11*sj15)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12453.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12452.value)))+(x12453.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12454=IKcos(j14);
IkReal x12455=IKsin(j14);
IkReal x12456=(sj15*x12455);
IkReal x12457=((1.0)*x12454);
IkReal x12458=(sj15*x12454);
IkReal x12459=((1.0)*cj15*x12455);
evalcond[0]=(((r22*x12455))+(((-1.0)*cj15*r20*x12457))+((r21*x12458)));
evalcond[1]=((((-1.0)*cj15*r10*x12457))+((r11*x12458))+((r12*x12455)));
evalcond[2]=((((-1.0)*r22*x12457))+((r21*x12456))+(((-1.0)*r20*x12459)));
evalcond[3]=((((-1.0)*r00*x12459))+(((-1.0)*r02*x12457))+((r01*x12456)));
evalcond[4]=((-1.0)+((r02*x12455))+(((-1.0)*cj15*r00*x12457))+((r01*x12458)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12459))+(((-1.0)*r12*x12457))+((r11*x12456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12460=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x12460.valid){
continue;
}
CheckValue<IkReal> x12461 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12461.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12460.value)))+(x12461.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12462=IKcos(j14);
IkReal x12463=IKsin(j14);
IkReal x12464=(sj15*x12463);
IkReal x12465=((1.0)*x12462);
IkReal x12466=(sj15*x12462);
IkReal x12467=((1.0)*cj15*x12463);
evalcond[0]=((((-1.0)*cj15*r20*x12465))+((r22*x12463))+((r21*x12466)));
evalcond[1]=(((r12*x12463))+((r11*x12466))+(((-1.0)*cj15*r10*x12465)));
evalcond[2]=((((-1.0)*r22*x12465))+(((-1.0)*r20*x12467))+((r21*x12464)));
evalcond[3]=((((-1.0)*r02*x12465))+((r01*x12464))+(((-1.0)*r00*x12467)));
evalcond[4]=((-1.0)+((r01*x12466))+(((-1.0)*cj15*r00*x12465))+((r02*x12463)));
evalcond[5]=((1.0)+((r11*x12464))+(((-1.0)*r10*x12467))+(((-1.0)*r12*x12465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x12468=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x12468;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x12468);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x12469=((1.0)*cj15);
IkReal x12470=((((-1.0)*r10*sj15))+(((-1.0)*r11*x12469)));
j14eval[0]=x12470;
j14eval[1]=((IKabs(((((-1.0)*r20*x12469))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x12470);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x12471=cj15*cj15;
IkReal x12472=(r11*r21);
IkReal x12473=(cj15*r20);
IkReal x12474=(r21*sj15);
IkReal x12475=((((-1.0)*r10*r20*x12471))+((r11*sj15*x12473))+(((-1.0)*r12*r22))+(((-1.0)*x12472))+((cj15*r10*x12474))+((x12471*x12472)));
j14eval[0]=x12475;
j14eval[1]=IKsign(x12475);
j14eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x12473))+x12474))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12476=cj15*cj15;
IkReal x12477=(r11*r21);
IkReal x12478=(cj15*r20);
IkReal x12479=(r21*sj15);
CheckValue<IkReal> x12480 = IKatan2WithCheck(IkReal(((((-1.0)*x12478))+x12479)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12480.valid){
continue;
}
CheckValue<IkReal> x12481=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x12476))+((r11*sj15*x12478))+(((-1.0)*r12*r22))+(((-1.0)*x12477))+((x12476*x12477))+((cj15*r10*x12479)))),-1);
if(!x12481.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12480.value)+(((1.5707963267949)*(x12481.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12482=IKcos(j14);
IkReal x12483=IKsin(j14);
IkReal x12484=(sj15*x12483);
IkReal x12485=((1.0)*x12482);
IkReal x12486=(sj15*x12482);
IkReal x12487=((1.0)*cj15*x12483);
evalcond[0]=((((-1.0)*cj15*r20*x12485))+((r22*x12483))+((r21*x12486)));
evalcond[1]=((((-1.0)*cj15*r10*x12485))+((r12*x12483))+((r11*x12486)));
evalcond[2]=((((-1.0)*r22*x12485))+(((-1.0)*r20*x12487))+((r21*x12484)));
evalcond[3]=((((-1.0)*r00*x12487))+(((-1.0)*r02*x12485))+((r01*x12484)));
evalcond[4]=((1.0)+((r02*x12483))+((r01*x12486))+(((-1.0)*cj15*r00*x12485)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12487))+(((-1.0)*r12*x12485))+((r11*x12484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12488=((1.0)*cj15);
CheckValue<IkReal> x12489 = IKatan2WithCheck(IkReal((((r21*sj15))+(((-1.0)*r20*x12488)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12489.valid){
continue;
}
CheckValue<IkReal> x12490=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12488))+(((-1.0)*r10*sj15)))),-1);
if(!x12490.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12489.value)+(((1.5707963267949)*(x12490.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12491=IKcos(j14);
IkReal x12492=IKsin(j14);
IkReal x12493=(sj15*x12492);
IkReal x12494=((1.0)*x12491);
IkReal x12495=(sj15*x12491);
IkReal x12496=((1.0)*cj15*x12492);
evalcond[0]=(((r21*x12495))+(((-1.0)*cj15*r20*x12494))+((r22*x12492)));
evalcond[1]=((((-1.0)*cj15*r10*x12494))+((r12*x12492))+((r11*x12495)));
evalcond[2]=(((r21*x12493))+(((-1.0)*r20*x12496))+(((-1.0)*r22*x12494)));
evalcond[3]=(((r01*x12493))+(((-1.0)*r02*x12494))+(((-1.0)*r00*x12496)));
evalcond[4]=((1.0)+((r01*x12495))+(((-1.0)*cj15*r00*x12494))+((r02*x12492)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12496))+(((-1.0)*r12*x12494))+((r11*x12493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12497 = IKatan2WithCheck(IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12497.valid){
continue;
}
CheckValue<IkReal> x12498=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x12498.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12497.value)+(((1.5707963267949)*(x12498.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12499=IKcos(j14);
IkReal x12500=IKsin(j14);
IkReal x12501=(sj15*x12500);
IkReal x12502=((1.0)*x12499);
IkReal x12503=(sj15*x12499);
IkReal x12504=((1.0)*cj15*x12500);
evalcond[0]=((((-1.0)*cj15*r20*x12502))+((r21*x12503))+((r22*x12500)));
evalcond[1]=((((-1.0)*cj15*r10*x12502))+((r11*x12503))+((r12*x12500)));
evalcond[2]=((((-1.0)*r22*x12502))+((r21*x12501))+(((-1.0)*r20*x12504)));
evalcond[3]=((((-1.0)*r02*x12502))+(((-1.0)*r00*x12504))+((r01*x12501)));
evalcond[4]=((1.0)+((r01*x12503))+(((-1.0)*cj15*r00*x12502))+((r02*x12500)));
evalcond[5]=((1.0)+((r11*x12501))+(((-1.0)*r12*x12502))+(((-1.0)*r10*x12504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x12505=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x12505;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x12505);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x12506=((1.0)*cj15);
IkReal x12507=((((-1.0)*r20*sj15))+(((-1.0)*r21*x12506)));
j14eval[0]=x12507;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*r10*x12506))))));
j14eval[2]=IKsign(x12507);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x12508=cj15*cj15;
IkReal x12509=(r11*r21);
IkReal x12510=(cj15*r20);
IkReal x12511=(r21*sj15);
IkReal x12512=(((r11*sj15*x12510))+(((-1.0)*r12*r22))+(((-1.0)*x12509))+(((-1.0)*r10*r20*x12508))+((x12508*x12509))+((cj15*r10*x12511)));
j14eval[0]=x12512;
j14eval[1]=IKsign(x12512);
j14eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x12510))+x12511))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12513=cj15*cj15;
IkReal x12514=(r11*r21);
IkReal x12515=(cj15*r20);
IkReal x12516=(r21*sj15);
CheckValue<IkReal> x12517 = IKatan2WithCheck(IkReal(((((-1.0)*x12515))+x12516)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12517.valid){
continue;
}
CheckValue<IkReal> x12518=IKPowWithIntegerCheck(IKsign((((r11*sj15*x12515))+(((-1.0)*r10*r20*x12513))+(((-1.0)*r12*r22))+(((-1.0)*x12514))+((cj15*r10*x12516))+((x12513*x12514)))),-1);
if(!x12518.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12517.value)+(((1.5707963267949)*(x12518.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12519=IKcos(j14);
IkReal x12520=IKsin(j14);
IkReal x12521=(sj15*x12520);
IkReal x12522=((1.0)*x12519);
IkReal x12523=(sj15*x12519);
IkReal x12524=((1.0)*cj15*x12520);
evalcond[0]=(((r22*x12520))+((r21*x12523))+(((-1.0)*cj15*r20*x12522)));
evalcond[1]=((((-1.0)*cj15*r10*x12522))+((r11*x12523))+((r12*x12520)));
evalcond[2]=((((-1.0)*r20*x12524))+((r21*x12521))+(((-1.0)*r22*x12522)));
evalcond[3]=((((-1.0)*r00*x12524))+(((-1.0)*r02*x12522))+((r01*x12521)));
evalcond[4]=((-1.0)+(((-1.0)*cj15*r00*x12522))+((r01*x12523))+((r02*x12520)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12522))+(((-1.0)*r10*x12524))+((r11*x12521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12525=((1.0)*cj15);
CheckValue<IkReal> x12526=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12525))+(((-1.0)*r20*sj15)))),-1);
if(!x12526.valid){
continue;
}
CheckValue<IkReal> x12527 = IKatan2WithCheck(IkReal((((r11*sj15))+(((-1.0)*r10*x12525)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12527.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12526.value)))+(x12527.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12528=IKcos(j14);
IkReal x12529=IKsin(j14);
IkReal x12530=(sj15*x12529);
IkReal x12531=((1.0)*x12528);
IkReal x12532=(sj15*x12528);
IkReal x12533=((1.0)*cj15*x12529);
evalcond[0]=(((r22*x12529))+((r21*x12532))+(((-1.0)*cj15*r20*x12531)));
evalcond[1]=(((r11*x12532))+(((-1.0)*cj15*r10*x12531))+((r12*x12529)));
evalcond[2]=((((-1.0)*r20*x12533))+((r21*x12530))+(((-1.0)*r22*x12531)));
evalcond[3]=((((-1.0)*r02*x12531))+((r01*x12530))+(((-1.0)*r00*x12533)));
evalcond[4]=((-1.0)+(((-1.0)*cj15*r00*x12531))+((r01*x12532))+((r02*x12529)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12533))+((r11*x12530))+(((-1.0)*r12*x12531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12534=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x12534.valid){
continue;
}
CheckValue<IkReal> x12535 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12535.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12534.value)))+(x12535.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12536=IKcos(j14);
IkReal x12537=IKsin(j14);
IkReal x12538=(sj15*x12537);
IkReal x12539=((1.0)*x12536);
IkReal x12540=(sj15*x12536);
IkReal x12541=((1.0)*cj15*x12537);
evalcond[0]=(((r22*x12537))+((r21*x12540))+(((-1.0)*cj15*r20*x12539)));
evalcond[1]=((((-1.0)*cj15*r10*x12539))+((r11*x12540))+((r12*x12537)));
evalcond[2]=(((r21*x12538))+(((-1.0)*r20*x12541))+(((-1.0)*r22*x12539)));
evalcond[3]=((((-1.0)*r02*x12539))+(((-1.0)*r00*x12541))+((r01*x12538)));
evalcond[4]=((-1.0)+((r01*x12540))+(((-1.0)*cj15*r00*x12539))+((r02*x12537)));
evalcond[5]=((1.0)+((r11*x12538))+(((-1.0)*r10*x12541))+(((-1.0)*r12*x12539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x12542=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x12542;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x12542);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x12543=((1.0)*cj15);
IkReal x12544=((((-1.0)*r11*x12543))+(((-1.0)*r10*sj15)));
j14eval[0]=x12544;
j14eval[1]=((IKabs(((((-1.0)*r20*x12543))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x12544);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x12545=cj15*cj15;
IkReal x12546=(r11*r21);
IkReal x12547=(cj15*r20);
IkReal x12548=(r21*sj15);
IkReal x12549=((((-1.0)*x12546))+(((-1.0)*r10*r20*x12545))+(((-1.0)*r12*r22))+((cj15*r10*x12548))+((x12545*x12546))+((r11*sj15*x12547)));
j14eval[0]=x12549;
j14eval[1]=IKsign(x12549);
j14eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x12547))+x12548))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12550=cj15*cj15;
IkReal x12551=(r11*r21);
IkReal x12552=(cj15*r20);
IkReal x12553=(r21*sj15);
CheckValue<IkReal> x12554 = IKatan2WithCheck(IkReal(((((-1.0)*x12552))+x12553)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12554.valid){
continue;
}
CheckValue<IkReal> x12555=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12551))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x12550))+((x12550*x12551))+((cj15*r10*x12553))+((r11*sj15*x12552)))),-1);
if(!x12555.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12554.value)+(((1.5707963267949)*(x12555.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12556=IKcos(j14);
IkReal x12557=IKsin(j14);
IkReal x12558=(sj15*x12557);
IkReal x12559=((1.0)*x12556);
IkReal x12560=(sj15*x12556);
IkReal x12561=((1.0)*cj15*x12557);
evalcond[0]=((((-1.0)*cj15*r20*x12559))+((r22*x12557))+((r21*x12560)));
evalcond[1]=(((r11*x12560))+((r12*x12557))+(((-1.0)*cj15*r10*x12559)));
evalcond[2]=((((-1.0)*r22*x12559))+((r21*x12558))+(((-1.0)*r20*x12561)));
evalcond[3]=(((r01*x12558))+(((-1.0)*r00*x12561))+(((-1.0)*r02*x12559)));
evalcond[4]=((1.0)+(((-1.0)*cj15*r00*x12559))+((r01*x12560))+((r02*x12557)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12559))+((r11*x12558))+(((-1.0)*r10*x12561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12562=((1.0)*cj15);
CheckValue<IkReal> x12563 = IKatan2WithCheck(IkReal((((r21*sj15))+(((-1.0)*r20*x12562)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12563.valid){
continue;
}
CheckValue<IkReal> x12564=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12562))+(((-1.0)*r10*sj15)))),-1);
if(!x12564.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12563.value)+(((1.5707963267949)*(x12564.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12565=IKcos(j14);
IkReal x12566=IKsin(j14);
IkReal x12567=(sj15*x12566);
IkReal x12568=((1.0)*x12565);
IkReal x12569=(sj15*x12565);
IkReal x12570=((1.0)*cj15*x12566);
evalcond[0]=((((-1.0)*cj15*r20*x12568))+((r21*x12569))+((r22*x12566)));
evalcond[1]=(((r11*x12569))+((r12*x12566))+(((-1.0)*cj15*r10*x12568)));
evalcond[2]=((((-1.0)*r20*x12570))+(((-1.0)*r22*x12568))+((r21*x12567)));
evalcond[3]=((((-1.0)*r02*x12568))+((r01*x12567))+(((-1.0)*r00*x12570)));
evalcond[4]=((1.0)+((r01*x12569))+(((-1.0)*cj15*r00*x12568))+((r02*x12566)));
evalcond[5]=((1.0)+((r11*x12567))+(((-1.0)*r12*x12568))+(((-1.0)*r10*x12570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12571 = IKatan2WithCheck(IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12571.valid){
continue;
}
CheckValue<IkReal> x12572=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x12572.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12571.value)+(((1.5707963267949)*(x12572.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12573=IKcos(j14);
IkReal x12574=IKsin(j14);
IkReal x12575=(sj15*x12574);
IkReal x12576=((1.0)*x12573);
IkReal x12577=(sj15*x12573);
IkReal x12578=((1.0)*cj15*x12574);
evalcond[0]=(((r22*x12574))+(((-1.0)*cj15*r20*x12576))+((r21*x12577)));
evalcond[1]=((((-1.0)*cj15*r10*x12576))+((r12*x12574))+((r11*x12577)));
evalcond[2]=((((-1.0)*r20*x12578))+((r21*x12575))+(((-1.0)*r22*x12576)));
evalcond[3]=((((-1.0)*r02*x12576))+((r01*x12575))+(((-1.0)*r00*x12578)));
evalcond[4]=((1.0)+((r02*x12574))+(((-1.0)*cj15*r00*x12576))+((r01*x12577)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12576))+(((-1.0)*r10*x12578))+((r11*x12575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x12579=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x12579;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x12579);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x12580=((1.0)*cj15);
IkReal x12581=((((-1.0)*r11*x12580))+(((-1.0)*r10*sj15)));
j14eval[0]=x12581;
j14eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12580))+((r21*sj15))))));
j14eval[2]=IKsign(x12581);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x12582=cj15*cj15;
IkReal x12583=(r11*r21);
IkReal x12584=(cj15*r20);
IkReal x12585=(r21*sj15);
IkReal x12586=((((-1.0)*r12*r22))+(((-1.0)*r10*r20*x12582))+((cj15*r10*x12585))+((x12582*x12583))+((r11*sj15*x12584))+(((-1.0)*x12583)));
j14eval[0]=x12586;
j14eval[1]=IKsign(x12586);
j14eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x12584))+x12585))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12587=cj15*cj15;
IkReal x12588=(r11*r21);
IkReal x12589=(cj15*r20);
IkReal x12590=(r21*sj15);
CheckValue<IkReal> x12591=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x12587*x12588))+(((-1.0)*r10*r20*x12587))+((cj15*r10*x12590))+((r11*sj15*x12589))+(((-1.0)*x12588)))),-1);
if(!x12591.valid){
continue;
}
CheckValue<IkReal> x12592 = IKatan2WithCheck(IkReal(((((-1.0)*x12589))+x12590)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12592.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12591.value)))+(x12592.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12593=IKcos(j14);
IkReal x12594=IKsin(j14);
IkReal x12595=(sj15*x12594);
IkReal x12596=((1.0)*x12593);
IkReal x12597=(sj15*x12593);
IkReal x12598=((1.0)*cj15*x12594);
evalcond[0]=((((-1.0)*cj15*r20*x12596))+((r21*x12597))+((r22*x12594)));
evalcond[1]=(((r12*x12594))+(((-1.0)*cj15*r10*x12596))+((r11*x12597)));
evalcond[2]=((((-1.0)*r20*x12598))+(((-1.0)*r22*x12596))+((r21*x12595)));
evalcond[3]=(((r01*x12595))+(((-1.0)*r00*x12598))+(((-1.0)*r02*x12596)));
evalcond[4]=((1.0)+((r01*x12597))+(((-1.0)*cj15*r00*x12596))+((r02*x12594)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12598))+(((-1.0)*r12*x12596))+((r11*x12595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12599=((1.0)*cj15);
CheckValue<IkReal> x12600 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12599))+((r21*sj15)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12600.valid){
continue;
}
CheckValue<IkReal> x12601=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12599))+(((-1.0)*r10*sj15)))),-1);
if(!x12601.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12600.value)+(((1.5707963267949)*(x12601.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12602=IKcos(j14);
IkReal x12603=IKsin(j14);
IkReal x12604=(sj15*x12603);
IkReal x12605=((1.0)*x12602);
IkReal x12606=(sj15*x12602);
IkReal x12607=((1.0)*cj15*x12603);
evalcond[0]=(((r22*x12603))+(((-1.0)*cj15*r20*x12605))+((r21*x12606)));
evalcond[1]=(((r11*x12606))+((r12*x12603))+(((-1.0)*cj15*r10*x12605)));
evalcond[2]=((((-1.0)*r22*x12605))+(((-1.0)*r20*x12607))+((r21*x12604)));
evalcond[3]=(((r01*x12604))+(((-1.0)*r00*x12607))+(((-1.0)*r02*x12605)));
evalcond[4]=((1.0)+((r01*x12606))+((r02*x12603))+(((-1.0)*cj15*r00*x12605)));
evalcond[5]=((1.0)+((r11*x12604))+(((-1.0)*r12*x12605))+(((-1.0)*r10*x12607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12608 = IKatan2WithCheck(IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12608.valid){
continue;
}
CheckValue<IkReal> x12609=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x12609.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12608.value)+(((1.5707963267949)*(x12609.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12610=IKcos(j14);
IkReal x12611=IKsin(j14);
IkReal x12612=(sj15*x12611);
IkReal x12613=((1.0)*x12610);
IkReal x12614=(sj15*x12610);
IkReal x12615=((1.0)*cj15*x12611);
evalcond[0]=(((r21*x12614))+(((-1.0)*cj15*r20*x12613))+((r22*x12611)));
evalcond[1]=((((-1.0)*cj15*r10*x12613))+((r11*x12614))+((r12*x12611)));
evalcond[2]=((((-1.0)*r22*x12613))+(((-1.0)*r20*x12615))+((r21*x12612)));
evalcond[3]=((((-1.0)*r02*x12613))+(((-1.0)*r00*x12615))+((r01*x12612)));
evalcond[4]=((1.0)+((r02*x12611))+(((-1.0)*cj15*r00*x12613))+((r01*x12614)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12613))+(((-1.0)*r10*x12615))+((r11*x12612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x12616=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x12616;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x12616);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x12617=((1.0)*cj15);
IkReal x12618=((((-1.0)*r21*x12617))+(((-1.0)*r20*sj15)));
j14eval[0]=x12618;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*r10*x12617))))));
j14eval[2]=IKsign(x12618);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x12619=cj15*cj15;
IkReal x12620=(r11*r21);
IkReal x12621=(cj15*r20);
IkReal x12622=(r21*sj15);
IkReal x12623=((((-1.0)*r10*r20*x12619))+((x12619*x12620))+(((-1.0)*r12*r22))+((cj15*r10*x12622))+(((-1.0)*x12620))+((r11*sj15*x12621)));
j14eval[0]=x12623;
j14eval[1]=IKsign(x12623);
j14eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x12621))+x12622))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12624=cj15*cj15;
IkReal x12625=(r11*r21);
IkReal x12626=(cj15*r20);
IkReal x12627=(r21*sj15);
CheckValue<IkReal> x12628 = IKatan2WithCheck(IkReal(((((-1.0)*x12626))+x12627)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12628.valid){
continue;
}
CheckValue<IkReal> x12629=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*r20*x12624))+((cj15*r10*x12627))+(((-1.0)*x12625))+((r11*sj15*x12626))+((x12624*x12625)))),-1);
if(!x12629.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12628.value)+(((1.5707963267949)*(x12629.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12630=IKcos(j14);
IkReal x12631=IKsin(j14);
IkReal x12632=(sj15*x12631);
IkReal x12633=((1.0)*x12630);
IkReal x12634=(sj15*x12630);
IkReal x12635=((1.0)*cj15*x12631);
evalcond[0]=((((-1.0)*cj15*r20*x12633))+((r22*x12631))+((r21*x12634)));
evalcond[1]=(((r11*x12634))+((r12*x12631))+(((-1.0)*cj15*r10*x12633)));
evalcond[2]=((((-1.0)*r20*x12635))+(((-1.0)*r22*x12633))+((r21*x12632)));
evalcond[3]=(((r01*x12632))+(((-1.0)*r02*x12633))+(((-1.0)*r00*x12635)));
evalcond[4]=((-1.0)+(((-1.0)*cj15*r00*x12633))+((r01*x12634))+((r02*x12631)));
evalcond[5]=((1.0)+((r11*x12632))+(((-1.0)*r10*x12635))+(((-1.0)*r12*x12633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12636=((1.0)*cj15);
CheckValue<IkReal> x12637=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12636))+(((-1.0)*r20*sj15)))),-1);
if(!x12637.valid){
continue;
}
CheckValue<IkReal> x12638 = IKatan2WithCheck(IkReal((((r11*sj15))+(((-1.0)*r10*x12636)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12638.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12637.value)))+(x12638.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12639=IKcos(j14);
IkReal x12640=IKsin(j14);
IkReal x12641=(sj15*x12640);
IkReal x12642=((1.0)*x12639);
IkReal x12643=(sj15*x12639);
IkReal x12644=((1.0)*cj15*x12640);
evalcond[0]=((((-1.0)*cj15*r20*x12642))+((r22*x12640))+((r21*x12643)));
evalcond[1]=(((r12*x12640))+(((-1.0)*cj15*r10*x12642))+((r11*x12643)));
evalcond[2]=((((-1.0)*r20*x12644))+(((-1.0)*r22*x12642))+((r21*x12641)));
evalcond[3]=((((-1.0)*r02*x12642))+((r01*x12641))+(((-1.0)*r00*x12644)));
evalcond[4]=((-1.0)+(((-1.0)*cj15*r00*x12642))+((r01*x12643))+((r02*x12640)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12642))+((r11*x12641))+(((-1.0)*r10*x12644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12645=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x12645.valid){
continue;
}
CheckValue<IkReal> x12646 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12646.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12645.value)))+(x12646.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12647=IKcos(j14);
IkReal x12648=IKsin(j14);
IkReal x12649=(sj15*x12648);
IkReal x12650=((1.0)*x12647);
IkReal x12651=(sj15*x12647);
IkReal x12652=((1.0)*cj15*x12648);
evalcond[0]=(((r21*x12651))+(((-1.0)*cj15*r20*x12650))+((r22*x12648)));
evalcond[1]=(((r12*x12648))+((r11*x12651))+(((-1.0)*cj15*r10*x12650)));
evalcond[2]=((((-1.0)*r20*x12652))+((r21*x12649))+(((-1.0)*r22*x12650)));
evalcond[3]=((((-1.0)*r00*x12652))+((r01*x12649))+(((-1.0)*r02*x12650)));
evalcond[4]=((-1.0)+(((-1.0)*cj15*r00*x12650))+((r02*x12648))+((r01*x12651)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12652))+(((-1.0)*r12*x12650))+((r11*x12649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x12653=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x12653;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x12653);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x12654=((1.0)*cj15);
IkReal x12655=((((-1.0)*r11*x12654))+(((-1.0)*r10*sj15)));
j14eval[0]=x12655;
j14eval[1]=((IKabs((((r21*sj15))+(((-1.0)*r20*x12654)))))+(IKabs(r22)));
j14eval[2]=IKsign(x12655);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x12656=cj15*cj15;
IkReal x12657=(r11*r21);
IkReal x12658=(cj15*r20);
IkReal x12659=(r21*sj15);
IkReal x12660=((((-1.0)*r10*r20*x12656))+(((-1.0)*r12*r22))+((cj15*r10*x12659))+((x12656*x12657))+(((-1.0)*x12657))+((r11*sj15*x12658)));
j14eval[0]=x12660;
j14eval[1]=IKsign(x12660);
j14eval[2]=((IKabs(r22))+(IKabs((x12659+(((-1.0)*x12658))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12661=cj15*cj15;
IkReal x12662=(r11*r21);
IkReal x12663=(cj15*r20);
IkReal x12664=(r21*sj15);
CheckValue<IkReal> x12665 = IKatan2WithCheck(IkReal(((((-1.0)*x12663))+x12664)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12665.valid){
continue;
}
CheckValue<IkReal> x12666=IKPowWithIntegerCheck(IKsign((((cj15*r10*x12664))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x12661))+((x12661*x12662))+(((-1.0)*x12662))+((r11*sj15*x12663)))),-1);
if(!x12666.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12665.value)+(((1.5707963267949)*(x12666.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12667=IKcos(j14);
IkReal x12668=IKsin(j14);
IkReal x12669=(sj15*x12668);
IkReal x12670=((1.0)*x12667);
IkReal x12671=(sj15*x12667);
IkReal x12672=((1.0)*cj15*x12668);
evalcond[0]=(((r21*x12671))+((r22*x12668))+(((-1.0)*cj15*r20*x12670)));
evalcond[1]=((((-1.0)*cj15*r10*x12670))+((r12*x12668))+((r11*x12671)));
evalcond[2]=(((r21*x12669))+(((-1.0)*r22*x12670))+(((-1.0)*r20*x12672)));
evalcond[3]=((((-1.0)*r00*x12672))+(((-1.0)*r02*x12670))+((r01*x12669)));
evalcond[4]=((1.0)+((r02*x12668))+(((-1.0)*cj15*r00*x12670))+((r01*x12671)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12672))+(((-1.0)*r12*x12670))+((r11*x12669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12673=((1.0)*cj15);
CheckValue<IkReal> x12674=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12673))+(((-1.0)*r10*sj15)))),-1);
if(!x12674.valid){
continue;
}
CheckValue<IkReal> x12675 = IKatan2WithCheck(IkReal((((r21*sj15))+(((-1.0)*r20*x12673)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12675.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12674.value)))+(x12675.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12676=IKcos(j14);
IkReal x12677=IKsin(j14);
IkReal x12678=(sj15*x12677);
IkReal x12679=((1.0)*x12676);
IkReal x12680=(sj15*x12676);
IkReal x12681=((1.0)*cj15*x12677);
evalcond[0]=(((r21*x12680))+((r22*x12677))+(((-1.0)*cj15*r20*x12679)));
evalcond[1]=((((-1.0)*cj15*r10*x12679))+((r11*x12680))+((r12*x12677)));
evalcond[2]=((((-1.0)*r20*x12681))+((r21*x12678))+(((-1.0)*r22*x12679)));
evalcond[3]=((((-1.0)*r00*x12681))+(((-1.0)*r02*x12679))+((r01*x12678)));
evalcond[4]=((1.0)+((r01*x12680))+((r02*x12677))+(((-1.0)*cj15*r00*x12679)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12679))+((r11*x12678))+(((-1.0)*r10*x12681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12682 = IKatan2WithCheck(IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12682.valid){
continue;
}
CheckValue<IkReal> x12683=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x12683.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12682.value)+(((1.5707963267949)*(x12683.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12684=IKcos(j14);
IkReal x12685=IKsin(j14);
IkReal x12686=(sj15*x12685);
IkReal x12687=((1.0)*x12684);
IkReal x12688=(sj15*x12684);
IkReal x12689=((1.0)*cj15*x12685);
evalcond[0]=(((r21*x12688))+(((-1.0)*cj15*r20*x12687))+((r22*x12685)));
evalcond[1]=((((-1.0)*cj15*r10*x12687))+((r12*x12685))+((r11*x12688)));
evalcond[2]=(((r21*x12686))+(((-1.0)*r20*x12689))+(((-1.0)*r22*x12687)));
evalcond[3]=(((r01*x12686))+(((-1.0)*r00*x12689))+(((-1.0)*r02*x12687)));
evalcond[4]=((1.0)+((r01*x12688))+((r02*x12685))+(((-1.0)*cj15*r00*x12687)));
evalcond[5]=((1.0)+((r11*x12686))+(((-1.0)*r12*x12687))+(((-1.0)*r10*x12689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x12690=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x12690;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x12690);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x12691=((1.0)*cj15);
IkReal x12692=((((-1.0)*r20*sj15))+(((-1.0)*r21*x12691)));
j14eval[0]=x12692;
j14eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12691))+((r11*sj15))))));
j14eval[2]=IKsign(x12692);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x12693=cj15*cj15;
IkReal x12694=(r11*r21);
IkReal x12695=(cj15*r20);
IkReal x12696=(r21*sj15);
IkReal x12697=(((cj15*r10*x12696))+((r11*sj15*x12695))+((x12693*x12694))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x12693))+(((-1.0)*x12694)));
j14eval[0]=x12697;
j14eval[1]=IKsign(x12697);
j14eval[2]=((IKabs(r22))+(IKabs((x12696+(((-1.0)*x12695))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12698=cj15*cj15;
IkReal x12699=(r11*r21);
IkReal x12700=(cj15*r20);
IkReal x12701=(r21*sj15);
CheckValue<IkReal> x12702=IKPowWithIntegerCheck(IKsign((((r11*sj15*x12700))+((x12698*x12699))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x12698))+(((-1.0)*x12699))+((cj15*r10*x12701)))),-1);
if(!x12702.valid){
continue;
}
CheckValue<IkReal> x12703 = IKatan2WithCheck(IkReal((x12701+(((-1.0)*x12700)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12703.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12702.value)))+(x12703.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12704=IKcos(j14);
IkReal x12705=IKsin(j14);
IkReal x12706=(sj15*x12705);
IkReal x12707=((1.0)*x12704);
IkReal x12708=(sj15*x12704);
IkReal x12709=((1.0)*cj15*x12705);
evalcond[0]=(((r22*x12705))+((r21*x12708))+(((-1.0)*cj15*r20*x12707)));
evalcond[1]=(((r12*x12705))+((r11*x12708))+(((-1.0)*cj15*r10*x12707)));
evalcond[2]=(((r21*x12706))+(((-1.0)*r22*x12707))+(((-1.0)*r20*x12709)));
evalcond[3]=(((r01*x12706))+(((-1.0)*r00*x12709))+(((-1.0)*r02*x12707)));
evalcond[4]=((-1.0)+(((-1.0)*cj15*r00*x12707))+((r02*x12705))+((r01*x12708)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12709))+((r11*x12706))+(((-1.0)*r12*x12707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12710=((1.0)*cj15);
CheckValue<IkReal> x12711 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12710))+((r11*sj15)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12711.valid){
continue;
}
CheckValue<IkReal> x12712=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12710))+(((-1.0)*r20*sj15)))),-1);
if(!x12712.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12711.value)+(((1.5707963267949)*(x12712.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12713=IKcos(j14);
IkReal x12714=IKsin(j14);
IkReal x12715=(sj15*x12714);
IkReal x12716=((1.0)*x12713);
IkReal x12717=(sj15*x12713);
IkReal x12718=((1.0)*cj15*x12714);
evalcond[0]=(((r21*x12717))+((r22*x12714))+(((-1.0)*cj15*r20*x12716)));
evalcond[1]=(((r12*x12714))+((r11*x12717))+(((-1.0)*cj15*r10*x12716)));
evalcond[2]=(((r21*x12715))+(((-1.0)*r22*x12716))+(((-1.0)*r20*x12718)));
evalcond[3]=((((-1.0)*r00*x12718))+((r01*x12715))+(((-1.0)*r02*x12716)));
evalcond[4]=((-1.0)+((r02*x12714))+((r01*x12717))+(((-1.0)*cj15*r00*x12716)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12716))+(((-1.0)*r10*x12718))+((r11*x12715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12719=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x12719.valid){
continue;
}
CheckValue<IkReal> x12720 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12720.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12719.value)))+(x12720.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12721=IKcos(j14);
IkReal x12722=IKsin(j14);
IkReal x12723=(sj15*x12722);
IkReal x12724=((1.0)*x12721);
IkReal x12725=(sj15*x12721);
IkReal x12726=((1.0)*cj15*x12722);
evalcond[0]=(((r21*x12725))+(((-1.0)*cj15*r20*x12724))+((r22*x12722)));
evalcond[1]=(((r11*x12725))+((r12*x12722))+(((-1.0)*cj15*r10*x12724)));
evalcond[2]=(((r21*x12723))+(((-1.0)*r22*x12724))+(((-1.0)*r20*x12726)));
evalcond[3]=((((-1.0)*r00*x12726))+(((-1.0)*r02*x12724))+((r01*x12723)));
evalcond[4]=((-1.0)+((r02*x12722))+((r01*x12725))+(((-1.0)*cj15*r00*x12724)));
evalcond[5]=((1.0)+((r11*x12723))+(((-1.0)*r10*x12726))+(((-1.0)*r12*x12724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x12727=((-1.0)*pz);
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12727);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12727);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j14eval[0]=r22;
j14eval[1]=((((-1.0)*cj15*r00))+((r01*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x12728=((-1.0)*pz);
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12728);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12728);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12729=((1.0)*cj15);
j14eval[0]=(((r11*sj15))+(((-1.0)*r10*x12729)));
j14eval[1]=((((-1.0)*r00*x12729))+((r01*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12730=((1.0)*cj15);
CheckValue<IkReal> x12731=IKPowWithIntegerCheck((((r11*sj15))+(((-1.0)*r10*x12730))),-1);
if(!x12731.valid){
continue;
}
CheckValue<IkReal> x12732=IKPowWithIntegerCheck(((((-1.0)*r00*x12730))+((r01*sj15))),-1);
if(!x12732.valid){
continue;
}
if( IKabs(((-1.0)*(x12731.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12732.value)*((((cj12*sj11))+((cj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12731.value)))+IKsqr(((x12732.value)*((((cj12*sj11))+((cj11*sj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*(x12731.value)), ((x12732.value)*((((cj12*sj11))+((cj11*sj12))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12733=IKsin(j14);
IkReal x12734=IKcos(j14);
IkReal x12735=((1.0)*cj12);
IkReal x12736=((1.0)*cj15*r10);
IkReal x12737=(sj15*x12733);
IkReal x12738=((1.0)*cj15*r00);
IkReal x12739=(sj15*x12734);
evalcond[0]=((-1.0)*r22*x12734);
evalcond[1]=(((sj11*sj12))+(((-1.0)*cj11*x12735))+((r22*x12733)));
evalcond[2]=(((r01*x12737))+(((-1.0)*x12733*x12738)));
evalcond[3]=(((r11*x12739))+(((-1.0)*x12734*x12736)));
evalcond[4]=((1.0)+((r11*x12737))+(((-1.0)*x12733*x12736)));
evalcond[5]=((((-1.0)*cj11*sj12))+(((-1.0)*sj11*x12735))+((r01*x12739))+(((-1.0)*x12734*x12738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12740=IKPowWithIntegerCheck(r22,-1);
if(!x12740.valid){
continue;
}
CheckValue<IkReal> x12741=IKPowWithIntegerCheck(((((-1.0)*cj15*r00))+((r01*sj15))),-1);
if(!x12741.valid){
continue;
}
if( IKabs(((x12740.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12741.value)*((((cj12*sj11))+((cj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12740.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))))+IKsqr(((x12741.value)*((((cj12*sj11))+((cj11*sj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x12740.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))), ((x12741.value)*((((cj12*sj11))+((cj11*sj12))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12742=IKsin(j14);
IkReal x12743=IKcos(j14);
IkReal x12744=((1.0)*cj12);
IkReal x12745=((1.0)*cj15*r10);
IkReal x12746=(sj15*x12742);
IkReal x12747=((1.0)*cj15*r00);
IkReal x12748=(sj15*x12743);
evalcond[0]=((-1.0)*r22*x12743);
evalcond[1]=(((sj11*sj12))+((r22*x12742))+(((-1.0)*cj11*x12744)));
evalcond[2]=((((-1.0)*x12742*x12747))+((r01*x12746)));
evalcond[3]=(((r11*x12748))+(((-1.0)*x12743*x12745)));
evalcond[4]=((1.0)+((r11*x12746))+(((-1.0)*x12742*x12745)));
evalcond[5]=((((-1.0)*cj11*sj12))+(((-1.0)*sj11*x12744))+(((-1.0)*x12743*x12747))+((r01*x12748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12749=((1.0)*cj15);
IkReal x12750=(r11*sj15);
IkReal x12751=(cj11*cj12);
IkReal x12752=(sj11*sj12);
CheckValue<IkReal> x12753=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x12749)))),-1);
if(!x12753.valid){
continue;
}
CheckValue<IkReal> x12754 = IKatan2WithCheck(IkReal(((((-1.0)*x12750*x12751))+((cj15*r10*x12751))+(((-1.0)*r10*x12749*x12752))+((x12750*x12752)))),IkReal(((((-1.0)*r12*x12752))+((r12*x12751)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12754.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12753.value)))+(x12754.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12755=IKcos(j14);
IkReal x12756=IKsin(j14);
IkReal x12757=((1.0)*cj11);
IkReal x12758=(cj15*r20);
IkReal x12759=(cj15*r10);
IkReal x12760=(cj15*r00);
IkReal x12761=((1.0)*x12755);
IkReal x12762=(sj15*x12755);
IkReal x12763=((1.0)*x12756);
IkReal x12764=(sj15*x12756);
evalcond[0]=((((-1.0)*x12759*x12761))+((r11*x12762))+((r12*x12756)));
evalcond[1]=(((r21*x12764))+(((-1.0)*r22*x12761))+(((-1.0)*x12758*x12763)));
evalcond[2]=((((-1.0)*r02*x12761))+((r01*x12764))+(((-1.0)*x12760*x12763)));
evalcond[3]=((1.0)+(((-1.0)*x12759*x12763))+(((-1.0)*r12*x12761))+((r11*x12764)));
evalcond[4]=(((sj11*sj12))+((r21*x12762))+(((-1.0)*cj12*x12757))+((r22*x12756))+(((-1.0)*x12758*x12761)));
evalcond[5]=((((-1.0)*sj12*x12757))+(((-1.0)*cj12*sj11))+((r02*x12756))+((r01*x12762))+(((-1.0)*x12760*x12761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12765=((1.0)*cj15);
CheckValue<IkReal> x12766=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12765))+(((-1.0)*r00*sj15)))),-1);
if(!x12766.valid){
continue;
}
CheckValue<IkReal> x12767 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12765))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12767.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12766.value)))+(x12767.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12768=IKcos(j14);
IkReal x12769=IKsin(j14);
IkReal x12770=((1.0)*cj11);
IkReal x12771=(cj15*r20);
IkReal x12772=(cj15*r10);
IkReal x12773=(cj15*r00);
IkReal x12774=((1.0)*x12768);
IkReal x12775=(sj15*x12768);
IkReal x12776=((1.0)*x12769);
IkReal x12777=(sj15*x12769);
evalcond[0]=(((r12*x12769))+(((-1.0)*x12772*x12774))+((r11*x12775)));
evalcond[1]=((((-1.0)*r22*x12774))+(((-1.0)*x12771*x12776))+((r21*x12777)));
evalcond[2]=(((r01*x12777))+(((-1.0)*x12773*x12776))+(((-1.0)*r02*x12774)));
evalcond[3]=((1.0)+(((-1.0)*x12772*x12776))+(((-1.0)*r12*x12774))+((r11*x12777)));
evalcond[4]=(((sj11*sj12))+((r22*x12769))+(((-1.0)*x12771*x12774))+(((-1.0)*cj12*x12770))+((r21*x12775)));
evalcond[5]=(((r01*x12775))+(((-1.0)*sj12*x12770))+((r02*x12769))+(((-1.0)*cj12*sj11))+(((-1.0)*x12773*x12774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12778 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj15*r00))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12778.valid){
continue;
}
CheckValue<IkReal> x12779=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x12779.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12778.value)+(((1.5707963267949)*(x12779.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12780=IKcos(j14);
IkReal x12781=IKsin(j14);
IkReal x12782=((1.0)*cj11);
IkReal x12783=(cj15*r20);
IkReal x12784=(cj15*r10);
IkReal x12785=(cj15*r00);
IkReal x12786=((1.0)*x12780);
IkReal x12787=(sj15*x12780);
IkReal x12788=((1.0)*x12781);
IkReal x12789=(sj15*x12781);
evalcond[0]=(((r11*x12787))+(((-1.0)*x12784*x12786))+((r12*x12781)));
evalcond[1]=((((-1.0)*x12783*x12788))+((r21*x12789))+(((-1.0)*r22*x12786)));
evalcond[2]=(((r01*x12789))+(((-1.0)*x12785*x12788))+(((-1.0)*r02*x12786)));
evalcond[3]=((1.0)+((r11*x12789))+(((-1.0)*x12784*x12788))+(((-1.0)*r12*x12786)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x12783*x12786))+((r21*x12787))+((r22*x12781))+(((-1.0)*cj12*x12782)));
evalcond[5]=(((r01*x12787))+(((-1.0)*cj12*sj11))+(((-1.0)*x12785*x12786))+((r02*x12781))+(((-1.0)*sj12*x12782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12790=((-1.0)*r00);
IkReal x12792 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12792)==0){
continue;
}
IkReal x12791=pow(x12792,-0.5);
CheckValue<IkReal> x12793 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12790),IKFAST_ATAN2_MAGTHRESH);
if(!x12793.valid){
continue;
}
IkReal gconst18=((-1.0)*(x12793.value));
IkReal gconst19=(r01*x12791);
IkReal gconst20=(x12790*x12791);
CheckValue<IkReal> x12794 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12794.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x12794.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x12795=((-1.0)*r00);
IkReal x12796=x12791;
CheckValue<IkReal> x12798 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12795),IKFAST_ATAN2_MAGTHRESH);
if(!x12798.valid){
continue;
}
IkReal x12797=((-1.0)*(x12798.value));
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst19;
cj15=gconst20;
j15=x12797;
IkReal gconst18=x12797;
IkReal gconst19=(r01*x12796);
IkReal gconst20=(x12795*x12796);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x12799=((-1.0)*r00);
IkReal x12800=x12791;
CheckValue<IkReal> x12802 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12799),IKFAST_ATAN2_MAGTHRESH);
if(!x12802.valid){
continue;
}
IkReal x12801=((-1.0)*(x12802.value));
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst19;
cj15=gconst20;
j15=x12801;
IkReal gconst18=x12801;
IkReal gconst19=(r01*x12800);
IkReal gconst20=(x12799*x12800);
CheckValue<IkReal> x12810=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x12810.valid){
continue;
}
IkReal x12803=x12810.value;
IkReal x12804=(sj13*x12803);
IkReal x12805=(r10*x12804);
IkReal x12806=(r20*x12804);
IkReal x12807=(r21*x12804);
IkReal x12808=(r11*x12804);
IkReal x12809=(r00*r01*x12804);
j14eval[0]=IKsign((((r20*x12805*(r00*r00)))+((r11*x12807*(r01*r01)))+((r12*r22*sj13))+((r00*r01*r21*x12805))+((r00*r01*r11*x12806))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12811=gconst20*gconst20;
IkReal x12812=gconst19*gconst19;
IkReal x12813=(r11*r21);
IkReal x12814=(r11*sj13);
IkReal x12815=(r10*r21);
IkReal x12816=((1.0)*cj13);
IkReal x12817=((1.0)*r10*r20);
IkReal x12818=(gconst19*gconst20*sj13);
IkReal x12819=(cj13*gconst19*gconst20);
CheckValue<IkReal> x12820 = IKatan2WithCheck(IkReal((((gconst20*r22*x12814))+((gconst19*r10*r22*sj13)))),IkReal((((x12813*x12818))+(((-1.0)*r20*x12811*x12814))+(((-1.0)*x12817*x12818))+((sj13*x12812*x12815)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12820.valid){
continue;
}
CheckValue<IkReal> x12821=IKPowWithIntegerCheck(IKsign((((x12815*x12819))+((r11*r20*x12819))+(((-1.0)*x12812*x12813*x12816))+(((-1.0)*r10*r20*x12811*x12816))+(((-1.0)*r12*r22*x12816)))),-1);
if(!x12821.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12820.value)+(((1.5707963267949)*(x12821.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12822=IKsin(j14);
IkReal x12823=IKcos(j14);
IkReal x12824=(sj11*sj12);
IkReal x12825=(gconst20*r01);
IkReal x12826=(cj11*sj12);
IkReal x12827=(cj13*gconst19);
IkReal x12828=(gconst20*r20);
IkReal x12829=((1.0)*cj12);
IkReal x12830=(gconst20*r00);
IkReal x12831=(r11*sj13);
IkReal x12832=(gconst19*sj13);
IkReal x12833=(cj13*gconst20);
IkReal x12834=(gconst20*r10);
IkReal x12835=(cj11*x12829);
IkReal x12836=(gconst19*x12822);
IkReal x12837=((1.0)*x12823);
IkReal x12838=((1.0)*x12822);
IkReal x12839=(cj13*x12822);
IkReal x12840=(sj13*x12823);
evalcond[0]=(((r21*x12836))+(((-1.0)*r22*x12837))+(((-1.0)*x12828*x12838)));
evalcond[1]=((((-1.0)*r02*x12837))+((r01*x12836))+(((-1.0)*x12830*x12838)));
evalcond[2]=((1.0)+((r11*x12836))+(((-1.0)*r12*x12837))+(((-1.0)*x12834*x12838)));
evalcond[3]=(((r10*x12832))+((gconst20*x12831))+((r12*x12839))+((r11*x12823*x12827))+(((-1.0)*r10*x12833*x12837)));
evalcond[4]=(((r10*x12827))+((r11*x12833))+(((-1.0)*r12*sj13*x12838))+((x12834*x12840))+(((-1.0)*gconst19*x12831*x12837)));
evalcond[5]=(((gconst20*r21*sj13))+x12826+(((-1.0)*cj13*x12828*x12837))+((r22*x12839))+((r21*x12823*x12827))+((r20*x12832))+((cj12*sj11)));
evalcond[6]=(x12824+(((-1.0)*cj13*x12830*x12837))+((r02*x12839))+(((-1.0)*x12835))+((r00*x12832))+((r01*x12823*x12827))+((sj13*x12825)));
evalcond[7]=(x12824+((r21*x12833))+(((-1.0)*r21*x12832*x12837))+((x12828*x12840))+(((-1.0)*x12835))+(((-1.0)*r22*sj13*x12838))+((r20*x12827)));
evalcond[8]=(((r00*x12827))+(((-1.0)*x12826))+((x12830*x12840))+((cj13*x12825))+(((-1.0)*r02*sj13*x12838))+(((-1.0)*sj11*x12829))+(((-1.0)*r01*x12832*x12837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12841=gconst20*gconst20;
IkReal x12842=gconst19*gconst19;
IkReal x12843=(gconst19*r21);
IkReal x12844=(r10*r20);
IkReal x12845=(cj13*gconst19);
IkReal x12846=((1.0)*gconst20);
IkReal x12847=(r11*r20);
IkReal x12848=(cj13*gconst20*r11);
IkReal x12849=(r21*x12842);
CheckValue<IkReal> x12850 = IKatan2WithCheck(IkReal((((r10*r22*x12845))+((r22*x12848)))),IkReal((((x12843*x12848))+(((-1.0)*x12844*x12845*x12846))+(((-1.0)*cj13*x12841*x12847))+((cj13*r10*x12849)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12850.valid){
continue;
}
CheckValue<IkReal> x12851=IKPowWithIntegerCheck(IKsign((((sj13*x12841*x12844))+(((-1.0)*r10*sj13*x12843*x12846))+(((-1.0)*gconst19*sj13*x12846*x12847))+((r12*r22*sj13))+((r11*sj13*x12849)))),-1);
if(!x12851.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12850.value)+(((1.5707963267949)*(x12851.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12852=IKsin(j14);
IkReal x12853=IKcos(j14);
IkReal x12854=(sj11*sj12);
IkReal x12855=(gconst20*r01);
IkReal x12856=(cj11*sj12);
IkReal x12857=(cj13*gconst19);
IkReal x12858=(gconst20*r20);
IkReal x12859=((1.0)*cj12);
IkReal x12860=(gconst20*r00);
IkReal x12861=(r11*sj13);
IkReal x12862=(gconst19*sj13);
IkReal x12863=(cj13*gconst20);
IkReal x12864=(gconst20*r10);
IkReal x12865=(cj11*x12859);
IkReal x12866=(gconst19*x12852);
IkReal x12867=((1.0)*x12853);
IkReal x12868=((1.0)*x12852);
IkReal x12869=(cj13*x12852);
IkReal x12870=(sj13*x12853);
evalcond[0]=(((r21*x12866))+(((-1.0)*x12858*x12868))+(((-1.0)*r22*x12867)));
evalcond[1]=((((-1.0)*x12860*x12868))+(((-1.0)*r02*x12867))+((r01*x12866)));
evalcond[2]=((1.0)+((r11*x12866))+(((-1.0)*x12864*x12868))+(((-1.0)*r12*x12867)));
evalcond[3]=(((gconst20*x12861))+((r12*x12869))+(((-1.0)*r10*x12863*x12867))+((r11*x12853*x12857))+((r10*x12862)));
evalcond[4]=(((r11*x12863))+((r10*x12857))+(((-1.0)*gconst19*x12861*x12867))+((x12864*x12870))+(((-1.0)*r12*sj13*x12868)));
evalcond[5]=(((gconst20*r21*sj13))+x12856+(((-1.0)*cj13*x12858*x12867))+((r20*x12862))+((r21*x12853*x12857))+((r22*x12869))+((cj12*sj11)));
evalcond[6]=(x12854+((r01*x12853*x12857))+(((-1.0)*x12865))+((sj13*x12855))+(((-1.0)*cj13*x12860*x12867))+((r00*x12862))+((r02*x12869)));
evalcond[7]=(x12854+((r21*x12863))+(((-1.0)*x12865))+(((-1.0)*r21*x12862*x12867))+((x12858*x12870))+((r20*x12857))+(((-1.0)*r22*sj13*x12868)));
evalcond[8]=((((-1.0)*sj11*x12859))+((r00*x12857))+((x12860*x12870))+(((-1.0)*x12856))+(((-1.0)*r02*sj13*x12868))+(((-1.0)*r01*x12862*x12867))+((cj13*x12855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12871 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12871.valid){
continue;
}
CheckValue<IkReal> x12872=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x12872.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12871.value)+(((1.5707963267949)*(x12872.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12873=IKsin(j14);
IkReal x12874=IKcos(j14);
IkReal x12875=(sj11*sj12);
IkReal x12876=(gconst20*r01);
IkReal x12877=(cj11*sj12);
IkReal x12878=(cj13*gconst19);
IkReal x12879=(gconst20*r20);
IkReal x12880=((1.0)*cj12);
IkReal x12881=(gconst20*r00);
IkReal x12882=(r11*sj13);
IkReal x12883=(gconst19*sj13);
IkReal x12884=(cj13*gconst20);
IkReal x12885=(gconst20*r10);
IkReal x12886=(cj11*x12880);
IkReal x12887=(gconst19*x12873);
IkReal x12888=((1.0)*x12874);
IkReal x12889=((1.0)*x12873);
IkReal x12890=(cj13*x12873);
IkReal x12891=(sj13*x12874);
evalcond[0]=((((-1.0)*r22*x12888))+(((-1.0)*x12879*x12889))+((r21*x12887)));
evalcond[1]=((((-1.0)*r02*x12888))+((r01*x12887))+(((-1.0)*x12881*x12889)));
evalcond[2]=((1.0)+(((-1.0)*r12*x12888))+(((-1.0)*x12885*x12889))+((r11*x12887)));
evalcond[3]=(((r12*x12890))+((gconst20*x12882))+(((-1.0)*r10*x12884*x12888))+((r11*x12874*x12878))+((r10*x12883)));
evalcond[4]=(((r10*x12878))+((x12885*x12891))+(((-1.0)*r12*sj13*x12889))+(((-1.0)*gconst19*x12882*x12888))+((r11*x12884)));
evalcond[5]=(((gconst20*r21*sj13))+x12877+((r22*x12890))+((r20*x12883))+(((-1.0)*cj13*x12879*x12888))+((r21*x12874*x12878))+((cj12*sj11)));
evalcond[6]=(x12875+((r01*x12874*x12878))+(((-1.0)*x12886))+((r00*x12883))+((r02*x12890))+((sj13*x12876))+(((-1.0)*cj13*x12881*x12888)));
evalcond[7]=(x12875+((x12879*x12891))+(((-1.0)*x12886))+(((-1.0)*r21*x12883*x12888))+(((-1.0)*r22*sj13*x12889))+((r20*x12878))+((r21*x12884)));
evalcond[8]=((((-1.0)*r01*x12883*x12888))+(((-1.0)*r02*sj13*x12889))+((r00*x12878))+(((-1.0)*sj11*x12880))+(((-1.0)*x12877))+((cj13*x12876))+((x12881*x12891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12892=((-1.0)*r01);
IkReal x12894 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12894)==0){
continue;
}
IkReal x12893=pow(x12894,-0.5);
CheckValue<IkReal> x12895 = IKatan2WithCheck(IkReal(x12892),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12895.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x12895.value))));
IkReal gconst22=(x12892*x12893);
IkReal gconst23=((1.0)*r00*x12893);
CheckValue<IkReal> x12896 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12896.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x12896.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x12897=((-1.0)*r01);
CheckValue<IkReal> x12900 = IKatan2WithCheck(IkReal(x12897),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12900.valid){
continue;
}
IkReal x12898=((1.0)*(x12900.value));
IkReal x12899=x12893;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst22;
cj15=gconst23;
j15=((3.14159265)+(((-1.0)*x12898)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12898)));
IkReal gconst22=(x12897*x12899);
IkReal gconst23=((1.0)*r00*x12899);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x12901=((-1.0)*r01);
CheckValue<IkReal> x12904 = IKatan2WithCheck(IkReal(x12901),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12904.valid){
continue;
}
IkReal x12902=((1.0)*(x12904.value));
IkReal x12903=x12893;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst22;
cj15=gconst23;
j15=((3.14159265)+(((-1.0)*x12902)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12902)));
IkReal gconst22=(x12901*x12903);
IkReal gconst23=((1.0)*r00*x12903);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=r22;
j14eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12905=gconst22*gconst22;
IkReal x12906=gconst23*gconst23;
IkReal x12907=(r10*r21);
IkReal x12908=(r11*r20);
IkReal x12909=((1.0)*sj13);
IkReal x12910=(r11*r21);
IkReal x12911=(gconst22*gconst23);
IkReal x12912=((1.0)*cj13);
IkReal x12913=(r10*r20);
IkReal x12914=(r22*sj13);
IkReal x12915=(cj13*x12911);
CheckValue<IkReal> x12916 = IKatan2WithCheck(IkReal((((gconst23*r11*x12914))+((gconst22*r10*x12914)))),IkReal(((((-1.0)*x12906*x12908*x12909))+(((-1.0)*x12909*x12911*x12913))+((sj13*x12905*x12907))+((sj13*x12910*x12911)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12916.valid){
continue;
}
CheckValue<IkReal> x12917=IKPowWithIntegerCheck(IKsign((((x12908*x12915))+(((-1.0)*x12905*x12910*x12912))+((x12907*x12915))+(((-1.0)*r12*r22*x12912))+(((-1.0)*x12906*x12912*x12913)))),-1);
if(!x12917.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12916.value)+(((1.5707963267949)*(x12917.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12918=IKsin(j14);
IkReal x12919=IKcos(j14);
IkReal x12920=(sj11*sj12);
IkReal x12921=(gconst22*sj13);
IkReal x12922=((1.0)*cj11);
IkReal x12923=(cj13*r11);
IkReal x12924=((1.0)*sj13);
IkReal x12925=(cj13*gconst23);
IkReal x12926=(gconst23*sj13);
IkReal x12927=(cj12*sj11);
IkReal x12928=(cj13*gconst22);
IkReal x12929=(cj12*x12922);
IkReal x12930=((1.0)*x12919);
IkReal x12931=(gconst22*x12919);
IkReal x12932=(r22*x12918);
IkReal x12933=(r02*x12918);
IkReal x12934=(gconst22*x12918);
IkReal x12935=(r12*x12918);
IkReal x12936=((1.0)*gconst23*x12918);
evalcond[0]=((((-1.0)*r20*x12936))+(((-1.0)*r22*x12930))+((r21*x12934)));
evalcond[1]=((((-1.0)*r02*x12930))+(((-1.0)*r00*x12936))+((r01*x12934)));
evalcond[2]=((1.0)+((r11*x12934))+(((-1.0)*r12*x12930))+(((-1.0)*r10*x12936)));
evalcond[3]=(((r11*x12926))+((r10*x12921))+((cj13*x12935))+(((-1.0)*r10*x12925*x12930))+((x12923*x12931)));
evalcond[4]=(((gconst23*x12923))+(((-1.0)*x12924*x12935))+((r10*x12928))+(((-1.0)*r11*x12921*x12930))+((r10*x12919*x12926)));
evalcond[5]=(x12927+((r20*x12921))+(((-1.0)*r20*x12925*x12930))+((cj13*x12932))+((r21*x12919*x12928))+((r21*x12926))+((cj11*sj12)));
evalcond[6]=(x12920+((cj13*x12933))+((r01*x12919*x12928))+((r01*x12926))+(((-1.0)*r00*x12925*x12930))+((r00*x12921))+(((-1.0)*x12929)));
evalcond[7]=(x12920+(((-1.0)*x12924*x12932))+((r20*x12928))+(((-1.0)*r21*x12921*x12930))+((r20*x12919*x12926))+((r21*x12925))+(((-1.0)*x12929)));
evalcond[8]=((((-1.0)*sj12*x12922))+(((-1.0)*x12924*x12933))+(((-1.0)*r01*x12921*x12930))+(((-1.0)*x12927))+((r00*x12919*x12926))+((r01*x12925))+((r00*x12928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12937=((1.0)*gconst23);
CheckValue<IkReal> x12938=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x12937)))),-1);
if(!x12938.valid){
continue;
}
CheckValue<IkReal> x12939 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12937))+((gconst22*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12939.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12938.value)))+(x12939.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12940=IKsin(j14);
IkReal x12941=IKcos(j14);
IkReal x12942=(sj11*sj12);
IkReal x12943=(gconst22*sj13);
IkReal x12944=((1.0)*cj11);
IkReal x12945=(cj13*r11);
IkReal x12946=((1.0)*sj13);
IkReal x12947=(cj13*gconst23);
IkReal x12948=(gconst23*sj13);
IkReal x12949=(cj12*sj11);
IkReal x12950=(cj13*gconst22);
IkReal x12951=(cj12*x12944);
IkReal x12952=((1.0)*x12941);
IkReal x12953=(gconst22*x12941);
IkReal x12954=(r22*x12940);
IkReal x12955=(r02*x12940);
IkReal x12956=(gconst22*x12940);
IkReal x12957=(r12*x12940);
IkReal x12958=((1.0)*gconst23*x12940);
evalcond[0]=(((r21*x12956))+(((-1.0)*r22*x12952))+(((-1.0)*r20*x12958)));
evalcond[1]=(((r01*x12956))+(((-1.0)*r02*x12952))+(((-1.0)*r00*x12958)));
evalcond[2]=((1.0)+(((-1.0)*r12*x12952))+(((-1.0)*r10*x12958))+((r11*x12956)));
evalcond[3]=(((r10*x12943))+((x12945*x12953))+((r11*x12948))+(((-1.0)*r10*x12947*x12952))+((cj13*x12957)));
evalcond[4]=(((r10*x12950))+(((-1.0)*x12946*x12957))+((gconst23*x12945))+(((-1.0)*r11*x12943*x12952))+((r10*x12941*x12948)));
evalcond[5]=(x12949+((r21*x12941*x12950))+(((-1.0)*r20*x12947*x12952))+((r21*x12948))+((cj13*x12954))+((r20*x12943))+((cj11*sj12)));
evalcond[6]=(x12942+((r00*x12943))+((r01*x12948))+(((-1.0)*r00*x12947*x12952))+(((-1.0)*x12951))+((cj13*x12955))+((r01*x12941*x12950)));
evalcond[7]=(x12942+(((-1.0)*x12946*x12954))+((r21*x12947))+(((-1.0)*x12951))+((r20*x12941*x12948))+((r20*x12950))+(((-1.0)*r21*x12943*x12952)));
evalcond[8]=((((-1.0)*x12946*x12955))+((r01*x12947))+(((-1.0)*sj12*x12944))+(((-1.0)*r01*x12943*x12952))+((r00*x12950))+(((-1.0)*x12949))+((r00*x12941*x12948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12959=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x12959.valid){
continue;
}
CheckValue<IkReal> x12960 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12960.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12959.value)))+(x12960.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12961=IKsin(j14);
IkReal x12962=IKcos(j14);
IkReal x12963=(sj11*sj12);
IkReal x12964=(gconst22*sj13);
IkReal x12965=((1.0)*cj11);
IkReal x12966=(cj13*r11);
IkReal x12967=((1.0)*sj13);
IkReal x12968=(cj13*gconst23);
IkReal x12969=(gconst23*sj13);
IkReal x12970=(cj12*sj11);
IkReal x12971=(cj13*gconst22);
IkReal x12972=(cj12*x12965);
IkReal x12973=((1.0)*x12962);
IkReal x12974=(gconst22*x12962);
IkReal x12975=(r22*x12961);
IkReal x12976=(r02*x12961);
IkReal x12977=(gconst22*x12961);
IkReal x12978=(r12*x12961);
IkReal x12979=((1.0)*gconst23*x12961);
evalcond[0]=((((-1.0)*r20*x12979))+(((-1.0)*r22*x12973))+((r21*x12977)));
evalcond[1]=(((r01*x12977))+(((-1.0)*r00*x12979))+(((-1.0)*r02*x12973)));
evalcond[2]=((1.0)+(((-1.0)*r10*x12979))+(((-1.0)*r12*x12973))+((r11*x12977)));
evalcond[3]=(((cj13*x12978))+((r11*x12969))+((r10*x12964))+((x12966*x12974))+(((-1.0)*r10*x12968*x12973)));
evalcond[4]=((((-1.0)*r11*x12964*x12973))+((gconst23*x12966))+((r10*x12962*x12969))+(((-1.0)*x12967*x12978))+((r10*x12971)));
evalcond[5]=(x12970+((r21*x12962*x12971))+((r20*x12964))+((cj13*x12975))+(((-1.0)*r20*x12968*x12973))+((r21*x12969))+((cj11*sj12)));
evalcond[6]=(x12963+(((-1.0)*x12972))+((r00*x12964))+((r01*x12969))+((r01*x12962*x12971))+(((-1.0)*r00*x12968*x12973))+((cj13*x12976)));
evalcond[7]=(x12963+(((-1.0)*x12972))+(((-1.0)*r21*x12964*x12973))+((r20*x12971))+(((-1.0)*x12967*x12975))+((r21*x12968))+((r20*x12962*x12969)));
evalcond[8]=(((r01*x12968))+((r00*x12971))+(((-1.0)*r01*x12964*x12973))+((r00*x12962*x12969))+(((-1.0)*x12970))+(((-1.0)*x12967*x12976))+(((-1.0)*sj12*x12965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12981 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12981)==0){
continue;
}
IkReal x12980=pow(x12981,-0.5);
CheckValue<IkReal> x12982 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12982.valid){
continue;
}
IkReal gconst24=((-1.0)*(x12982.value));
IkReal gconst25=((-1.0)*r21*x12980);
IkReal gconst26=(r20*x12980);
CheckValue<IkReal> x12983 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12983.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x12983.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
CheckValue<IkReal> x12986 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12986.valid){
continue;
}
IkReal x12984=((-1.0)*(x12986.value));
IkReal x12985=x12980;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst25;
cj15=gconst26;
j15=x12984;
IkReal gconst24=x12984;
IkReal gconst25=((-1.0)*r21*x12985);
IkReal gconst26=(r20*x12985);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
CheckValue<IkReal> x12989 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12989.valid){
continue;
}
IkReal x12987=((-1.0)*(x12989.value));
IkReal x12988=x12980;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst25;
cj15=gconst26;
j15=x12987;
IkReal gconst24=x12987;
IkReal gconst25=((-1.0)*r21*x12988);
IkReal gconst26=(r20*x12988);
CheckValue<IkReal> x12997=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x12997.valid){
continue;
}
IkReal x12990=x12997.value;
IkReal x12991=(sj13*x12990);
IkReal x12992=(r01*x12991);
IkReal x12993=(r11*x12991);
IkReal x12994=(r10*x12991);
IkReal x12995=(r00*x12991);
IkReal x12996=(r20*r21*x12991);
j14eval[0]=IKsign((((r00*x12994*(r20*r20)))+((r11*x12992*(r21*r21)))+((r02*r12*sj13))+((r00*r20*r21*x12993))+((r10*r20*r21*x12992))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12998=gconst26*gconst26;
IkReal x12999=gconst25*gconst25;
IkReal x13000=(gconst25*r10);
IkReal x13001=(r02*sj13);
IkReal x13002=(cj13*r01);
IkReal x13003=((1.0)*r11);
IkReal x13004=((1.0)*r00);
IkReal x13005=(gconst26*sj13);
IkReal x13006=(gconst26*r11);
CheckValue<IkReal> x13007 = IKatan2WithCheck(IkReal((((x13000*x13001))+((x13001*x13006)))),IkReal((((gconst25*r01*r11*x13005))+(((-1.0)*x13000*x13004*x13005))+(((-1.0)*r00*sj13*x12998*x13003))+((r01*r10*sj13*x12999)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13007.valid){
continue;
}
CheckValue<IkReal> x13008=IKPowWithIntegerCheck(IKsign((((cj13*gconst25*r00*x13006))+(((-1.0)*cj13*r10*x12998*x13004))+(((-1.0)*x12999*x13002*x13003))+(((-1.0)*cj13*r02*r12))+((gconst26*x13000*x13002)))),-1);
if(!x13008.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13007.value)+(((1.5707963267949)*(x13008.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13009=IKsin(j14);
IkReal x13010=IKcos(j14);
IkReal x13011=(sj11*sj12);
IkReal x13012=((1.0)*cj12);
IkReal x13013=(cj11*sj12);
IkReal x13014=(gconst26*r01);
IkReal x13015=(gconst25*r21);
IkReal x13016=(gconst26*r00);
IkReal x13017=(gconst25*r20);
IkReal x13018=(gconst26*r11);
IkReal x13019=(cj13*gconst26);
IkReal x13020=(gconst26*r10);
IkReal x13021=(cj13*gconst25);
IkReal x13022=(gconst25*sj13);
IkReal x13023=(gconst26*r20);
IkReal x13024=(cj11*x13012);
IkReal x13025=((1.0)*x13009);
IkReal x13026=((1.0)*x13010);
IkReal x13027=(cj13*x13009);
IkReal x13028=(cj13*x13010);
IkReal x13029=(gconst25*x13009);
IkReal x13030=(sj13*x13010);
IkReal x13031=(x13022*x13026);
evalcond[0]=((((-1.0)*r22*x13026))+((x13009*x13015))+(((-1.0)*x13023*x13025)));
evalcond[1]=(((r01*x13029))+(((-1.0)*r02*x13026))+(((-1.0)*x13016*x13025)));
evalcond[2]=((1.0)+((r11*x13029))+(((-1.0)*x13020*x13025))+(((-1.0)*r12*x13026)));
evalcond[3]=(((r11*x13010*x13021))+((sj13*x13018))+(((-1.0)*r10*x13019*x13026))+((r12*x13027))+((r10*x13022)));
evalcond[4]=(((x13020*x13030))+(((-1.0)*r11*x13031))+(((-1.0)*r12*sj13*x13025))+((cj13*x13018))+((r10*x13021)));
evalcond[5]=((((-1.0)*r20*x13019*x13026))+((sj13*x13017))+((gconst26*r21*sj13))+((x13015*x13028))+x13013+((cj12*sj11))+((r22*x13027)));
evalcond[6]=(((r00*x13022))+(((-1.0)*x13024))+((r02*x13027))+((sj13*x13014))+(((-1.0)*cj13*x13016*x13026))+x13011+((r01*x13010*x13021)));
evalcond[7]=((((-1.0)*r22*sj13*x13025))+((x13023*x13030))+((r21*x13019))+(((-1.0)*x13024))+x13011+((cj13*x13017))+(((-1.0)*sj13*x13015*x13026)));
evalcond[8]=((((-1.0)*r01*x13031))+((r00*x13021))+(((-1.0)*r02*sj13*x13025))+(((-1.0)*x13013))+((x13016*x13030))+((cj13*x13014))+(((-1.0)*sj11*x13012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13032=gconst26*gconst26;
IkReal x13033=gconst25*gconst25;
IkReal x13034=(cj13*r10);
IkReal x13035=(r00*sj13);
IkReal x13036=(cj13*r11);
IkReal x13037=(r01*x13033);
IkReal x13038=(gconst25*gconst26*r11);
IkReal x13039=((1.0)*gconst25*gconst26);
CheckValue<IkReal> x13040 = IKatan2WithCheck(IkReal((((gconst26*r02*x13036))+((gconst25*r02*x13034)))),IkReal((((x13034*x13037))+(((-1.0)*r00*x13034*x13039))+(((-1.0)*r00*x13032*x13036))+((gconst25*gconst26*r01*x13036)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13040.valid){
continue;
}
CheckValue<IkReal> x13041=IKPowWithIntegerCheck(IKsign((((r02*r12*sj13))+(((-1.0)*r01*r10*sj13*x13039))+((r11*sj13*x13037))+((r10*x13032*x13035))+(((-1.0)*x13035*x13038)))),-1);
if(!x13041.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13040.value)+(((1.5707963267949)*(x13041.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13042=IKsin(j14);
IkReal x13043=IKcos(j14);
IkReal x13044=(sj11*sj12);
IkReal x13045=((1.0)*cj12);
IkReal x13046=(cj11*sj12);
IkReal x13047=(gconst26*r01);
IkReal x13048=(gconst25*r21);
IkReal x13049=(gconst26*r00);
IkReal x13050=(gconst25*r20);
IkReal x13051=(gconst26*r11);
IkReal x13052=(cj13*gconst26);
IkReal x13053=(gconst26*r10);
IkReal x13054=(cj13*gconst25);
IkReal x13055=(gconst25*sj13);
IkReal x13056=(gconst26*r20);
IkReal x13057=(cj11*x13045);
IkReal x13058=((1.0)*x13042);
IkReal x13059=((1.0)*x13043);
IkReal x13060=(cj13*x13042);
IkReal x13061=(cj13*x13043);
IkReal x13062=(gconst25*x13042);
IkReal x13063=(sj13*x13043);
IkReal x13064=(x13055*x13059);
evalcond[0]=(((x13042*x13048))+(((-1.0)*r22*x13059))+(((-1.0)*x13056*x13058)));
evalcond[1]=((((-1.0)*x13049*x13058))+(((-1.0)*r02*x13059))+((r01*x13062)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13059))+((r11*x13062))+(((-1.0)*x13053*x13058)));
evalcond[3]=(((r12*x13060))+((sj13*x13051))+((r10*x13055))+((r11*x13043*x13054))+(((-1.0)*r10*x13052*x13059)));
evalcond[4]=(((cj13*x13051))+((r10*x13054))+(((-1.0)*r11*x13064))+(((-1.0)*r12*sj13*x13058))+((x13053*x13063)));
evalcond[5]=(((x13048*x13061))+((sj13*x13050))+(((-1.0)*r20*x13052*x13059))+((r22*x13060))+((gconst26*r21*sj13))+x13046+((cj12*sj11)));
evalcond[6]=(((r02*x13060))+((r01*x13043*x13054))+((sj13*x13047))+x13044+(((-1.0)*cj13*x13049*x13059))+((r00*x13055))+(((-1.0)*x13057)));
evalcond[7]=(((r21*x13052))+((cj13*x13050))+((x13056*x13063))+x13044+(((-1.0)*sj13*x13048*x13059))+(((-1.0)*r22*sj13*x13058))+(((-1.0)*x13057)));
evalcond[8]=((((-1.0)*r01*x13064))+(((-1.0)*x13046))+((cj13*x13047))+(((-1.0)*sj11*x13045))+(((-1.0)*r02*sj13*x13058))+((r00*x13054))+((x13049*x13063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13065=((1.0)*gconst26);
CheckValue<IkReal> x13066=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13065))+(((-1.0)*gconst25*r00)))),-1);
if(!x13066.valid){
continue;
}
CheckValue<IkReal> x13067 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13065))+((gconst25*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13067.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13066.value)))+(x13067.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13068=IKsin(j14);
IkReal x13069=IKcos(j14);
IkReal x13070=(sj11*sj12);
IkReal x13071=((1.0)*cj12);
IkReal x13072=(cj11*sj12);
IkReal x13073=(gconst26*r01);
IkReal x13074=(gconst25*r21);
IkReal x13075=(gconst26*r00);
IkReal x13076=(gconst25*r20);
IkReal x13077=(gconst26*r11);
IkReal x13078=(cj13*gconst26);
IkReal x13079=(gconst26*r10);
IkReal x13080=(cj13*gconst25);
IkReal x13081=(gconst25*sj13);
IkReal x13082=(gconst26*r20);
IkReal x13083=(cj11*x13071);
IkReal x13084=((1.0)*x13068);
IkReal x13085=((1.0)*x13069);
IkReal x13086=(cj13*x13068);
IkReal x13087=(cj13*x13069);
IkReal x13088=(gconst25*x13068);
IkReal x13089=(sj13*x13069);
IkReal x13090=(x13081*x13085);
evalcond[0]=((((-1.0)*x13082*x13084))+(((-1.0)*r22*x13085))+((x13068*x13074)));
evalcond[1]=((((-1.0)*r02*x13085))+(((-1.0)*x13075*x13084))+((r01*x13088)));
evalcond[2]=((1.0)+((r11*x13088))+(((-1.0)*x13079*x13084))+(((-1.0)*r12*x13085)));
evalcond[3]=(((r11*x13069*x13080))+(((-1.0)*r10*x13078*x13085))+((r12*x13086))+((sj13*x13077))+((r10*x13081)));
evalcond[4]=((((-1.0)*r12*sj13*x13084))+((x13079*x13089))+((r10*x13080))+((cj13*x13077))+(((-1.0)*r11*x13090)));
evalcond[5]=(((x13074*x13087))+((r22*x13086))+((gconst26*r21*sj13))+((sj13*x13076))+x13072+((cj12*sj11))+(((-1.0)*r20*x13078*x13085)));
evalcond[6]=((((-1.0)*x13083))+((r02*x13086))+((r01*x13069*x13080))+((sj13*x13073))+x13070+(((-1.0)*cj13*x13075*x13085))+((r00*x13081)));
evalcond[7]=((((-1.0)*x13083))+((r21*x13078))+(((-1.0)*r22*sj13*x13084))+(((-1.0)*sj13*x13074*x13085))+x13070+((x13082*x13089))+((cj13*x13076)));
evalcond[8]=(((x13075*x13089))+(((-1.0)*sj11*x13071))+(((-1.0)*r02*sj13*x13084))+(((-1.0)*r01*x13090))+(((-1.0)*x13072))+((r00*x13080))+((cj13*x13073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13092 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13092)==0){
continue;
}
IkReal x13091=pow(x13092,-0.5);
CheckValue<IkReal> x13093 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13093.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13093.value))));
IkReal gconst28=((1.0)*r21*x13091);
IkReal gconst29=((-1.0)*r20*x13091);
CheckValue<IkReal> x13094 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13094.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x13094.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
CheckValue<IkReal> x13097 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13097.valid){
continue;
}
IkReal x13095=((1.0)*(x13097.value));
IkReal x13096=x13091;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13095)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13095)));
IkReal gconst28=((1.0)*r21*x13096);
IkReal gconst29=((-1.0)*r20*x13096);
j14eval[0]=0;
j14eval[1]=r02;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
CheckValue<IkReal> x13100 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13100.valid){
continue;
}
IkReal x13098=((1.0)*(x13100.value));
IkReal x13099=x13091;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13098)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13098)));
IkReal gconst28=((1.0)*r21*x13099);
IkReal gconst29=((-1.0)*r20*x13099);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
CheckValue<IkReal> x13103 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13103.valid){
continue;
}
IkReal x13101=((1.0)*(x13103.value));
IkReal x13102=x13091;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13101)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13101)));
IkReal gconst28=((1.0)*r21*x13102);
IkReal gconst29=((-1.0)*r20*x13102);
j14eval[0]=r02;
j14eval[1]=sj13;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
CheckValue<IkReal> x13106 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13106.valid){
continue;
}
IkReal x13104=((1.0)*(x13106.value));
IkReal x13105=x13091;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13104)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13104)));
IkReal gconst28=((1.0)*r21*x13105);
IkReal gconst29=((-1.0)*r20*x13105);
j14eval[0]=0;
j14eval[1]=r02;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
CheckValue<IkReal> x13109 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13109.valid){
continue;
}
IkReal x13107=((1.0)*(x13109.value));
IkReal x13108=x13091;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13107)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13107)));
IkReal gconst28=((1.0)*r21*x13108);
IkReal gconst29=((-1.0)*r20*x13108);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
CheckValue<IkReal> x13112 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13112.valid){
continue;
}
IkReal x13110=((1.0)*(x13112.value));
IkReal x13111=x13091;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13110)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13110)));
IkReal gconst28=((1.0)*r21*x13111);
IkReal gconst29=((-1.0)*r20*x13111);
j14eval[0]=r12;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13113=(gconst29*r10);
IkReal x13114=(gconst28*r11);
CheckValue<IkReal> x13115 = IKatan2WithCheck(IkReal(((((-1.0)*x13114))+x13113)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13115.valid){
continue;
}
CheckValue<IkReal> x13116=IKPowWithIntegerCheck(IKsign(((x13114*x13114)+(r12*r12)+(x13113*x13113)+(((-2.0)*x13113*x13114)))),-1);
if(!x13116.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13115.value)+(((1.5707963267949)*(x13116.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13117=IKsin(j14);
IkReal x13118=IKcos(j14);
IkReal x13119=((1.0)*cj11);
IkReal x13120=(gconst29*r10);
IkReal x13121=(gconst28*r11);
IkReal x13122=(gconst29*r00);
IkReal x13123=(gconst29*r20);
IkReal x13124=(gconst28*r01);
IkReal x13125=(gconst28*r21);
IkReal x13126=((1.0)*x13118);
IkReal x13127=((1.0)*x13117);
evalcond[0]=((((-1.0)*x13123*x13127))+((x13117*x13125))+(((-1.0)*r22*x13126)));
evalcond[1]=((((-1.0)*r02*x13126))+((x13117*x13124))+(((-1.0)*x13122*x13127)));
evalcond[2]=((((-1.0)*x13121*x13126))+((x13118*x13120))+(((-1.0)*r12*x13127)));
evalcond[3]=((1.0)+(((-1.0)*x13120*x13127))+((x13117*x13121))+(((-1.0)*r12*x13126)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x13125*x13126))+(((-1.0)*r22*x13127))+((x13118*x13123))+(((-1.0)*cj12*x13119)));
evalcond[5]=((((-1.0)*r02*x13127))+(((-1.0)*x13124*x13126))+(((-1.0)*sj12*x13119))+(((-1.0)*cj12*sj11))+((x13118*x13122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13128=((1.0)*gconst29);
CheckValue<IkReal> x13129 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13128))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13129.valid){
continue;
}
CheckValue<IkReal> x13130=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13128))+(((-1.0)*gconst28*r00)))),-1);
if(!x13130.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13129.value)+(((1.5707963267949)*(x13130.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13131=IKsin(j14);
IkReal x13132=IKcos(j14);
IkReal x13133=((1.0)*cj11);
IkReal x13134=(gconst29*r10);
IkReal x13135=(gconst28*r11);
IkReal x13136=(gconst29*r00);
IkReal x13137=(gconst29*r20);
IkReal x13138=(gconst28*r01);
IkReal x13139=(gconst28*r21);
IkReal x13140=((1.0)*x13132);
IkReal x13141=((1.0)*x13131);
evalcond[0]=(((x13131*x13139))+(((-1.0)*x13137*x13141))+(((-1.0)*r22*x13140)));
evalcond[1]=(((x13131*x13138))+(((-1.0)*x13136*x13141))+(((-1.0)*r02*x13140)));
evalcond[2]=(((x13132*x13134))+(((-1.0)*r12*x13141))+(((-1.0)*x13135*x13140)));
evalcond[3]=((1.0)+((x13131*x13135))+(((-1.0)*r12*x13140))+(((-1.0)*x13134*x13141)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x13139*x13140))+((x13132*x13137))+(((-1.0)*r22*x13141))+(((-1.0)*cj12*x13133)));
evalcond[5]=((((-1.0)*x13138*x13140))+((x13132*x13136))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x13133))+(((-1.0)*r02*x13141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13142=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13142.valid){
continue;
}
CheckValue<IkReal> x13143 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13143.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13142.value)))+(x13143.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13144=IKsin(j14);
IkReal x13145=IKcos(j14);
IkReal x13146=((1.0)*cj11);
IkReal x13147=(gconst29*r10);
IkReal x13148=(gconst28*r11);
IkReal x13149=(gconst29*r00);
IkReal x13150=(gconst29*r20);
IkReal x13151=(gconst28*r01);
IkReal x13152=(gconst28*r21);
IkReal x13153=((1.0)*x13145);
IkReal x13154=((1.0)*x13144);
evalcond[0]=(((x13144*x13152))+(((-1.0)*r22*x13153))+(((-1.0)*x13150*x13154)));
evalcond[1]=(((x13144*x13151))+(((-1.0)*r02*x13153))+(((-1.0)*x13149*x13154)));
evalcond[2]=((((-1.0)*r12*x13154))+(((-1.0)*x13148*x13153))+((x13145*x13147)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13153))+(((-1.0)*x13147*x13154))+((x13144*x13148)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x13152*x13153))+(((-1.0)*cj12*x13146))+(((-1.0)*r22*x13154))+((x13145*x13150)));
evalcond[5]=((((-1.0)*x13151*x13153))+(((-1.0)*r02*x13154))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x13146))+((x13145*x13149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
CheckValue<IkReal> x13157 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13157.valid){
continue;
}
IkReal x13155=((1.0)*(x13157.value));
IkReal x13156=x13091;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13155)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13155)));
IkReal gconst28=((1.0)*r21*x13156);
IkReal gconst29=((-1.0)*r20*x13156);
j14eval[0]=0;
j14eval[1]=r02;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
CheckValue<IkReal> x13160 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13160.valid){
continue;
}
IkReal x13158=((1.0)*(x13160.value));
IkReal x13159=x13091;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13158)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13158)));
IkReal gconst28=((1.0)*r21*x13159);
IkReal gconst29=((-1.0)*r20*x13159);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
CheckValue<IkReal> x13163 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13163.valid){
continue;
}
IkReal x13161=((1.0)*(x13163.value));
IkReal x13162=x13091;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13161)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13161)));
IkReal gconst28=((1.0)*r21*x13162);
IkReal gconst29=((-1.0)*r20*x13162);
IkReal x13164=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13168=IKPowWithIntegerCheck(x13164,-1);
if(!x13168.valid){
continue;
}
IkReal x13165=x13168.value;
IkReal x13166=((1.0)*x13165);
IkReal x13167=((((-2.0)*r10*r11*r20*r21*x13165))+(((-1.0)*x13166*(r11*r11)*(r21*r21)))+(((-1.0)*x13166*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12))));
j14eval[0]=x13167;
j14eval[1]=r12;
j14eval[2]=x13164;
j14eval[3]=IKsign(x13167);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13169=(gconst28*r11);
IkReal x13170=(gconst29*r10);
CheckValue<IkReal> x13171=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13170*x13170)))+(((2.0)*x13169*x13170))+(((-1.0)*(x13169*x13169)))+(((-1.0)*(r12*r12))))),-1);
if(!x13171.valid){
continue;
}
CheckValue<IkReal> x13172 = IKatan2WithCheck(IkReal(((((-1.0)*x13170))+x13169)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13172.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13171.value)))+(x13172.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13173=IKcos(j14);
IkReal x13174=IKsin(j14);
IkReal x13175=((1.0)*cj11);
IkReal x13176=(gconst29*r10);
IkReal x13177=(gconst29*r00);
IkReal x13178=(gconst29*r20);
IkReal x13179=((1.0)*x13173);
IkReal x13180=((1.0)*x13174);
IkReal x13181=(gconst28*x13174);
IkReal x13182=(gconst28*x13173);
evalcond[0]=(((r11*x13182))+((r12*x13174))+(((-1.0)*x13176*x13179)));
evalcond[1]=((((-1.0)*x13178*x13180))+((r21*x13181))+(((-1.0)*r22*x13179)));
evalcond[2]=(((r01*x13181))+(((-1.0)*x13177*x13180))+(((-1.0)*r02*x13179)));
evalcond[3]=((1.0)+((r11*x13181))+(((-1.0)*x13176*x13180))+(((-1.0)*r12*x13179)));
evalcond[4]=(((sj11*sj12))+((r21*x13182))+(((-1.0)*x13178*x13179))+((r22*x13174))+(((-1.0)*cj12*x13175)));
evalcond[5]=((((-1.0)*cj12*sj11))+((r01*x13182))+((r02*x13174))+(((-1.0)*sj12*x13175))+(((-1.0)*x13177*x13179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13183=((1.0)*gconst29);
CheckValue<IkReal> x13184=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13183))+(((-1.0)*gconst28*r00)))),-1);
if(!x13184.valid){
continue;
}
CheckValue<IkReal> x13185 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13183))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13185.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13184.value)))+(x13185.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13186=IKcos(j14);
IkReal x13187=IKsin(j14);
IkReal x13188=((1.0)*cj11);
IkReal x13189=(gconst29*r10);
IkReal x13190=(gconst29*r00);
IkReal x13191=(gconst29*r20);
IkReal x13192=((1.0)*x13186);
IkReal x13193=((1.0)*x13187);
IkReal x13194=(gconst28*x13187);
IkReal x13195=(gconst28*x13186);
evalcond[0]=(((r12*x13187))+((r11*x13195))+(((-1.0)*x13189*x13192)));
evalcond[1]=(((r21*x13194))+(((-1.0)*r22*x13192))+(((-1.0)*x13191*x13193)));
evalcond[2]=((((-1.0)*r02*x13192))+((r01*x13194))+(((-1.0)*x13190*x13193)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13192))+((r11*x13194))+(((-1.0)*x13189*x13193)));
evalcond[4]=(((sj11*sj12))+((r22*x13187))+(((-1.0)*cj12*x13188))+((r21*x13195))+(((-1.0)*x13191*x13192)));
evalcond[5]=(((r02*x13187))+(((-1.0)*sj12*x13188))+(((-1.0)*cj12*sj11))+((r01*x13195))+(((-1.0)*x13190*x13192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13196=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13196.valid){
continue;
}
CheckValue<IkReal> x13197 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13197.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13196.value)))+(x13197.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13198=IKcos(j14);
IkReal x13199=IKsin(j14);
IkReal x13200=((1.0)*cj11);
IkReal x13201=(gconst29*r10);
IkReal x13202=(gconst29*r00);
IkReal x13203=(gconst29*r20);
IkReal x13204=((1.0)*x13198);
IkReal x13205=((1.0)*x13199);
IkReal x13206=(gconst28*x13199);
IkReal x13207=(gconst28*x13198);
evalcond[0]=(((r12*x13199))+((r11*x13207))+(((-1.0)*x13201*x13204)));
evalcond[1]=(((r21*x13206))+(((-1.0)*x13203*x13205))+(((-1.0)*r22*x13204)));
evalcond[2]=(((r01*x13206))+(((-1.0)*x13202*x13205))+(((-1.0)*r02*x13204)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13204))+((r11*x13206))+(((-1.0)*x13201*x13205)));
evalcond[4]=(((sj11*sj12))+((r21*x13207))+(((-1.0)*x13203*x13204))+(((-1.0)*cj12*x13200))+((r22*x13199)));
evalcond[5]=(((r01*x13207))+((r02*x13199))+(((-1.0)*x13202*x13204))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x13200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
CheckValue<IkReal> x13210 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13210.valid){
continue;
}
IkReal x13208=((1.0)*(x13210.value));
IkReal x13209=x13091;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13208)));
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13208)));
IkReal gconst28=((1.0)*r21*x13209);
IkReal gconst29=((-1.0)*r20*x13209);
j14eval[0]=0;
j14eval[1]=r02;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
CheckValue<IkReal> x13213 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13213.valid){
continue;
}
IkReal x13211=((1.0)*(x13213.value));
IkReal x13212=x13091;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13211)));
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13211)));
IkReal gconst28=((1.0)*r21*x13212);
IkReal gconst29=((-1.0)*r20*x13212);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
CheckValue<IkReal> x13216 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13216.valid){
continue;
}
IkReal x13214=((1.0)*(x13216.value));
IkReal x13215=x13091;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13214)));
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13214)));
IkReal gconst28=((1.0)*r21*x13215);
IkReal gconst29=((-1.0)*r20*x13215);
IkReal x13217=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13221=IKPowWithIntegerCheck(x13217,-1);
if(!x13221.valid){
continue;
}
IkReal x13218=x13221.value;
IkReal x13219=((1.0)*x13218);
IkReal x13220=((((-1.0)*x13219*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x13219*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x13218)));
j14eval[0]=x13220;
j14eval[1]=r12;
j14eval[2]=x13217;
j14eval[3]=IKsign(x13220);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13222=(gconst28*r11);
IkReal x13223=(gconst29*r10);
CheckValue<IkReal> x13224=IKPowWithIntegerCheck(IKsign(((((2.0)*x13222*x13223))+(((-1.0)*(x13222*x13222)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13223*x13223))))),-1);
if(!x13224.valid){
continue;
}
CheckValue<IkReal> x13225 = IKatan2WithCheck(IkReal(((((-1.0)*x13223))+x13222)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13225.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13224.value)))+(x13225.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13226=IKcos(j14);
IkReal x13227=IKsin(j14);
IkReal x13228=(gconst29*r10);
IkReal x13229=(gconst29*r00);
IkReal x13230=(gconst29*r20);
IkReal x13231=((1.0)*x13226);
IkReal x13232=((1.0)*x13227);
IkReal x13233=(gconst28*x13227);
IkReal x13234=(gconst28*x13226);
evalcond[0]=((((-1.0)*x13228*x13231))+((r11*x13234))+((r12*x13227)));
evalcond[1]=(((r21*x13233))+(((-1.0)*r22*x13231))+(((-1.0)*x13230*x13232)));
evalcond[2]=(((r01*x13233))+(((-1.0)*x13229*x13232))+(((-1.0)*r02*x13231)));
evalcond[3]=((1.0)+(((-1.0)*x13228*x13232))+(((-1.0)*r12*x13231))+((r11*x13233)));
evalcond[4]=(((r22*x13227))+((r21*x13234))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*x13230*x13231)));
evalcond[5]=(((sj11*sj12))+((r01*x13234))+((r02*x13227))+(((-1.0)*x13229*x13231))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13235=((1.0)*gconst29);
CheckValue<IkReal> x13236=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13235))+(((-1.0)*gconst28*r00)))),-1);
if(!x13236.valid){
continue;
}
CheckValue<IkReal> x13237 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13235))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13237.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13236.value)))+(x13237.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13238=IKcos(j14);
IkReal x13239=IKsin(j14);
IkReal x13240=(gconst29*r10);
IkReal x13241=(gconst29*r00);
IkReal x13242=(gconst29*r20);
IkReal x13243=((1.0)*x13238);
IkReal x13244=((1.0)*x13239);
IkReal x13245=(gconst28*x13239);
IkReal x13246=(gconst28*x13238);
evalcond[0]=(((r11*x13246))+((r12*x13239))+(((-1.0)*x13240*x13243)));
evalcond[1]=(((r21*x13245))+(((-1.0)*r22*x13243))+(((-1.0)*x13242*x13244)));
evalcond[2]=((((-1.0)*r02*x13243))+((r01*x13245))+(((-1.0)*x13241*x13244)));
evalcond[3]=((1.0)+((r11*x13245))+(((-1.0)*r12*x13243))+(((-1.0)*x13240*x13244)));
evalcond[4]=(((r21*x13246))+((r22*x13239))+(((-1.0)*x13242*x13243))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r02*x13239))+((r01*x13246))+(((-1.0)*x13241*x13243))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13247=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13247.valid){
continue;
}
CheckValue<IkReal> x13248 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13248.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13247.value)))+(x13248.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13249=IKcos(j14);
IkReal x13250=IKsin(j14);
IkReal x13251=(gconst29*r10);
IkReal x13252=(gconst29*r00);
IkReal x13253=(gconst29*r20);
IkReal x13254=((1.0)*x13249);
IkReal x13255=((1.0)*x13250);
IkReal x13256=(gconst28*x13250);
IkReal x13257=(gconst28*x13249);
evalcond[0]=(((r12*x13250))+((r11*x13257))+(((-1.0)*x13251*x13254)));
evalcond[1]=(((r21*x13256))+(((-1.0)*r22*x13254))+(((-1.0)*x13253*x13255)));
evalcond[2]=((((-1.0)*r02*x13254))+((r01*x13256))+(((-1.0)*x13252*x13255)));
evalcond[3]=((1.0)+((r11*x13256))+(((-1.0)*x13251*x13255))+(((-1.0)*r12*x13254)));
evalcond[4]=(((r21*x13257))+((r22*x13250))+((cj12*sj11))+(((-1.0)*x13253*x13254))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r02*x13250))+((r01*x13257))+(((-1.0)*x13252*x13254))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
CheckValue<IkReal> x13260 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13260.valid){
continue;
}
IkReal x13258=((1.0)*(x13260.value));
IkReal x13259=x13091;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13258)));
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13258)));
IkReal gconst28=((1.0)*r21*x13259);
IkReal gconst29=((-1.0)*r20*x13259);
j14eval[0]=0;
j14eval[1]=r02;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
CheckValue<IkReal> x13263 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13263.valid){
continue;
}
IkReal x13261=((1.0)*(x13263.value));
IkReal x13262=x13091;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13261)));
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13261)));
IkReal gconst28=((1.0)*r21*x13262);
IkReal gconst29=((-1.0)*r20*x13262);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
CheckValue<IkReal> x13266 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13266.valid){
continue;
}
IkReal x13264=((1.0)*(x13266.value));
IkReal x13265=x13091;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13264)));
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13264)));
IkReal gconst28=((1.0)*r21*x13265);
IkReal gconst29=((-1.0)*r20*x13265);
j14eval[0]=r12;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13267=(gconst29*r10);
IkReal x13268=(gconst28*r11);
CheckValue<IkReal> x13269 = IKatan2WithCheck(IkReal(((((-1.0)*x13268))+x13267)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13269.valid){
continue;
}
CheckValue<IkReal> x13270=IKPowWithIntegerCheck(IKsign(((x13267*x13267)+(r12*r12)+(((-2.0)*x13267*x13268))+(x13268*x13268))),-1);
if(!x13270.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13269.value)+(((1.5707963267949)*(x13270.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13271=IKsin(j14);
IkReal x13272=IKcos(j14);
IkReal x13273=(gconst29*r10);
IkReal x13274=(gconst28*r11);
IkReal x13275=(gconst29*r00);
IkReal x13276=(gconst29*r20);
IkReal x13277=(gconst28*r01);
IkReal x13278=(gconst28*r21);
IkReal x13279=((1.0)*x13272);
IkReal x13280=((1.0)*x13271);
evalcond[0]=((((-1.0)*x13276*x13280))+((x13271*x13278))+(((-1.0)*r22*x13279)));
evalcond[1]=(((x13271*x13277))+(((-1.0)*x13275*x13280))+(((-1.0)*r02*x13279)));
evalcond[2]=((((-1.0)*x13274*x13279))+((x13272*x13273))+(((-1.0)*r12*x13280)));
evalcond[3]=((1.0)+(((-1.0)*x13273*x13280))+((x13271*x13274))+(((-1.0)*r12*x13279)));
evalcond[4]=((((-1.0)*r22*x13280))+(((-1.0)*x13278*x13279))+((x13272*x13276))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x13272*x13275))+(((-1.0)*x13277*x13279))+(((-1.0)*r02*x13280))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13281=((1.0)*gconst29);
CheckValue<IkReal> x13282 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13281))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13282.valid){
continue;
}
CheckValue<IkReal> x13283=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13281)))),-1);
if(!x13283.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13282.value)+(((1.5707963267949)*(x13283.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13284=IKsin(j14);
IkReal x13285=IKcos(j14);
IkReal x13286=(gconst29*r10);
IkReal x13287=(gconst28*r11);
IkReal x13288=(gconst29*r00);
IkReal x13289=(gconst29*r20);
IkReal x13290=(gconst28*r01);
IkReal x13291=(gconst28*r21);
IkReal x13292=((1.0)*x13285);
IkReal x13293=((1.0)*x13284);
evalcond[0]=(((x13284*x13291))+(((-1.0)*r22*x13292))+(((-1.0)*x13289*x13293)));
evalcond[1]=(((x13284*x13290))+(((-1.0)*r02*x13292))+(((-1.0)*x13288*x13293)));
evalcond[2]=((((-1.0)*x13287*x13292))+((x13285*x13286))+(((-1.0)*r12*x13293)));
evalcond[3]=((1.0)+((x13284*x13287))+(((-1.0)*x13286*x13293))+(((-1.0)*r12*x13292)));
evalcond[4]=(((x13285*x13289))+((cj12*sj11))+(((-1.0)*x13291*x13292))+(((-1.0)*r22*x13293))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x13285*x13288))+(((-1.0)*r02*x13293))+(((-1.0)*cj11*cj12))+(((-1.0)*x13290*x13292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13294=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13294.valid){
continue;
}
CheckValue<IkReal> x13295 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13295.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13294.value)))+(x13295.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13296=IKsin(j14);
IkReal x13297=IKcos(j14);
IkReal x13298=(gconst29*r10);
IkReal x13299=(gconst28*r11);
IkReal x13300=(gconst29*r00);
IkReal x13301=(gconst29*r20);
IkReal x13302=(gconst28*r01);
IkReal x13303=(gconst28*r21);
IkReal x13304=((1.0)*x13297);
IkReal x13305=((1.0)*x13296);
evalcond[0]=((((-1.0)*r22*x13304))+((x13296*x13303))+(((-1.0)*x13301*x13305)));
evalcond[1]=((((-1.0)*x13300*x13305))+(((-1.0)*r02*x13304))+((x13296*x13302)));
evalcond[2]=(((x13297*x13298))+(((-1.0)*x13299*x13304))+(((-1.0)*r12*x13305)));
evalcond[3]=((1.0)+((x13296*x13299))+(((-1.0)*x13298*x13305))+(((-1.0)*r12*x13304)));
evalcond[4]=(((cj12*sj11))+((x13297*x13301))+(((-1.0)*r22*x13305))+(((-1.0)*x13303*x13304))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x13302*x13304))+(((-1.0)*r02*x13305))+((x13297*x13300))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j14array[2], cj14array[2], sj14array[2], tempj14array[1];
int numsolutions = 0;
for(int ij14 = 0; ij14 < numroots; ++ij14)
{
IkReal htj14 = zeror[ij14];
tempj14array[0]=((2.0)*(atan(htj14)));
for(int kj14 = 0; kj14 < 1; ++kj14)
{
j14array[numsolutions] = tempj14array[kj14];
if( j14array[numsolutions] > IKPI )
{
    j14array[numsolutions]-=IK2PI;
}
else if( j14array[numsolutions] < -IKPI )
{
    j14array[numsolutions]+=IK2PI;
}
sj14array[numsolutions] = IKsin(j14array[numsolutions]);
cj14array[numsolutions] = IKcos(j14array[numsolutions]);
numsolutions++;
}
}
bool j14valid[2]={true,true};
_nj14 = 2;
for(int ij14 = 0; ij14 < numsolutions; ++ij14)
    {
if( !j14valid[ij14] )
{
    continue;
}
    j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
htj14 = IKtan(j14/2);

_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < numsolutions; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13306=gconst29*gconst29;
IkReal x13307=gconst28*gconst28;
IkReal x13308=(gconst28*gconst29);
IkReal x13309=(r10*r21);
IkReal x13310=(cj13*r11);
IkReal x13311=(r11*sj13);
IkReal x13312=((1.0)*r10*r20);
CheckValue<IkReal> x13313=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13307*x13310))+(((-1.0)*cj13*r12*r22))+((r20*x13308*x13310))+(((-1.0)*cj13*x13306*x13312))+((cj13*x13308*x13309)))),-1);
if(!x13313.valid){
continue;
}
CheckValue<IkReal> x13314 = IKatan2WithCheck(IkReal((((gconst29*r22*x13311))+((gconst28*r10*r22*sj13)))),IkReal((((r21*x13308*x13311))+((sj13*x13307*x13309))+(((-1.0)*sj13*x13308*x13312))+(((-1.0)*r20*x13306*x13311)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13314.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13313.value)))+(x13314.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13315=IKsin(j14);
IkReal x13316=IKcos(j14);
IkReal x13317=(sj11*sj12);
IkReal x13318=(cj13*gconst29);
IkReal x13319=((1.0)*cj11);
IkReal x13320=(gconst29*r10);
IkReal x13321=(gconst28*r11);
IkReal x13322=(gconst29*r00);
IkReal x13323=(cj12*sj11);
IkReal x13324=(gconst28*sj13);
IkReal x13325=(gconst29*r20);
IkReal x13326=(cj13*gconst28);
IkReal x13327=(gconst29*sj13);
IkReal x13328=(gconst28*r01);
IkReal x13329=(gconst28*r21);
IkReal x13330=(cj12*x13319);
IkReal x13331=((1.0)*x13316);
IkReal x13332=((1.0)*x13315);
IkReal x13333=(cj13*x13316);
IkReal x13334=(cj13*x13315);
IkReal x13335=(sj13*x13316);
evalcond[0]=((((-1.0)*r22*x13331))+((x13315*x13329))+(((-1.0)*x13325*x13332)));
evalcond[1]=(((x13315*x13328))+(((-1.0)*x13322*x13332))+(((-1.0)*r02*x13331)));
evalcond[2]=((1.0)+(((-1.0)*x13320*x13332))+(((-1.0)*r12*x13331))+((x13315*x13321)));
evalcond[3]=(((x13321*x13333))+((r10*x13324))+(((-1.0)*r10*x13318*x13331))+((r11*x13327))+((r12*x13334)));
evalcond[4]=((((-1.0)*sj13*x13321*x13331))+(((-1.0)*r12*sj13*x13332))+((r11*x13318))+((x13320*x13335))+((r10*x13326)));
evalcond[5]=(((r21*x13316*x13326))+((r22*x13334))+(((-1.0)*r20*x13318*x13331))+((r20*x13324))+((r21*x13327))+((cj11*sj12))+x13323);
evalcond[6]=((((-1.0)*x13330))+((r02*x13334))+((r00*x13324))+((r01*x13316*x13326))+((r01*x13327))+(((-1.0)*r00*x13318*x13331))+x13317);
evalcond[7]=((((-1.0)*x13330))+(((-1.0)*r21*x13324*x13331))+((r20*x13326))+((r21*x13318))+((x13325*x13335))+x13317+(((-1.0)*r22*sj13*x13332)));
evalcond[8]=((((-1.0)*r01*x13324*x13331))+(((-1.0)*sj12*x13319))+(((-1.0)*r02*sj13*x13332))+(((-1.0)*x13323))+((r01*x13318))+((r00*x13326))+((x13322*x13335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13336=((1.0)*gconst29);
CheckValue<IkReal> x13337=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13336))+(((-1.0)*gconst28*r00)))),-1);
if(!x13337.valid){
continue;
}
CheckValue<IkReal> x13338 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13336))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13338.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13337.value)))+(x13338.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13339=IKsin(j14);
IkReal x13340=IKcos(j14);
IkReal x13341=(sj11*sj12);
IkReal x13342=(cj13*gconst29);
IkReal x13343=((1.0)*cj11);
IkReal x13344=(gconst29*r10);
IkReal x13345=(gconst28*r11);
IkReal x13346=(gconst29*r00);
IkReal x13347=(cj12*sj11);
IkReal x13348=(gconst28*sj13);
IkReal x13349=(gconst29*r20);
IkReal x13350=(cj13*gconst28);
IkReal x13351=(gconst29*sj13);
IkReal x13352=(gconst28*r01);
IkReal x13353=(gconst28*r21);
IkReal x13354=(cj12*x13343);
IkReal x13355=((1.0)*x13340);
IkReal x13356=((1.0)*x13339);
IkReal x13357=(cj13*x13340);
IkReal x13358=(cj13*x13339);
IkReal x13359=(sj13*x13340);
evalcond[0]=((((-1.0)*r22*x13355))+((x13339*x13353))+(((-1.0)*x13349*x13356)));
evalcond[1]=((((-1.0)*x13346*x13356))+(((-1.0)*r02*x13355))+((x13339*x13352)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13355))+(((-1.0)*x13344*x13356))+((x13339*x13345)));
evalcond[3]=(((x13345*x13357))+(((-1.0)*r10*x13342*x13355))+((r10*x13348))+((r11*x13351))+((r12*x13358)));
evalcond[4]=(((r10*x13350))+((x13344*x13359))+((r11*x13342))+(((-1.0)*r12*sj13*x13356))+(((-1.0)*sj13*x13345*x13355)));
evalcond[5]=(((r22*x13358))+((r21*x13340*x13350))+((r21*x13351))+(((-1.0)*r20*x13342*x13355))+((r20*x13348))+((cj11*sj12))+x13347);
evalcond[6]=((((-1.0)*r00*x13342*x13355))+((r02*x13358))+((r01*x13351))+((r01*x13340*x13350))+((r00*x13348))+(((-1.0)*x13354))+x13341);
evalcond[7]=((((-1.0)*r22*sj13*x13356))+((r20*x13350))+(((-1.0)*r21*x13348*x13355))+((r21*x13342))+(((-1.0)*x13354))+((x13349*x13359))+x13341);
evalcond[8]=((((-1.0)*r02*sj13*x13356))+((x13346*x13359))+(((-1.0)*sj12*x13343))+(((-1.0)*r01*x13348*x13355))+(((-1.0)*x13347))+((r00*x13350))+((r01*x13342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13360=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13360.valid){
continue;
}
CheckValue<IkReal> x13361 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13361.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13360.value)))+(x13361.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13362=IKsin(j14);
IkReal x13363=IKcos(j14);
IkReal x13364=(sj11*sj12);
IkReal x13365=(cj13*gconst29);
IkReal x13366=((1.0)*cj11);
IkReal x13367=(gconst29*r10);
IkReal x13368=(gconst28*r11);
IkReal x13369=(gconst29*r00);
IkReal x13370=(cj12*sj11);
IkReal x13371=(gconst28*sj13);
IkReal x13372=(gconst29*r20);
IkReal x13373=(cj13*gconst28);
IkReal x13374=(gconst29*sj13);
IkReal x13375=(gconst28*r01);
IkReal x13376=(gconst28*r21);
IkReal x13377=(cj12*x13366);
IkReal x13378=((1.0)*x13363);
IkReal x13379=((1.0)*x13362);
IkReal x13380=(cj13*x13363);
IkReal x13381=(cj13*x13362);
IkReal x13382=(sj13*x13363);
evalcond[0]=(((x13362*x13376))+(((-1.0)*x13372*x13379))+(((-1.0)*r22*x13378)));
evalcond[1]=(((x13362*x13375))+(((-1.0)*x13369*x13379))+(((-1.0)*r02*x13378)));
evalcond[2]=((1.0)+((x13362*x13368))+(((-1.0)*x13367*x13379))+(((-1.0)*r12*x13378)));
evalcond[3]=(((r10*x13371))+((r11*x13374))+((r12*x13381))+((x13368*x13380))+(((-1.0)*r10*x13365*x13378)));
evalcond[4]=(((r10*x13373))+((r11*x13365))+(((-1.0)*r12*sj13*x13379))+((x13367*x13382))+(((-1.0)*sj13*x13368*x13378)));
evalcond[5]=(((r21*x13363*x13373))+((r20*x13371))+(((-1.0)*r20*x13365*x13378))+((r22*x13381))+((cj11*sj12))+((r21*x13374))+x13370);
evalcond[6]=(((r00*x13371))+((r01*x13374))+(((-1.0)*x13377))+((r02*x13381))+((r01*x13363*x13373))+x13364+(((-1.0)*r00*x13365*x13378)));
evalcond[7]=((((-1.0)*r21*x13371*x13378))+((r20*x13373))+((x13372*x13382))+(((-1.0)*x13377))+((r21*x13365))+x13364+(((-1.0)*r22*sj13*x13379)));
evalcond[8]=(((x13369*x13382))+((r01*x13365))+((r00*x13373))+(((-1.0)*r02*sj13*x13379))+(((-1.0)*r01*x13371*x13378))+(((-1.0)*sj12*x13366))+(((-1.0)*x13370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x13383=((-1.0)*pz);
sj10=0;
cj10=1.0;
j10=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13383);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13383);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13384=(r11*sj15);
IkReal x13385=((1.0)*cj15*r10);
j14eval[0]=((((-1.0)*x13385))+x13384);
j14eval[1]=((((-1.0)*cj13*x13385))+((cj13*x13384)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x13386=((-1.0)*pz);
sj10=0;
cj10=1.0;
j10=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13386);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13386);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13387=(r11*sj15);
IkReal x13388=(cj15*r10);
j14eval[0]=((((-1.0)*x13388))+x13387);
j14eval[1]=((((-1.0)*sj13*x13387))+((sj13*x13388)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x13389=((-1.0)*pz);
sj10=0;
cj10=1.0;
j10=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13389);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13389);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j14eval[0]=cj13;
j14eval[1]=r22;
j14eval[2]=(((cj13*r11*sj15))+(((-1.0)*cj13*cj15*r10)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x13390=((-1.0)*pz);
sj10=0;
cj10=1.0;
j10=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13390);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13390);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj13=0;
cj13=1.0;
j13=0;
IkReal x13391=((1.0)*cj15);
j14eval[0]=(((r11*sj15))+(((-1.0)*r10*x13391)));
j14eval[1]=((((-1.0)*r00*x13391))+((r01*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x13392=((-1.0)*pz);
sj10=0;
cj10=1.0;
j10=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13392);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13392);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj13=0;
cj13=1.0;
j13=0;
j14eval[0]=r22;
j14eval[1]=((((-1.0)*cj15*r00))+((r01*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13393=((1.0)*sj11);
CheckValue<IkReal> x13394=IKPowWithIntegerCheck(r22,-1);
if(!x13394.valid){
continue;
}
CheckValue<IkReal> x13395=IKPowWithIntegerCheck(((((-1.0)*cj15*r00))+((r01*sj15))),-1);
if(!x13395.valid){
continue;
}
if( IKabs(((x13394.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*x13393)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13395.value)*((((cj11*cj12))+(((-1.0)*sj12*x13393)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13394.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*x13393))))))+IKsqr(((x13395.value)*((((cj11*cj12))+(((-1.0)*sj12*x13393))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x13394.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*x13393))))), ((x13395.value)*((((cj11*cj12))+(((-1.0)*sj12*x13393))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13396=IKsin(j14);
IkReal x13397=IKcos(j14);
IkReal x13398=((1.0)*cj15*r10);
IkReal x13399=(sj15*x13396);
IkReal x13400=((1.0)*cj15*r00);
IkReal x13401=(sj15*x13397);
evalcond[0]=((-1.0)*r22*x13397);
evalcond[1]=(((r22*x13396))+((cj12*sj11))+((cj11*sj12)));
evalcond[2]=((((-1.0)*x13396*x13400))+((r01*x13399)));
evalcond[3]=(((r11*x13401))+(((-1.0)*x13397*x13398)));
evalcond[4]=((1.0)+((r11*x13399))+(((-1.0)*x13396*x13398)));
evalcond[5]=(((sj11*sj12))+((r01*x13401))+(((-1.0)*x13397*x13400))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13402=((1.0)*cj15);
CheckValue<IkReal> x13403=IKPowWithIntegerCheck((((r11*sj15))+(((-1.0)*r10*x13402))),-1);
if(!x13403.valid){
continue;
}
CheckValue<IkReal> x13404=IKPowWithIntegerCheck((((r01*sj15))+(((-1.0)*r00*x13402))),-1);
if(!x13404.valid){
continue;
}
if( IKabs(((-1.0)*(x13403.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13404.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13403.value)))+IKsqr(((x13404.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*(x13403.value)), ((x13404.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13405=IKsin(j14);
IkReal x13406=IKcos(j14);
IkReal x13407=((1.0)*cj15*r10);
IkReal x13408=(sj15*x13405);
IkReal x13409=((1.0)*cj15*r00);
IkReal x13410=(sj15*x13406);
evalcond[0]=((-1.0)*r22*x13406);
evalcond[1]=(((r22*x13405))+((cj12*sj11))+((cj11*sj12)));
evalcond[2]=((((-1.0)*x13405*x13409))+((r01*x13408)));
evalcond[3]=((((-1.0)*x13406*x13407))+((r11*x13410)));
evalcond[4]=((1.0)+(((-1.0)*x13405*x13407))+((r11*x13408)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x13406*x13409))+((r01*x13410))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x13411=((-1.0)*pz);
sj10=0;
cj10=1.0;
j10=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13411);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13411);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j14eval[0]=r22;
j14eval[1]=(((cj15*r00))+(((-1.0)*r01*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x13412=((-1.0)*pz);
sj10=0;
cj10=1.0;
j10=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13412);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13412);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j14eval[0]=(((r11*sj15))+(((-1.0)*cj15*r10)));
j14eval[1]=(((cj15*r00))+(((-1.0)*r01*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13413=IKPowWithIntegerCheck((((r11*sj15))+(((-1.0)*cj15*r10))),-1);
if(!x13413.valid){
continue;
}
CheckValue<IkReal> x13414=IKPowWithIntegerCheck((((cj15*r00))+(((-1.0)*r01*sj15))),-1);
if(!x13414.valid){
continue;
}
if( IKabs(((-1.0)*(x13413.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13414.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13413.value)))+IKsqr(((x13414.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*(x13413.value)), ((x13414.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13415=IKsin(j14);
IkReal x13416=IKcos(j14);
IkReal x13417=(sj15*x13415);
IkReal x13418=(cj15*x13416);
IkReal x13419=((1.0)*cj15*x13415);
IkReal x13420=((1.0)*sj15*x13416);
evalcond[0]=((-1.0)*r22*x13416);
evalcond[1]=((((-1.0)*r22*x13415))+((cj12*sj11))+((cj11*sj12)));
evalcond[2]=((((-1.0)*r00*x13419))+((r01*x13417)));
evalcond[3]=((((-1.0)*r11*x13420))+((r10*x13418)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13419))+((r11*x13417)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r01*x13420))+((r00*x13418))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13421=IKPowWithIntegerCheck(r22,-1);
if(!x13421.valid){
continue;
}
CheckValue<IkReal> x13422=IKPowWithIntegerCheck((((cj15*r00))+(((-1.0)*r01*sj15))),-1);
if(!x13422.valid){
continue;
}
if( IKabs(((x13421.value)*((((cj12*sj11))+((cj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13422.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13421.value)*((((cj12*sj11))+((cj11*sj12))))))+IKsqr(((x13422.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x13421.value)*((((cj12*sj11))+((cj11*sj12))))), ((x13422.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13423=IKsin(j14);
IkReal x13424=IKcos(j14);
IkReal x13425=(sj15*x13423);
IkReal x13426=(cj15*x13424);
IkReal x13427=((1.0)*cj15*x13423);
IkReal x13428=((1.0)*sj15*x13424);
evalcond[0]=((-1.0)*r22*x13424);
evalcond[1]=((((-1.0)*r22*x13423))+((cj12*sj11))+((cj11*sj12)));
evalcond[2]=((((-1.0)*r00*x13427))+((r01*x13425)));
evalcond[3]=((((-1.0)*r11*x13428))+((r10*x13426)));
evalcond[4]=((1.0)+((r11*x13425))+(((-1.0)*r10*x13427)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r01*x13428))+((r00*x13426))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13429=((1.0)*r10);
CheckValue<IkReal> x13430=IKPowWithIntegerCheck(cj13,-1);
if(!x13430.valid){
continue;
}
CheckValue<IkReal> x13431=IKPowWithIntegerCheck(r22,-1);
if(!x13431.valid){
continue;
}
CheckValue<IkReal> x13432=IKPowWithIntegerCheck(((((-1.0)*cj13*cj15*x13429))+((cj13*r11*sj15))),-1);
if(!x13432.valid){
continue;
}
if( IKabs(((x13430.value)*(x13431.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13432.value)*(((((-1.0)*sj13*sj15*x13429))+(((-1.0)*cj15*r11*sj13)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13430.value)*(x13431.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*sj11))))))+IKsqr(((x13432.value)*(((((-1.0)*sj13*sj15*x13429))+(((-1.0)*cj15*r11*sj13))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x13430.value)*(x13431.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*sj11))))), ((x13432.value)*(((((-1.0)*sj13*sj15*x13429))+(((-1.0)*cj15*r11*sj13))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13433=IKsin(j14);
IkReal x13434=IKcos(j14);
IkReal x13435=(sj11*sj12);
IkReal x13436=((1.0)*sj13);
IkReal x13437=((1.0)*cj11);
IkReal x13438=(r00*sj15);
IkReal x13439=(cj13*cj15);
IkReal x13440=(cj12*sj11);
IkReal x13441=((1.0)*r10);
IkReal x13442=(r10*sj13);
IkReal x13443=(cj15*sj13);
IkReal x13444=((1.0)*r00);
IkReal x13445=(cj12*x13437);
IkReal x13446=(sj15*x13434);
IkReal x13447=(r22*x13433);
IkReal x13448=(cj15*x13433);
IkReal x13449=(sj15*x13433);
evalcond[0]=((-1.0)*r22*x13434);
evalcond[1]=(x13440+((cj13*x13447))+((cj11*sj12)));
evalcond[2]=(((r01*x13449))+(((-1.0)*x13444*x13448)));
evalcond[3]=((1.0)+(((-1.0)*x13441*x13448))+((r11*x13449)));
evalcond[4]=(x13435+(((-1.0)*x13445))+(((-1.0)*x13436*x13447)));
evalcond[5]=((((-1.0)*x13434*x13439*x13441))+((cj13*r11*x13446))+((sj15*x13442))+((r11*x13443)));
evalcond[6]=(((cj15*x13434*x13442))+(((-1.0)*r11*x13436*x13446))+((r11*x13439))+((cj13*r10*sj15)));
evalcond[7]=(x13435+(((-1.0)*x13445))+(((-1.0)*x13434*x13439*x13444))+((sj13*x13438))+((r01*x13443))+((cj13*r01*x13446)));
evalcond[8]=(((r01*x13439))+(((-1.0)*sj12*x13437))+(((-1.0)*r01*x13436*x13446))+((r00*x13434*x13443))+((cj13*x13438))+(((-1.0)*x13440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13450=(cj15*r10);
IkReal x13451=((1.0)*cj13);
IkReal x13452=(r11*sj15);
CheckValue<IkReal> x13453=IKPowWithIntegerCheck((x13452+(((-1.0)*x13450))),-1);
if(!x13453.valid){
continue;
}
CheckValue<IkReal> x13454=IKPowWithIntegerCheck(((((-1.0)*sj13*x13452))+((sj13*x13450))),-1);
if(!x13454.valid){
continue;
}
if( IKabs(((-1.0)*(x13453.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13454.value)*(((((-1.0)*cj15*r11*x13451))+(((-1.0)*r10*sj15*x13451)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13453.value)))+IKsqr(((x13454.value)*(((((-1.0)*cj15*r11*x13451))+(((-1.0)*r10*sj15*x13451))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*(x13453.value)), ((x13454.value)*(((((-1.0)*cj15*r11*x13451))+(((-1.0)*r10*sj15*x13451))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13455=IKsin(j14);
IkReal x13456=IKcos(j14);
IkReal x13457=(sj11*sj12);
IkReal x13458=((1.0)*sj13);
IkReal x13459=((1.0)*cj11);
IkReal x13460=(r00*sj15);
IkReal x13461=(cj13*cj15);
IkReal x13462=(cj12*sj11);
IkReal x13463=((1.0)*r10);
IkReal x13464=(r10*sj13);
IkReal x13465=(cj15*sj13);
IkReal x13466=((1.0)*r00);
IkReal x13467=(cj12*x13459);
IkReal x13468=(sj15*x13456);
IkReal x13469=(r22*x13455);
IkReal x13470=(cj15*x13455);
IkReal x13471=(sj15*x13455);
evalcond[0]=((-1.0)*r22*x13456);
evalcond[1]=(x13462+((cj13*x13469))+((cj11*sj12)));
evalcond[2]=(((r01*x13471))+(((-1.0)*x13466*x13470)));
evalcond[3]=((1.0)+(((-1.0)*x13463*x13470))+((r11*x13471)));
evalcond[4]=(x13457+(((-1.0)*x13467))+(((-1.0)*x13458*x13469)));
evalcond[5]=(((sj15*x13464))+((r11*x13465))+((cj13*r11*x13468))+(((-1.0)*x13456*x13461*x13463)));
evalcond[6]=((((-1.0)*r11*x13458*x13468))+((cj15*x13456*x13464))+((r11*x13461))+((cj13*r10*sj15)));
evalcond[7]=(x13457+((cj13*r01*x13468))+(((-1.0)*x13467))+(((-1.0)*x13456*x13461*x13466))+((sj13*x13460))+((r01*x13465)));
evalcond[8]=((((-1.0)*r01*x13458*x13468))+((r00*x13456*x13465))+(((-1.0)*x13462))+(((-1.0)*sj12*x13459))+((cj13*x13460))+((r01*x13461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13472=((1.0)*r10);
IkReal x13473=(r11*sj15);
CheckValue<IkReal> x13474=IKPowWithIntegerCheck((x13473+(((-1.0)*cj15*x13472))),-1);
if(!x13474.valid){
continue;
}
CheckValue<IkReal> x13475=IKPowWithIntegerCheck(((((-1.0)*cj13*cj15*x13472))+((cj13*x13473))),-1);
if(!x13475.valid){
continue;
}
if( IKabs(((-1.0)*(x13474.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13475.value)*(((((-1.0)*cj15*r11*sj13))+(((-1.0)*sj13*sj15*x13472)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13474.value)))+IKsqr(((x13475.value)*(((((-1.0)*cj15*r11*sj13))+(((-1.0)*sj13*sj15*x13472))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*(x13474.value)), ((x13475.value)*(((((-1.0)*cj15*r11*sj13))+(((-1.0)*sj13*sj15*x13472))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13476=IKsin(j14);
IkReal x13477=IKcos(j14);
IkReal x13478=(sj11*sj12);
IkReal x13479=((1.0)*sj13);
IkReal x13480=((1.0)*cj11);
IkReal x13481=(r00*sj15);
IkReal x13482=(cj13*cj15);
IkReal x13483=(cj12*sj11);
IkReal x13484=((1.0)*r10);
IkReal x13485=(r10*sj13);
IkReal x13486=(cj15*sj13);
IkReal x13487=((1.0)*r00);
IkReal x13488=(cj12*x13480);
IkReal x13489=(sj15*x13477);
IkReal x13490=(r22*x13476);
IkReal x13491=(cj15*x13476);
IkReal x13492=(sj15*x13476);
evalcond[0]=((-1.0)*r22*x13477);
evalcond[1]=(x13483+((cj13*x13490))+((cj11*sj12)));
evalcond[2]=(((r01*x13492))+(((-1.0)*x13487*x13491)));
evalcond[3]=((1.0)+(((-1.0)*x13484*x13491))+((r11*x13492)));
evalcond[4]=(x13478+(((-1.0)*x13488))+(((-1.0)*x13479*x13490)));
evalcond[5]=((((-1.0)*x13477*x13482*x13484))+((cj13*r11*x13489))+((sj15*x13485))+((r11*x13486)));
evalcond[6]=(((cj15*x13477*x13485))+((cj13*r10*sj15))+((r11*x13482))+(((-1.0)*r11*x13479*x13489)));
evalcond[7]=(x13478+(((-1.0)*x13488))+((sj13*x13481))+(((-1.0)*x13477*x13482*x13487))+((r01*x13486))+((cj13*r01*x13489)));
evalcond[8]=((((-1.0)*x13483))+((cj13*x13481))+(((-1.0)*sj12*x13480))+((r00*x13477*x13486))+((r01*x13482))+(((-1.0)*r01*x13479*x13489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13493=cj15*cj15;
IkReal x13494=(r11*sj13);
IkReal x13495=(cj15*sj15);
IkReal x13496=(r10*sj13);
IkReal x13497=(cj13*r11);
IkReal x13498=(cj13*r10);
IkReal x13499=((1.0)*x13493);
CheckValue<IkReal> x13500 = IKatan2WithCheck(IkReal((((r22*sj15*x13496))+((cj15*r22*x13494)))),IkReal(((((-1.0)*r20*x13494*x13499))+(((-1.0)*r21*x13496*x13499))+((r21*x13494*x13495))+(((-1.0)*r20*x13495*x13496))+((r21*x13496)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13500.valid){
continue;
}
CheckValue<IkReal> x13501=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj13*r12*r22))+((r21*x13493*x13497))+((r21*x13495*x13498))+((r20*x13495*x13497))+(((-1.0)*r21*x13497))+(((-1.0)*r20*x13498*x13499)))),-1);
if(!x13501.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13500.value)+(((1.5707963267949)*(x13501.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13502=IKsin(j14);
IkReal x13503=IKcos(j14);
IkReal x13504=(sj11*sj12);
IkReal x13505=(cj13*r21);
IkReal x13506=((1.0)*sj13);
IkReal x13507=((1.0)*cj11);
IkReal x13508=(r00*sj15);
IkReal x13509=(cj13*cj15);
IkReal x13510=(cj12*sj11);
IkReal x13511=(sj13*sj15);
IkReal x13512=(cj15*sj13);
IkReal x13513=(cj13*sj15);
IkReal x13514=(cj12*x13507);
IkReal x13515=(sj15*x13503);
IkReal x13516=((1.0)*x13503);
IkReal x13517=(r22*x13502);
IkReal x13518=(r02*x13502);
IkReal x13519=(sj15*x13502);
IkReal x13520=(r12*x13502);
IkReal x13521=((1.0)*cj15*x13502);
evalcond[0]=(((r21*x13519))+(((-1.0)*r22*x13516))+(((-1.0)*r20*x13521)));
evalcond[1]=((((-1.0)*r00*x13521))+((r01*x13519))+(((-1.0)*r02*x13516)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13516))+(((-1.0)*r10*x13521))+((r11*x13519)));
evalcond[3]=(((r11*x13512))+((cj13*x13520))+(((-1.0)*r10*x13509*x13516))+((r10*x13511))+((r11*x13503*x13513)));
evalcond[4]=(((r10*x13503*x13512))+(((-1.0)*x13506*x13520))+(((-1.0)*r11*x13506*x13515))+((r11*x13509))+((r10*x13513)));
evalcond[5]=(((r21*x13512))+x13510+((r20*x13511))+(((-1.0)*r20*x13509*x13516))+((x13505*x13515))+((cj13*x13517))+((cj11*sj12)));
evalcond[6]=(x13504+(((-1.0)*r00*x13509*x13516))+((r01*x13503*x13513))+((sj13*x13508))+(((-1.0)*x13514))+((cj13*x13518))+((r01*x13512)));
evalcond[7]=(((cj15*x13505))+x13504+((r20*x13513))+((r20*x13503*x13512))+(((-1.0)*x13506*x13517))+(((-1.0)*r21*x13506*x13515))+(((-1.0)*x13514)));
evalcond[8]=((((-1.0)*r01*x13506*x13515))+(((-1.0)*x13510))+(((-1.0)*x13506*x13518))+((r00*x13503*x13512))+(((-1.0)*sj12*x13507))+((cj13*x13508))+((r01*x13509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13522=((1.0)*cj15);
CheckValue<IkReal> x13523=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x13522)))),-1);
if(!x13523.valid){
continue;
}
CheckValue<IkReal> x13524 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13522))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13524.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13523.value)))+(x13524.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13525=IKsin(j14);
IkReal x13526=IKcos(j14);
IkReal x13527=(sj11*sj12);
IkReal x13528=(cj13*r21);
IkReal x13529=((1.0)*sj13);
IkReal x13530=((1.0)*cj11);
IkReal x13531=(r00*sj15);
IkReal x13532=(cj13*cj15);
IkReal x13533=(cj12*sj11);
IkReal x13534=(sj13*sj15);
IkReal x13535=(cj15*sj13);
IkReal x13536=(cj13*sj15);
IkReal x13537=(cj12*x13530);
IkReal x13538=(sj15*x13526);
IkReal x13539=((1.0)*x13526);
IkReal x13540=(r22*x13525);
IkReal x13541=(r02*x13525);
IkReal x13542=(sj15*x13525);
IkReal x13543=(r12*x13525);
IkReal x13544=((1.0)*cj15*x13525);
evalcond[0]=((((-1.0)*r22*x13539))+((r21*x13542))+(((-1.0)*r20*x13544)));
evalcond[1]=(((r01*x13542))+(((-1.0)*r00*x13544))+(((-1.0)*r02*x13539)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13539))+((r11*x13542))+(((-1.0)*r10*x13544)));
evalcond[3]=(((cj13*x13543))+(((-1.0)*r10*x13532*x13539))+((r10*x13534))+((r11*x13535))+((r11*x13526*x13536)));
evalcond[4]=((((-1.0)*r11*x13529*x13538))+((r10*x13526*x13535))+(((-1.0)*x13529*x13543))+((r10*x13536))+((r11*x13532)));
evalcond[5]=(x13533+((cj13*x13540))+((r20*x13534))+((x13528*x13538))+(((-1.0)*r20*x13532*x13539))+((r21*x13535))+((cj11*sj12)));
evalcond[6]=(x13527+((cj13*x13541))+((r01*x13526*x13536))+(((-1.0)*r00*x13532*x13539))+(((-1.0)*x13537))+((r01*x13535))+((sj13*x13531)));
evalcond[7]=(((r20*x13526*x13535))+x13527+((r20*x13536))+(((-1.0)*x13537))+(((-1.0)*x13529*x13540))+(((-1.0)*r21*x13529*x13538))+((cj15*x13528)));
evalcond[8]=((((-1.0)*x13533))+(((-1.0)*sj12*x13530))+((r00*x13526*x13535))+((cj13*x13531))+(((-1.0)*x13529*x13541))+((r01*x13532))+(((-1.0)*r01*x13529*x13538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13545 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj15*r00))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13545.valid){
continue;
}
CheckValue<IkReal> x13546=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x13546.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13545.value)+(((1.5707963267949)*(x13546.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13547=IKsin(j14);
IkReal x13548=IKcos(j14);
IkReal x13549=(sj11*sj12);
IkReal x13550=(cj13*r21);
IkReal x13551=((1.0)*sj13);
IkReal x13552=((1.0)*cj11);
IkReal x13553=(r00*sj15);
IkReal x13554=(cj13*cj15);
IkReal x13555=(cj12*sj11);
IkReal x13556=(sj13*sj15);
IkReal x13557=(cj15*sj13);
IkReal x13558=(cj13*sj15);
IkReal x13559=(cj12*x13552);
IkReal x13560=(sj15*x13548);
IkReal x13561=((1.0)*x13548);
IkReal x13562=(r22*x13547);
IkReal x13563=(r02*x13547);
IkReal x13564=(sj15*x13547);
IkReal x13565=(r12*x13547);
IkReal x13566=((1.0)*cj15*x13547);
evalcond[0]=(((r21*x13564))+(((-1.0)*r20*x13566))+(((-1.0)*r22*x13561)));
evalcond[1]=(((r01*x13564))+(((-1.0)*r02*x13561))+(((-1.0)*r00*x13566)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13566))+((r11*x13564))+(((-1.0)*r12*x13561)));
evalcond[3]=((((-1.0)*r10*x13554*x13561))+((r10*x13556))+((r11*x13557))+((r11*x13548*x13558))+((cj13*x13565)));
evalcond[4]=(((r10*x13558))+((r11*x13554))+((r10*x13548*x13557))+(((-1.0)*x13551*x13565))+(((-1.0)*r11*x13551*x13560)));
evalcond[5]=(x13555+(((-1.0)*r20*x13554*x13561))+((r21*x13557))+((r20*x13556))+((x13550*x13560))+((cj11*sj12))+((cj13*x13562)));
evalcond[6]=(x13549+((r01*x13548*x13558))+((sj13*x13553))+(((-1.0)*x13559))+((r01*x13557))+(((-1.0)*r00*x13554*x13561))+((cj13*x13563)));
evalcond[7]=(x13549+(((-1.0)*x13559))+(((-1.0)*r21*x13551*x13560))+((r20*x13548*x13557))+(((-1.0)*x13551*x13562))+((cj15*x13550))+((r20*x13558)));
evalcond[8]=((((-1.0)*sj12*x13552))+(((-1.0)*r01*x13551*x13560))+((cj13*x13553))+((r01*x13554))+(((-1.0)*x13551*x13563))+((r00*x13548*x13557))+(((-1.0)*x13555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x13567=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x13567;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x13567);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x13568=((1.0)*cj15);
IkReal x13569=((((-1.0)*r20*sj15))+(((-1.0)*r21*x13568)));
j14eval[0]=x13569;
j14eval[1]=IKsign(x13569);
j14eval[2]=((IKabs(r02))+(IKabs((((r01*sj15))+(((-1.0)*r00*x13568))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x13570=cj15*cj15;
IkReal x13571=(cj13*r21);
IkReal x13572=(cj15*sj15);
IkReal x13573=(cj13*r20);
IkReal x13574=((((-1.0)*r11*x13571))+(((-1.0)*r10*x13570*x13573))+((r11*x13572*x13573))+(((-1.0)*cj13*r12*r22))+((r11*x13570*x13571))+((r10*x13571*x13572)));
j14eval[0]=x13574;
j14eval[1]=IKsign(x13574);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x13575=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x13575;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x13575);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x13576=((1.0)*cj15);
IkReal x13577=((((-1.0)*r21*x13576))+(((-1.0)*r20*sj15)));
j14eval[0]=x13577;
j14eval[1]=IKsign(x13577);
j14eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x13576))+((r01*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x13578=r11*r11;
IkReal x13579=cj15*cj15;
IkReal x13580=(cj15*r10);
IkReal x13581=(r11*sj15);
IkReal x13582=(((x13578*x13579))+(((2.0)*x13580*x13581))+(((-1.0)*x13578))+(((-1.0)*(r12*r12)))+(((-1.0)*x13579*(r10*r10))));
j14eval[0]=x13582;
j14eval[1]=((IKabs(r12))+(IKabs((x13580+(((-1.0)*x13581))))));
j14eval[2]=IKsign(x13582);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13583=r11*r11;
IkReal x13584=cj15*cj15;
IkReal x13585=(cj15*r10);
IkReal x13586=(r11*sj15);
CheckValue<IkReal> x13587 = IKatan2WithCheck(IkReal((x13585+(((-1.0)*x13586)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13587.valid){
continue;
}
CheckValue<IkReal> x13588=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13584*(r10*r10)))+((x13583*x13584))+(((-1.0)*x13583))+(((-1.0)*(r12*r12)))+(((2.0)*x13585*x13586)))),-1);
if(!x13588.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13587.value)+(((1.5707963267949)*(x13588.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13589=IKsin(j14);
IkReal x13590=IKcos(j14);
IkReal x13591=(r11*sj15);
IkReal x13592=(cj15*r10);
IkReal x13593=(cj15*r00);
IkReal x13594=(r21*sj15);
IkReal x13595=(r01*sj15);
IkReal x13596=(cj15*r20);
IkReal x13597=((1.0)*x13590);
IkReal x13598=((1.0)*x13589);
evalcond[0]=((((-1.0)*x13596*x13598))+((x13589*x13594))+(((-1.0)*r22*x13597)));
evalcond[1]=(((x13589*x13595))+(((-1.0)*x13593*x13598))+(((-1.0)*r02*x13597)));
evalcond[2]=((((-1.0)*r12*x13598))+((x13590*x13592))+(((-1.0)*x13591*x13597)));
evalcond[3]=((-1.0)+((x13589*x13591))+(((-1.0)*x13592*x13598))+(((-1.0)*r12*x13597)));
evalcond[4]=(((cj12*sj11))+((x13590*x13593))+((cj11*sj12))+(((-1.0)*r02*x13598))+(((-1.0)*x13595*x13597)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r22*x13598))+((x13590*x13596))+(((-1.0)*x13594*x13597))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13599=((1.0)*cj15);
CheckValue<IkReal> x13600=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15))+(((-1.0)*r21*x13599)))),-1);
if(!x13600.valid){
continue;
}
CheckValue<IkReal> x13601 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x13599))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13601.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13600.value)))+(x13601.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13602=IKsin(j14);
IkReal x13603=IKcos(j14);
IkReal x13604=(r11*sj15);
IkReal x13605=(cj15*r10);
IkReal x13606=(cj15*r00);
IkReal x13607=(r21*sj15);
IkReal x13608=(r01*sj15);
IkReal x13609=(cj15*r20);
IkReal x13610=((1.0)*x13603);
IkReal x13611=((1.0)*x13602);
evalcond[0]=((((-1.0)*x13609*x13611))+(((-1.0)*r22*x13610))+((x13602*x13607)));
evalcond[1]=((((-1.0)*x13606*x13611))+(((-1.0)*r02*x13610))+((x13602*x13608)));
evalcond[2]=(((x13603*x13605))+(((-1.0)*x13604*x13610))+(((-1.0)*r12*x13611)));
evalcond[3]=((-1.0)+(((-1.0)*x13605*x13611))+((x13602*x13604))+(((-1.0)*r12*x13610)));
evalcond[4]=((((-1.0)*x13608*x13610))+((x13603*x13606))+(((-1.0)*r02*x13611))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x13603*x13609))+(((-1.0)*x13607*x13610))+(((-1.0)*cj11*cj12))+(((-1.0)*r22*x13611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13612 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13612.valid){
continue;
}
CheckValue<IkReal> x13613=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x13613.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13612.value)+(((1.5707963267949)*(x13613.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13614=IKsin(j14);
IkReal x13615=IKcos(j14);
IkReal x13616=(r11*sj15);
IkReal x13617=(cj15*r10);
IkReal x13618=(cj15*r00);
IkReal x13619=(r21*sj15);
IkReal x13620=(r01*sj15);
IkReal x13621=(cj15*r20);
IkReal x13622=((1.0)*x13615);
IkReal x13623=((1.0)*x13614);
evalcond[0]=((((-1.0)*x13621*x13623))+((x13614*x13619))+(((-1.0)*r22*x13622)));
evalcond[1]=((((-1.0)*x13618*x13623))+((x13614*x13620))+(((-1.0)*r02*x13622)));
evalcond[2]=((((-1.0)*x13616*x13622))+((x13615*x13617))+(((-1.0)*r12*x13623)));
evalcond[3]=((-1.0)+((x13614*x13616))+(((-1.0)*x13617*x13623))+(((-1.0)*r12*x13622)));
evalcond[4]=((((-1.0)*x13620*x13622))+((x13615*x13618))+((cj12*sj11))+(((-1.0)*r02*x13623))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x13615*x13621))+(((-1.0)*r22*x13623))+(((-1.0)*x13619*x13622))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x13624=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x13624;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x13624);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x13625=((1.0)*cj15);
IkReal x13626=((((-1.0)*r20*sj15))+(((-1.0)*r21*x13625)));
j14eval[0]=x13626;
j14eval[1]=IKsign(x13626);
j14eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x13625))+((r01*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x13627=cj15*cj15;
IkReal x13628=r11*r11;
IkReal x13629=(r11*sj15);
IkReal x13630=(cj15*r10);
IkReal x13631=((r12*r12)+x13628+(((-1.0)*x13627*x13628))+((x13627*(r10*r10)))+(((-2.0)*x13629*x13630)));
j14eval[0]=x13631;
j14eval[1]=((IKabs(((((-1.0)*x13630))+x13629)))+(IKabs(r12)));
j14eval[2]=IKsign(x13631);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13632=cj15*cj15;
IkReal x13633=r11*r11;
IkReal x13634=(r11*sj15);
IkReal x13635=(cj15*r10);
CheckValue<IkReal> x13636 = IKatan2WithCheck(IkReal(((((-1.0)*x13635))+x13634)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13636.valid){
continue;
}
CheckValue<IkReal> x13637=IKPowWithIntegerCheck(IKsign(((r12*r12)+x13633+(((-1.0)*x13632*x13633))+((x13632*(r10*r10)))+(((-2.0)*x13634*x13635)))),-1);
if(!x13637.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13636.value)+(((1.5707963267949)*(x13637.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13638=IKcos(j14);
IkReal x13639=IKsin(j14);
IkReal x13640=(cj15*r20);
IkReal x13641=(cj15*r10);
IkReal x13642=(cj15*r00);
IkReal x13643=((1.0)*x13638);
IkReal x13644=(sj15*x13638);
IkReal x13645=((1.0)*x13639);
IkReal x13646=(sj15*x13639);
evalcond[0]=(((r12*x13639))+(((-1.0)*x13641*x13643))+((r11*x13644)));
evalcond[1]=((((-1.0)*x13640*x13645))+(((-1.0)*r22*x13643))+((r21*x13646)));
evalcond[2]=(((r01*x13646))+(((-1.0)*r02*x13643))+(((-1.0)*x13642*x13645)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13643))+(((-1.0)*x13641*x13645))+((r11*x13646)));
evalcond[4]=(((r02*x13639))+((r01*x13644))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*x13642*x13643)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x13640*x13643))+((r22*x13639))+(((-1.0)*cj11*cj12))+((r21*x13644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13647=((1.0)*cj15);
CheckValue<IkReal> x13648=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15))+(((-1.0)*r21*x13647)))),-1);
if(!x13648.valid){
continue;
}
CheckValue<IkReal> x13649 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj15))+(((-1.0)*r00*x13647)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13649.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13648.value)))+(x13649.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13650=IKcos(j14);
IkReal x13651=IKsin(j14);
IkReal x13652=(cj15*r20);
IkReal x13653=(cj15*r10);
IkReal x13654=(cj15*r00);
IkReal x13655=((1.0)*x13650);
IkReal x13656=(sj15*x13650);
IkReal x13657=((1.0)*x13651);
IkReal x13658=(sj15*x13651);
evalcond[0]=(((r12*x13651))+(((-1.0)*x13653*x13655))+((r11*x13656)));
evalcond[1]=((((-1.0)*r22*x13655))+((r21*x13658))+(((-1.0)*x13652*x13657)));
evalcond[2]=(((r01*x13658))+(((-1.0)*r02*x13655))+(((-1.0)*x13654*x13657)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13655))+(((-1.0)*x13653*x13657))+((r11*x13658)));
evalcond[4]=(((r01*x13656))+(((-1.0)*x13654*x13655))+((r02*x13651))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r21*x13656))+((r22*x13651))+(((-1.0)*x13652*x13655))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13659 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13659.valid){
continue;
}
CheckValue<IkReal> x13660=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x13660.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13659.value)+(((1.5707963267949)*(x13660.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13661=IKcos(j14);
IkReal x13662=IKsin(j14);
IkReal x13663=(cj15*r20);
IkReal x13664=(cj15*r10);
IkReal x13665=(cj15*r00);
IkReal x13666=((1.0)*x13661);
IkReal x13667=(sj15*x13661);
IkReal x13668=((1.0)*x13662);
IkReal x13669=(sj15*x13662);
evalcond[0]=(((r12*x13662))+((r11*x13667))+(((-1.0)*x13664*x13666)));
evalcond[1]=((((-1.0)*r22*x13666))+(((-1.0)*x13663*x13668))+((r21*x13669)));
evalcond[2]=(((r01*x13669))+(((-1.0)*r02*x13666))+(((-1.0)*x13665*x13668)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13666))+((r11*x13669))+(((-1.0)*x13664*x13668)));
evalcond[4]=(((r02*x13662))+((r01*x13667))+((cj12*sj11))+(((-1.0)*x13665*x13666))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r22*x13662))+(((-1.0)*x13663*x13666))+((r21*x13667))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13671 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13671)==0){
continue;
}
IkReal x13670=pow(x13671,-0.5);
CheckValue<IkReal> x13672 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13672.valid){
continue;
}
IkReal gconst36=((-1.0)*(x13672.value));
IkReal gconst37=((-1.0)*r01*x13670);
IkReal gconst38=(r00*x13670);
CheckValue<IkReal> x13673 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13673.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13673.value)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
CheckValue<IkReal> x13676 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13676.valid){
continue;
}
IkReal x13674=((-1.0)*(x13676.value));
IkReal x13675=x13670;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj15=gconst37;
cj15=gconst38;
j15=x13674;
IkReal gconst36=x13674;
IkReal gconst37=((-1.0)*r01*x13675);
IkReal gconst38=(r00*x13675);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
CheckValue<IkReal> x13679 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13679.valid){
continue;
}
IkReal x13677=((-1.0)*(x13679.value));
IkReal x13678=x13670;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj15=gconst37;
cj15=gconst38;
j15=x13677;
IkReal gconst36=x13677;
IkReal gconst37=((-1.0)*r01*x13678);
IkReal gconst38=(r00*x13678);
CheckValue<IkReal> x13687=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13687.valid){
continue;
}
IkReal x13680=x13687.value;
IkReal x13681=(sj13*x13680);
IkReal x13682=(r10*x13681);
IkReal x13683=(r20*x13681);
IkReal x13684=(r21*x13681);
IkReal x13685=(r11*x13681);
IkReal x13686=(r00*r01*x13681);
j14eval[0]=IKsign((((r20*x13682*(r00*r00)))+((r11*x13684*(r01*r01)))+((r12*r22*sj13))+((r00*r01*r21*x13682))+((r00*r01*r11*x13683))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13688=gconst37*gconst37;
IkReal x13689=gconst38*gconst38;
IkReal x13690=(cj13*r21);
IkReal x13691=((1.0)*r11);
IkReal x13692=((1.0)*r20);
IkReal x13693=(r21*sj13);
IkReal x13694=(r22*sj13);
IkReal x13695=(gconst37*gconst38*r10);
IkReal x13696=(gconst37*gconst38*r11);
CheckValue<IkReal> x13697 = IKatan2WithCheck(IkReal((((gconst37*r10*x13694))+((gconst38*r11*x13694)))),IkReal(((((-1.0)*sj13*x13692*x13695))+((r10*x13688*x13693))+(((-1.0)*r20*sj13*x13689*x13691))+((x13693*x13696)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13697.valid){
continue;
}
CheckValue<IkReal> x13698=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj13*r12*r22))+(((-1.0)*cj13*r10*x13689*x13692))+((cj13*r20*x13696))+(((-1.0)*x13688*x13690*x13691))+((x13690*x13695)))),-1);
if(!x13698.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13697.value)+(((1.5707963267949)*(x13698.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13699=IKsin(j14);
IkReal x13700=IKcos(j14);
IkReal x13701=(cj12*sj11);
IkReal x13702=(cj11*sj12);
IkReal x13703=(cj11*cj12);
IkReal x13704=(gconst38*r20);
IkReal x13705=(gconst38*sj13);
IkReal x13706=(cj13*gconst37);
IkReal x13707=(gconst37*sj13);
IkReal x13708=(sj11*sj12);
IkReal x13709=(gconst38*r00);
IkReal x13710=(cj13*gconst38);
IkReal x13711=((1.0)*x13700);
IkReal x13712=((1.0)*x13699);
IkReal x13713=(cj13*x13699);
IkReal x13714=(gconst37*x13699);
IkReal x13715=(x13701+x13702);
evalcond[0]=(((r21*x13714))+(((-1.0)*r22*x13711))+(((-1.0)*x13704*x13712)));
evalcond[1]=((((-1.0)*x13709*x13712))+((r01*x13714))+(((-1.0)*r02*x13711)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13711))+(((-1.0)*gconst38*r10*x13712))+((r11*x13714)));
evalcond[3]=(((r12*x13713))+((r10*x13707))+((r11*x13700*x13706))+((r11*x13705))+(((-1.0)*r10*x13710*x13711)));
evalcond[4]=(((r10*x13700*x13705))+(((-1.0)*r12*sj13*x13712))+((r10*x13706))+(((-1.0)*r11*x13707*x13711))+((r11*x13710)));
evalcond[5]=(((r21*x13705))+((r20*x13707))+x13715+((r21*x13700*x13706))+((r22*x13713))+(((-1.0)*cj13*x13704*x13711)));
evalcond[6]=(((r01*x13700*x13706))+x13703+(((-1.0)*x13708))+(((-1.0)*cj13*x13709*x13711))+((r00*x13707))+((r01*x13705))+((r02*x13713)));
evalcond[7]=(x13715+(((-1.0)*r01*x13707*x13711))+(((-1.0)*r02*sj13*x13712))+((r00*x13706))+((r01*x13710))+((r00*x13700*x13705)));
evalcond[8]=(((r21*x13710))+((r20*x13706))+x13708+(((-1.0)*x13703))+(((-1.0)*r21*x13707*x13711))+((sj13*x13700*x13704))+(((-1.0)*r22*sj13*x13712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13716=gconst38*gconst38;
IkReal x13717=gconst37*gconst37;
IkReal x13718=(r20*sj13);
IkReal x13719=((1.0)*r11);
IkReal x13720=(gconst37*gconst38);
IkReal x13721=(cj13*r20);
IkReal x13722=((1.0)*r10);
IkReal x13723=(r11*r21);
IkReal x13724=(cj13*r10);
CheckValue<IkReal> x13725 = IKatan2WithCheck(IkReal((((cj13*gconst38*r11*r22))+((gconst37*r22*x13724)))),IkReal((((cj13*x13720*x13723))+((r21*x13717*x13724))+(((-1.0)*x13720*x13721*x13722))+(((-1.0)*x13716*x13719*x13721)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13725.valid){
continue;
}
CheckValue<IkReal> x13726=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj13*x13720*x13722))+((sj13*x13717*x13723))+((r10*x13716*x13718))+((r12*r22*sj13))+(((-1.0)*x13718*x13719*x13720)))),-1);
if(!x13726.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13725.value)+(((1.5707963267949)*(x13726.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13727=IKsin(j14);
IkReal x13728=IKcos(j14);
IkReal x13729=(cj12*sj11);
IkReal x13730=(cj11*sj12);
IkReal x13731=(cj11*cj12);
IkReal x13732=(gconst38*r20);
IkReal x13733=(gconst38*sj13);
IkReal x13734=(cj13*gconst37);
IkReal x13735=(gconst37*sj13);
IkReal x13736=(sj11*sj12);
IkReal x13737=(gconst38*r00);
IkReal x13738=(cj13*gconst38);
IkReal x13739=((1.0)*x13728);
IkReal x13740=((1.0)*x13727);
IkReal x13741=(cj13*x13727);
IkReal x13742=(gconst37*x13727);
IkReal x13743=(x13730+x13729);
evalcond[0]=((((-1.0)*r22*x13739))+(((-1.0)*x13732*x13740))+((r21*x13742)));
evalcond[1]=(((r01*x13742))+(((-1.0)*r02*x13739))+(((-1.0)*x13737*x13740)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13739))+(((-1.0)*gconst38*r10*x13740))+((r11*x13742)));
evalcond[3]=(((r10*x13735))+((r11*x13728*x13734))+((r11*x13733))+((r12*x13741))+(((-1.0)*r10*x13738*x13739)));
evalcond[4]=(((r10*x13734))+((r11*x13738))+(((-1.0)*r12*sj13*x13740))+(((-1.0)*r11*x13735*x13739))+((r10*x13728*x13733)));
evalcond[5]=((((-1.0)*cj13*x13732*x13739))+((r21*x13728*x13734))+x13743+((r21*x13733))+((r20*x13735))+((r22*x13741)));
evalcond[6]=(((r00*x13735))+x13731+((r01*x13728*x13734))+((r02*x13741))+(((-1.0)*cj13*x13737*x13739))+(((-1.0)*x13736))+((r01*x13733)));
evalcond[7]=(((r00*x13734))+x13743+(((-1.0)*r01*x13735*x13739))+((r01*x13738))+((r00*x13728*x13733))+(((-1.0)*r02*sj13*x13740)));
evalcond[8]=(x13736+(((-1.0)*r21*x13735*x13739))+((r21*x13738))+((r20*x13734))+(((-1.0)*r22*sj13*x13740))+(((-1.0)*x13731))+((sj13*x13728*x13732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13744=((1.0)*gconst38);
CheckValue<IkReal> x13745 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x13744))+((gconst37*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13745.valid){
continue;
}
CheckValue<IkReal> x13746=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x13744)))),-1);
if(!x13746.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13745.value)+(((1.5707963267949)*(x13746.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13747=IKsin(j14);
IkReal x13748=IKcos(j14);
IkReal x13749=(cj12*sj11);
IkReal x13750=(cj11*sj12);
IkReal x13751=(cj11*cj12);
IkReal x13752=(gconst38*r20);
IkReal x13753=(gconst38*sj13);
IkReal x13754=(cj13*gconst37);
IkReal x13755=(gconst37*sj13);
IkReal x13756=(sj11*sj12);
IkReal x13757=(gconst38*r00);
IkReal x13758=(cj13*gconst38);
IkReal x13759=((1.0)*x13748);
IkReal x13760=((1.0)*x13747);
IkReal x13761=(cj13*x13747);
IkReal x13762=(gconst37*x13747);
IkReal x13763=(x13750+x13749);
evalcond[0]=((((-1.0)*x13752*x13760))+(((-1.0)*r22*x13759))+((r21*x13762)));
evalcond[1]=((((-1.0)*x13757*x13760))+((r01*x13762))+(((-1.0)*r02*x13759)));
evalcond[2]=((-1.0)+((r11*x13762))+(((-1.0)*r12*x13759))+(((-1.0)*gconst38*r10*x13760)));
evalcond[3]=(((r11*x13753))+(((-1.0)*r10*x13758*x13759))+((r11*x13748*x13754))+((r10*x13755))+((r12*x13761)));
evalcond[4]=(((r11*x13758))+((r10*x13754))+((r10*x13748*x13753))+(((-1.0)*r12*sj13*x13760))+(((-1.0)*r11*x13755*x13759)));
evalcond[5]=(((r21*x13753))+x13763+((r21*x13748*x13754))+((r20*x13755))+((r22*x13761))+(((-1.0)*cj13*x13752*x13759)));
evalcond[6]=(x13751+(((-1.0)*x13756))+(((-1.0)*cj13*x13757*x13759))+((r01*x13748*x13754))+((r00*x13755))+((r01*x13753))+((r02*x13761)));
evalcond[7]=(x13763+((r00*x13748*x13753))+(((-1.0)*r01*x13755*x13759))+(((-1.0)*r02*sj13*x13760))+((r00*x13754))+((r01*x13758)));
evalcond[8]=(((r21*x13758))+x13756+(((-1.0)*x13751))+(((-1.0)*r21*x13755*x13759))+((r20*x13754))+((sj13*x13748*x13752))+(((-1.0)*r22*sj13*x13760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13765 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13765)==0){
continue;
}
IkReal x13764=pow(x13765,-0.5);
CheckValue<IkReal> x13766 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13766.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x13766.value))));
IkReal gconst40=((1.0)*r01*x13764);
IkReal gconst41=((-1.0)*r00*x13764);
CheckValue<IkReal> x13767 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13767.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13767.value)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
CheckValue<IkReal> x13770 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13770.valid){
continue;
}
IkReal x13768=((1.0)*(x13770.value));
IkReal x13769=x13764;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj15=gconst40;
cj15=gconst41;
j15=((3.14159265)+(((-1.0)*x13768)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x13768)));
IkReal gconst40=((1.0)*r01*x13769);
IkReal gconst41=((-1.0)*r00*x13769);
j14eval[0]=0;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
CheckValue<IkReal> x13773 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13773.valid){
continue;
}
IkReal x13771=((1.0)*(x13773.value));
IkReal x13772=x13764;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj15=gconst40;
cj15=gconst41;
j15=((3.14159265)+(((-1.0)*x13771)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x13771)));
IkReal gconst40=((1.0)*r01*x13772);
IkReal gconst41=((-1.0)*r00*x13772);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13774=gconst40*gconst40;
IkReal x13775=gconst41*gconst41;
IkReal x13776=(cj13*r20);
IkReal x13777=(gconst41*r11);
IkReal x13778=(r20*sj13);
IkReal x13779=(r22*sj13);
IkReal x13780=(gconst40*r10);
IkReal x13781=(r21*sj13);
IkReal x13782=((1.0)*cj13);
IkReal x13783=((1.0)*x13775);
CheckValue<IkReal> x13784=IKPowWithIntegerCheck(IKsign((((gconst40*x13776*x13777))+(((-1.0)*r11*r21*x13774*x13782))+(((-1.0)*r12*r22*x13782))+((cj13*gconst41*r21*x13780))+(((-1.0)*r10*x13776*x13783)))),-1);
if(!x13784.valid){
continue;
}
CheckValue<IkReal> x13785 = IKatan2WithCheck(IkReal((((x13779*x13780))+((x13777*x13779)))),IkReal(((((-1.0)*r11*x13778*x13783))+((gconst40*x13777*x13781))+((r10*x13774*x13781))+(((-1.0)*gconst41*x13778*x13780)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13785.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13784.value)))+(x13785.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13786=IKsin(j14);
IkReal x13787=IKcos(j14);
IkReal x13788=(cj12*sj11);
IkReal x13789=(cj11*sj12);
IkReal x13790=(cj11*cj12);
IkReal x13791=(cj13*gconst41);
IkReal x13792=(cj13*gconst40);
IkReal x13793=((1.0)*sj13);
IkReal x13794=(r21*sj13);
IkReal x13795=(sj11*sj12);
IkReal x13796=(gconst40*sj13);
IkReal x13797=(gconst41*sj13);
IkReal x13798=((1.0)*x13787);
IkReal x13799=(gconst40*x13786);
IkReal x13800=(r22*x13786);
IkReal x13801=(r02*x13786);
IkReal x13802=(r12*x13786);
IkReal x13803=(x13788+x13789);
IkReal x13804=((1.0)*gconst41*x13786);
IkReal x13805=(x13787*x13797);
evalcond[0]=(((r21*x13799))+(((-1.0)*r22*x13798))+(((-1.0)*r20*x13804)));
evalcond[1]=((((-1.0)*r02*x13798))+((r01*x13799))+(((-1.0)*r00*x13804)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x13804))+((r11*x13799))+(((-1.0)*r12*x13798)));
evalcond[3]=(((cj13*x13802))+(((-1.0)*r10*x13791*x13798))+((r11*x13787*x13792))+((r11*x13797))+((r10*x13796)));
evalcond[4]=((((-1.0)*gconst40*r11*x13787*x13793))+(((-1.0)*x13793*x13802))+((r11*x13791))+((r10*x13792))+((r10*x13805)));
evalcond[5]=((((-1.0)*r20*x13791*x13798))+((gconst41*x13794))+x13803+((cj13*x13800))+((r21*x13787*x13792))+((r20*x13796)));
evalcond[6]=(((r01*x13797))+((r00*x13796))+x13790+((cj13*x13801))+(((-1.0)*r00*x13791*x13798))+(((-1.0)*x13795))+((r01*x13787*x13792)));
evalcond[7]=(((r01*x13791))+((r00*x13792))+((r00*x13805))+x13803+(((-1.0)*x13793*x13801))+(((-1.0)*gconst40*r01*x13787*x13793)));
evalcond[8]=((((-1.0)*gconst40*r21*x13787*x13793))+x13795+(((-1.0)*x13793*x13800))+(((-1.0)*x13790))+((r21*x13791))+((r20*x13792))+((r20*x13805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13806=((1.0)*gconst41);
CheckValue<IkReal> x13807=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst40*r20))+(((-1.0)*r21*x13806)))),-1);
if(!x13807.valid){
continue;
}
CheckValue<IkReal> x13808 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst40*r01))+(((-1.0)*r00*x13806)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13808.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13807.value)))+(x13808.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13809=IKsin(j14);
IkReal x13810=IKcos(j14);
IkReal x13811=(cj12*sj11);
IkReal x13812=(cj11*sj12);
IkReal x13813=(cj11*cj12);
IkReal x13814=(cj13*gconst41);
IkReal x13815=(cj13*gconst40);
IkReal x13816=((1.0)*sj13);
IkReal x13817=(r21*sj13);
IkReal x13818=(sj11*sj12);
IkReal x13819=(gconst40*sj13);
IkReal x13820=(gconst41*sj13);
IkReal x13821=((1.0)*x13810);
IkReal x13822=(gconst40*x13809);
IkReal x13823=(r22*x13809);
IkReal x13824=(r02*x13809);
IkReal x13825=(r12*x13809);
IkReal x13826=(x13811+x13812);
IkReal x13827=((1.0)*gconst41*x13809);
IkReal x13828=(x13810*x13820);
evalcond[0]=((((-1.0)*r20*x13827))+(((-1.0)*r22*x13821))+((r21*x13822)));
evalcond[1]=(((r01*x13822))+(((-1.0)*r02*x13821))+(((-1.0)*r00*x13827)));
evalcond[2]=((-1.0)+((r11*x13822))+(((-1.0)*r10*x13827))+(((-1.0)*r12*x13821)));
evalcond[3]=(((r10*x13819))+((r11*x13820))+((r11*x13810*x13815))+((cj13*x13825))+(((-1.0)*r10*x13814*x13821)));
evalcond[4]=(((r11*x13814))+((r10*x13815))+((r10*x13828))+(((-1.0)*x13816*x13825))+(((-1.0)*gconst40*r11*x13810*x13816)));
evalcond[5]=(((gconst41*x13817))+x13826+((r21*x13810*x13815))+((cj13*x13823))+((r20*x13819))+(((-1.0)*r20*x13814*x13821)));
evalcond[6]=(((r01*x13810*x13815))+(((-1.0)*r00*x13814*x13821))+((r01*x13820))+x13813+((r00*x13819))+(((-1.0)*x13818))+((cj13*x13824)));
evalcond[7]=((((-1.0)*gconst40*r01*x13810*x13816))+x13826+((r00*x13815))+((r01*x13814))+((r00*x13828))+(((-1.0)*x13816*x13824)));
evalcond[8]=(x13818+((r21*x13814))+(((-1.0)*x13813))+(((-1.0)*gconst40*r21*x13810*x13816))+((r20*x13828))+(((-1.0)*x13816*x13823))+((r20*x13815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13829 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13829.valid){
continue;
}
CheckValue<IkReal> x13830=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x13830.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13829.value)+(((1.5707963267949)*(x13830.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13831=IKsin(j14);
IkReal x13832=IKcos(j14);
IkReal x13833=(cj12*sj11);
IkReal x13834=(cj11*sj12);
IkReal x13835=(cj11*cj12);
IkReal x13836=(cj13*gconst41);
IkReal x13837=(cj13*gconst40);
IkReal x13838=((1.0)*sj13);
IkReal x13839=(r21*sj13);
IkReal x13840=(sj11*sj12);
IkReal x13841=(gconst40*sj13);
IkReal x13842=(gconst41*sj13);
IkReal x13843=((1.0)*x13832);
IkReal x13844=(gconst40*x13831);
IkReal x13845=(r22*x13831);
IkReal x13846=(r02*x13831);
IkReal x13847=(r12*x13831);
IkReal x13848=(x13834+x13833);
IkReal x13849=((1.0)*gconst41*x13831);
IkReal x13850=(x13832*x13842);
evalcond[0]=(((r21*x13844))+(((-1.0)*r22*x13843))+(((-1.0)*r20*x13849)));
evalcond[1]=((((-1.0)*r02*x13843))+(((-1.0)*r00*x13849))+((r01*x13844)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13843))+(((-1.0)*r10*x13849))+((r11*x13844)));
evalcond[3]=(((cj13*x13847))+((r11*x13832*x13837))+((r11*x13842))+(((-1.0)*r10*x13836*x13843))+((r10*x13841)));
evalcond[4]=((((-1.0)*x13838*x13847))+(((-1.0)*gconst40*r11*x13832*x13838))+((r11*x13836))+((r10*x13837))+((r10*x13850)));
evalcond[5]=(((cj13*x13845))+x13848+((r21*x13832*x13837))+(((-1.0)*r20*x13836*x13843))+((gconst41*x13839))+((r20*x13841)));
evalcond[6]=(((cj13*x13846))+x13835+(((-1.0)*r00*x13836*x13843))+((r01*x13832*x13837))+(((-1.0)*x13840))+((r01*x13842))+((r00*x13841)));
evalcond[7]=(((r01*x13836))+((r00*x13850))+(((-1.0)*x13838*x13846))+x13848+(((-1.0)*gconst40*r01*x13832*x13838))+((r00*x13837)));
evalcond[8]=((((-1.0)*x13838*x13845))+x13840+((r21*x13836))+((r20*x13850))+(((-1.0)*gconst40*r21*x13832*x13838))+((r20*x13837))+(((-1.0)*x13835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x13851=((-1.0)*px);
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13851);
rxp1_1=(px*r21);
rxp1_2=(r11*x13851);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13852=(r11*sj15);
IkReal x13853=((1.0)*cj15*r10);
j14eval[0]=(x13852+(((-1.0)*x13853)));
j14eval[1]=(((cj13*x13852))+(((-1.0)*cj13*x13853)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x13854=((-1.0)*px);
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13854);
rxp1_1=(px*r21);
rxp1_2=(r11*x13854);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13855=(r11*sj15);
IkReal x13856=(cj15*r10);
j14eval[0]=((((-1.0)*x13856))+x13855);
j14eval[1]=((((-1.0)*sj13*x13855))+((sj13*x13856)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x13857=((-1.0)*px);
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13857);
rxp1_1=(px*r21);
rxp1_2=(r11*x13857);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=cj13;
j14eval[1]=r02;
j14eval[2]=(((cj13*r11*sj15))+(((-1.0)*cj13*cj15*r10)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13858=((1.0)*r10);
CheckValue<IkReal> x13859=IKPowWithIntegerCheck(cj13,-1);
if(!x13859.valid){
continue;
}
CheckValue<IkReal> x13860=IKPowWithIntegerCheck(r02,-1);
if(!x13860.valid){
continue;
}
CheckValue<IkReal> x13861=IKPowWithIntegerCheck((((cj13*r11*sj15))+(((-1.0)*cj13*cj15*x13858))),-1);
if(!x13861.valid){
continue;
}
if( IKabs(((x13859.value)*(x13860.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13861.value)*(((((-1.0)*sj13*sj15*x13858))+(((-1.0)*cj15*r11*sj13)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13859.value)*(x13860.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12))))))+IKsqr(((x13861.value)*(((((-1.0)*sj13*sj15*x13858))+(((-1.0)*cj15*r11*sj13))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x13859.value)*(x13860.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12))))), ((x13861.value)*(((((-1.0)*sj13*sj15*x13858))+(((-1.0)*cj15*r11*sj13))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13862=IKsin(j14);
IkReal x13863=IKcos(j14);
IkReal x13864=(cj12*sj11);
IkReal x13865=(cj11*sj12);
IkReal x13866=(r21*sj15);
IkReal x13867=(cj11*cj12);
IkReal x13868=(sj11*sj12);
IkReal x13869=(sj13*sj15);
IkReal x13870=((1.0)*sj13);
IkReal x13871=(r11*sj15);
IkReal x13872=(cj15*r21);
IkReal x13873=(cj13*sj15);
IkReal x13874=(cj15*sj13);
IkReal x13875=(cj13*x13863);
IkReal x13876=((1.0)*cj15*r10);
IkReal x13877=(r02*x13862);
IkReal x13878=((1.0)*cj15*r20);
IkReal x13879=(x13865+x13864);
evalcond[0]=((-1.0)*r02*x13863);
evalcond[1]=(((x13862*x13866))+(((-1.0)*x13862*x13878)));
evalcond[2]=((((-1.0)*x13868))+x13867+((cj13*x13877)));
evalcond[3]=(x13879+(((-1.0)*x13870*x13877)));
evalcond[4]=((-1.0)+((x13862*x13871))+(((-1.0)*x13862*x13876)));
evalcond[5]=(((x13871*x13875))+((r11*x13874))+(((-1.0)*x13875*x13876))+((r10*x13869)));
evalcond[6]=(((r10*x13863*x13874))+(((-1.0)*r11*x13863*x13869))+((cj13*cj15*r11))+((r10*x13873)));
evalcond[7]=(((sj13*x13872))+x13879+((r20*x13869))+((x13866*x13875))+(((-1.0)*x13875*x13878)));
evalcond[8]=((((-1.0)*x13863*x13866*x13870))+(((-1.0)*x13867))+x13868+((cj13*x13872))+((r20*x13873))+((r20*x13863*x13874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13880=(cj15*r10);
IkReal x13881=((1.0)*cj13);
IkReal x13882=(r11*sj15);
CheckValue<IkReal> x13883=IKPowWithIntegerCheck((x13882+(((-1.0)*x13880))),-1);
if(!x13883.valid){
continue;
}
CheckValue<IkReal> x13884=IKPowWithIntegerCheck(((((-1.0)*sj13*x13882))+((sj13*x13880))),-1);
if(!x13884.valid){
continue;
}
if( IKabs(x13883.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13884.value)*(((((-1.0)*r10*sj15*x13881))+(((-1.0)*cj15*r11*x13881)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13883.value)+IKsqr(((x13884.value)*(((((-1.0)*r10*sj15*x13881))+(((-1.0)*cj15*r11*x13881))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(x13883.value, ((x13884.value)*(((((-1.0)*r10*sj15*x13881))+(((-1.0)*cj15*r11*x13881))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13885=IKsin(j14);
IkReal x13886=IKcos(j14);
IkReal x13887=(cj12*sj11);
IkReal x13888=(cj11*sj12);
IkReal x13889=(r21*sj15);
IkReal x13890=(cj11*cj12);
IkReal x13891=(sj11*sj12);
IkReal x13892=(sj13*sj15);
IkReal x13893=((1.0)*sj13);
IkReal x13894=(r11*sj15);
IkReal x13895=(cj15*r21);
IkReal x13896=(cj13*sj15);
IkReal x13897=(cj15*sj13);
IkReal x13898=(cj13*x13886);
IkReal x13899=((1.0)*cj15*r10);
IkReal x13900=(r02*x13885);
IkReal x13901=((1.0)*cj15*r20);
IkReal x13902=(x13887+x13888);
evalcond[0]=((-1.0)*r02*x13886);
evalcond[1]=((((-1.0)*x13885*x13901))+((x13885*x13889)));
evalcond[2]=(x13890+((cj13*x13900))+(((-1.0)*x13891)));
evalcond[3]=(x13902+(((-1.0)*x13893*x13900)));
evalcond[4]=((-1.0)+(((-1.0)*x13885*x13899))+((x13885*x13894)));
evalcond[5]=((((-1.0)*x13898*x13899))+((r10*x13892))+((x13894*x13898))+((r11*x13897)));
evalcond[6]=(((r10*x13886*x13897))+(((-1.0)*r11*x13886*x13892))+((r10*x13896))+((cj13*cj15*r11)));
evalcond[7]=((((-1.0)*x13898*x13901))+x13902+((sj13*x13895))+((r20*x13892))+((x13889*x13898)));
evalcond[8]=(x13891+((r20*x13886*x13897))+((r20*x13896))+(((-1.0)*x13890))+((cj13*x13895))+(((-1.0)*x13886*x13889*x13893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13903=((1.0)*r10);
IkReal x13904=(r11*sj15);
CheckValue<IkReal> x13905=IKPowWithIntegerCheck((x13904+(((-1.0)*cj15*x13903))),-1);
if(!x13905.valid){
continue;
}
CheckValue<IkReal> x13906=IKPowWithIntegerCheck((((cj13*x13904))+(((-1.0)*cj13*cj15*x13903))),-1);
if(!x13906.valid){
continue;
}
if( IKabs(x13905.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13906.value)*(((((-1.0)*sj13*sj15*x13903))+(((-1.0)*cj15*r11*sj13)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13905.value)+IKsqr(((x13906.value)*(((((-1.0)*sj13*sj15*x13903))+(((-1.0)*cj15*r11*sj13))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(x13905.value, ((x13906.value)*(((((-1.0)*sj13*sj15*x13903))+(((-1.0)*cj15*r11*sj13))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13907=IKsin(j14);
IkReal x13908=IKcos(j14);
IkReal x13909=(cj12*sj11);
IkReal x13910=(cj11*sj12);
IkReal x13911=(r21*sj15);
IkReal x13912=(cj11*cj12);
IkReal x13913=(sj11*sj12);
IkReal x13914=(sj13*sj15);
IkReal x13915=((1.0)*sj13);
IkReal x13916=(r11*sj15);
IkReal x13917=(cj15*r21);
IkReal x13918=(cj13*sj15);
IkReal x13919=(cj15*sj13);
IkReal x13920=(cj13*x13908);
IkReal x13921=((1.0)*cj15*r10);
IkReal x13922=(r02*x13907);
IkReal x13923=((1.0)*cj15*r20);
IkReal x13924=(x13910+x13909);
evalcond[0]=((-1.0)*r02*x13908);
evalcond[1]=(((x13907*x13911))+(((-1.0)*x13907*x13923)));
evalcond[2]=(((cj13*x13922))+(((-1.0)*x13913))+x13912);
evalcond[3]=((((-1.0)*x13915*x13922))+x13924);
evalcond[4]=((-1.0)+((x13907*x13916))+(((-1.0)*x13907*x13921)));
evalcond[5]=(((r10*x13914))+((x13916*x13920))+((r11*x13919))+(((-1.0)*x13920*x13921)));
evalcond[6]=(((r10*x13918))+(((-1.0)*r11*x13908*x13914))+((r10*x13908*x13919))+((cj13*cj15*r11)));
evalcond[7]=(((sj13*x13917))+x13924+((x13911*x13920))+((r20*x13914))+(((-1.0)*x13920*x13923)));
evalcond[8]=((((-1.0)*x13912))+x13913+((cj13*x13917))+((r20*x13918))+(((-1.0)*x13908*x13911*x13915))+((r20*x13908*x13919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13925=cj15*cj15;
IkReal x13926=(r11*sj13);
IkReal x13927=(cj15*sj15);
IkReal x13928=(r10*sj13);
IkReal x13929=(cj13*r11);
IkReal x13930=(cj13*r10);
IkReal x13931=((1.0)*x13925);
CheckValue<IkReal> x13932=IKPowWithIntegerCheck(IKsign((((r20*x13927*x13929))+(((-1.0)*r20*x13930*x13931))+((r21*x13925*x13929))+(((-1.0)*r21*x13929))+(((-1.0)*cj13*r12*r22))+((r21*x13927*x13930)))),-1);
if(!x13932.valid){
continue;
}
CheckValue<IkReal> x13933 = IKatan2WithCheck(IkReal((((r22*sj15*x13928))+((cj15*r22*x13926)))),IkReal(((((-1.0)*r20*x13926*x13931))+((r21*x13928))+((r21*x13926*x13927))+(((-1.0)*r21*x13928*x13931))+(((-1.0)*r20*x13927*x13928)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13933.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13932.value)))+(x13933.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13934=IKsin(j14);
IkReal x13935=IKcos(j14);
IkReal x13936=(cj12*sj11);
IkReal x13937=(cj11*sj12);
IkReal x13938=(cj13*r21);
IkReal x13939=((1.0)*sj13);
IkReal x13940=(cj11*cj12);
IkReal x13941=(r00*sj15);
IkReal x13942=(sj11*sj12);
IkReal x13943=(cj13*cj15);
IkReal x13944=(sj13*sj15);
IkReal x13945=(cj15*sj13);
IkReal x13946=(cj13*sj15);
IkReal x13947=(sj15*x13935);
IkReal x13948=((1.0)*x13935);
IkReal x13949=(r22*x13934);
IkReal x13950=(r02*x13934);
IkReal x13951=(sj15*x13934);
IkReal x13952=(r12*x13934);
IkReal x13953=(x13937+x13936);
IkReal x13954=((1.0)*cj15*x13934);
evalcond[0]=(((r21*x13951))+(((-1.0)*r22*x13948))+(((-1.0)*r20*x13954)));
evalcond[1]=((((-1.0)*r00*x13954))+((r01*x13951))+(((-1.0)*r02*x13948)));
evalcond[2]=((-1.0)+((r11*x13951))+(((-1.0)*r12*x13948))+(((-1.0)*r10*x13954)));
evalcond[3]=((((-1.0)*r10*x13943*x13948))+((r11*x13935*x13946))+((r10*x13944))+((cj13*x13952))+((r11*x13945)));
evalcond[4]=(((r10*x13935*x13945))+(((-1.0)*r11*x13939*x13947))+(((-1.0)*x13939*x13952))+((r10*x13946))+((r11*x13943)));
evalcond[5]=(((cj13*x13949))+x13953+((r20*x13944))+((x13938*x13947))+(((-1.0)*r20*x13943*x13948))+((r21*x13945)));
evalcond[6]=((((-1.0)*x13942))+(((-1.0)*r00*x13943*x13948))+x13940+((r01*x13935*x13946))+((r01*x13945))+((sj13*x13941))+((cj13*x13950)));
evalcond[7]=((((-1.0)*r01*x13939*x13947))+((cj13*x13941))+x13953+((r00*x13935*x13945))+((r01*x13943))+(((-1.0)*x13939*x13950)));
evalcond[8]=((((-1.0)*x13940))+x13942+((cj15*x13938))+((r20*x13946))+((r20*x13935*x13945))+(((-1.0)*r21*x13939*x13947))+(((-1.0)*x13939*x13949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13955=((1.0)*cj15);
CheckValue<IkReal> x13956 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x13955))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13956.valid){
continue;
}
CheckValue<IkReal> x13957=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13955))+(((-1.0)*r20*sj15)))),-1);
if(!x13957.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13956.value)+(((1.5707963267949)*(x13957.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13958=IKsin(j14);
IkReal x13959=IKcos(j14);
IkReal x13960=(cj12*sj11);
IkReal x13961=(cj11*sj12);
IkReal x13962=(cj13*r21);
IkReal x13963=((1.0)*sj13);
IkReal x13964=(cj11*cj12);
IkReal x13965=(r00*sj15);
IkReal x13966=(sj11*sj12);
IkReal x13967=(cj13*cj15);
IkReal x13968=(sj13*sj15);
IkReal x13969=(cj15*sj13);
IkReal x13970=(cj13*sj15);
IkReal x13971=(sj15*x13959);
IkReal x13972=((1.0)*x13959);
IkReal x13973=(r22*x13958);
IkReal x13974=(r02*x13958);
IkReal x13975=(sj15*x13958);
IkReal x13976=(r12*x13958);
IkReal x13977=(x13960+x13961);
IkReal x13978=((1.0)*cj15*x13958);
evalcond[0]=((((-1.0)*r20*x13978))+(((-1.0)*r22*x13972))+((r21*x13975)));
evalcond[1]=((((-1.0)*r02*x13972))+(((-1.0)*r00*x13978))+((r01*x13975)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x13978))+(((-1.0)*r12*x13972))+((r11*x13975)));
evalcond[3]=(((r11*x13959*x13970))+((r10*x13968))+((r11*x13969))+((cj13*x13976))+(((-1.0)*r10*x13967*x13972)));
evalcond[4]=(((r10*x13970))+(((-1.0)*r11*x13963*x13971))+((r10*x13959*x13969))+((r11*x13967))+(((-1.0)*x13963*x13976)));
evalcond[5]=(((x13962*x13971))+x13977+((r20*x13968))+((cj13*x13973))+((r21*x13969))+(((-1.0)*r20*x13967*x13972)));
evalcond[6]=(x13964+(((-1.0)*r00*x13967*x13972))+(((-1.0)*x13966))+((r01*x13959*x13970))+((cj13*x13974))+((r01*x13969))+((sj13*x13965)));
evalcond[7]=(x13977+((r00*x13959*x13969))+((cj13*x13965))+(((-1.0)*r01*x13963*x13971))+((r01*x13967))+(((-1.0)*x13963*x13974)));
evalcond[8]=(x13966+(((-1.0)*r21*x13963*x13971))+((r20*x13970))+(((-1.0)*x13964))+((cj15*x13962))+(((-1.0)*x13963*x13973))+((r20*x13959*x13969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13979 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13979.valid){
continue;
}
CheckValue<IkReal> x13980=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x13980.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13979.value)+(((1.5707963267949)*(x13980.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13981=IKsin(j14);
IkReal x13982=IKcos(j14);
IkReal x13983=(cj12*sj11);
IkReal x13984=(cj11*sj12);
IkReal x13985=(cj13*r21);
IkReal x13986=((1.0)*sj13);
IkReal x13987=(cj11*cj12);
IkReal x13988=(r00*sj15);
IkReal x13989=(sj11*sj12);
IkReal x13990=(cj13*cj15);
IkReal x13991=(sj13*sj15);
IkReal x13992=(cj15*sj13);
IkReal x13993=(cj13*sj15);
IkReal x13994=(sj15*x13982);
IkReal x13995=((1.0)*x13982);
IkReal x13996=(r22*x13981);
IkReal x13997=(r02*x13981);
IkReal x13998=(sj15*x13981);
IkReal x13999=(r12*x13981);
IkReal x14000=(x13984+x13983);
IkReal x14001=((1.0)*cj15*x13981);
evalcond[0]=(((r21*x13998))+(((-1.0)*r22*x13995))+(((-1.0)*r20*x14001)));
evalcond[1]=((((-1.0)*r00*x14001))+(((-1.0)*r02*x13995))+((r01*x13998)));
evalcond[2]=((-1.0)+((r11*x13998))+(((-1.0)*r12*x13995))+(((-1.0)*r10*x14001)));
evalcond[3]=((((-1.0)*r10*x13990*x13995))+((r11*x13992))+((r10*x13991))+((r11*x13982*x13993))+((cj13*x13999)));
evalcond[4]=(((r11*x13990))+(((-1.0)*x13986*x13999))+((r10*x13993))+((r10*x13982*x13992))+(((-1.0)*r11*x13986*x13994)));
evalcond[5]=(((r21*x13992))+((r20*x13991))+(((-1.0)*r20*x13990*x13995))+x14000+((x13985*x13994))+((cj13*x13996)));
evalcond[6]=(((r01*x13982*x13993))+x13987+((sj13*x13988))+(((-1.0)*r00*x13990*x13995))+(((-1.0)*x13989))+((r01*x13992))+((cj13*x13997)));
evalcond[7]=((((-1.0)*x13986*x13997))+((r00*x13982*x13992))+x14000+((r01*x13990))+(((-1.0)*r01*x13986*x13994))+((cj13*x13988)));
evalcond[8]=(x13989+(((-1.0)*x13986*x13996))+((cj15*x13985))+((r20*x13982*x13992))+((r20*x13993))+(((-1.0)*x13987))+(((-1.0)*r21*x13986*x13994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14002=((-1.0)*r00);
IkReal x14004 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14004)==0){
continue;
}
IkReal x14003=pow(x14004,-0.5);
CheckValue<IkReal> x14005 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14002),IKFAST_ATAN2_MAGTHRESH);
if(!x14005.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14005.value));
IkReal gconst13=(r01*x14003);
IkReal gconst14=(x14002*x14003);
CheckValue<IkReal> x14006 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14006.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x14006.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x14007=((-1.0)*r00);
IkReal x14008=x14003;
CheckValue<IkReal> x14010 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14007),IKFAST_ATAN2_MAGTHRESH);
if(!x14010.valid){
continue;
}
IkReal x14009=((-1.0)*(x14010.value));
sj15=gconst13;
cj15=gconst14;
j15=x14009;
IkReal gconst12=x14009;
IkReal gconst13=(r01*x14008);
IkReal gconst14=(x14007*x14008);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14011=((1.0)*gconst13);
CheckValue<IkReal> x14012=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14011))+(((-1.0)*gconst14*r21)))),-1);
if(!x14012.valid){
continue;
}
CheckValue<IkReal> x14013 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((gconst14*r10*sj10))+(((-1.0)*r11*sj10*x14011))+(((-1.0)*cj10*r01*x14011))+((cj10*gconst14*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14013.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14012.value)))+(x14013.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14014=IKsin(j14);
IkReal x14015=IKcos(j14);
IkReal x14016=(r00*sj13);
IkReal x14017=((1.0)*cj11);
IkReal x14018=((1.0)*r20);
IkReal x14019=(cj10*sj12);
IkReal x14020=((1.0)*sj10);
IkReal x14021=(sj10*sj12);
IkReal x14022=(gconst13*sj13);
IkReal x14023=(gconst14*sj13);
IkReal x14024=(cj13*gconst13);
IkReal x14025=(cj12*sj11);
IkReal x14026=(cj13*gconst14);
IkReal x14027=((1.0)*cj13);
IkReal x14028=(gconst14*x14015);
IkReal x14029=((1.0)*x14015);
IkReal x14030=(cj13*x14014);
IkReal x14031=(gconst13*x14014);
IkReal x14032=((1.0)*gconst14*x14014);
IkReal x14033=((1.0)*sj13*x14014);
evalcond[0]=((((-1.0)*gconst14*x14014*x14018))+((r21*x14031))+(((-1.0)*r22*x14029)));
evalcond[1]=(((r11*x14031))+(((-1.0)*r12*x14029))+cj10+(((-1.0)*r10*x14032)));
evalcond[2]=(((r01*x14031))+(((-1.0)*r00*x14032))+(((-1.0)*r02*x14029))+(((-1.0)*x14020)));
evalcond[3]=(((r22*x14030))+((r20*x14022))+(((-1.0)*x14015*x14018*x14026))+((r21*x14015*x14024))+((r21*x14023))+x14025+((cj11*sj12)));
evalcond[4]=(((sj11*sj12))+((r20*x14024))+(((-1.0)*r21*x14022*x14029))+((r20*x14015*x14023))+((r21*x14026))+(((-1.0)*r22*x14033))+(((-1.0)*cj12*x14017)));
evalcond[5]=((((-1.0)*cj10*cj12*x14017))+((r01*x14023))+((gconst13*x14016))+((sj11*x14019))+((r01*x14015*x14024))+(((-1.0)*r00*x14026*x14029))+((r02*x14030)));
evalcond[6]=(((sj11*x14021))+((r11*x14023))+(((-1.0)*cj12*sj10*x14017))+((r10*x14022))+(((-1.0)*r10*x14026*x14029))+((r12*x14030))+((r11*x14015*x14024)));
evalcond[7]=(((r01*x14026))+((r00*x14024))+(((-1.0)*r01*x14022*x14029))+((x14016*x14028))+(((-1.0)*r02*x14033))+(((-1.0)*x14017*x14019))+(((-1.0)*cj10*x14025)));
evalcond[8]=(((r11*x14026))+((r10*x14015*x14023))+((r10*x14024))+(((-1.0)*x14020*x14025))+(((-1.0)*r11*x14022*x14029))+(((-1.0)*r12*x14033))+(((-1.0)*x14017*x14021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14034=((1.0)*gconst14);
CheckValue<IkReal> x14035 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst13*r21*sj10))+(((-1.0)*r20*sj10*x14034)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14035.valid){
continue;
}
CheckValue<IkReal> x14036=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x14034)))),-1);
if(!x14036.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14035.value)+(((1.5707963267949)*(x14036.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14037=IKsin(j14);
IkReal x14038=IKcos(j14);
IkReal x14039=(r00*sj13);
IkReal x14040=((1.0)*cj11);
IkReal x14041=((1.0)*r20);
IkReal x14042=(cj10*sj12);
IkReal x14043=((1.0)*sj10);
IkReal x14044=(sj10*sj12);
IkReal x14045=(gconst13*sj13);
IkReal x14046=(gconst14*sj13);
IkReal x14047=(cj13*gconst13);
IkReal x14048=(cj12*sj11);
IkReal x14049=(cj13*gconst14);
IkReal x14050=((1.0)*cj13);
IkReal x14051=(gconst14*x14038);
IkReal x14052=((1.0)*x14038);
IkReal x14053=(cj13*x14037);
IkReal x14054=(gconst13*x14037);
IkReal x14055=((1.0)*gconst14*x14037);
IkReal x14056=((1.0)*sj13*x14037);
evalcond[0]=((((-1.0)*gconst14*x14037*x14041))+(((-1.0)*r22*x14052))+((r21*x14054)));
evalcond[1]=((((-1.0)*r12*x14052))+((r11*x14054))+(((-1.0)*r10*x14055))+cj10);
evalcond[2]=((((-1.0)*r02*x14052))+(((-1.0)*x14043))+(((-1.0)*r00*x14055))+((r01*x14054)));
evalcond[3]=((((-1.0)*x14038*x14041*x14049))+((r21*x14038*x14047))+((r20*x14045))+((r21*x14046))+((r22*x14053))+x14048+((cj11*sj12)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x14040))+(((-1.0)*r21*x14045*x14052))+((r20*x14038*x14046))+((r20*x14047))+(((-1.0)*r22*x14056))+((r21*x14049)));
evalcond[5]=(((sj11*x14042))+((r01*x14046))+((gconst13*x14039))+((r02*x14053))+(((-1.0)*cj10*cj12*x14040))+((r01*x14038*x14047))+(((-1.0)*r00*x14049*x14052)));
evalcond[6]=(((r11*x14046))+((sj11*x14044))+(((-1.0)*r10*x14049*x14052))+((r10*x14045))+((r12*x14053))+(((-1.0)*cj12*sj10*x14040))+((r11*x14038*x14047)));
evalcond[7]=(((r00*x14047))+(((-1.0)*cj10*x14048))+((r01*x14049))+(((-1.0)*x14040*x14042))+(((-1.0)*r01*x14045*x14052))+(((-1.0)*r02*x14056))+((x14039*x14051)));
evalcond[8]=(((r11*x14049))+(((-1.0)*r12*x14056))+(((-1.0)*x14043*x14048))+(((-1.0)*x14040*x14044))+((r10*x14047))+(((-1.0)*r11*x14045*x14052))+((r10*x14038*x14046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14057=((-1.0)*r01);
IkReal x14059 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14059)==0){
continue;
}
IkReal x14058=pow(x14059,-0.5);
CheckValue<IkReal> x14060 = IKatan2WithCheck(IkReal(x14057),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14060.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14060.value))));
IkReal gconst16=(x14057*x14058);
IkReal gconst17=((1.0)*r00*x14058);
CheckValue<IkReal> x14061 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14061.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x14061.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[5];
IkReal x14062=((-1.0)*r01);
CheckValue<IkReal> x14065 = IKatan2WithCheck(IkReal(x14062),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14065.valid){
continue;
}
IkReal x14063=((1.0)*(x14065.value));
IkReal x14064=x14058;
sj15=gconst16;
cj15=gconst17;
j15=((3.14159265)+(((-1.0)*x14063)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14063)));
IkReal gconst16=(x14062*x14064);
IkReal gconst17=((1.0)*r00*x14064);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=cj10;
j14eval[3]=r22;
j14eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  || IKabs(j14eval[4]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x14066=((-1.0)*r01);
CheckValue<IkReal> x14069 = IKatan2WithCheck(IkReal(x14066),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14069.valid){
continue;
}
IkReal x14067=((1.0)*(x14069.value));
IkReal x14068=x14058;
sj15=gconst16;
cj15=gconst17;
j15=((3.14159265)+(((-1.0)*x14067)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14067)));
IkReal gconst16=(x14066*x14068);
IkReal gconst17=((1.0)*r00*x14068);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x14070=((-1.0)*r01);
CheckValue<IkReal> x14073 = IKatan2WithCheck(IkReal(x14070),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14073.valid){
continue;
}
IkReal x14071=((1.0)*(x14073.value));
IkReal x14072=x14058;
sj15=gconst16;
cj15=gconst17;
j15=((3.14159265)+(((-1.0)*x14071)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14071)));
IkReal gconst16=(x14070*x14072);
IkReal gconst17=((1.0)*r00*x14072);
IkReal x14074=r02*r02;
IkReal x14075=(r12*sj10);
IkReal x14076=x14058;
IkReal x14077=(cj10*x14076);
j14eval[0]=((IKabs((((r02*x14075*x14076))+((x14074*x14077))+(((-1.0)*x14077)))))+(IKabs(((((-1.0)*x14075))+(((-1.0)*cj10*r02))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
IkReal x14078=((-1.0)*r01);
CheckValue<IkReal> x14081 = IKatan2WithCheck(IkReal(x14078),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14081.valid){
continue;
}
IkReal x14079=((1.0)*(x14081.value));
IkReal x14080=x14058;
sj15=gconst16;
cj15=gconst17;
j15=((3.14159265)+(((-1.0)*x14079)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14079)));
IkReal gconst16=(x14078*x14080);
IkReal gconst17=((1.0)*r00*x14080);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=r22;
j14eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x14082=((-1.0)*r01);
CheckValue<IkReal> x14085 = IKatan2WithCheck(IkReal(x14082),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14085.valid){
continue;
}
IkReal x14083=((1.0)*(x14085.value));
IkReal x14084=x14058;
sj15=gconst16;
cj15=gconst17;
j15=((3.14159265)+(((-1.0)*x14083)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14083)));
IkReal gconst16=(x14082*x14084);
IkReal gconst17=((1.0)*r00*x14084);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14086=gconst16*gconst16;
IkReal x14087=gconst17*gconst17;
IkReal x14088=(r10*sj13);
IkReal x14089=((1.0)*r11);
IkReal x14090=((1.0)*cj13);
IkReal x14091=(gconst16*gconst17);
IkReal x14092=(r11*sj13);
IkReal x14093=(r20*x14087);
IkReal x14094=(r21*x14086);
CheckValue<IkReal> x14095=IKPowWithIntegerCheck(IKsign((((cj13*r10*r21*x14091))+((cj13*r11*r20*x14091))+(((-1.0)*r10*x14090*x14093))+(((-1.0)*r12*r22*x14090))+(((-1.0)*cj13*x14089*x14094)))),-1);
if(!x14095.valid){
continue;
}
CheckValue<IkReal> x14096 = IKatan2WithCheck(IkReal((((gconst16*r22*x14088))+((gconst17*r22*x14092)))),IkReal((((x14088*x14094))+(((-1.0)*r20*x14088*x14091))+((r21*x14091*x14092))+(((-1.0)*sj13*x14089*x14093)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14096.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14095.value)))+(x14096.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14097=IKsin(j14);
IkReal x14098=IKcos(j14);
IkReal x14099=(cj12*sj11);
IkReal x14100=(cj11*sj12);
IkReal x14101=(gconst16*sj13);
IkReal x14102=(cj13*gconst17);
IkReal x14103=(gconst17*sj13);
IkReal x14104=(cj13*gconst16);
IkReal x14105=(sj11*sj12);
IkReal x14106=(cj11*cj12);
IkReal x14107=((1.0)*x14098);
IkReal x14108=(cj13*x14097);
IkReal x14109=((1.0)*x14097);
IkReal x14110=(gconst16*x14097);
IkReal x14111=(x14100+x14099);
evalcond[0]=((((-1.0)*r22*x14107))+((r21*x14110))+(((-1.0)*gconst17*r20*x14109)));
evalcond[1]=(((r01*x14110))+(((-1.0)*r02*x14107))+(((-1.0)*gconst17*r00*x14109)));
evalcond[2]=((-1.0)+((r11*x14110))+(((-1.0)*r12*x14107))+(((-1.0)*gconst17*r10*x14109)));
evalcond[3]=(((r11*x14098*x14104))+(((-1.0)*r10*x14102*x14107))+((r10*x14101))+((r12*x14108))+((r11*x14103)));
evalcond[4]=((((-1.0)*r11*x14101*x14107))+(((-1.0)*r12*sj13*x14109))+((r10*x14098*x14103))+((r10*x14104))+((r11*x14102)));
evalcond[5]=(((r22*x14108))+((r21*x14098*x14104))+(((-1.0)*r20*x14102*x14107))+x14111+((r20*x14101))+((r21*x14103)));
evalcond[6]=(((r02*x14108))+((r00*x14101))+((r01*x14103))+(((-1.0)*x14105))+((r01*x14098*x14104))+x14106+(((-1.0)*r00*x14102*x14107)));
evalcond[7]=((((-1.0)*r02*sj13*x14109))+((r00*x14104))+((r01*x14102))+((r00*x14098*x14103))+(((-1.0)*r01*x14101*x14107))+x14111);
evalcond[8]=((((-1.0)*r22*sj13*x14109))+(((-1.0)*r21*x14101*x14107))+((r20*x14098*x14103))+(((-1.0)*x14106))+x14105+((r20*x14104))+((r21*x14102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14112=((1.0)*gconst17);
CheckValue<IkReal> x14113 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14112))+((gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14113.valid){
continue;
}
CheckValue<IkReal> x14114=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x14112)))),-1);
if(!x14114.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14113.value)+(((1.5707963267949)*(x14114.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14115=IKsin(j14);
IkReal x14116=IKcos(j14);
IkReal x14117=(cj12*sj11);
IkReal x14118=(cj11*sj12);
IkReal x14119=(gconst16*sj13);
IkReal x14120=(cj13*gconst17);
IkReal x14121=(gconst17*sj13);
IkReal x14122=(cj13*gconst16);
IkReal x14123=(sj11*sj12);
IkReal x14124=(cj11*cj12);
IkReal x14125=((1.0)*x14116);
IkReal x14126=(cj13*x14115);
IkReal x14127=((1.0)*x14115);
IkReal x14128=(gconst16*x14115);
IkReal x14129=(x14117+x14118);
evalcond[0]=(((r21*x14128))+(((-1.0)*r22*x14125))+(((-1.0)*gconst17*r20*x14127)));
evalcond[1]=(((r01*x14128))+(((-1.0)*gconst17*r00*x14127))+(((-1.0)*r02*x14125)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14125))+(((-1.0)*gconst17*r10*x14127))+((r11*x14128)));
evalcond[3]=((((-1.0)*r10*x14120*x14125))+((r12*x14126))+((r11*x14116*x14122))+((r10*x14119))+((r11*x14121)));
evalcond[4]=((((-1.0)*r12*sj13*x14127))+(((-1.0)*r11*x14119*x14125))+((r10*x14116*x14121))+((r10*x14122))+((r11*x14120)));
evalcond[5]=(((r21*x14121))+((r22*x14126))+((r21*x14116*x14122))+((r20*x14119))+x14129+(((-1.0)*r20*x14120*x14125)));
evalcond[6]=((((-1.0)*r00*x14120*x14125))+((r00*x14119))+((r01*x14116*x14122))+((r01*x14121))+(((-1.0)*x14123))+x14124+((r02*x14126)));
evalcond[7]=(((r00*x14116*x14121))+(((-1.0)*r02*sj13*x14127))+((r00*x14122))+((r01*x14120))+x14129+(((-1.0)*r01*x14119*x14125)));
evalcond[8]=(((r21*x14120))+((r20*x14116*x14121))+(((-1.0)*r21*x14119*x14125))+(((-1.0)*r22*sj13*x14127))+((r20*x14122))+(((-1.0)*x14124))+x14123);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x14130=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14130.valid){
continue;
}
CheckValue<IkReal> x14131 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14131.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14130.value)))+(x14131.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14132=IKsin(j14);
IkReal x14133=IKcos(j14);
IkReal x14134=(cj12*sj11);
IkReal x14135=(cj11*sj12);
IkReal x14136=(gconst16*sj13);
IkReal x14137=(cj13*gconst17);
IkReal x14138=(gconst17*sj13);
IkReal x14139=(cj13*gconst16);
IkReal x14140=(sj11*sj12);
IkReal x14141=(cj11*cj12);
IkReal x14142=((1.0)*x14133);
IkReal x14143=(cj13*x14132);
IkReal x14144=((1.0)*x14132);
IkReal x14145=(gconst16*x14132);
IkReal x14146=(x14134+x14135);
evalcond[0]=((((-1.0)*r22*x14142))+((r21*x14145))+(((-1.0)*gconst17*r20*x14144)));
evalcond[1]=((((-1.0)*gconst17*r00*x14144))+((r01*x14145))+(((-1.0)*r02*x14142)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14144))+(((-1.0)*r12*x14142))+((r11*x14145)));
evalcond[3]=((((-1.0)*r10*x14137*x14142))+((r11*x14133*x14139))+((r11*x14138))+((r10*x14136))+((r12*x14143)));
evalcond[4]=(((r10*x14133*x14138))+(((-1.0)*r12*sj13*x14144))+((r11*x14137))+((r10*x14139))+(((-1.0)*r11*x14136*x14142)));
evalcond[5]=(((r20*x14136))+(((-1.0)*r20*x14137*x14142))+((r21*x14133*x14139))+((r21*x14138))+((r22*x14143))+x14146);
evalcond[6]=(((r02*x14143))+((r01*x14133*x14139))+x14141+(((-1.0)*x14140))+((r00*x14136))+(((-1.0)*r00*x14137*x14142))+((r01*x14138)));
evalcond[7]=((((-1.0)*r01*x14136*x14142))+((r00*x14133*x14138))+x14146+((r00*x14139))+(((-1.0)*r02*sj13*x14144))+((r01*x14137)));
evalcond[8]=(((r20*x14133*x14138))+((r20*x14139))+(((-1.0)*r21*x14136*x14142))+(((-1.0)*r22*sj13*x14144))+((r21*x14137))+x14140+(((-1.0)*x14141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
j14array[0]=0;
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
j14array[0]=0;
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x14147=((-1.0)*r01);
CheckValue<IkReal> x14150 = IKatan2WithCheck(IkReal(x14147),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14150.valid){
continue;
}
IkReal x14148=((1.0)*(x14150.value));
IkReal x14149=x14058;
sj15=gconst16;
cj15=gconst17;
j15=((3.14159265)+(((-1.0)*x14148)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14148)));
IkReal gconst16=(x14147*x14149);
IkReal gconst17=((1.0)*r00*x14149);
IkReal x14151=r02*r02;
IkReal x14152=(r12*sj10);
IkReal x14153=x14058;
IkReal x14154=(cj10*x14153);
j14eval[0]=((IKabs((((r02*x14152*x14153))+((x14151*x14154))+(((-1.0)*x14154)))))+(IKabs(((((-1.0)*cj10*r02))+(((-1.0)*x14152))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14155=(gconst17*r21);
IkReal x14156=(gconst16*sj13);
IkReal x14157=((1.0)*cj13);
IkReal x14158=((1.0)*sj13);
IkReal x14159=(gconst17*r20);
IkReal x14160=(cj11*cj12);
IkReal x14161=(gconst16*r20);
IkReal x14162=((1.0)*sj11*sj12);
CheckValue<IkReal> x14163=IKPowWithIntegerCheck((((r11*x14156*x14159))+(((-1.0)*gconst16*r11*r21*x14156))+((r10*x14155*x14156))+(((-1.0)*gconst17*r10*x14158*x14159))),-1);
if(!x14163.valid){
continue;
}
CheckValue<IkReal> x14164=IKPowWithIntegerCheck(((((-1.0)*r21*x14156))+((sj13*x14159))),-1);
if(!x14164.valid){
continue;
}
if( IKabs(((x14163.value)*(((((-1.0)*cj10*x14158*x14159))+(((-1.0)*r12*x14157*x14161))+(((-1.0)*r12*x14162))+((r12*x14160))+((cj10*r21*x14156))+(((-1.0)*r12*x14155*x14157)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14164.value)*(((((-1.0)*x14157*x14161))+(((-1.0)*x14162))+x14160+(((-1.0)*x14155*x14157)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14163.value)*(((((-1.0)*cj10*x14158*x14159))+(((-1.0)*r12*x14157*x14161))+(((-1.0)*r12*x14162))+((r12*x14160))+((cj10*r21*x14156))+(((-1.0)*r12*x14155*x14157))))))+IKsqr(((x14164.value)*(((((-1.0)*x14157*x14161))+(((-1.0)*x14162))+x14160+(((-1.0)*x14155*x14157))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x14163.value)*(((((-1.0)*cj10*x14158*x14159))+(((-1.0)*r12*x14157*x14161))+(((-1.0)*r12*x14162))+((r12*x14160))+((cj10*r21*x14156))+(((-1.0)*r12*x14155*x14157))))), ((x14164.value)*(((((-1.0)*x14157*x14161))+(((-1.0)*x14162))+x14160+(((-1.0)*x14155*x14157))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14165=IKsin(j14);
IkReal x14166=IKcos(j14);
IkReal x14167=(gconst16*sj13);
IkReal x14168=(cj13*gconst17);
IkReal x14169=((1.0)*cj11);
IkReal x14170=(cj10*sj12);
IkReal x14171=(sj11*sj12);
IkReal x14172=((1.0)*sj10);
IkReal x14173=(cj13*gconst16);
IkReal x14174=(gconst17*sj13);
IkReal x14175=(cj12*sj11);
IkReal x14176=((1.0)*x14166);
IkReal x14177=((1.0)*x14165);
IkReal x14178=(cj13*x14165);
IkReal x14179=(gconst16*x14165);
IkReal x14180=(x14166*x14174);
evalcond[0]=(((r21*x14179))+(((-1.0)*gconst17*r20*x14177)));
evalcond[1]=(((r11*x14179))+cj10+(((-1.0)*gconst17*r10*x14177))+(((-1.0)*r12*x14176)));
evalcond[2]=((((-1.0)*x14172))+((r01*x14179))+(((-1.0)*gconst17*r00*x14177))+(((-1.0)*r02*x14176)));
evalcond[3]=((((-1.0)*r20*x14168*x14176))+((r21*x14174))+((r21*x14166*x14173))+x14175+((r20*x14167))+((cj11*sj12)));
evalcond[4]=(((r20*x14180))+(((-1.0)*r21*x14167*x14176))+((r20*x14173))+(((-1.0)*cj12*x14169))+x14171+((r21*x14168)));
evalcond[5]=(((r01*x14166*x14173))+((r01*x14174))+(((-1.0)*r00*x14168*x14176))+((r02*x14178))+((r00*x14167))+((sj11*x14170))+(((-1.0)*cj10*cj12*x14169)));
evalcond[6]=(((r10*x14167))+(((-1.0)*cj12*sj10*x14169))+((r11*x14174))+((r12*x14178))+((sj10*x14171))+((r11*x14166*x14173))+(((-1.0)*r10*x14168*x14176)));
evalcond[7]=((((-1.0)*x14169*x14170))+((r00*x14173))+(((-1.0)*r02*sj13*x14177))+((r00*x14180))+((r01*x14168))+(((-1.0)*r01*x14167*x14176))+(((-1.0)*cj10*x14175)));
evalcond[8]=((((-1.0)*sj10*sj12*x14169))+(((-1.0)*r11*x14167*x14176))+(((-1.0)*x14172*x14175))+(((-1.0)*r12*sj13*x14177))+((r11*x14168))+((r10*x14173))+((r10*x14180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14181=((1.0)*gconst16);
CheckValue<IkReal> x14182 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x14181))+((cj10*gconst17*r00))+((gconst17*r10*sj10))+(((-1.0)*r11*sj10*x14181)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14182.valid){
continue;
}
CheckValue<IkReal> x14183=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r21))+(((-1.0)*r20*x14181)))),-1);
if(!x14183.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14182.value)+(((1.5707963267949)*(x14183.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14184=IKsin(j14);
IkReal x14185=IKcos(j14);
IkReal x14186=(gconst16*sj13);
IkReal x14187=(cj13*gconst17);
IkReal x14188=((1.0)*cj11);
IkReal x14189=(cj10*sj12);
IkReal x14190=(sj11*sj12);
IkReal x14191=((1.0)*sj10);
IkReal x14192=(cj13*gconst16);
IkReal x14193=(gconst17*sj13);
IkReal x14194=(cj12*sj11);
IkReal x14195=((1.0)*x14185);
IkReal x14196=((1.0)*x14184);
IkReal x14197=(cj13*x14184);
IkReal x14198=(gconst16*x14184);
IkReal x14199=(x14185*x14193);
evalcond[0]=((((-1.0)*gconst17*r20*x14196))+((r21*x14198)));
evalcond[1]=((((-1.0)*gconst17*r10*x14196))+(((-1.0)*r12*x14195))+cj10+((r11*x14198)));
evalcond[2]=((((-1.0)*gconst17*r00*x14196))+(((-1.0)*r02*x14195))+(((-1.0)*x14191))+((r01*x14198)));
evalcond[3]=(((r20*x14186))+((r21*x14185*x14192))+x14194+((r21*x14193))+((cj11*sj12))+(((-1.0)*r20*x14187*x14195)));
evalcond[4]=((((-1.0)*r21*x14186*x14195))+(((-1.0)*cj12*x14188))+((r21*x14187))+x14190+((r20*x14199))+((r20*x14192)));
evalcond[5]=(((r02*x14197))+(((-1.0)*cj10*cj12*x14188))+(((-1.0)*r00*x14187*x14195))+((r00*x14186))+((sj11*x14189))+((r01*x14193))+((r01*x14185*x14192)));
evalcond[6]=((((-1.0)*r10*x14187*x14195))+((r11*x14185*x14192))+((r11*x14193))+((r12*x14197))+(((-1.0)*cj12*sj10*x14188))+((r10*x14186))+((sj10*x14190)));
evalcond[7]=((((-1.0)*r02*sj13*x14196))+(((-1.0)*cj10*x14194))+(((-1.0)*r01*x14186*x14195))+((r01*x14187))+((r00*x14192))+((r00*x14199))+(((-1.0)*x14188*x14189)));
evalcond[8]=(((r10*x14192))+((r10*x14199))+(((-1.0)*sj10*sj12*x14188))+(((-1.0)*r12*sj13*x14196))+(((-1.0)*r11*x14186*x14195))+((r11*x14187))+(((-1.0)*x14191*x14194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14200=((1.0)*gconst16);
CheckValue<IkReal> x14201 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x14200))+((cj10*gconst17*r00))+((gconst17*r10*sj10))+(((-1.0)*r11*sj10*x14200)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14201.valid){
continue;
}
CheckValue<IkReal> x14202=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r21))+(((-1.0)*r20*x14200)))),-1);
if(!x14202.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14201.value)+(((1.5707963267949)*(x14202.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14203=IKsin(j14);
IkReal x14204=IKcos(j14);
IkReal x14205=(gconst16*sj13);
IkReal x14206=(cj13*gconst17);
IkReal x14207=((1.0)*cj11);
IkReal x14208=(cj10*sj12);
IkReal x14209=(sj11*sj12);
IkReal x14210=((1.0)*sj10);
IkReal x14211=(cj13*gconst16);
IkReal x14212=(gconst17*sj13);
IkReal x14213=(cj12*sj11);
IkReal x14214=((1.0)*x14204);
IkReal x14215=((1.0)*x14203);
IkReal x14216=(cj13*x14203);
IkReal x14217=(gconst16*x14203);
IkReal x14218=(x14204*x14212);
evalcond[0]=((((-1.0)*gconst17*r20*x14215))+(((-1.0)*r22*x14214))+((r21*x14217)));
evalcond[1]=((((-1.0)*r12*x14214))+((r11*x14217))+(((-1.0)*gconst17*r10*x14215))+cj10);
evalcond[2]=((((-1.0)*gconst17*r00*x14215))+(((-1.0)*r02*x14214))+((r01*x14217))+(((-1.0)*x14210)));
evalcond[3]=((((-1.0)*r20*x14206*x14214))+((r22*x14216))+((r20*x14205))+((r21*x14204*x14211))+((r21*x14212))+((cj11*sj12))+x14213);
evalcond[4]=((((-1.0)*r21*x14205*x14214))+((r21*x14206))+(((-1.0)*cj12*x14207))+(((-1.0)*r22*sj13*x14215))+((r20*x14218))+((r20*x14211))+x14209);
evalcond[5]=((((-1.0)*r00*x14206*x14214))+((r01*x14204*x14211))+((r01*x14212))+((r00*x14205))+((sj11*x14208))+((r02*x14216))+(((-1.0)*cj10*cj12*x14207)));
evalcond[6]=(((r11*x14212))+(((-1.0)*r10*x14206*x14214))+((sj10*x14209))+((r12*x14216))+((r10*x14205))+((r11*x14204*x14211))+(((-1.0)*cj12*sj10*x14207)));
evalcond[7]=((((-1.0)*cj10*x14213))+(((-1.0)*r02*sj13*x14215))+(((-1.0)*x14207*x14208))+(((-1.0)*r01*x14205*x14214))+((r00*x14211))+((r00*x14218))+((r01*x14206)));
evalcond[8]=((((-1.0)*x14210*x14213))+(((-1.0)*sj10*sj12*x14207))+(((-1.0)*r11*x14205*x14214))+((r10*x14211))+((r10*x14218))+(((-1.0)*r12*sj13*x14215))+((r11*x14206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14219=((1.0)*gconst17);
CheckValue<IkReal> x14220=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14219)))),-1);
if(!x14220.valid){
continue;
}
CheckValue<IkReal> x14221 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x14219))+((gconst16*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14221.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14220.value)))+(x14221.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14222=IKsin(j14);
IkReal x14223=IKcos(j14);
IkReal x14224=(gconst16*sj13);
IkReal x14225=(cj13*gconst17);
IkReal x14226=((1.0)*cj11);
IkReal x14227=(cj10*sj12);
IkReal x14228=(sj11*sj12);
IkReal x14229=((1.0)*sj10);
IkReal x14230=(cj13*gconst16);
IkReal x14231=(gconst17*sj13);
IkReal x14232=(cj12*sj11);
IkReal x14233=((1.0)*x14223);
IkReal x14234=((1.0)*x14222);
IkReal x14235=(cj13*x14222);
IkReal x14236=(gconst16*x14222);
IkReal x14237=(x14223*x14231);
evalcond[0]=(((r21*x14236))+(((-1.0)*gconst17*r20*x14234))+(((-1.0)*r22*x14233)));
evalcond[1]=((((-1.0)*gconst17*r10*x14234))+(((-1.0)*r12*x14233))+cj10+((r11*x14236)));
evalcond[2]=((((-1.0)*x14229))+(((-1.0)*r02*x14233))+((r01*x14236))+(((-1.0)*gconst17*r00*x14234)));
evalcond[3]=(((r20*x14224))+((r21*x14231))+(((-1.0)*r20*x14225*x14233))+((r22*x14235))+((r21*x14223*x14230))+((cj11*sj12))+x14232);
evalcond[4]=((((-1.0)*r21*x14224*x14233))+((r20*x14237))+((r20*x14230))+((r21*x14225))+(((-1.0)*r22*sj13*x14234))+(((-1.0)*cj12*x14226))+x14228);
evalcond[5]=((((-1.0)*cj10*cj12*x14226))+((r02*x14235))+((r01*x14223*x14230))+(((-1.0)*r00*x14225*x14233))+((sj11*x14227))+((r01*x14231))+((r00*x14224)));
evalcond[6]=((((-1.0)*r10*x14225*x14233))+((sj10*x14228))+((r11*x14223*x14230))+((r10*x14224))+(((-1.0)*cj12*sj10*x14226))+((r12*x14235))+((r11*x14231)));
evalcond[7]=((((-1.0)*x14226*x14227))+(((-1.0)*r02*sj13*x14234))+(((-1.0)*r01*x14224*x14233))+(((-1.0)*cj10*x14232))+((r00*x14230))+((r00*x14237))+((r01*x14225)));
evalcond[8]=((((-1.0)*sj10*sj12*x14226))+(((-1.0)*r11*x14224*x14233))+(((-1.0)*x14229*x14232))+((r10*x14230))+((r10*x14237))+(((-1.0)*r12*sj13*x14234))+((r11*x14225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14238=((1.0)*gconst17);
CheckValue<IkReal> x14239=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14238)))),-1);
if(!x14239.valid){
continue;
}
CheckValue<IkReal> x14240 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst16*r21))+(((-1.0)*cj10*r20*x14238)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14240.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14239.value)))+(x14240.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14241=IKsin(j14);
IkReal x14242=IKcos(j14);
IkReal x14243=(gconst16*sj13);
IkReal x14244=(cj13*gconst17);
IkReal x14245=((1.0)*cj11);
IkReal x14246=(cj10*sj12);
IkReal x14247=(sj11*sj12);
IkReal x14248=((1.0)*sj10);
IkReal x14249=(cj13*gconst16);
IkReal x14250=(gconst17*sj13);
IkReal x14251=(cj12*sj11);
IkReal x14252=((1.0)*x14242);
IkReal x14253=((1.0)*x14241);
IkReal x14254=(cj13*x14241);
IkReal x14255=(gconst16*x14241);
IkReal x14256=(x14242*x14250);
evalcond[0]=(((r21*x14255))+(((-1.0)*gconst17*r20*x14253))+(((-1.0)*r22*x14252)));
evalcond[1]=(cj10+((r11*x14255))+(((-1.0)*r12*x14252))+(((-1.0)*gconst17*r10*x14253)));
evalcond[2]=((((-1.0)*gconst17*r00*x14253))+(((-1.0)*x14248))+(((-1.0)*r02*x14252))+((r01*x14255)));
evalcond[3]=(((r21*x14250))+((r21*x14242*x14249))+((r20*x14243))+(((-1.0)*r20*x14244*x14252))+((cj11*sj12))+x14251+((r22*x14254)));
evalcond[4]=(((r21*x14244))+(((-1.0)*r21*x14243*x14252))+((r20*x14249))+((r20*x14256))+(((-1.0)*cj12*x14245))+x14247+(((-1.0)*r22*sj13*x14253)));
evalcond[5]=(((sj11*x14246))+(((-1.0)*cj10*cj12*x14245))+((r01*x14242*x14249))+((r02*x14254))+(((-1.0)*r00*x14244*x14252))+((r00*x14243))+((r01*x14250)));
evalcond[6]=((((-1.0)*cj12*sj10*x14245))+((sj10*x14247))+((r12*x14254))+((r11*x14250))+((r10*x14243))+(((-1.0)*r10*x14244*x14252))+((r11*x14242*x14249)));
evalcond[7]=((((-1.0)*x14245*x14246))+(((-1.0)*r01*x14243*x14252))+(((-1.0)*cj10*x14251))+(((-1.0)*r02*sj13*x14253))+((r01*x14244))+((r00*x14256))+((r00*x14249)));
evalcond[8]=((((-1.0)*r12*sj13*x14253))+(((-1.0)*sj10*sj12*x14245))+(((-1.0)*r11*x14243*x14252))+((r10*x14256))+((r11*x14244))+((r10*x14249))+(((-1.0)*x14248*x14251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x14257=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x14257;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x14257);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x14258=((1.0)*cj15);
IkReal x14259=((((-1.0)*r11*x14258))+(((-1.0)*r10*sj15)));
j14eval[0]=x14259;
j14eval[1]=IKsign(x14259);
j14eval[2]=((IKabs((((r21*sj15))+(((-1.0)*r20*x14258)))))+(IKabs(r22)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x14260=cj15*cj15;
IkReal x14261=(cj13*r01);
IkReal x14262=(cj15*sj15);
IkReal x14263=(cj13*r00);
IkReal x14264=((((-1.0)*cj13*r02*r22))+((r21*x14262*x14263))+((r20*x14261*x14262))+(((-1.0)*r20*x14260*x14263))+(((-1.0)*r21*x14261))+((r21*x14260*x14261)));
j14eval[0]=x14264;
j14eval[1]=IKsign(x14264);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x14265=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x14265;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x14265);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x14266=((1.0)*cj15);
IkReal x14267=((((-1.0)*r11*x14266))+(((-1.0)*r10*sj15)));
j14eval[0]=x14267;
j14eval[1]=IKsign(x14267);
j14eval[2]=((IKabs(r22))+(IKabs((((r21*sj15))+(((-1.0)*r20*x14266))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x14268=r01*r01;
IkReal x14269=cj15*cj15;
IkReal x14270=(r01*sj15);
IkReal x14271=(cj15*r00);
IkReal x14272=((((-1.0)*x14269*(r00*r00)))+(((-1.0)*x14268))+(((-1.0)*(r02*r02)))+((x14268*x14269))+(((2.0)*x14270*x14271)));
j14eval[0]=x14272;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x14270))+x14271))));
j14eval[2]=IKsign(x14272);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14273=r01*r01;
IkReal x14274=cj15*cj15;
IkReal x14275=(r01*sj15);
IkReal x14276=(cj15*r00);
CheckValue<IkReal> x14277 = IKatan2WithCheck(IkReal(((((-1.0)*x14275))+x14276)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14277.valid){
continue;
}
CheckValue<IkReal> x14278=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14273))+(((-1.0)*(r02*r02)))+((x14273*x14274))+(((2.0)*x14275*x14276))+(((-1.0)*x14274*(r00*r00))))),-1);
if(!x14278.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14277.value)+(((1.5707963267949)*(x14278.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14279=IKsin(j14);
IkReal x14280=IKcos(j14);
IkReal x14281=(r11*sj15);
IkReal x14282=((1.0)*cj11);
IkReal x14283=(cj15*r10);
IkReal x14284=(cj15*r00);
IkReal x14285=(r21*sj15);
IkReal x14286=(r01*sj15);
IkReal x14287=(cj15*r20);
IkReal x14288=((1.0)*x14280);
IkReal x14289=((1.0)*x14279);
evalcond[0]=((((-1.0)*r22*x14288))+((x14279*x14285))+(((-1.0)*x14287*x14289)));
evalcond[1]=((((-1.0)*x14283*x14289))+((x14279*x14281))+(((-1.0)*r12*x14288)));
evalcond[2]=((((-1.0)*r02*x14289))+(((-1.0)*x14286*x14288))+((x14280*x14284)));
evalcond[3]=((-1.0)+(((-1.0)*x14284*x14289))+((x14279*x14286))+(((-1.0)*r02*x14288)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r22*x14289))+(((-1.0)*cj12*x14282))+((x14280*x14287))+(((-1.0)*x14285*x14288)));
evalcond[5]=((((-1.0)*cj12*sj11))+((x14280*x14283))+(((-1.0)*r12*x14289))+(((-1.0)*sj12*x14282))+(((-1.0)*x14281*x14288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14290=((1.0)*cj15);
CheckValue<IkReal> x14291=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14290))+(((-1.0)*r10*sj15)))),-1);
if(!x14291.valid){
continue;
}
CheckValue<IkReal> x14292 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj15))+(((-1.0)*r20*x14290)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14292.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14291.value)))+(x14292.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14293=IKsin(j14);
IkReal x14294=IKcos(j14);
IkReal x14295=(r11*sj15);
IkReal x14296=((1.0)*cj11);
IkReal x14297=(cj15*r10);
IkReal x14298=(cj15*r00);
IkReal x14299=(r21*sj15);
IkReal x14300=(r01*sj15);
IkReal x14301=(cj15*r20);
IkReal x14302=((1.0)*x14294);
IkReal x14303=((1.0)*x14293);
evalcond[0]=((((-1.0)*r22*x14302))+((x14293*x14299))+(((-1.0)*x14301*x14303)));
evalcond[1]=((((-1.0)*x14297*x14303))+(((-1.0)*r12*x14302))+((x14293*x14295)));
evalcond[2]=((((-1.0)*r02*x14303))+(((-1.0)*x14300*x14302))+((x14294*x14298)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14302))+(((-1.0)*x14298*x14303))+((x14293*x14300)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r22*x14303))+(((-1.0)*x14299*x14302))+(((-1.0)*cj12*x14296))+((x14294*x14301)));
evalcond[5]=((((-1.0)*sj12*x14296))+(((-1.0)*x14295*x14302))+(((-1.0)*r12*x14303))+(((-1.0)*cj12*sj11))+((x14294*x14297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x14304=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x14304.valid){
continue;
}
CheckValue<IkReal> x14305 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14305.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14304.value)))+(x14305.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14306=IKsin(j14);
IkReal x14307=IKcos(j14);
IkReal x14308=(r11*sj15);
IkReal x14309=((1.0)*cj11);
IkReal x14310=(cj15*r10);
IkReal x14311=(cj15*r00);
IkReal x14312=(r21*sj15);
IkReal x14313=(r01*sj15);
IkReal x14314=(cj15*r20);
IkReal x14315=((1.0)*x14307);
IkReal x14316=((1.0)*x14306);
evalcond[0]=((((-1.0)*r22*x14315))+((x14306*x14312))+(((-1.0)*x14314*x14316)));
evalcond[1]=((((-1.0)*x14310*x14316))+((x14306*x14308))+(((-1.0)*r12*x14315)));
evalcond[2]=((((-1.0)*r02*x14316))+(((-1.0)*x14313*x14315))+((x14307*x14311)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14315))+((x14306*x14313))+(((-1.0)*x14311*x14316)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r22*x14316))+(((-1.0)*x14312*x14315))+(((-1.0)*cj12*x14309))+((x14307*x14314)));
evalcond[5]=((((-1.0)*x14308*x14315))+(((-1.0)*cj12*sj11))+((x14307*x14310))+(((-1.0)*sj12*x14309))+(((-1.0)*r12*x14316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x14317=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x14317;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x14317);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x14318=((1.0)*cj15);
IkReal x14319=((((-1.0)*r11*x14318))+(((-1.0)*r10*sj15)));
j14eval[0]=x14319;
j14eval[1]=IKsign(x14319);
j14eval[2]=((IKabs(r22))+(IKabs((((r21*sj15))+(((-1.0)*r20*x14318))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x14320=cj15*cj15;
IkReal x14321=r01*r01;
IkReal x14322=(cj15*r00);
IkReal x14323=(r01*sj15);
IkReal x14324=((((-2.0)*x14322*x14323))+((x14320*(r00*r00)))+(((-1.0)*x14320*x14321))+(r02*r02)+x14321);
j14eval[0]=x14324;
j14eval[1]=((IKabs(r02))+(IKabs((x14323+(((-1.0)*x14322))))));
j14eval[2]=IKsign(x14324);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14325=cj15*cj15;
IkReal x14326=r01*r01;
IkReal x14327=(r01*sj15);
IkReal x14328=(cj15*r00);
CheckValue<IkReal> x14329=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14325*x14326))+(((-2.0)*x14327*x14328))+(r02*r02)+x14326+((x14325*(r00*r00))))),-1);
if(!x14329.valid){
continue;
}
CheckValue<IkReal> x14330 = IKatan2WithCheck(IkReal((x14327+(((-1.0)*x14328)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14330.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14329.value)))+(x14330.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14331=IKcos(j14);
IkReal x14332=IKsin(j14);
IkReal x14333=((1.0)*cj11);
IkReal x14334=(cj15*r20);
IkReal x14335=(cj15*r10);
IkReal x14336=(cj15*r00);
IkReal x14337=((1.0)*x14331);
IkReal x14338=(sj15*x14331);
IkReal x14339=((1.0)*x14332);
IkReal x14340=(sj15*x14332);
evalcond[0]=(((r02*x14332))+(((-1.0)*x14336*x14337))+((r01*x14338)));
evalcond[1]=((((-1.0)*r22*x14337))+((r21*x14340))+(((-1.0)*x14334*x14339)));
evalcond[2]=((((-1.0)*r12*x14337))+(((-1.0)*x14335*x14339))+((r11*x14340)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14337))+((r01*x14340))+(((-1.0)*x14336*x14339)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x14334*x14337))+(((-1.0)*cj12*x14333))+((r22*x14332))+((r21*x14338)));
evalcond[5]=(((r11*x14338))+(((-1.0)*x14335*x14337))+((r12*x14332))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x14333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14341=((1.0)*cj15);
CheckValue<IkReal> x14342 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14341))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14342.valid){
continue;
}
CheckValue<IkReal> x14343=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14341))+(((-1.0)*r10*sj15)))),-1);
if(!x14343.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14342.value)+(((1.5707963267949)*(x14343.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14344=IKcos(j14);
IkReal x14345=IKsin(j14);
IkReal x14346=((1.0)*cj11);
IkReal x14347=(cj15*r20);
IkReal x14348=(cj15*r10);
IkReal x14349=(cj15*r00);
IkReal x14350=((1.0)*x14344);
IkReal x14351=(sj15*x14344);
IkReal x14352=((1.0)*x14345);
IkReal x14353=(sj15*x14345);
evalcond[0]=(((r01*x14351))+(((-1.0)*x14349*x14350))+((r02*x14345)));
evalcond[1]=((((-1.0)*x14347*x14352))+(((-1.0)*r22*x14350))+((r21*x14353)));
evalcond[2]=((((-1.0)*x14348*x14352))+((r11*x14353))+(((-1.0)*r12*x14350)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14350))+((r01*x14353))+(((-1.0)*x14349*x14352)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x14346))+(((-1.0)*x14347*x14350))+((r22*x14345))+((r21*x14351)));
evalcond[5]=((((-1.0)*sj12*x14346))+(((-1.0)*x14348*x14350))+((r11*x14351))+(((-1.0)*cj12*sj11))+((r12*x14345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x14354=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x14354.valid){
continue;
}
CheckValue<IkReal> x14355 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14355.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14354.value)))+(x14355.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14356=IKcos(j14);
IkReal x14357=IKsin(j14);
IkReal x14358=((1.0)*cj11);
IkReal x14359=(cj15*r20);
IkReal x14360=(cj15*r10);
IkReal x14361=(cj15*r00);
IkReal x14362=((1.0)*x14356);
IkReal x14363=(sj15*x14356);
IkReal x14364=((1.0)*x14357);
IkReal x14365=(sj15*x14357);
evalcond[0]=((((-1.0)*x14361*x14362))+((r02*x14357))+((r01*x14363)));
evalcond[1]=((((-1.0)*r22*x14362))+((r21*x14365))+(((-1.0)*x14359*x14364)));
evalcond[2]=(((r11*x14365))+(((-1.0)*x14360*x14364))+(((-1.0)*r12*x14362)));
evalcond[3]=((-1.0)+(((-1.0)*x14361*x14364))+(((-1.0)*r02*x14362))+((r01*x14365)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x14358))+((r21*x14363))+((r22*x14357))+(((-1.0)*x14359*x14362)));
evalcond[5]=(((r11*x14363))+((r12*x14357))+(((-1.0)*x14360*x14362))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x14358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14367 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14367)==0){
continue;
}
IkReal x14366=pow(x14367,-0.5);
CheckValue<IkReal> x14368 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14368.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14368.value));
IkReal gconst49=((-1.0)*r21*x14366);
IkReal gconst50=(r20*x14366);
CheckValue<IkReal> x14369 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14369.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x14369.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
CheckValue<IkReal> x14372 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14372.valid){
continue;
}
IkReal x14370=((-1.0)*(x14372.value));
IkReal x14371=x14366;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj15=gconst49;
cj15=gconst50;
j15=x14370;
IkReal gconst48=x14370;
IkReal gconst49=((-1.0)*r21*x14371);
IkReal gconst50=(r20*x14371);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
CheckValue<IkReal> x14375 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14375.valid){
continue;
}
IkReal x14373=((-1.0)*(x14375.value));
IkReal x14374=x14366;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj15=gconst49;
cj15=gconst50;
j15=x14373;
IkReal gconst48=x14373;
IkReal gconst49=((-1.0)*r21*x14374);
IkReal gconst50=(r20*x14374);
CheckValue<IkReal> x14383=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14383.valid){
continue;
}
IkReal x14376=x14383.value;
IkReal x14377=(sj13*x14376);
IkReal x14378=(r01*x14377);
IkReal x14379=(r11*x14377);
IkReal x14380=(r10*x14377);
IkReal x14381=(r00*x14377);
IkReal x14382=(r20*r21*x14377);
j14eval[0]=IKsign((((r10*r20*r21*x14378))+((r00*r20*r21*x14379))+((r02*r12*sj13))+((r00*x14380*(r20*r20)))+((r11*x14378*(r21*r21)))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14384=gconst49*gconst49;
IkReal x14385=gconst50*gconst50;
IkReal x14386=(cj13*r10);
IkReal x14387=(gconst49*gconst50);
IkReal x14388=((1.0)*r00);
IkReal x14389=(r10*sj13);
IkReal x14390=(r12*sj13);
IkReal x14391=(r01*r11);
IkReal x14392=((1.0)*cj13);
IkReal x14393=(r00*r11);
CheckValue<IkReal> x14394 = IKatan2WithCheck(IkReal((((gconst50*r01*x14390))+((gconst49*r00*x14390)))),IkReal((((sj13*x14387*x14391))+(((-1.0)*r01*x14385*x14389))+(((-1.0)*x14387*x14388*x14389))+((sj13*x14384*x14393)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14394.valid){
continue;
}
CheckValue<IkReal> x14395=IKPowWithIntegerCheck(IKsign((((cj13*x14387*x14393))+((r01*x14386*x14387))+(((-1.0)*x14384*x14391*x14392))+(((-1.0)*x14385*x14386*x14388))+(((-1.0)*r02*r12*x14392)))),-1);
if(!x14395.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14394.value)+(((1.5707963267949)*(x14395.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14396=IKsin(j14);
IkReal x14397=IKcos(j14);
IkReal x14398=(sj11*sj12);
IkReal x14399=(r11*sj13);
IkReal x14400=(gconst50*r00);
IkReal x14401=((1.0)*cj11);
IkReal x14402=(gconst49*r21);
IkReal x14403=(gconst49*r00);
IkReal x14404=(gconst49*r11);
IkReal x14405=(cj13*gconst50);
IkReal x14406=(gconst50*r20);
IkReal x14407=(gconst49*sj13);
IkReal x14408=(cj12*sj11);
IkReal x14409=(gconst50*sj13);
IkReal x14410=(gconst49*r01);
IkReal x14411=(cj13*gconst49);
IkReal x14412=(cj12*x14401);
IkReal x14413=((1.0)*x14396);
IkReal x14414=((1.0)*x14397);
IkReal x14415=(cj13*x14397);
IkReal x14416=(cj13*x14396);
IkReal x14417=(sj13*x14397);
evalcond[0]=((((-1.0)*x14406*x14413))+(((-1.0)*r22*x14414))+((x14396*x14402)));
evalcond[1]=((((-1.0)*gconst50*r10*x14413))+(((-1.0)*r12*x14414))+((x14396*x14404)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14414))+(((-1.0)*x14400*x14413))+((x14396*x14410)));
evalcond[3]=((((-1.0)*cj13*x14400*x14414))+((r02*x14416))+((r01*x14409))+((x14410*x14415))+((sj13*x14403)));
evalcond[4]=((((-1.0)*r02*sj13*x14413))+((r01*x14405))+((cj13*x14403))+((x14400*x14417))+(((-1.0)*r01*x14407*x14414)));
evalcond[5]=(((r21*x14409))+((r22*x14416))+((x14402*x14415))+x14408+(((-1.0)*r20*x14405*x14414))+((r20*x14407))+((cj11*sj12)));
evalcond[6]=(((x14404*x14415))+((r10*x14407))+(((-1.0)*x14412))+((r12*x14416))+((gconst50*x14399))+x14398+(((-1.0)*r10*x14405*x14414)));
evalcond[7]=(((r21*x14405))+(((-1.0)*r22*sj13*x14413))+(((-1.0)*x14412))+x14398+((x14406*x14417))+(((-1.0)*sj13*x14402*x14414))+((r20*x14411)));
evalcond[8]=(((r10*x14397*x14409))+(((-1.0)*sj12*x14401))+(((-1.0)*x14408))+((r11*x14405))+(((-1.0)*gconst49*x14399*x14414))+((r10*x14411))+(((-1.0)*r12*sj13*x14413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14418=gconst50*gconst50;
IkReal x14419=gconst49*gconst49;
IkReal x14420=(r11*sj13);
IkReal x14421=(r10*sj13);
IkReal x14422=(cj13*r00);
IkReal x14423=((1.0)*cj13*r10);
IkReal x14424=(gconst49*gconst50*r00);
IkReal x14425=(cj13*gconst50*r01);
CheckValue<IkReal> x14426=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14420*x14424))+((r02*r12*sj13))+((r01*x14419*x14420))+(((-1.0)*gconst49*gconst50*r01*x14421))+((r00*x14418*x14421)))),-1);
if(!x14426.valid){
continue;
}
CheckValue<IkReal> x14427 = IKatan2WithCheck(IkReal((((r12*x14425))+((gconst49*r12*x14422)))),IkReal(((((-1.0)*gconst49*gconst50*r10*x14422))+(((-1.0)*r01*x14418*x14423))+((gconst49*r11*x14425))+((r11*x14419*x14422)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14427.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14426.value)))+(x14427.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14428=IKsin(j14);
IkReal x14429=IKcos(j14);
IkReal x14430=(sj11*sj12);
IkReal x14431=(r11*sj13);
IkReal x14432=(gconst50*r00);
IkReal x14433=((1.0)*cj11);
IkReal x14434=(gconst49*r21);
IkReal x14435=(gconst49*r00);
IkReal x14436=(gconst49*r11);
IkReal x14437=(cj13*gconst50);
IkReal x14438=(gconst50*r20);
IkReal x14439=(gconst49*sj13);
IkReal x14440=(cj12*sj11);
IkReal x14441=(gconst50*sj13);
IkReal x14442=(gconst49*r01);
IkReal x14443=(cj13*gconst49);
IkReal x14444=(cj12*x14433);
IkReal x14445=((1.0)*x14428);
IkReal x14446=((1.0)*x14429);
IkReal x14447=(cj13*x14429);
IkReal x14448=(cj13*x14428);
IkReal x14449=(sj13*x14429);
evalcond[0]=(((x14428*x14434))+(((-1.0)*x14438*x14445))+(((-1.0)*r22*x14446)));
evalcond[1]=(((x14428*x14436))+(((-1.0)*r12*x14446))+(((-1.0)*gconst50*r10*x14445)));
evalcond[2]=((-1.0)+((x14428*x14442))+(((-1.0)*r02*x14446))+(((-1.0)*x14432*x14445)));
evalcond[3]=((((-1.0)*cj13*x14432*x14446))+((r01*x14441))+((x14442*x14447))+((sj13*x14435))+((r02*x14448)));
evalcond[4]=(((x14432*x14449))+((r01*x14437))+((cj13*x14435))+(((-1.0)*r01*x14439*x14446))+(((-1.0)*r02*sj13*x14445)));
evalcond[5]=(((r20*x14439))+(((-1.0)*r20*x14437*x14446))+((x14434*x14447))+x14440+((r22*x14448))+((r21*x14441))+((cj11*sj12)));
evalcond[6]=((((-1.0)*x14444))+((r12*x14448))+((gconst50*x14431))+((r10*x14439))+x14430+((x14436*x14447))+(((-1.0)*r10*x14437*x14446)));
evalcond[7]=(((r21*x14437))+(((-1.0)*x14444))+((r20*x14443))+(((-1.0)*sj13*x14434*x14446))+(((-1.0)*r22*sj13*x14445))+((x14438*x14449))+x14430);
evalcond[8]=(((r11*x14437))+((r10*x14429*x14441))+(((-1.0)*r12*sj13*x14445))+((r10*x14443))+(((-1.0)*x14440))+(((-1.0)*sj12*x14433))+(((-1.0)*gconst49*x14431*x14446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14450=((1.0)*gconst50);
CheckValue<IkReal> x14451=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14450))+(((-1.0)*gconst49*r10)))),-1);
if(!x14451.valid){
continue;
}
CheckValue<IkReal> x14452 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14452.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14451.value)))+(x14452.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14453=IKsin(j14);
IkReal x14454=IKcos(j14);
IkReal x14455=(sj11*sj12);
IkReal x14456=(r11*sj13);
IkReal x14457=(gconst50*r00);
IkReal x14458=((1.0)*cj11);
IkReal x14459=(gconst49*r21);
IkReal x14460=(gconst49*r00);
IkReal x14461=(gconst49*r11);
IkReal x14462=(cj13*gconst50);
IkReal x14463=(gconst50*r20);
IkReal x14464=(gconst49*sj13);
IkReal x14465=(cj12*sj11);
IkReal x14466=(gconst50*sj13);
IkReal x14467=(gconst49*r01);
IkReal x14468=(cj13*gconst49);
IkReal x14469=(cj12*x14458);
IkReal x14470=((1.0)*x14453);
IkReal x14471=((1.0)*x14454);
IkReal x14472=(cj13*x14454);
IkReal x14473=(cj13*x14453);
IkReal x14474=(sj13*x14454);
evalcond[0]=((((-1.0)*x14463*x14470))+((x14453*x14459))+(((-1.0)*r22*x14471)));
evalcond[1]=((((-1.0)*r12*x14471))+(((-1.0)*gconst50*r10*x14470))+((x14453*x14461)));
evalcond[2]=((-1.0)+(((-1.0)*x14457*x14470))+(((-1.0)*r02*x14471))+((x14453*x14467)));
evalcond[3]=(((r01*x14466))+((sj13*x14460))+((r02*x14473))+(((-1.0)*cj13*x14457*x14471))+((x14467*x14472)));
evalcond[4]=(((x14457*x14474))+(((-1.0)*r02*sj13*x14470))+((r01*x14462))+((cj13*x14460))+(((-1.0)*r01*x14464*x14471)));
evalcond[5]=(((x14459*x14472))+((r21*x14466))+(((-1.0)*r20*x14462*x14471))+((r22*x14473))+x14465+((r20*x14464))+((cj11*sj12)));
evalcond[6]=((((-1.0)*r10*x14462*x14471))+((r10*x14464))+((gconst50*x14456))+x14455+(((-1.0)*x14469))+((r12*x14473))+((x14461*x14472)));
evalcond[7]=(((r21*x14462))+(((-1.0)*r22*sj13*x14470))+x14455+(((-1.0)*x14469))+(((-1.0)*sj13*x14459*x14471))+((r20*x14468))+((x14463*x14474)));
evalcond[8]=(((r10*x14468))+(((-1.0)*gconst49*x14456*x14471))+(((-1.0)*x14465))+((r10*x14454*x14466))+((r11*x14462))+(((-1.0)*sj12*x14458))+(((-1.0)*r12*sj13*x14470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14476 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14476)==0){
continue;
}
IkReal x14475=pow(x14476,-0.5);
CheckValue<IkReal> x14477 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14477.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14477.value))));
IkReal gconst52=((1.0)*r21*x14475);
IkReal gconst53=((-1.0)*r20*x14475);
CheckValue<IkReal> x14478 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14478.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x14478.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
CheckValue<IkReal> x14481 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14481.valid){
continue;
}
IkReal x14479=((1.0)*(x14481.value));
IkReal x14480=x14475;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj15=gconst52;
cj15=gconst53;
j15=((3.14159265)+(((-1.0)*x14479)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14479)));
IkReal gconst52=((1.0)*r21*x14480);
IkReal gconst53=((-1.0)*r20*x14480);
j14eval[0]=0;
j14eval[1]=r12;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
CheckValue<IkReal> x14484 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14484.valid){
continue;
}
IkReal x14482=((1.0)*(x14484.value));
IkReal x14483=x14475;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj15=gconst52;
cj15=gconst53;
j15=((3.14159265)+(((-1.0)*x14482)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14482)));
IkReal gconst52=((1.0)*r21*x14483);
IkReal gconst53=((-1.0)*r20*x14483);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
CheckValue<IkReal> x14487 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14487.valid){
continue;
}
IkReal x14485=((1.0)*(x14487.value));
IkReal x14486=x14475;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj15=gconst52;
cj15=gconst53;
j15=((3.14159265)+(((-1.0)*x14485)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14485)));
IkReal gconst52=((1.0)*r21*x14486);
IkReal gconst53=((-1.0)*r20*x14486);
j14eval[0]=r12;
j14eval[1]=sj13;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14488=gconst52*gconst52;
IkReal x14489=gconst53*gconst53;
IkReal x14490=((1.0)*r20);
IkReal x14491=(cj13*r21);
IkReal x14492=(r00*sj13);
IkReal x14493=(r01*sj13);
IkReal x14494=(gconst52*gconst53);
IkReal x14495=(r00*x14494);
CheckValue<IkReal> x14496=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj13*r02*r22))+(((-1.0)*cj13*r00*x14489*x14490))+((x14491*x14495))+((cj13*r01*r20*x14494))+(((-1.0)*r01*x14488*x14491)))),-1);
if(!x14496.valid){
continue;
}
CheckValue<IkReal> x14497 = IKatan2WithCheck(IkReal((((gconst52*r22*x14492))+((gconst53*r22*x14493)))),IkReal((((r21*x14493*x14494))+((r21*x14488*x14492))+(((-1.0)*x14490*x14492*x14494))+(((-1.0)*x14489*x14490*x14493)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14497.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14496.value)))+(x14497.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14498=IKsin(j14);
IkReal x14499=IKcos(j14);
IkReal x14500=(sj11*sj12);
IkReal x14501=(r10*sj13);
IkReal x14502=((1.0)*cj12);
IkReal x14503=(cj11*sj12);
IkReal x14504=(cj13*gconst53);
IkReal x14505=(gconst52*sj13);
IkReal x14506=((1.0)*sj13);
IkReal x14507=(gconst52*r11);
IkReal x14508=(cj13*gconst52);
IkReal x14509=(gconst53*sj13);
IkReal x14510=(cj11*x14502);
IkReal x14511=((1.0)*x14499);
IkReal x14512=(gconst53*x14499);
IkReal x14513=(r22*x14498);
IkReal x14514=(cj13*x14499);
IkReal x14515=(gconst52*x14498);
IkReal x14516=(r02*x14498);
IkReal x14517=(r12*x14498);
IkReal x14518=((1.0)*gconst53*x14498);
evalcond[0]=((((-1.0)*r22*x14511))+((r21*x14515))+(((-1.0)*r20*x14518)));
evalcond[1]=((((-1.0)*r10*x14518))+((x14498*x14507))+(((-1.0)*r12*x14511)));
evalcond[2]=((-1.0)+((r01*x14515))+(((-1.0)*r00*x14518))+(((-1.0)*r02*x14511)));
evalcond[3]=(((cj13*x14516))+((r00*x14505))+((r01*x14499*x14508))+((r01*x14509))+(((-1.0)*r00*x14504*x14511)));
evalcond[4]=((((-1.0)*r01*x14505*x14511))+((r00*x14499*x14509))+((r00*x14508))+((r01*x14504))+(((-1.0)*x14506*x14516)));
evalcond[5]=((((-1.0)*r20*x14504*x14511))+((r20*x14505))+((cj13*x14513))+((r21*x14509))+x14503+((cj12*sj11))+((r21*x14499*x14508)));
evalcond[6]=(((cj13*x14517))+((gconst52*x14501))+x14500+(((-1.0)*x14510))+(((-1.0)*r10*x14504*x14511))+((r11*x14509))+((x14507*x14514)));
evalcond[7]=(((r20*x14508))+((r20*x14499*x14509))+((r21*x14504))+x14500+(((-1.0)*r21*x14505*x14511))+(((-1.0)*x14510))+(((-1.0)*x14506*x14513)));
evalcond[8]=((((-1.0)*sj11*x14502))+(((-1.0)*x14503))+((r10*x14508))+((x14501*x14512))+((r11*x14504))+(((-1.0)*x14506*x14517))+(((-1.0)*r11*x14505*x14511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14519=((1.0)*gconst53);
CheckValue<IkReal> x14520 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst52*r21))+(((-1.0)*r20*x14519)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14520.valid){
continue;
}
CheckValue<IkReal> x14521=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst52*r10))+(((-1.0)*r11*x14519)))),-1);
if(!x14521.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14520.value)+(((1.5707963267949)*(x14521.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14522=IKsin(j14);
IkReal x14523=IKcos(j14);
IkReal x14524=(sj11*sj12);
IkReal x14525=(r10*sj13);
IkReal x14526=((1.0)*cj12);
IkReal x14527=(cj11*sj12);
IkReal x14528=(cj13*gconst53);
IkReal x14529=(gconst52*sj13);
IkReal x14530=((1.0)*sj13);
IkReal x14531=(gconst52*r11);
IkReal x14532=(cj13*gconst52);
IkReal x14533=(gconst53*sj13);
IkReal x14534=(cj11*x14526);
IkReal x14535=((1.0)*x14523);
IkReal x14536=(gconst53*x14523);
IkReal x14537=(r22*x14522);
IkReal x14538=(cj13*x14523);
IkReal x14539=(gconst52*x14522);
IkReal x14540=(r02*x14522);
IkReal x14541=(r12*x14522);
IkReal x14542=((1.0)*gconst53*x14522);
evalcond[0]=((((-1.0)*r22*x14535))+(((-1.0)*r20*x14542))+((r21*x14539)));
evalcond[1]=((((-1.0)*r10*x14542))+(((-1.0)*r12*x14535))+((x14522*x14531)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x14542))+((r01*x14539))+(((-1.0)*r02*x14535)));
evalcond[3]=(((r00*x14529))+((cj13*x14540))+((r01*x14533))+(((-1.0)*r00*x14528*x14535))+((r01*x14523*x14532)));
evalcond[4]=(((r01*x14528))+((r00*x14532))+(((-1.0)*x14530*x14540))+(((-1.0)*r01*x14529*x14535))+((r00*x14523*x14533)));
evalcond[5]=(((cj13*x14537))+((r21*x14523*x14532))+((r20*x14529))+((r21*x14533))+x14527+(((-1.0)*r20*x14528*x14535))+((cj12*sj11)));
evalcond[6]=((((-1.0)*x14534))+((r11*x14533))+((cj13*x14541))+(((-1.0)*r10*x14528*x14535))+x14524+((gconst52*x14525))+((x14531*x14538)));
evalcond[7]=((((-1.0)*x14534))+(((-1.0)*x14530*x14537))+((r20*x14523*x14533))+x14524+(((-1.0)*r21*x14529*x14535))+((r21*x14528))+((r20*x14532)));
evalcond[8]=((((-1.0)*x14527))+(((-1.0)*r11*x14529*x14535))+(((-1.0)*x14530*x14541))+((r11*x14528))+(((-1.0)*sj11*x14526))+((x14525*x14536))+((r10*x14532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x14543 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14543.valid){
continue;
}
CheckValue<IkReal> x14544=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14544.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14543.value)+(((1.5707963267949)*(x14544.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14545=IKsin(j14);
IkReal x14546=IKcos(j14);
IkReal x14547=(sj11*sj12);
IkReal x14548=(r10*sj13);
IkReal x14549=((1.0)*cj12);
IkReal x14550=(cj11*sj12);
IkReal x14551=(cj13*gconst53);
IkReal x14552=(gconst52*sj13);
IkReal x14553=((1.0)*sj13);
IkReal x14554=(gconst52*r11);
IkReal x14555=(cj13*gconst52);
IkReal x14556=(gconst53*sj13);
IkReal x14557=(cj11*x14549);
IkReal x14558=((1.0)*x14546);
IkReal x14559=(gconst53*x14546);
IkReal x14560=(r22*x14545);
IkReal x14561=(cj13*x14546);
IkReal x14562=(gconst52*x14545);
IkReal x14563=(r02*x14545);
IkReal x14564=(r12*x14545);
IkReal x14565=((1.0)*gconst53*x14545);
evalcond[0]=(((r21*x14562))+(((-1.0)*r22*x14558))+(((-1.0)*r20*x14565)));
evalcond[1]=((((-1.0)*r10*x14565))+((x14545*x14554))+(((-1.0)*r12*x14558)));
evalcond[2]=((-1.0)+((r01*x14562))+(((-1.0)*r02*x14558))+(((-1.0)*r00*x14565)));
evalcond[3]=((((-1.0)*r00*x14551*x14558))+((r01*x14546*x14555))+((r01*x14556))+((r00*x14552))+((cj13*x14563)));
evalcond[4]=(((r00*x14546*x14556))+(((-1.0)*x14553*x14563))+(((-1.0)*r01*x14552*x14558))+((r01*x14551))+((r00*x14555)));
evalcond[5]=(((r20*x14552))+((r21*x14546*x14555))+(((-1.0)*r20*x14551*x14558))+x14550+((cj12*sj11))+((cj13*x14560))+((r21*x14556)));
evalcond[6]=(((gconst52*x14548))+(((-1.0)*x14557))+(((-1.0)*r10*x14551*x14558))+x14547+((x14554*x14561))+((r11*x14556))+((cj13*x14564)));
evalcond[7]=(((r20*x14546*x14556))+((r20*x14555))+(((-1.0)*x14553*x14560))+(((-1.0)*x14557))+x14547+((r21*x14551))+(((-1.0)*r21*x14552*x14558)));
evalcond[8]=((((-1.0)*x14553*x14564))+(((-1.0)*r11*x14552*x14558))+((r10*x14555))+(((-1.0)*x14550))+((r11*x14551))+((x14548*x14559))+(((-1.0)*sj11*x14549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x14566=((-1.0)*pz);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14566);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14566);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14567=(r01*sj15);
IkReal x14568=((1.0)*cj15*r00);
j14eval[0]=((((-1.0)*x14568))+x14567);
j14eval[1]=((((-1.0)*cj13*x14568))+((cj13*x14567)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x14569=((-1.0)*pz);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14569);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14569);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14570=(cj15*r00);
IkReal x14571=(r01*sj15);
j14eval[0]=(x14571+(((-1.0)*x14570)));
j14eval[1]=((((-1.0)*sj13*x14571))+((sj13*x14570)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x14572=((-1.0)*pz);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14572);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14572);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j14eval[0]=cj13;
j14eval[1]=r22;
j14eval[2]=((((-1.0)*cj13*cj15*r00))+((cj13*r01*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14573=((1.0)*sj13);
CheckValue<IkReal> x14574=IKPowWithIntegerCheck(cj13,-1);
if(!x14574.valid){
continue;
}
CheckValue<IkReal> x14575=IKPowWithIntegerCheck(r22,-1);
if(!x14575.valid){
continue;
}
CheckValue<IkReal> x14576=IKPowWithIntegerCheck(((((-1.0)*cj13*cj15*r00))+((cj13*r01*sj15))),-1);
if(!x14576.valid){
continue;
}
if( IKabs(((x14574.value)*(x14575.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14576.value)*(((((-1.0)*cj15*r01*x14573))+(((-1.0)*r00*sj15*x14573)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14574.value)*(x14575.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*sj11))))))+IKsqr(((x14576.value)*(((((-1.0)*cj15*r01*x14573))+(((-1.0)*r00*sj15*x14573))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x14574.value)*(x14575.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*sj11))))), ((x14576.value)*(((((-1.0)*cj15*r01*x14573))+(((-1.0)*r00*sj15*x14573))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14577=IKsin(j14);
IkReal x14578=IKcos(j14);
IkReal x14579=(sj11*sj12);
IkReal x14580=((1.0)*sj13);
IkReal x14581=((1.0)*cj11);
IkReal x14582=(r00*sj15);
IkReal x14583=(cj13*r01);
IkReal x14584=(cj12*sj11);
IkReal x14585=(r10*sj13);
IkReal x14586=(cj13*r11);
IkReal x14587=(cj15*sj13);
IkReal x14588=((1.0)*cj13);
IkReal x14589=(cj12*x14581);
IkReal x14590=(sj15*x14578);
IkReal x14591=(r22*x14577);
IkReal x14592=(cj15*x14578);
IkReal x14593=(sj15*x14577);
IkReal x14594=((1.0)*cj15*x14577);
evalcond[0]=((-1.0)*r22*x14578);
evalcond[1]=(((cj13*x14591))+x14584+((cj11*sj12)));
evalcond[2]=((((-1.0)*r10*x14594))+((r11*x14593)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x14594))+((r01*x14593)));
evalcond[4]=((((-1.0)*x14589))+x14579+(((-1.0)*x14580*x14591)));
evalcond[5]=((((-1.0)*r00*x14588*x14592))+((sj13*x14582))+((r01*x14587))+((x14583*x14590)));
evalcond[6]=(((cj13*x14582))+((cj15*x14583))+(((-1.0)*r01*x14580*x14590))+((r00*x14578*x14587)));
evalcond[7]=((((-1.0)*x14589))+(((-1.0)*r10*x14588*x14592))+x14579+((x14586*x14590))+((r11*x14587))+((sj15*x14585)));
evalcond[8]=((((-1.0)*sj12*x14581))+(((-1.0)*r11*x14580*x14590))+(((-1.0)*x14584))+((x14585*x14592))+((cj13*r10*sj15))+((cj15*x14586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14595=((1.0)*r01);
IkReal x14596=((1.0)*r00);
CheckValue<IkReal> x14597=IKPowWithIntegerCheck(((((-1.0)*cj15*x14596))+((r01*sj15))),-1);
if(!x14597.valid){
continue;
}
CheckValue<IkReal> x14598=IKPowWithIntegerCheck((((cj15*r00*sj13))+(((-1.0)*sj13*sj15*x14595))),-1);
if(!x14598.valid){
continue;
}
if( IKabs(x14597.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14598.value)*(((((-1.0)*cj13*sj15*x14596))+(((-1.0)*cj13*cj15*x14595)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14597.value)+IKsqr(((x14598.value)*(((((-1.0)*cj13*sj15*x14596))+(((-1.0)*cj13*cj15*x14595))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(x14597.value, ((x14598.value)*(((((-1.0)*cj13*sj15*x14596))+(((-1.0)*cj13*cj15*x14595))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14599=IKsin(j14);
IkReal x14600=IKcos(j14);
IkReal x14601=(sj11*sj12);
IkReal x14602=((1.0)*sj13);
IkReal x14603=((1.0)*cj11);
IkReal x14604=(r00*sj15);
IkReal x14605=(cj13*r01);
IkReal x14606=(cj12*sj11);
IkReal x14607=(r10*sj13);
IkReal x14608=(cj13*r11);
IkReal x14609=(cj15*sj13);
IkReal x14610=((1.0)*cj13);
IkReal x14611=(cj12*x14603);
IkReal x14612=(sj15*x14600);
IkReal x14613=(r22*x14599);
IkReal x14614=(cj15*x14600);
IkReal x14615=(sj15*x14599);
IkReal x14616=((1.0)*cj15*x14599);
evalcond[0]=((-1.0)*r22*x14600);
evalcond[1]=(((cj13*x14613))+x14606+((cj11*sj12)));
evalcond[2]=((((-1.0)*r10*x14616))+((r11*x14615)));
evalcond[3]=((-1.0)+((r01*x14615))+(((-1.0)*r00*x14616)));
evalcond[4]=(x14601+(((-1.0)*x14602*x14613))+(((-1.0)*x14611)));
evalcond[5]=((((-1.0)*r00*x14610*x14614))+((r01*x14609))+((sj13*x14604))+((x14605*x14612)));
evalcond[6]=(((r00*x14600*x14609))+((cj13*x14604))+((cj15*x14605))+(((-1.0)*r01*x14602*x14612)));
evalcond[7]=(((x14608*x14612))+((sj15*x14607))+x14601+((r11*x14609))+(((-1.0)*x14611))+(((-1.0)*r10*x14610*x14614)));
evalcond[8]=(((x14607*x14614))+((cj15*x14608))+(((-1.0)*sj12*x14603))+(((-1.0)*x14606))+((cj13*r10*sj15))+(((-1.0)*r11*x14602*x14612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14617=(r01*sj15);
IkReal x14618=((1.0)*sj13);
IkReal x14619=((1.0)*cj15*r00);
CheckValue<IkReal> x14620=IKPowWithIntegerCheck((x14617+(((-1.0)*x14619))),-1);
if(!x14620.valid){
continue;
}
CheckValue<IkReal> x14621=IKPowWithIntegerCheck(((((-1.0)*cj13*x14619))+((cj13*x14617))),-1);
if(!x14621.valid){
continue;
}
if( IKabs(x14620.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14621.value)*(((((-1.0)*cj15*r01*x14618))+(((-1.0)*r00*sj15*x14618)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14620.value)+IKsqr(((x14621.value)*(((((-1.0)*cj15*r01*x14618))+(((-1.0)*r00*sj15*x14618))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(x14620.value, ((x14621.value)*(((((-1.0)*cj15*r01*x14618))+(((-1.0)*r00*sj15*x14618))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14622=IKsin(j14);
IkReal x14623=IKcos(j14);
IkReal x14624=(sj11*sj12);
IkReal x14625=((1.0)*sj13);
IkReal x14626=((1.0)*cj11);
IkReal x14627=(r00*sj15);
IkReal x14628=(cj13*r01);
IkReal x14629=(cj12*sj11);
IkReal x14630=(r10*sj13);
IkReal x14631=(cj13*r11);
IkReal x14632=(cj15*sj13);
IkReal x14633=((1.0)*cj13);
IkReal x14634=(cj12*x14626);
IkReal x14635=(sj15*x14623);
IkReal x14636=(r22*x14622);
IkReal x14637=(cj15*x14623);
IkReal x14638=(sj15*x14622);
IkReal x14639=((1.0)*cj15*x14622);
evalcond[0]=((-1.0)*r22*x14623);
evalcond[1]=(((cj13*x14636))+x14629+((cj11*sj12)));
evalcond[2]=(((r11*x14638))+(((-1.0)*r10*x14639)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x14639))+((r01*x14638)));
evalcond[4]=((((-1.0)*x14634))+x14624+(((-1.0)*x14625*x14636)));
evalcond[5]=((((-1.0)*r00*x14633*x14637))+((r01*x14632))+((x14628*x14635))+((sj13*x14627)));
evalcond[6]=(((r00*x14623*x14632))+(((-1.0)*r01*x14625*x14635))+((cj15*x14628))+((cj13*x14627)));
evalcond[7]=((((-1.0)*x14634))+((x14631*x14635))+((sj15*x14630))+(((-1.0)*r10*x14633*x14637))+((r11*x14632))+x14624);
evalcond[8]=((((-1.0)*sj12*x14626))+((x14630*x14637))+(((-1.0)*r11*x14625*x14635))+((cj13*r10*sj15))+(((-1.0)*x14629))+((cj15*x14631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14640=cj15*cj15;
IkReal x14641=(cj13*r20);
IkReal x14642=(cj15*sj15);
IkReal x14643=(r00*r21);
IkReal x14644=(r20*sj13);
IkReal x14645=(r22*sj13);
IkReal x14646=((1.0)*x14640);
IkReal x14647=(cj13*r01*r21);
CheckValue<IkReal> x14648=IKPowWithIntegerCheck(IKsign((((cj13*x14642*x14643))+(((-1.0)*cj13*r02*r22))+(((-1.0)*r00*x14641*x14646))+(((-1.0)*x14647))+((x14640*x14647))+((r01*x14641*x14642)))),-1);
if(!x14648.valid){
continue;
}
CheckValue<IkReal> x14649 = IKatan2WithCheck(IkReal((((cj15*r01*x14645))+((r00*sj15*x14645)))),IkReal((((r01*r21*sj13*x14642))+(((-1.0)*r01*x14644*x14646))+((sj13*x14643))+(((-1.0)*r00*x14642*x14644))+(((-1.0)*sj13*x14643*x14646)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14649.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14648.value)))+(x14649.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14650=IKsin(j14);
IkReal x14651=IKcos(j14);
IkReal x14652=(sj11*sj12);
IkReal x14653=(cj13*r21);
IkReal x14654=((1.0)*r02);
IkReal x14655=((1.0)*sj13);
IkReal x14656=((1.0)*cj11);
IkReal x14657=(r00*sj15);
IkReal x14658=(cj13*cj15);
IkReal x14659=(cj12*sj11);
IkReal x14660=(r10*sj13);
IkReal x14661=((1.0)*r00);
IkReal x14662=(cj15*sj13);
IkReal x14663=(r20*sj15);
IkReal x14664=((1.0)*r10);
IkReal x14665=(cj12*x14656);
IkReal x14666=(sj15*x14651);
IkReal x14667=(r22*x14650);
IkReal x14668=(cj13*x14650);
IkReal x14669=(cj15*x14651);
IkReal x14670=(cj15*x14650);
IkReal x14671=(sj15*x14650);
IkReal x14672=((1.0)*x14651);
evalcond[0]=(((r21*x14671))+(((-1.0)*r22*x14672))+(((-1.0)*r20*x14670)));
evalcond[1]=((((-1.0)*r12*x14672))+((r11*x14671))+(((-1.0)*x14664*x14670)));
evalcond[2]=((-1.0)+(((-1.0)*x14661*x14670))+((r01*x14671))+(((-1.0)*x14651*x14654)));
evalcond[3]=(((r02*x14668))+((sj13*x14657))+((r01*x14662))+((cj13*r01*x14666))+(((-1.0)*x14651*x14658*x14661)));
evalcond[4]=(((cj13*x14657))+((r00*x14651*x14662))+(((-1.0)*r01*x14655*x14666))+((r01*x14658))+(((-1.0)*sj13*x14650*x14654)));
evalcond[5]=((((-1.0)*r20*x14658*x14672))+((r21*x14662))+((cj13*x14667))+((sj13*x14663))+x14659+((x14653*x14666))+((cj11*sj12)));
evalcond[6]=(((sj15*x14660))+x14652+((r11*x14662))+((cj13*r11*x14666))+((r12*x14668))+(((-1.0)*x14665))+(((-1.0)*x14651*x14658*x14664)));
evalcond[7]=(((cj15*x14653))+(((-1.0)*x14655*x14667))+(((-1.0)*r21*x14655*x14666))+((cj13*x14663))+((r20*x14651*x14662))+x14652+(((-1.0)*x14665)));
evalcond[8]=((((-1.0)*x14659))+((x14660*x14669))+(((-1.0)*r11*x14655*x14666))+(((-1.0)*r12*x14650*x14655))+((cj13*r10*sj15))+(((-1.0)*sj12*x14656))+((r11*x14658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14673=((1.0)*cj15);
CheckValue<IkReal> x14674 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj15))+(((-1.0)*r20*x14673)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14674.valid){
continue;
}
CheckValue<IkReal> x14675=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14673))+(((-1.0)*r10*sj15)))),-1);
if(!x14675.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14674.value)+(((1.5707963267949)*(x14675.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14676=IKsin(j14);
IkReal x14677=IKcos(j14);
IkReal x14678=(sj11*sj12);
IkReal x14679=(cj13*r21);
IkReal x14680=((1.0)*r02);
IkReal x14681=((1.0)*sj13);
IkReal x14682=((1.0)*cj11);
IkReal x14683=(r00*sj15);
IkReal x14684=(cj13*cj15);
IkReal x14685=(cj12*sj11);
IkReal x14686=(r10*sj13);
IkReal x14687=((1.0)*r00);
IkReal x14688=(cj15*sj13);
IkReal x14689=(r20*sj15);
IkReal x14690=((1.0)*r10);
IkReal x14691=(cj12*x14682);
IkReal x14692=(sj15*x14677);
IkReal x14693=(r22*x14676);
IkReal x14694=(cj13*x14676);
IkReal x14695=(cj15*x14677);
IkReal x14696=(cj15*x14676);
IkReal x14697=(sj15*x14676);
IkReal x14698=((1.0)*x14677);
evalcond[0]=((((-1.0)*r22*x14698))+((r21*x14697))+(((-1.0)*r20*x14696)));
evalcond[1]=(((r11*x14697))+(((-1.0)*r12*x14698))+(((-1.0)*x14690*x14696)));
evalcond[2]=((-1.0)+(((-1.0)*x14677*x14680))+((r01*x14697))+(((-1.0)*x14687*x14696)));
evalcond[3]=(((r01*x14688))+((sj13*x14683))+((cj13*r01*x14692))+((r02*x14694))+(((-1.0)*x14677*x14684*x14687)));
evalcond[4]=(((r01*x14684))+(((-1.0)*sj13*x14676*x14680))+((r00*x14677*x14688))+(((-1.0)*r01*x14681*x14692))+((cj13*x14683)));
evalcond[5]=(((x14679*x14692))+((sj13*x14689))+x14685+(((-1.0)*r20*x14684*x14698))+((cj11*sj12))+((cj13*x14693))+((r21*x14688)));
evalcond[6]=(((r11*x14688))+((cj13*r11*x14692))+((r12*x14694))+(((-1.0)*x14691))+x14678+((sj15*x14686))+(((-1.0)*x14677*x14684*x14690)));
evalcond[7]=(((r20*x14677*x14688))+(((-1.0)*x14681*x14693))+((cj15*x14679))+(((-1.0)*x14691))+(((-1.0)*r21*x14681*x14692))+x14678+((cj13*x14689)));
evalcond[8]=((((-1.0)*sj12*x14682))+((r11*x14684))+((x14686*x14695))+(((-1.0)*r12*x14676*x14681))+((cj13*r10*sj15))+(((-1.0)*x14685))+(((-1.0)*r11*x14681*x14692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x14699=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x14699.valid){
continue;
}
CheckValue<IkReal> x14700 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14700.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14699.value)))+(x14700.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14701=IKsin(j14);
IkReal x14702=IKcos(j14);
IkReal x14703=(sj11*sj12);
IkReal x14704=(cj13*r21);
IkReal x14705=((1.0)*r02);
IkReal x14706=((1.0)*sj13);
IkReal x14707=((1.0)*cj11);
IkReal x14708=(r00*sj15);
IkReal x14709=(cj13*cj15);
IkReal x14710=(cj12*sj11);
IkReal x14711=(r10*sj13);
IkReal x14712=((1.0)*r00);
IkReal x14713=(cj15*sj13);
IkReal x14714=(r20*sj15);
IkReal x14715=((1.0)*r10);
IkReal x14716=(cj12*x14707);
IkReal x14717=(sj15*x14702);
IkReal x14718=(r22*x14701);
IkReal x14719=(cj13*x14701);
IkReal x14720=(cj15*x14702);
IkReal x14721=(cj15*x14701);
IkReal x14722=(sj15*x14701);
IkReal x14723=((1.0)*x14702);
evalcond[0]=(((r21*x14722))+(((-1.0)*r20*x14721))+(((-1.0)*r22*x14723)));
evalcond[1]=((((-1.0)*r12*x14723))+(((-1.0)*x14715*x14721))+((r11*x14722)));
evalcond[2]=((-1.0)+((r01*x14722))+(((-1.0)*x14702*x14705))+(((-1.0)*x14712*x14721)));
evalcond[3]=((((-1.0)*x14702*x14709*x14712))+((r02*x14719))+((sj13*x14708))+((cj13*r01*x14717))+((r01*x14713)));
evalcond[4]=(((r01*x14709))+(((-1.0)*sj13*x14701*x14705))+(((-1.0)*r01*x14706*x14717))+((r00*x14702*x14713))+((cj13*x14708)));
evalcond[5]=(((r21*x14713))+((cj13*x14718))+x14710+(((-1.0)*r20*x14709*x14723))+((sj13*x14714))+((cj11*sj12))+((x14704*x14717)));
evalcond[6]=(((r12*x14719))+((r11*x14713))+(((-1.0)*x14702*x14709*x14715))+((sj15*x14711))+(((-1.0)*x14716))+x14703+((cj13*r11*x14717)));
evalcond[7]=(((cj15*x14704))+((r20*x14702*x14713))+((cj13*x14714))+(((-1.0)*x14706*x14718))+(((-1.0)*x14716))+x14703+(((-1.0)*r21*x14706*x14717)));
evalcond[8]=((((-1.0)*r12*x14701*x14706))+((x14711*x14720))+(((-1.0)*r11*x14706*x14717))+((r11*x14709))+(((-1.0)*sj12*x14707))+(((-1.0)*x14710))+((cj13*r10*sj15)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x14724=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x14724;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x14724);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x14725=((1.0)*cj15);
IkReal x14726=((((-1.0)*r21*x14725))+(((-1.0)*r20*sj15)));
j14eval[0]=x14726;
j14eval[1]=IKsign(x14726);
j14eval[2]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*r10*x14725))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x14727=cj15*cj15;
IkReal x14728=(cj13*r01);
IkReal x14729=(cj15*sj15);
IkReal x14730=(cj13*r00);
IkReal x14731=((((-1.0)*cj13*r02*r22))+((r21*x14727*x14728))+((r21*x14729*x14730))+(((-1.0)*r21*x14728))+((r20*x14728*x14729))+(((-1.0)*r20*x14727*x14730)));
j14eval[0]=x14731;
j14eval[1]=IKsign(x14731);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x14732=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x14732;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x14732);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x14733=((1.0)*cj15);
IkReal x14734=((((-1.0)*r21*x14733))+(((-1.0)*r20*sj15)));
j14eval[0]=x14734;
j14eval[1]=IKsign(x14734);
j14eval[2]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*r10*x14733))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x14735=cj15*cj15;
IkReal x14736=r01*r01;
IkReal x14737=(cj15*r00);
IkReal x14738=(r01*sj15);
IkReal x14739=(((x14735*(r00*r00)))+(((-1.0)*x14735*x14736))+x14736+(((-2.0)*x14737*x14738))+(r02*r02));
j14eval[0]=x14739;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x14738))+x14737))));
j14eval[2]=IKsign(x14739);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14740=cj15*cj15;
IkReal x14741=r01*r01;
IkReal x14742=(r01*sj15);
IkReal x14743=(cj15*r00);
CheckValue<IkReal> x14744=IKPowWithIntegerCheck(IKsign(((((-2.0)*x14742*x14743))+(((-1.0)*x14740*x14741))+x14741+(r02*r02)+((x14740*(r00*r00))))),-1);
if(!x14744.valid){
continue;
}
CheckValue<IkReal> x14745 = IKatan2WithCheck(IkReal(((((-1.0)*x14742))+x14743)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14745.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14744.value)))+(x14745.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14746=IKsin(j14);
IkReal x14747=IKcos(j14);
IkReal x14748=(r11*sj15);
IkReal x14749=(cj15*r10);
IkReal x14750=(cj15*r00);
IkReal x14751=(r21*sj15);
IkReal x14752=(r01*sj15);
IkReal x14753=(cj15*r20);
IkReal x14754=((1.0)*x14747);
IkReal x14755=((1.0)*x14746);
evalcond[0]=((((-1.0)*x14753*x14755))+((x14746*x14751))+(((-1.0)*r22*x14754)));
evalcond[1]=((((-1.0)*r12*x14754))+((x14746*x14748))+(((-1.0)*x14749*x14755)));
evalcond[2]=(((x14747*x14750))+(((-1.0)*r02*x14755))+(((-1.0)*x14752*x14754)));
evalcond[3]=((1.0)+((x14746*x14752))+(((-1.0)*r02*x14754))+(((-1.0)*x14750*x14755)));
evalcond[4]=(((x14747*x14749))+(((-1.0)*r12*x14755))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*x14748*x14754)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x14751*x14754))+((x14747*x14753))+(((-1.0)*r22*x14755))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14756=((1.0)*cj15);
CheckValue<IkReal> x14757=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15))+(((-1.0)*r21*x14756)))),-1);
if(!x14757.valid){
continue;
}
CheckValue<IkReal> x14758 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*r10*x14756)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14758.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14757.value)))+(x14758.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14759=IKsin(j14);
IkReal x14760=IKcos(j14);
IkReal x14761=(r11*sj15);
IkReal x14762=(cj15*r10);
IkReal x14763=(cj15*r00);
IkReal x14764=(r21*sj15);
IkReal x14765=(r01*sj15);
IkReal x14766=(cj15*r20);
IkReal x14767=((1.0)*x14760);
IkReal x14768=((1.0)*x14759);
evalcond[0]=((((-1.0)*x14766*x14768))+(((-1.0)*r22*x14767))+((x14759*x14764)));
evalcond[1]=((((-1.0)*r12*x14767))+(((-1.0)*x14762*x14768))+((x14759*x14761)));
evalcond[2]=((((-1.0)*r02*x14768))+((x14760*x14763))+(((-1.0)*x14765*x14767)));
evalcond[3]=((1.0)+(((-1.0)*r02*x14767))+(((-1.0)*x14763*x14768))+((x14759*x14765)));
evalcond[4]=((((-1.0)*r12*x14768))+((x14760*x14762))+((cj12*sj11))+(((-1.0)*x14761*x14767))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x14764*x14767))+((x14760*x14766))+(((-1.0)*r22*x14768))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x14769=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x14769.valid){
continue;
}
CheckValue<IkReal> x14770 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14770.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14769.value)))+(x14770.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14771=IKsin(j14);
IkReal x14772=IKcos(j14);
IkReal x14773=(r11*sj15);
IkReal x14774=(cj15*r10);
IkReal x14775=(cj15*r00);
IkReal x14776=(r21*sj15);
IkReal x14777=(r01*sj15);
IkReal x14778=(cj15*r20);
IkReal x14779=((1.0)*x14772);
IkReal x14780=((1.0)*x14771);
evalcond[0]=((((-1.0)*x14778*x14780))+((x14771*x14776))+(((-1.0)*r22*x14779)));
evalcond[1]=((((-1.0)*x14774*x14780))+((x14771*x14773))+(((-1.0)*r12*x14779)));
evalcond[2]=((((-1.0)*x14777*x14779))+((x14772*x14775))+(((-1.0)*r02*x14780)));
evalcond[3]=((1.0)+(((-1.0)*r02*x14779))+((x14771*x14777))+(((-1.0)*x14775*x14780)));
evalcond[4]=((((-1.0)*x14773*x14779))+((x14772*x14774))+(((-1.0)*r12*x14780))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x14776*x14779))+((x14772*x14778))+(((-1.0)*r22*x14780))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x14781=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x14781;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x14781);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x14782=((1.0)*cj15);
IkReal x14783=((((-1.0)*r21*x14782))+(((-1.0)*r20*sj15)));
j14eval[0]=x14783;
j14eval[1]=IKsign(x14783);
j14eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x14782))+((r11*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x14784=r01*r01;
IkReal x14785=cj15*cj15;
IkReal x14786=(r01*sj15);
IkReal x14787=(cj15*r00);
IkReal x14788=((((-1.0)*x14784))+(((-1.0)*(r02*r02)))+(((2.0)*x14786*x14787))+((x14784*x14785))+(((-1.0)*x14785*(r00*r00))));
j14eval[0]=x14788;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x14787))+x14786))));
j14eval[2]=IKsign(x14788);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14789=r01*r01;
IkReal x14790=cj15*cj15;
IkReal x14791=(cj15*r00);
IkReal x14792=(r01*sj15);
CheckValue<IkReal> x14793=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14789))+(((-1.0)*(r02*r02)))+(((2.0)*x14791*x14792))+(((-1.0)*x14790*(r00*r00)))+((x14789*x14790)))),-1);
if(!x14793.valid){
continue;
}
CheckValue<IkReal> x14794 = IKatan2WithCheck(IkReal(((((-1.0)*x14791))+x14792)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14794.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14793.value)))+(x14794.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14795=IKcos(j14);
IkReal x14796=IKsin(j14);
IkReal x14797=(cj15*r20);
IkReal x14798=(cj15*r10);
IkReal x14799=(cj15*r00);
IkReal x14800=((1.0)*x14795);
IkReal x14801=(sj15*x14795);
IkReal x14802=((1.0)*x14796);
IkReal x14803=(sj15*x14796);
evalcond[0]=((((-1.0)*x14799*x14800))+((r01*x14801))+((r02*x14796)));
evalcond[1]=((((-1.0)*r22*x14800))+(((-1.0)*x14797*x14802))+((r21*x14803)));
evalcond[2]=((((-1.0)*r12*x14800))+((r11*x14803))+(((-1.0)*x14798*x14802)));
evalcond[3]=((1.0)+(((-1.0)*x14799*x14802))+((r01*x14803))+(((-1.0)*r02*x14800)));
evalcond[4]=(((r12*x14796))+((cj12*sj11))+((r11*x14801))+((cj11*sj12))+(((-1.0)*x14798*x14800)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x14797*x14800))+((r21*x14801))+((r22*x14796))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14804=((1.0)*cj15);
CheckValue<IkReal> x14805=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15))+(((-1.0)*r21*x14804)))),-1);
if(!x14805.valid){
continue;
}
CheckValue<IkReal> x14806 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*r10*x14804)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14806.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14805.value)))+(x14806.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14807=IKcos(j14);
IkReal x14808=IKsin(j14);
IkReal x14809=(cj15*r20);
IkReal x14810=(cj15*r10);
IkReal x14811=(cj15*r00);
IkReal x14812=((1.0)*x14807);
IkReal x14813=(sj15*x14807);
IkReal x14814=((1.0)*x14808);
IkReal x14815=(sj15*x14808);
evalcond[0]=(((r01*x14813))+(((-1.0)*x14811*x14812))+((r02*x14808)));
evalcond[1]=((((-1.0)*r22*x14812))+((r21*x14815))+(((-1.0)*x14809*x14814)));
evalcond[2]=((((-1.0)*r12*x14812))+((r11*x14815))+(((-1.0)*x14810*x14814)));
evalcond[3]=((1.0)+(((-1.0)*r02*x14812))+((r01*x14815))+(((-1.0)*x14811*x14814)));
evalcond[4]=(((cj12*sj11))+((r11*x14813))+((r12*x14808))+((cj11*sj12))+(((-1.0)*x14810*x14812)));
evalcond[5]=(((sj11*sj12))+((r21*x14813))+((r22*x14808))+(((-1.0)*x14809*x14812))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x14816=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x14816.valid){
continue;
}
CheckValue<IkReal> x14817 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14817.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14816.value)))+(x14817.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14818=IKcos(j14);
IkReal x14819=IKsin(j14);
IkReal x14820=(cj15*r20);
IkReal x14821=(cj15*r10);
IkReal x14822=(cj15*r00);
IkReal x14823=((1.0)*x14818);
IkReal x14824=(sj15*x14818);
IkReal x14825=((1.0)*x14819);
IkReal x14826=(sj15*x14819);
evalcond[0]=(((r01*x14824))+(((-1.0)*x14822*x14823))+((r02*x14819)));
evalcond[1]=((((-1.0)*x14820*x14825))+((r21*x14826))+(((-1.0)*r22*x14823)));
evalcond[2]=((((-1.0)*x14821*x14825))+(((-1.0)*r12*x14823))+((r11*x14826)));
evalcond[3]=((1.0)+((r01*x14826))+(((-1.0)*x14822*x14825))+(((-1.0)*r02*x14823)));
evalcond[4]=((((-1.0)*x14821*x14823))+((cj12*sj11))+((cj11*sj12))+((r11*x14824))+((r12*x14819)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x14820*x14823))+((r21*x14824))+((r22*x14819))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14828 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14828)==0){
continue;
}
IkReal x14827=pow(x14828,-0.5);
CheckValue<IkReal> x14829 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14829.valid){
continue;
}
IkReal gconst60=((-1.0)*(x14829.value));
IkReal gconst61=((-1.0)*r11*x14827);
IkReal gconst62=(r10*x14827);
CheckValue<IkReal> x14830 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14830.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14830.value)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
CheckValue<IkReal> x14833 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14833.valid){
continue;
}
IkReal x14831=((-1.0)*(x14833.value));
IkReal x14832=x14827;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj15=gconst61;
cj15=gconst62;
j15=x14831;
IkReal gconst60=x14831;
IkReal gconst61=((-1.0)*r11*x14832);
IkReal gconst62=(r10*x14832);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
CheckValue<IkReal> x14836 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14836.valid){
continue;
}
IkReal x14834=((-1.0)*(x14836.value));
IkReal x14835=x14827;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj15=gconst61;
cj15=gconst62;
j15=x14834;
IkReal gconst60=x14834;
IkReal gconst61=((-1.0)*r11*x14835);
IkReal gconst62=(r10*x14835);
CheckValue<IkReal> x14844=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x14844.valid){
continue;
}
IkReal x14837=x14844.value;
IkReal x14838=(sj13*x14837);
IkReal x14839=(r21*x14838);
IkReal x14840=(r00*x14838);
IkReal x14841=(r01*x14838);
IkReal x14842=(r20*x14838);
IkReal x14843=(r10*r11*x14838);
j14eval[0]=IKsign((((r01*x14839*(r11*r11)))+((r20*x14840*(r10*r10)))+((r00*r10*r11*x14839))+((r10*r11*r20*x14841))+((r02*r22*sj13))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14845=gconst61*gconst61;
IkReal x14846=gconst62*gconst62;
IkReal x14847=(gconst62*r20);
IkReal x14848=(gconst61*r01);
IkReal x14849=(r21*sj13);
IkReal x14850=(cj13*r00);
IkReal x14851=((1.0)*cj13);
IkReal x14852=(r01*sj13);
IkReal x14853=(gconst61*r00*sj13);
IkReal x14854=((1.0)*r20*x14846);
CheckValue<IkReal> x14855=IKPowWithIntegerCheck(IKsign((((gconst61*gconst62*r21*x14850))+(((-1.0)*r01*r21*x14845*x14851))+(((-1.0)*r02*r22*x14851))+(((-1.0)*x14850*x14854))+((cj13*x14847*x14848)))),-1);
if(!x14855.valid){
continue;
}
CheckValue<IkReal> x14856 = IKatan2WithCheck(IkReal((((gconst62*r22*x14852))+((r22*x14853)))),IkReal(((((-1.0)*x14852*x14854))+(((-1.0)*x14847*x14853))+((r00*x14845*x14849))+((gconst62*x14848*x14849)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14856.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14855.value)))+(x14856.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14857=IKsin(j14);
IkReal x14858=IKcos(j14);
IkReal x14859=(cj12*sj11);
IkReal x14860=(cj11*sj12);
IkReal x14861=(r01*sj13);
IkReal x14862=(cj13*r00);
IkReal x14863=((1.0)*sj13);
IkReal x14864=(r11*sj13);
IkReal x14865=(sj11*sj12);
IkReal x14866=(cj11*cj12);
IkReal x14867=(r20*sj13);
IkReal x14868=(cj13*gconst62);
IkReal x14869=(gconst61*sj13);
IkReal x14870=(cj13*gconst61);
IkReal x14871=(gconst61*x14857);
IkReal x14872=((1.0)*x14858);
IkReal x14873=(r22*x14857);
IkReal x14874=(r02*x14857);
IkReal x14875=(gconst62*x14858);
IkReal x14876=(r12*x14857);
IkReal x14877=(x14860+x14859);
IkReal x14878=((1.0)*gconst62*x14857);
IkReal x14879=(x14858*x14870);
evalcond[0]=((((-1.0)*r22*x14872))+(((-1.0)*r20*x14878))+((r21*x14871)));
evalcond[1]=(((r11*x14871))+(((-1.0)*r10*x14878))+(((-1.0)*r12*x14872)));
evalcond[2]=((1.0)+(((-1.0)*r02*x14872))+(((-1.0)*r00*x14878))+((r01*x14871)));
evalcond[3]=(((gconst62*x14861))+(((-1.0)*gconst62*x14862*x14872))+((r01*x14879))+((cj13*x14874))+((r00*x14869)));
evalcond[4]=(((gconst61*x14862))+(((-1.0)*x14863*x14874))+(((-1.0)*gconst61*x14861*x14872))+((r01*x14868))+((r00*sj13*x14875)));
evalcond[5]=(x14877+((gconst61*x14867))+((gconst62*r21*sj13))+((cj13*x14873))+(((-1.0)*r20*x14868*x14872))+((r21*x14879)));
evalcond[6]=(((r11*x14879))+(((-1.0)*r10*x14868*x14872))+x14866+((gconst62*x14864))+((cj13*x14876))+((r10*x14869))+(((-1.0)*x14865)));
evalcond[7]=(((r10*x14870))+x14877+(((-1.0)*gconst61*r11*x14858*x14863))+(((-1.0)*x14863*x14876))+((r10*sj13*x14875))+((r11*x14868)));
evalcond[8]=(((x14867*x14875))+x14865+(((-1.0)*x14863*x14873))+(((-1.0)*gconst61*r21*x14858*x14863))+((r20*x14870))+((r21*x14868))+(((-1.0)*x14866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14880=gconst61*gconst61;
IkReal x14881=gconst62*gconst62;
IkReal x14882=(r01*r21);
IkReal x14883=(gconst61*gconst62);
IkReal x14884=(cj13*r00);
IkReal x14885=(r00*sj13);
IkReal x14886=((1.0)*r01*r20);
CheckValue<IkReal> x14887 = IKatan2WithCheck(IkReal((((cj13*gconst62*r01*r22))+((gconst61*r22*x14884)))),IkReal((((cj13*x14882*x14883))+(((-1.0)*r20*x14883*x14884))+(((-1.0)*cj13*x14881*x14886))+((r21*x14880*x14884)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14887.valid){
continue;
}
CheckValue<IkReal> x14888=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14883*x14885))+((sj13*x14880*x14882))+(((-1.0)*sj13*x14883*x14886))+((r20*x14881*x14885))+((r02*r22*sj13)))),-1);
if(!x14888.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14887.value)+(((1.5707963267949)*(x14888.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14889=IKsin(j14);
IkReal x14890=IKcos(j14);
IkReal x14891=(cj12*sj11);
IkReal x14892=(cj11*sj12);
IkReal x14893=(r01*sj13);
IkReal x14894=(cj13*r00);
IkReal x14895=((1.0)*sj13);
IkReal x14896=(r11*sj13);
IkReal x14897=(sj11*sj12);
IkReal x14898=(cj11*cj12);
IkReal x14899=(r20*sj13);
IkReal x14900=(cj13*gconst62);
IkReal x14901=(gconst61*sj13);
IkReal x14902=(cj13*gconst61);
IkReal x14903=(gconst61*x14889);
IkReal x14904=((1.0)*x14890);
IkReal x14905=(r22*x14889);
IkReal x14906=(r02*x14889);
IkReal x14907=(gconst62*x14890);
IkReal x14908=(r12*x14889);
IkReal x14909=(x14891+x14892);
IkReal x14910=((1.0)*gconst62*x14889);
IkReal x14911=(x14890*x14902);
evalcond[0]=(((r21*x14903))+(((-1.0)*r22*x14904))+(((-1.0)*r20*x14910)));
evalcond[1]=((((-1.0)*r12*x14904))+(((-1.0)*r10*x14910))+((r11*x14903)));
evalcond[2]=((1.0)+((r01*x14903))+(((-1.0)*r02*x14904))+(((-1.0)*r00*x14910)));
evalcond[3]=(((r00*x14901))+((r01*x14911))+(((-1.0)*gconst62*x14894*x14904))+((cj13*x14906))+((gconst62*x14893)));
evalcond[4]=(((r01*x14900))+(((-1.0)*x14895*x14906))+((r00*sj13*x14907))+((gconst61*x14894))+(((-1.0)*gconst61*x14893*x14904)));
evalcond[5]=(((r21*x14911))+x14909+((gconst62*r21*sj13))+(((-1.0)*r20*x14900*x14904))+((cj13*x14905))+((gconst61*x14899)));
evalcond[6]=((((-1.0)*r10*x14900*x14904))+x14898+((r11*x14911))+((cj13*x14908))+(((-1.0)*x14897))+((gconst62*x14896))+((r10*x14901)));
evalcond[7]=(((r11*x14900))+x14909+(((-1.0)*gconst61*r11*x14890*x14895))+(((-1.0)*x14895*x14908))+((r10*sj13*x14907))+((r10*x14902)));
evalcond[8]=(((r21*x14900))+x14897+((x14899*x14907))+(((-1.0)*x14895*x14905))+((r20*x14902))+(((-1.0)*x14898))+(((-1.0)*gconst61*r21*x14890*x14895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14912=((1.0)*gconst62);
CheckValue<IkReal> x14913=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r20))+(((-1.0)*r21*x14912)))),-1);
if(!x14913.valid){
continue;
}
CheckValue<IkReal> x14914 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x14912))+((gconst61*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14914.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14913.value)))+(x14914.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14915=IKsin(j14);
IkReal x14916=IKcos(j14);
IkReal x14917=(cj12*sj11);
IkReal x14918=(cj11*sj12);
IkReal x14919=(r01*sj13);
IkReal x14920=(cj13*r00);
IkReal x14921=((1.0)*sj13);
IkReal x14922=(r11*sj13);
IkReal x14923=(sj11*sj12);
IkReal x14924=(cj11*cj12);
IkReal x14925=(r20*sj13);
IkReal x14926=(cj13*gconst62);
IkReal x14927=(gconst61*sj13);
IkReal x14928=(cj13*gconst61);
IkReal x14929=(gconst61*x14915);
IkReal x14930=((1.0)*x14916);
IkReal x14931=(r22*x14915);
IkReal x14932=(r02*x14915);
IkReal x14933=(gconst62*x14916);
IkReal x14934=(r12*x14915);
IkReal x14935=(x14918+x14917);
IkReal x14936=((1.0)*gconst62*x14915);
IkReal x14937=(x14916*x14928);
evalcond[0]=(((r21*x14929))+(((-1.0)*r20*x14936))+(((-1.0)*r22*x14930)));
evalcond[1]=((((-1.0)*r10*x14936))+(((-1.0)*r12*x14930))+((r11*x14929)));
evalcond[2]=((1.0)+((r01*x14929))+(((-1.0)*r00*x14936))+(((-1.0)*r02*x14930)));
evalcond[3]=((((-1.0)*gconst62*x14920*x14930))+((cj13*x14932))+((r01*x14937))+((r00*x14927))+((gconst62*x14919)));
evalcond[4]=(((r01*x14926))+((gconst61*x14920))+((r00*sj13*x14933))+(((-1.0)*x14921*x14932))+(((-1.0)*gconst61*x14919*x14930)));
evalcond[5]=(x14935+((cj13*x14931))+((gconst62*r21*sj13))+(((-1.0)*r20*x14926*x14930))+((r21*x14937))+((gconst61*x14925)));
evalcond[6]=(((gconst62*x14922))+(((-1.0)*x14923))+x14924+((cj13*x14934))+((r10*x14927))+((r11*x14937))+(((-1.0)*r10*x14926*x14930)));
evalcond[7]=(x14935+((r10*x14928))+(((-1.0)*gconst61*r11*x14916*x14921))+((r10*sj13*x14933))+((r11*x14926))+(((-1.0)*x14921*x14934)));
evalcond[8]=((((-1.0)*x14924))+x14923+((r21*x14926))+(((-1.0)*gconst61*r21*x14916*x14921))+(((-1.0)*x14921*x14931))+((x14925*x14933))+((r20*x14928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14939 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14939)==0){
continue;
}
IkReal x14938=pow(x14939,-0.5);
CheckValue<IkReal> x14940 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14940.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x14940.value))));
IkReal gconst64=((1.0)*r11*x14938);
IkReal gconst65=((-1.0)*r10*x14938);
CheckValue<IkReal> x14941 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14941.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14941.value)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
CheckValue<IkReal> x14944 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14944.valid){
continue;
}
IkReal x14942=((1.0)*(x14944.value));
IkReal x14943=x14938;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj15=gconst64;
cj15=gconst65;
j15=((3.14159265)+(((-1.0)*x14942)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14942)));
IkReal gconst64=((1.0)*r11*x14943);
IkReal gconst65=((-1.0)*r10*x14943);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14945=gconst64*gconst64;
IkReal x14946=gconst65*gconst65;
IkReal x14947=(cj13*r22);
IkReal x14948=(gconst64*r00);
IkReal x14949=(cj13*r01);
IkReal x14950=(gconst65*r01);
IkReal x14951=(gconst65*r21);
IkReal x14952=((1.0)*sj13);
IkReal x14953=(r20*x14946);
IkReal x14954=(r21*x14945);
CheckValue<IkReal> x14955 = IKatan2WithCheck(IkReal((((x14947*x14948))+((x14947*x14950)))),IkReal(((((-1.0)*cj13*gconst65*r20*x14948))+(((-1.0)*x14949*x14953))+((gconst64*x14949*x14951))+((cj13*r00*x14954)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14955.valid){
continue;
}
CheckValue<IkReal> x14956=IKPowWithIntegerCheck(IKsign((((r01*sj13*x14954))+(((-1.0)*gconst64*r20*x14950*x14952))+(((-1.0)*x14948*x14951*x14952))+((r00*sj13*x14953))+((r02*r22*sj13)))),-1);
if(!x14956.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14955.value)+(((1.5707963267949)*(x14956.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14957=IKsin(j14);
IkReal x14958=IKcos(j14);
IkReal x14959=(cj12*sj11);
IkReal x14960=(cj11*sj12);
IkReal x14961=(cj13*gconst65);
IkReal x14962=(cj11*cj12);
IkReal x14963=(gconst65*sj13);
IkReal x14964=(cj13*gconst64);
IkReal x14965=(sj11*sj12);
IkReal x14966=(gconst64*sj13);
IkReal x14967=((1.0)*x14958);
IkReal x14968=(cj13*x14957);
IkReal x14969=((1.0)*x14957);
IkReal x14970=(gconst64*x14957);
IkReal x14971=(x14960+x14959);
evalcond[0]=((((-1.0)*gconst65*r20*x14969))+(((-1.0)*r22*x14967))+((r21*x14970)));
evalcond[1]=((((-1.0)*r12*x14967))+((r11*x14970))+(((-1.0)*gconst65*r10*x14969)));
evalcond[2]=((1.0)+(((-1.0)*r02*x14967))+(((-1.0)*gconst65*r00*x14969))+((r01*x14970)));
evalcond[3]=(((r01*x14963))+(((-1.0)*r00*x14961*x14967))+((r02*x14968))+((r01*x14958*x14964))+((r00*x14966)));
evalcond[4]=(((r01*x14961))+((r00*x14958*x14963))+(((-1.0)*r02*sj13*x14969))+(((-1.0)*r01*x14966*x14967))+((r00*x14964)));
evalcond[5]=((((-1.0)*r20*x14961*x14967))+((r21*x14958*x14964))+((r22*x14968))+x14971+((r20*x14966))+((r21*x14963)));
evalcond[6]=((((-1.0)*x14965))+x14962+((r12*x14968))+((r11*x14958*x14964))+((r11*x14963))+(((-1.0)*r10*x14961*x14967))+((r10*x14966)));
evalcond[7]=(x14971+((r11*x14961))+(((-1.0)*r12*sj13*x14969))+((r10*x14958*x14963))+(((-1.0)*r11*x14966*x14967))+((r10*x14964)));
evalcond[8]=((((-1.0)*x14962))+x14965+(((-1.0)*r22*sj13*x14969))+((r20*x14958*x14963))+(((-1.0)*r21*x14966*x14967))+((r20*x14964))+((r21*x14961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14972=((1.0)*gconst65);
CheckValue<IkReal> x14973=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst64*r20))+(((-1.0)*r21*x14972)))),-1);
if(!x14973.valid){
continue;
}
CheckValue<IkReal> x14974 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x14972))+((gconst64*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14974.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14973.value)))+(x14974.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14975=IKsin(j14);
IkReal x14976=IKcos(j14);
IkReal x14977=(cj12*sj11);
IkReal x14978=(cj11*sj12);
IkReal x14979=(cj13*gconst65);
IkReal x14980=(cj11*cj12);
IkReal x14981=(gconst65*sj13);
IkReal x14982=(cj13*gconst64);
IkReal x14983=(sj11*sj12);
IkReal x14984=(gconst64*sj13);
IkReal x14985=((1.0)*x14976);
IkReal x14986=(cj13*x14975);
IkReal x14987=((1.0)*x14975);
IkReal x14988=(gconst64*x14975);
IkReal x14989=(x14978+x14977);
evalcond[0]=((((-1.0)*gconst65*r20*x14987))+((r21*x14988))+(((-1.0)*r22*x14985)));
evalcond[1]=(((r11*x14988))+(((-1.0)*r12*x14985))+(((-1.0)*gconst65*r10*x14987)));
evalcond[2]=((1.0)+((r01*x14988))+(((-1.0)*r02*x14985))+(((-1.0)*gconst65*r00*x14987)));
evalcond[3]=((((-1.0)*r00*x14979*x14985))+((r01*x14976*x14982))+((r00*x14984))+((r01*x14981))+((r02*x14986)));
evalcond[4]=((((-1.0)*r01*x14984*x14985))+(((-1.0)*r02*sj13*x14987))+((r00*x14982))+((r01*x14979))+((r00*x14976*x14981)));
evalcond[5]=((((-1.0)*r20*x14979*x14985))+((r20*x14984))+x14989+((r22*x14986))+((r21*x14976*x14982))+((r21*x14981)));
evalcond[6]=(((r11*x14976*x14982))+x14980+(((-1.0)*r10*x14979*x14985))+((r10*x14984))+((r11*x14981))+(((-1.0)*x14983))+((r12*x14986)));
evalcond[7]=((((-1.0)*r11*x14984*x14985))+x14989+((r10*x14982))+((r11*x14979))+((r10*x14976*x14981))+(((-1.0)*r12*sj13*x14987)));
evalcond[8]=(((r20*x14982))+x14983+((r20*x14976*x14981))+(((-1.0)*r22*sj13*x14987))+(((-1.0)*x14980))+(((-1.0)*r21*x14984*x14985))+((r21*x14979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x14990=((-1.0)*py);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14990);
rxp0_2=(py*r00);
rxp1_0=(r21*x14990);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14991=(r01*sj15);
IkReal x14992=((1.0)*cj15*r00);
j14eval[0]=((((-1.0)*x14992))+x14991);
j14eval[1]=(((cj13*x14991))+(((-1.0)*cj13*x14992)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x14993=((-1.0)*py);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14993);
rxp0_2=(py*r00);
rxp1_0=(r21*x14993);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14994=(cj15*r00);
IkReal x14995=(r01*sj15);
j14eval[0]=(x14995+(((-1.0)*x14994)));
j14eval[1]=((((-1.0)*sj13*x14995))+((sj13*x14994)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x14996=((-1.0)*py);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14996);
rxp0_2=(py*r00);
rxp1_0=(r21*x14996);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j14eval[0]=cj13;
j14eval[1]=r12;
j14eval[2]=((((-1.0)*cj13*cj15*r00))+((cj13*r01*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14997=((1.0)*sj13);
CheckValue<IkReal> x14998=IKPowWithIntegerCheck(cj13,-1);
if(!x14998.valid){
continue;
}
CheckValue<IkReal> x14999=IKPowWithIntegerCheck(r12,-1);
if(!x14999.valid){
continue;
}
CheckValue<IkReal> x15000=IKPowWithIntegerCheck(((((-1.0)*cj13*cj15*r00))+((cj13*r01*sj15))),-1);
if(!x15000.valid){
continue;
}
if( IKabs(((x14998.value)*(x14999.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15000.value)*(((((-1.0)*cj15*r01*x14997))+(((-1.0)*r00*sj15*x14997)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14998.value)*(x14999.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12))))))+IKsqr(((x15000.value)*(((((-1.0)*cj15*r01*x14997))+(((-1.0)*r00*sj15*x14997))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x14998.value)*(x14999.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12))))), ((x15000.value)*(((((-1.0)*cj15*r01*x14997))+(((-1.0)*r00*sj15*x14997))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15001=IKsin(j14);
IkReal x15002=IKcos(j14);
IkReal x15003=(cj12*sj11);
IkReal x15004=(cj11*sj12);
IkReal x15005=(cj13*r21);
IkReal x15006=(r01*sj13);
IkReal x15007=(cj11*cj12);
IkReal x15008=(r00*sj15);
IkReal x15009=(sj11*sj12);
IkReal x15010=(cj13*cj15);
IkReal x15011=(r20*sj13);
IkReal x15012=((1.0)*r00);
IkReal x15013=((1.0)*sj13);
IkReal x15014=((1.0)*r20);
IkReal x15015=(sj15*x15002);
IkReal x15016=(cj15*x15002);
IkReal x15017=(r12*x15001);
IkReal x15018=(cj15*x15001);
IkReal x15019=(sj15*x15001);
IkReal x15020=(x15004+x15003);
evalcond[0]=((-1.0)*r12*x15002);
evalcond[1]=(((r21*x15019))+(((-1.0)*x15014*x15018)));
evalcond[2]=(((cj13*x15017))+(((-1.0)*x15009))+x15007);
evalcond[3]=((((-1.0)*x15013*x15017))+x15020);
evalcond[4]=((1.0)+(((-1.0)*x15012*x15018))+((r01*x15019)));
evalcond[5]=(((cj13*r01*x15015))+((cj15*x15006))+(((-1.0)*x15002*x15010*x15012))+((sj13*x15008)));
evalcond[6]=(((r00*sj13*x15016))+((r01*x15010))+(((-1.0)*x15006*x15015))+((cj13*x15008)));
evalcond[7]=(((x15005*x15015))+((sj15*x15011))+x15020+(((-1.0)*x15002*x15010*x15014))+((cj15*r21*sj13)));
evalcond[8]=(((cj15*x15005))+(((-1.0)*x15007))+(((-1.0)*r21*x15013*x15015))+x15009+((x15011*x15016))+((cj13*r20*sj15)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15021=((1.0)*r01);
IkReal x15022=(cj15*r00);
CheckValue<IkReal> x15023=IKPowWithIntegerCheck(((((-1.0)*x15022))+((r01*sj15))),-1);
if(!x15023.valid){
continue;
}
CheckValue<IkReal> x15024=IKPowWithIntegerCheck((((sj13*x15022))+(((-1.0)*sj13*sj15*x15021))),-1);
if(!x15024.valid){
continue;
}
if( IKabs(((-1.0)*(x15023.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15024.value)*(((((-1.0)*cj13*r00*sj15))+(((-1.0)*cj13*cj15*x15021)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15023.value)))+IKsqr(((x15024.value)*(((((-1.0)*cj13*r00*sj15))+(((-1.0)*cj13*cj15*x15021))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*(x15023.value)), ((x15024.value)*(((((-1.0)*cj13*r00*sj15))+(((-1.0)*cj13*cj15*x15021))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15025=IKsin(j14);
IkReal x15026=IKcos(j14);
IkReal x15027=(cj12*sj11);
IkReal x15028=(cj11*sj12);
IkReal x15029=(cj13*r21);
IkReal x15030=(r01*sj13);
IkReal x15031=(cj11*cj12);
IkReal x15032=(r00*sj15);
IkReal x15033=(sj11*sj12);
IkReal x15034=(cj13*cj15);
IkReal x15035=(r20*sj13);
IkReal x15036=((1.0)*r00);
IkReal x15037=((1.0)*sj13);
IkReal x15038=((1.0)*r20);
IkReal x15039=(sj15*x15026);
IkReal x15040=(cj15*x15026);
IkReal x15041=(r12*x15025);
IkReal x15042=(cj15*x15025);
IkReal x15043=(sj15*x15025);
IkReal x15044=(x15028+x15027);
evalcond[0]=((-1.0)*r12*x15026);
evalcond[1]=((((-1.0)*x15038*x15042))+((r21*x15043)));
evalcond[2]=((((-1.0)*x15033))+((cj13*x15041))+x15031);
evalcond[3]=(x15044+(((-1.0)*x15037*x15041)));
evalcond[4]=((1.0)+(((-1.0)*x15036*x15042))+((r01*x15043)));
evalcond[5]=(((cj15*x15030))+(((-1.0)*x15026*x15034*x15036))+((cj13*r01*x15039))+((sj13*x15032)));
evalcond[6]=((((-1.0)*x15030*x15039))+((r01*x15034))+((r00*sj13*x15040))+((cj13*x15032)));
evalcond[7]=(((sj15*x15035))+(((-1.0)*x15026*x15034*x15038))+x15044+((cj15*r21*sj13))+((x15029*x15039)));
evalcond[8]=((((-1.0)*x15031))+x15033+((cj13*r20*sj15))+(((-1.0)*r21*x15037*x15039))+((cj15*x15029))+((x15035*x15040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15045=(r01*sj15);
IkReal x15046=((1.0)*sj13);
IkReal x15047=((1.0)*cj15*r00);
CheckValue<IkReal> x15048=IKPowWithIntegerCheck(((((-1.0)*x15047))+x15045),-1);
if(!x15048.valid){
continue;
}
CheckValue<IkReal> x15049=IKPowWithIntegerCheck(((((-1.0)*cj13*x15047))+((cj13*x15045))),-1);
if(!x15049.valid){
continue;
}
if( IKabs(((-1.0)*(x15048.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15049.value)*(((((-1.0)*cj15*r01*x15046))+(((-1.0)*r00*sj15*x15046)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15048.value)))+IKsqr(((x15049.value)*(((((-1.0)*cj15*r01*x15046))+(((-1.0)*r00*sj15*x15046))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*(x15048.value)), ((x15049.value)*(((((-1.0)*cj15*r01*x15046))+(((-1.0)*r00*sj15*x15046))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15050=IKsin(j14);
IkReal x15051=IKcos(j14);
IkReal x15052=(cj12*sj11);
IkReal x15053=(cj11*sj12);
IkReal x15054=(cj13*r21);
IkReal x15055=(r01*sj13);
IkReal x15056=(cj11*cj12);
IkReal x15057=(r00*sj15);
IkReal x15058=(sj11*sj12);
IkReal x15059=(cj13*cj15);
IkReal x15060=(r20*sj13);
IkReal x15061=((1.0)*r00);
IkReal x15062=((1.0)*sj13);
IkReal x15063=((1.0)*r20);
IkReal x15064=(sj15*x15051);
IkReal x15065=(cj15*x15051);
IkReal x15066=(r12*x15050);
IkReal x15067=(cj15*x15050);
IkReal x15068=(sj15*x15050);
IkReal x15069=(x15052+x15053);
evalcond[0]=((-1.0)*r12*x15051);
evalcond[1]=((((-1.0)*x15063*x15067))+((r21*x15068)));
evalcond[2]=((((-1.0)*x15058))+x15056+((cj13*x15066)));
evalcond[3]=(x15069+(((-1.0)*x15062*x15066)));
evalcond[4]=((1.0)+((r01*x15068))+(((-1.0)*x15061*x15067)));
evalcond[5]=(((cj13*r01*x15064))+(((-1.0)*x15051*x15059*x15061))+((sj13*x15057))+((cj15*x15055)));
evalcond[6]=(((r01*x15059))+((cj13*x15057))+(((-1.0)*x15055*x15064))+((r00*sj13*x15065)));
evalcond[7]=((((-1.0)*x15051*x15059*x15063))+x15069+((x15054*x15064))+((cj15*r21*sj13))+((sj15*x15060)));
evalcond[8]=(((x15060*x15065))+(((-1.0)*x15056))+(((-1.0)*r21*x15062*x15064))+x15058+((cj13*r20*sj15))+((cj15*x15054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15070=cj15*cj15;
IkReal x15071=(cj13*r20);
IkReal x15072=(cj15*sj15);
IkReal x15073=(r00*r21);
IkReal x15074=(r20*sj13);
IkReal x15075=(r22*sj13);
IkReal x15076=((1.0)*x15070);
IkReal x15077=(cj13*r01*r21);
CheckValue<IkReal> x15078=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj13*r02*r22))+((x15070*x15077))+((r01*x15071*x15072))+((cj13*x15072*x15073))+(((-1.0)*x15077))+(((-1.0)*r00*x15071*x15076)))),-1);
if(!x15078.valid){
continue;
}
CheckValue<IkReal> x15079 = IKatan2WithCheck(IkReal((((r00*sj15*x15075))+((cj15*r01*x15075)))),IkReal(((((-1.0)*r01*x15074*x15076))+(((-1.0)*sj13*x15073*x15076))+(((-1.0)*r00*x15072*x15074))+((r01*r21*sj13*x15072))+((sj13*x15073)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15079.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15078.value)))+(x15079.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15080=IKsin(j14);
IkReal x15081=IKcos(j14);
IkReal x15082=(cj12*sj11);
IkReal x15083=(cj11*sj12);
IkReal x15084=(cj13*r21);
IkReal x15085=((1.0)*r02);
IkReal x15086=((1.0)*sj13);
IkReal x15087=(cj11*cj12);
IkReal x15088=(r00*sj15);
IkReal x15089=(sj11*sj12);
IkReal x15090=(cj13*cj15);
IkReal x15091=(r10*sj13);
IkReal x15092=((1.0)*r00);
IkReal x15093=(cj15*sj13);
IkReal x15094=(r20*sj15);
IkReal x15095=((1.0)*r10);
IkReal x15096=(sj15*x15081);
IkReal x15097=(r22*x15080);
IkReal x15098=(cj13*x15080);
IkReal x15099=(cj15*x15081);
IkReal x15100=(cj15*x15080);
IkReal x15101=(sj15*x15080);
IkReal x15102=((1.0)*x15081);
IkReal x15103=(x15083+x15082);
evalcond[0]=(((r21*x15101))+(((-1.0)*r20*x15100))+(((-1.0)*r22*x15102)));
evalcond[1]=((((-1.0)*r12*x15102))+(((-1.0)*x15095*x15100))+((r11*x15101)));
evalcond[2]=((1.0)+((r01*x15101))+(((-1.0)*x15092*x15100))+(((-1.0)*x15081*x15085)));
evalcond[3]=(((sj13*x15088))+((cj13*r01*x15096))+((r01*x15093))+(((-1.0)*x15081*x15090*x15092))+((r02*x15098)));
evalcond[4]=(((r00*x15081*x15093))+((r01*x15090))+(((-1.0)*r01*x15086*x15096))+((cj13*x15088))+(((-1.0)*sj13*x15080*x15085)));
evalcond[5]=(((cj13*x15097))+((r21*x15093))+((x15084*x15096))+x15103+((sj13*x15094))+(((-1.0)*r20*x15090*x15102)));
evalcond[6]=(((sj15*x15091))+(((-1.0)*x15081*x15090*x15095))+x15087+((r11*x15093))+((r12*x15098))+((cj13*r11*x15096))+(((-1.0)*x15089)));
evalcond[7]=(((r11*x15090))+x15103+((cj13*r10*sj15))+((x15091*x15099))+(((-1.0)*r11*x15086*x15096))+(((-1.0)*r12*x15080*x15086)));
evalcond[8]=(((cj13*x15094))+((r20*x15081*x15093))+(((-1.0)*r21*x15086*x15096))+x15089+((cj15*x15084))+(((-1.0)*x15086*x15097))+(((-1.0)*x15087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15104=((1.0)*cj15);
CheckValue<IkReal> x15105=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15))+(((-1.0)*r21*x15104)))),-1);
if(!x15105.valid){
continue;
}
CheckValue<IkReal> x15106 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*r10*x15104)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15106.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15105.value)))+(x15106.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15107=IKsin(j14);
IkReal x15108=IKcos(j14);
IkReal x15109=(cj12*sj11);
IkReal x15110=(cj11*sj12);
IkReal x15111=(cj13*r21);
IkReal x15112=((1.0)*r02);
IkReal x15113=((1.0)*sj13);
IkReal x15114=(cj11*cj12);
IkReal x15115=(r00*sj15);
IkReal x15116=(sj11*sj12);
IkReal x15117=(cj13*cj15);
IkReal x15118=(r10*sj13);
IkReal x15119=((1.0)*r00);
IkReal x15120=(cj15*sj13);
IkReal x15121=(r20*sj15);
IkReal x15122=((1.0)*r10);
IkReal x15123=(sj15*x15108);
IkReal x15124=(r22*x15107);
IkReal x15125=(cj13*x15107);
IkReal x15126=(cj15*x15108);
IkReal x15127=(cj15*x15107);
IkReal x15128=(sj15*x15107);
IkReal x15129=((1.0)*x15108);
IkReal x15130=(x15109+x15110);
evalcond[0]=((((-1.0)*r20*x15127))+((r21*x15128))+(((-1.0)*r22*x15129)));
evalcond[1]=((((-1.0)*r12*x15129))+(((-1.0)*x15122*x15127))+((r11*x15128)));
evalcond[2]=((1.0)+((r01*x15128))+(((-1.0)*x15119*x15127))+(((-1.0)*x15108*x15112)));
evalcond[3]=(((cj13*r01*x15123))+((sj13*x15115))+((r01*x15120))+(((-1.0)*x15108*x15117*x15119))+((r02*x15125)));
evalcond[4]=((((-1.0)*sj13*x15107*x15112))+((cj13*x15115))+(((-1.0)*r01*x15113*x15123))+((r01*x15117))+((r00*x15108*x15120)));
evalcond[5]=(((cj13*x15124))+((sj13*x15121))+((r21*x15120))+((x15111*x15123))+x15130+(((-1.0)*r20*x15117*x15129)));
evalcond[6]=((((-1.0)*x15108*x15117*x15122))+(((-1.0)*x15116))+x15114+((sj15*x15118))+((r12*x15125))+((r11*x15120))+((cj13*r11*x15123)));
evalcond[7]=((((-1.0)*r11*x15113*x15123))+((r11*x15117))+x15130+((x15118*x15126))+((cj13*r10*sj15))+(((-1.0)*r12*x15107*x15113)));
evalcond[8]=(((cj13*x15121))+(((-1.0)*x15114))+(((-1.0)*r21*x15113*x15123))+((cj15*x15111))+(((-1.0)*x15113*x15124))+x15116+((r20*x15108*x15120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x15131=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x15131.valid){
continue;
}
CheckValue<IkReal> x15132 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15132.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15131.value)))+(x15132.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15133=IKsin(j14);
IkReal x15134=IKcos(j14);
IkReal x15135=(cj12*sj11);
IkReal x15136=(cj11*sj12);
IkReal x15137=(cj13*r21);
IkReal x15138=((1.0)*r02);
IkReal x15139=((1.0)*sj13);
IkReal x15140=(cj11*cj12);
IkReal x15141=(r00*sj15);
IkReal x15142=(sj11*sj12);
IkReal x15143=(cj13*cj15);
IkReal x15144=(r10*sj13);
IkReal x15145=((1.0)*r00);
IkReal x15146=(cj15*sj13);
IkReal x15147=(r20*sj15);
IkReal x15148=((1.0)*r10);
IkReal x15149=(sj15*x15134);
IkReal x15150=(r22*x15133);
IkReal x15151=(cj13*x15133);
IkReal x15152=(cj15*x15134);
IkReal x15153=(cj15*x15133);
IkReal x15154=(sj15*x15133);
IkReal x15155=((1.0)*x15134);
IkReal x15156=(x15135+x15136);
evalcond[0]=((((-1.0)*r20*x15153))+((r21*x15154))+(((-1.0)*r22*x15155)));
evalcond[1]=((((-1.0)*x15148*x15153))+(((-1.0)*r12*x15155))+((r11*x15154)));
evalcond[2]=((1.0)+(((-1.0)*x15145*x15153))+(((-1.0)*x15134*x15138))+((r01*x15154)));
evalcond[3]=((((-1.0)*x15134*x15143*x15145))+((sj13*x15141))+((r01*x15146))+((r02*x15151))+((cj13*r01*x15149)));
evalcond[4]=(((r00*x15134*x15146))+(((-1.0)*sj13*x15133*x15138))+((cj13*x15141))+((r01*x15143))+(((-1.0)*r01*x15139*x15149)));
evalcond[5]=(((x15137*x15149))+(((-1.0)*r20*x15143*x15155))+x15156+((r21*x15146))+((sj13*x15147))+((cj13*x15150)));
evalcond[6]=(((sj15*x15144))+(((-1.0)*x15134*x15143*x15148))+(((-1.0)*x15142))+((r11*x15146))+x15140+((r12*x15151))+((cj13*r11*x15149)));
evalcond[7]=((((-1.0)*r11*x15139*x15149))+((x15144*x15152))+((r11*x15143))+x15156+((cj13*r10*sj15))+(((-1.0)*r12*x15133*x15139)));
evalcond[8]=(((cj15*x15137))+((r20*x15134*x15146))+(((-1.0)*x15140))+x15142+((cj13*x15147))+(((-1.0)*r21*x15139*x15149))+(((-1.0)*x15139*x15150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x15157=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15157);
rxp1_1=(px*r21);
rxp1_2=(r11*x15157);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=(((r11*sj15))+(((-1.0)*cj15*r10)));
j14eval[1]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x15158=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15158);
rxp1_1=(px*r21);
rxp1_2=(r11*x15158);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15159=((1.0)*cj15);
j14eval[0]=((((-1.0)*r10*x15159))+((r11*sj15)));
j14eval[1]=((((-1.0)*cj13*r20*x15159))+((cj13*r21*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x15160=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15160);
rxp1_1=(px*r21);
rxp1_2=(r11*x15160);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=cj13;
j14eval[1]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x15161=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15161);
rxp1_1=(px*r21);
rxp1_2=(r11*x15161);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x15162=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15162);
rxp1_1=(px*r21);
rxp1_2=(r11*x15162);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j14eval[0]=((((-1.0)*r21*sj15))+((cj15*r20)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x15163=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15163);
rxp1_1=(px*r21);
rxp1_2=(r11*x15163);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j14eval[0]=(((cj15*r10))+(((-1.0)*r11*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x15166=IKPowWithIntegerCheck((((cj15*r10))+(((-1.0)*r11*sj15))),-1);
if(!x15166.valid){
continue;
}
IkReal x15164=x15166.value;
IkReal x15165=(sj10*x15164);
cj14array[0]=(((cj12*sj11*x15165))+((cj11*sj12*x15165)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x15167=IKsin(j14);
IkReal x15168=IKcos(j14);
IkReal x15169=(sj15*x15167);
IkReal x15170=((1.0)*x15168);
IkReal x15171=((1.0)*cj15*x15167);
evalcond[0]=((-1.0)*r02*x15167);
evalcond[1]=((((-1.0)*sj10))+(((-1.0)*r02*x15170)));
evalcond[2]=((((-1.0)*r20*x15171))+((r21*x15169)));
evalcond[3]=(((r11*x15169))+(((-1.0)*r10*x15171)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r21*sj15*x15170))+((cj15*r20*x15168))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x15173=IKPowWithIntegerCheck(((((-1.0)*r21*sj15))+((cj15*r20))),-1);
if(!x15173.valid){
continue;
}
IkReal x15172=x15173.value;
cj14array[0]=(((cj11*cj12*x15172))+(((-1.0)*sj11*sj12*x15172)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x15174=IKsin(j14);
IkReal x15175=IKcos(j14);
IkReal x15176=(cj15*r10);
IkReal x15177=((1.0)*sj10);
IkReal x15178=(sj15*x15174);
IkReal x15179=((1.0)*x15175);
IkReal x15180=((1.0)*x15174);
evalcond[0]=((-1.0)*r02*x15174);
evalcond[1]=((((-1.0)*x15177))+(((-1.0)*r02*x15179)));
evalcond[2]=((((-1.0)*cj15*r20*x15180))+((r21*x15178)));
evalcond[3]=(((r11*x15178))+(((-1.0)*x15176*x15180)));
evalcond[4]=((((-1.0)*cj12*sj11*x15177))+(((-1.0)*cj11*sj12*x15177))+((x15175*x15176))+(((-1.0)*r11*sj15*x15179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x15181=IKPowWithIntegerCheck(r02,-1);
if(!x15181.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x15181.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x15182=IKsin(j14);
IkReal x15183=IKcos(j14);
IkReal x15184=(cj15*r10);
IkReal x15185=((1.0)*cj12);
IkReal x15186=(cj15*r20);
IkReal x15187=(sj15*x15182);
IkReal x15188=((1.0)*x15182);
IkReal x15189=((1.0)*sj15*x15183);
evalcond[0]=((-1.0)*r02*x15182);
evalcond[1]=((((-1.0)*x15186*x15188))+((r21*x15187)));
evalcond[2]=((((-1.0)*x15184*x15188))+((r11*x15187)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r21*x15189))+(((-1.0)*cj11*x15185))+((x15183*x15186)));
evalcond[4]=((((-1.0)*cj11*sj10*sj12))+((x15183*x15184))+(((-1.0)*sj10*sj11*x15185))+(((-1.0)*r11*x15189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x15190=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15190);
rxp1_1=(px*r21);
rxp1_2=(r11*x15190);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x15191=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15191);
rxp1_1=(px*r21);
rxp1_2=(r11*x15191);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j14eval[0]=((((-1.0)*cj15*r20))+((r21*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x15192=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15192);
rxp1_1=(px*r21);
rxp1_2=(r11*x15192);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j14eval[0]=(((r11*sj15))+(((-1.0)*cj15*r10)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x15195=IKPowWithIntegerCheck((((r11*sj15))+(((-1.0)*cj15*r10))),-1);
if(!x15195.valid){
continue;
}
IkReal x15193=x15195.value;
IkReal x15194=(sj10*x15193);
cj14array[0]=(((cj12*sj11*x15194))+((cj11*sj12*x15194)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x15196=IKsin(j14);
IkReal x15197=IKcos(j14);
IkReal x15198=(sj15*x15196);
IkReal x15199=((1.0)*x15197);
IkReal x15200=((1.0)*cj15*x15196);
evalcond[0]=(r02*x15196);
evalcond[1]=((((-1.0)*sj10))+(((-1.0)*r02*x15199)));
evalcond[2]=((((-1.0)*r20*x15200))+((r21*x15198)));
evalcond[3]=(((r11*x15198))+(((-1.0)*r10*x15200)));
evalcond[4]=(((sj11*sj12))+((r21*sj15*x15197))+(((-1.0)*cj11*cj12))+(((-1.0)*cj15*r20*x15199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x15202=IKPowWithIntegerCheck(((((-1.0)*cj15*r20))+((r21*sj15))),-1);
if(!x15202.valid){
continue;
}
IkReal x15201=x15202.value;
cj14array[0]=(((cj11*cj12*x15201))+(((-1.0)*sj11*sj12*x15201)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x15203=IKsin(j14);
IkReal x15204=IKcos(j14);
IkReal x15205=(cj15*r10);
IkReal x15206=((1.0)*sj10);
IkReal x15207=(sj15*x15203);
IkReal x15208=((1.0)*x15204);
IkReal x15209=((1.0)*x15203);
evalcond[0]=(r02*x15203);
evalcond[1]=((((-1.0)*x15206))+(((-1.0)*r02*x15208)));
evalcond[2]=(((r21*x15207))+(((-1.0)*cj15*r20*x15209)));
evalcond[3]=(((r11*x15207))+(((-1.0)*x15205*x15209)));
evalcond[4]=((((-1.0)*cj12*sj11*x15206))+((r11*sj15*x15204))+(((-1.0)*cj11*sj12*x15206))+(((-1.0)*x15205*x15208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x15210=IKPowWithIntegerCheck(r02,-1);
if(!x15210.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x15210.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x15211=IKsin(j14);
IkReal x15212=IKcos(j14);
IkReal x15213=((1.0)*cj15);
IkReal x15214=((1.0)*cj11);
IkReal x15215=(sj15*x15211);
IkReal x15216=(sj15*x15212);
evalcond[0]=(r02*x15211);
evalcond[1]=((((-1.0)*r20*x15211*x15213))+((r21*x15215)));
evalcond[2]=(((r11*x15215))+(((-1.0)*r10*x15211*x15213)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x15214))+(((-1.0)*r20*x15212*x15213))+((r21*x15216)));
evalcond[4]=((((-1.0)*cj12*sj10*sj11))+((r11*x15216))+(((-1.0)*r10*x15212*x15213))+(((-1.0)*sj10*sj12*x15214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15217 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15217.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15217.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15218 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15218.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x15218.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x15219=((-1.0)*r10);
CheckValue<IkReal> x15221 = IKatan2WithCheck(IkReal(x15219),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15221.valid){
continue;
}
IkReal x15220=((-1.0)*(x15221.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15219);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj15=gconst67;
cj15=gconst68;
j15=x15220;
IkReal gconst66=x15220;
IkReal gconst67=r10;
IkReal gconst68=r11;
j14eval[0]=cj13;
j14eval[1]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x15222=((-1.0)*r10);
CheckValue<IkReal> x15224 = IKatan2WithCheck(IkReal(x15222),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15224.valid){
continue;
}
IkReal x15223=((-1.0)*(x15224.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15222);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj15=gconst67;
cj15=gconst68;
j15=x15223;
IkReal gconst66=x15223;
IkReal gconst67=r10;
IkReal gconst68=r11;
j14eval[0]=r02;
j14eval[1]=sj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x15225=((-1.0)*r10);
CheckValue<IkReal> x15227 = IKatan2WithCheck(IkReal(x15225),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15227.valid){
continue;
}
IkReal x15226=((-1.0)*(x15227.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15225);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj15=gconst67;
cj15=gconst68;
j15=x15226;
IkReal gconst66=x15226;
IkReal gconst67=r10;
IkReal gconst68=r11;
j14eval[0]=cj13;
j14eval[1]=r02;
j14eval[2]=(((r11*r20*sj13))+(((-1.0)*r10*r21*sj13)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15228=((1.0)*r21);
IkReal x15229=(cj11*cj12);
IkReal x15230=((1.0)*sj11*sj12);
CheckValue<IkReal> x15231=IKPowWithIntegerCheck(cj13,-1);
if(!x15231.valid){
continue;
}
CheckValue<IkReal> x15232=IKPowWithIntegerCheck(r02,-1);
if(!x15232.valid){
continue;
}
CheckValue<IkReal> x15233=IKPowWithIntegerCheck(((((-1.0)*gconst67*sj13*x15228))+((gconst68*r20*sj13))),-1);
if(!x15233.valid){
continue;
}
if( IKabs(((x15231.value)*(x15232.value)*(((((-1.0)*cj10*x15230))+((cj10*x15229)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15233.value)*(((((-1.0)*cj13*gconst68*x15228))+(((-1.0)*x15230))+x15229+(((-1.0)*cj13*gconst67*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15231.value)*(x15232.value)*(((((-1.0)*cj10*x15230))+((cj10*x15229))))))+IKsqr(((x15233.value)*(((((-1.0)*cj13*gconst68*x15228))+(((-1.0)*x15230))+x15229+(((-1.0)*cj13*gconst67*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x15231.value)*(x15232.value)*(((((-1.0)*cj10*x15230))+((cj10*x15229))))), ((x15233.value)*(((((-1.0)*cj13*gconst68*x15228))+(((-1.0)*x15230))+x15229+(((-1.0)*cj13*gconst67*r20))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15234=IKsin(j14);
IkReal x15235=IKcos(j14);
IkReal x15236=(gconst67*sj13);
IkReal x15237=(gconst68*r20);
IkReal x15238=((1.0)*cj11);
IkReal x15239=(cj10*sj12);
IkReal x15240=(cj13*gconst68);
IkReal x15241=((1.0)*sj10);
IkReal x15242=(sj11*sj12);
IkReal x15243=(cj13*gconst67);
IkReal x15244=(cj12*sj11);
IkReal x15245=(gconst68*r10);
IkReal x15246=(gconst68*sj13);
IkReal x15247=((1.0)*x15235);
IkReal x15248=((1.0)*x15234);
IkReal x15249=(sj13*x15235);
IkReal x15250=(gconst67*x15234);
evalcond[0]=((((-1.0)*x15241))+(((-1.0)*r02*x15247)));
evalcond[1]=((((-1.0)*x15237*x15248))+((r21*x15250)));
evalcond[2]=(cj10+((r11*x15250))+(((-1.0)*x15245*x15248)));
evalcond[3]=((((-1.0)*cj10*cj12*x15238))+((cj13*r02*x15234))+((sj11*x15239)));
evalcond[4]=((((-1.0)*r02*sj13*x15248))+(((-1.0)*x15238*x15239))+(((-1.0)*cj10*x15244)));
evalcond[5]=((((-1.0)*cj13*x15237*x15247))+x15244+((r21*x15246))+((r21*x15235*x15243))+((cj11*sj12))+((r20*x15236)));
evalcond[6]=(((x15237*x15249))+x15242+((r21*x15240))+(((-1.0)*r21*x15236*x15247))+(((-1.0)*cj12*x15238))+((r20*x15243)));
evalcond[7]=(((sj10*x15242))+((r10*x15236))+(((-1.0)*cj12*sj10*x15238))+((r11*x15235*x15243))+((r11*x15246))+(((-1.0)*r10*x15240*x15247)));
evalcond[8]=((((-1.0)*r11*x15236*x15247))+((x15245*x15249))+((r10*x15243))+(((-1.0)*x15241*x15244))+(((-1.0)*sj10*sj12*x15238))+((r11*x15240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x15253=IKPowWithIntegerCheck(r02,-1);
if(!x15253.valid){
continue;
}
IkReal x15251=x15253.value;
IkReal x15252=((1.0)*cj10);
CheckValue<IkReal> x15254=IKPowWithIntegerCheck(sj13,-1);
if(!x15254.valid){
continue;
}
if( IKabs((x15251*(x15254.value)*(((((-1.0)*cj11*sj12*x15252))+(((-1.0)*cj12*sj11*x15252)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj10*x15251)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15251*(x15254.value)*(((((-1.0)*cj11*sj12*x15252))+(((-1.0)*cj12*sj11*x15252))))))+IKsqr(((-1.0)*sj10*x15251))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((x15251*(x15254.value)*(((((-1.0)*cj11*sj12*x15252))+(((-1.0)*cj12*sj11*x15252))))), ((-1.0)*sj10*x15251));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15255=IKsin(j14);
IkReal x15256=IKcos(j14);
IkReal x15257=(gconst67*sj13);
IkReal x15258=(gconst68*r20);
IkReal x15259=((1.0)*cj11);
IkReal x15260=(cj10*sj12);
IkReal x15261=(cj13*gconst68);
IkReal x15262=((1.0)*sj10);
IkReal x15263=(sj11*sj12);
IkReal x15264=(cj13*gconst67);
IkReal x15265=(cj12*sj11);
IkReal x15266=(gconst68*r10);
IkReal x15267=(gconst68*sj13);
IkReal x15268=((1.0)*x15256);
IkReal x15269=((1.0)*x15255);
IkReal x15270=(sj13*x15256);
IkReal x15271=(gconst67*x15255);
evalcond[0]=((((-1.0)*r02*x15268))+(((-1.0)*x15262)));
evalcond[1]=(((r21*x15271))+(((-1.0)*x15258*x15269)));
evalcond[2]=(((r11*x15271))+cj10+(((-1.0)*x15266*x15269)));
evalcond[3]=((((-1.0)*cj10*cj12*x15259))+((cj13*r02*x15255))+((sj11*x15260)));
evalcond[4]=((((-1.0)*r02*sj13*x15269))+(((-1.0)*x15259*x15260))+(((-1.0)*cj10*x15265)));
evalcond[5]=(x15265+(((-1.0)*cj13*x15258*x15268))+((r21*x15256*x15264))+((r20*x15257))+((cj11*sj12))+((r21*x15267)));
evalcond[6]=(((r20*x15264))+(((-1.0)*cj12*x15259))+((x15258*x15270))+(((-1.0)*r21*x15257*x15268))+x15263+((r21*x15261)));
evalcond[7]=(((sj10*x15263))+(((-1.0)*cj12*sj10*x15259))+(((-1.0)*r10*x15261*x15268))+((r10*x15257))+((r11*x15256*x15264))+((r11*x15267)));
evalcond[8]=(((x15266*x15270))+(((-1.0)*x15262*x15265))+(((-1.0)*sj10*sj12*x15259))+((r10*x15264))+(((-1.0)*r11*x15257*x15268))+((r11*x15261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x15273=IKPowWithIntegerCheck(r02,-1);
if(!x15273.valid){
continue;
}
IkReal x15272=x15273.value;
CheckValue<IkReal> x15274=IKPowWithIntegerCheck(cj13,-1);
if(!x15274.valid){
continue;
}
if( IKabs((x15272*(x15274.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj10*x15272)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15272*(x15274.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12))))))+IKsqr(((-1.0)*sj10*x15272))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((x15272*(x15274.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12))))), ((-1.0)*sj10*x15272));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15275=IKsin(j14);
IkReal x15276=IKcos(j14);
IkReal x15277=(gconst67*sj13);
IkReal x15278=(gconst68*r20);
IkReal x15279=((1.0)*cj11);
IkReal x15280=(cj10*sj12);
IkReal x15281=(cj13*gconst68);
IkReal x15282=((1.0)*sj10);
IkReal x15283=(sj11*sj12);
IkReal x15284=(cj13*gconst67);
IkReal x15285=(cj12*sj11);
IkReal x15286=(gconst68*r10);
IkReal x15287=(gconst68*sj13);
IkReal x15288=((1.0)*x15276);
IkReal x15289=((1.0)*x15275);
IkReal x15290=(sj13*x15276);
IkReal x15291=(gconst67*x15275);
evalcond[0]=((((-1.0)*r02*x15288))+(((-1.0)*x15282)));
evalcond[1]=(((r21*x15291))+(((-1.0)*x15278*x15289)));
evalcond[2]=(((r11*x15291))+cj10+(((-1.0)*x15286*x15289)));
evalcond[3]=(((cj13*r02*x15275))+(((-1.0)*cj10*cj12*x15279))+((sj11*x15280)));
evalcond[4]=((((-1.0)*cj10*x15285))+(((-1.0)*x15279*x15280))+(((-1.0)*r02*sj13*x15289)));
evalcond[5]=(x15285+((r20*x15277))+(((-1.0)*cj13*x15278*x15288))+((r21*x15276*x15284))+((cj11*sj12))+((r21*x15287)));
evalcond[6]=((((-1.0)*cj12*x15279))+x15283+((r20*x15284))+(((-1.0)*r21*x15277*x15288))+((x15278*x15290))+((r21*x15281)));
evalcond[7]=((((-1.0)*cj12*sj10*x15279))+(((-1.0)*r10*x15281*x15288))+((r11*x15276*x15284))+((r10*x15277))+((sj10*x15283))+((r11*x15287)));
evalcond[8]=((((-1.0)*r11*x15277*x15288))+(((-1.0)*x15282*x15285))+((r10*x15284))+((x15286*x15290))+(((-1.0)*sj10*sj12*x15279))+((r11*x15281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15292=((-1.0)*r10);
CheckValue<IkReal> x15293 = IKatan2WithCheck(IkReal(x15292),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15293.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15293.value))));
IkReal gconst70=x15292;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15294 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15294.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x15294.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x15295=((-1.0)*r10);
IkReal x15296=((-1.0)*r11);
CheckValue<IkReal> x15298 = IKatan2WithCheck(IkReal(x15295),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15298.valid){
continue;
}
IkReal x15297=((1.0)*(x15298.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15295);
rxp1_1=(px*r21);
rxp1_2=(px*x15296);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj15=gconst70;
cj15=gconst71;
j15=((3.14159265)+(((-1.0)*x15297)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15297)));
IkReal gconst70=x15295;
IkReal gconst71=x15296;
j14eval[0]=cj13;
j14eval[1]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x15299=((-1.0)*r10);
IkReal x15300=((-1.0)*r11);
CheckValue<IkReal> x15302 = IKatan2WithCheck(IkReal(x15299),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15302.valid){
continue;
}
IkReal x15301=((1.0)*(x15302.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15299);
rxp1_1=(px*r21);
rxp1_2=(px*x15300);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj15=gconst70;
cj15=gconst71;
j15=((3.14159265)+(((-1.0)*x15301)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15301)));
IkReal gconst70=x15299;
IkReal gconst71=x15300;
j14eval[0]=r02;
j14eval[1]=sj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x15303=((-1.0)*r10);
IkReal x15304=((-1.0)*r11);
CheckValue<IkReal> x15306 = IKatan2WithCheck(IkReal(x15303),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15306.valid){
continue;
}
IkReal x15305=((1.0)*(x15306.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15303);
rxp1_1=(px*r21);
rxp1_2=(px*x15304);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj15=gconst70;
cj15=gconst71;
j15=((3.14159265)+(((-1.0)*x15305)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15305)));
IkReal gconst70=x15303;
IkReal gconst71=x15304;
IkReal x15307=((1.0)*sj13);
j14eval[0]=cj13;
j14eval[1]=r02;
j14eval[2]=((((-1.0)*r11*r20*x15307))+((r10*r21*x15307)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15308=((1.0)*gconst70);
IkReal x15309=(cj11*cj12);
IkReal x15310=((1.0)*sj11*sj12);
CheckValue<IkReal> x15311=IKPowWithIntegerCheck(cj13,-1);
if(!x15311.valid){
continue;
}
CheckValue<IkReal> x15312=IKPowWithIntegerCheck(r02,-1);
if(!x15312.valid){
continue;
}
CheckValue<IkReal> x15313=IKPowWithIntegerCheck(((((-1.0)*r21*sj13*x15308))+((gconst71*r20*sj13))),-1);
if(!x15313.valid){
continue;
}
if( IKabs(((x15311.value)*(x15312.value)*(((((-1.0)*cj10*x15310))+((cj10*x15309)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15313.value)*(((((-1.0)*cj13*gconst71*r21))+(((-1.0)*x15310))+x15309+(((-1.0)*cj13*r20*x15308)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15311.value)*(x15312.value)*(((((-1.0)*cj10*x15310))+((cj10*x15309))))))+IKsqr(((x15313.value)*(((((-1.0)*cj13*gconst71*r21))+(((-1.0)*x15310))+x15309+(((-1.0)*cj13*r20*x15308))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x15311.value)*(x15312.value)*(((((-1.0)*cj10*x15310))+((cj10*x15309))))), ((x15313.value)*(((((-1.0)*cj13*gconst71*r21))+(((-1.0)*x15310))+x15309+(((-1.0)*cj13*r20*x15308))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15314=IKsin(j14);
IkReal x15315=IKcos(j14);
IkReal x15316=(cj11*sj12);
IkReal x15317=((1.0)*cj10);
IkReal x15318=(cj13*gconst71);
IkReal x15319=(r10*sj13);
IkReal x15320=(sj11*sj12);
IkReal x15321=((1.0)*sj10);
IkReal x15322=(r20*sj13);
IkReal x15323=(cj11*cj12);
IkReal x15324=(r11*sj13);
IkReal x15325=(cj12*sj11);
IkReal x15326=(cj13*gconst70);
IkReal x15327=(r21*sj13);
IkReal x15328=((1.0)*x15315);
IkReal x15329=(gconst71*x15315);
IkReal x15330=((1.0)*x15314);
IkReal x15331=(gconst70*x15314);
evalcond[0]=((((-1.0)*x15321))+(((-1.0)*r02*x15328)));
evalcond[1]=(((r21*x15331))+(((-1.0)*gconst71*r20*x15330)));
evalcond[2]=((((-1.0)*gconst71*r10*x15330))+((r11*x15331))+cj10);
evalcond[3]=(((cj13*r02*x15314))+(((-1.0)*x15317*x15323))+((cj10*x15320)));
evalcond[4]=((((-1.0)*r02*sj13*x15330))+(((-1.0)*x15316*x15317))+(((-1.0)*x15317*x15325)));
evalcond[5]=(((gconst71*x15327))+x15325+x15316+(((-1.0)*r20*x15318*x15328))+((r21*x15315*x15326))+((gconst70*x15322)));
evalcond[6]=((((-1.0)*x15323))+x15320+((r21*x15318))+((x15322*x15329))+(((-1.0)*gconst70*x15327*x15328))+((r20*x15326)));
evalcond[7]=(((r11*x15315*x15326))+(((-1.0)*x15321*x15323))+(((-1.0)*r10*x15318*x15328))+((gconst71*x15324))+((sj10*x15320))+((gconst70*x15319)));
evalcond[8]=(((x15319*x15329))+((r11*x15318))+(((-1.0)*x15321*x15325))+(((-1.0)*x15316*x15321))+((r10*x15326))+(((-1.0)*gconst70*x15324*x15328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x15334=IKPowWithIntegerCheck(r02,-1);
if(!x15334.valid){
continue;
}
IkReal x15332=x15334.value;
IkReal x15333=((1.0)*cj10);
CheckValue<IkReal> x15335=IKPowWithIntegerCheck(sj13,-1);
if(!x15335.valid){
continue;
}
if( IKabs((x15332*(x15335.value)*(((((-1.0)*cj12*sj11*x15333))+(((-1.0)*cj11*sj12*x15333)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj10*x15332)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15332*(x15335.value)*(((((-1.0)*cj12*sj11*x15333))+(((-1.0)*cj11*sj12*x15333))))))+IKsqr(((-1.0)*sj10*x15332))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((x15332*(x15335.value)*(((((-1.0)*cj12*sj11*x15333))+(((-1.0)*cj11*sj12*x15333))))), ((-1.0)*sj10*x15332));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15336=IKsin(j14);
IkReal x15337=IKcos(j14);
IkReal x15338=(cj11*sj12);
IkReal x15339=((1.0)*cj10);
IkReal x15340=(cj13*gconst71);
IkReal x15341=(r10*sj13);
IkReal x15342=(sj11*sj12);
IkReal x15343=((1.0)*sj10);
IkReal x15344=(r20*sj13);
IkReal x15345=(cj11*cj12);
IkReal x15346=(r11*sj13);
IkReal x15347=(cj12*sj11);
IkReal x15348=(cj13*gconst70);
IkReal x15349=(r21*sj13);
IkReal x15350=((1.0)*x15337);
IkReal x15351=(gconst71*x15337);
IkReal x15352=((1.0)*x15336);
IkReal x15353=(gconst70*x15336);
evalcond[0]=((((-1.0)*r02*x15350))+(((-1.0)*x15343)));
evalcond[1]=((((-1.0)*gconst71*r20*x15352))+((r21*x15353)));
evalcond[2]=(cj10+((r11*x15353))+(((-1.0)*gconst71*r10*x15352)));
evalcond[3]=(((cj13*r02*x15336))+((cj10*x15342))+(((-1.0)*x15339*x15345)));
evalcond[4]=((((-1.0)*x15339*x15347))+(((-1.0)*r02*sj13*x15352))+(((-1.0)*x15338*x15339)));
evalcond[5]=(((r21*x15337*x15348))+x15347+x15338+((gconst70*x15344))+(((-1.0)*r20*x15340*x15350))+((gconst71*x15349)));
evalcond[6]=((((-1.0)*gconst70*x15349*x15350))+((r21*x15340))+((x15344*x15351))+x15342+((r20*x15348))+(((-1.0)*x15345)));
evalcond[7]=((((-1.0)*x15343*x15345))+((sj10*x15342))+((r11*x15337*x15348))+(((-1.0)*r10*x15340*x15350))+((gconst70*x15341))+((gconst71*x15346)));
evalcond[8]=((((-1.0)*x15343*x15347))+((r11*x15340))+((r10*x15348))+(((-1.0)*x15338*x15343))+(((-1.0)*gconst70*x15346*x15350))+((x15341*x15351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x15355=IKPowWithIntegerCheck(r02,-1);
if(!x15355.valid){
continue;
}
IkReal x15354=x15355.value;
CheckValue<IkReal> x15356=IKPowWithIntegerCheck(cj13,-1);
if(!x15356.valid){
continue;
}
if( IKabs((x15354*(x15356.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj10*x15354)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15354*(x15356.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12))))))+IKsqr(((-1.0)*sj10*x15354))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((x15354*(x15356.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12))))), ((-1.0)*sj10*x15354));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15357=IKsin(j14);
IkReal x15358=IKcos(j14);
IkReal x15359=(cj11*sj12);
IkReal x15360=((1.0)*cj10);
IkReal x15361=(cj13*gconst71);
IkReal x15362=(r10*sj13);
IkReal x15363=(sj11*sj12);
IkReal x15364=((1.0)*sj10);
IkReal x15365=(r20*sj13);
IkReal x15366=(cj11*cj12);
IkReal x15367=(r11*sj13);
IkReal x15368=(cj12*sj11);
IkReal x15369=(cj13*gconst70);
IkReal x15370=(r21*sj13);
IkReal x15371=((1.0)*x15358);
IkReal x15372=(gconst71*x15358);
IkReal x15373=((1.0)*x15357);
IkReal x15374=(gconst70*x15357);
evalcond[0]=((((-1.0)*x15364))+(((-1.0)*r02*x15371)));
evalcond[1]=(((r21*x15374))+(((-1.0)*gconst71*r20*x15373)));
evalcond[2]=((((-1.0)*gconst71*r10*x15373))+cj10+((r11*x15374)));
evalcond[3]=(((cj10*x15363))+(((-1.0)*x15360*x15366))+((cj13*r02*x15357)));
evalcond[4]=((((-1.0)*x15360*x15368))+(((-1.0)*x15359*x15360))+(((-1.0)*r02*sj13*x15373)));
evalcond[5]=(((r21*x15358*x15369))+x15368+x15359+((gconst71*x15370))+((gconst70*x15365))+(((-1.0)*r20*x15361*x15371)));
evalcond[6]=((((-1.0)*gconst70*x15370*x15371))+x15363+((x15365*x15372))+(((-1.0)*x15366))+((r20*x15369))+((r21*x15361)));
evalcond[7]=(((gconst71*x15367))+((sj10*x15363))+(((-1.0)*x15364*x15366))+((r11*x15358*x15369))+((gconst70*x15362))+(((-1.0)*r10*x15361*x15371)));
evalcond[8]=(((r10*x15369))+(((-1.0)*x15364*x15368))+((r11*x15361))+(((-1.0)*gconst70*x15367*x15371))+((x15362*x15372))+(((-1.0)*x15359*x15364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x15376=IKPowWithIntegerCheck(r02,-1);
if(!x15376.valid){
continue;
}
IkReal x15375=x15376.value;
CheckValue<IkReal> x15377=IKPowWithIntegerCheck(cj13,-1);
if(!x15377.valid){
continue;
}
if( IKabs((x15375*(x15377.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj10*x15375)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15375*(x15377.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12))))))+IKsqr(((-1.0)*sj10*x15375))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((x15375*(x15377.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12))))), ((-1.0)*sj10*x15375));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15378=IKsin(j14);
IkReal x15379=IKcos(j14);
IkReal x15380=(r21*sj15);
IkReal x15381=((1.0)*r02);
IkReal x15382=((1.0)*cj11);
IkReal x15383=(cj10*sj12);
IkReal x15384=((1.0)*sj10);
IkReal x15385=(sj10*sj12);
IkReal x15386=(cj15*r20);
IkReal x15387=(r11*sj15);
IkReal x15388=(cj12*sj11);
IkReal x15389=(r20*sj15);
IkReal x15390=(cj13*cj15);
IkReal x15391=(cj15*sj13);
IkReal x15392=(r10*sj15);
IkReal x15393=(cj13*x15379);
IkReal x15394=((1.0)*cj15*r10);
IkReal x15395=(sj13*x15379);
evalcond[0]=((((-1.0)*x15379*x15381))+(((-1.0)*x15384)));
evalcond[1]=(((x15378*x15380))+(((-1.0)*x15378*x15386)));
evalcond[2]=(((x15378*x15387))+cj10+(((-1.0)*x15378*x15394)));
evalcond[3]=(((cj13*r02*x15378))+((sj11*x15383))+(((-1.0)*cj10*cj12*x15382)));
evalcond[4]=((((-1.0)*x15382*x15383))+(((-1.0)*sj13*x15378*x15381))+(((-1.0)*cj10*x15388)));
evalcond[5]=(((r21*x15391))+((sj13*x15389))+((x15380*x15393))+(((-1.0)*x15386*x15393))+x15388+((cj11*sj12)));
evalcond[6]=(((sj11*sj12))+((x15386*x15395))+(((-1.0)*cj12*x15382))+((r21*x15390))+((cj13*x15389))+(((-1.0)*x15380*x15395)));
evalcond[7]=((((-1.0)*r10*x15379*x15390))+((sj11*x15385))+(((-1.0)*cj12*sj10*x15382))+((r11*x15391))+((x15387*x15393))+((sj13*x15392)));
evalcond[8]=(((r10*x15379*x15391))+((cj13*x15392))+(((-1.0)*x15384*x15388))+(((-1.0)*x15382*x15385))+(((-1.0)*x15387*x15395))+((r11*x15390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15396=((1.0)*cj15);
CheckValue<IkReal> x15397=IKPowWithIntegerCheck(((((-1.0)*r10*x15396))+((r11*sj15))),-1);
if(!x15397.valid){
continue;
}
CheckValue<IkReal> x15398=IKPowWithIntegerCheck((((cj13*r21*sj15))+(((-1.0)*cj13*r20*x15396))),-1);
if(!x15398.valid){
continue;
}
if( IKabs(((-1.0)*cj10*(x15397.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15398.value)*(((((-1.0)*r21*sj13*x15396))+(((-1.0)*cj11*sj12))+(((-1.0)*r20*sj13*sj15))+(((-1.0)*cj12*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj10*(x15397.value)))+IKsqr(((x15398.value)*(((((-1.0)*r21*sj13*x15396))+(((-1.0)*cj11*sj12))+(((-1.0)*r20*sj13*sj15))+(((-1.0)*cj12*sj11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*cj10*(x15397.value)), ((x15398.value)*(((((-1.0)*r21*sj13*x15396))+(((-1.0)*cj11*sj12))+(((-1.0)*r20*sj13*sj15))+(((-1.0)*cj12*sj11))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15399=IKsin(j14);
IkReal x15400=IKcos(j14);
IkReal x15401=(r21*sj15);
IkReal x15402=((1.0)*r02);
IkReal x15403=((1.0)*cj11);
IkReal x15404=(cj10*sj12);
IkReal x15405=((1.0)*sj10);
IkReal x15406=(sj10*sj12);
IkReal x15407=(cj15*r20);
IkReal x15408=(r11*sj15);
IkReal x15409=(cj12*sj11);
IkReal x15410=(r20*sj15);
IkReal x15411=(cj13*cj15);
IkReal x15412=(cj15*sj13);
IkReal x15413=(r10*sj15);
IkReal x15414=(cj13*x15400);
IkReal x15415=((1.0)*cj15*r10);
IkReal x15416=(sj13*x15400);
evalcond[0]=((((-1.0)*x15405))+(((-1.0)*x15400*x15402)));
evalcond[1]=(((x15399*x15401))+(((-1.0)*x15399*x15407)));
evalcond[2]=(((x15399*x15408))+cj10+(((-1.0)*x15399*x15415)));
evalcond[3]=(((sj11*x15404))+(((-1.0)*cj10*cj12*x15403))+((cj13*r02*x15399)));
evalcond[4]=((((-1.0)*sj13*x15399*x15402))+(((-1.0)*cj10*x15409))+(((-1.0)*x15403*x15404)));
evalcond[5]=(((x15401*x15414))+(((-1.0)*x15407*x15414))+x15409+((sj13*x15410))+((r21*x15412))+((cj11*sj12)));
evalcond[6]=(((sj11*sj12))+((x15407*x15416))+(((-1.0)*x15401*x15416))+((cj13*x15410))+(((-1.0)*cj12*x15403))+((r21*x15411)));
evalcond[7]=(((r11*x15412))+((sj11*x15406))+((x15408*x15414))+(((-1.0)*cj12*sj10*x15403))+(((-1.0)*r10*x15400*x15411))+((sj13*x15413)));
evalcond[8]=(((r11*x15411))+(((-1.0)*x15408*x15416))+(((-1.0)*x15405*x15409))+((cj13*x15413))+((r10*x15400*x15412))+(((-1.0)*x15403*x15406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x15417=IKPowWithIntegerCheck((((r11*sj15))+(((-1.0)*cj15*r10))),-1);
if(!x15417.valid){
continue;
}
CheckValue<IkReal> x15418=IKPowWithIntegerCheck(r02,-1);
if(!x15418.valid){
continue;
}
if( IKabs(((-1.0)*cj10*(x15417.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj10*(x15418.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj10*(x15417.value)))+IKsqr(((-1.0)*sj10*(x15418.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*cj10*(x15417.value)), ((-1.0)*sj10*(x15418.value)));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15419=IKsin(j14);
IkReal x15420=IKcos(j14);
IkReal x15421=(r21*sj15);
IkReal x15422=((1.0)*r02);
IkReal x15423=((1.0)*cj11);
IkReal x15424=(cj10*sj12);
IkReal x15425=((1.0)*sj10);
IkReal x15426=(sj10*sj12);
IkReal x15427=(cj15*r20);
IkReal x15428=(r11*sj15);
IkReal x15429=(cj12*sj11);
IkReal x15430=(r20*sj15);
IkReal x15431=(cj13*cj15);
IkReal x15432=(cj15*sj13);
IkReal x15433=(r10*sj15);
IkReal x15434=(cj13*x15420);
IkReal x15435=((1.0)*cj15*r10);
IkReal x15436=(sj13*x15420);
evalcond[0]=((((-1.0)*x15425))+(((-1.0)*x15420*x15422)));
evalcond[1]=((((-1.0)*x15419*x15427))+((x15419*x15421)));
evalcond[2]=((((-1.0)*x15419*x15435))+cj10+((x15419*x15428)));
evalcond[3]=(((cj13*r02*x15419))+((sj11*x15424))+(((-1.0)*cj10*cj12*x15423)));
evalcond[4]=((((-1.0)*x15423*x15424))+(((-1.0)*sj13*x15419*x15422))+(((-1.0)*cj10*x15429)));
evalcond[5]=(((r21*x15432))+((sj13*x15430))+((x15421*x15434))+(((-1.0)*x15427*x15434))+x15429+((cj11*sj12)));
evalcond[6]=(((sj11*sj12))+(((-1.0)*x15421*x15436))+((r21*x15431))+((x15427*x15436))+(((-1.0)*cj12*x15423))+((cj13*x15430)));
evalcond[7]=((((-1.0)*r10*x15420*x15431))+(((-1.0)*cj12*sj10*x15423))+((sj13*x15433))+((r11*x15432))+((x15428*x15434))+((sj11*x15426)));
evalcond[8]=((((-1.0)*x15423*x15426))+(((-1.0)*x15425*x15429))+((r10*x15420*x15432))+((r11*x15431))+((cj13*x15433))+(((-1.0)*x15428*x15436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15437=((1.0)*sj15);
CheckValue<IkReal> x15438 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((cj15*r10*sj10))+(((-1.0)*cj10*r01*x15437))+(((-1.0)*r11*sj10*x15437))+((cj10*cj15*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15438.valid){
continue;
}
CheckValue<IkReal> x15439=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj15*r21))+(((-1.0)*r20*x15437)))),-1);
if(!x15439.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x15438.value)+(((1.5707963267949)*(x15439.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15440=IKsin(j14);
IkReal x15441=IKcos(j14);
IkReal x15442=(cj13*r21);
IkReal x15443=((1.0)*cj11);
IkReal x15444=(cj10*sj12);
IkReal x15445=((1.0)*sj10);
IkReal x15446=(sj13*sj15);
IkReal x15447=(sj10*sj12);
IkReal x15448=(cj13*cj15);
IkReal x15449=((1.0)*sj13);
IkReal x15450=(cj12*sj11);
IkReal x15451=(cj15*sj13);
IkReal x15452=(cj13*sj15);
IkReal x15453=(sj15*x15441);
IkReal x15454=((1.0)*x15441);
IkReal x15455=(cj13*x15440);
IkReal x15456=(sj15*x15440);
IkReal x15457=(x15441*x15451);
IkReal x15458=((1.0)*cj15*x15440);
evalcond[0]=((((-1.0)*r22*x15454))+(((-1.0)*r20*x15458))+((r21*x15456)));
evalcond[1]=((((-1.0)*r12*x15454))+((r11*x15456))+cj10+(((-1.0)*r10*x15458)));
evalcond[2]=(((r01*x15456))+(((-1.0)*r00*x15458))+(((-1.0)*r02*x15454))+(((-1.0)*x15445)));
evalcond[3]=(((r20*x15446))+(((-1.0)*r20*x15448*x15454))+((x15442*x15453))+((r22*x15455))+x15450+((r21*x15451))+((cj11*sj12)));
evalcond[4]=(((sj11*sj12))+((r20*x15452))+((r20*x15457))+(((-1.0)*r22*x15440*x15449))+(((-1.0)*r21*x15446*x15454))+(((-1.0)*cj12*x15443))+((cj15*x15442)));
evalcond[5]=((((-1.0)*cj10*cj12*x15443))+((r00*x15446))+((r01*x15451))+((sj11*x15444))+((r02*x15455))+((r01*x15441*x15452))+(((-1.0)*r00*x15448*x15454)));
evalcond[6]=((((-1.0)*r10*x15448*x15454))+((r11*x15441*x15452))+(((-1.0)*cj12*sj10*x15443))+((r11*x15451))+((r10*x15446))+((r12*x15455))+((sj11*x15447)));
evalcond[7]=(((r00*x15457))+((r00*x15452))+((r01*x15448))+(((-1.0)*x15443*x15444))+(((-1.0)*cj10*x15450))+(((-1.0)*r02*x15440*x15449))+(((-1.0)*r01*x15446*x15454)));
evalcond[8]=(((r11*x15448))+(((-1.0)*x15445*x15450))+(((-1.0)*x15443*x15447))+((r10*x15457))+((r10*x15452))+(((-1.0)*r12*x15440*x15449))+(((-1.0)*r11*x15446*x15454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15459=((1.0)*cj15);
CheckValue<IkReal> x15460=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x15459))+(((-1.0)*r10*sj15)))),-1);
if(!x15460.valid){
continue;
}
CheckValue<IkReal> x15461 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x15459))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15461.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15460.value)))+(x15461.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15462=IKsin(j14);
IkReal x15463=IKcos(j14);
IkReal x15464=(cj13*r21);
IkReal x15465=((1.0)*cj11);
IkReal x15466=(cj10*sj12);
IkReal x15467=((1.0)*sj10);
IkReal x15468=(sj13*sj15);
IkReal x15469=(sj10*sj12);
IkReal x15470=(cj13*cj15);
IkReal x15471=((1.0)*sj13);
IkReal x15472=(cj12*sj11);
IkReal x15473=(cj15*sj13);
IkReal x15474=(cj13*sj15);
IkReal x15475=(sj15*x15463);
IkReal x15476=((1.0)*x15463);
IkReal x15477=(cj13*x15462);
IkReal x15478=(sj15*x15462);
IkReal x15479=(x15463*x15473);
IkReal x15480=((1.0)*cj15*x15462);
evalcond[0]=((((-1.0)*r22*x15476))+((r21*x15478))+(((-1.0)*r20*x15480)));
evalcond[1]=(cj10+(((-1.0)*r10*x15480))+((r11*x15478))+(((-1.0)*r12*x15476)));
evalcond[2]=((((-1.0)*x15467))+((r01*x15478))+(((-1.0)*r00*x15480))+(((-1.0)*r02*x15476)));
evalcond[3]=((((-1.0)*r20*x15470*x15476))+((r22*x15477))+((r21*x15473))+x15472+((x15464*x15475))+((r20*x15468))+((cj11*sj12)));
evalcond[4]=(((sj11*sj12))+((cj15*x15464))+(((-1.0)*cj12*x15465))+(((-1.0)*r21*x15468*x15476))+((r20*x15479))+((r20*x15474))+(((-1.0)*r22*x15462*x15471)));
evalcond[5]=(((r02*x15477))+((r01*x15463*x15474))+(((-1.0)*r00*x15470*x15476))+((r01*x15473))+((r00*x15468))+(((-1.0)*cj10*cj12*x15465))+((sj11*x15466)));
evalcond[6]=((((-1.0)*cj12*sj10*x15465))+((r11*x15463*x15474))+(((-1.0)*r10*x15470*x15476))+((r12*x15477))+((r10*x15468))+((r11*x15473))+((sj11*x15469)));
evalcond[7]=((((-1.0)*r01*x15468*x15476))+((r01*x15470))+(((-1.0)*r02*x15462*x15471))+(((-1.0)*cj10*x15472))+((r00*x15474))+((r00*x15479))+(((-1.0)*x15465*x15466)));
evalcond[8]=((((-1.0)*r12*x15462*x15471))+(((-1.0)*r11*x15468*x15476))+(((-1.0)*x15467*x15472))+(((-1.0)*x15465*x15469))+((r11*x15470))+((r10*x15474))+((r10*x15479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15481=((1.0)*cj15);
CheckValue<IkReal> x15482=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x15481)))),-1);
if(!x15482.valid){
continue;
}
CheckValue<IkReal> x15483 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x15481))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15483.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15482.value)))+(x15483.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15484=IKsin(j14);
IkReal x15485=IKcos(j14);
IkReal x15486=(cj13*r21);
IkReal x15487=((1.0)*cj11);
IkReal x15488=(cj10*sj12);
IkReal x15489=((1.0)*sj10);
IkReal x15490=(sj13*sj15);
IkReal x15491=(sj10*sj12);
IkReal x15492=(cj13*cj15);
IkReal x15493=((1.0)*sj13);
IkReal x15494=(cj12*sj11);
IkReal x15495=(cj15*sj13);
IkReal x15496=(cj13*sj15);
IkReal x15497=(sj15*x15485);
IkReal x15498=((1.0)*x15485);
IkReal x15499=(cj13*x15484);
IkReal x15500=(sj15*x15484);
IkReal x15501=(x15485*x15495);
IkReal x15502=((1.0)*cj15*x15484);
evalcond[0]=((((-1.0)*r20*x15502))+((r21*x15500))+(((-1.0)*r22*x15498)));
evalcond[1]=(((r11*x15500))+cj10+(((-1.0)*r12*x15498))+(((-1.0)*r10*x15502)));
evalcond[2]=((((-1.0)*r00*x15502))+((r01*x15500))+(((-1.0)*r02*x15498))+(((-1.0)*x15489)));
evalcond[3]=(((r20*x15490))+x15494+((r22*x15499))+((r21*x15495))+((x15486*x15497))+((cj11*sj12))+(((-1.0)*r20*x15492*x15498)));
evalcond[4]=(((sj11*sj12))+((cj15*x15486))+(((-1.0)*r22*x15484*x15493))+((r20*x15496))+(((-1.0)*r21*x15490*x15498))+((r20*x15501))+(((-1.0)*cj12*x15487)));
evalcond[5]=(((r01*x15495))+((r00*x15490))+((r01*x15485*x15496))+((sj11*x15488))+((r02*x15499))+(((-1.0)*cj10*cj12*x15487))+(((-1.0)*r00*x15492*x15498)));
evalcond[6]=(((r11*x15485*x15496))+((r12*x15499))+(((-1.0)*cj12*sj10*x15487))+((r10*x15490))+((r11*x15495))+((sj11*x15491))+(((-1.0)*r10*x15492*x15498)));
evalcond[7]=(((r01*x15492))+((r00*x15496))+((r00*x15501))+(((-1.0)*cj10*x15494))+(((-1.0)*r02*x15484*x15493))+(((-1.0)*r01*x15490*x15498))+(((-1.0)*x15487*x15488)));
evalcond[8]=((((-1.0)*r12*x15484*x15493))+(((-1.0)*x15487*x15491))+((r10*x15501))+((r10*x15496))+((r11*x15492))+(((-1.0)*r11*x15490*x15498))+(((-1.0)*x15489*x15494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15503=r21*r21;
IkReal x15504=cj15*cj15;
IkReal x15505=r20*r20;
IkReal x15506=(sj13*sj15);
IkReal x15507=((1.0)*cj15);
IkReal x15508=(r21*sj15);
IkReal x15509=(cj11*sj12);
IkReal x15510=(cj12*sj11);
IkReal x15511=((1.0)*cj13);
IkReal x15512=(r20*r21*sj13);
IkReal x15513=(cj13*x15503);
CheckValue<IkReal> x15514=IKPowWithIntegerCheck(IKsign((((x15504*x15513))+(((-1.0)*x15504*x15505*x15511))+(((2.0)*cj13*cj15*r20*x15508))+(((-1.0)*x15503*x15511))+(((-1.0)*x15511*(r22*r22))))),-1);
if(!x15514.valid){
continue;
}
CheckValue<IkReal> x15515 = IKatan2WithCheck(IkReal((((r20*r22*x15506))+((r22*x15509))+((cj15*r21*r22*sj13))+((r22*x15510)))),IkReal((((cj15*x15503*x15506))+((x15508*x15509))+((x15508*x15510))+(((-2.0)*x15504*x15512))+(((-1.0)*x15505*x15506*x15507))+(((-1.0)*r20*x15507*x15510))+x15512+(((-1.0)*r20*x15507*x15509)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15515.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15514.value)))+(x15515.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x15516=IKsin(j14);
IkReal x15517=IKcos(j14);
IkReal x15518=(r21*sj15);
IkReal x15519=(cj15*r21);
IkReal x15520=(r20*sj15);
IkReal x15521=(cj15*r20);
IkReal x15522=(cj13*x15517);
IkReal x15523=((1.0)*x15517);
IkReal x15524=(r22*x15516);
evalcond[0]=((((-1.0)*r22*x15523))+((x15516*x15518))+(((-1.0)*x15516*x15521)));
evalcond[1]=(((sj13*x15520))+(((-1.0)*x15521*x15522))+((sj13*x15519))+((cj13*x15524))+((cj12*sj11))+((x15518*x15522))+((cj11*sj12)));
evalcond[2]=(((sj11*sj12))+((cj13*x15520))+(((-1.0)*sj13*x15518*x15523))+((sj13*x15517*x15521))+((cj13*x15519))+(((-1.0)*cj11*cj12))+(((-1.0)*sj13*x15524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x15525=(cj15*sj14);
IkReal x15526=(sj14*sj15);
if( IKabs(((((-1.0)*r00*x15525))+((r01*x15526))+(((-1.0)*cj14*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj14*r12))+((r10*x15525))+(((-1.0)*r11*x15526)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x15525))+((r01*x15526))+(((-1.0)*cj14*r02))))+IKsqr((((cj14*r12))+((r10*x15525))+(((-1.0)*r11*x15526))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r00*x15525))+((r01*x15526))+(((-1.0)*cj14*r02))), (((cj14*r12))+((r10*x15525))+(((-1.0)*r11*x15526))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x15527=IKcos(j10);
IkReal x15528=IKsin(j10);
IkReal x15529=(sj11*sj12);
IkReal x15530=(sj13*sj15);
IkReal x15531=(cj14*r01);
IkReal x15532=(cj13*sj15);
IkReal x15533=((1.0)*cj14);
IkReal x15534=((0.08535)*sj15);
IkReal x15535=(cj15*r01);
IkReal x15536=(sj14*sj15);
IkReal x15537=(cj11*cj12);
IkReal x15538=((1.0)*sj12);
IkReal x15539=(cj12*sj11);
IkReal x15540=(cj15*sj13);
IkReal x15541=(r02*sj14);
IkReal x15542=((1.0)*sj13);
IkReal x15543=(cj13*cj15);
IkReal x15544=(r12*sj14);
IkReal x15545=(cj11*x15528);
IkReal x15546=((0.21325)*x15527);
IkReal x15547=((1.0)*cj15*sj14);
IkReal x15548=((1.0)*x15527);
IkReal x15549=(cj11*x15527);
IkReal x15550=((1.0)*x15528);
evalcond[0]=((((-1.0)*r12*x15533))+x15527+((r11*x15536))+(((-1.0)*r10*x15547)));
evalcond[1]=(((r01*x15536))+(((-1.0)*r02*x15533))+(((-1.0)*r00*x15547))+(((-1.0)*x15550)));
evalcond[2]=((((-1.0)*x15529*x15546))+(((-0.11235)*x15528))+((x15537*x15546))+(((-1.0)*px))+(((-0.08535)*x15535))+(((-1.0)*r00*x15534))+(((0.24365)*x15549)));
evalcond[3]=((((-0.08535)*cj15*r11))+(((-0.21325)*x15528*x15529))+(((-1.0)*py))+(((0.11235)*x15527))+(((0.21325)*x15528*x15537))+(((0.24365)*x15545))+(((-1.0)*r10*x15534)));
evalcond[4]=(((sj13*x15535))+((r00*x15530))+((cj13*x15541))+(((-1.0)*r00*x15533*x15543))+(((-1.0)*x15537*x15548))+((x15527*x15529))+((x15531*x15532)));
evalcond[5]=(((r10*x15530))+(((-1.0)*r10*x15533*x15543))+(((-1.0)*x15537*x15550))+((cj13*x15544))+((cj14*r11*x15532))+((r11*x15540))+((x15528*x15529)));
evalcond[6]=(((cj14*r00*x15540))+((cj13*x15535))+(((-1.0)*x15530*x15531))+((r00*x15532))+(((-1.0)*x15538*x15549))+(((-1.0)*x15539*x15548))+(((-1.0)*x15541*x15542)));
evalcond[7]=(((r10*x15532))+(((-1.0)*x15542*x15544))+(((-1.0)*r11*x15530*x15533))+(((-1.0)*x15539*x15550))+((r11*x15543))+((cj14*r10*x15540))+(((-1.0)*x15538*x15545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15551=cj15*cj15;
IkReal x15552=r21*r21;
IkReal x15553=r20*r20;
IkReal x15554=(cj11*cj12);
IkReal x15555=(r21*sj15);
IkReal x15556=(cj15*r20);
IkReal x15557=(cj13*r21);
IkReal x15558=(sj11*sj12);
IkReal x15559=(cj13*sj15);
IkReal x15560=(sj13*x15552);
CheckValue<IkReal> x15561=IKPowWithIntegerCheck(IKsign(((((-2.0)*sj13*x15555*x15556))+((sj13*(r22*r22)))+(((-1.0)*x15551*x15560))+((sj13*x15551*x15553))+x15560)),-1);
if(!x15561.valid){
continue;
}
CheckValue<IkReal> x15562 = IKatan2WithCheck(IkReal((((r22*x15558))+((r20*r22*x15559))+(((-1.0)*r22*x15554))+((cj15*r22*x15557)))),IkReal((((x15555*x15558))+(((-1.0)*x15556*x15558))+(((-1.0)*cj15*x15553*x15559))+(((-2.0)*r20*x15551*x15557))+((r20*x15557))+((x15554*x15556))+(((-1.0)*x15554*x15555))+((cj15*x15552*x15559)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15562.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15561.value)))+(x15562.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x15563=IKsin(j14);
IkReal x15564=IKcos(j14);
IkReal x15565=(r21*sj15);
IkReal x15566=(cj15*r21);
IkReal x15567=(r20*sj15);
IkReal x15568=(cj15*r20);
IkReal x15569=(cj13*x15564);
IkReal x15570=((1.0)*x15564);
IkReal x15571=(r22*x15563);
evalcond[0]=((((-1.0)*r22*x15570))+((x15563*x15565))+(((-1.0)*x15563*x15568)));
evalcond[1]=((((-1.0)*x15568*x15569))+((sj13*x15566))+((sj13*x15567))+((x15565*x15569))+((cj12*sj11))+((cj13*x15571))+((cj11*sj12)));
evalcond[2]=(((sj11*sj12))+((sj13*x15564*x15568))+(((-1.0)*sj13*x15565*x15570))+((cj13*x15567))+((cj13*x15566))+(((-1.0)*sj13*x15571))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x15572=(cj15*sj14);
IkReal x15573=(sj14*sj15);
if( IKabs(((((-1.0)*cj14*r02))+(((-1.0)*r00*x15572))+((r01*x15573)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x15573))+((cj14*r12))+((r10*x15572)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj14*r02))+(((-1.0)*r00*x15572))+((r01*x15573))))+IKsqr(((((-1.0)*r11*x15573))+((cj14*r12))+((r10*x15572))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*cj14*r02))+(((-1.0)*r00*x15572))+((r01*x15573))), ((((-1.0)*r11*x15573))+((cj14*r12))+((r10*x15572))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x15574=IKcos(j10);
IkReal x15575=IKsin(j10);
IkReal x15576=(sj11*sj12);
IkReal x15577=(sj13*sj15);
IkReal x15578=(cj14*r01);
IkReal x15579=(cj13*sj15);
IkReal x15580=((1.0)*cj14);
IkReal x15581=((0.08535)*sj15);
IkReal x15582=(cj15*r01);
IkReal x15583=(sj14*sj15);
IkReal x15584=(cj11*cj12);
IkReal x15585=((1.0)*sj12);
IkReal x15586=(cj12*sj11);
IkReal x15587=(cj15*sj13);
IkReal x15588=(r02*sj14);
IkReal x15589=((1.0)*sj13);
IkReal x15590=(cj13*cj15);
IkReal x15591=(r12*sj14);
IkReal x15592=(cj11*x15575);
IkReal x15593=((0.21325)*x15574);
IkReal x15594=((1.0)*cj15*sj14);
IkReal x15595=((1.0)*x15574);
IkReal x15596=(cj11*x15574);
IkReal x15597=((1.0)*x15575);
evalcond[0]=(((r11*x15583))+(((-1.0)*r12*x15580))+(((-1.0)*r10*x15594))+x15574);
evalcond[1]=(((r01*x15583))+(((-1.0)*r02*x15580))+(((-1.0)*r00*x15594))+(((-1.0)*x15597)));
evalcond[2]=((((-0.08535)*x15582))+(((-1.0)*r00*x15581))+(((-1.0)*px))+(((0.24365)*x15596))+((x15584*x15593))+(((-1.0)*x15576*x15593))+(((-0.11235)*x15575)));
evalcond[3]=((((-0.08535)*cj15*r11))+(((0.21325)*x15575*x15584))+(((-1.0)*r10*x15581))+(((-1.0)*py))+(((0.24365)*x15592))+(((-0.21325)*x15575*x15576))+(((0.11235)*x15574)));
evalcond[4]=((((-1.0)*x15584*x15595))+(((-1.0)*r00*x15580*x15590))+((sj13*x15582))+((x15578*x15579))+((r00*x15577))+((x15574*x15576))+((cj13*x15588)));
evalcond[5]=((((-1.0)*x15584*x15597))+(((-1.0)*r10*x15580*x15590))+((cj14*r11*x15579))+((r11*x15587))+((r10*x15577))+((cj13*x15591))+((x15575*x15576)));
evalcond[6]=((((-1.0)*x15588*x15589))+(((-1.0)*x15585*x15596))+((cj14*r00*x15587))+((r00*x15579))+(((-1.0)*x15577*x15578))+(((-1.0)*x15586*x15595))+((cj13*x15582)));
evalcond[7]=((((-1.0)*r11*x15577*x15580))+((r10*x15579))+(((-1.0)*x15585*x15592))+((r11*x15590))+(((-1.0)*x15589*x15591))+(((-1.0)*x15586*x15597))+((cj14*r10*x15587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - dual_arm_robot_car_grippers (2e9f712784d86312a9125c3b7fe754c5)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
