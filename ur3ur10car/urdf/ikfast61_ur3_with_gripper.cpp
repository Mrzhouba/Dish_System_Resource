/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2021-05-31 15:06:11.855238
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47;
x0=IKsin(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[0]);
x10=IKsin(j[4]);
x11=IKcos(j[4]);
x12=((0.08535)*x0);
x13=((0.0819)*x5);
x14=((0.08535)*x9);
x15=((1.0)*x0);
x16=((1.0)*x5);
x17=((0.21325)*x0);
x18=((1.0)*x11);
x19=((0.0819)*x6);
x20=((0.24365)*x3);
x21=((1.0)*x6);
x22=((1.0)*x9);
x23=((0.21325)*x9);
x24=(x11*x9);
x25=(x2*x3);
x26=(x1*x4);
x27=(x3*x4);
x28=(x1*x2);
x29=(x10*x15);
x30=(x14*x3);
x31=(x15*x27);
x32=(x22*x27);
x33=(x25+x26);
x34=((((-1.0)*x28))+(((1.0)*x27)));
x35=(x33*x6);
x36=(x34*x5);
x37=((((-1.0)*x31))+((x0*x28)));
x38=((((-1.0)*x32))+((x28*x9)));
x39=(x15*((x25+x26)));
x40=(x22*((x25+x26)));
x41=(x38*x6);
x42=(((x34*x6))+((x5*(((((-1.0)*x26))+(((-1.0)*x25)))))));
x43=(((x39*x5))+((x37*x6)));
x44=(x41+((x40*x5)));
x45=(((x5*((x32+(((-1.0)*x22*x28))))))+((x40*x6)));
x46=(x11*x43);
x47=(((x16*(((((-1.0)*x31))+((x15*x28))))))+(((-1.0)*x21*x39)));
eerot[0]=(((x47*x8))+((x7*(((((-1.0)*x18*x43))+(((-1.0)*x10*x22)))))));
eerot[1]=(((x47*x7))+((x8*((x46+((x10*x9)))))));
eerot[2]=((((-1.0)*x18*x9))+((x10*x43)));
eetrans[0]=((-0.37)+((x6*((((x12*x25))+((x12*x26))))))+(((-1.0)*x0*x20))+(((-1.0)*x17*x27))+((x17*x28))+(((-0.11235)*x9))+(((-0.0819)*x24))+((x10*((((x19*x37))+((x13*x39))))))+((x5*(((((-1.0)*x12*x28))+((x12*x27)))))));
eerot[3]=(((x7*(((((-1.0)*x29))+((x11*x44))))))+((x45*x8)));
eerot[4]=(((x8*(((((-1.0)*x18*x44))+x29))))+((x45*x7)));
eerot[5]=(((x10*(((((-1.0)*x16*x40))+(((-1.0)*x21*x38))))))+(((-1.0)*x11*x15)));
IkReal x48=((1.0)*x14);
eetrans[1]=(((x6*(((((-1.0)*x26*x48))+(((-1.0)*x25*x48))))))+((x23*x27))+((x5*(((((-1.0)*x27*x48))+((x14*x28))))))+(((-0.0819)*x0*x11))+((x10*(((((-1.0)*x19*x38))+(((-1.0)*x13*x40))))))+(((-0.11235)*x0))+(((-1.0)*x23*x28))+((x20*x9)));
eerot[6]=(((x42*x8))+((x11*x7*((x36+x35)))));
eerot[7]=(((x11*x8*(((((-1.0)*x36))+(((-1.0)*x35))))))+((x42*x7)));
eerot[8]=(x10*(((((-1.0)*x16*x34))+(((-1.0)*x21*x33)))));
eetrans[2]=((0.5519)+((x10*(((((-1.0)*x19*x33))+(((-1.0)*x13*x34))))))+(((-0.21325)*x26))+(((-0.21325)*x25))+(((-0.24365)*x1))+((x5*(((((0.08535)*x25))+(((0.08535)*x26))))))+((x6*(((((0.08535)*x28))+(((-0.08535)*x27)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j10,cj10,sj10,htj10,j10mul,j11,cj11,sj11,htj11,j11mul,j12,cj12,sj12,htj12,j12mul,j13,cj13,sj13,htj13,j13mul,j14,cj14,sj14,htj14,j14mul,j15,cj15,sj15,htj15,j15mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij10[2], _nj10,_ij11[2], _nj11,_ij12[2], _nj12,_ij13[2], _nj13,_ij14[2], _nj14,_ij15[2], _nj15;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j10=numeric_limits<IkReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1; j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1; j14=numeric_limits<IkReal>::quiet_NaN(); _ij14[0] = -1; _ij14[1] = -1; _nj14 = -1; j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r10;
new_r01=r11;
new_r02=r12;
new_px=(py+(((-0.0819)*r12)));
new_r10=((-1.0)*r00);
new_r11=((-1.0)*r01);
new_r12=((-1.0)*r02);
new_py=((-0.37)+(((-1.0)*px))+(((0.0819)*r02)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.5519)+pz+(((-0.0819)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x49=((1.0)*px);
IkReal x50=((1.0)*pz);
IkReal x51=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x51))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x50)));
rxp0_2=((((-1.0)*r10*x49))+((py*r00)));
rxp1_0=((((-1.0)*r21*x51))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x50)));
rxp1_2=((((-1.0)*r11*x49))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x51)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x50)));
rxp2_2=((((-1.0)*r12*x49))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x52=((0.1707)*npx);
IkReal x53=((0.1707)*npy);
IkReal x54=((0.08535)*r22);
IkReal x55=((0.08535)*r21);
IkReal x56=((-0.08535)*r20);
IkReal x57=((-1.0)*r20);
IkReal x58=((-1.0)*rxp0_2);
IkReal x59=((-0.08535)*r21);
IkReal x60=((-1.0)*r21);
IkReal x61=((-1.0)*rxp1_2);
IkReal x62=((-1.0)*npx);
IkReal x63=((-1.0)*r22);
IkReal x64=((-1.0)*npz);
matrixinvcoeffs[0]=x56;
matrixinvcoeffs[1]=x52;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x57;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x58;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x56;
matrixinvcoeffs[19]=x52;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x57;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x58;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x59;
matrixinvcoeffs[33]=x53;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x60;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x61;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x59;
matrixinvcoeffs[51]=x53;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x60;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x61;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x63;
matrixinvcoeffs[76]=x54;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x64;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x54;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x61;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x59;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x61;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x55;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x57;
matrixinvcoeffs[133]=x62;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.08535)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x57;
matrixinvcoeffs[151]=x62;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x56;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x63;
matrixinvcoeffs[165]=x64;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x54;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x63;
matrixinvcoeffs[183]=x64;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.08535)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x60;
matrixinvcoeffs[204]=x55;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x61;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x55;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x62;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x56;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x57;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x56;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x58;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_3=matrixinvcoeffs[54], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_1=matrixinvcoeffs[23], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_1=matrixinvcoeffs[27], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x65=pz*pz;
IkReal x66=pp*pp;
IkReal x67=((0.1707)*pz);
IkReal x68=(pp*r21);
IkReal x69=((0.1707)*rxp1_2);
IkReal x70=(gclwh13_1*pp);
IkReal x71=(gclwh9_0*r20);
IkReal x72=(npy*pz);
IkReal x73=((4.561674317235e-5)*r21);
IkReal x74=(npz*pz);
IkReal x75=(gclwh13_15*r21);
IkReal x76=((0.0072846225)*pz);
IkReal x77=(gclwh11_13*r22);
IkReal x78=((0.014569245)*r21);
IkReal x79=(gclwh8_12*r20);
IkReal x80=(gclwh15_1*r20);
IkReal x81=((2.0)*pp);
IkReal x82=(pp*r20);
IkReal x83=(pp*r22);
IkReal x84=(gclwh14_2*pz);
IkReal x85=(gclwh6_11*r21);
IkReal x86=((0.3414)*rxp0_2);
IkReal x87=(npx*pz);
IkReal x88=((0.001068933642)*rxp2_2);
IkReal x89=(gclwh15_10*r20);
IkReal x90=((0.853)*pp);
IkReal x91=(gclwh9_13*rxp0_2);
IkReal x92=(gclwh2_0*r21);
IkReal x93=((0.019178145)*rxp0_2);
IkReal x94=((0.2247)*gclwh15_15);
IkReal x95=(gclwh5_9*r22);
IkReal x96=(gclwh8_2*rxp0_2);
IkReal x97=((0.6828)*rxp2_2);
IkReal x98=((0.014569245)*rxp1_2);
IkReal x99=((0.15598566)*rxp0_2);
IkReal x100=(gclwh14_3*rxp0_2);
IkReal x101=(gclwh13_0*pz);
IkReal x102=(gclwh11_10*r22);
IkReal x103=(gclwh10_11*r22);
IkReal x104=((1.0)*pz);
IkReal x105=(gclwh13_0*rxp1_2);
IkReal x106=(gclwh4_14*rxp2_2);
IkReal x107=((0.1707)*rxp2_2);
IkReal x108=((0.00518928)*rxp1_2);
IkReal x109=(gclwh5_0*pz);
IkReal x110=((0.00155960496929498)*r21);
IkReal x111=(gclwh4_3*r22);
IkReal x112=(gclwh14_8*rxp0_2);
IkReal x113=((0.00332834402025)*r22);
IkReal x114=(gclwh4_2*r22);
IkReal x115=(gclwh12_14*rxp1_2);
IkReal x116=(gclwh10_2*r22);
IkReal x117=((0.000818427337875)*r20);
IkReal x118=((0.001068933642)*rxp1_2);
IkReal x119=((0.01037856)*rxp0_2);
IkReal x120=(gclwh15_9*r20);
IkReal x121=(gclwh5_10*r22);
IkReal x122=(gclwh4_8*rxp2_2);
IkReal x123=(gclwh9_10*r20);
IkReal x124=((4.0)*gclwh11_10);
IkReal x125=(gclwh6_12*r21);
IkReal x126=((0.00310689149625)*r20);
IkReal x127=(gclwh13_9*r21);
IkReal x128=(gclwh12_8*r21);
IkReal x129=((0.3414)*rxp1_2);
IkReal x130=((2.0)*gclwh7_10);
IkReal x131=((0.07280355)*rxp1_2);
IkReal x132=(gclwh8_2*r20);
IkReal x133=(gclwh4_14*r22);
IkReal x134=((0.6828)*rxp1_2);
IkReal x135=(gclwh15_15*rxp0_2);
IkReal x136=((4.0)*gclwh8_11);
IkReal x137=(gclwh7_0*r21);
IkReal x138=(gclwh5_15*rxp2_2);
IkReal x139=(gclwh15_9*rxp0_2);
IkReal x140=(gclwh4_2*rxp2_2);
IkReal x141=(gclwh14_11*r20);
IkReal x142=((0.019178145)*rxp1_2);
IkReal x143=((4.561674317235e-5)*r22);
IkReal x144=((4.0)*gclwh9_10);
IkReal x145=((0.6828)*rxp0_2);
IkReal x146=(gclwh5_9*rxp2_2);
IkReal x147=(gclwh15_1*rxp0_2);
IkReal x148=(gclwh9_13*r20);
IkReal x149=(gclwh6_2*r21);
IkReal x150=((0.00310689149625)*r21);
IkReal x151=((0.019178145)*rxp2_2);
IkReal x152=((0.0304)*pp);
IkReal x153=((0.2247)*gclwh13_15);
IkReal x154=((0.000818427337875)*r22);
IkReal x155=((0.00163685467575)*r20);
IkReal x156=((0.000818427337875)*r21);
IkReal x157=(gclwh5_0*r22);
IkReal x158=((0.1707)*rxp0_2);
IkReal x159=((0.08318211)*rxp1_2);
IkReal x160=((2.0)*gclwh6_11);
IkReal x161=(gclwh1_3*r20);
IkReal x162=((0.036546103557)*rxp2_2);
IkReal x163=((4.0)*gclwh10_11);
IkReal x164=((0.036546103557)*rxp1_2);
IkReal x165=((0.1707)*pp);
IkReal x166=(gclwh11_13*rxp2_2);
IkReal x167=((0.3414)*rxp2_2);
IkReal x168=(gclwh10_12*rxp2_2);
IkReal x169=((0.0072846225)*r21);
IkReal x170=(gclwh4_8*r22);
IkReal x171=((0.07280355)*rxp0_2);
IkReal x172=((2.0)*gclwh12_11);
IkReal x173=(gclwh11_0*r22);
IkReal x174=(gclwh14_8*r20);
IkReal x175=(gclwh14_14*rxp0_2);
IkReal x176=(gclwh7_13*r21);
IkReal x177=(gclwh11_0*pz);
IkReal x178=(gclwh10_2*pz);
IkReal x179=(gclwh12_2*rxp1_2);
IkReal x180=(gclwh5_0*rxp2_2);
IkReal x181=((0.07280355)*rxp2_2);
IkReal x182=((0.4569)*pp);
IkReal x183=(gclwh4_11*r22);
IkReal x184=((4.0)*gclwh6_11);
IkReal x185=(gclwh8_11*r20);
IkReal x186=((0.2247)*gclwh5_15);
IkReal x187=((4.0)*gclwh7_10);
IkReal x188=((2.0)*gclwh13_10);
IkReal x189=((0.07799283)*rxp1_2);
IkReal x190=(gclwh5_1*r22);
IkReal x191=((0.2247)*gclwh4_14);
IkReal x192=(gclwh10_12*r22);
IkReal x193=((0.2247)*gclwh14_14);
IkReal x194=((0.2247)*gclwh12_14);
IkReal x195=(gclwh14_3*r20);
IkReal x196=(gclwh13_15*rxp1_2);
IkReal x197=(gclwh11_1*r22);
IkReal x198=(gclwh0_1*r20);
IkReal x199=(gclwh8_12*rxp0_2);
IkReal x200=(gclwh14_14*x93);
IkReal x201=(gclwh6_5*x156);
IkReal x202=((0.019178145)*x115);
IkReal x203=((0.019178145)*x106);
IkReal x204=(gclwh10_5*x154);
IkReal x205=(gclwh8_5*x117);
IkReal x206=((0.014569245)*x122);
IkReal x207=((0.0072846225)*x85);
IkReal x208=(gclwh12_8*x98);
IkReal x209=(gclwh4_11*x107);
IkReal x210=(gclwh12_11*x69);
IkReal x211=(gclwh14_11*x158);
IkReal x212=((0.0072846225)*x103);
IkReal x213=((0.014569245)*x112);
IkReal x214=((0.0072846225)*x185);
IkReal x215=(gclwh13_9*x98);
IkReal x216=((0.014569245)*x146);
IkReal x217=((0.0072846225)*x102);
IkReal x218=(gclwh15_10*x158);
IkReal x219=((0.0072846225)*x123);
IkReal x220=(gclwh13_10*x69);
IkReal x221=(gclwh7_10*x169);
IkReal x222=((0.014569245)*x139);
IkReal x223=(gclwh5_10*x107);
IkReal x224=(gclwh15_15*x93);
IkReal x225=(gclwh7_7*x156);
IkReal x226=(gclwh13_15*x142);
IkReal x227=((0.019178145)*x138);
IkReal x228=(gclwh11_7*x154);
IkReal x229=(gclwh9_7*x117);
IkReal x230=(gclwh8_5*x93);
IkReal x231=(gclwh10_5*x151);
IkReal x232=(gclwh14_14*x117);
IkReal x233=(gclwh6_5*x142);
IkReal x234=(gclwh12_14*x156);
IkReal x235=((0.000818427337875)*x133);
IkReal x236=(gclwh8_11*x158);
IkReal x237=(gclwh10_11*x107);
IkReal x238=(gclwh12_11*x169);
IkReal x239=((0.000621742530375)*x170);
IkReal x240=((0.0072846225)*x183);
IkReal x241=((0.000621742530375)*x128);
IkReal x242=((0.000621742530375)*x174);
IkReal x243=(gclwh6_11*x69);
IkReal x244=((0.0072846225)*x141);
IkReal x245=(gclwh9_10*x158);
IkReal x246=((0.000621742530375)*x120);
IkReal x247=((0.0072846225)*x121);
IkReal x248=(gclwh11_10*x107);
IkReal x249=(gclwh13_10*x169);
IkReal x250=((0.000621742530375)*x127);
IkReal x251=((0.0072846225)*x89);
IkReal x252=(gclwh7_10*x69);
IkReal x253=((0.000621742530375)*x95);
IkReal x254=((0.000818427337875)*x75);
IkReal x255=(gclwh5_15*x154);
IkReal x256=(gclwh7_7*x142);
IkReal x257=(gclwh15_15*x117);
IkReal x258=(gclwh11_7*x151);
IkReal x259=(gclwh9_7*x93);
IkReal x260=(gclwh14_11*x86);
IkReal x261=((0.014569245)*x103);
IkReal x262=((0.014569245)*x185);
IkReal x263=((0.03835629)*x175);
IkReal x264=((0.03835629)*x106);
IkReal x265=((0.03835629)*x115);
IkReal x266=(gclwh4_11*x167);
IkReal x267=(gclwh12_11*x129);
IkReal x268=(gclwh6_11*x78);
IkReal x269=((0.03835629)*x138);
IkReal x270=((0.03835629)*x196);
IkReal x271=((0.03835629)*x135);
IkReal x272=(gclwh15_10*x86);
IkReal x273=((0.014569245)*x123);
IkReal x274=((0.014569245)*x102);
IkReal x275=((0.0608)*x72);
IkReal x276=((2.0)*x65);
IkReal x277=(r21*x66);
IkReal x278=((1.0)*x66);
IkReal x279=((0.2247)*gclwh10_5*x74);
IkReal x280=((0.2247)*gclwh8_5*x87);
IkReal x281=((0.11235)*gclwh6_5*x68);
IkReal x282=((0.11235)*gclwh8_5*x82);
IkReal x283=((0.2247)*gclwh6_5*x72);
IkReal x284=((0.11235)*gclwh10_5*x83);
IkReal x285=(gclwh12_3*pp*x69);
IkReal x286=(gclwh14_2*rxp0_2*x67);
IkReal x287=(gclwh6_3*x277);
IkReal x288=(x116*x76);
IkReal x289=((2.0)*gclwh10_11*x74);
IkReal x290=((2.0)*gclwh8_11*x87);
IkReal x291=(x178*x83);
IkReal x292=(gclwh4_3*pp*x107);
IkReal x293=(x132*x76);
IkReal x294=(gclwh8_2*pz*x82);
IkReal x295=(x149*x76);
IkReal x296=(x160*x72);
IkReal x297=(x179*x67);
IkReal x298=(x140*x67);
IkReal x299=(x100*x165);
IkReal x300=(x69*x70);
IkReal x301=(gclwh7_1*x277);
IkReal x302=(x173*x76);
IkReal x303=(gclwh15_0*rxp0_2*x67);
IkReal x304=(x177*x83);
IkReal x305=(gclwh5_1*pp*x107);
IkReal x306=(x130*x72);
IkReal x307=(x71*x76);
IkReal x308=(pp*pz*x71);
IkReal x309=((2.0)*gclwh11_10*x74);
IkReal x310=((2.0)*gclwh9_10*x87);
IkReal x311=(x147*x165);
IkReal x312=(x105*x67);
IkReal x313=(x180*x67);
IkReal x314=(x137*x76);
IkReal x315=((0.2247)*gclwh9_7*x87);
IkReal x316=((0.11235)*gclwh7_7*x68);
IkReal x317=((0.2247)*gclwh11_7*x74);
IkReal x318=((0.11235)*gclwh11_7*x83);
IkReal x319=((0.2247)*gclwh7_7*x72);
IkReal x320=((0.11235)*gclwh9_7*x82);
IkReal x321=(x194*x72);
IkReal x322=((0.11235)*gclwh14_14*x82);
IkReal x323=(x191*x74);
IkReal x324=((0.11235)*gclwh12_14*x68);
IkReal x325=(x193*x87);
IkReal x326=((0.11235)*gclwh4_14*x83);
IkReal x327=(gclwh14_8*npx*x67);
IkReal x328=(x82*x84);
IkReal x329=(gclwh12_3*x277);
IkReal x330=(gclwh3_2*r21*x76);
IkReal x331=((0.08535)*gclwh12_8*x68);
IkReal x332=(gclwh6_2*rxp1_2*x67);
IkReal x333=(gclwh3_3*x277);
IkReal x334=(x161*x66);
IkReal x335=((0.08535)*gclwh4_8*x83);
IkReal x336=(gclwh14_2*r20*x76);
IkReal x337=((2.0)*gclwh14_11*x87);
IkReal x338=(x111*x66);
IkReal x339=(gclwh1_2*r20*x76);
IkReal x340=(gclwh12_8*npy*x67);
IkReal x341=(gclwh4_8*npz*x67);
IkReal x342=(x67*x96);
IkReal x343=((2.0)*gclwh4_11*x74);
IkReal x344=((0.08535)*gclwh14_8*x82);
IkReal x345=(gclwh6_3*pp*x69);
IkReal x346=(gclwh10_2*rxp2_2*x67);
IkReal x347=(x114*x76);
IkReal x348=(gclwh12_2*r21*x76);
IkReal x349=(x172*x72);
IkReal x350=(gclwh13_0*r21*x76);
IkReal x351=(x66*x80);
IkReal x352=((0.08535)*gclwh15_9*x82);
IkReal x353=(x109*x83);
IkReal x354=(x101*x68);
IkReal x355=(x76*x92);
IkReal x356=(gclwh0_0*r20*x76);
IkReal x357=(gclwh9_0*rxp0_2*x67);
IkReal x358=((2.0)*gclwh15_10*x87);
IkReal x359=(x157*x76);
IkReal x360=(gclwh2_1*x277);
IkReal x361=(gclwh5_9*npz*x67);
IkReal x362=(gclwh7_1*pp*x69);
IkReal x363=(gclwh11_0*rxp2_2*x67);
IkReal x364=(gclwh13_9*npy*x67);
IkReal x365=(x198*x66);
IkReal x366=((0.08535)*gclwh5_9*x83);
IkReal x367=(gclwh15_9*npx*x67);
IkReal x368=((0.08535)*gclwh13_9*x68);
IkReal x369=(gclwh11_1*pp*x107);
IkReal x370=((2.0)*gclwh5_10*x74);
IkReal x371=(x188*x72);
IkReal x372=(gclwh7_0*rxp1_2*x67);
IkReal x373=(gclwh15_0*r20*x76);
IkReal x374=(x87*x94);
IkReal x375=((0.11235)*gclwh5_15*x83);
IkReal x376=((0.11235)*gclwh13_15*x68);
IkReal x377=(x153*x72);
IkReal x378=(x186*x74);
IkReal x379=((0.11235)*gclwh15_15*x82);
IkReal x380=(x185*x81);
IkReal x381=(x103*x81);
IkReal x382=(x184*x72);
IkReal x383=(x136*x87);
IkReal x384=(x160*x68);
IkReal x385=(x163*x74);
IkReal x386=(x102*x81);
IkReal x387=(x187*x72);
IkReal x388=(x123*x81);
IkReal x389=(gclwh6_2*npy*x276);
IkReal x390=(gclwh6_3*x72*x81);
IkReal x391=(gclwh6_2*x104*x68);
IkReal x392=(gclwh10_2*npz*x276);
IkReal x393=(gclwh8_2*npx*x276);
IkReal x394=(gclwh11_1*x74*x81);
IkReal x395=(gclwh7_0*npy*x276);
IkReal x396=(gclwh9_0*npx*x276);
IkReal x397=(x197*x278);
IkReal x398=(gclwh7_1*x72*x81);
IkReal x399=(gclwh11_0*npz*x276);
IkReal x400=(gclwh7_0*x104*x68);
IkReal x401=(gclwh12_2*npy*x276);
IkReal x402=(gclwh3_2*npy*x276);
IkReal x403=(gclwh1_2*npx*x276);
IkReal x404=(gclwh14_3*x81*x87);
IkReal x405=(gclwh4_2*npz*x276);
IkReal x406=(gclwh4_3*x74*x81);
IkReal x407=(gclwh12_2*x104*x68);
IkReal x408=(gclwh1_2*x104*x82);
IkReal x409=(gclwh3_3*x72*x81);
IkReal x410=(gclwh4_2*x104*x83);
IkReal x411=(gclwh1_3*x81*x87);
IkReal x412=(gclwh3_2*x104*x68);
IkReal x413=(gclwh12_3*x72*x81);
IkReal x414=(gclwh14_2*npx*x276);
IkReal x415=(x195*x278);
IkReal x416=(gclwh0_0*npx*x276);
IkReal x417=(gclwh2_0*npy*x276);
IkReal x418=(gclwh5_1*x74*x81);
IkReal x419=((2.0)*x70*x72);
IkReal x420=(gclwh15_0*npx*x276);
IkReal x421=(gclwh2_1*x72*x81);
IkReal x422=(gclwh0_1*x81*x87);
IkReal x423=(gclwh5_0*npz*x276);
IkReal x424=(gclwh13_0*npy*x276);
IkReal x425=(gclwh0_0*x104*x82);
IkReal x426=(gclwh15_0*x104*x82);
IkReal x427=(gclwh2_0*x104*x68);
IkReal x428=((1.0)*gclwh13_1*x277);
IkReal x429=(x190*x278);
IkReal x430=(gclwh15_1*x81*x87);
IkReal x431=(x227+x226);
IkReal x432=(x230+x231);
IkReal x433=(x269+x270);
IkReal x434=(x203+x202);
IkReal x435=(x265+x264);
IkReal x436=(x258+x259);
IkReal x437=(x211+x212+x214+x296);
IkReal x438=(x306+x217+x218+x219);
IkReal x439=(x343+x349+x243+x244);
IkReal x440=(x371+x370+x251+x252);
IkReal x441=(x321+x322+x323+x232);
IkReal x442=(x201+x279+x281+x280);
IkReal x443=(x379+x378+x377+x257);
IkReal x444=(x315+x317+x316+x225);
IkReal x445=(x337+x238+x236+x237+x240);
IkReal x446=(x358+x247+x245+x249+x248);
IkReal x447=(x309+x310+x221+x220+x223);
IkReal x448=(x210+x207+x209+x290+x289);
IkReal x449=(x320+x319+x318+x229+x228);
IkReal x450=(x205+x204+x284+x283+x282);
IkReal x451=(x324+x325+x326+x234+x235);
IkReal x452=(x376+x375+x374+x254+x255);
IkReal x453=(x384+x385+x383+x267+x266+x268);
IkReal x454=(((gclwh7_10*x78))+((x130*x68))+((x144*x87))+((gclwh5_10*x167))+((gclwh13_10*x129))+((x124*x74)));
IkReal x455=(x382+x380+x381+x261+x260+x262);
IkReal x456=(x386+x387+x388+x274+x272+x273);
IkReal x457=(x391+x390+x393+x392+x213+x298+x299+x295+x297);
IkReal x458=(x389+x206+x208+x291+x292+x293+x294+x288+x287+x286+x285);
IkReal x459=(x314+x311+x313+x312+x397+x396+x399+x398+x222+x400);
IkReal x460=(x308+x307+x304+x305+x302+x303+x300+x301+x395+x394+x215+x216);
IkReal x461=(x373+x372+x368+x369+x366+x367+x250+x253+x429+x428+x427+x426+x425+x424+x423+x422+x421+x430);
IkReal x462=(x339+x338+x333+x332+x331+x330+x336+x335+x334+x327+x328+x329+x239+x241+x401+x403+x402+x405+x404+x67);
IkReal x463=(x342+x340+x341+x346+x347+x344+x345+x348+x242+x407+x406+x409+x408+x412+x413+x410+x411+x414+x415);
IkReal x464=(x351+x350+x353+x352+x355+x354+x357+x356+x359+x360+x361+x362+x363+x364+x365+x246+x416+x417+x418+x419+x420+x67);
op[0]=((((0.9138)*gclwh10_12*x74))+(((-0.4569)*gclwh10_12*x83))+(((0.9138)*gclwh8_12*x87))+(((-1.0)*gclwh10_12*x113))+(((0.4569)*gclwh6_12*x68))+(((-1.0)*x200))+(((-1.0)*x450))+(((-1.0)*x182*x79))+(((-0.00332834402025)*x79))+(((-1.0)*gclwh12_8*x189))+x434+x442+(((0.07799283)*x112))+(((0.00332834402025)*x125))+(((-0.9138)*gclwh6_12*x72))+(((-0.07799283)*x122)));
op[1]=((((-1.0)*gclwh12_3*x164))+(((-1.0)*x448))+(((-0.2068108875)*gclwh6_3*x68))+(((0.036546103557)*x100))+(((-1.0)*gclwh6_11*x68))+(((-1.0)*x457))+(((-1.0)*gclwh6_3*x110))+x437+x458+(((0.42819102)*gclwh6_3*x72))+(((-1.0)*gclwh4_3*x162))+((gclwh8_11*x82))+((gclwh10_11*x83)));
op[2]=((-0.09583455)+(((-1.0)*x453))+x455);
op[3]=((((-0.08318211)*x112))+((gclwh8_2*x126))+(((-1.0)*x435))+(((-0.07280355)*x140))+(((-1.0)*gclwh12_2*x131))+(((-0.00310689149625)*x149))+(((-0.853)*gclwh10_2*x74))+(((0.08318211)*x122))+(((-0.853)*gclwh8_2*x87))+((gclwh12_8*x159))+x263+(((0.4265)*gclwh10_2*x83))+(((0.00310689149625)*x116))+(((0.853)*gclwh6_2*x72))+((gclwh14_2*x171))+(((-0.4265)*gclwh6_2*x68))+(((0.4265)*gclwh8_2*x82)));
op[4]=((((-1.0)*x434))+(((-0.0304)*gclwh10_12*x83))+((gclwh12_8*x108))+(((0.0304)*gclwh6_12*x68))+(((0.00518928)*x122))+(((0.0608)*gclwh8_12*x87))+(((-0.000221452524)*x192))+(((-1.0)*x450))+x200+x442+(((-0.00518928)*x112))+(((-1.0)*gclwh6_12*x275))+(((-1.0)*x152*x79))+(((0.000221452524)*x125))+(((-0.000221452524)*x79))+(((0.0608)*gclwh10_12*x74)));
op[5]=((((0.0010225625)*gclwh6_3*x68))+(((-1.0)*x437))+(((-1.0)*gclwh4_3*x88))+(((-1.0)*gclwh8_11*x82))+(((-1.0)*gclwh10_11*x83))+(((-1.0)*x457))+x448+x458+(((-1.0)*gclwh6_3*x73))+(((0.001068933642)*x100))+(((-1.0)*gclwh12_3*x118))+((gclwh6_11*x68))+(((0.01252412)*gclwh6_3*x72)));
op[6]=((((-1.0)*x438))+(((0.42819102)*gclwh7_1*x72))+(((-1.0)*gclwh5_1*x162))+((gclwh7_10*x68))+(((-1.0)*gclwh7_1*x110))+(((-1.0)*gclwh13_1*x164))+(((0.2068108875)*gclwh11_1*x83))+(((-1.0)*x459))+x447+x460+(((-0.2068108875)*gclwh7_1*x68))+(((-1.0)*gclwh9_10*x82))+(((-0.42819102)*gclwh11_1*x74))+(((-1.0)*gclwh11_10*x83))+(((0.036546103557)*x147))+(((0.00155960496929498)*x197)));
op[7]=((((-1.0)*x449))+(((0.4569)*gclwh7_13*x68))+(((-1.0)*gclwh13_9*x189))+(((-0.4569)*gclwh9_13*x82))+(((0.00332834402025)*x176))+(((-1.0)*x182*x77))+(((-0.00332834402025)*x77))+x431+x444+(((-0.00332834402025)*x148))+(((0.9138)*gclwh11_13*x74))+(((0.9138)*gclwh9_13*x87))+(((-0.07799283)*x146))+(((0.07799283)*x139))+(((-1.0)*x224))+(((-0.9138)*gclwh7_13*x72)));
op[8]=((((0.4265)*gclwh11_0*x83))+(((-0.07280355)*x180))+(((0.853)*gclwh7_0*x72))+(((0.00310689149625)*x71))+(((-0.4265)*gclwh7_0*x68))+(((-1.0)*gclwh13_9*x159))+(((-0.853)*gclwh11_0*x74))+(((-0.08318211)*x146))+(((-0.07280355)*x105))+(((0.08318211)*x139))+((gclwh15_0*x171))+x433+(((0.00310689149625)*x173))+(((-1.0)*x271))+(((-0.853)*gclwh9_0*x87))+(((-0.00310689149625)*x137))+(((0.4265)*pp*x71)));
op[9]=((-0.09583455)+(((-1.0)*x454))+x456);
op[10]=((((-1.0)*gclwh7_1*x73))+(((-1.0)*x447))+(((-1.0)*gclwh13_1*x118))+(((0.0010225625)*gclwh7_1*x68))+(((-0.01252412)*gclwh11_1*x74))+(((-1.0)*gclwh7_10*x68))+(((-1.0)*x459))+((gclwh11_1*x143))+(((-1.0)*gclwh5_1*x88))+x438+x460+(((0.01252412)*gclwh7_1*x72))+((gclwh11_10*x83))+((gclwh9_10*x82))+(((0.001068933642)*x147))+(((-0.0010225625)*gclwh11_1*x83)));
op[11]=((((-1.0)*x449))+(((-1.0)*x431))+(((0.00518928)*x146))+(((-0.000221452524)*x148))+x224+(((-0.00518928)*x139))+x444+(((0.0608)*gclwh11_13*x74))+(((-1.0)*gclwh7_13*x275))+(((0.0304)*gclwh7_13*x68))+(((-1.0)*x152*x77))+((gclwh13_9*x108))+(((0.0608)*gclwh9_13*x87))+(((-0.000221452524)*x77))+(((-0.0304)*gclwh9_13*x82))+(((0.000221452524)*x176)));
op[12]=((((-0.00332834402025)*x128))+(((-0.9138)*gclwh14_8*x87))+(((-1.0)*x441))+(((-0.4569)*gclwh4_8*x83))+(((-1.0)*gclwh6_12*x189))+(((-1.0)*gclwh4_8*x113))+(((0.9138)*gclwh4_8*x74))+(((-0.4569)*gclwh12_8*x68))+(((0.07799283)*x168))+(((0.00332834402025)*x174))+(((-1.0)*x233))+x432+x451+(((0.4569)*gclwh14_8*x82))+(((0.07799283)*x199))+(((0.9138)*gclwh12_8*x72)));
op[13]=((-0.2213801325)+(((-0.2068108875)*gclwh12_3*x68))+(((-1.0)*x445))+(((0.42819102)*gclwh12_3*x72))+(((-1.0)*gclwh12_11*x68))+(((-1.0)*gclwh4_11*x83))+((gclwh6_3*x164))+((gclwh3_3*x110))+(((-0.2213801325)*gclwh3_3*x68))+(((-1.0)*x463))+((gclwh14_11*x82))+(((-0.2213801325)*gclwh1_3*x82))+(((0.42819102)*gclwh4_3*x74))+(((0.42819102)*gclwh3_3*x72))+x439+x462+(((-0.00155960496929498)*x111))+(((-1.0)*gclwh12_3*x110))+(((0.2068108875)*gclwh14_3*x82))+(((-0.2068108875)*gclwh4_3*x83))+(((-0.42819102)*gclwh14_3*x87))+(((0.42819102)*gclwh1_3*x87))+(((0.00155960496929498)*x161))+(((0.00155960496929498)*x195)));
op[14]=((-0.053024565)+(((-1.0)*x183*x81))+((x141*x81))+((gclwh6_11*x129))+(((-1.0)*gclwh12_11*x78))+(((-1.0)*x172*x68))+(((-0.014569245)*x183))+(((4.0)*gclwh4_11*x74))+(((0.014569245)*x141))+(((-1.0)*gclwh8_11*x86))+(((4.0)*gclwh12_11*x72))+(((-4.0)*gclwh14_11*x87))+(((-1.0)*gclwh10_11*x167)));
op[15]=((((-0.9746)*gclwh12_8*x72))+(((-0.4265)*gclwh4_2*x83))+(((-0.00310689149625)*x114))+((gclwh14_14*x155))+(((-0.4265)*gclwh1_2*x82))+(((0.4265)*gclwh14_2*x82))+(((-1.0)*gclwh12_2*x150))+((x193*x82))+(((0.4873)*gclwh4_8*x83))+(((-0.00354979654425)*x174))+((gclwh6_2*x131))+(((0.853)*gclwh3_2*x72))+(((0.853)*gclwh1_2*x87))+(((-0.853)*npx*x84))+(((-0.4265)*gclwh12_2*x68))+((gclwh14_2*x126))+(((-0.4265)*gclwh3_2*x68))+(((0.4494)*gclwh4_14*x74))+(((-0.4873)*gclwh14_8*x82))+(((0.4873)*gclwh12_8*x68))+(((-0.4494)*gclwh14_14*x87))+(((-1.0)*x191*x83))+(((-0.07280355)*x96))+(((0.853)*gclwh12_2*x72))+(((0.9746)*gclwh14_8*x87))+(((-1.0)*gclwh10_2*x181))+(((0.00354979654425)*x170))+(((-1.0)*x194*x68))+(((-0.9746)*gclwh4_8*x74))+(((-0.00163685467575)*gclwh12_14*r21))+((gclwh3_2*x150))+(((0.853)*gclwh4_2*x74))+(((-0.00163685467575)*x133))+((gclwh1_2*x126))+(((0.00354979654425)*x128))+(((0.4494)*gclwh12_14*x72)));
op[16]=((((0.00518928)*x199))+(((-0.0608)*gclwh4_8*x74))+(((-0.000221452524)*x174))+(((-1.0)*gclwh12_8*x275))+(((-1.0)*gclwh6_12*x108))+(((0.0304)*gclwh12_8*x68))+(((-1.0)*x451))+(((0.0608)*gclwh14_8*x87))+(((0.0304)*gclwh4_8*x83))+(((-1.0)*x233))+x432+x441+(((0.000221452524)*x128))+(((-0.0304)*gclwh14_8*x82))+(((0.000221452524)*x170))+(((0.00518928)*x168)));
op[17]=((0.0135466825)+(((-4.561674317235e-5)*x111))+((gclwh3_3*x73))+(((-1.0)*x439))+(((-0.0135466825)*gclwh1_3*x82))+(((0.01252412)*gclwh12_3*x72))+(((-1.0)*gclwh14_11*x82))+(((-0.01252412)*gclwh14_3*x87))+(((-1.0)*x463))+(((0.01252412)*gclwh4_3*x74))+((gclwh4_11*x83))+(((4.561674317235e-5)*x195))+(((0.01252412)*gclwh1_3*x87))+(((4.561674317235e-5)*x161))+x445+x462+((gclwh6_3*x118))+(((-1.0)*gclwh12_3*x73))+(((-0.0135466825)*gclwh3_3*x68))+(((0.0010225625)*gclwh4_3*x83))+(((0.0010225625)*gclwh12_3*x68))+(((0.01252412)*gclwh3_3*x72))+((gclwh12_11*x68))+(((-0.0010225625)*gclwh14_3*x82)));
op[18]=((0.2213801325)+((gclwh15_10*x82))+(((-1.0)*x446))+((gclwh2_1*x110))+(((-1.0)*gclwh5_10*x83))+((gclwh13_1*x110))+(((0.42819102)*gclwh0_1*x87))+(((0.42819102)*gclwh2_1*x72))+((gclwh11_1*x162))+(((0.2068108875)*gclwh13_1*x68))+(((-1.0)*x461))+(((-1.0)*gclwh7_1*x164))+(((0.42819102)*gclwh15_1*x87))+(((0.2068108875)*gclwh5_1*x83))+x440+x464+(((-0.2213801325)*gclwh2_1*x68))+(((-0.2213801325)*gclwh0_1*x82))+(((-1.0)*gclwh13_10*x68))+(((-0.00155960496929498)*x80))+(((-0.42819102)*gclwh13_1*x72))+(((-0.42819102)*gclwh5_1*x74))+(((-0.2068108875)*pp*x80))+(((0.00155960496929498)*x190))+(((0.00155960496929498)*x198)));
op[19]=((((-0.00332834402025)*x120))+(((-1.0)*x436))+(((-0.9138)*gclwh5_9*x74))+(((0.4569)*gclwh5_9*x83))+((gclwh7_13*x189))+(((-0.07799283)*x91))+(((-1.0)*x452))+x256+x443+(((-0.9138)*gclwh13_9*x72))+(((0.00332834402025)*x95))+(((-0.07799283)*x166))+(((0.4569)*gclwh13_9*x68))+(((0.00332834402025)*x127))+(((-0.4569)*gclwh15_9*x82))+(((0.9138)*gclwh15_9*x87)));
op[20]=((((0.00354979654425)*x95))+(((-0.00354979654425)*x120))+(((-0.4873)*gclwh15_9*x82))+((gclwh0_0*x126))+(((-0.853)*gclwh5_0*x74))+(((0.00310689149625)*x92))+((x82*x94))+(((-1.0)*gclwh7_0*x131))+(((0.4494)*gclwh5_15*x74))+(((0.4873)*gclwh5_9*x83))+(((0.4265)*gclwh13_0*x68))+(((-0.00163685467575)*gclwh5_15*r22))+(((0.4494)*gclwh13_15*x72))+(((-0.9746)*gclwh13_9*x72))+(((-0.00163685467575)*x75))+(((-0.9746)*gclwh5_9*x74))+(((-1.0)*gclwh15_0*x126))+(((-0.4265)*gclwh15_0*x82))+(((-1.0)*x153*x68))+(((-0.4494)*gclwh15_15*x87))+(((-0.4265)*gclwh0_0*x82))+(((0.853)*gclwh0_0*x87))+((gclwh15_15*x155))+(((0.4873)*gclwh13_9*x68))+(((0.4265)*gclwh5_0*x83))+(((-0.853)*gclwh13_0*x72))+(((0.9746)*gclwh15_9*x87))+(((-1.0)*x186*x83))+(((0.00310689149625)*x157))+(((0.00354979654425)*x127))+((gclwh9_0*x171))+((gclwh13_0*x150))+(((0.853)*gclwh15_0*x87))+(((0.853)*gclwh2_0*x72))+((gclwh11_0*x181))+(((-0.4265)*gclwh2_0*x68)));
op[21]=((-0.053024565)+(((-1.0)*x81*x89))+((gclwh11_10*x167))+(((4.0)*gclwh15_10*x87))+((x188*x68))+(((0.014569245)*x121))+((gclwh13_10*x78))+(((-4.0)*gclwh13_10*x72))+(((-1.0)*gclwh7_10*x129))+(((-0.014569245)*x89))+((x121*x81))+((gclwh9_10*x86))+(((-4.0)*gclwh5_10*x74)));
op[22]=((-0.0135466825)+(((-1.0)*x440))+(((0.01252412)*gclwh0_1*x87))+((gclwh5_10*x83))+((gclwh13_10*x68))+((gclwh11_1*x88))+((gclwh5_1*x143))+(((0.01252412)*gclwh2_1*x72))+(((-0.01252412)*gclwh13_1*x72))+((gclwh2_1*x73))+(((-0.0135466825)*gclwh2_1*x68))+(((-1.0)*gclwh7_1*x118))+(((-1.0)*x461))+(((-4.561674317235e-5)*x80))+((gclwh13_1*x73))+(((4.561674317235e-5)*x198))+(((0.0010225625)*pp*x80))+x446+x464+(((0.01252412)*gclwh15_1*x87))+(((-1.0)*gclwh15_10*x82))+(((-0.0010225625)*gclwh13_1*x68))+(((-0.0010225625)*gclwh5_1*x83))+(((-0.01252412)*gclwh5_1*x74))+(((-0.0135466825)*gclwh0_1*x82)));
op[23]=(((gclwh7_13*x108))+(((-1.0)*x443))+(((-0.000221452524)*x127))+(((-1.0)*x436))+(((-0.00518928)*x91))+(((0.0304)*gclwh15_9*x82))+(((-0.000221452524)*x95))+(((-0.0608)*gclwh15_9*x87))+x256+x452+(((-0.0304)*gclwh5_9*x83))+(((-0.0304)*gclwh13_9*x68))+(((0.000221452524)*x120))+((gclwh13_9*x275))+(((0.0608)*gclwh5_9*x74))+(((-0.00518928)*x166)));
op[24]=((-0.20533086)+(((-1.0)*x453))+x455);
op[25]=((((0.0066566880405)*x132))+(((-1.0)*x435))+(((0.0066566880405)*x116))+(((1.8276)*gclwh6_2*x72))+(((-0.0066566880405)*x149))+(((0.9138)*gclwh8_2*x82))+(((-0.9138)*gclwh6_2*x68))+x263+((gclwh14_2*x99))+(((-0.15598566)*x179))+(((-1.8276)*gclwh8_2*x87))+(((-0.15598566)*x140))+(((-1.8276)*gclwh10_2*x74))+(((0.9138)*gclwh10_2*x83)));
op[26]=((((-1.706)*gclwh10_12*x74))+(((0.0062137829925)*x192))+((x79*x90))+(((-0.07671258)*x115))+(((-0.07671258)*x106))+(((0.07671258)*x175))+(((-1.706)*gclwh8_12*x87))+(((-0.853)*gclwh6_12*x68))+(((0.853)*gclwh10_12*x83))+(((1.706)*gclwh6_12*x72))+(((-0.0062137829925)*x125))+(((0.0062137829925)*x79)));
op[27]=((((-1.0)*x163*x83))+(((8.0)*gclwh10_11*x74))+(((-0.02913849)*x185))+(((0.02913849)*x85))+((x184*x68))+(((-1.0)*gclwh14_11*x145))+((gclwh4_11*x97))+(((-0.02913849)*x103))+(((8.0)*gclwh8_11*x87))+(((-8.0)*gclwh6_11*x72))+((gclwh12_11*x134))+(((-1.0)*x136*x82)));
op[28]=((-0.01366176)+(((-1.0)*x455))+x453);
op[29]=((((0.0608)*gclwh10_2*x83))+(((-0.1216)*gclwh10_2*x74))+((gclwh14_2*x119))+(((-0.01037856)*x140))+(((0.000442905048)*x116))+(((0.0608)*gclwh8_2*x82))+(((-0.1216)*gclwh8_2*x87))+x435+(((0.1216)*gclwh6_2*x72))+(((-0.01037856)*x179))+(((0.000442905048)*x132))+(((-0.0608)*gclwh6_2*x68))+(((-0.000442905048)*x149))+(((-1.0)*x263)));
op[30]=((((0.0066566880405)*x173))+((gclwh15_0*x99))+(((-1.8276)*gclwh9_0*x87))+(((-0.0066566880405)*x137))+(((-0.9138)*gclwh7_0*x68))+x433+(((-0.15598566)*x105))+(((-0.15598566)*x180))+(((-1.0)*x271))+(((-1.8276)*gclwh11_0*x74))+(((0.9138)*gclwh11_0*x83))+(((0.0066566880405)*x71))+(((0.9138)*pp*x71))+(((1.8276)*gclwh7_0*x72)));
op[31]=((-0.20533086)+(((-1.0)*x454))+x456);
op[32]=((((0.02913849)*x123))+((gclwh15_10*x145))+(((0.02913849)*x102))+((x124*x83))+((x144*x82))+(((-8.0)*gclwh11_10*x74))+(((8.0)*gclwh7_10*x72))+(((-1.0)*gclwh13_10*x134))+(((-1.0)*x187*x68))+(((-1.0)*gclwh5_10*x97))+(((-0.02913849)*gclwh7_10*r21))+(((-8.0)*gclwh9_10*x87)));
op[33]=((((-0.07671258)*x138))+(((0.853)*gclwh9_13*x82))+(((-0.0062137829925)*x176))+(((-0.07671258)*x196))+(((0.07671258)*x135))+(((-0.853)*gclwh7_13*x68))+(((-1.706)*gclwh11_13*x74))+(((-1.706)*gclwh9_13*x87))+(((0.0062137829925)*x148))+(((0.0062137829925)*x77))+((x77*x90))+(((1.706)*gclwh7_13*x72)));
op[34]=((((-0.1216)*gclwh9_0*x87))+(((-0.0608)*gclwh7_0*x68))+(((0.0608)*gclwh11_0*x83))+(((0.000442905048)*x71))+(((-1.0)*x433))+(((-0.1216)*gclwh11_0*x74))+((gclwh15_0*x119))+(((0.000442905048)*x173))+(((-0.01037856)*x180))+x271+(((-0.000442905048)*x137))+(((-0.01037856)*x105))+(((0.0608)*pp*x71))+(((0.1216)*gclwh7_0*x72)));
IkReal x465=pz*pz;
IkReal x466=pp*pp;
IkReal x467=((0.1707)*pz);
IkReal x468=(npy*pz);
IkReal x469=(pp*r21);
IkReal x470=((0.1707)*rxp1_2);
IkReal x471=(gclwh13_1*pp);
IkReal x472=(gclwh9_13*rxp0_2);
IkReal x473=((4.561674317235e-5)*r21);
IkReal x474=((4.0)*gclwh12_11);
IkReal x475=(npz*pz);
IkReal x476=((0.00163685467575)*r21);
IkReal x477=(gclwh10_12*rxp2_2);
IkReal x478=(pz*r20);
IkReal x479=(gclwh4_2*r22);
IkReal x480=(gclwh11_13*r22);
IkReal x481=((0.02913849)*r22);
IkReal x482=((0.014569245)*r21);
IkReal x483=(gclwh15_1*r20);
IkReal x484=(pp*r20);
IkReal x485=((2.0)*gclwh11_10);
IkReal x486=((0.0072846225)*r21);
IkReal x487=(npx*pz);
IkReal x488=((0.001068933642)*rxp2_2);
IkReal x489=((2.0)*gclwh4_11);
IkReal x490=(gclwh5_9*r22);
IkReal x491=((0.08535)*pp);
IkReal x492=(gclwh2_0*pz);
IkReal x493=((0.019178145)*rxp0_2);
IkReal x494=((0.2247)*gclwh15_15);
IkReal x495=(gclwh9_0*rxp0_2);
IkReal x496=(gclwh8_2*rxp0_2);
IkReal x497=(gclwh12_8*rxp1_2);
IkReal x498=((0.3414)*rxp0_2);
IkReal x499=(pp*r22);
IkReal x500=(gclwh14_3*rxp0_2);
IkReal x501=(gclwh13_0*pz);
IkReal x502=(gclwh12_2*r21);
IkReal x503=(gclwh11_10*rxp2_2);
IkReal x504=((0.0072846225)*r22);
IkReal x505=((0.1707)*rxp2_2);
IkReal x506=(gclwh5_1*pp);
IkReal x507=(gclwh5_0*pz);
IkReal x508=((0.00155960496929498)*r21);
IkReal x509=((2.0)*gclwh9_10);
IkReal x510=((2.0)*gclwh15_10);
IkReal x511=(gclwh14_11*r20);
IkReal x512=((0.1707)*rxp0_2);
IkReal x513=((4.0)*gclwh14_11);
IkReal x514=((0.00332834402025)*r22);
IkReal x515=((0.08318211)*rxp0_2);
IkReal x516=(gclwh12_14*rxp1_2);
IkReal x517=((0.4494)*gclwh4_14);
IkReal x518=(gclwh6_12*rxp1_2);
IkReal x519=((0.001068933642)*rxp1_2);
IkReal x520=(gclwh15_9*r20);
IkReal x521=((0.4494)*gclwh15_15);
IkReal x522=(gclwh4_8*rxp2_2);
IkReal x523=((0.2247)*gclwh12_14);
IkReal x524=((0.0072846225)*r20);
IkReal x525=((0.00310689149625)*r20);
IkReal x526=((0.3414)*rxp1_2);
IkReal x527=((0.6828)*rxp0_2);
IkReal x528=((2.0)*gclwh7_10);
IkReal x529=((0.000442905048)*r21);
IkReal x530=((1.0)*pp);
IkReal x531=((0.0032737093515)*r20);
IkReal x532=((0.07280355)*rxp1_2);
IkReal x533=((1.0)*pz);
IkReal x534=((4.0)*gclwh15_10);
IkReal x535=(gclwh4_14*r22);
IkReal x536=((0.000818427337875)*r20);
IkReal x537=(gclwh7_0*pz);
IkReal x538=(gclwh5_15*rxp2_2);
IkReal x539=(gclwh12_3*pp);
IkReal x540=(gclwh10_2*pz);
IkReal x541=(gclwh13_9*r21);
IkReal x542=(gclwh13_9*rxp1_2);
IkReal x543=((0.014569245)*rxp0_2);
IkReal x544=((0.019178145)*rxp1_2);
IkReal x545=((4.561674317235e-5)*r22);
IkReal x546=((0.15598566)*rxp1_2);
IkReal x547=(gclwh5_0*r22);
IkReal x548=(gclwh5_9*rxp2_2);
IkReal x549=((0.000221452524)*r20);
IkReal x550=(gclwh4_3*pp);
IkReal x551=(gclwh15_1*rxp0_2);
IkReal x552=(gclwh6_12*r21);
IkReal x553=((0.03835629)*rxp0_2);
IkReal x554=((0.019178145)*rxp2_2);
IkReal x555=(gclwh7_1*pp);
IkReal x556=((0.000818427337875)*r22);
IkReal x557=(gclwh10_11*rxp2_2);
IkReal x558=((0.000442905048)*r20);
IkReal x559=((0.4569)*pp);
IkReal x560=((0.000818427337875)*r21);
IkReal x561=((4.0)*gclwh4_11);
IkReal x562=((0.4494)*gclwh12_14);
IkReal x563=((2.0)*pp);
IkReal x564=((0.014569245)*r22);
IkReal x565=(gclwh12_8*r21);
IkReal x566=((0.00332834402025)*r20);
IkReal x567=((2.0)*gclwh6_11);
IkReal x568=(gclwh1_3*r20);
IkReal x569=((0.036546103557)*rxp2_2);
IkReal x570=((0.036546103557)*rxp1_2);
IkReal x571=((0.3414)*rxp2_2);
IkReal x572=(gclwh4_8*r22);
IkReal x573=((0.07280355)*rxp0_2);
IkReal x574=((2.0)*gclwh12_11);
IkReal x575=(gclwh2_0*r21);
IkReal x576=(gclwh5_15*r22);
IkReal x577=(gclwh6_2*pz);
IkReal x578=((0.4494)*gclwh13_15);
IkReal x579=(gclwh7_13*r21);
IkReal x580=(gclwh11_0*pz);
IkReal x581=((0.014569245)*r20);
IkReal x582=((0.00518928)*rxp0_2);
IkReal x583=(gclwh13_0*r21);
IkReal x584=((0.00310689149625)*r22);
IkReal x585=((2.0)*gclwh8_11);
IkReal x586=(gclwh11_0*rxp2_2);
IkReal x587=((0.00163685467575)*r20);
IkReal x588=((0.07280355)*rxp2_2);
IkReal x589=((4.0)*gclwh5_10);
IkReal x590=((2.0)*gclwh5_10);
IkReal x591=((0.6828)*rxp1_2);
IkReal x592=(gclwh8_12*rxp0_2);
IkReal x593=((0.00155960496929498)*r22);
IkReal x594=((0.07799283)*rxp0_2);
IkReal x595=((0.4494)*gclwh14_14);
IkReal x596=((0.2247)*gclwh5_15);
IkReal x597=((2.0)*gclwh13_10);
IkReal x598=((0.00310689149625)*r21);
IkReal x599=((0.2247)*gclwh4_14);
IkReal x600=(gclwh14_3*r20);
IkReal x601=((0.01037856)*rxp1_2);
IkReal x602=(gclwh11_13*rxp2_2);
IkReal x603=((0.4494)*gclwh5_15);
IkReal x604=((0.2247)*gclwh14_14);
IkReal x605=(gclwh12_2*pz);
IkReal x606=((0.02913849)*r21);
IkReal x607=((0.0066566880405)*r20);
IkReal x608=(gclwh14_8*r20);
IkReal x609=((0.0032737093515)*r21);
IkReal x610=((0.2247)*gclwh13_15);
IkReal x611=(gclwh0_1*r20);
IkReal x612=((2.0)*gclwh10_11);
IkReal x613=(gclwh7_13*rxp1_2);
IkReal x614=(gclwh10_2*rxp2_2);
IkReal x615=((4.0)*gclwh13_10);
IkReal x616=((2.0)*gclwh14_11);
IkReal x617=(gclwh8_11*x498);
IkReal x618=((0.3414)*x557);
IkReal x619=(gclwh12_11*x482);
IkReal x620=(gclwh4_11*x564);
IkReal x621=((0.014569245)*x511);
IkReal x622=(gclwh6_11*x526);
IkReal x623=((0.00163685467575)*x535);
IkReal x624=(gclwh12_14*x476);
IkReal x625=(gclwh14_14*x587);
IkReal x626=((0.00163685467575)*x576);
IkReal x627=(gclwh13_15*x476);
IkReal x628=(gclwh15_15*x587);
IkReal x629=(gclwh7_10*x526);
IkReal x630=(gclwh15_10*x581);
IkReal x631=(gclwh13_10*x482);
IkReal x632=((0.3414)*x503);
IkReal x633=(gclwh5_10*x564);
IkReal x634=(gclwh9_10*x498);
IkReal x635=((0.019178145)*x516);
IkReal x636=(gclwh4_14*x554);
IkReal x637=(gclwh6_5*x560);
IkReal x638=(gclwh10_5*x556);
IkReal x639=(gclwh8_5*x536);
IkReal x640=(gclwh14_14*x493);
IkReal x641=((0.014569245)*x522);
IkReal x642=(gclwh14_11*x512);
IkReal x643=((0.014569245)*x497);
IkReal x644=(gclwh10_11*x504);
IkReal x645=(gclwh8_11*x524);
IkReal x646=(gclwh6_11*x486);
IkReal x647=(gclwh4_11*x505);
IkReal x648=(gclwh14_8*x543);
IkReal x649=(gclwh12_11*x470);
IkReal x650=(gclwh5_10*x571);
IkReal x651=(gclwh7_10*x482);
IkReal x652=(gclwh13_10*x526);
IkReal x653=(gclwh13_10*x470);
IkReal x654=(gclwh7_10*x486);
IkReal x655=((0.014569245)*x542);
IkReal x656=(gclwh5_10*x505);
IkReal x657=((0.014569245)*x548);
IkReal x658=(gclwh15_9*x543);
IkReal x659=(gclwh11_10*x504);
IkReal x660=(gclwh15_10*x512);
IkReal x661=(gclwh9_10*x524);
IkReal x662=(gclwh13_15*x544);
IkReal x663=(gclwh7_7*x560);
IkReal x664=((0.019178145)*x538);
IkReal x665=(gclwh15_15*x493);
IkReal x666=(gclwh11_7*x556);
IkReal x667=(gclwh9_7*x536);
IkReal x668=(gclwh12_14*x560);
IkReal x669=(gclwh8_5*x493);
IkReal x670=(gclwh10_5*x554);
IkReal x671=((0.000818427337875)*x535);
IkReal x672=(gclwh6_5*x544);
IkReal x673=(gclwh14_14*x536);
IkReal x674=((0.000621742530375)*x572);
IkReal x675=(gclwh6_11*x470);
IkReal x676=((0.0072846225)*x511);
IkReal x677=((0.000621742530375)*x565);
IkReal x678=((0.000621742530375)*x608);
IkReal x679=(gclwh8_11*x512);
IkReal x680=(gclwh10_11*x505);
IkReal x681=(gclwh12_11*x486);
IkReal x682=(gclwh4_11*x504);
IkReal x683=(gclwh15_10*x524);
IkReal x684=((0.000621742530375)*x520);
IkReal x685=(gclwh7_10*x470);
IkReal x686=((0.000621742530375)*x541);
IkReal x687=(gclwh9_10*x512);
IkReal x688=(gclwh5_10*x504);
IkReal x689=((0.1707)*x503);
IkReal x690=(gclwh13_10*x486);
IkReal x691=((0.000621742530375)*x490);
IkReal x692=(r21*x466);
IkReal x693=((2.0)*x465);
IkReal x694=((1.0)*x466);
IkReal x695=(x489*x499);
IkReal x696=(x469*x574);
IkReal x697=(x487*x513);
IkReal x698=(x484*x616);
IkReal x699=(x468*x474);
IkReal x700=(x475*x561);
IkReal x701=(x499*x599);
IkReal x702=(x487*x595);
IkReal x703=(x469*x523);
IkReal x704=(x475*x517);
IkReal x705=(x484*x604);
IkReal x706=(x468*x562);
IkReal x707=(x499*x596);
IkReal x708=(x469*x610);
IkReal x709=(x487*x521);
IkReal x710=(x484*x494);
IkReal x711=(x468*x578);
IkReal x712=(x475*x603);
IkReal x713=(x484*x510);
IkReal x714=(x475*x589);
IkReal x715=(x468*x615);
IkReal x716=(x469*x597);
IkReal x717=(x487*x534);
IkReal x718=(x499*x590);
IkReal x719=((0.2247)*gclwh10_5*x475);
IkReal x720=((0.2247)*gclwh8_5*x487);
IkReal x721=((0.11235)*gclwh6_5*x469);
IkReal x722=((0.11235)*gclwh8_5*x484);
IkReal x723=((0.2247)*gclwh6_5*x468);
IkReal x724=((0.11235)*gclwh10_5*x499);
IkReal x725=(x470*x539);
IkReal x726=(gclwh14_2*rxp0_2*x467);
IkReal x727=(gclwh6_3*x692);
IkReal x728=(x504*x540);
IkReal x729=(x468*x567);
IkReal x730=(x499*x540);
IkReal x731=(x505*x550);
IkReal x732=((0.0072846225)*gclwh8_2*x478);
IkReal x733=(gclwh8_2*pp*x478);
IkReal x734=(x486*x577);
IkReal x735=(gclwh12_2*rxp1_2*x467);
IkReal x736=(x475*x612);
IkReal x737=(gclwh4_2*rxp2_2*x467);
IkReal x738=(x487*x585);
IkReal x739=((0.1707)*pp*x500);
IkReal x740=(x469*x528);
IkReal x741=((4.0)*gclwh9_10*x487);
IkReal x742=((4.0)*gclwh11_10*x475);
IkReal x743=(x475*x485);
IkReal x744=(x470*x471);
IkReal x745=(x487*x509);
IkReal x746=(gclwh7_1*x692);
IkReal x747=(x504*x580);
IkReal x748=(gclwh15_0*rxp0_2*x467);
IkReal x749=(x499*x580);
IkReal x750=(x505*x506);
IkReal x751=((0.0072846225)*gclwh9_0*x478);
IkReal x752=(gclwh9_0*pp*x478);
IkReal x753=(gclwh15_1*pp*x512);
IkReal x754=(gclwh13_0*rxp1_2*x467);
IkReal x755=(gclwh5_0*rxp2_2*x467);
IkReal x756=(x468*x528);
IkReal x757=(x486*x537);
IkReal x758=((0.2247)*gclwh9_7*x487);
IkReal x759=((0.11235)*gclwh7_7*x469);
IkReal x760=((0.2247)*gclwh11_7*x475);
IkReal x761=((0.11235)*gclwh11_7*x499);
IkReal x762=((0.2247)*gclwh7_7*x468);
IkReal x763=((0.11235)*gclwh9_7*x484);
IkReal x764=((0.11235)*gclwh12_14*x469);
IkReal x765=(x487*x604);
IkReal x766=((0.11235)*gclwh4_14*x499);
IkReal x767=(x468*x523);
IkReal x768=((0.11235)*gclwh14_14*x484);
IkReal x769=(x475*x599);
IkReal x770=(gclwh14_8*npx*x467);
IkReal x771=(gclwh14_2*pp*x478);
IkReal x772=(gclwh12_3*x692);
IkReal x773=(gclwh3_2*pz*x486);
IkReal x774=((0.08535)*gclwh12_8*x469);
IkReal x775=(x475*x489);
IkReal x776=(gclwh6_2*rxp1_2*x467);
IkReal x777=(gclwh3_3*x692);
IkReal x778=(x466*x568);
IkReal x779=(x491*x572);
IkReal x780=((0.0072846225)*gclwh14_2*x478);
IkReal x781=(gclwh4_3*r22*x466);
IkReal x782=((0.0072846225)*gclwh1_2*x478);
IkReal x783=(x468*x574);
IkReal x784=(gclwh12_8*npy*x467);
IkReal x785=(gclwh4_8*npz*x467);
IkReal x786=(x467*x496);
IkReal x787=((0.08535)*gclwh14_8*x484);
IkReal x788=(x487*x616);
IkReal x789=(gclwh6_3*pp*x470);
IkReal x790=(x467*x614);
IkReal x791=((0.0072846225)*pz*x479);
IkReal x792=(x486*x605);
IkReal x793=(x486*x501);
IkReal x794=(x466*x483);
IkReal x795=((0.08535)*gclwh15_9*x484);
IkReal x796=(x499*x507);
IkReal x797=(x469*x501);
IkReal x798=(x486*x492);
IkReal x799=((0.0072846225)*gclwh0_0*x478);
IkReal x800=(x467*x495);
IkReal x801=(x504*x507);
IkReal x802=(gclwh2_1*x692);
IkReal x803=(x475*x590);
IkReal x804=(gclwh5_9*npz*x467);
IkReal x805=(x470*x555);
IkReal x806=(x468*x597);
IkReal x807=(x467*x586);
IkReal x808=(gclwh13_9*npy*x467);
IkReal x809=(x466*x611);
IkReal x810=(x490*x491);
IkReal x811=(gclwh15_9*npx*x467);
IkReal x812=((0.08535)*gclwh13_9*x469);
IkReal x813=(gclwh11_1*pp*x505);
IkReal x814=(x487*x510);
IkReal x815=(gclwh7_0*rxp1_2*x467);
IkReal x816=((0.0072846225)*gclwh15_0*x478);
IkReal x817=(gclwh6_2*npy*x693);
IkReal x818=(gclwh6_3*x468*x563);
IkReal x819=(gclwh6_2*x469*x533);
IkReal x820=(gclwh10_2*npz*x693);
IkReal x821=(gclwh8_2*npx*x693);
IkReal x822=(gclwh11_1*x475*x563);
IkReal x823=(gclwh7_0*npy*x693);
IkReal x824=(gclwh9_0*npx*x693);
IkReal x825=(gclwh11_1*r22*x694);
IkReal x826=((2.0)*x468*x555);
IkReal x827=(gclwh11_0*npz*x693);
IkReal x828=(gclwh7_0*x469*x533);
IkReal x829=(gclwh12_2*npy*x693);
IkReal x830=(gclwh3_2*npy*x693);
IkReal x831=(gclwh1_2*npx*x693);
IkReal x832=(gclwh14_3*x487*x563);
IkReal x833=(gclwh4_2*npz*x693);
IkReal x834=((2.0)*x475*x550);
IkReal x835=(gclwh12_2*x469*x533);
IkReal x836=(gclwh1_2*x478*x530);
IkReal x837=(gclwh3_3*x468*x563);
IkReal x838=(pz*x479*x530);
IkReal x839=(gclwh1_3*x487*x563);
IkReal x840=(gclwh3_2*x469*x533);
IkReal x841=((2.0)*x468*x539);
IkReal x842=(gclwh14_2*npx*x693);
IkReal x843=(x600*x694);
IkReal x844=(gclwh0_0*npx*x693);
IkReal x845=(gclwh2_0*npy*x693);
IkReal x846=((2.0)*x475*x506);
IkReal x847=((2.0)*x468*x471);
IkReal x848=(gclwh15_0*npx*x693);
IkReal x849=(gclwh2_1*x468*x563);
IkReal x850=(gclwh0_1*x487*x563);
IkReal x851=(gclwh5_0*npz*x693);
IkReal x852=(gclwh13_0*npy*x693);
IkReal x853=(gclwh0_0*x478*x530);
IkReal x854=(gclwh15_0*x478*x530);
IkReal x855=((1.0)*x469*x492);
IkReal x856=((1.0)*gclwh13_1*x692);
IkReal x857=(gclwh5_1*r22*x694);
IkReal x858=(gclwh15_1*x487*x563);
IkReal x859=(x669+x670);
IkReal x860=(x636+x635);
IkReal x861=(x662+x664);
IkReal x862=(x645+x644+x642+x729);
IkReal x863=(x659+x661+x660+x756);
IkReal x864=(x683+x685+x806+x803);
IkReal x865=(x676+x675+x775+x783);
IkReal x866=(x625+x706+x704+x705);
IkReal x867=(x673+x768+x769+x767);
IkReal x868=(x628+x711+x710+x712);
IkReal x869=(x663+x759+x758+x760);
IkReal x870=(x637+x719+x720+x721);
IkReal x871=(x679+x682+x681+x680+x788);
IkReal x872=(x689+x688+x687+x690+x814);
IkReal x873=(x647+x646+x649+x736+x738);
IkReal x874=(x653+x654+x656+x745+x743);
IkReal x875=(x621+x622+x698+x699+x700);
IkReal x876=(x624+x623+x702+x703+x701);
IkReal x877=(x629+x630+x713+x715+x714);
IkReal x878=(x638+x639+x722+x723+x724);
IkReal x879=(x627+x626+x708+x709+x707);
IkReal x880=(x667+x666+x761+x762+x763);
IkReal x881=(x668+x671+x764+x765+x766);
IkReal x882=((((4.0)*gclwh7_10*x468))+((gclwh15_10*x498))+((gclwh9_10*x581))+((x484*x509))+((gclwh11_10*x564))+((x485*x499)));
IkReal x883=(x650+x651+x652+x742+x740+x741);
IkReal x884=(x634+x632+x633+x631+x718+x717+x716);
IkReal x885=(x618+x619+x617+x620+x695+x696+x697);
IkReal x886=(x648+x737+x735+x734+x739+x818+x819+x821+x820);
IkReal x887=(x643+x641+x733+x732+x731+x730+x725+x726+x727+x728+x817);
IkReal x888=(x658+x755+x754+x757+x753+x828+x827+x826+x825+x824);
IkReal x889=(x655+x657+x751+x750+x752+x746+x747+x744+x748+x749+x823+x822);
IkReal x890=(x686+x691+x852+x853+x850+x851+x856+x857+x854+x855+x858+x816+x815+x812+x813+x810+x811+x849);
IkReal x891=(x467+x677+x674+x773+x772+x771+x770+x777+x776+x774+x779+x778+x782+x780+x781+x829+x830+x831+x832+x833);
IkReal x892=(x678+x791+x790+x792+x786+x787+x784+x785+x789+x834+x835+x836+x837+x838+x839+x841+x840+x843+x842);
IkReal x893=(x467+x684+x793+x795+x794+x797+x796+x799+x798+x845+x844+x847+x846+x848+x809+x808+x805+x804+x807+x801+x800+x802);
op[35]=((-0.01366176)+(((-1.0)*x882))+x883);
op[36]=((0.392270175)+(((-1.0)*x885))+x875);
op[37]=((((1.8276)*gclwh3_2*x468))+((gclwh14_2*x607))+(((0.0066566880405)*gclwh3_2*r21))+(((-0.0066566880405)*x479))+(((1.8276)*gclwh12_2*x468))+(((-1.8276)*gclwh14_2*x487))+((gclwh1_2*x607))+(((-0.15598566)*x496))+(((-0.9138)*gclwh3_2*x469))+((gclwh6_2*x546))+(((1.8276)*gclwh1_2*x487))+(((-0.9138)*gclwh12_2*x469))+(((1.8276)*gclwh4_2*x475))+(((0.9138)*gclwh14_2*x484))+(((-0.15598566)*x614))+(((-0.0066566880405)*x502))+(((-0.9138)*pp*x479))+(((-0.9138)*gclwh1_2*x484))+x866+(((-1.0)*x876)));
op[38]=((((-1.0)*x469*x562))+(((-0.8988)*gclwh14_14*x487))+((x484*x595))+(((0.1456071)*x518))+(((-0.0032737093515)*x535))+(((-1.0)*x499*x517))+(((-0.1456071)*x592))+(((-0.1456071)*x477))+((gclwh14_14*x531))+(((0.8988)*gclwh4_14*x475))+(((-1.0)*gclwh12_14*x609))+(((0.8988)*gclwh12_14*x468)));
op[39]=((-0.00506895)+((gclwh12_11*x606))+(((-0.02913849)*x511))+((x469*x474))+((x499*x561))+(((0.6828)*x557))+((gclwh8_11*x527))+((gclwh4_11*x481))+(((-1.0)*gclwh6_11*x591))+(((-8.0)*gclwh4_11*x475))+(((-8.0)*gclwh12_11*x468))+(((-1.0)*x484*x513))+(((8.0)*gclwh14_11*x487)));
op[40]=((0.023396725)+x885+(((-1.0)*x875)));
op[41]=((((0.0608)*gclwh14_2*x484))+(((-1.0)*x866))+(((-0.1216)*gclwh14_2*x487))+(((-0.01037856)*x614))+(((-0.000442905048)*x479))+(((0.1216)*gclwh12_2*x468))+(((0.1216)*gclwh1_2*x487))+(((-0.0608)*pp*x479))+((gclwh6_2*x601))+(((-0.0608)*gclwh3_2*x469))+(((-0.0608)*gclwh12_2*x469))+(((0.1216)*gclwh4_2*x475))+((gclwh3_2*x529))+((gclwh14_2*x558))+((gclwh1_2*x558))+(((-0.000442905048)*x502))+x876+(((-0.01037856)*x496))+(((0.1216)*gclwh3_2*x468))+(((-0.0608)*gclwh1_2*x484)));
op[42]=((((0.15598566)*x586))+(((0.0066566880405)*x583))+(((-1.0)*gclwh7_0*x546))+(((0.15598566)*x495))+(((-0.9138)*gclwh0_0*x484))+(((0.0066566880405)*x547))+(((-1.8276)*gclwh13_0*x468))+(((1.8276)*gclwh0_0*x487))+(((-1.8276)*gclwh5_0*x475))+(((0.9138)*gclwh13_0*x469))+(((1.8276)*gclwh15_0*x487))+(((0.9138)*gclwh5_0*x499))+x868+(((1.8276)*gclwh2_0*x468))+(((-0.9138)*gclwh2_0*x469))+(((-1.0)*gclwh15_0*x607))+((gclwh0_0*x607))+(((-0.9138)*gclwh15_0*x484))+(((0.0066566880405)*x575))+(((-1.0)*x879)));
op[43]=((0.392270175)+x884+(((-1.0)*x877)));
op[44]=((0.00506895)+((x469*x615))+(((-8.0)*gclwh5_10*x475))+((gclwh5_10*x481))+(((-8.0)*gclwh13_10*x468))+(((8.0)*gclwh15_10*x487))+(((0.6828)*x503))+(((-1.0)*gclwh7_10*x591))+(((-0.02913849)*gclwh15_10*r20))+((gclwh13_10*x606))+((gclwh9_10*x527))+((x499*x589))+(((-1.0)*x484*x534)));
op[45]=((((-0.8988)*gclwh5_15*x475))+((gclwh13_15*x609))+(((-0.1456071)*x613))+(((0.8988)*gclwh15_15*x487))+(((-1.0)*gclwh15_15*x531))+(((0.0032737093515)*x576))+(((0.1456071)*x472))+(((-0.8988)*gclwh13_15*x468))+((x499*x603))+(((0.1456071)*x602))+((x469*x578))+(((-1.0)*x484*x521)));
op[46]=((((-0.1216)*gclwh13_0*x468))+(((-1.0)*x868))+(((0.1216)*gclwh15_0*x487))+((gclwh13_0*x529))+(((-0.1216)*gclwh5_0*x475))+(((0.0608)*gclwh13_0*x469))+(((0.01037856)*x495))+(((0.1216)*gclwh2_0*x468))+(((-1.0)*gclwh7_0*x601))+(((0.1216)*gclwh0_0*x487))+((gclwh2_0*x529))+(((-0.0608)*gclwh2_0*x469))+(((-0.0608)*gclwh15_0*x484))+(((-0.0608)*gclwh0_0*x484))+(((-1.0)*gclwh15_0*x558))+(((0.0608)*gclwh5_0*x499))+(((0.01037856)*x586))+x879+(((0.000442905048)*x547))+((gclwh0_0*x558)));
op[47]=((0.023396725)+(((-1.0)*x884))+x877);
op[48]=((((0.4569)*gclwh8_12*x484))+(((-0.9138)*gclwh10_12*x475))+(((-1.0)*x860))+(((0.9138)*gclwh6_12*x468))+(((-0.9138)*gclwh8_12*x487))+((gclwh8_12*x566))+((gclwh14_8*x594))+x640+(((-0.07799283)*x522))+(((-0.07799283)*x497))+(((-0.00332834402025)*x552))+(((-0.4569)*gclwh6_12*x469))+x870+(((0.4569)*gclwh10_12*x499))+((gclwh10_12*x514))+(((-1.0)*x878)));
op[49]=((((-1.0)*gclwh4_3*x569))+(((-1.0)*x862))+(((0.42819102)*gclwh6_3*x468))+(((-0.2068108875)*gclwh6_3*x469))+(((-1.0)*x886))+((gclwh6_11*x469))+(((0.036546103557)*x500))+(((-1.0)*gclwh8_11*x484))+(((-1.0)*gclwh12_3*x570))+(((-1.0)*gclwh10_11*x499))+x873+x887+(((-1.0)*gclwh6_3*x508)));
op[50]=((0.09583455)+((x469*x567))+(((-4.0)*gclwh6_11*x468))+((gclwh12_11*x526))+(((-1.0)*gclwh14_11*x498))+((gclwh6_11*x482))+(((4.0)*gclwh10_11*x475))+(((-1.0)*x499*x612))+(((-1.0)*x484*x585))+(((-1.0)*gclwh10_11*x564))+((gclwh4_11*x571))+(((-1.0)*gclwh8_11*x581))+(((4.0)*gclwh8_11*x487)));
op[51]=((((0.4265)*gclwh6_2*x469))+(((-1.0)*gclwh8_2*x525))+(((0.03835629)*x516))+((gclwh6_2*x598))+(((-1.0)*gclwh14_2*x573))+(((-1.0)*gclwh14_14*x553))+(((-1.0)*gclwh14_8*x515))+(((-1.0)*gclwh10_2*x584))+(((0.08318211)*x522))+(((0.03835629)*gclwh4_14*rxp2_2))+(((0.08318211)*x497))+((gclwh12_2*x532))+(((0.853)*gclwh10_2*x475))+(((0.853)*gclwh8_2*x487))+(((-0.4265)*gclwh10_2*x499))+(((-0.853)*gclwh6_2*x468))+((gclwh4_2*x588))+(((-0.4265)*gclwh8_2*x484)));
op[52]=((((0.0304)*gclwh8_12*x484))+(((0.0608)*gclwh6_12*x468))+(((0.00518928)*x497))+((gclwh8_12*x549))+(((0.000221452524)*gclwh10_12*r22))+(((-1.0)*x640))+(((0.0304)*gclwh10_12*x499))+(((-1.0)*gclwh14_8*x582))+(((-0.0304)*gclwh6_12*x469))+x860+x870+(((-0.000221452524)*x552))+(((-0.0608)*gclwh10_12*x475))+(((-0.0608)*gclwh8_12*x487))+(((0.00518928)*x522))+(((-1.0)*x878)));
op[53]=((((0.01252412)*gclwh6_3*x468))+((gclwh8_11*x484))+(((-1.0)*gclwh6_11*x469))+(((0.0010225625)*gclwh6_3*x469))+(((-1.0)*x886))+(((-1.0)*gclwh6_3*x473))+(((-1.0)*gclwh4_3*x488))+(((0.001068933642)*x500))+x862+x887+(((-1.0)*gclwh12_3*x519))+((gclwh10_11*x499))+(((-1.0)*x873)));
op[54]=(((gclwh11_1*x593))+(((0.2068108875)*gclwh11_1*x499))+((gclwh11_10*x499))+(((-1.0)*gclwh7_1*x508))+(((-1.0)*gclwh7_10*x469))+((gclwh9_10*x484))+(((0.42819102)*gclwh7_1*x468))+(((-1.0)*x888))+(((-1.0)*gclwh5_1*x569))+(((-0.42819102)*gclwh11_1*x475))+(((-1.0)*gclwh13_1*x570))+(((-0.2068108875)*gclwh7_1*x469))+x863+x889+(((0.036546103557)*x551))+(((-1.0)*x874)));
op[55]=((((-1.0)*x861))+(((0.9138)*gclwh7_13*x468))+(((0.4569)*gclwh9_13*x484))+(((0.00332834402025)*x480))+(((-0.4569)*gclwh7_13*x469))+(((-1.0)*x880))+((gclwh9_13*x566))+x665+(((-0.9138)*gclwh9_13*x487))+(((-0.07799283)*x542))+(((-0.07799283)*x548))+((gclwh15_9*x594))+(((-0.9138)*gclwh11_13*x475))+x869+(((-0.00332834402025)*x579))+((x480*x559)));
op[56]=(((gclwh13_0*x532))+(((-1.0)*gclwh15_0*x573))+(((-0.4265)*gclwh9_0*x484))+((gclwh5_0*x588))+((gclwh15_9*x515))+(((0.853)*gclwh11_0*x475))+(((-1.0)*gclwh11_0*x584))+(((0.853)*gclwh9_0*x487))+(((-0.03835629)*x538))+((gclwh7_0*x598))+(((-1.0)*gclwh9_0*x525))+(((-0.08318211)*x542))+(((-0.08318211)*x548))+(((-0.4265)*gclwh11_0*x499))+(((0.4265)*gclwh7_0*x469))+(((-0.853)*gclwh7_0*x468))+(((-0.03835629)*gclwh13_15*rxp1_2))+((gclwh15_15*x553)));
op[57]=((0.09583455)+(((-1.0)*x882))+x883);
op[58]=((((-1.0)*x863))+(((-1.0)*gclwh11_10*x499))+((gclwh7_10*x469))+(((0.01252412)*gclwh7_1*x468))+(((-1.0)*gclwh7_1*x473))+(((-1.0)*x888))+(((0.001068933642)*x551))+(((-1.0)*gclwh13_1*x519))+(((-1.0)*gclwh9_10*x484))+x874+x889+((gclwh11_1*x545))+(((-0.01252412)*gclwh11_1*x475))+(((-0.0010225625)*gclwh11_1*x499))+(((0.0010225625)*gclwh7_1*x469))+(((-1.0)*gclwh5_1*x488)));
op[59]=((((-1.0)*gclwh15_9*x582))+(((0.0304)*pp*x480))+((gclwh9_13*x549))+(((0.00518928)*x548))+(((0.00518928)*x542))+(((0.0608)*gclwh7_13*x468))+(((0.000221452524)*x480))+(((-0.0608)*gclwh11_13*x475))+(((-1.0)*x880))+(((-0.000221452524)*x579))+(((-1.0)*x665))+x869+x861+(((0.0304)*gclwh9_13*x484))+(((-0.0304)*gclwh7_13*x469))+(((-0.0608)*gclwh9_13*x487)));
op[60]=((((0.9138)*gclwh4_8*x475))+(((0.07799283)*x518))+((gclwh14_8*x566))+(((-0.07799283)*x592))+(((-1.0)*gclwh4_8*x514))+(((-0.00332834402025)*x565))+(((-1.0)*x881))+(((0.4569)*gclwh14_8*x484))+(((-0.4569)*gclwh12_8*x469))+(((-0.07799283)*x477))+(((-0.9138)*gclwh14_8*x487))+x859+x867+(((-0.4569)*gclwh4_8*x499))+(((0.9138)*gclwh12_8*x468))+(((-1.0)*x672)));
op[61]=((0.2213801325)+((gclwh3_3*x508))+(((-1.0)*x865))+(((-0.42819102)*gclwh14_3*x487))+(((0.00155960496929498)*x568))+(((-0.2068108875)*gclwh12_3*x469))+(((-0.2213801325)*gclwh1_3*x484))+(((-1.0)*gclwh12_3*x508))+((gclwh6_3*x570))+((gclwh12_11*x469))+(((-1.0)*gclwh4_3*x593))+(((-1.0)*x892))+((gclwh4_11*x499))+(((-1.0)*gclwh14_11*x484))+(((0.42819102)*gclwh12_3*x468))+(((-0.2068108875)*gclwh4_3*x499))+(((0.2068108875)*gclwh14_3*x484))+(((0.00155960496929498)*x600))+(((-0.2213801325)*gclwh3_3*x469))+(((0.42819102)*gclwh1_3*x487))+x871+x891+(((0.42819102)*gclwh4_3*x475))+(((0.42819102)*gclwh3_3*x468)));
op[62]=((0.053024565)+x885+(((-1.0)*x875)));
op[63]=((((-1.0)*x866))+(((-1.0)*gclwh6_2*x532))+(((0.00354979654425)*x565))+(((-1.0)*gclwh3_2*x598))+(((-1.0)*gclwh1_2*x525))+(((-0.4265)*gclwh14_2*x484))+(((-0.853)*gclwh3_2*x468))+(((0.4265)*pp*x479))+(((-0.9746)*gclwh12_8*x468))+(((0.4873)*gclwh12_8*x469))+(((0.00310689149625)*x502))+(((0.853)*gclwh14_2*x487))+(((-0.00354979654425)*x608))+(((-1.0)*gclwh14_2*x525))+(((0.9746)*gclwh14_8*x487))+(((0.4873)*gclwh4_8*x499))+((gclwh10_2*x588))+(((-0.853)*gclwh12_2*x468))+(((-0.4873)*gclwh14_8*x484))+x876+(((-0.853)*gclwh1_2*x487))+(((0.4265)*gclwh12_2*x469))+(((0.4265)*gclwh1_2*x484))+(((0.07280355)*x496))+(((-0.853)*gclwh4_2*x475))+(((0.4265)*gclwh3_2*x469))+(((-0.9746)*gclwh4_8*x475))+(((0.00354979654425)*x572))+(((0.00310689149625)*x479)));
op[64]=((((-1.0)*x867))+(((0.00518928)*x518))+(((-0.0304)*gclwh14_8*x484))+(((-0.0608)*gclwh12_8*x468))+(((0.000221452524)*x572))+(((0.0304)*gclwh12_8*x469))+(((-0.0608)*gclwh4_8*x475))+(((-1.0)*gclwh8_12*x582))+(((-1.0)*gclwh14_8*x549))+x859+x881+(((-0.00518928)*x477))+(((0.0304)*gclwh4_8*x499))+(((0.000221452524)*x565))+(((0.0608)*gclwh14_8*x487))+(((-1.0)*x672)));
op[65]=((-0.0135466825)+(((4.561674317235e-5)*x568))+(((0.01252412)*gclwh3_3*x468))+(((4.561674317235e-5)*x600))+((gclwh6_3*x519))+(((0.01252412)*gclwh1_3*x487))+(((-0.0135466825)*gclwh1_3*x484))+(((0.01252412)*gclwh12_3*x468))+(((0.0010225625)*gclwh4_3*x499))+(((-1.0)*x892))+(((0.01252412)*gclwh4_3*x475))+(((-1.0)*gclwh4_11*x499))+((gclwh3_3*x473))+(((-1.0)*gclwh4_3*x545))+(((-0.0010225625)*gclwh14_3*x484))+(((0.0010225625)*gclwh12_3*x469))+(((-1.0)*gclwh12_3*x473))+x865+x891+(((-1.0)*gclwh12_11*x469))+((gclwh14_11*x484))+(((-0.0135466825)*gclwh3_3*x469))+(((-1.0)*x871))+(((-0.01252412)*gclwh14_3*x487)));
op[66]=((-0.2213801325)+(((-1.0)*x864))+(((-0.42819102)*gclwh5_1*x475))+(((-0.00155960496929498)*x483))+((gclwh11_1*x569))+(((-1.0)*gclwh15_10*x484))+((gclwh2_1*x508))+(((-1.0)*x890))+((gclwh5_10*x499))+(((-0.2213801325)*gclwh0_1*x484))+(((-0.42819102)*gclwh13_1*x468))+(((0.42819102)*gclwh2_1*x468))+(((0.00155960496929498)*x611))+(((0.2068108875)*gclwh5_1*x499))+(((0.42819102)*gclwh15_1*x487))+(((0.2068108875)*gclwh13_1*x469))+(((-0.2213801325)*gclwh2_1*x469))+x872+x893+(((-1.0)*gclwh7_1*x570))+((gclwh13_1*x508))+(((0.42819102)*gclwh0_1*x487))+((gclwh13_10*x469))+(((-0.2068108875)*pp*x483))+((gclwh5_1*x593)));
op[67]=((((0.9138)*gclwh15_9*x487))+(((0.00332834402025)*x541))+((gclwh5_15*x556))+(((0.11235)*gclwh13_15*x469))+(((0.00332834402025)*x490))+(((-1.0)*gclwh9_7*x493))+(((-1.0)*gclwh11_7*x554))+((gclwh7_7*x544))+(((-0.9138)*gclwh13_9*x468))+(((0.07799283)*x602))+(((-1.0)*gclwh15_15*x536))+(((-0.07799283)*x613))+(((-1.0)*x468*x610))+(((-0.9138)*gclwh5_9*x475))+(((-0.00332834402025)*x520))+(((0.07799283)*x472))+((x490*x559))+(((-0.4569)*gclwh15_9*x484))+(((0.11235)*gclwh5_15*x499))+(((-1.0)*x475*x596))+(((-0.11235)*gclwh15_15*x484))+((x487*x494))+(((0.4569)*gclwh13_9*x469))+((gclwh13_15*x560)));
op[68]=((((-0.00310689149625)*x547))+(((-1.0)*x868))+((gclwh15_0*x525))+(((-0.9746)*gclwh5_9*x475))+(((-0.07280355)*x495))+(((-0.00310689149625)*x583))+(((0.4265)*gclwh0_0*x484))+(((0.853)*gclwh5_0*x475))+(((-1.0)*gclwh0_0*x525))+(((0.4265)*gclwh2_0*x469))+(((0.9746)*gclwh15_9*x487))+(((-0.4265)*gclwh13_0*x469))+(((0.853)*gclwh13_0*x468))+(((-0.853)*gclwh0_0*x487))+(((-0.9746)*gclwh13_9*x468))+(((-0.853)*gclwh15_0*x487))+(((0.4873)*pp*x490))+((gclwh7_0*x532))+(((-0.4265)*gclwh5_0*x499))+x879+(((-0.00310689149625)*x575))+(((-0.00354979654425)*x520))+(((-0.07280355)*x586))+(((-0.4873)*gclwh15_9*x484))+(((0.4873)*gclwh13_9*x469))+(((0.00354979654425)*x541))+(((-0.853)*gclwh2_0*x468))+(((0.4265)*gclwh15_0*x484))+(((0.00354979654425)*x490)));
op[69]=((0.053024565)+(((-1.0)*x884))+x877);
op[70]=((0.0135466825)+((gclwh13_1*x473))+(((-0.0135466825)*gclwh2_1*x469))+(((0.01252412)*gclwh15_1*x487))+(((-0.01252412)*gclwh13_1*x468))+((gclwh15_10*x484))+(((-1.0)*x890))+(((4.561674317235e-5)*x611))+(((-0.0135466825)*gclwh0_1*x484))+((gclwh11_1*x488))+(((-0.0010225625)*gclwh5_1*x499))+(((-1.0)*gclwh5_10*x499))+((gclwh2_1*x473))+(((-0.01252412)*gclwh5_1*x475))+(((-0.0010225625)*gclwh13_1*x469))+(((-4.561674317235e-5)*x483))+((gclwh5_1*x545))+(((0.0010225625)*pp*x483))+(((-1.0)*gclwh7_1*x519))+(((0.01252412)*gclwh0_1*x487))+x864+x893+(((-1.0)*gclwh13_10*x469))+(((0.01252412)*gclwh2_1*x468))+(((-1.0)*x872)));
IkReal x894=((0.0304)*pp);
IkReal x895=(gclwh13_9*r21);
IkReal x896=(gclwh5_9*r22);
IkReal x897=((0.0608)*pz);
IkReal x898=(gclwh15_9*r20);
IkReal x899=((0.2247)*pz);
IkReal x900=(gclwh13_15*r21);
IkReal x901=(gclwh15_15*r20);
IkReal x902=((0.11235)*pp);
IkReal x903=(gclwh5_15*r22);
op[71]=((((-1.0)*x900*x902))+(((-0.000221452524)*x895))+(((-0.000221452524)*x896))+(((0.00518928)*gclwh11_13*rxp2_2))+(((-1.0)*gclwh15_9*npx*x897))+((gclwh5_15*npz*x899))+((x894*x898))+(((-1.0)*x902*x903))+(((-0.019178145)*gclwh11_7*rxp2_2))+((x901*x902))+((gclwh13_15*npy*x899))+(((0.00518928)*gclwh9_13*rxp0_2))+(((-0.000818427337875)*x900))+(((-0.000818427337875)*x903))+((gclwh13_9*npy*x897))+(((0.000818427337875)*x901))+(((-1.0)*gclwh15_15*npx*x899))+(((-1.0)*x894*x896))+(((-1.0)*x894*x895))+(((0.019178145)*gclwh7_7*rxp1_2))+(((0.000221452524)*x898))+(((-0.019178145)*gclwh9_7*rxp0_2))+(((-0.00518928)*gclwh7_13*rxp1_2))+((gclwh5_9*npz*x897)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j11array[16], cj11array[16], sj11array[16], j12array[16], cj12array[16], sj12array[16], j13array[16], cj13array[16], sj13array[16];
int numsolutions = 0;
for(int ij11 = 0; ij11 < numroots; ij11 += 3)
{
IkReal htj11 = zeror[ij11+0], htj12 = zeror[ij11+1], htj13 = zeror[ij11+2];
if(isnan(htj11)||isnan(htj12)||isnan(htj13)){
continue;
}
j11array[numsolutions]=((2.0)*(atan(htj11)));
j12array[numsolutions]=((2.0)*(atan(htj12)));
j13array[numsolutions]=((2.0)*(atan(htj13)));
if(isinf(htj11)){
cj11array[numsolutions] = IKcos(j11array[numsolutions]);
sj11array[numsolutions] = IKsin(j11array[numsolutions]);
}
else{
IkReal x904=htj11*htj11;
CheckValue<IkReal> x905=IKPowWithIntegerCheck(((1.0)+x904),-1);
if(!x905.valid){
continue;
}
cj11array[numsolutions]=((x905.value)*(((1.0)+(((-1.0)*x904)))));
CheckValue<IkReal> x906=IKPowWithIntegerCheck(((1.0)+(htj11*htj11)),-1);
if(!x906.valid){
continue;
}
sj11array[numsolutions]=((2.0)*htj11*(x906.value));
}
if(isinf(htj12)){
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
}
else{
IkReal x907=htj12*htj12;
CheckValue<IkReal> x908=IKPowWithIntegerCheck(((1.0)+x907),-1);
if(!x908.valid){
continue;
}
cj12array[numsolutions]=((x908.value)*(((1.0)+(((-1.0)*x907)))));
CheckValue<IkReal> x909=IKPowWithIntegerCheck(((1.0)+(htj12*htj12)),-1);
if(!x909.valid){
continue;
}
sj12array[numsolutions]=((2.0)*htj12*(x909.value));
}
if(isinf(htj13)){
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
}
else{
IkReal x910=htj13*htj13;
CheckValue<IkReal> x911=IKPowWithIntegerCheck(((1.0)+x910),-1);
if(!x911.valid){
continue;
}
cj13array[numsolutions]=((x911.value)*(((1.0)+(((-1.0)*x910)))));
CheckValue<IkReal> x912=IKPowWithIntegerCheck(((1.0)+(htj13*htj13)),-1);
if(!x912.valid){
continue;
}
sj13array[numsolutions]=((2.0)*htj13*(x912.value));
}
if( j11array[numsolutions] > IKPI )
{
    j11array[numsolutions]-=IK2PI;
}
else if( j11array[numsolutions] < -IKPI )
{
    j11array[numsolutions]+=IK2PI;
}
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j11valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj11 = 16;
_nj12 = 1;
_nj13 = 1;
for(int ij11 = 0; ij11 < numsolutions; ++ij11)
    {
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
_ij12[0] = 0; _ij12[1] = -1;
_ij13[0] = 0; _ij13[1] = -1;
for(int iij11 = ij11+1; iij11 < numsolutions; ++iij11)
{
if( !j11valid[iij11] ) { continue; }
if( IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(cj12array[ij11]-cj12array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij11]-sj12array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(cj13array[ij11]-cj13array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij11]-sj13array[iij11]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j11valid[iij11]=false; _ij11[1] = iij11; _ij12[1] = 0; _ij13[1] = 0;  break; 
}
}
    j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];

    j12 = j12array[ij11]; cj12 = cj12array[ij11]; sj12 = sj12array[ij11];

    j13 = j13array[ij11]; cj13 = cj13array[ij11]; sj13 = sj13array[ij11];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j15eval[2];
j15eval[0]=((r20*r20)+(r21*r21));
j15eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x913=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x913);
rxp1_0=(pz*r11);
rxp1_1=(r01*x913);
j14eval[0]=cj13;
j14eval[1]=r22;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x914=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x914);
rxp1_0=(pz*r11);
rxp1_1=(r01*x914);
j14eval[0]=r22;
j14eval[1]=sj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x915=IKPowWithIntegerCheck(r22,-1);
if(!x915.valid){
continue;
}
CheckValue<IkReal> x916=IKPowWithIntegerCheck(sj13,-1);
if(!x916.valid){
continue;
}
sj14array[0]=((x915.value)*(x916.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12)))));
if( sj14array[0] >= -1-IKFAST_SINCOS_THRESH && sj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKasin(sj14array[0]);
    cj14array[0] = IKcos(j14array[0]);
    sj14array[1] = sj14array[0];
    j14array[1] = j14array[0] > 0 ? (IKPI-j14array[0]) : (-IKPI-j14array[0]);
    cj14array[1] = -cj14array[0];
}
else if( isnan(sj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j14)));
evalcond[1]=(((cj12*sj11))+((cj13*r22*(IKsin(j14))))+((cj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[1];
IkReal x917=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x917);
rxp1_0=(pz*r11);
rxp1_1=(r01*x917);
IkReal x918=(sj11*sj12);
IkReal x919=((4.0)*r12);
IkReal x920=((8.0)*sj13);
IkReal x921=(r01*sj14);
IkReal x922=(cj13*sj14);
IkReal x923=((4.0)*r02);
IkReal x924=((4.0)*sj13);
IkReal x925=(cj13*cj14);
IkReal x926=((4.0)*r00);
IkReal x927=((16.0)*r11);
IkReal x928=(cj11*cj12);
IkReal x929=((12.0)*cj14);
IkReal x930=((4.0)*r10);
IkReal x931=((16.0)*sj13);
IkReal x932=(r01*x924);
IkReal x933=(r11*x924);
IkReal x934=((8.0)*r11*sj14);
IkReal x935=(x925*x926);
IkReal x936=((12.0)*r02*x922);
IkReal x937=((12.0)*r12*x922);
IkReal x938=(x925*x930);
IkReal x939=(sj14*x928*x930);
IkReal x940=(sj14*x918*x930);
IkReal x941=(r12*x928*x929);
IkReal x942=(r12*x918*x929);
IkReal x943=(sj14*x926*x928);
IkReal x944=(r02*x918*x929);
IkReal x945=(r02*x928*x929);
IkReal x946=(sj14*x918*x926);
IkReal x947=(x933+x943);
IkReal x948=(x932+x940);
IkReal x949=(x939+x935);
IkReal x950=(x936+x942);
IkReal x951=(x938+x946);
IkReal x952=(x937+x945);
j15eval[0]=((((0.5)*(IKabs(((((-1.0)*x951))+(((-1.0)*x952))+x944+x947)))))+(((0.5)*(IKabs(((((-1.0)*x949))+(((-1.0)*x950))+x948+x941)))))+(((0.5)*(IKabs(((((-1.0)*cj14*x923*x928))+((cj14*x918*x923))+(((-1.0)*x919*x922))+(((-1.0)*x951))+x947)))))+(((0.5)*(IKabs(((((-1.0)*x947))+(((-1.0)*x952))+x951+x944)))))+(((0.5)*(IKabs(((((-1.0)*x925*x927))+(((-1.0)*r10*x931))+(((16.0)*x921*x928))+(((-16.0)*x918*x921)))))))+(IKabs(((((-8.0)*r11*x925))+(((-1.0)*r10*x920))+(((8.0)*x921*x928))+(((-8.0)*x918*x921)))))+(((0.5)*(IKabs(((((-1.0)*x948))+(((-1.0)*x950))+x949+x941)))))+(IKabs(((((-1.0)*x928*x934))+(((-8.0)*r01*x925))+(((-1.0)*r00*x920))+((x918*x934)))))+(((0.5)*(IKabs(((((-1.0)*x949))+((cj14*x919*x928))+(((-1.0)*cj14*x918*x919))+x948+(((-1.0)*x922*x923)))))))+(((0.5)*(IKabs(((((-16.0)*r01*x925))+((sj14*x918*x927))+(((-1.0)*r00*x931))+(((-1.0)*sj14*x927*x928))))))));
if( IKabs(j15eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j15evalpoly[1];
IkReal x953=(r10*sj13);
IkReal x954=((8.0)*r01);
IkReal x955=((4.0)*r00);
IkReal x956=(cj13*cj14);
IkReal x957=((16.0)*r01);
IkReal x958=((4.0)*r11*sj13);
IkReal x959=(cj11*cj12*sj14);
IkReal x960=(sj11*sj12*sj14);
IkReal x961=(cj13*r12*sj14);
IkReal x962=((4.0)*r10*x956);
IkReal x963=((12.0)*x961);
IkReal x964=((4.0)*x961);
IkReal x965=(cj14*r02*sj11*sj12);
IkReal x966=(cj11*cj12*cj14*r02);
IkReal x967=(x955*x959);
IkReal x968=(x955*x960);
IkReal x969=((12.0)*x965);
IkReal x970=((12.0)*x966);
IkReal x971=((4.0)*x965);
IkReal x972=((4.0)*x966);
IkReal x973=(x967+x958);
IkReal x974=(x972+x964);
IkReal x975=(x962+x968);
IkReal x976=(x970+x963);
IkReal x977=((((-8.0)*x953))+(((-1.0)*x954*x960))+(((-8.0)*r11*x956))+((x954*x959)));
op[0]=(x971+x973+(((-1.0)*x974))+(((-1.0)*x975)));
op[1]=x977;
op[2]=(x973+x969+(((-1.0)*x975))+(((-1.0)*x976)));
op[3]=((((-16.0)*r11*x956))+(((-16.0)*x953))+(((-1.0)*x957*x960))+((x957*x959)));
op[4]=(x975+x969+(((-1.0)*x973))+(((-1.0)*x976)));
op[5]=x977;
op[6]=(x971+x975+(((-1.0)*x974))+(((-1.0)*x973)));
polyroots6(op,zeror,numroots);
IkReal j15array[6], cj15array[6], sj15array[6], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IkReal htj15 = zeror[ij15];
tempj15array[0]=((2.0)*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
numsolutions++;
}
}
bool j15valid[6]={true,true,true,true,true,true};
_nj15 = 6;
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
if( !j15valid[ij15] )
{
    continue;
}
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
htj15 = IKtan(j15/2);

IkReal x978=((4.0)*cj14);
IkReal x979=(sj11*sj12);
IkReal x980=((4.0)*sj14);
IkReal x981=(cj13*r02);
IkReal x982=(r11*sj14);
IkReal x983=(cj11*cj12);
IkReal x984=(r00*sj13);
IkReal x985=((4.0)*r01*sj13);
IkReal x986=(cj13*cj14*r01);
IkReal x987=((12.0)*cj14*r12);
IkReal x988=(cj13*r00*x978);
IkReal x989=((12.0)*sj14*x981);
IkReal x990=(x980*x981);
IkReal x991=(r10*x979*x980);
IkReal x992=(r12*x978*x983);
IkReal x993=(r10*x980*x983);
IkReal x994=(x983*x987);
IkReal x995=(x979*x987);
IkReal x996=(r12*x978*x979);
IkReal x997=(x991+x985);
IkReal x998=(x993+x988);
IkReal x999=(x995+x989);
IkReal x1000=(x990+x996);
IkReal x1001=((((-8.0)*x986))+(((-8.0)*x984))+(((8.0)*x979*x982))+(((-8.0)*x982*x983)));
j15evalpoly[0]=(((htj15*x1001))+(((htj15*htj15*htj15*htj15)*(((((-1.0)*x998))+(((-1.0)*x999))+x997+x994))))+(((-1.0)*x1000))+(((htj15*htj15*htj15)*(((((-16.0)*x982*x983))+(((-16.0)*x984))+(((-16.0)*x986))+(((16.0)*x979*x982))))))+(((-1.0)*x997))+(((htj15*htj15)*(((((-1.0)*x997))+(((-1.0)*x999))+x994+x998))))+x992+x998+(((htj15*htj15*htj15*htj15*htj15*htj15)*(((((-1.0)*x1000))+(((-1.0)*x998))+x992+x997))))+((x1001*(htj15*htj15*htj15*htj15*htj15))));
if( IKabs(j15evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < numsolutions; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1002=(cj15*sj14);
IkReal x1003=(sj14*sj15);
if( IKabs((((r01*x1003))+(((-1.0)*r00*x1002))+(((-1.0)*cj14*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj14*r12))+(((-1.0)*r11*x1003))+((r10*x1002)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1003))+(((-1.0)*r00*x1002))+(((-1.0)*cj14*r02))))+IKsqr((((cj14*r12))+(((-1.0)*r11*x1003))+((r10*x1002))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r01*x1003))+(((-1.0)*r00*x1002))+(((-1.0)*cj14*r02))), (((cj14*r12))+(((-1.0)*r11*x1003))+((r10*x1002))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x1004=IKcos(j10);
IkReal x1005=IKsin(j10);
IkReal x1006=(sj11*sj12);
IkReal x1007=(sj13*sj15);
IkReal x1008=(cj14*r01);
IkReal x1009=(cj13*sj15);
IkReal x1010=((1.0)*cj14);
IkReal x1011=((0.08535)*sj15);
IkReal x1012=(cj15*r01);
IkReal x1013=(sj14*sj15);
IkReal x1014=(cj11*cj12);
IkReal x1015=((1.0)*sj12);
IkReal x1016=(cj12*sj11);
IkReal x1017=(cj15*sj13);
IkReal x1018=(r02*sj14);
IkReal x1019=((1.0)*sj13);
IkReal x1020=(cj13*cj15);
IkReal x1021=(r12*sj14);
IkReal x1022=(cj11*x1005);
IkReal x1023=((0.21325)*x1004);
IkReal x1024=((1.0)*cj15*sj14);
IkReal x1025=((1.0)*x1004);
IkReal x1026=(cj11*x1004);
IkReal x1027=((1.0)*x1005);
evalcond[0]=(x1004+(((-1.0)*r10*x1024))+(((-1.0)*r12*x1010))+((r11*x1013)));
evalcond[1]=((((-1.0)*r02*x1010))+(((-1.0)*x1027))+(((-1.0)*r00*x1024))+((r01*x1013)));
evalcond[2]=((((-0.11235)*x1005))+((x1014*x1023))+(((-1.0)*px))+(((-1.0)*r00*x1011))+(((0.24365)*x1026))+(((-0.08535)*x1012))+(((-1.0)*x1006*x1023)));
evalcond[3]=((((-0.08535)*cj15*r11))+(((-0.21325)*x1005*x1006))+(((-1.0)*py))+(((0.21325)*x1005*x1014))+(((0.24365)*x1022))+(((-1.0)*r10*x1011))+(((0.11235)*x1004)));
evalcond[4]=(((sj13*x1012))+((x1008*x1009))+(((-1.0)*r00*x1010*x1020))+(((-1.0)*x1014*x1025))+((x1004*x1006))+((r00*x1007))+((cj13*x1018)));
evalcond[5]=(((cj13*x1021))+(((-1.0)*r10*x1010*x1020))+(((-1.0)*x1014*x1027))+((cj14*r11*x1009))+((x1005*x1006))+((r11*x1017))+((r10*x1007)));
evalcond[6]=((((-1.0)*x1018*x1019))+((cj14*r00*x1017))+(((-1.0)*x1007*x1008))+(((-1.0)*x1015*x1026))+(((-1.0)*x1016*x1025))+((r00*x1009))+((cj13*x1012)));
evalcond[7]=((((-1.0)*x1019*x1021))+((cj14*r10*x1017))+((r11*x1020))+(((-1.0)*x1015*x1022))+(((-1.0)*x1016*x1027))+(((-1.0)*r11*x1007*x1010))+((r10*x1009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x1028=IKPowWithIntegerCheck(cj13,-1);
if(!x1028.valid){
continue;
}
CheckValue<IkReal> x1029=IKPowWithIntegerCheck(r22,-1);
if(!x1029.valid){
continue;
}
sj14array[0]=((-1.0)*(x1028.value)*(x1029.value)*((((cj12*sj11))+((cj11*sj12)))));
if( sj14array[0] >= -1-IKFAST_SINCOS_THRESH && sj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKasin(sj14array[0]);
    cj14array[0] = IKcos(j14array[0]);
    sj14array[1] = sj14array[0];
    j14array[1] = j14array[0] > 0 ? (IKPI-j14array[0]) : (-IKPI-j14array[0]);
    cj14array[1] = -cj14array[0];
}
else if( isnan(sj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j14)));
evalcond[1]=(((sj11*sj12))+(((-1.0)*r22*sj13*(IKsin(j14))))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[1];
IkReal x1030=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1030);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1030);
IkReal x1031=(sj11*sj12);
IkReal x1032=((4.0)*r12);
IkReal x1033=((8.0)*sj13);
IkReal x1034=(r01*sj14);
IkReal x1035=(cj13*sj14);
IkReal x1036=((4.0)*r02);
IkReal x1037=((4.0)*sj13);
IkReal x1038=(cj13*cj14);
IkReal x1039=((4.0)*r00);
IkReal x1040=((16.0)*r11);
IkReal x1041=(cj11*cj12);
IkReal x1042=((12.0)*cj14);
IkReal x1043=((4.0)*r10);
IkReal x1044=((16.0)*sj13);
IkReal x1045=(r01*x1037);
IkReal x1046=(r11*x1037);
IkReal x1047=((8.0)*r11*sj14);
IkReal x1048=(x1038*x1039);
IkReal x1049=((12.0)*r02*x1035);
IkReal x1050=((12.0)*r12*x1035);
IkReal x1051=(x1038*x1043);
IkReal x1052=(sj14*x1041*x1043);
IkReal x1053=(sj14*x1031*x1043);
IkReal x1054=(r12*x1041*x1042);
IkReal x1055=(r12*x1031*x1042);
IkReal x1056=(sj14*x1039*x1041);
IkReal x1057=(r02*x1031*x1042);
IkReal x1058=(r02*x1041*x1042);
IkReal x1059=(sj14*x1031*x1039);
IkReal x1060=(x1056+x1046);
IkReal x1061=(x1053+x1045);
IkReal x1062=(x1052+x1048);
IkReal x1063=(x1055+x1049);
IkReal x1064=(x1051+x1059);
IkReal x1065=(x1050+x1058);
j15eval[0]=((((0.5)*(IKabs((x1057+x1060+(((-1.0)*x1064))+(((-1.0)*x1065)))))))+(((0.5)*(IKabs((((cj14*x1032*x1041))+x1061+(((-1.0)*x1035*x1036))+(((-1.0)*cj14*x1031*x1032))+(((-1.0)*x1062)))))))+(((0.5)*(IKabs(((((-1.0)*sj14*x1040*x1041))+(((-1.0)*r00*x1044))+((sj14*x1031*x1040))+(((-16.0)*r01*x1038)))))))+(((0.5)*(IKabs((x1054+x1061+(((-1.0)*x1062))+(((-1.0)*x1063)))))))+(IKabs(((((-8.0)*r01*x1038))+(((-1.0)*x1041*x1047))+((x1031*x1047))+(((-1.0)*r00*x1033)))))+(((0.5)*(IKabs((x1057+x1064+(((-1.0)*x1065))+(((-1.0)*x1060)))))))+(((0.5)*(IKabs(((((-1.0)*x1038*x1040))+(((-1.0)*r10*x1044))+(((-16.0)*x1031*x1034))+(((16.0)*x1034*x1041)))))))+(IKabs(((((-1.0)*r10*x1033))+(((-8.0)*x1031*x1034))+(((-8.0)*r11*x1038))+(((8.0)*x1034*x1041)))))+(((0.5)*(IKabs((x1054+x1062+(((-1.0)*x1061))+(((-1.0)*x1063)))))))+(((0.5)*(IKabs((x1060+(((-1.0)*x1032*x1035))+(((-1.0)*cj14*x1036*x1041))+((cj14*x1031*x1036))+(((-1.0)*x1064))))))));
if( IKabs(j15eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j15evalpoly[1];
IkReal x1066=(r10*sj13);
IkReal x1067=((8.0)*r01);
IkReal x1068=((4.0)*r00);
IkReal x1069=(cj13*cj14);
IkReal x1070=((16.0)*r01);
IkReal x1071=((4.0)*r11*sj13);
IkReal x1072=(cj11*cj12*sj14);
IkReal x1073=(sj11*sj12*sj14);
IkReal x1074=(cj13*r12*sj14);
IkReal x1075=((4.0)*r10*x1069);
IkReal x1076=((12.0)*x1074);
IkReal x1077=((4.0)*x1074);
IkReal x1078=(cj14*r02*sj11*sj12);
IkReal x1079=(cj11*cj12*cj14*r02);
IkReal x1080=(x1068*x1072);
IkReal x1081=(x1068*x1073);
IkReal x1082=((12.0)*x1078);
IkReal x1083=((12.0)*x1079);
IkReal x1084=((4.0)*x1078);
IkReal x1085=((4.0)*x1079);
IkReal x1086=(x1071+x1080);
IkReal x1087=(x1077+x1085);
IkReal x1088=(x1075+x1081);
IkReal x1089=(x1076+x1083);
IkReal x1090=((((-8.0)*r11*x1069))+((x1067*x1072))+(((-1.0)*x1067*x1073))+(((-8.0)*x1066)));
op[0]=(x1086+x1084+(((-1.0)*x1087))+(((-1.0)*x1088)));
op[1]=x1090;
op[2]=(x1086+x1082+(((-1.0)*x1088))+(((-1.0)*x1089)));
op[3]=(((x1070*x1072))+(((-1.0)*x1070*x1073))+(((-16.0)*r11*x1069))+(((-16.0)*x1066)));
op[4]=(x1082+x1088+(((-1.0)*x1086))+(((-1.0)*x1089)));
op[5]=x1090;
op[6]=(x1084+x1088+(((-1.0)*x1086))+(((-1.0)*x1087)));
polyroots6(op,zeror,numroots);
IkReal j15array[6], cj15array[6], sj15array[6], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IkReal htj15 = zeror[ij15];
tempj15array[0]=((2.0)*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
numsolutions++;
}
}
bool j15valid[6]={true,true,true,true,true,true};
_nj15 = 6;
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
if( !j15valid[ij15] )
{
    continue;
}
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
htj15 = IKtan(j15/2);

IkReal x1091=((4.0)*cj14);
IkReal x1092=(sj11*sj12);
IkReal x1093=((4.0)*sj14);
IkReal x1094=(cj13*r02);
IkReal x1095=(r11*sj14);
IkReal x1096=(cj11*cj12);
IkReal x1097=(r00*sj13);
IkReal x1098=((4.0)*r01*sj13);
IkReal x1099=(cj13*cj14*r01);
IkReal x1100=((12.0)*cj14*r12);
IkReal x1101=(cj13*r00*x1091);
IkReal x1102=((12.0)*sj14*x1094);
IkReal x1103=(x1093*x1094);
IkReal x1104=(r10*x1092*x1093);
IkReal x1105=(r12*x1091*x1096);
IkReal x1106=(r10*x1093*x1096);
IkReal x1107=(x1096*x1100);
IkReal x1108=(x1092*x1100);
IkReal x1109=(r12*x1091*x1092);
IkReal x1110=(x1104+x1098);
IkReal x1111=(x1106+x1101);
IkReal x1112=(x1102+x1108);
IkReal x1113=(x1103+x1109);
IkReal x1114=((((8.0)*x1092*x1095))+(((-8.0)*x1095*x1096))+(((-8.0)*x1099))+(((-8.0)*x1097)));
j15evalpoly[0]=(x1105+x1111+(((htj15*htj15)*((x1107+x1111+(((-1.0)*x1112))+(((-1.0)*x1110))))))+((htj15*x1114))+(((htj15*htj15*htj15*htj15*htj15*htj15)*((x1105+x1110+(((-1.0)*x1113))+(((-1.0)*x1111))))))+((x1114*(htj15*htj15*htj15*htj15*htj15)))+(((htj15*htj15*htj15*htj15)*((x1107+x1110+(((-1.0)*x1112))+(((-1.0)*x1111))))))+(((htj15*htj15*htj15)*(((((16.0)*x1092*x1095))+(((-16.0)*x1097))+(((-16.0)*x1099))+(((-16.0)*x1095*x1096))))))+(((-1.0)*x1113))+(((-1.0)*x1110)));
if( IKabs(j15evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < numsolutions; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1115=(cj15*sj14);
IkReal x1116=(sj14*sj15);
if( IKabs((((r01*x1116))+(((-1.0)*r00*x1115))+(((-1.0)*cj14*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj14*r12))+(((-1.0)*r11*x1116))+((r10*x1115)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1116))+(((-1.0)*r00*x1115))+(((-1.0)*cj14*r02))))+IKsqr((((cj14*r12))+(((-1.0)*r11*x1116))+((r10*x1115))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r01*x1116))+(((-1.0)*r00*x1115))+(((-1.0)*cj14*r02))), (((cj14*r12))+(((-1.0)*r11*x1116))+((r10*x1115))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x1117=IKcos(j10);
IkReal x1118=IKsin(j10);
IkReal x1119=(sj11*sj12);
IkReal x1120=(sj13*sj15);
IkReal x1121=(cj14*r01);
IkReal x1122=(cj13*sj15);
IkReal x1123=((1.0)*cj14);
IkReal x1124=((0.08535)*sj15);
IkReal x1125=(cj15*r01);
IkReal x1126=(sj14*sj15);
IkReal x1127=(cj11*cj12);
IkReal x1128=((1.0)*sj12);
IkReal x1129=(cj12*sj11);
IkReal x1130=(cj15*sj13);
IkReal x1131=(r02*sj14);
IkReal x1132=((1.0)*sj13);
IkReal x1133=(cj13*cj15);
IkReal x1134=(r12*sj14);
IkReal x1135=(cj11*x1118);
IkReal x1136=((0.21325)*x1117);
IkReal x1137=((1.0)*cj15*sj14);
IkReal x1138=((1.0)*x1117);
IkReal x1139=(cj11*x1117);
IkReal x1140=((1.0)*x1118);
evalcond[0]=(x1117+(((-1.0)*r12*x1123))+(((-1.0)*r10*x1137))+((r11*x1126)));
evalcond[1]=(((r01*x1126))+(((-1.0)*x1140))+(((-1.0)*r02*x1123))+(((-1.0)*r00*x1137)));
evalcond[2]=((((-0.08535)*x1125))+(((0.24365)*x1139))+(((-0.11235)*x1118))+(((-1.0)*px))+(((-1.0)*r00*x1124))+(((-1.0)*x1119*x1136))+((x1127*x1136)));
evalcond[3]=((((0.24365)*x1135))+(((-0.08535)*cj15*r11))+(((-1.0)*r10*x1124))+(((-0.21325)*x1118*x1119))+(((-1.0)*py))+(((0.11235)*x1117))+(((0.21325)*x1118*x1127)));
evalcond[4]=(((r00*x1120))+((x1121*x1122))+(((-1.0)*r00*x1123*x1133))+(((-1.0)*x1127*x1138))+((x1117*x1119))+((cj13*x1131))+((sj13*x1125)));
evalcond[5]=(((r10*x1120))+(((-1.0)*x1127*x1140))+(((-1.0)*r10*x1123*x1133))+((cj13*x1134))+((cj14*r11*x1122))+((r11*x1130))+((x1118*x1119)));
evalcond[6]=(((r00*x1122))+(((-1.0)*x1131*x1132))+((cj14*r00*x1130))+(((-1.0)*x1128*x1139))+(((-1.0)*x1120*x1121))+((cj13*x1125))+(((-1.0)*x1129*x1138)));
evalcond[7]=(((r10*x1122))+(((-1.0)*x1129*x1140))+(((-1.0)*r11*x1120*x1123))+(((-1.0)*x1132*x1134))+(((-1.0)*x1128*x1135))+((cj14*r10*x1130))+((r11*x1133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x1141=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1141);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1141);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j14eval[0]=cj13;
j14eval[1]=r22;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x1142=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1142);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1142);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j14eval[0]=r22;
j14eval[1]=sj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x1143=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1143);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1143);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj13=0;
cj13=1.0;
j13=0;
j14eval[0]=r22;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x1144=IKPowWithIntegerCheck(r22,-1);
if(!x1144.valid){
continue;
}
sj14array[0]=((-1.0)*(x1144.value)*((((cj12*sj11))+((cj11*sj12)))));
if( sj14array[0] >= -1-IKFAST_SINCOS_THRESH && sj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKasin(sj14array[0]);
    cj14array[0] = IKcos(j14array[0]);
    sj14array[1] = sj14array[0];
    j14array[1] = j14array[0] > 0 ? (IKPI-j14array[0]) : (-IKPI-j14array[0]);
    cj14array[1] = -cj14array[0];
}
else if( isnan(sj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[1];
IkReal x1145=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1145);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1145);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj13=0;
cj13=1.0;
j13=0;
j15eval[0]=cj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x1147 = IKatan2WithCheck(IkReal(((-1.0)*cj14*r00)),IkReal((cj14*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1147.valid){
continue;
}
IkReal x1146=x1147.value;
j15array[0]=((-1.0)*x1146);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x1146)));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*cj14*r10*(IKcos(j15))))+((cj14*r11*(IKsin(j15)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1148=(cj15*sj14);
IkReal x1149=(sj14*sj15);
if( IKabs(((((-1.0)*r00*x1148))+((r01*x1149)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1149))+((r10*x1148)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1148))+((r01*x1149))))+IKsqr(((((-1.0)*r11*x1149))+((r10*x1148))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r00*x1148))+((r01*x1149))), ((((-1.0)*r11*x1149))+((r10*x1148))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1150=IKcos(j10);
IkReal x1151=IKsin(j10);
IkReal x1152=(sj14*sj15);
IkReal x1153=(r10*sj15);
IkReal x1154=((1.0)*sj12);
IkReal x1155=(r00*sj15);
IkReal x1156=((0.08535)*cj15);
IkReal x1157=(cj11*x1151);
IkReal x1158=((1.0)*cj15*sj14);
IkReal x1159=((1.0)*cj12*sj11);
IkReal x1160=(cj11*x1150);
evalcond[0]=(x1150+((r11*x1152))+(((-1.0)*r10*x1158)));
evalcond[1]=((((-1.0)*r00*x1158))+(((-1.0)*x1151))+((r01*x1152)));
evalcond[2]=(x1155+((cj15*r01))+(((-1.0)*x1154*x1160))+(((-1.0)*x1150*x1159)));
evalcond[3]=((((-1.0)*x1154*x1157))+x1153+((cj15*r11))+(((-1.0)*x1151*x1159)));
evalcond[4]=((((0.24365)*x1160))+(((-0.11235)*x1151))+(((-1.0)*r01*x1156))+(((-1.0)*px))+(((-0.08535)*x1155)));
evalcond[5]=((((0.11235)*x1150))+(((-1.0)*py))+(((0.24365)*x1157))+(((-1.0)*r11*x1156))+(((-0.08535)*x1153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x1161=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1161);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1161);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j14eval[0]=r22;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x1162=IKPowWithIntegerCheck(r22,-1);
if(!x1162.valid){
continue;
}
sj14array[0]=((x1162.value)*((((cj12*sj11))+((cj11*sj12)))));
if( sj14array[0] >= -1-IKFAST_SINCOS_THRESH && sj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKasin(sj14array[0]);
    cj14array[0] = IKcos(j14array[0]);
    sj14array[1] = sj14array[0];
    j14array[1] = j14array[0] > 0 ? (IKPI-j14array[0]) : (-IKPI-j14array[0]);
    cj14array[1] = -cj14array[0];
}
else if( isnan(sj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[1];
IkReal x1163=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1163);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1163);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j15eval[0]=cj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x1165 = IKatan2WithCheck(IkReal((cj14*r00)),IkReal(((-1.0)*cj14*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1165.valid){
continue;
}
IkReal x1164=x1165.value;
j15array[0]=((-1.0)*x1164);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x1164)));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[1];
evalcond[0]=(((cj14*r10*(IKcos(j15))))+(((-1.0)*cj14*r11*(IKsin(j15)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1166=(cj15*sj14);
IkReal x1167=(sj14*sj15);
if( IKabs((((r01*x1167))+(((-1.0)*r00*x1166)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1166))+(((-1.0)*r11*x1167)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1167))+(((-1.0)*r00*x1166))))+IKsqr((((r10*x1166))+(((-1.0)*r11*x1167))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r01*x1167))+(((-1.0)*r00*x1166))), (((r10*x1166))+(((-1.0)*r11*x1167))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1168=IKcos(j10);
IkReal x1169=IKsin(j10);
IkReal x1170=((1.0)*cj15);
IkReal x1171=(sj14*sj15);
IkReal x1172=(r10*sj15);
IkReal x1173=((0.08535)*cj15);
IkReal x1174=((1.0)*sj12);
IkReal x1175=(r00*sj15);
IkReal x1176=(cj11*x1169);
IkReal x1177=((1.0)*cj12*sj11);
IkReal x1178=(cj11*x1168);
evalcond[0]=(x1168+(((-1.0)*r10*sj14*x1170))+((r11*x1171)));
evalcond[1]=((((-1.0)*r00*sj14*x1170))+((r01*x1171))+(((-1.0)*x1169)));
evalcond[2]=((((-0.08535)*x1175))+(((-1.0)*px))+(((-1.0)*r01*x1173))+(((-0.11235)*x1169))+(((0.24365)*x1178)));
evalcond[3]=((((-0.08535)*x1172))+(((-1.0)*r11*x1173))+(((-1.0)*py))+(((0.11235)*x1168))+(((0.24365)*x1176)));
evalcond[4]=((((-1.0)*x1168*x1177))+(((-1.0)*r01*x1170))+(((-1.0)*x1174*x1178))+(((-1.0)*x1175)));
evalcond[5]=((((-1.0)*r11*x1170))+(((-1.0)*x1169*x1177))+(((-1.0)*x1174*x1176))+(((-1.0)*x1172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x1179=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1179);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1179);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j14eval[0]=r22;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x1180=IKPowWithIntegerCheck(r22,-1);
if(!x1180.valid){
continue;
}
sj14array[0]=((x1180.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12)))));
if( sj14array[0] >= -1-IKFAST_SINCOS_THRESH && sj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKasin(sj14array[0]);
    cj14array[0] = IKcos(j14array[0]);
    sj14array[1] = sj14array[0];
    j14array[1] = j14array[0] > 0 ? (IKPI-j14array[0]) : (-IKPI-j14array[0]);
    cj14array[1] = -cj14array[0];
}
else if( isnan(sj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[1];
IkReal x1181=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1181);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1181);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j15eval[0]=cj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x1183 = IKatan2WithCheck(IkReal((cj14*r00)),IkReal(((-1.0)*cj14*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1183.valid){
continue;
}
IkReal x1182=x1183.value;
j15array[0]=((-1.0)*x1182);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x1182)));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[1];
evalcond[0]=(((cj14*r10*(IKcos(j15))))+(((-1.0)*cj14*r11*(IKsin(j15)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1184=(cj15*sj14);
IkReal x1185=(sj14*sj15);
if( IKabs((((r01*x1185))+(((-1.0)*r00*x1184)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1184))+(((-1.0)*r11*x1185)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1185))+(((-1.0)*r00*x1184))))+IKsqr((((r10*x1184))+(((-1.0)*r11*x1185))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r01*x1185))+(((-1.0)*r00*x1184))), (((r10*x1184))+(((-1.0)*r11*x1185))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1186=IKcos(j10);
IkReal x1187=IKsin(j10);
IkReal x1188=(sj11*sj12);
IkReal x1189=(sj14*sj15);
IkReal x1190=(cj11*cj12);
IkReal x1191=(r10*sj15);
IkReal x1192=(r00*sj15);
IkReal x1193=((0.08535)*cj15);
IkReal x1194=(cj11*x1187);
IkReal x1195=((0.21325)*x1186);
IkReal x1196=((1.0)*cj15*sj14);
evalcond[0]=(x1186+(((-1.0)*r10*x1196))+((r11*x1189)));
evalcond[1]=((((-1.0)*r00*x1196))+((r01*x1189))+(((-1.0)*x1187)));
evalcond[2]=(x1192+((x1186*x1188))+((cj15*r01))+(((-1.0)*x1186*x1190)));
evalcond[3]=(((x1187*x1188))+x1191+((cj15*r11))+(((-1.0)*x1187*x1190)));
evalcond[4]=((((-0.08535)*x1192))+(((0.24365)*cj11*x1186))+(((-1.0)*x1188*x1195))+(((-1.0)*px))+((x1190*x1195))+(((-0.11235)*x1187))+(((-1.0)*r01*x1193)));
evalcond[5]=((((-0.08535)*x1191))+(((0.24365)*x1194))+(((-0.21325)*x1187*x1188))+(((0.21325)*x1187*x1190))+(((-1.0)*py))+(((0.11235)*x1186))+(((-1.0)*r11*x1193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x1197=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1197);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1197);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j14eval[0]=r22;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x1198=IKPowWithIntegerCheck(r22,-1);
if(!x1198.valid){
continue;
}
sj14array[0]=((-1.0)*(x1198.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12)))));
if( sj14array[0] >= -1-IKFAST_SINCOS_THRESH && sj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKasin(sj14array[0]);
    cj14array[0] = IKcos(j14array[0]);
    sj14array[1] = sj14array[0];
    j14array[1] = j14array[0] > 0 ? (IKPI-j14array[0]) : (-IKPI-j14array[0]);
    cj14array[1] = -cj14array[0];
}
else if( isnan(sj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[1];
IkReal x1199=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1199);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1199);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j15eval[0]=cj14;
if( IKabs(j15eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x1201 = IKatan2WithCheck(IkReal(((-1.0)*cj14*r00)),IkReal((cj14*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1201.valid){
continue;
}
IkReal x1200=x1201.value;
j15array[0]=((-1.0)*x1200);
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x1200)));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*cj14*r10*(IKcos(j15))))+((cj14*r11*(IKsin(j15)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1202=(cj15*sj14);
IkReal x1203=(sj14*sj15);
if( IKabs(((((-1.0)*r00*x1202))+((r01*x1203)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1202))+(((-1.0)*r11*x1203)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1202))+((r01*x1203))))+IKsqr((((r10*x1202))+(((-1.0)*r11*x1203))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r00*x1202))+((r01*x1203))), (((r10*x1202))+(((-1.0)*r11*x1203))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[6];
IkReal x1204=IKcos(j10);
IkReal x1205=IKsin(j10);
IkReal x1206=(sj11*sj12);
IkReal x1207=((1.0)*cj15);
IkReal x1208=(sj14*sj15);
IkReal x1209=(cj11*cj12);
IkReal x1210=(r00*sj15);
IkReal x1211=(r10*sj15);
IkReal x1212=((0.08535)*cj15);
IkReal x1213=(cj11*x1205);
IkReal x1214=((0.21325)*x1204);
evalcond[0]=(x1204+((r11*x1208))+(((-1.0)*r10*sj14*x1207)));
evalcond[1]=((((-1.0)*r00*sj14*x1207))+(((-1.0)*x1205))+((r01*x1208)));
evalcond[2]=(((x1204*x1206))+(((-1.0)*r01*x1207))+(((-1.0)*x1204*x1209))+(((-1.0)*x1210)));
evalcond[3]=((((-1.0)*x1205*x1209))+((x1205*x1206))+(((-1.0)*r11*x1207))+(((-1.0)*x1211)));
evalcond[4]=((((-1.0)*x1206*x1214))+(((-1.0)*r01*x1212))+(((-1.0)*px))+(((0.24365)*cj11*x1204))+((x1209*x1214))+(((-0.08535)*x1210))+(((-0.11235)*x1205)));
evalcond[5]=((((-0.21325)*x1205*x1206))+(((0.21325)*x1205*x1209))+(((-1.0)*py))+(((0.11235)*x1204))+(((0.24365)*x1213))+(((-1.0)*r11*x1212))+(((-0.08535)*x1211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10, j14, j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x1215=IKPowWithIntegerCheck(r22,-1);
if(!x1215.valid){
continue;
}
CheckValue<IkReal> x1216=IKPowWithIntegerCheck(sj13,-1);
if(!x1216.valid){
continue;
}
sj14array[0]=((x1215.value)*(x1216.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12)))));
if( sj14array[0] >= -1-IKFAST_SINCOS_THRESH && sj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKasin(sj14array[0]);
    cj14array[0] = IKcos(j14array[0]);
    sj14array[1] = sj14array[0];
    j14array[1] = j14array[0] > 0 ? (IKPI-j14array[0]) : (-IKPI-j14array[0]);
    cj14array[1] = -cj14array[0];
}
else if( isnan(sj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j14)));
evalcond[1]=(((cj12*sj11))+((cj13*r22*(IKsin(j14))))+((cj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[1];
IkReal x1217=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1217);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1217);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j15eval[0]=((((0.5)*(IKabs(((((4.0)*cj11*r01*sj12*sj13))+(((-4.0)*cj11*cj12*cj13*r01))+(((-4.0)*cj11*cj12*cj14*r00*sj13))+(((-4.0)*cj11*cj13*cj14*r00*sj12))+(((-4.0)*cj12*cj13*cj14*r00*sj11))+(((4.0)*cj12*r01*sj11*sj13))+(((4.0)*cj14*r00*sj11*sj12*sj13))+(((4.0)*cj13*r01*sj11*sj12)))))))+(((0.5)*(IKabs(((((16.0)*cj11*r10*sj12*sj13))+(((-16.0)*cj11*cj12*cj13*r10))+(((16.0)*cj11*cj13*cj14*r11*sj12))+(((16.0)*cj11*cj12*cj14*r11*sj13))+(((16.0)*cj13*r10*sj11*sj12))+(((-16.0)*cj14*r11*sj11*sj12*sj13))+(((16.0)*cj12*cj13*cj14*r11*sj11))+(((16.0)*cj12*r10*sj11*sj13)))))))+(IKabs(((((4.0)*cj11*cj12*cj14*r10*sj13))+(((-4.0)*cj12*r11*sj11*sj13))+(((4.0)*cj11*cj12*cj13*r11))+(((4.0)*cj12*cj13*cj14*r10*sj11))+(((4.0)*cj11*cj13*cj14*r10*sj12))+(((-4.0)*cj13*r11*sj11*sj12))+(((-4.0)*cj14*r10*sj11*sj12*sj13))+(((-4.0)*cj11*r11*sj12*sj13)))))+(IKabs(((((8.0)*cj11*cj13*cj14*r01*sj12))+(((8.0)*cj11*r00*sj12*sj13))+(((-8.0)*cj14*r01*sj11*sj12*sj13))+(((-8.0)*cj11*cj12*cj13*r00))+(((8.0)*cj13*r00*sj11*sj12))+(((8.0)*cj11*cj12*cj14*r01*sj13))+(((8.0)*cj12*cj13*cj14*r01*sj11))+(((8.0)*cj12*r00*sj11*sj13)))))+(((0.5)*(IKabs(((((16.0)*cj11*cj13*cj14*r01*sj12))+(((16.0)*cj11*cj12*cj14*r01*sj13))+(((-16.0)*cj11*cj12*cj13*r00))+(((16.0)*cj11*r00*sj12*sj13))+(((-16.0)*cj14*r01*sj11*sj12*sj13))+(((16.0)*cj13*r00*sj11*sj12))+(((16.0)*cj12*cj13*cj14*r01*sj11))+(((16.0)*cj12*r00*sj11*sj13)))))))+(((0.5)*(IKabs(((((4.0)*cj14*r10*sj11*sj12*sj13))+(((4.0)*cj13*r11*sj11*sj12))+(((-4.0)*cj11*cj13*cj14*r10*sj12))+(((4.0)*cj11*r11*sj12*sj13))+(((-4.0)*cj11*cj12*cj13*r11))+(((-4.0)*cj12*cj13*cj14*r10*sj11))+(((-4.0)*cj11*cj12*cj14*r10*sj13))+(((4.0)*cj12*r11*sj11*sj13)))))))+(IKabs(((((-4.0)*cj12*r01*sj11*sj13))+(((-4.0)*cj14*r00*sj11*sj12*sj13))+(((4.0)*cj11*cj12*cj13*r01))+(((4.0)*cj11*cj12*cj14*r00*sj13))+(((-4.0)*cj13*r01*sj11*sj12))+(((-4.0)*cj11*r01*sj12*sj13))+(((4.0)*cj12*cj13*cj14*r00*sj11))+(((4.0)*cj11*cj13*cj14*r00*sj12)))))+(IKabs(((((8.0)*cj11*cj12*cj14*r11*sj13))+(((8.0)*cj12*cj13*cj14*r11*sj11))+(((-8.0)*cj11*cj12*cj13*r10))+(((8.0)*cj11*cj13*cj14*r11*sj12))+(((8.0)*cj13*r10*sj11*sj12))+(((8.0)*cj11*r10*sj12*sj13))+(((-8.0)*cj14*r11*sj11*sj12*sj13))+(((8.0)*cj12*r10*sj11*sj13))))));
if( IKabs(j15eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j10, j15]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j15evalpoly[1];
IkReal x1218=(cj14*sj13);
IkReal x1219=(cj13*cj14);
IkReal x1220=(cj12*sj11);
IkReal x1221=((8.0)*r01);
IkReal x1222=((16.0)*cj13);
IkReal x1223=((8.0)*cj13);
IkReal x1224=(r00*sj13);
IkReal x1225=(sj11*sj12);
IkReal x1226=((4.0)*r00);
IkReal x1227=((16.0)*r01);
IkReal x1228=(cj11*sj12);
IkReal x1229=(cj11*cj12);
IkReal x1230=(sj12*x1221);
IkReal x1231=(r00*x1229);
IkReal x1232=((4.0)*r01*sj13);
IkReal x1233=((4.0)*cj13*r01);
IkReal x1234=(((x1218*x1225*x1226))+((x1225*x1233))+((x1220*x1232))+((x1228*x1232)));
IkReal x1235=(((x1219*x1226*x1228))+((x1218*x1226*x1229))+((x1219*x1220*x1226))+((x1229*x1233)));
IkReal x1236=(x1235+(((-1.0)*x1234)));
IkReal x1237=(((x1219*x1221*x1228))+(((-1.0)*x1223*x1231))+(((-1.0)*x1218*x1221*x1225))+((r00*x1223*x1225))+(((8.0)*x1224*x1228))+((x1219*x1220*x1221))+((x1218*x1221*x1229))+(((8.0)*x1220*x1224)));
IkReal x1238=(x1234+(((-1.0)*x1235)));
op[0]=x1236;
op[1]=x1237;
op[2]=x1236;
op[3]=((((16.0)*x1224*x1228))+((r00*x1222*x1225))+((x1219*x1227*x1228))+((x1218*x1227*x1229))+(((-1.0)*x1222*x1231))+(((16.0)*x1220*x1224))+(((-1.0)*x1218*x1225*x1227))+((x1219*x1220*x1227)));
op[4]=x1238;
op[5]=x1237;
op[6]=x1238;
polyroots6(op,zeror,numroots);
IkReal j15array[6], cj15array[6], sj15array[6], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IkReal htj15 = zeror[ij15];
tempj15array[0]=((2.0)*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
numsolutions++;
}
}
bool j15valid[6]={true,true,true,true,true,true};
_nj15 = 6;
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
if( !j15valid[ij15] )
{
    continue;
}
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
htj15 = IKtan(j15/2);

j15evalpoly[0]=((((4.0)*cj14*r10*sj11*sj12*sj13))+(((4.0)*cj13*r11*sj11*sj12))+(((-4.0)*cj11*cj13*cj14*r10*sj12))+(((4.0)*cj11*r11*sj12*sj13))+(((-4.0)*cj11*cj12*cj13*r11))+(((htj15*htj15*htj15*htj15)*(((((4.0)*cj11*cj12*cj14*r10*sj13))+(((-4.0)*cj12*r11*sj11*sj13))+(((4.0)*cj11*cj12*cj13*r11))+(((4.0)*cj12*cj13*cj14*r10*sj11))+(((4.0)*cj11*cj13*cj14*r10*sj12))+(((-4.0)*cj13*r11*sj11*sj12))+(((-4.0)*cj14*r10*sj11*sj12*sj13))+(((-4.0)*cj11*r11*sj12*sj13))))))+(((htj15*htj15*htj15*htj15*htj15*htj15)*(((((4.0)*cj11*cj12*cj14*r10*sj13))+(((-4.0)*cj12*r11*sj11*sj13))+(((4.0)*cj11*cj12*cj13*r11))+(((4.0)*cj12*cj13*cj14*r10*sj11))+(((4.0)*cj11*cj13*cj14*r10*sj12))+(((-4.0)*cj13*r11*sj11*sj12))+(((-4.0)*cj14*r10*sj11*sj12*sj13))+(((-4.0)*cj11*r11*sj12*sj13))))))+(((-4.0)*cj12*cj13*cj14*r10*sj11))+(((htj15*htj15*htj15*htj15*htj15)*(((((8.0)*cj11*cj12*cj14*r11*sj13))+(((8.0)*cj12*cj13*cj14*r11*sj11))+(((-8.0)*cj11*cj12*cj13*r10))+(((8.0)*cj11*cj13*cj14*r11*sj12))+(((8.0)*cj13*r10*sj11*sj12))+(((8.0)*cj11*r10*sj12*sj13))+(((-8.0)*cj14*r11*sj11*sj12*sj13))+(((8.0)*cj12*r10*sj11*sj13))))))+(((htj15*htj15)*(((((4.0)*cj14*r10*sj11*sj12*sj13))+(((4.0)*cj13*r11*sj11*sj12))+(((-4.0)*cj11*cj13*cj14*r10*sj12))+(((4.0)*cj11*r11*sj12*sj13))+(((-4.0)*cj11*cj12*cj13*r11))+(((-4.0)*cj12*cj13*cj14*r10*sj11))+(((-4.0)*cj11*cj12*cj14*r10*sj13))+(((4.0)*cj12*r11*sj11*sj13))))))+((htj15*(((((8.0)*cj11*cj12*cj14*r11*sj13))+(((8.0)*cj12*cj13*cj14*r11*sj11))+(((-8.0)*cj11*cj12*cj13*r10))+(((8.0)*cj11*cj13*cj14*r11*sj12))+(((8.0)*cj13*r10*sj11*sj12))+(((8.0)*cj11*r10*sj12*sj13))+(((-8.0)*cj14*r11*sj11*sj12*sj13))+(((8.0)*cj12*r10*sj11*sj13))))))+(((-4.0)*cj11*cj12*cj14*r10*sj13))+(((4.0)*cj12*r11*sj11*sj13))+(((htj15*htj15*htj15)*(((((16.0)*cj11*r10*sj12*sj13))+(((-16.0)*cj11*cj12*cj13*r10))+(((16.0)*cj11*cj13*cj14*r11*sj12))+(((16.0)*cj11*cj12*cj14*r11*sj13))+(((16.0)*cj13*r10*sj11*sj12))+(((-16.0)*cj14*r11*sj11*sj12*sj13))+(((16.0)*cj12*cj13*cj14*r11*sj11))+(((16.0)*cj12*r10*sj11*sj13)))))));
if( IKabs(j15evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < numsolutions; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1239=(cj15*sj14);
IkReal x1240=(sj14*sj15);
if( IKabs((((r01*x1240))+(((-1.0)*r00*x1239)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1240))+((r10*x1239)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1240))+(((-1.0)*r00*x1239))))+IKsqr(((((-1.0)*r11*x1240))+((r10*x1239))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r01*x1240))+(((-1.0)*r00*x1239))), ((((-1.0)*r11*x1240))+((r10*x1239))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x1241=IKcos(j10);
IkReal x1242=IKsin(j10);
IkReal x1243=(sj11*sj12);
IkReal x1244=(sj13*sj15);
IkReal x1245=(cj14*r01);
IkReal x1246=(cj13*sj15);
IkReal x1247=(cj15*r01);
IkReal x1248=(sj14*sj15);
IkReal x1249=(cj14*r11);
IkReal x1250=((1.0)*sj12);
IkReal x1251=(cj15*r11);
IkReal x1252=((0.08535)*sj15);
IkReal x1253=((1.0)*cj12);
IkReal x1254=(cj11*x1242);
IkReal x1255=((0.21325)*x1241);
IkReal x1256=((1.0)*cj15*sj14);
IkReal x1257=(cj11*x1241);
IkReal x1258=(cj14*cj15*sj13);
IkReal x1259=(x1241*x1253);
IkReal x1260=((1.0)*cj13*cj14*cj15);
evalcond[0]=(x1241+((r11*x1248))+(((-1.0)*r10*x1256)));
evalcond[1]=((((-1.0)*x1242))+(((-1.0)*r00*x1256))+((r01*x1248)));
evalcond[2]=((((-1.0)*x1253*x1257))+((sj13*x1247))+(((-1.0)*r00*x1260))+((r00*x1244))+((x1245*x1246))+((x1241*x1243)));
evalcond[3]=((((-1.0)*r10*x1260))+(((-1.0)*x1253*x1254))+((sj13*x1251))+((x1246*x1249))+((x1242*x1243))+((r10*x1244)));
evalcond[4]=(((r00*x1246))+(((-1.0)*x1250*x1257))+(((-1.0)*sj11*x1259))+((cj13*x1247))+((r00*x1258))+(((-1.0)*x1244*x1245)));
evalcond[5]=(((r10*x1258))+((cj13*x1251))+(((-1.0)*x1250*x1254))+((r10*x1246))+(((-1.0)*x1244*x1249))+(((-1.0)*sj11*x1242*x1253)));
evalcond[6]=((((-0.08535)*x1247))+(((-0.11235)*x1242))+(((0.24365)*x1257))+((cj11*cj12*x1255))+(((-1.0)*r00*x1252))+(((-1.0)*px))+(((-1.0)*x1243*x1255)));
evalcond[7]=((((-0.21325)*x1242*x1243))+(((0.21325)*cj12*x1254))+(((0.11235)*x1241))+(((0.24365)*x1254))+(((-0.08535)*x1251))+(((-1.0)*py))+(((-1.0)*r10*x1252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x1261=IKPowWithIntegerCheck(cj13,-1);
if(!x1261.valid){
continue;
}
CheckValue<IkReal> x1262=IKPowWithIntegerCheck(r22,-1);
if(!x1262.valid){
continue;
}
sj14array[0]=((-1.0)*(x1261.value)*(x1262.value)*((((cj12*sj11))+((cj11*sj12)))));
if( sj14array[0] >= -1-IKFAST_SINCOS_THRESH && sj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKasin(sj14array[0]);
    cj14array[0] = IKcos(j14array[0]);
    sj14array[1] = sj14array[0];
    j14array[1] = j14array[0] > 0 ? (IKPI-j14array[0]) : (-IKPI-j14array[0]);
    cj14array[1] = -cj14array[0];
}
else if( isnan(sj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j14)));
evalcond[1]=(((sj11*sj12))+(((-1.0)*r22*sj13*(IKsin(j14))))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j15eval[1];
IkReal x1263=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1263);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1263);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j15eval[0]=((((0.5)*(IKabs(((((4.0)*cj11*r01*sj12*sj13))+(((-4.0)*cj11*cj12*cj13*r01))+(((-4.0)*cj11*cj12*cj14*r00*sj13))+(((-4.0)*cj11*cj13*cj14*r00*sj12))+(((-4.0)*cj12*cj13*cj14*r00*sj11))+(((4.0)*cj12*r01*sj11*sj13))+(((4.0)*cj14*r00*sj11*sj12*sj13))+(((4.0)*cj13*r01*sj11*sj12)))))))+(((0.5)*(IKabs(((((16.0)*cj11*r10*sj12*sj13))+(((-16.0)*cj11*cj12*cj13*r10))+(((16.0)*cj11*cj13*cj14*r11*sj12))+(((16.0)*cj11*cj12*cj14*r11*sj13))+(((16.0)*cj13*r10*sj11*sj12))+(((-16.0)*cj14*r11*sj11*sj12*sj13))+(((16.0)*cj12*cj13*cj14*r11*sj11))+(((16.0)*cj12*r10*sj11*sj13)))))))+(IKabs(((((4.0)*cj11*cj12*cj14*r10*sj13))+(((-4.0)*cj12*r11*sj11*sj13))+(((4.0)*cj11*cj12*cj13*r11))+(((4.0)*cj12*cj13*cj14*r10*sj11))+(((4.0)*cj11*cj13*cj14*r10*sj12))+(((-4.0)*cj13*r11*sj11*sj12))+(((-4.0)*cj14*r10*sj11*sj12*sj13))+(((-4.0)*cj11*r11*sj12*sj13)))))+(IKabs(((((8.0)*cj11*cj13*cj14*r01*sj12))+(((8.0)*cj11*r00*sj12*sj13))+(((-8.0)*cj14*r01*sj11*sj12*sj13))+(((-8.0)*cj11*cj12*cj13*r00))+(((8.0)*cj13*r00*sj11*sj12))+(((8.0)*cj11*cj12*cj14*r01*sj13))+(((8.0)*cj12*cj13*cj14*r01*sj11))+(((8.0)*cj12*r00*sj11*sj13)))))+(((0.5)*(IKabs(((((16.0)*cj11*cj13*cj14*r01*sj12))+(((16.0)*cj11*cj12*cj14*r01*sj13))+(((-16.0)*cj11*cj12*cj13*r00))+(((16.0)*cj11*r00*sj12*sj13))+(((-16.0)*cj14*r01*sj11*sj12*sj13))+(((16.0)*cj13*r00*sj11*sj12))+(((16.0)*cj12*cj13*cj14*r01*sj11))+(((16.0)*cj12*r00*sj11*sj13)))))))+(((0.5)*(IKabs(((((4.0)*cj14*r10*sj11*sj12*sj13))+(((4.0)*cj13*r11*sj11*sj12))+(((-4.0)*cj11*cj13*cj14*r10*sj12))+(((4.0)*cj11*r11*sj12*sj13))+(((-4.0)*cj11*cj12*cj13*r11))+(((-4.0)*cj12*cj13*cj14*r10*sj11))+(((-4.0)*cj11*cj12*cj14*r10*sj13))+(((4.0)*cj12*r11*sj11*sj13)))))))+(IKabs(((((-4.0)*cj12*r01*sj11*sj13))+(((-4.0)*cj14*r00*sj11*sj12*sj13))+(((4.0)*cj11*cj12*cj13*r01))+(((4.0)*cj11*cj12*cj14*r00*sj13))+(((-4.0)*cj13*r01*sj11*sj12))+(((-4.0)*cj11*r01*sj12*sj13))+(((4.0)*cj12*cj13*cj14*r00*sj11))+(((4.0)*cj11*cj13*cj14*r00*sj12)))))+(IKabs(((((8.0)*cj11*cj12*cj14*r11*sj13))+(((8.0)*cj12*cj13*cj14*r11*sj11))+(((-8.0)*cj11*cj12*cj13*r10))+(((8.0)*cj11*cj13*cj14*r11*sj12))+(((8.0)*cj13*r10*sj11*sj12))+(((8.0)*cj11*r10*sj12*sj13))+(((-8.0)*cj14*r11*sj11*sj12*sj13))+(((8.0)*cj12*r10*sj11*sj13))))));
if( IKabs(j15eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j10, j15]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j15evalpoly[1];
IkReal x1264=(cj14*sj13);
IkReal x1265=(cj13*cj14);
IkReal x1266=(cj12*sj11);
IkReal x1267=((8.0)*r01);
IkReal x1268=((16.0)*cj13);
IkReal x1269=((8.0)*cj13);
IkReal x1270=(r00*sj13);
IkReal x1271=(sj11*sj12);
IkReal x1272=((4.0)*r00);
IkReal x1273=((16.0)*r01);
IkReal x1274=(cj11*sj12);
IkReal x1275=(cj11*cj12);
IkReal x1276=(sj12*x1267);
IkReal x1277=(r00*x1275);
IkReal x1278=((4.0)*r01*sj13);
IkReal x1279=((4.0)*cj13*r01);
IkReal x1280=(((x1264*x1271*x1272))+((x1274*x1278))+((x1266*x1278))+((x1271*x1279)));
IkReal x1281=(((x1275*x1279))+((x1264*x1272*x1275))+((x1265*x1272*x1274))+((x1265*x1266*x1272)));
IkReal x1282=(x1281+(((-1.0)*x1280)));
IkReal x1283=(((x1264*x1267*x1275))+((r00*x1269*x1271))+(((-1.0)*x1264*x1267*x1271))+(((-1.0)*x1269*x1277))+(((8.0)*x1270*x1274))+((x1265*x1266*x1267))+((x1265*x1267*x1274))+(((8.0)*x1266*x1270)));
IkReal x1284=(x1280+(((-1.0)*x1281)));
op[0]=x1282;
op[1]=x1283;
op[2]=x1282;
op[3]=((((-1.0)*x1268*x1277))+((r00*x1268*x1271))+(((16.0)*x1266*x1270))+(((16.0)*x1270*x1274))+((x1265*x1273*x1274))+((x1264*x1273*x1275))+(((-1.0)*x1264*x1271*x1273))+((x1265*x1266*x1273)));
op[4]=x1284;
op[5]=x1283;
op[6]=x1284;
polyroots6(op,zeror,numroots);
IkReal j15array[6], cj15array[6], sj15array[6], tempj15array[1];
int numsolutions = 0;
for(int ij15 = 0; ij15 < numroots; ++ij15)
{
IkReal htj15 = zeror[ij15];
tempj15array[0]=((2.0)*(atan(htj15)));
for(int kj15 = 0; kj15 < 1; ++kj15)
{
j15array[numsolutions] = tempj15array[kj15];
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
sj15array[numsolutions] = IKsin(j15array[numsolutions]);
cj15array[numsolutions] = IKcos(j15array[numsolutions]);
numsolutions++;
}
}
bool j15valid[6]={true,true,true,true,true,true};
_nj15 = 6;
for(int ij15 = 0; ij15 < numsolutions; ++ij15)
    {
if( !j15valid[ij15] )
{
    continue;
}
    j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
htj15 = IKtan(j15/2);

j15evalpoly[0]=((((4.0)*cj14*r10*sj11*sj12*sj13))+(((4.0)*cj13*r11*sj11*sj12))+(((-4.0)*cj11*cj13*cj14*r10*sj12))+(((4.0)*cj11*r11*sj12*sj13))+(((-4.0)*cj11*cj12*cj13*r11))+(((htj15*htj15*htj15*htj15)*(((((4.0)*cj11*cj12*cj14*r10*sj13))+(((-4.0)*cj12*r11*sj11*sj13))+(((4.0)*cj11*cj12*cj13*r11))+(((4.0)*cj12*cj13*cj14*r10*sj11))+(((4.0)*cj11*cj13*cj14*r10*sj12))+(((-4.0)*cj13*r11*sj11*sj12))+(((-4.0)*cj14*r10*sj11*sj12*sj13))+(((-4.0)*cj11*r11*sj12*sj13))))))+(((htj15*htj15*htj15*htj15*htj15*htj15)*(((((4.0)*cj11*cj12*cj14*r10*sj13))+(((-4.0)*cj12*r11*sj11*sj13))+(((4.0)*cj11*cj12*cj13*r11))+(((4.0)*cj12*cj13*cj14*r10*sj11))+(((4.0)*cj11*cj13*cj14*r10*sj12))+(((-4.0)*cj13*r11*sj11*sj12))+(((-4.0)*cj14*r10*sj11*sj12*sj13))+(((-4.0)*cj11*r11*sj12*sj13))))))+(((-4.0)*cj12*cj13*cj14*r10*sj11))+(((htj15*htj15*htj15*htj15*htj15)*(((((8.0)*cj11*cj12*cj14*r11*sj13))+(((8.0)*cj12*cj13*cj14*r11*sj11))+(((-8.0)*cj11*cj12*cj13*r10))+(((8.0)*cj11*cj13*cj14*r11*sj12))+(((8.0)*cj13*r10*sj11*sj12))+(((8.0)*cj11*r10*sj12*sj13))+(((-8.0)*cj14*r11*sj11*sj12*sj13))+(((8.0)*cj12*r10*sj11*sj13))))))+(((htj15*htj15)*(((((4.0)*cj14*r10*sj11*sj12*sj13))+(((4.0)*cj13*r11*sj11*sj12))+(((-4.0)*cj11*cj13*cj14*r10*sj12))+(((4.0)*cj11*r11*sj12*sj13))+(((-4.0)*cj11*cj12*cj13*r11))+(((-4.0)*cj12*cj13*cj14*r10*sj11))+(((-4.0)*cj11*cj12*cj14*r10*sj13))+(((4.0)*cj12*r11*sj11*sj13))))))+((htj15*(((((8.0)*cj11*cj12*cj14*r11*sj13))+(((8.0)*cj12*cj13*cj14*r11*sj11))+(((-8.0)*cj11*cj12*cj13*r10))+(((8.0)*cj11*cj13*cj14*r11*sj12))+(((8.0)*cj13*r10*sj11*sj12))+(((8.0)*cj11*r10*sj12*sj13))+(((-8.0)*cj14*r11*sj11*sj12*sj13))+(((8.0)*cj12*r10*sj11*sj13))))))+(((-4.0)*cj11*cj12*cj14*r10*sj13))+(((4.0)*cj12*r11*sj11*sj13))+(((htj15*htj15*htj15)*(((((16.0)*cj11*r10*sj12*sj13))+(((-16.0)*cj11*cj12*cj13*r10))+(((16.0)*cj11*cj13*cj14*r11*sj12))+(((16.0)*cj11*cj12*cj14*r11*sj13))+(((16.0)*cj13*r10*sj11*sj12))+(((-16.0)*cj14*r11*sj11*sj12*sj13))+(((16.0)*cj12*cj13*cj14*r11*sj11))+(((16.0)*cj12*r10*sj11*sj13)))))));
if( IKabs(j15evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < numsolutions; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1285=(cj15*sj14);
IkReal x1286=(sj14*sj15);
if( IKabs((((r01*x1286))+(((-1.0)*r00*x1285)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1285))+(((-1.0)*r11*x1286)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1286))+(((-1.0)*r00*x1285))))+IKsqr((((r10*x1285))+(((-1.0)*r11*x1286))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r01*x1286))+(((-1.0)*r00*x1285))), (((r10*x1285))+(((-1.0)*r11*x1286))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x1287=IKcos(j10);
IkReal x1288=IKsin(j10);
IkReal x1289=(sj11*sj12);
IkReal x1290=(sj13*sj15);
IkReal x1291=(cj14*r01);
IkReal x1292=(cj13*sj15);
IkReal x1293=(cj15*r01);
IkReal x1294=(sj14*sj15);
IkReal x1295=(cj14*r11);
IkReal x1296=((1.0)*sj12);
IkReal x1297=(cj15*r11);
IkReal x1298=((0.08535)*sj15);
IkReal x1299=((1.0)*cj12);
IkReal x1300=(cj11*x1288);
IkReal x1301=((0.21325)*x1287);
IkReal x1302=((1.0)*cj15*sj14);
IkReal x1303=(cj11*x1287);
IkReal x1304=(cj14*cj15*sj13);
IkReal x1305=(x1287*x1299);
IkReal x1306=((1.0)*cj13*cj14*cj15);
evalcond[0]=(x1287+(((-1.0)*r10*x1302))+((r11*x1294)));
evalcond[1]=((((-1.0)*x1288))+(((-1.0)*r00*x1302))+((r01*x1294)));
evalcond[2]=(((sj13*x1293))+(((-1.0)*r00*x1306))+(((-1.0)*x1299*x1303))+((x1291*x1292))+((x1287*x1289))+((r00*x1290)));
evalcond[3]=(((x1288*x1289))+((sj13*x1297))+(((-1.0)*x1299*x1300))+(((-1.0)*r10*x1306))+((r10*x1290))+((x1292*x1295)));
evalcond[4]=((((-1.0)*x1296*x1303))+(((-1.0)*x1290*x1291))+((cj13*x1293))+(((-1.0)*sj11*x1305))+((r00*x1292))+((r00*x1304)));
evalcond[5]=(((r10*x1304))+(((-1.0)*x1296*x1300))+(((-1.0)*x1290*x1295))+((cj13*x1297))+(((-1.0)*sj11*x1288*x1299))+((r10*x1292)));
evalcond[6]=((((-1.0)*r00*x1298))+((cj11*cj12*x1301))+(((-0.08535)*x1293))+(((-1.0)*px))+(((-0.11235)*x1288))+(((0.24365)*x1303))+(((-1.0)*x1289*x1301)));
evalcond[7]=((((0.21325)*cj12*x1300))+(((-0.21325)*x1288*x1289))+(((-0.08535)*x1297))+(((-1.0)*py))+(((0.24365)*x1300))+(((-1.0)*r10*x1298))+(((0.11235)*x1287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10, j14, j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j15array[2], cj15array[2], sj15array[2];
bool j15valid[2]={false};
_nj15 = 2;
CheckValue<IkReal> x1309 = IKatan2WithCheck(IkReal(((-0.08535)*r21)),IkReal(((-0.08535)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1309.valid){
continue;
}
IkReal x1307=((1.0)*(x1309.value));
if((((((0.0072846225)*(r21*r21)))+(((0.0072846225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1310=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0072846225)*(r21*r21)))+(((0.0072846225)*(r20*r20)))))),-1);
if(!x1310.valid){
continue;
}
if( (((-1.0)*(x1310.value)*(((((-0.24365)*sj11))+(((-1.0)*pz))+(((-0.21325)*cj11*sj12))+(((-0.21325)*cj12*sj11)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1310.value)*(((((-0.24365)*sj11))+(((-1.0)*pz))+(((-0.21325)*cj11*sj12))+(((-0.21325)*cj12*sj11)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1308=((-1.0)*(IKasin(((-1.0)*(x1310.value)*(((((-0.24365)*sj11))+(((-1.0)*pz))+(((-0.21325)*cj11*sj12))+(((-0.21325)*cj12*sj11))))))));
j15array[0]=((((-1.0)*x1307))+(((-1.0)*x1308)));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
j15array[1]=((3.14159265358979)+(((-1.0)*x1307))+(((1.0)*x1308)));
sj15array[1]=IKsin(j15array[1]);
cj15array[1]=IKcos(j15array[1]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
if( j15array[1] > IKPI )
{
    j15array[1]-=IK2PI;
}
else if( j15array[1] < -IKPI )
{    j15array[1]+=IK2PI;
}
j15valid[1] = true;
for(int ij15 = 0; ij15 < 2; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 2; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IkReal j14eval[2];
IkReal x1311=cj15*cj15;
IkReal x1312=r21*r21;
IkReal x1313=(sj13*x1312);
IkReal x1314=(x1313+((sj13*(r22*r22)))+(((-1.0)*x1311*x1313))+(((-2.0)*cj15*r20*r21*sj13*sj15))+((sj13*x1311*(r20*r20))));
j14eval[0]=x1314;
j14eval[1]=IKsign(x1314);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x1315=r21*r21;
IkReal x1316=cj15*cj15;
IkReal x1317=((1.0)*cj13);
IkReal x1318=((((-1.0)*x1315*x1317))+(((2.0)*cj13*cj15*r20*r21*sj15))+(((-1.0)*x1316*x1317*(r20*r20)))+(((-1.0)*x1317*(r22*r22)))+((cj13*x1315*x1316)));
j14eval[0]=x1318;
j14eval[1]=IKsign(x1318);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
IkReal x1319=cj11*cj11;
IkReal x1320=cj12*cj12;
IkReal x1321=(cj12*x1319);
IkReal x1322=(cj11*sj11*sj12);
IkReal x1323=(cj12*x1322);
IkReal x1324=(x1319*x1320);
j10eval[0]=((4.18279977479812)+(((-7.48153495812743)*x1322))+x1319+(((6.54807030503047)*x1324))+(((7.48153495812743)*x1321))+(((-6.54807030503047)*x1323))+(((-3.27403515251523)*x1320)));
j10eval[1]=IKsign(((23239234.0)+(((5555904.0)*x1319))+(((-41566690.0)*x1322))+(((41566690.0)*x1321))+(((-18190225.0)*x1320))+(((36380450.0)*x1324))+(((-36380450.0)*x1323))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x1325=((1.0)*cj15);
IkReal x1326=((1.0)*sj15);
IkReal x1327=(((sj11*sj12))+(((-1.0)*cj11*cj12)));
j10eval[0]=x1327;
j10eval[1]=IKsign(x1327);
j10eval[2]=((IKabs(((((-1.0)*r11*x1325))+(((-1.0)*r10*x1326)))))+(IKabs(((((-1.0)*r01*x1325))+(((-1.0)*r00*x1326))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x1328=cj15*cj15;
IkReal x1329=r21*r21;
IkReal x1330=(cj11*cj12);
IkReal x1331=(r21*sj15);
IkReal x1332=(cj15*r20);
IkReal x1333=(sj11*sj12);
IkReal x1334=(x1329+(r22*r22)+(((-2.0)*x1331*x1332))+((x1328*(r20*r20)))+(((-1.0)*x1328*x1329)));
j14eval[0]=x1334;
j14eval[1]=((IKabs(((((-1.0)*r22*x1330))+((r22*x1333)))))+(IKabs((((x1331*x1333))+(((-1.0)*x1332*x1333))+(((-1.0)*x1330*x1331))+((x1330*x1332))))));
j14eval[2]=IKsign(x1334);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j10eval[0]=(((sj11*sj12))+(((-1.0)*cj11*cj12)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((3.3845991639283)*py))))+IKsqr(((((3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.56068013982083)*px))+(((3.3845991639283)*py))), ((((3.3845991639283)*px))+(((1.56068013982083)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x1335=IKsin(j10);
IkReal x1336=IKcos(j10);
evalcond[0]=((((-1.0)*px))+(((0.24365)*x1336))+(((-0.11235)*x1335)));
evalcond[1]=((((-1.0)*py))+(((0.24365)*x1335))+(((0.11235)*x1336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x1337=((1.0)*cj15);
IkReal x1338=((((-1.0)*r00*sj15))+(((-1.0)*r01*x1337)));
j14eval[0]=x1338;
j14eval[1]=((IKabs((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x1337)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x1338);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x1339=((1.0)*cj15);
IkReal x1340=((((-1.0)*r10*sj15))+(((-1.0)*r11*x1339)));
j14eval[0]=x1340;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x1339))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x1340);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x1341=cj15*cj15;
IkReal x1342=(r11*r21);
IkReal x1343=(cj15*r20);
IkReal x1344=((1.0)*r21*sj15);
IkReal x1345=(x1342+(((-1.0)*x1341*x1342))+((r12*r22))+((r10*r20*x1341))+(((-1.0)*r11*sj15*x1343))+(((-1.0)*cj15*r10*x1344)));
j14eval[0]=x1345;
j14eval[1]=IKsign(x1345);
j14eval[2]=((IKabs(((((-1.0)*cj10*x1344))+((cj10*x1343)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1346=cj15*cj15;
IkReal x1347=(cj15*r20);
IkReal x1348=(r11*r21);
IkReal x1349=((1.0)*r21*sj15);
CheckValue<IkReal> x1350=IKPowWithIntegerCheck(IKsign((x1348+(((-1.0)*x1346*x1348))+((r12*r22))+((r10*r20*x1346))+(((-1.0)*r11*sj15*x1347))+(((-1.0)*cj15*r10*x1349)))),-1);
if(!x1350.valid){
continue;
}
CheckValue<IkReal> x1351 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*x1349))+((cj10*x1347)))),IkReal((cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1351.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1350.value)))+(x1351.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1352=IKsin(j14);
IkReal x1353=IKcos(j14);
IkReal x1354=((1.0)*sj10);
IkReal x1355=(sj15*x1352);
IkReal x1356=((1.0)*x1353);
IkReal x1357=((1.0)*x1352);
IkReal x1358=(cj15*x1353);
IkReal x1359=(cj15*x1357);
evalcond[0]=((((-1.0)*r20*x1359))+(((-1.0)*r22*x1356))+((r21*x1355)));
evalcond[1]=((((-1.0)*r21*sj15*x1356))+(((-1.0)*r22*x1357))+((r20*x1358)));
evalcond[2]=((((-1.0)*r10*x1359))+(((-1.0)*r12*x1356))+cj10+((r11*x1355)));
evalcond[3]=((((-1.0)*x1354))+(((-1.0)*r02*x1356))+(((-1.0)*r00*x1359))+((r01*x1355)));
evalcond[4]=((((-1.0)*r02*x1357))+((r00*x1358))+(((-1.0)*cj10))+(((-1.0)*r01*sj15*x1356)));
evalcond[5]=((((-1.0)*x1354))+(((-1.0)*r12*x1357))+((r10*x1358))+(((-1.0)*r11*sj15*x1356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1360=((1.0)*cj15);
CheckValue<IkReal> x1361 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x1360))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1361.valid){
continue;
}
CheckValue<IkReal> x1362=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1360))+(((-1.0)*r10*sj15)))),-1);
if(!x1362.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1361.value)+(((1.5707963267949)*(x1362.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1363=IKsin(j14);
IkReal x1364=IKcos(j14);
IkReal x1365=((1.0)*sj10);
IkReal x1366=(sj15*x1363);
IkReal x1367=((1.0)*x1364);
IkReal x1368=((1.0)*x1363);
IkReal x1369=(cj15*x1364);
IkReal x1370=(cj15*x1368);
evalcond[0]=((((-1.0)*r20*x1370))+(((-1.0)*r22*x1367))+((r21*x1366)));
evalcond[1]=((((-1.0)*r22*x1368))+((r20*x1369))+(((-1.0)*r21*sj15*x1367)));
evalcond[2]=((((-1.0)*r12*x1367))+cj10+(((-1.0)*r10*x1370))+((r11*x1366)));
evalcond[3]=((((-1.0)*r00*x1370))+(((-1.0)*r02*x1367))+((r01*x1366))+(((-1.0)*x1365)));
evalcond[4]=((((-1.0)*r02*x1368))+(((-1.0)*cj10))+((r00*x1369))+(((-1.0)*r01*sj15*x1367)));
evalcond[5]=(((r10*x1369))+(((-1.0)*r12*x1368))+(((-1.0)*r11*sj15*x1367))+(((-1.0)*x1365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1371=((1.0)*cj15);
CheckValue<IkReal> x1372 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x1371))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1372.valid){
continue;
}
CheckValue<IkReal> x1373=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1371))+(((-1.0)*r00*sj15)))),-1);
if(!x1373.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1372.value)+(((1.5707963267949)*(x1373.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1374=IKsin(j14);
IkReal x1375=IKcos(j14);
IkReal x1376=((1.0)*sj10);
IkReal x1377=(sj15*x1374);
IkReal x1378=((1.0)*x1375);
IkReal x1379=((1.0)*x1374);
IkReal x1380=(cj15*x1375);
IkReal x1381=(cj15*x1379);
evalcond[0]=((((-1.0)*r20*x1381))+(((-1.0)*r22*x1378))+((r21*x1377)));
evalcond[1]=((((-1.0)*r22*x1379))+((r20*x1380))+(((-1.0)*r21*sj15*x1378)));
evalcond[2]=(((r11*x1377))+cj10+(((-1.0)*r10*x1381))+(((-1.0)*r12*x1378)));
evalcond[3]=((((-1.0)*r00*x1381))+(((-1.0)*r02*x1378))+(((-1.0)*x1376))+((r01*x1377)));
evalcond[4]=((((-1.0)*r02*x1379))+((r00*x1380))+(((-1.0)*cj10))+(((-1.0)*r01*sj15*x1378)));
evalcond[5]=(((r10*x1380))+(((-1.0)*x1376))+(((-1.0)*r12*x1379))+(((-1.0)*r11*sj15*x1378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((3.3845991639283)*py))))+IKsqr(((((3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.56068013982083)*px))+(((3.3845991639283)*py))), ((((3.3845991639283)*px))+(((1.56068013982083)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x1382=IKsin(j10);
IkReal x1383=IKcos(j10);
evalcond[0]=((((-0.11235)*x1382))+(((-1.0)*px))+(((0.24365)*x1383)));
evalcond[1]=((((0.11235)*x1383))+(((-1.0)*py))+(((0.24365)*x1382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x1384=((1.0)*cj15);
IkReal x1385=((((-1.0)*r01*x1384))+(((-1.0)*r00*sj15)));
j14eval[0]=x1385;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x1384))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x1385);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x1386=cj15*cj15;
IkReal x1387=(r01*r21);
IkReal x1388=((1.0)*cj15*sj15);
IkReal x1389=(x1387+(((-1.0)*r01*r20*x1388))+(((-1.0)*x1386*x1387))+(((-1.0)*r00*r21*x1388))+((r02*r22))+((r00*r20*x1386)));
j14eval[0]=x1389;
j14eval[1]=IKsign(x1389);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x1390=cj15*cj15;
IkReal x1391=(r21*sj15);
IkReal x1392=(r11*r21);
IkReal x1393=((1.0)*cj15);
IkReal x1394=(x1392+(((-1.0)*r10*x1391*x1393))+(((-1.0)*x1390*x1392))+((r12*r22))+((r10*r20*x1390))+(((-1.0)*r11*r20*sj15*x1393)));
j14eval[0]=x1394;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x1393))+((sj10*x1391)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x1394);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1395=cj15*cj15;
IkReal x1396=(r21*sj15);
IkReal x1397=((1.0)*cj15);
IkReal x1398=(r11*r21);
CheckValue<IkReal> x1399=IKPowWithIntegerCheck(IKsign((x1398+(((-1.0)*r10*x1396*x1397))+((r12*r22))+((r10*r20*x1395))+(((-1.0)*r11*r20*sj15*x1397))+(((-1.0)*x1395*x1398)))),-1);
if(!x1399.valid){
continue;
}
CheckValue<IkReal> x1400 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x1397))+((sj10*x1396)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1400.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1399.value)))+(x1400.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1401=IKsin(j14);
IkReal x1402=IKcos(j14);
IkReal x1403=(sj15*x1401);
IkReal x1404=((1.0)*x1402);
IkReal x1405=((1.0)*x1401);
IkReal x1406=(cj15*x1402);
IkReal x1407=(cj15*x1405);
evalcond[0]=((((-1.0)*r22*x1404))+((r21*x1403))+(((-1.0)*r20*x1407)));
evalcond[1]=((((-1.0)*r22*x1405))+((r20*x1406))+(((-1.0)*r21*sj15*x1404)));
evalcond[2]=((((-1.0)*r12*x1404))+((r11*x1403))+cj10+(((-1.0)*r10*x1407)));
evalcond[3]=(((r00*x1406))+(((-1.0)*r02*x1405))+cj10+(((-1.0)*r01*sj15*x1404)));
evalcond[4]=((((-1.0)*r12*x1405))+sj10+(((-1.0)*r11*sj15*x1404))+((r10*x1406)));
evalcond[5]=((((-1.0)*r00*x1407))+(((-1.0)*r02*x1404))+((r01*x1403))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1408=cj15*cj15;
IkReal x1409=(r01*r21);
IkReal x1410=((1.0)*cj15*sj15);
CheckValue<IkReal> x1411 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1411.valid){
continue;
}
CheckValue<IkReal> x1412=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1408*x1409))+(((-1.0)*r01*r20*x1410))+x1409+((r00*r20*x1408))+((r02*r22))+(((-1.0)*r00*r21*x1410)))),-1);
if(!x1412.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1411.value)+(((1.5707963267949)*(x1412.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1413=IKsin(j14);
IkReal x1414=IKcos(j14);
IkReal x1415=(sj15*x1413);
IkReal x1416=((1.0)*x1414);
IkReal x1417=((1.0)*x1413);
IkReal x1418=(cj15*x1414);
IkReal x1419=(cj15*x1417);
evalcond[0]=(((r21*x1415))+(((-1.0)*r22*x1416))+(((-1.0)*r20*x1419)));
evalcond[1]=(((r20*x1418))+(((-1.0)*r21*sj15*x1416))+(((-1.0)*r22*x1417)));
evalcond[2]=((((-1.0)*r10*x1419))+cj10+((r11*x1415))+(((-1.0)*r12*x1416)));
evalcond[3]=((((-1.0)*r02*x1417))+cj10+((r00*x1418))+(((-1.0)*r01*sj15*x1416)));
evalcond[4]=((((-1.0)*r11*sj15*x1416))+sj10+(((-1.0)*r12*x1417))+((r10*x1418)));
evalcond[5]=((((-1.0)*r02*x1416))+((r01*x1415))+(((-1.0)*sj10))+(((-1.0)*r00*x1419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1420=((1.0)*cj15);
CheckValue<IkReal> x1421 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x1420)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1421.valid){
continue;
}
CheckValue<IkReal> x1422=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x1420)))),-1);
if(!x1422.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1421.value)+(((1.5707963267949)*(x1422.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1423=IKsin(j14);
IkReal x1424=IKcos(j14);
IkReal x1425=(sj15*x1423);
IkReal x1426=((1.0)*x1424);
IkReal x1427=((1.0)*x1423);
IkReal x1428=(cj15*x1424);
IkReal x1429=(cj15*x1427);
evalcond[0]=(((r21*x1425))+(((-1.0)*r20*x1429))+(((-1.0)*r22*x1426)));
evalcond[1]=((((-1.0)*r21*sj15*x1426))+(((-1.0)*r22*x1427))+((r20*x1428)));
evalcond[2]=(((r11*x1425))+(((-1.0)*r10*x1429))+cj10+(((-1.0)*r12*x1426)));
evalcond[3]=(((r00*x1428))+(((-1.0)*r01*sj15*x1426))+cj10+(((-1.0)*r02*x1427)));
evalcond[4]=((((-1.0)*r11*sj15*x1426))+(((-1.0)*r12*x1427))+((r10*x1428))+sj10);
evalcond[5]=(((r01*x1425))+(((-1.0)*sj10))+(((-1.0)*r02*x1426))+(((-1.0)*r00*x1429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
evalcond[0]=((((-0.11235)*(IKsin(j10))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x1430=((1.0)*cj15);
IkReal x1431=((((-1.0)*r01*x1430))+(((-1.0)*r00*sj15)));
j14eval[0]=x1431;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x1430))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x1431);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x1432=((1.0)*cj15);
IkReal x1433=((((-1.0)*r11*x1432))+(((-1.0)*r10*sj15)));
j14eval[0]=x1433;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x1432))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x1433);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x1434=cj15*cj15;
IkReal x1435=(r11*r21);
IkReal x1436=(cj15*r20);
IkReal x1437=((1.0)*r21*sj15);
IkReal x1438=(((r10*r20*x1434))+((r12*r22))+(((-1.0)*cj15*r10*x1437))+(((-1.0)*x1434*x1435))+(((-1.0)*r11*sj15*x1436))+x1435);
j14eval[0]=x1438;
j14eval[1]=IKsign(x1438);
j14eval[2]=((IKabs((((cj10*x1436))+(((-1.0)*cj10*x1437)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1439=cj15*cj15;
IkReal x1440=(cj15*r20);
IkReal x1441=(r11*r21);
IkReal x1442=((1.0)*r21*sj15);
CheckValue<IkReal> x1443=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj15*r10*x1442))+((r10*r20*x1439))+((r12*r22))+(((-1.0)*x1439*x1441))+x1441+(((-1.0)*r11*sj15*x1440)))),-1);
if(!x1443.valid){
continue;
}
CheckValue<IkReal> x1444 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*x1442))+((cj10*x1440)))),IkReal((cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1444.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1443.value)))+(x1444.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1445=IKsin(j14);
IkReal x1446=IKcos(j14);
IkReal x1447=((1.0)*sj10);
IkReal x1448=(sj15*x1445);
IkReal x1449=((1.0)*x1446);
IkReal x1450=((1.0)*x1445);
IkReal x1451=(cj15*x1446);
IkReal x1452=(cj15*x1450);
evalcond[0]=((((-1.0)*r20*x1452))+(((-1.0)*r22*x1449))+((r21*x1448)));
evalcond[1]=((((-1.0)*r22*x1450))+((r20*x1451))+(((-1.0)*r21*sj15*x1449)));
evalcond[2]=(((r11*x1448))+(((-1.0)*r12*x1449))+cj10+(((-1.0)*r10*x1452)));
evalcond[3]=((((-1.0)*r00*x1452))+(((-1.0)*x1447))+(((-1.0)*r02*x1449))+((r01*x1448)));
evalcond[4]=((((-1.0)*r01*sj15*x1449))+(((-1.0)*r02*x1450))+((r00*x1451))+(((-1.0)*cj10)));
evalcond[5]=(((r10*x1451))+(((-1.0)*r11*sj15*x1449))+(((-1.0)*x1447))+(((-1.0)*r12*x1450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1453=((1.0)*cj15);
CheckValue<IkReal> x1454=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj15))+(((-1.0)*r11*x1453)))),-1);
if(!x1454.valid){
continue;
}
CheckValue<IkReal> x1455 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x1453))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1455.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1454.value)))+(x1455.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1456=IKsin(j14);
IkReal x1457=IKcos(j14);
IkReal x1458=((1.0)*sj10);
IkReal x1459=(sj15*x1456);
IkReal x1460=((1.0)*x1457);
IkReal x1461=((1.0)*x1456);
IkReal x1462=(cj15*x1457);
IkReal x1463=(cj15*x1461);
evalcond[0]=((((-1.0)*r22*x1460))+(((-1.0)*r20*x1463))+((r21*x1459)));
evalcond[1]=(((r20*x1462))+(((-1.0)*r22*x1461))+(((-1.0)*r21*sj15*x1460)));
evalcond[2]=(((r11*x1459))+cj10+(((-1.0)*r12*x1460))+(((-1.0)*r10*x1463)));
evalcond[3]=((((-1.0)*r02*x1460))+(((-1.0)*x1458))+(((-1.0)*r00*x1463))+((r01*x1459)));
evalcond[4]=((((-1.0)*r02*x1461))+((r00*x1462))+(((-1.0)*r01*sj15*x1460))+(((-1.0)*cj10)));
evalcond[5]=((((-1.0)*x1458))+((r10*x1462))+(((-1.0)*r12*x1461))+(((-1.0)*r11*sj15*x1460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1464=((1.0)*cj15);
CheckValue<IkReal> x1465=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1464))+(((-1.0)*r00*sj15)))),-1);
if(!x1465.valid){
continue;
}
CheckValue<IkReal> x1466 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x1464))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1466.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1465.value)))+(x1466.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1467=IKsin(j14);
IkReal x1468=IKcos(j14);
IkReal x1469=((1.0)*sj10);
IkReal x1470=(sj15*x1467);
IkReal x1471=((1.0)*x1468);
IkReal x1472=((1.0)*x1467);
IkReal x1473=(cj15*x1468);
IkReal x1474=(cj15*x1472);
evalcond[0]=((((-1.0)*r22*x1471))+(((-1.0)*r20*x1474))+((r21*x1470)));
evalcond[1]=((((-1.0)*r22*x1472))+((r20*x1473))+(((-1.0)*r21*sj15*x1471)));
evalcond[2]=(((r11*x1470))+(((-1.0)*r10*x1474))+(((-1.0)*r12*x1471))+cj10);
evalcond[3]=((((-1.0)*r00*x1474))+(((-1.0)*x1469))+(((-1.0)*r02*x1471))+((r01*x1470)));
evalcond[4]=((((-1.0)*r01*sj15*x1471))+(((-1.0)*r02*x1472))+(((-1.0)*cj10))+((r00*x1473)));
evalcond[5]=(((r10*x1473))+(((-1.0)*x1469))+(((-1.0)*r12*x1472))+(((-1.0)*r11*sj15*x1471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
evalcond[0]=((((-0.11235)*(IKsin(j10))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x1475=((1.0)*cj15);
IkReal x1476=((((-1.0)*r01*x1475))+(((-1.0)*r00*sj15)));
j14eval[0]=x1476;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x1475))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x1476);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x1477=cj15*cj15;
IkReal x1478=(r01*r21);
IkReal x1479=((1.0)*cj15*sj15);
IkReal x1480=((((-1.0)*x1477*x1478))+x1478+(((-1.0)*r00*r21*x1479))+(((-1.0)*r01*r20*x1479))+((r02*r22))+((r00*r20*x1477)));
j14eval[0]=x1480;
j14eval[1]=IKsign(x1480);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x1481=cj15*cj15;
IkReal x1482=(r21*sj15);
IkReal x1483=(r11*r21);
IkReal x1484=((1.0)*cj15);
IkReal x1485=(((r12*r22))+(((-1.0)*x1481*x1483))+x1483+(((-1.0)*r10*x1482*x1484))+(((-1.0)*r11*r20*sj15*x1484))+((r10*r20*x1481)));
j14eval[0]=x1485;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x1484))+((sj10*x1482)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x1485);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1486=cj15*cj15;
IkReal x1487=(r21*sj15);
IkReal x1488=((1.0)*cj15);
IkReal x1489=(r11*r21);
CheckValue<IkReal> x1490 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x1488))+((sj10*x1487)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1490.valid){
continue;
}
CheckValue<IkReal> x1491=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x1487*x1488))+((r12*r22))+(((-1.0)*x1486*x1489))+x1489+(((-1.0)*r11*r20*sj15*x1488))+((r10*r20*x1486)))),-1);
if(!x1491.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1490.value)+(((1.5707963267949)*(x1491.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1492=IKsin(j14);
IkReal x1493=IKcos(j14);
IkReal x1494=(sj15*x1492);
IkReal x1495=((1.0)*x1493);
IkReal x1496=((1.0)*x1492);
IkReal x1497=(cj15*x1493);
IkReal x1498=(cj15*x1496);
evalcond[0]=((((-1.0)*r20*x1498))+((r21*x1494))+(((-1.0)*r22*x1495)));
evalcond[1]=(((r20*x1497))+(((-1.0)*r22*x1496))+(((-1.0)*r21*sj15*x1495)));
evalcond[2]=((((-1.0)*r12*x1495))+((r11*x1494))+cj10+(((-1.0)*r10*x1498)));
evalcond[3]=((((-1.0)*r01*sj15*x1495))+((r00*x1497))+cj10+(((-1.0)*r02*x1496)));
evalcond[4]=(((r10*x1497))+(((-1.0)*r12*x1496))+(((-1.0)*r11*sj15*x1495))+sj10);
evalcond[5]=((((-1.0)*r00*x1498))+((r01*x1494))+(((-1.0)*r02*x1495))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1499=cj15*cj15;
IkReal x1500=(r01*r21);
IkReal x1501=((1.0)*cj15*sj15);
CheckValue<IkReal> x1502 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1502.valid){
continue;
}
CheckValue<IkReal> x1503=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r20*x1501))+x1500+((r00*r20*x1499))+(((-1.0)*r00*r21*x1501))+((r02*r22))+(((-1.0)*x1499*x1500)))),-1);
if(!x1503.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1502.value)+(((1.5707963267949)*(x1503.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1504=IKsin(j14);
IkReal x1505=IKcos(j14);
IkReal x1506=(sj15*x1504);
IkReal x1507=((1.0)*x1505);
IkReal x1508=((1.0)*x1504);
IkReal x1509=(cj15*x1505);
IkReal x1510=(cj15*x1508);
evalcond[0]=((((-1.0)*r20*x1510))+(((-1.0)*r22*x1507))+((r21*x1506)));
evalcond[1]=((((-1.0)*r22*x1508))+((r20*x1509))+(((-1.0)*r21*sj15*x1507)));
evalcond[2]=(((r11*x1506))+cj10+(((-1.0)*r10*x1510))+(((-1.0)*r12*x1507)));
evalcond[3]=(((r00*x1509))+cj10+(((-1.0)*r02*x1508))+(((-1.0)*r01*sj15*x1507)));
evalcond[4]=(((r10*x1509))+sj10+(((-1.0)*r11*sj15*x1507))+(((-1.0)*r12*x1508)));
evalcond[5]=((((-1.0)*r00*x1510))+((r01*x1506))+(((-1.0)*r02*x1507))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1511=((1.0)*cj15);
CheckValue<IkReal> x1512=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1511))+(((-1.0)*r00*sj15)))),-1);
if(!x1512.valid){
continue;
}
CheckValue<IkReal> x1513 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x1511))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1513.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1512.value)))+(x1513.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1514=IKsin(j14);
IkReal x1515=IKcos(j14);
IkReal x1516=(sj15*x1514);
IkReal x1517=((1.0)*x1515);
IkReal x1518=((1.0)*x1514);
IkReal x1519=(cj15*x1515);
IkReal x1520=(cj15*x1518);
evalcond[0]=((((-1.0)*r22*x1517))+((r21*x1516))+(((-1.0)*r20*x1520)));
evalcond[1]=((((-1.0)*r22*x1518))+((r20*x1519))+(((-1.0)*r21*sj15*x1517)));
evalcond[2]=(((r11*x1516))+cj10+(((-1.0)*r10*x1520))+(((-1.0)*r12*x1517)));
evalcond[3]=(((r00*x1519))+cj10+(((-1.0)*r02*x1518))+(((-1.0)*r01*sj15*x1517)));
evalcond[4]=(((r10*x1519))+sj10+(((-1.0)*r11*sj15*x1517))+(((-1.0)*r12*x1518)));
evalcond[5]=((((-1.0)*r00*x1520))+((r01*x1516))+(((-1.0)*r02*x1517))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((-3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))))+IKsqr(((((-3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))), ((((-3.3845991639283)*px))+(((1.56068013982083)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x1521=IKcos(j10);
IkReal x1522=IKsin(j10);
evalcond[0]=((((-1.0)*px))+(((-0.11235)*x1522))+(((-0.24365)*x1521)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*x1521))+(((-0.24365)*x1522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x1523=((1.0)*cj15);
IkReal x1524=((((-1.0)*r01*x1523))+(((-1.0)*r00*sj15)));
j14eval[0]=x1524;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x1523))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x1524);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x1525=cj15*cj15;
IkReal x1526=(r01*r21);
IkReal x1527=((1.0)*cj15*sj15);
IkReal x1528=(((r00*r20*x1525))+(((-1.0)*x1525*x1526))+x1526+((r02*r22))+(((-1.0)*r00*r21*x1527))+(((-1.0)*r01*r20*x1527)));
j14eval[0]=x1528;
j14eval[1]=IKsign(x1528);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x1529=cj15*cj15;
IkReal x1530=(r21*sj15);
IkReal x1531=(r11*r21);
IkReal x1532=((1.0)*cj15);
IkReal x1533=((((-1.0)*x1529*x1531))+(((-1.0)*r11*r20*sj15*x1532))+((r12*r22))+x1531+(((-1.0)*r10*x1530*x1532))+((r10*r20*x1529)));
j14eval[0]=x1533;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x1532))+((sj10*x1530)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x1533);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1534=cj15*cj15;
IkReal x1535=(r21*sj15);
IkReal x1536=((1.0)*cj15);
IkReal x1537=(r11*r21);
CheckValue<IkReal> x1538=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*r20*sj15*x1536))+((r12*r22))+x1537+(((-1.0)*r10*x1535*x1536))+(((-1.0)*x1534*x1537))+((r10*r20*x1534)))),-1);
if(!x1538.valid){
continue;
}
CheckValue<IkReal> x1539 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x1536))+((sj10*x1535)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1539.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1538.value)))+(x1539.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1540=IKsin(j14);
IkReal x1541=IKcos(j14);
IkReal x1542=(sj15*x1540);
IkReal x1543=((1.0)*x1541);
IkReal x1544=((1.0)*x1540);
IkReal x1545=(cj15*x1541);
IkReal x1546=(cj15*x1544);
evalcond[0]=((((-1.0)*r22*x1543))+((r21*x1542))+(((-1.0)*r20*x1546)));
evalcond[1]=((((-1.0)*r21*sj15*x1543))+(((-1.0)*r22*x1544))+((r20*x1545)));
evalcond[2]=(cj10+((r11*x1542))+(((-1.0)*r10*x1546))+(((-1.0)*r12*x1543)));
evalcond[3]=((((-1.0)*r02*x1544))+cj10+(((-1.0)*r01*sj15*x1543))+((r00*x1545)));
evalcond[4]=((((-1.0)*r11*sj15*x1543))+sj10+((r10*x1545))+(((-1.0)*r12*x1544)));
evalcond[5]=((((-1.0)*r02*x1543))+(((-1.0)*sj10))+(((-1.0)*r00*x1546))+((r01*x1542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1547=cj15*cj15;
IkReal x1548=(r01*r21);
IkReal x1549=((1.0)*cj15*sj15);
CheckValue<IkReal> x1550 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1550.valid){
continue;
}
CheckValue<IkReal> x1551=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r21*x1549))+(((-1.0)*x1547*x1548))+(((-1.0)*r01*r20*x1549))+((r00*r20*x1547))+x1548+((r02*r22)))),-1);
if(!x1551.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1550.value)+(((1.5707963267949)*(x1551.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1552=IKsin(j14);
IkReal x1553=IKcos(j14);
IkReal x1554=(sj15*x1552);
IkReal x1555=((1.0)*x1553);
IkReal x1556=((1.0)*x1552);
IkReal x1557=(cj15*x1553);
IkReal x1558=(cj15*x1556);
evalcond[0]=((((-1.0)*r22*x1555))+(((-1.0)*r20*x1558))+((r21*x1554)));
evalcond[1]=((((-1.0)*r22*x1556))+(((-1.0)*r21*sj15*x1555))+((r20*x1557)));
evalcond[2]=(((r11*x1554))+cj10+(((-1.0)*r12*x1555))+(((-1.0)*r10*x1558)));
evalcond[3]=(((r00*x1557))+(((-1.0)*r02*x1556))+cj10+(((-1.0)*r01*sj15*x1555)));
evalcond[4]=((((-1.0)*r11*sj15*x1555))+sj10+(((-1.0)*r12*x1556))+((r10*x1557)));
evalcond[5]=(((r01*x1554))+(((-1.0)*r02*x1555))+(((-1.0)*sj10))+(((-1.0)*r00*x1558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1559=((1.0)*cj15);
CheckValue<IkReal> x1560=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x1559)))),-1);
if(!x1560.valid){
continue;
}
CheckValue<IkReal> x1561 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x1559))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1561.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1560.value)))+(x1561.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1562=IKsin(j14);
IkReal x1563=IKcos(j14);
IkReal x1564=(sj15*x1562);
IkReal x1565=((1.0)*x1563);
IkReal x1566=((1.0)*x1562);
IkReal x1567=(cj15*x1563);
IkReal x1568=(cj15*x1566);
evalcond[0]=((((-1.0)*r22*x1565))+(((-1.0)*r20*x1568))+((r21*x1564)));
evalcond[1]=((((-1.0)*r21*sj15*x1565))+((r20*x1567))+(((-1.0)*r22*x1566)));
evalcond[2]=(cj10+((r11*x1564))+(((-1.0)*r12*x1565))+(((-1.0)*r10*x1568)));
evalcond[3]=((((-1.0)*r02*x1566))+cj10+(((-1.0)*r01*sj15*x1565))+((r00*x1567)));
evalcond[4]=((((-1.0)*r11*sj15*x1565))+sj10+((r10*x1567))+(((-1.0)*r12*x1566)));
evalcond[5]=((((-1.0)*r02*x1565))+(((-1.0)*sj10))+(((-1.0)*r00*x1568))+((r01*x1564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((-3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))))+IKsqr(((((-3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))), ((((-3.3845991639283)*px))+(((1.56068013982083)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x1569=IKcos(j10);
IkReal x1570=IKsin(j10);
evalcond[0]=((((-0.11235)*x1570))+(((-0.24365)*x1569))+(((-1.0)*px)));
evalcond[1]=((((-0.24365)*x1570))+(((0.11235)*x1569))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x1571=((1.0)*cj15);
IkReal x1572=((((-1.0)*r01*x1571))+(((-1.0)*r00*sj15)));
j14eval[0]=x1572;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x1571))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x1572);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x1573=((1.0)*cj15);
IkReal x1574=((((-1.0)*r11*x1573))+(((-1.0)*r10*sj15)));
j14eval[0]=x1574;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x1573))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x1574);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x1575=cj15*cj15;
IkReal x1576=(r11*r21);
IkReal x1577=(cj15*r20);
IkReal x1578=((1.0)*r21*sj15);
IkReal x1579=((((-1.0)*r11*sj15*x1577))+((r12*r22))+x1576+(((-1.0)*x1575*x1576))+(((-1.0)*cj15*r10*x1578))+((r10*r20*x1575)));
j14eval[0]=x1579;
j14eval[1]=IKsign(x1579);
j14eval[2]=((IKabs((cj10*r22)))+(IKabs((((cj10*x1577))+(((-1.0)*cj10*x1578))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1580=cj15*cj15;
IkReal x1581=(cj15*r20);
IkReal x1582=(r11*r21);
IkReal x1583=((1.0)*r21*sj15);
CheckValue<IkReal> x1584 = IKatan2WithCheck(IkReal((((cj10*x1581))+(((-1.0)*cj10*x1583)))),IkReal((cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1584.valid){
continue;
}
CheckValue<IkReal> x1585=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj15*x1581))+((r10*r20*x1580))+(((-1.0)*cj15*r10*x1583))+((r12*r22))+(((-1.0)*x1580*x1582))+x1582)),-1);
if(!x1585.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1584.value)+(((1.5707963267949)*(x1585.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1586=IKsin(j14);
IkReal x1587=IKcos(j14);
IkReal x1588=((1.0)*sj10);
IkReal x1589=(sj15*x1586);
IkReal x1590=((1.0)*x1587);
IkReal x1591=((1.0)*x1586);
IkReal x1592=(cj15*x1587);
IkReal x1593=(cj15*x1591);
evalcond[0]=((((-1.0)*r22*x1590))+(((-1.0)*r20*x1593))+((r21*x1589)));
evalcond[1]=(((r20*x1592))+(((-1.0)*r22*x1591))+(((-1.0)*r21*sj15*x1590)));
evalcond[2]=(((r11*x1589))+cj10+(((-1.0)*r10*x1593))+(((-1.0)*r12*x1590)));
evalcond[3]=((((-1.0)*x1588))+((r01*x1589))+(((-1.0)*r02*x1590))+(((-1.0)*r00*x1593)));
evalcond[4]=(((r00*x1592))+(((-1.0)*r02*x1591))+(((-1.0)*r01*sj15*x1590))+(((-1.0)*cj10)));
evalcond[5]=((((-1.0)*x1588))+(((-1.0)*r11*sj15*x1590))+((r10*x1592))+(((-1.0)*r12*x1591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1594=((1.0)*cj15);
CheckValue<IkReal> x1595 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x1594))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1595.valid){
continue;
}
CheckValue<IkReal> x1596=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj15))+(((-1.0)*r11*x1594)))),-1);
if(!x1596.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1595.value)+(((1.5707963267949)*(x1596.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1597=IKsin(j14);
IkReal x1598=IKcos(j14);
IkReal x1599=((1.0)*sj10);
IkReal x1600=(sj15*x1597);
IkReal x1601=((1.0)*x1598);
IkReal x1602=((1.0)*x1597);
IkReal x1603=(cj15*x1598);
IkReal x1604=(cj15*x1602);
evalcond[0]=((((-1.0)*r20*x1604))+((r21*x1600))+(((-1.0)*r22*x1601)));
evalcond[1]=((((-1.0)*r22*x1602))+(((-1.0)*r21*sj15*x1601))+((r20*x1603)));
evalcond[2]=(((r11*x1600))+cj10+(((-1.0)*r10*x1604))+(((-1.0)*r12*x1601)));
evalcond[3]=((((-1.0)*x1599))+((r01*x1600))+(((-1.0)*r00*x1604))+(((-1.0)*r02*x1601)));
evalcond[4]=(((r00*x1603))+(((-1.0)*r02*x1602))+(((-1.0)*r01*sj15*x1601))+(((-1.0)*cj10)));
evalcond[5]=((((-1.0)*x1599))+(((-1.0)*r11*sj15*x1601))+(((-1.0)*r12*x1602))+((r10*x1603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1605=((1.0)*cj15);
CheckValue<IkReal> x1606=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1605))+(((-1.0)*r00*sj15)))),-1);
if(!x1606.valid){
continue;
}
CheckValue<IkReal> x1607 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x1605))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1607.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1606.value)))+(x1607.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1608=IKsin(j14);
IkReal x1609=IKcos(j14);
IkReal x1610=((1.0)*sj10);
IkReal x1611=(sj15*x1608);
IkReal x1612=((1.0)*x1609);
IkReal x1613=((1.0)*x1608);
IkReal x1614=(cj15*x1609);
IkReal x1615=(cj15*x1613);
evalcond[0]=((((-1.0)*r20*x1615))+((r21*x1611))+(((-1.0)*r22*x1612)));
evalcond[1]=(((r20*x1614))+(((-1.0)*r21*sj15*x1612))+(((-1.0)*r22*x1613)));
evalcond[2]=((((-1.0)*r12*x1612))+cj10+((r11*x1611))+(((-1.0)*r10*x1615)));
evalcond[3]=(((r01*x1611))+(((-1.0)*x1610))+(((-1.0)*r00*x1615))+(((-1.0)*r02*x1612)));
evalcond[4]=(((r00*x1614))+(((-1.0)*r02*x1613))+(((-1.0)*r01*sj15*x1612))+(((-1.0)*cj10)));
evalcond[5]=((((-1.0)*r12*x1613))+(((-1.0)*x1610))+(((-1.0)*r11*sj15*x1612))+((r10*x1614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
evalcond[0]=((((-0.11235)*(IKsin(j10))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x1616=((1.0)*cj15);
IkReal x1617=((((-1.0)*r01*x1616))+(((-1.0)*r00*sj15)));
j14eval[0]=x1617;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x1616))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x1617);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x1618=cj15*cj15;
IkReal x1619=(r01*r21);
IkReal x1620=((1.0)*cj15*sj15);
IkReal x1621=(((r00*r20*x1618))+x1619+((r02*r22))+(((-1.0)*r01*r20*x1620))+(((-1.0)*x1618*x1619))+(((-1.0)*r00*r21*x1620)));
j14eval[0]=x1621;
j14eval[1]=IKsign(x1621);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x1622=cj15*cj15;
IkReal x1623=(r21*sj15);
IkReal x1624=(r11*r21);
IkReal x1625=((1.0)*cj15);
IkReal x1626=(x1624+((r10*r20*x1622))+(((-1.0)*r11*r20*sj15*x1625))+((r12*r22))+(((-1.0)*r10*x1623*x1625))+(((-1.0)*x1622*x1624)));
j14eval[0]=x1626;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x1625))+((sj10*x1623)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x1626);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1627=cj15*cj15;
IkReal x1628=(r21*sj15);
IkReal x1629=((1.0)*cj15);
IkReal x1630=(r11*r21);
CheckValue<IkReal> x1631 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x1629))+((sj10*x1628)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1631.valid){
continue;
}
CheckValue<IkReal> x1632=IKPowWithIntegerCheck(IKsign((x1630+((r10*r20*x1627))+(((-1.0)*x1627*x1630))+(((-1.0)*r11*r20*sj15*x1629))+((r12*r22))+(((-1.0)*r10*x1628*x1629)))),-1);
if(!x1632.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1631.value)+(((1.5707963267949)*(x1632.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1633=IKsin(j14);
IkReal x1634=IKcos(j14);
IkReal x1635=(sj15*x1633);
IkReal x1636=((1.0)*x1634);
IkReal x1637=((1.0)*x1633);
IkReal x1638=(cj15*x1634);
IkReal x1639=(cj15*x1637);
evalcond[0]=(((r21*x1635))+(((-1.0)*r22*x1636))+(((-1.0)*r20*x1639)));
evalcond[1]=((((-1.0)*r22*x1637))+((r20*x1638))+(((-1.0)*r21*sj15*x1636)));
evalcond[2]=(((r11*x1635))+(((-1.0)*r12*x1636))+(((-1.0)*r10*x1639))+cj10);
evalcond[3]=((((-1.0)*r01*sj15*x1636))+cj10+((r00*x1638))+(((-1.0)*r02*x1637)));
evalcond[4]=((((-1.0)*r12*x1637))+((r10*x1638))+(((-1.0)*r11*sj15*x1636))+sj10);
evalcond[5]=((((-1.0)*r00*x1639))+((r01*x1635))+(((-1.0)*sj10))+(((-1.0)*r02*x1636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1640=cj15*cj15;
IkReal x1641=(r01*r21);
IkReal x1642=((1.0)*cj15*sj15);
CheckValue<IkReal> x1643 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1643.valid){
continue;
}
CheckValue<IkReal> x1644=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r21*x1642))+x1641+((r00*r20*x1640))+(((-1.0)*r01*r20*x1642))+((r02*r22))+(((-1.0)*x1640*x1641)))),-1);
if(!x1644.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1643.value)+(((1.5707963267949)*(x1644.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1645=IKsin(j14);
IkReal x1646=IKcos(j14);
IkReal x1647=(sj15*x1645);
IkReal x1648=((1.0)*x1646);
IkReal x1649=((1.0)*x1645);
IkReal x1650=(cj15*x1646);
IkReal x1651=(cj15*x1649);
evalcond[0]=(((r21*x1647))+(((-1.0)*r22*x1648))+(((-1.0)*r20*x1651)));
evalcond[1]=((((-1.0)*r22*x1649))+(((-1.0)*r21*sj15*x1648))+((r20*x1650)));
evalcond[2]=(((r11*x1647))+(((-1.0)*r12*x1648))+(((-1.0)*r10*x1651))+cj10);
evalcond[3]=((((-1.0)*r01*sj15*x1648))+((r00*x1650))+cj10+(((-1.0)*r02*x1649)));
evalcond[4]=(((r10*x1650))+(((-1.0)*r12*x1649))+(((-1.0)*r11*sj15*x1648))+sj10);
evalcond[5]=((((-1.0)*r00*x1651))+(((-1.0)*sj10))+((r01*x1647))+(((-1.0)*r02*x1648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1652=((1.0)*cj15);
CheckValue<IkReal> x1653 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x1652)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1653.valid){
continue;
}
CheckValue<IkReal> x1654=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1652))+(((-1.0)*r00*sj15)))),-1);
if(!x1654.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1653.value)+(((1.5707963267949)*(x1654.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1655=IKsin(j14);
IkReal x1656=IKcos(j14);
IkReal x1657=(sj15*x1655);
IkReal x1658=((1.0)*x1656);
IkReal x1659=((1.0)*x1655);
IkReal x1660=(cj15*x1656);
IkReal x1661=(cj15*x1659);
evalcond[0]=((((-1.0)*r22*x1658))+(((-1.0)*r20*x1661))+((r21*x1657)));
evalcond[1]=((((-1.0)*r22*x1659))+((r20*x1660))+(((-1.0)*r21*sj15*x1658)));
evalcond[2]=(((r11*x1657))+(((-1.0)*r10*x1661))+(((-1.0)*r12*x1658))+cj10);
evalcond[3]=(((r00*x1660))+cj10+(((-1.0)*r02*x1659))+(((-1.0)*r01*sj15*x1658)));
evalcond[4]=(((r10*x1660))+(((-1.0)*r11*sj15*x1658))+(((-1.0)*r12*x1659))+sj10);
evalcond[5]=((((-1.0)*r00*x1661))+((r01*x1657))+(((-1.0)*sj10))+(((-1.0)*r02*x1658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
evalcond[0]=((((-0.11235)*(IKsin(j10))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x1662=((1.0)*cj15);
IkReal x1663=((((-1.0)*r01*x1662))+(((-1.0)*r00*sj15)));
j14eval[0]=x1663;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x1662))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x1663);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x1664=((1.0)*cj15);
IkReal x1665=((((-1.0)*r11*x1664))+(((-1.0)*r10*sj15)));
j14eval[0]=x1665;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x1664))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x1665);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x1666=cj15*cj15;
IkReal x1667=(r11*r21);
IkReal x1668=(cj15*r20);
IkReal x1669=((1.0)*r21*sj15);
IkReal x1670=(x1667+(((-1.0)*r11*sj15*x1668))+((r12*r22))+(((-1.0)*x1666*x1667))+(((-1.0)*cj15*r10*x1669))+((r10*r20*x1666)));
j14eval[0]=x1670;
j14eval[1]=IKsign(x1670);
j14eval[2]=((IKabs(((((-1.0)*cj10*x1669))+((cj10*x1668)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1671=cj15*cj15;
IkReal x1672=(cj15*r20);
IkReal x1673=(r11*r21);
IkReal x1674=((1.0)*r21*sj15);
CheckValue<IkReal> x1675 = IKatan2WithCheck(IkReal((((cj10*x1672))+(((-1.0)*cj10*x1674)))),IkReal((cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1675.valid){
continue;
}
CheckValue<IkReal> x1676=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj15*x1672))+(((-1.0)*x1671*x1673))+x1673+((r12*r22))+(((-1.0)*cj15*r10*x1674))+((r10*r20*x1671)))),-1);
if(!x1676.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1675.value)+(((1.5707963267949)*(x1676.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1677=IKsin(j14);
IkReal x1678=IKcos(j14);
IkReal x1679=((1.0)*sj10);
IkReal x1680=(sj15*x1677);
IkReal x1681=((1.0)*x1678);
IkReal x1682=((1.0)*x1677);
IkReal x1683=(cj15*x1678);
IkReal x1684=(cj15*x1682);
evalcond[0]=((((-1.0)*r20*x1684))+((r21*x1680))+(((-1.0)*r22*x1681)));
evalcond[1]=((((-1.0)*r21*sj15*x1681))+(((-1.0)*r22*x1682))+((r20*x1683)));
evalcond[2]=((((-1.0)*r12*x1681))+((r11*x1680))+(((-1.0)*r10*x1684))+cj10);
evalcond[3]=(((r01*x1680))+(((-1.0)*r02*x1681))+(((-1.0)*x1679))+(((-1.0)*r00*x1684)));
evalcond[4]=(((r00*x1683))+(((-1.0)*cj10))+(((-1.0)*r01*sj15*x1681))+(((-1.0)*r02*x1682)));
evalcond[5]=((((-1.0)*r12*x1682))+((r10*x1683))+(((-1.0)*r11*sj15*x1681))+(((-1.0)*x1679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1685=((1.0)*cj15);
CheckValue<IkReal> x1686=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1685))+(((-1.0)*r10*sj15)))),-1);
if(!x1686.valid){
continue;
}
CheckValue<IkReal> x1687 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x1685))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1687.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1686.value)))+(x1687.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1688=IKsin(j14);
IkReal x1689=IKcos(j14);
IkReal x1690=((1.0)*sj10);
IkReal x1691=(sj15*x1688);
IkReal x1692=((1.0)*x1689);
IkReal x1693=((1.0)*x1688);
IkReal x1694=(cj15*x1689);
IkReal x1695=(cj15*x1693);
evalcond[0]=(((r21*x1691))+(((-1.0)*r20*x1695))+(((-1.0)*r22*x1692)));
evalcond[1]=(((r20*x1694))+(((-1.0)*r21*sj15*x1692))+(((-1.0)*r22*x1693)));
evalcond[2]=((((-1.0)*r12*x1692))+((r11*x1691))+cj10+(((-1.0)*r10*x1695)));
evalcond[3]=(((r01*x1691))+(((-1.0)*x1690))+(((-1.0)*r02*x1692))+(((-1.0)*r00*x1695)));
evalcond[4]=(((r00*x1694))+(((-1.0)*r02*x1693))+(((-1.0)*r01*sj15*x1692))+(((-1.0)*cj10)));
evalcond[5]=(((r10*x1694))+(((-1.0)*x1690))+(((-1.0)*r12*x1693))+(((-1.0)*r11*sj15*x1692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1696=((1.0)*cj15);
CheckValue<IkReal> x1697=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x1696)))),-1);
if(!x1697.valid){
continue;
}
CheckValue<IkReal> x1698 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x1696))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1698.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1697.value)))+(x1698.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1699=IKsin(j14);
IkReal x1700=IKcos(j14);
IkReal x1701=((1.0)*sj10);
IkReal x1702=(sj15*x1699);
IkReal x1703=((1.0)*x1700);
IkReal x1704=((1.0)*x1699);
IkReal x1705=(cj15*x1700);
IkReal x1706=(cj15*x1704);
evalcond[0]=((((-1.0)*r20*x1706))+((r21*x1702))+(((-1.0)*r22*x1703)));
evalcond[1]=(((r20*x1705))+(((-1.0)*r21*sj15*x1703))+(((-1.0)*r22*x1704)));
evalcond[2]=(((r11*x1702))+(((-1.0)*r10*x1706))+cj10+(((-1.0)*r12*x1703)));
evalcond[3]=(((r01*x1702))+(((-1.0)*r02*x1703))+(((-1.0)*x1701))+(((-1.0)*r00*x1706)));
evalcond[4]=((((-1.0)*r01*sj15*x1703))+((r00*x1705))+(((-1.0)*r02*x1704))+(((-1.0)*cj10)));
evalcond[5]=((((-1.0)*r11*sj15*x1703))+(((-1.0)*x1701))+((r10*x1705))+(((-1.0)*r12*x1704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10, j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x1707=(sj11*sj12);
IkReal x1708=(cj11*cj12);
IkReal x1709=((20000.0)*px);
IkReal x1710=((4873.0)*cj11);
IkReal x1711=(r00*sj15);
IkReal x1712=(cj15*r01);
CheckValue<IkReal> x1713=IKPowWithIntegerCheck(((((-2247.0)*x1708))+(((2247.0)*x1707))),-1);
if(!x1713.valid){
continue;
}
CheckValue<IkReal> x1714=IKPowWithIntegerCheck((x1707+(((-1.0)*x1708))),-1);
if(!x1714.valid){
continue;
}
if( IKabs(((x1713.value)*(((((-1.0)*x1710*x1712))+(((-1.0)*x1710*x1711))+(((-1.0)*x1707*x1709))+(((-2558.0)*x1708*x1712))+(((-2558.0)*x1708*x1711))+(((2558.0)*x1707*x1712))+(((2558.0)*x1707*x1711))+((x1708*x1709)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1714.value)*(((((-1.0)*x1712))+(((-1.0)*x1711)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1713.value)*(((((-1.0)*x1710*x1712))+(((-1.0)*x1710*x1711))+(((-1.0)*x1707*x1709))+(((-2558.0)*x1708*x1712))+(((-2558.0)*x1708*x1711))+(((2558.0)*x1707*x1712))+(((2558.0)*x1707*x1711))+((x1708*x1709))))))+IKsqr(((x1714.value)*(((((-1.0)*x1712))+(((-1.0)*x1711))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x1713.value)*(((((-1.0)*x1710*x1712))+(((-1.0)*x1710*x1711))+(((-1.0)*x1707*x1709))+(((-2558.0)*x1708*x1712))+(((-2558.0)*x1708*x1711))+(((2558.0)*x1707*x1712))+(((2558.0)*x1707*x1711))+((x1708*x1709))))), ((x1714.value)*(((((-1.0)*x1712))+(((-1.0)*x1711))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x1715=IKcos(j10);
IkReal x1716=IKsin(j10);
IkReal x1717=(sj11*sj12);
IkReal x1718=(cj11*cj12);
IkReal x1719=(r10*sj15);
IkReal x1720=(r00*sj15);
IkReal x1721=((0.08535)*cj15);
IkReal x1722=(cj11*x1716);
IkReal x1723=((0.21325)*x1715);
evalcond[0]=(((cj15*r01))+x1720+(((-1.0)*x1715*x1718))+((x1715*x1717)));
evalcond[1]=((((-1.0)*x1716*x1718))+((cj15*r11))+x1719+((x1716*x1717)));
evalcond[2]=((((-1.0)*r01*x1721))+((x1718*x1723))+(((-1.0)*px))+(((-1.0)*x1717*x1723))+(((-0.08535)*x1720))+(((0.24365)*cj11*x1715))+(((-0.11235)*x1716)));
evalcond[3]=((((-0.08535)*x1719))+(((0.24365)*x1722))+(((-1.0)*r11*x1721))+(((-0.21325)*x1716*x1717))+(((0.11235)*x1715))+(((0.21325)*x1716*x1718))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x1724=((1.0)*cj15);
IkReal x1725=((((-1.0)*r01*x1724))+(((-1.0)*r00*sj15)));
j14eval[0]=x1725;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x1724))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x1725);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x1726=((1.0)*cj15);
IkReal x1727=((((-1.0)*r11*x1726))+(((-1.0)*r10*sj15)));
j14eval[0]=x1727;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x1726))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x1727);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x1728=((1.0)*sj15);
IkReal x1729=((((-1.0)*cj15*r21))+(((-1.0)*r20*x1728)));
j14eval[0]=x1729;
j14eval[1]=((IKabs((((cj15*r10*sj10))+(((-1.0)*cj10*r01*x1728))+(((-1.0)*r11*sj10*x1728))+((cj10*cj15*r00)))))+(IKabs(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02))))));
j14eval[2]=IKsign(x1729);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1730=((-1.0)*r20);
IkReal x1732 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1732)==0){
continue;
}
IkReal x1731=pow(x1732,-0.5);
CheckValue<IkReal> x1733 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1730),IKFAST_ATAN2_MAGTHRESH);
if(!x1733.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1733.value));
IkReal gconst79=(r21*x1731);
IkReal gconst80=(x1730*x1731);
CheckValue<IkReal> x1734 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1734.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x1734.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x1735=((-1.0)*r20);
IkReal x1736=x1731;
CheckValue<IkReal> x1738 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1735),IKFAST_ATAN2_MAGTHRESH);
if(!x1738.valid){
continue;
}
IkReal x1737=((-1.0)*(x1738.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst79;
cj15=gconst80;
j15=x1737;
IkReal gconst78=x1737;
IkReal gconst79=(r21*x1736);
IkReal gconst80=(x1735*x1736);
j14eval[0]=cj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x1739=((-1.0)*r20);
IkReal x1740=x1731;
CheckValue<IkReal> x1742 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1739),IKFAST_ATAN2_MAGTHRESH);
if(!x1742.valid){
continue;
}
IkReal x1741=((-1.0)*(x1742.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst79;
cj15=gconst80;
j15=x1741;
IkReal gconst78=x1741;
IkReal gconst79=(r21*x1740);
IkReal gconst80=(x1739*x1740);
j14eval[0]=sj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x1743=((-1.0)*r20);
IkReal x1744=x1731;
CheckValue<IkReal> x1746 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1743),IKFAST_ATAN2_MAGTHRESH);
if(!x1746.valid){
continue;
}
IkReal x1745=((-1.0)*(x1746.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst79;
cj15=gconst80;
j15=x1745;
IkReal gconst78=x1745;
IkReal gconst79=(r21*x1744);
IkReal gconst80=(x1743*x1744);
IkReal x1747=r22*r22;
CheckValue<IkReal> x1750=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1747))),-1);
if(!x1750.valid){
continue;
}
IkReal x1748=x1750.value;
IkReal x1749=(x1747+((x1748*(r21*r21*r21*r21)))+((x1748*(r20*r20*r20*r20)))+(((2.0)*x1748*(r20*r20)*(r21*r21))));
j14eval[0]=x1749;
j14eval[1]=IKsign(x1749);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1751=(sj11*sj12);
IkReal x1752=(gconst79*r21);
IkReal x1753=(cj11*cj12);
IkReal x1754=(gconst80*r20);
CheckValue<IkReal> x1755 = IKatan2WithCheck(IkReal((((r22*x1751))+(((-1.0)*r22*x1753)))),IkReal(((((-1.0)*x1752*x1753))+((x1753*x1754))+((x1751*x1752))+(((-1.0)*x1751*x1754)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1755.valid){
continue;
}
CheckValue<IkReal> x1756=IKPowWithIntegerCheck(IKsign(((((-2.0)*x1752*x1754))+(r22*r22)+(x1752*x1752)+(x1754*x1754))),-1);
if(!x1756.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1755.value)+(((1.5707963267949)*(x1756.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1757=IKsin(j14);
IkReal x1758=IKcos(j14);
IkReal x1759=(gconst80*r10);
IkReal x1760=(gconst79*r11);
IkReal x1761=((1.0)*cj11);
IkReal x1762=((1.0)*sj10);
IkReal x1763=(gconst79*r01);
IkReal x1764=(gconst80*r00);
IkReal x1765=(cj12*sj11);
IkReal x1766=(gconst79*r21);
IkReal x1767=(gconst80*r20);
IkReal x1768=((1.0)*x1758);
IkReal x1769=((1.0)*x1757);
evalcond[0]=(((x1757*x1766))+(((-1.0)*r22*x1768))+(((-1.0)*x1767*x1769)));
evalcond[1]=((((-1.0)*x1759*x1769))+cj10+((x1757*x1760))+(((-1.0)*r12*x1768)));
evalcond[2]=((((-1.0)*x1762))+(((-1.0)*r02*x1768))+((x1757*x1763))+(((-1.0)*x1764*x1769)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x1766*x1768))+((x1758*x1767))+(((-1.0)*r22*x1769))+(((-1.0)*cj12*x1761)));
evalcond[4]=((((-1.0)*cj10*sj12*x1761))+(((-1.0)*r02*x1769))+(((-1.0)*x1763*x1768))+((x1758*x1764))+(((-1.0)*cj10*x1765)));
evalcond[5]=(((x1758*x1759))+(((-1.0)*x1762*x1765))+(((-1.0)*r12*x1769))+(((-1.0)*x1760*x1768))+(((-1.0)*sj10*sj12*x1761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1770=((1.0)*gconst80);
CheckValue<IkReal> x1771 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst79*r21*sj10))+(((-1.0)*r20*sj10*x1770)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1771.valid){
continue;
}
CheckValue<IkReal> x1772=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x1770)))),-1);
if(!x1772.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1771.value)+(((1.5707963267949)*(x1772.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1773=IKsin(j14);
IkReal x1774=IKcos(j14);
IkReal x1775=(gconst80*r10);
IkReal x1776=(gconst79*r11);
IkReal x1777=((1.0)*cj11);
IkReal x1778=((1.0)*sj10);
IkReal x1779=(gconst79*r01);
IkReal x1780=(gconst80*r00);
IkReal x1781=(cj12*sj11);
IkReal x1782=(gconst79*r21);
IkReal x1783=(gconst80*r20);
IkReal x1784=((1.0)*x1774);
IkReal x1785=((1.0)*x1773);
evalcond[0]=((((-1.0)*x1783*x1785))+(((-1.0)*r22*x1784))+((x1773*x1782)));
evalcond[1]=((((-1.0)*x1775*x1785))+(((-1.0)*r12*x1784))+((x1773*x1776))+cj10);
evalcond[2]=(((x1773*x1779))+(((-1.0)*x1778))+(((-1.0)*x1780*x1785))+(((-1.0)*r02*x1784)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r22*x1785))+((x1774*x1783))+(((-1.0)*cj12*x1777))+(((-1.0)*x1782*x1784)));
evalcond[4]=(((x1774*x1780))+(((-1.0)*cj10*x1781))+(((-1.0)*cj10*sj12*x1777))+(((-1.0)*x1779*x1784))+(((-1.0)*r02*x1785)));
evalcond[5]=((((-1.0)*r12*x1785))+(((-1.0)*x1778*x1781))+((x1774*x1775))+(((-1.0)*x1776*x1784))+(((-1.0)*sj10*sj12*x1777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1786=((1.0)*gconst80);
CheckValue<IkReal> x1787 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst79*r21))+(((-1.0)*cj10*r20*x1786)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1787.valid){
continue;
}
CheckValue<IkReal> x1788=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1786))+(((-1.0)*gconst79*r00)))),-1);
if(!x1788.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1787.value)+(((1.5707963267949)*(x1788.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1789=IKsin(j14);
IkReal x1790=IKcos(j14);
IkReal x1791=(gconst80*r10);
IkReal x1792=(gconst79*r11);
IkReal x1793=((1.0)*cj11);
IkReal x1794=((1.0)*sj10);
IkReal x1795=(gconst79*r01);
IkReal x1796=(gconst80*r00);
IkReal x1797=(cj12*sj11);
IkReal x1798=(gconst79*r21);
IkReal x1799=(gconst80*r20);
IkReal x1800=((1.0)*x1790);
IkReal x1801=((1.0)*x1789);
evalcond[0]=((((-1.0)*x1799*x1801))+((x1789*x1798))+(((-1.0)*r22*x1800)));
evalcond[1]=(((x1789*x1792))+cj10+(((-1.0)*x1791*x1801))+(((-1.0)*r12*x1800)));
evalcond[2]=((((-1.0)*x1794))+(((-1.0)*x1796*x1801))+((x1789*x1795))+(((-1.0)*r02*x1800)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x1793))+(((-1.0)*x1798*x1800))+((x1790*x1799))+(((-1.0)*r22*x1801)));
evalcond[4]=((((-1.0)*cj10*sj12*x1793))+(((-1.0)*cj10*x1797))+(((-1.0)*x1795*x1800))+(((-1.0)*r02*x1801))+((x1790*x1796)));
evalcond[5]=((((-1.0)*sj10*sj12*x1793))+(((-1.0)*x1792*x1800))+((x1790*x1791))+(((-1.0)*r12*x1801))+(((-1.0)*x1794*x1797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1802=((-1.0)*r21);
IkReal x1804 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1804)==0){
continue;
}
IkReal x1803=pow(x1804,-0.5);
CheckValue<IkReal> x1805 = IKatan2WithCheck(IkReal(x1802),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1805.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1805.value))));
IkReal gconst82=(x1802*x1803);
IkReal gconst83=((1.0)*r20*x1803);
CheckValue<IkReal> x1806 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1806.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x1806.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x1807=((-1.0)*r21);
CheckValue<IkReal> x1810 = IKatan2WithCheck(IkReal(x1807),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1810.valid){
continue;
}
IkReal x1808=((1.0)*(x1810.value));
IkReal x1809=x1803;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst82;
cj15=gconst83;
j15=((3.14159265)+(((-1.0)*x1808)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1808)));
IkReal gconst82=(x1807*x1809);
IkReal gconst83=((1.0)*r20*x1809);
IkReal x1811=r22*r22;
IkReal x1812=((1.0)*x1811);
CheckValue<IkReal> x1816=IKPowWithIntegerCheck(((-1.0)+x1811),-1);
if(!x1816.valid){
continue;
}
IkReal x1813=x1816.value;
if((((1.0)+(((-1.0)*x1812)))) < -0.00001)
continue;
IkReal x1814=IKsqrt(((1.0)+(((-1.0)*x1812))));
IkReal x1815=(cj10*x1813*x1814);
j14eval[0]=((IKabs(((((-1.0)*x1812*x1815))+x1815)))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x1817=((-1.0)*r21);
CheckValue<IkReal> x1820 = IKatan2WithCheck(IkReal(x1817),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1820.valid){
continue;
}
IkReal x1818=((1.0)*(x1820.value));
IkReal x1819=x1803;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst82;
cj15=gconst83;
j15=((3.14159265)+(((-1.0)*x1818)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1818)));
IkReal gconst82=(x1817*x1819);
IkReal gconst83=((1.0)*r20*x1819);
IkReal x1821=r22*r22;
IkReal x1822=((1.0)*x1821);
CheckValue<IkReal> x1826=IKPowWithIntegerCheck(((-1.0)+x1821),-1);
if(!x1826.valid){
continue;
}
IkReal x1823=x1826.value;
if((((1.0)+(((-1.0)*x1822)))) < -0.00001)
continue;
IkReal x1824=IKsqrt(((1.0)+(((-1.0)*x1822))));
IkReal x1825=(sj10*x1823*x1824);
j14eval[0]=((IKabs((x1825+(((-1.0)*x1822*x1825)))))+(IKabs((r22*sj10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x1827=((-1.0)*r21);
CheckValue<IkReal> x1830 = IKatan2WithCheck(IkReal(x1827),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1830.valid){
continue;
}
IkReal x1828=((1.0)*(x1830.value));
IkReal x1829=x1803;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst82;
cj15=gconst83;
j15=((3.14159265)+(((-1.0)*x1828)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1828)));
IkReal gconst82=(x1827*x1829);
IkReal gconst83=((1.0)*r20*x1829);
IkReal x1831=r22*r22;
IkReal x1832=(cj10*r02);
IkReal x1833=(r12*sj10);
CheckValue<IkReal> x1837=IKPowWithIntegerCheck(((-1.0)+x1831),-1);
if(!x1837.valid){
continue;
}
IkReal x1834=x1837.value;
if((((1.0)+(((-1.0)*x1831)))) < -0.00001)
continue;
IkReal x1835=IKsqrt(((1.0)+(((-1.0)*x1831))));
IkReal x1836=(r22*x1834*x1835);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=((IKabs((((x1832*x1836))+((x1833*x1836)))))+(IKabs(((((-1.0)*x1832))+(((-1.0)*x1833))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1838=((1.0)*gconst82);
CheckValue<IkReal> x1839=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x1838))+(((-1.0)*gconst83*r21)))),-1);
if(!x1839.valid){
continue;
}
CheckValue<IkReal> x1840 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x1838))+((gconst83*r10*sj10))+(((-1.0)*cj10*r01*x1838))+((cj10*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1840.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1839.value)))+(x1840.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1841=IKsin(j14);
IkReal x1842=IKcos(j14);
IkReal x1843=(gconst82*r01);
IkReal x1844=((1.0)*cj11);
IkReal x1845=(gconst82*r21);
IkReal x1846=((1.0)*sj10);
IkReal x1847=(gconst83*r00);
IkReal x1848=(gconst83*r10);
IkReal x1849=(gconst83*r20);
IkReal x1850=(gconst82*r11);
IkReal x1851=(cj12*sj11);
IkReal x1852=((1.0)*x1842);
IkReal x1853=((1.0)*x1841);
evalcond[0]=((((-1.0)*x1849*x1853))+(((-1.0)*r22*x1852))+((x1841*x1845)));
evalcond[1]=((((-1.0)*x1848*x1853))+cj10+(((-1.0)*r12*x1852))+((x1841*x1850)));
evalcond[2]=((((-1.0)*x1846))+(((-1.0)*r02*x1852))+((x1841*x1843))+(((-1.0)*x1847*x1853)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x1845*x1852))+(((-1.0)*cj12*x1844))+(((-1.0)*r22*x1853))+((x1842*x1849)));
evalcond[4]=((((-1.0)*cj10*x1851))+(((-1.0)*x1843*x1852))+(((-1.0)*r02*x1853))+(((-1.0)*cj10*sj12*x1844))+((x1842*x1847)));
evalcond[5]=((((-1.0)*x1850*x1852))+(((-1.0)*r12*x1853))+((x1842*x1848))+(((-1.0)*sj10*sj12*x1844))+(((-1.0)*x1846*x1851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1854=((1.0)*gconst83);
CheckValue<IkReal> x1855 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst82*r21*sj10))+(((-1.0)*r20*sj10*x1854)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1855.valid){
continue;
}
CheckValue<IkReal> x1856=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x1854)))),-1);
if(!x1856.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1855.value)+(((1.5707963267949)*(x1856.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1857=IKsin(j14);
IkReal x1858=IKcos(j14);
IkReal x1859=(gconst82*r01);
IkReal x1860=((1.0)*cj11);
IkReal x1861=(gconst82*r21);
IkReal x1862=((1.0)*sj10);
IkReal x1863=(gconst83*r00);
IkReal x1864=(gconst83*r10);
IkReal x1865=(gconst83*r20);
IkReal x1866=(gconst82*r11);
IkReal x1867=(cj12*sj11);
IkReal x1868=((1.0)*x1858);
IkReal x1869=((1.0)*x1857);
evalcond[0]=((((-1.0)*x1865*x1869))+((x1857*x1861))+(((-1.0)*r22*x1868)));
evalcond[1]=((((-1.0)*x1864*x1869))+cj10+(((-1.0)*r12*x1868))+((x1857*x1866)));
evalcond[2]=((((-1.0)*r02*x1868))+((x1857*x1859))+(((-1.0)*x1863*x1869))+(((-1.0)*x1862)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x1860))+((x1858*x1865))+(((-1.0)*x1861*x1868))+(((-1.0)*r22*x1869)));
evalcond[4]=((((-1.0)*r02*x1869))+((x1858*x1863))+(((-1.0)*cj10*sj12*x1860))+(((-1.0)*x1859*x1868))+(((-1.0)*cj10*x1867)));
evalcond[5]=((((-1.0)*sj10*sj12*x1860))+(((-1.0)*x1866*x1868))+(((-1.0)*x1862*x1867))+((x1858*x1864))+(((-1.0)*r12*x1869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1870=((1.0)*gconst83);
CheckValue<IkReal> x1871 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x1870))+((cj10*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1871.valid){
continue;
}
CheckValue<IkReal> x1872=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1870))+(((-1.0)*gconst82*r00)))),-1);
if(!x1872.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1871.value)+(((1.5707963267949)*(x1872.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1873=IKsin(j14);
IkReal x1874=IKcos(j14);
IkReal x1875=(gconst82*r01);
IkReal x1876=((1.0)*cj11);
IkReal x1877=(gconst82*r21);
IkReal x1878=((1.0)*sj10);
IkReal x1879=(gconst83*r00);
IkReal x1880=(gconst83*r10);
IkReal x1881=(gconst83*r20);
IkReal x1882=(gconst82*r11);
IkReal x1883=(cj12*sj11);
IkReal x1884=((1.0)*x1874);
IkReal x1885=((1.0)*x1873);
evalcond[0]=((((-1.0)*r22*x1884))+((x1873*x1877))+(((-1.0)*x1881*x1885)));
evalcond[1]=((((-1.0)*x1880*x1885))+(((-1.0)*r12*x1884))+((x1873*x1882))+cj10);
evalcond[2]=((((-1.0)*x1879*x1885))+(((-1.0)*x1878))+(((-1.0)*r02*x1884))+((x1873*x1875)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x1876))+((x1874*x1881))+(((-1.0)*r22*x1885))+(((-1.0)*x1877*x1884)));
evalcond[4]=(((x1874*x1879))+(((-1.0)*cj10*x1883))+(((-1.0)*x1875*x1884))+(((-1.0)*r02*x1885))+(((-1.0)*cj10*sj12*x1876)));
evalcond[5]=((((-1.0)*x1882*x1884))+((x1874*x1880))+(((-1.0)*x1878*x1883))+(((-1.0)*r12*x1885))+(((-1.0)*sj10*sj12*x1876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1886=((-1.0)*r10);
IkReal x1888 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1888)==0){
continue;
}
IkReal x1887=pow(x1888,-0.5);
CheckValue<IkReal> x1889 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1886),IKFAST_ATAN2_MAGTHRESH);
if(!x1889.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1889.value));
IkReal gconst85=(r11*x1887);
IkReal gconst86=(x1886*x1887);
CheckValue<IkReal> x1890 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1890.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x1890.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x1891=((-1.0)*r10);
IkReal x1892=x1887;
CheckValue<IkReal> x1894 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1891),IKFAST_ATAN2_MAGTHRESH);
if(!x1894.valid){
continue;
}
IkReal x1893=((-1.0)*(x1894.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst85;
cj15=gconst86;
j15=x1893;
IkReal gconst84=x1893;
IkReal gconst85=(r11*x1892);
IkReal gconst86=(x1891*x1892);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1895=((1.0)*gconst85);
CheckValue<IkReal> x1896=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x1895)))),-1);
if(!x1896.valid){
continue;
}
CheckValue<IkReal> x1897 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x1895))+((cj10*gconst86*r00))+((gconst86*r10*sj10))+(((-1.0)*r11*sj10*x1895)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1897.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1896.value)))+(x1897.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1898=IKsin(j14);
IkReal x1899=IKcos(j14);
IkReal x1900=((1.0)*cj11);
IkReal x1901=(gconst85*r21);
IkReal x1902=(gconst85*r01);
IkReal x1903=(gconst86*r20);
IkReal x1904=(gconst86*r10);
IkReal x1905=(gconst86*r00);
IkReal x1906=(gconst85*r11);
IkReal x1907=((1.0)*x1899);
IkReal x1908=((1.0)*x1898);
IkReal x1909=((1.0)*cj12*sj11);
evalcond[0]=((((-1.0)*x1903*x1908))+(((-1.0)*r22*x1907))+((x1898*x1901)));
evalcond[1]=(((x1898*x1906))+(((-1.0)*x1904*x1908))+cj10+(((-1.0)*r12*x1907)));
evalcond[2]=(((x1898*x1902))+(((-1.0)*x1905*x1908))+(((-1.0)*sj10))+(((-1.0)*r02*x1907)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x1901*x1907))+(((-1.0)*r22*x1908))+((x1899*x1903))+(((-1.0)*cj12*x1900)));
evalcond[4]=((((-1.0)*x1902*x1907))+(((-1.0)*cj10*sj12*x1900))+(((-1.0)*cj10*x1909))+((x1899*x1905))+(((-1.0)*r02*x1908)));
evalcond[5]=((((-1.0)*sj10*sj12*x1900))+(((-1.0)*sj10*x1909))+(((-1.0)*r12*x1908))+((x1899*x1904))+(((-1.0)*x1906*x1907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1910=((1.0)*gconst86);
CheckValue<IkReal> x1911 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x1910))+((cj10*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1911.valid){
continue;
}
CheckValue<IkReal> x1912=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1910))+(((-1.0)*gconst85*r00)))),-1);
if(!x1912.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1911.value)+(((1.5707963267949)*(x1912.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1913=IKsin(j14);
IkReal x1914=IKcos(j14);
IkReal x1915=((1.0)*cj11);
IkReal x1916=(gconst85*r21);
IkReal x1917=(gconst85*r01);
IkReal x1918=(gconst86*r20);
IkReal x1919=(gconst86*r10);
IkReal x1920=(gconst86*r00);
IkReal x1921=(gconst85*r11);
IkReal x1922=((1.0)*x1914);
IkReal x1923=((1.0)*x1913);
IkReal x1924=((1.0)*cj12*sj11);
evalcond[0]=(((x1913*x1916))+(((-1.0)*x1918*x1923))+(((-1.0)*r22*x1922)));
evalcond[1]=((((-1.0)*r12*x1922))+cj10+(((-1.0)*x1919*x1923))+((x1913*x1921)));
evalcond[2]=(((x1913*x1917))+(((-1.0)*sj10))+(((-1.0)*r02*x1922))+(((-1.0)*x1920*x1923)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x1916*x1922))+((x1914*x1918))+(((-1.0)*r22*x1923))+(((-1.0)*cj12*x1915)));
evalcond[4]=((((-1.0)*x1917*x1922))+(((-1.0)*cj10*x1924))+((x1914*x1920))+(((-1.0)*r02*x1923))+(((-1.0)*cj10*sj12*x1915)));
evalcond[5]=((((-1.0)*r12*x1923))+(((-1.0)*sj10*x1924))+((x1914*x1919))+(((-1.0)*x1921*x1922))+(((-1.0)*sj10*sj12*x1915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1925=((-1.0)*r11);
IkReal x1927 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1927)==0){
continue;
}
IkReal x1926=pow(x1927,-0.5);
CheckValue<IkReal> x1928 = IKatan2WithCheck(IkReal(x1925),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1928.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x1928.value))));
IkReal gconst88=(x1925*x1926);
IkReal gconst89=((1.0)*r10*x1926);
CheckValue<IkReal> x1929 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1929.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x1929.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x1930=((-1.0)*r11);
CheckValue<IkReal> x1933 = IKatan2WithCheck(IkReal(x1930),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1933.valid){
continue;
}
IkReal x1931=((1.0)*(x1933.value));
IkReal x1932=x1926;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst88;
cj15=gconst89;
j15=((3.14159265)+(((-1.0)*x1931)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1931)));
IkReal gconst88=(x1930*x1932);
IkReal gconst89=((1.0)*r10*x1932);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x1934=((-1.0)*r11);
CheckValue<IkReal> x1937 = IKatan2WithCheck(IkReal(x1934),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1937.valid){
continue;
}
IkReal x1935=((1.0)*(x1937.value));
IkReal x1936=x1926;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst88;
cj15=gconst89;
j15=((3.14159265)+(((-1.0)*x1935)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1935)));
IkReal gconst88=(x1934*x1936);
IkReal gconst89=((1.0)*r10*x1936);
IkReal x1938=r12*r12;
IkReal x1939=(cj10*r02);
IkReal x1940=x1926;
IkReal x1941=(sj10*x1940);
j14eval[0]=((IKabs((((x1938*x1941))+(((-1.0)*x1941))+((r12*x1939*x1940)))))+(IKabs(((((-1.0)*x1939))+(((-1.0)*r12*sj10))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x1942=((-1.0)*r11);
CheckValue<IkReal> x1945 = IKatan2WithCheck(IkReal(x1942),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1945.valid){
continue;
}
IkReal x1943=((1.0)*(x1945.value));
IkReal x1944=x1926;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst88;
cj15=gconst89;
j15=((3.14159265)+(((-1.0)*x1943)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x1943)));
IkReal gconst88=(x1942*x1944);
IkReal gconst89=((1.0)*r10*x1944);
IkReal x1946=r12*r12;
IkReal x1947=(cj11*cj12*r22);
IkReal x1948=(r22*sj11*sj12);
CheckValue<IkReal> x1952=IKPowWithIntegerCheck(((-1.0)+x1946),-1);
if(!x1952.valid){
continue;
}
IkReal x1949=x1952.value;
if((((1.0)+(((-1.0)*x1946)))) < -0.00001)
continue;
IkReal x1950=IKsqrt(((1.0)+(((-1.0)*x1946))));
IkReal x1951=(r12*x1949*x1950);
j14eval[0]=((IKabs((x1948+(((-1.0)*x1947)))))+(IKabs(((((-1.0)*x1948*x1951))+((x1947*x1951))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1953=(sj11*sj12);
IkReal x1954=(gconst89*r20);
IkReal x1955=(cj11*cj12);
IkReal x1956=(gconst88*r21);
CheckValue<IkReal> x1957 = IKatan2WithCheck(IkReal((((r22*x1953))+(((-1.0)*r22*x1955)))),IkReal(((((-1.0)*x1955*x1956))+((x1954*x1955))+((x1953*x1956))+(((-1.0)*x1953*x1954)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1957.valid){
continue;
}
CheckValue<IkReal> x1958=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x1956*x1956)+(((-2.0)*x1954*x1956))+(x1954*x1954))),-1);
if(!x1958.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1957.value)+(((1.5707963267949)*(x1958.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1959=IKsin(j14);
IkReal x1960=IKcos(j14);
IkReal x1961=((1.0)*cj11);
IkReal x1962=((1.0)*sj10);
IkReal x1963=(cj12*sj11);
IkReal x1964=(gconst88*r01);
IkReal x1965=(gconst89*r20);
IkReal x1966=(gconst88*r11);
IkReal x1967=(gconst88*r21);
IkReal x1968=((1.0)*x1960);
IkReal x1969=((1.0)*x1959);
IkReal x1970=(gconst89*x1960);
evalcond[0]=(((x1959*x1967))+(((-1.0)*x1965*x1969))+(((-1.0)*r22*x1968)));
evalcond[1]=(((x1959*x1966))+cj10+(((-1.0)*gconst89*r10*x1969))+(((-1.0)*r12*x1968)));
evalcond[2]=(((x1959*x1964))+(((-1.0)*r02*x1968))+(((-1.0)*x1962))+(((-1.0)*gconst89*r00*x1969)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r22*x1969))+((x1960*x1965))+(((-1.0)*x1967*x1968))+(((-1.0)*cj12*x1961)));
evalcond[4]=((((-1.0)*x1964*x1968))+(((-1.0)*r02*x1969))+(((-1.0)*cj10*sj12*x1961))+((r00*x1970))+(((-1.0)*cj10*x1963)));
evalcond[5]=((((-1.0)*sj10*sj12*x1961))+((r10*x1970))+(((-1.0)*x1966*x1968))+(((-1.0)*x1962*x1963))+(((-1.0)*r12*x1969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1971=((1.0)*gconst88);
CheckValue<IkReal> x1972=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst89*r21))+(((-1.0)*r20*x1971)))),-1);
if(!x1972.valid){
continue;
}
CheckValue<IkReal> x1973 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((gconst89*r10*sj10))+(((-1.0)*r11*sj10*x1971))+((cj10*gconst89*r00))+(((-1.0)*cj10*r01*x1971)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1973.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1972.value)))+(x1973.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1974=IKsin(j14);
IkReal x1975=IKcos(j14);
IkReal x1976=((1.0)*cj11);
IkReal x1977=((1.0)*sj10);
IkReal x1978=(cj12*sj11);
IkReal x1979=(gconst88*r01);
IkReal x1980=(gconst89*r20);
IkReal x1981=(gconst88*r11);
IkReal x1982=(gconst88*r21);
IkReal x1983=((1.0)*x1975);
IkReal x1984=((1.0)*x1974);
IkReal x1985=(gconst89*x1975);
evalcond[0]=((((-1.0)*x1980*x1984))+((x1974*x1982))+(((-1.0)*r22*x1983)));
evalcond[1]=(cj10+(((-1.0)*r12*x1983))+((x1974*x1981))+(((-1.0)*gconst89*r10*x1984)));
evalcond[2]=((((-1.0)*r02*x1983))+(((-1.0)*x1977))+(((-1.0)*gconst89*r00*x1984))+((x1974*x1979)));
evalcond[3]=(((sj11*sj12))+((x1975*x1980))+(((-1.0)*x1982*x1983))+(((-1.0)*r22*x1984))+(((-1.0)*cj12*x1976)));
evalcond[4]=((((-1.0)*r02*x1984))+(((-1.0)*x1979*x1983))+(((-1.0)*cj10*sj12*x1976))+(((-1.0)*cj10*x1978))+((r00*x1985)));
evalcond[5]=((((-1.0)*x1981*x1983))+(((-1.0)*sj10*sj12*x1976))+((r10*x1985))+(((-1.0)*r12*x1984))+(((-1.0)*x1977*x1978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1986=((1.0)*gconst89);
CheckValue<IkReal> x1987 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x1986))+((cj10*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1987.valid){
continue;
}
CheckValue<IkReal> x1988=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1986))+(((-1.0)*gconst88*r00)))),-1);
if(!x1988.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x1987.value)+(((1.5707963267949)*(x1988.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1989=IKsin(j14);
IkReal x1990=IKcos(j14);
IkReal x1991=((1.0)*cj11);
IkReal x1992=((1.0)*sj10);
IkReal x1993=(cj12*sj11);
IkReal x1994=(gconst88*r01);
IkReal x1995=(gconst89*r20);
IkReal x1996=(gconst88*r11);
IkReal x1997=(gconst88*r21);
IkReal x1998=((1.0)*x1990);
IkReal x1999=((1.0)*x1989);
IkReal x2000=(gconst89*x1990);
evalcond[0]=((((-1.0)*x1995*x1999))+((x1989*x1997))+(((-1.0)*r22*x1998)));
evalcond[1]=((((-1.0)*gconst89*r10*x1999))+cj10+((x1989*x1996))+(((-1.0)*r12*x1998)));
evalcond[2]=((((-1.0)*r02*x1998))+(((-1.0)*x1992))+((x1989*x1994))+(((-1.0)*gconst89*r00*x1999)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x1997*x1998))+(((-1.0)*cj12*x1991))+((x1990*x1995))+(((-1.0)*r22*x1999)));
evalcond[4]=((((-1.0)*cj10*x1993))+((r00*x2000))+(((-1.0)*r02*x1999))+(((-1.0)*cj10*sj12*x1991))+(((-1.0)*x1994*x1998)));
evalcond[5]=((((-1.0)*x1996*x1998))+((r10*x2000))+(((-1.0)*x1992*x1993))+(((-1.0)*sj10*sj12*x1991))+(((-1.0)*r12*x1999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
IkReal x2001=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x2001;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj15*r00))+((r01*sj15))))));
j14eval[2]=IKsign(x2001);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
IkReal x2002=((1.0)*cj15);
IkReal x2003=((((-1.0)*r01*x2002))+(((-1.0)*r00*sj15)));
j14eval[0]=x2003;
j14eval[1]=((IKabs(r22))+(IKabs((((r21*sj15))+(((-1.0)*r20*x2002))))));
j14eval[2]=IKsign(x2003);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
IkReal x2004=cj15*cj15;
IkReal x2005=r11*r11;
IkReal x2006=(r11*sj15);
IkReal x2007=(cj15*r10);
IkReal x2008=((r12*r12)+x2005+(((-1.0)*x2004*x2005))+(((-2.0)*x2006*x2007))+((x2004*(r10*r10))));
j14eval[0]=x2008;
j14eval[1]=IKsign(x2008);
j14eval[2]=((IKabs(r12))+(IKabs((x2007+(((-1.0)*x2006))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2009=cj15*cj15;
IkReal x2010=r11*r11;
IkReal x2011=(r11*sj15);
IkReal x2012=(cj15*r10);
CheckValue<IkReal> x2013=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2010+(((-1.0)*x2009*x2010))+(((-2.0)*x2011*x2012))+((x2009*(r10*r10))))),-1);
if(!x2013.valid){
continue;
}
CheckValue<IkReal> x2014 = IKatan2WithCheck(IkReal((x2012+(((-1.0)*x2011)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2014.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2013.value)))+(x2014.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2015=IKsin(j14);
IkReal x2016=IKcos(j14);
IkReal x2017=(r11*sj15);
IkReal x2018=((1.0)*cj11);
IkReal x2019=(cj15*r10);
IkReal x2020=(cj15*r00);
IkReal x2021=(r21*sj15);
IkReal x2022=(r01*sj15);
IkReal x2023=(cj15*r20);
IkReal x2024=((1.0)*x2016);
IkReal x2025=((1.0)*x2015);
evalcond[0]=((((-1.0)*x2023*x2025))+(((-1.0)*r22*x2024))+((x2015*x2021)));
evalcond[1]=((((-1.0)*r02*x2024))+(((-1.0)*x2020*x2025))+((x2015*x2022)));
evalcond[2]=(((x2016*x2019))+(((-1.0)*r12*x2025))+(((-1.0)*x2017*x2024)));
evalcond[3]=((1.0)+((x2015*x2017))+(((-1.0)*r12*x2024))+(((-1.0)*x2019*x2025)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x2021*x2024))+(((-1.0)*cj12*x2018))+(((-1.0)*r22*x2025))+((x2016*x2023)));
evalcond[5]=((((-1.0)*x2022*x2024))+(((-1.0)*sj12*x2018))+(((-1.0)*r02*x2025))+(((-1.0)*cj12*sj11))+((x2016*x2020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2026=((1.0)*cj15);
CheckValue<IkReal> x2027=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2026))+(((-1.0)*r00*sj15)))),-1);
if(!x2027.valid){
continue;
}
CheckValue<IkReal> x2028 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj15))+(((-1.0)*r20*x2026)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2028.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2027.value)))+(x2028.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2029=IKsin(j14);
IkReal x2030=IKcos(j14);
IkReal x2031=(r11*sj15);
IkReal x2032=((1.0)*cj11);
IkReal x2033=(cj15*r10);
IkReal x2034=(cj15*r00);
IkReal x2035=(r21*sj15);
IkReal x2036=(r01*sj15);
IkReal x2037=(cj15*r20);
IkReal x2038=((1.0)*x2030);
IkReal x2039=((1.0)*x2029);
evalcond[0]=((((-1.0)*r22*x2038))+((x2029*x2035))+(((-1.0)*x2037*x2039)));
evalcond[1]=((((-1.0)*r02*x2038))+((x2029*x2036))+(((-1.0)*x2034*x2039)));
evalcond[2]=(((x2030*x2033))+(((-1.0)*r12*x2039))+(((-1.0)*x2031*x2038)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2038))+((x2029*x2031))+(((-1.0)*x2033*x2039)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x2035*x2038))+(((-1.0)*r22*x2039))+((x2030*x2037))+(((-1.0)*cj12*x2032)));
evalcond[5]=((((-1.0)*x2036*x2038))+((x2030*x2034))+(((-1.0)*cj12*sj11))+(((-1.0)*r02*x2039))+(((-1.0)*sj12*x2032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x2040 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj15*r00))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2040.valid){
continue;
}
CheckValue<IkReal> x2041=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x2041.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2040.value)+(((1.5707963267949)*(x2041.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2042=IKsin(j14);
IkReal x2043=IKcos(j14);
IkReal x2044=(r11*sj15);
IkReal x2045=((1.0)*cj11);
IkReal x2046=(cj15*r10);
IkReal x2047=(cj15*r00);
IkReal x2048=(r21*sj15);
IkReal x2049=(r01*sj15);
IkReal x2050=(cj15*r20);
IkReal x2051=((1.0)*x2043);
IkReal x2052=((1.0)*x2042);
evalcond[0]=(((x2042*x2048))+(((-1.0)*r22*x2051))+(((-1.0)*x2050*x2052)));
evalcond[1]=(((x2042*x2049))+(((-1.0)*r02*x2051))+(((-1.0)*x2047*x2052)));
evalcond[2]=((((-1.0)*x2044*x2051))+((x2043*x2046))+(((-1.0)*r12*x2052)));
evalcond[3]=((1.0)+((x2042*x2044))+(((-1.0)*r12*x2051))+(((-1.0)*x2046*x2052)));
evalcond[4]=(((sj11*sj12))+((x2043*x2050))+(((-1.0)*r22*x2052))+(((-1.0)*x2048*x2051))+(((-1.0)*cj12*x2045)));
evalcond[5]=(((x2043*x2047))+(((-1.0)*sj12*x2045))+(((-1.0)*cj12*sj11))+(((-1.0)*r02*x2052))+(((-1.0)*x2049*x2051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x2053=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x2053;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x2053);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x2054=((1.0)*cj15);
IkReal x2055=((((-1.0)*r20*sj15))+(((-1.0)*r21*x2054)));
j14eval[0]=x2055;
j14eval[1]=IKsign(x2055);
j14eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2054))+((r01*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x2056=r11*r11;
IkReal x2057=cj15*cj15;
IkReal x2058=(cj15*r10);
IkReal x2059=(r11*sj15);
IkReal x2060=((((2.0)*x2058*x2059))+(((-1.0)*x2056))+(((-1.0)*x2057*(r10*r10)))+(((-1.0)*(r12*r12)))+((x2056*x2057)));
j14eval[0]=x2060;
j14eval[1]=((IKabs((x2058+(((-1.0)*x2059)))))+(IKabs(r12)));
j14eval[2]=IKsign(x2060);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2061=r11*r11;
IkReal x2062=cj15*cj15;
IkReal x2063=(cj15*r10);
IkReal x2064=(r11*sj15);
CheckValue<IkReal> x2065 = IKatan2WithCheck(IkReal((x2063+(((-1.0)*x2064)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2065.valid){
continue;
}
CheckValue<IkReal> x2066=IKPowWithIntegerCheck(IKsign(((((2.0)*x2063*x2064))+(((-1.0)*x2061))+(((-1.0)*(r12*r12)))+(((-1.0)*x2062*(r10*r10)))+((x2061*x2062)))),-1);
if(!x2066.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2065.value)+(((1.5707963267949)*(x2066.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2067=IKsin(j14);
IkReal x2068=IKcos(j14);
IkReal x2069=(r11*sj15);
IkReal x2070=(cj15*r10);
IkReal x2071=(cj15*r00);
IkReal x2072=(r21*sj15);
IkReal x2073=(r01*sj15);
IkReal x2074=(cj15*r20);
IkReal x2075=((1.0)*x2068);
IkReal x2076=((1.0)*x2067);
evalcond[0]=((((-1.0)*r22*x2075))+(((-1.0)*x2074*x2076))+((x2067*x2072)));
evalcond[1]=((((-1.0)*r02*x2075))+(((-1.0)*x2071*x2076))+((x2067*x2073)));
evalcond[2]=((((-1.0)*r12*x2076))+((x2068*x2070))+(((-1.0)*x2069*x2075)));
evalcond[3]=((-1.0)+((x2067*x2069))+(((-1.0)*x2070*x2076))+(((-1.0)*r12*x2075)));
evalcond[4]=((((-1.0)*r02*x2076))+((x2068*x2071))+((cj12*sj11))+(((-1.0)*x2073*x2075))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r22*x2076))+((x2068*x2074))+(((-1.0)*cj11*cj12))+(((-1.0)*x2072*x2075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2077=((1.0)*cj15);
CheckValue<IkReal> x2078 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj15))+(((-1.0)*r00*x2077)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2078.valid){
continue;
}
CheckValue<IkReal> x2079=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2077))+(((-1.0)*r20*sj15)))),-1);
if(!x2079.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2078.value)+(((1.5707963267949)*(x2079.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2080=IKsin(j14);
IkReal x2081=IKcos(j14);
IkReal x2082=(r11*sj15);
IkReal x2083=(cj15*r10);
IkReal x2084=(cj15*r00);
IkReal x2085=(r21*sj15);
IkReal x2086=(r01*sj15);
IkReal x2087=(cj15*r20);
IkReal x2088=((1.0)*x2081);
IkReal x2089=((1.0)*x2080);
evalcond[0]=((((-1.0)*r22*x2088))+(((-1.0)*x2087*x2089))+((x2080*x2085)));
evalcond[1]=((((-1.0)*r02*x2088))+(((-1.0)*x2084*x2089))+((x2080*x2086)));
evalcond[2]=(((x2081*x2083))+(((-1.0)*x2082*x2088))+(((-1.0)*r12*x2089)));
evalcond[3]=((-1.0)+(((-1.0)*x2083*x2089))+(((-1.0)*r12*x2088))+((x2080*x2082)));
evalcond[4]=((((-1.0)*r02*x2089))+(((-1.0)*x2086*x2088))+((x2081*x2084))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r22*x2089))+(((-1.0)*x2085*x2088))+((x2081*x2087))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x2090 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2090.valid){
continue;
}
CheckValue<IkReal> x2091=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x2091.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2090.value)+(((1.5707963267949)*(x2091.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2092=IKsin(j14);
IkReal x2093=IKcos(j14);
IkReal x2094=(r11*sj15);
IkReal x2095=(cj15*r10);
IkReal x2096=(cj15*r00);
IkReal x2097=(r21*sj15);
IkReal x2098=(r01*sj15);
IkReal x2099=(cj15*r20);
IkReal x2100=((1.0)*x2093);
IkReal x2101=((1.0)*x2092);
evalcond[0]=((((-1.0)*r22*x2100))+(((-1.0)*x2099*x2101))+((x2092*x2097)));
evalcond[1]=((((-1.0)*r02*x2100))+(((-1.0)*x2096*x2101))+((x2092*x2098)));
evalcond[2]=((((-1.0)*r12*x2101))+(((-1.0)*x2094*x2100))+((x2093*x2095)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2100))+((x2092*x2094))+(((-1.0)*x2095*x2101)));
evalcond[4]=((((-1.0)*r02*x2101))+(((-1.0)*x2098*x2100))+((cj12*sj11))+((x2093*x2096))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r22*x2101))+(((-1.0)*x2097*x2100))+((x2093*x2099))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2102=((-1.0)*r00);
IkReal x2104 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2104)==0){
continue;
}
IkReal x2103=pow(x2104,-0.5);
CheckValue<IkReal> x2105 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2102),IKFAST_ATAN2_MAGTHRESH);
if(!x2105.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2105.value));
IkReal gconst91=(r01*x2103);
IkReal gconst92=(x2102*x2103);
CheckValue<IkReal> x2106 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2106.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x2106.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x2107=((-1.0)*r00);
IkReal x2108=x2103;
CheckValue<IkReal> x2110 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2107),IKFAST_ATAN2_MAGTHRESH);
if(!x2110.valid){
continue;
}
IkReal x2109=((-1.0)*(x2110.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst91;
cj15=gconst92;
j15=x2109;
IkReal gconst90=x2109;
IkReal gconst91=(r01*x2108);
IkReal gconst92=(x2107*x2108);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2111=((1.0)*gconst91);
CheckValue<IkReal> x2112=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2111))+(((-1.0)*gconst92*r21)))),-1);
if(!x2112.valid){
continue;
}
CheckValue<IkReal> x2113 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((gconst92*r10*sj10))+((cj10*gconst92*r00))+(((-1.0)*r11*sj10*x2111))+(((-1.0)*cj10*r01*x2111)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2113.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2112.value)))+(x2113.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2114=IKsin(j14);
IkReal x2115=IKcos(j14);
IkReal x2116=((1.0)*cj11);
IkReal x2117=(gconst91*r11);
IkReal x2118=((1.0)*sj10);
IkReal x2119=(gconst92*r10);
IkReal x2120=(gconst91*r01);
IkReal x2121=(cj12*sj11);
IkReal x2122=(gconst92*r00);
IkReal x2123=(gconst91*r21);
IkReal x2124=(gconst92*r20);
IkReal x2125=((1.0)*x2115);
IkReal x2126=((1.0)*x2114);
evalcond[0]=((((-1.0)*r22*x2125))+((x2114*x2123))+(((-1.0)*x2124*x2126)));
evalcond[1]=((((-1.0)*x2119*x2126))+cj10+(((-1.0)*r12*x2125))+((x2114*x2117)));
evalcond[2]=((((-1.0)*x2122*x2126))+((x2114*x2120))+(((-1.0)*r02*x2125))+(((-1.0)*x2118)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r22*x2126))+((x2115*x2124))+(((-1.0)*cj12*x2116))+(((-1.0)*x2123*x2125)));
evalcond[4]=((((-1.0)*x2120*x2125))+(((-1.0)*r02*x2126))+((x2115*x2122))+(((-1.0)*cj10*sj12*x2116))+(((-1.0)*cj10*x2121)));
evalcond[5]=((((-1.0)*x2117*x2125))+(((-1.0)*sj10*sj12*x2116))+(((-1.0)*x2118*x2121))+(((-1.0)*r12*x2126))+((x2115*x2119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2127=((1.0)*gconst92);
CheckValue<IkReal> x2128 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst91*r21*sj10))+(((-1.0)*r20*sj10*x2127)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2128.valid){
continue;
}
CheckValue<IkReal> x2129=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2127)))),-1);
if(!x2129.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2128.value)+(((1.5707963267949)*(x2129.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2130=IKsin(j14);
IkReal x2131=IKcos(j14);
IkReal x2132=((1.0)*cj11);
IkReal x2133=(gconst91*r11);
IkReal x2134=((1.0)*sj10);
IkReal x2135=(gconst92*r10);
IkReal x2136=(gconst91*r01);
IkReal x2137=(cj12*sj11);
IkReal x2138=(gconst92*r00);
IkReal x2139=(gconst91*r21);
IkReal x2140=(gconst92*r20);
IkReal x2141=((1.0)*x2131);
IkReal x2142=((1.0)*x2130);
evalcond[0]=((((-1.0)*x2140*x2142))+(((-1.0)*r22*x2141))+((x2130*x2139)));
evalcond[1]=((((-1.0)*x2135*x2142))+cj10+(((-1.0)*r12*x2141))+((x2130*x2133)));
evalcond[2]=((((-1.0)*x2138*x2142))+(((-1.0)*x2134))+(((-1.0)*r02*x2141))+((x2130*x2136)));
evalcond[3]=(((sj11*sj12))+((x2131*x2140))+(((-1.0)*r22*x2142))+(((-1.0)*cj12*x2132))+(((-1.0)*x2139*x2141)));
evalcond[4]=((((-1.0)*x2136*x2141))+(((-1.0)*cj10*x2137))+((x2131*x2138))+(((-1.0)*cj10*sj12*x2132))+(((-1.0)*r02*x2142)));
evalcond[5]=(((x2131*x2135))+(((-1.0)*sj10*sj12*x2132))+(((-1.0)*x2134*x2137))+(((-1.0)*x2133*x2141))+(((-1.0)*r12*x2142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2143=((-1.0)*r01);
IkReal x2145 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2145)==0){
continue;
}
IkReal x2144=pow(x2145,-0.5);
CheckValue<IkReal> x2146 = IKatan2WithCheck(IkReal(x2143),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2146.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2146.value))));
IkReal gconst94=(x2143*x2144);
IkReal gconst95=((1.0)*r00*x2144);
CheckValue<IkReal> x2147 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2147.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x2147.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[5];
IkReal x2148=((-1.0)*r01);
CheckValue<IkReal> x2151 = IKatan2WithCheck(IkReal(x2148),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2151.valid){
continue;
}
IkReal x2149=((1.0)*(x2151.value));
IkReal x2150=x2144;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst94;
cj15=gconst95;
j15=((3.14159265)+(((-1.0)*x2149)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2149)));
IkReal gconst94=(x2148*x2150);
IkReal gconst95=((1.0)*r00*x2150);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=cj10;
j14eval[3]=r22;
j14eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  || IKabs(j14eval[4]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x2152=((-1.0)*r01);
CheckValue<IkReal> x2155 = IKatan2WithCheck(IkReal(x2152),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2155.valid){
continue;
}
IkReal x2153=((1.0)*(x2155.value));
IkReal x2154=x2144;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst94;
cj15=gconst95;
j15=((3.14159265)+(((-1.0)*x2153)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2153)));
IkReal gconst94=(x2152*x2154);
IkReal gconst95=((1.0)*r00*x2154);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x2156=((-1.0)*r01);
CheckValue<IkReal> x2159 = IKatan2WithCheck(IkReal(x2156),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2159.valid){
continue;
}
IkReal x2157=((1.0)*(x2159.value));
IkReal x2158=x2144;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst94;
cj15=gconst95;
j15=((3.14159265)+(((-1.0)*x2157)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2157)));
IkReal gconst94=(x2156*x2158);
IkReal gconst95=((1.0)*r00*x2158);
IkReal x2160=r02*r02;
IkReal x2161=(r12*sj10);
IkReal x2162=x2144;
IkReal x2163=(cj10*x2162);
j14eval[0]=((IKabs(((((-1.0)*x2161))+(((-1.0)*cj10*r02)))))+(IKabs((((r02*x2161*x2162))+(((-1.0)*x2163))+((x2160*x2163))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2164=((1.0)*cj10);
IkReal x2165=((1.0)*sj10);
CheckValue<IkReal> x2166 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2165))+(((-1.0)*r02*x2164)))),IkReal(((((-1.0)*gconst94*r01*x2164))+((cj10*gconst95*r00))+(((-1.0)*gconst94*r11*x2165))+((gconst95*r10*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2166.valid){
continue;
}
CheckValue<IkReal> x2167=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2167.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2166.value)+(((1.5707963267949)*(x2167.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2168=IKsin(j14);
IkReal x2169=IKcos(j14);
IkReal x2170=((1.0)*cj11);
IkReal x2171=((1.0)*sj10);
IkReal x2172=(gconst94*r11);
IkReal x2173=(cj12*sj11);
IkReal x2174=((1.0)*x2169);
IkReal x2175=((1.0)*x2168);
IkReal x2176=(gconst95*x2169);
IkReal x2177=(gconst94*x2168);
evalcond[0]=(((r21*x2177))+(((-1.0)*gconst95*r20*x2175))+(((-1.0)*r22*x2174)));
evalcond[1]=((((-1.0)*gconst95*r10*x2175))+cj10+((x2168*x2172))+(((-1.0)*r12*x2174)));
evalcond[2]=(((r01*x2177))+(((-1.0)*gconst95*r00*x2175))+(((-1.0)*r02*x2174))+(((-1.0)*x2171)));
evalcond[3]=(((sj11*sj12))+((r20*x2176))+(((-1.0)*cj12*x2170))+(((-1.0)*gconst94*r21*x2174))+(((-1.0)*r22*x2175)));
evalcond[4]=((((-1.0)*cj10*sj12*x2170))+((r00*x2176))+(((-1.0)*cj10*x2173))+(((-1.0)*r02*x2175))+(((-1.0)*gconst94*r01*x2174)));
evalcond[5]=((((-1.0)*x2171*x2173))+(((-1.0)*sj10*sj12*x2170))+((r10*x2176))+(((-1.0)*x2172*x2174))+(((-1.0)*r12*x2175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2178=((1.0)*gconst95);
CheckValue<IkReal> x2179=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2178)))),-1);
if(!x2179.valid){
continue;
}
CheckValue<IkReal> x2180 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x2178))+((gconst94*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2180.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2179.value)))+(x2180.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2181=IKsin(j14);
IkReal x2182=IKcos(j14);
IkReal x2183=((1.0)*cj11);
IkReal x2184=((1.0)*sj10);
IkReal x2185=(gconst94*r11);
IkReal x2186=(cj12*sj11);
IkReal x2187=((1.0)*x2182);
IkReal x2188=((1.0)*x2181);
IkReal x2189=(gconst95*x2182);
IkReal x2190=(gconst94*x2181);
evalcond[0]=((((-1.0)*gconst95*r20*x2188))+(((-1.0)*r22*x2187))+((r21*x2190)));
evalcond[1]=(cj10+((x2181*x2185))+(((-1.0)*gconst95*r10*x2188))+(((-1.0)*r12*x2187)));
evalcond[2]=((((-1.0)*r02*x2187))+(((-1.0)*x2184))+(((-1.0)*gconst95*r00*x2188))+((r01*x2190)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*gconst94*r21*x2187))+(((-1.0)*cj12*x2183))+((r20*x2189))+(((-1.0)*r22*x2188)));
evalcond[4]=((((-1.0)*gconst94*r01*x2187))+(((-1.0)*r02*x2188))+(((-1.0)*cj10*x2186))+(((-1.0)*cj10*sj12*x2183))+((r00*x2189)));
evalcond[5]=((((-1.0)*x2185*x2187))+(((-1.0)*sj10*sj12*x2183))+(((-1.0)*x2184*x2186))+(((-1.0)*r12*x2188))+((r10*x2189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2191=((1.0)*gconst95);
CheckValue<IkReal> x2192=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2191))+(((-1.0)*gconst94*r00)))),-1);
if(!x2192.valid){
continue;
}
CheckValue<IkReal> x2193 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst94*r21))+(((-1.0)*cj10*r20*x2191)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2193.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2192.value)))+(x2193.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2194=IKsin(j14);
IkReal x2195=IKcos(j14);
IkReal x2196=((1.0)*cj11);
IkReal x2197=((1.0)*sj10);
IkReal x2198=(gconst94*r11);
IkReal x2199=(cj12*sj11);
IkReal x2200=((1.0)*x2195);
IkReal x2201=((1.0)*x2194);
IkReal x2202=(gconst95*x2195);
IkReal x2203=(gconst94*x2194);
evalcond[0]=((((-1.0)*r22*x2200))+(((-1.0)*gconst95*r20*x2201))+((r21*x2203)));
evalcond[1]=(((x2194*x2198))+(((-1.0)*r12*x2200))+cj10+(((-1.0)*gconst95*r10*x2201)));
evalcond[2]=((((-1.0)*gconst95*r00*x2201))+((r01*x2203))+(((-1.0)*x2197))+(((-1.0)*r02*x2200)));
evalcond[3]=(((sj11*sj12))+((r20*x2202))+(((-1.0)*cj12*x2196))+(((-1.0)*r22*x2201))+(((-1.0)*gconst94*r21*x2200)));
evalcond[4]=(((r00*x2202))+(((-1.0)*gconst94*r01*x2200))+(((-1.0)*cj10*x2199))+(((-1.0)*cj10*sj12*x2196))+(((-1.0)*r02*x2201)));
evalcond[5]=((((-1.0)*r12*x2201))+(((-1.0)*x2197*x2199))+(((-1.0)*x2198*x2200))+((r10*x2202))+(((-1.0)*sj10*sj12*x2196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x2204=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x2204;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x2204);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x2205=((1.0)*cj15);
IkReal x2206=((((-1.0)*r11*x2205))+(((-1.0)*r10*sj15)));
j14eval[0]=x2206;
j14eval[1]=IKsign(x2206);
j14eval[2]=((IKabs(((((-1.0)*r20*x2205))+((r21*sj15)))))+(IKabs(r22)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x2207=r01*r01;
IkReal x2208=cj15*cj15;
IkReal x2209=(r01*sj15);
IkReal x2210=(cj15*r00);
IkReal x2211=((((-1.0)*x2207))+(((2.0)*x2209*x2210))+(((-1.0)*(r02*r02)))+((x2207*x2208))+(((-1.0)*x2208*(r00*r00))));
j14eval[0]=x2211;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x2209))+x2210))));
j14eval[2]=IKsign(x2211);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2212=r01*r01;
IkReal x2213=cj15*cj15;
IkReal x2214=(r01*sj15);
IkReal x2215=(cj15*r00);
CheckValue<IkReal> x2216=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2212))+(((-1.0)*(r02*r02)))+(((2.0)*x2214*x2215))+((x2212*x2213))+(((-1.0)*x2213*(r00*r00))))),-1);
if(!x2216.valid){
continue;
}
CheckValue<IkReal> x2217 = IKatan2WithCheck(IkReal(((((-1.0)*x2214))+x2215)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2217.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2216.value)))+(x2217.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2218=IKsin(j14);
IkReal x2219=IKcos(j14);
IkReal x2220=(r11*sj15);
IkReal x2221=((1.0)*cj11);
IkReal x2222=(cj15*r10);
IkReal x2223=(cj15*r00);
IkReal x2224=(r21*sj15);
IkReal x2225=(r01*sj15);
IkReal x2226=(cj15*r20);
IkReal x2227=((1.0)*x2219);
IkReal x2228=((1.0)*x2218);
evalcond[0]=((((-1.0)*x2226*x2228))+((x2218*x2224))+(((-1.0)*r22*x2227)));
evalcond[1]=((((-1.0)*x2222*x2228))+((x2218*x2220))+(((-1.0)*r12*x2227)));
evalcond[2]=((((-1.0)*x2225*x2227))+(((-1.0)*r02*x2228))+((x2219*x2223)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2227))+((x2218*x2225))+(((-1.0)*x2223*x2228)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x2224*x2227))+((x2219*x2226))+(((-1.0)*r22*x2228))+(((-1.0)*cj12*x2221)));
evalcond[5]=((((-1.0)*sj12*x2221))+(((-1.0)*x2220*x2227))+(((-1.0)*cj12*sj11))+(((-1.0)*r12*x2228))+((x2219*x2222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2229=((1.0)*cj15);
CheckValue<IkReal> x2230=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2229))+(((-1.0)*r10*sj15)))),-1);
if(!x2230.valid){
continue;
}
CheckValue<IkReal> x2231 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2229))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2231.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2230.value)))+(x2231.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2232=IKsin(j14);
IkReal x2233=IKcos(j14);
IkReal x2234=(r11*sj15);
IkReal x2235=((1.0)*cj11);
IkReal x2236=(cj15*r10);
IkReal x2237=(cj15*r00);
IkReal x2238=(r21*sj15);
IkReal x2239=(r01*sj15);
IkReal x2240=(cj15*r20);
IkReal x2241=((1.0)*x2233);
IkReal x2242=((1.0)*x2232);
evalcond[0]=(((x2232*x2238))+(((-1.0)*r22*x2241))+(((-1.0)*x2240*x2242)));
evalcond[1]=(((x2232*x2234))+(((-1.0)*x2236*x2242))+(((-1.0)*r12*x2241)));
evalcond[2]=((((-1.0)*r02*x2242))+((x2233*x2237))+(((-1.0)*x2239*x2241)));
evalcond[3]=((-1.0)+(((-1.0)*x2237*x2242))+((x2232*x2239))+(((-1.0)*r02*x2241)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r22*x2242))+((x2233*x2240))+(((-1.0)*x2238*x2241))+(((-1.0)*cj12*x2235)));
evalcond[5]=((((-1.0)*sj12*x2235))+(((-1.0)*x2234*x2241))+(((-1.0)*cj12*sj11))+((x2233*x2236))+(((-1.0)*r12*x2242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x2243=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x2243.valid){
continue;
}
CheckValue<IkReal> x2244 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2244.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2243.value)))+(x2244.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2245=IKsin(j14);
IkReal x2246=IKcos(j14);
IkReal x2247=(r11*sj15);
IkReal x2248=((1.0)*cj11);
IkReal x2249=(cj15*r10);
IkReal x2250=(cj15*r00);
IkReal x2251=(r21*sj15);
IkReal x2252=(r01*sj15);
IkReal x2253=(cj15*r20);
IkReal x2254=((1.0)*x2246);
IkReal x2255=((1.0)*x2245);
evalcond[0]=((((-1.0)*r22*x2254))+((x2245*x2251))+(((-1.0)*x2253*x2255)));
evalcond[1]=((((-1.0)*x2249*x2255))+(((-1.0)*r12*x2254))+((x2245*x2247)));
evalcond[2]=(((x2246*x2250))+(((-1.0)*r02*x2255))+(((-1.0)*x2252*x2254)));
evalcond[3]=((-1.0)+((x2245*x2252))+(((-1.0)*r02*x2254))+(((-1.0)*x2250*x2255)));
evalcond[4]=(((sj11*sj12))+((x2246*x2253))+(((-1.0)*cj12*x2248))+(((-1.0)*r22*x2255))+(((-1.0)*x2251*x2254)));
evalcond[5]=((((-1.0)*sj12*x2248))+((x2246*x2249))+(((-1.0)*r12*x2255))+(((-1.0)*cj12*sj11))+(((-1.0)*x2247*x2254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x2256=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x2256;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x2256);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x2257=((1.0)*cj15);
IkReal x2258=((((-1.0)*r21*x2257))+(((-1.0)*r20*sj15)));
j14eval[0]=x2258;
j14eval[1]=IKsign(x2258);
j14eval[2]=((IKabs((((r11*sj15))+(((-1.0)*r10*x2257)))))+(IKabs(r12)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x2259=cj15*cj15;
IkReal x2260=r01*r01;
IkReal x2261=(cj15*r00);
IkReal x2262=(r01*sj15);
IkReal x2263=(x2260+(((-1.0)*x2259*x2260))+((x2259*(r00*r00)))+(((-2.0)*x2261*x2262))+(r02*r02));
j14eval[0]=x2263;
j14eval[1]=((IKabs((x2261+(((-1.0)*x2262)))))+(IKabs(r02)));
j14eval[2]=IKsign(x2263);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2264=cj15*cj15;
IkReal x2265=r01*r01;
IkReal x2266=(r01*sj15);
IkReal x2267=(cj15*r00);
CheckValue<IkReal> x2268 = IKatan2WithCheck(IkReal((x2267+(((-1.0)*x2266)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2268.valid){
continue;
}
CheckValue<IkReal> x2269=IKPowWithIntegerCheck(IKsign((x2265+(((-2.0)*x2266*x2267))+((x2264*(r00*r00)))+(r02*r02)+(((-1.0)*x2264*x2265)))),-1);
if(!x2269.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2268.value)+(((1.5707963267949)*(x2269.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2270=IKsin(j14);
IkReal x2271=IKcos(j14);
IkReal x2272=(r11*sj15);
IkReal x2273=(cj15*r10);
IkReal x2274=(cj15*r00);
IkReal x2275=(r21*sj15);
IkReal x2276=(r01*sj15);
IkReal x2277=(cj15*r20);
IkReal x2278=((1.0)*x2271);
IkReal x2279=((1.0)*x2270);
evalcond[0]=(((x2270*x2275))+(((-1.0)*r22*x2278))+(((-1.0)*x2277*x2279)));
evalcond[1]=(((x2270*x2272))+(((-1.0)*x2273*x2279))+(((-1.0)*r12*x2278)));
evalcond[2]=((((-1.0)*r02*x2279))+(((-1.0)*x2276*x2278))+((x2271*x2274)));
evalcond[3]=((1.0)+(((-1.0)*x2274*x2279))+((x2270*x2276))+(((-1.0)*r02*x2278)));
evalcond[4]=(((cj12*sj11))+(((-1.0)*x2272*x2278))+(((-1.0)*r12*x2279))+((cj11*sj12))+((x2271*x2273)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x2275*x2278))+(((-1.0)*r22*x2279))+(((-1.0)*cj11*cj12))+((x2271*x2277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2280=((1.0)*cj15);
CheckValue<IkReal> x2281=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15))+(((-1.0)*r21*x2280)))),-1);
if(!x2281.valid){
continue;
}
CheckValue<IkReal> x2282 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*r10*x2280)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2282.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2281.value)))+(x2282.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2283=IKsin(j14);
IkReal x2284=IKcos(j14);
IkReal x2285=(r11*sj15);
IkReal x2286=(cj15*r10);
IkReal x2287=(cj15*r00);
IkReal x2288=(r21*sj15);
IkReal x2289=(r01*sj15);
IkReal x2290=(cj15*r20);
IkReal x2291=((1.0)*x2284);
IkReal x2292=((1.0)*x2283);
evalcond[0]=(((x2283*x2288))+(((-1.0)*x2290*x2292))+(((-1.0)*r22*x2291)));
evalcond[1]=((((-1.0)*x2286*x2292))+((x2283*x2285))+(((-1.0)*r12*x2291)));
evalcond[2]=((((-1.0)*x2289*x2291))+(((-1.0)*r02*x2292))+((x2284*x2287)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2291))+(((-1.0)*x2287*x2292))+((x2283*x2289)));
evalcond[4]=((((-1.0)*x2285*x2291))+(((-1.0)*r12*x2292))+((cj12*sj11))+((cj11*sj12))+((x2284*x2286)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x2288*x2291))+((x2284*x2290))+(((-1.0)*r22*x2292))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x2293=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x2293.valid){
continue;
}
CheckValue<IkReal> x2294 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2294.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2293.value)))+(x2294.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2295=IKsin(j14);
IkReal x2296=IKcos(j14);
IkReal x2297=(r11*sj15);
IkReal x2298=(cj15*r10);
IkReal x2299=(cj15*r00);
IkReal x2300=(r21*sj15);
IkReal x2301=(r01*sj15);
IkReal x2302=(cj15*r20);
IkReal x2303=((1.0)*x2296);
IkReal x2304=((1.0)*x2295);
evalcond[0]=((((-1.0)*r22*x2303))+((x2295*x2300))+(((-1.0)*x2302*x2304)));
evalcond[1]=(((x2295*x2297))+(((-1.0)*x2298*x2304))+(((-1.0)*r12*x2303)));
evalcond[2]=(((x2296*x2299))+(((-1.0)*x2301*x2303))+(((-1.0)*r02*x2304)));
evalcond[3]=((1.0)+((x2295*x2301))+(((-1.0)*x2299*x2304))+(((-1.0)*r02*x2303)));
evalcond[4]=(((x2296*x2298))+(((-1.0)*x2297*x2303))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*r12*x2304)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r22*x2304))+(((-1.0)*x2300*x2303))+((x2296*x2302))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x2305=((-1.0)*px);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2305);
rxp1_1=(px*r21);
rxp1_2=(r11*x2305);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x2306=((-1.0)*px);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2306);
rxp1_1=(px*r21);
rxp1_2=(r11*x2306);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=((((-1.0)*r21*sj15))+((cj15*r20)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x2307=((-1.0)*px);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2307);
rxp1_1=(px*r21);
rxp1_2=(r11*x2307);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=(((cj15*r10))+(((-1.0)*r11*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x2310=IKPowWithIntegerCheck((((cj15*r10))+(((-1.0)*r11*sj15))),-1);
if(!x2310.valid){
continue;
}
IkReal x2308=x2310.value;
IkReal x2309=(sj10*x2308);
cj14array[0]=(((cj12*sj11*x2309))+((cj11*sj12*x2309)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x2311=IKsin(j14);
IkReal x2312=IKcos(j14);
IkReal x2313=(sj15*x2311);
IkReal x2314=((1.0)*x2312);
IkReal x2315=((1.0)*cj15*x2311);
evalcond[0]=((-1.0)*r02*x2311);
evalcond[1]=((((-1.0)*sj10))+(((-1.0)*r02*x2314)));
evalcond[2]=((((-1.0)*r20*x2315))+((r21*x2313)));
evalcond[3]=(((r11*x2313))+(((-1.0)*r10*x2315)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r21*sj15*x2314))+((cj15*r20*x2312))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x2317=IKPowWithIntegerCheck(((((-1.0)*r21*sj15))+((cj15*r20))),-1);
if(!x2317.valid){
continue;
}
IkReal x2316=x2317.value;
cj14array[0]=((((-1.0)*sj11*sj12*x2316))+((cj11*cj12*x2316)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x2318=IKsin(j14);
IkReal x2319=IKcos(j14);
IkReal x2320=(cj15*r10);
IkReal x2321=((1.0)*sj10);
IkReal x2322=(sj15*x2318);
IkReal x2323=((1.0)*x2319);
IkReal x2324=((1.0)*x2318);
evalcond[0]=((-1.0)*r02*x2318);
evalcond[1]=((((-1.0)*r02*x2323))+(((-1.0)*x2321)));
evalcond[2]=((((-1.0)*cj15*r20*x2324))+((r21*x2322)));
evalcond[3]=(((r11*x2322))+(((-1.0)*x2320*x2324)));
evalcond[4]=(((x2319*x2320))+(((-1.0)*cj12*sj11*x2321))+(((-1.0)*r11*sj15*x2323))+(((-1.0)*cj11*sj12*x2321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x2325=IKPowWithIntegerCheck(r02,-1);
if(!x2325.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x2325.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x2326=IKsin(j14);
IkReal x2327=IKcos(j14);
IkReal x2328=(cj15*r10);
IkReal x2329=((1.0)*cj12);
IkReal x2330=(cj15*r20);
IkReal x2331=(sj15*x2326);
IkReal x2332=((1.0)*x2326);
IkReal x2333=((1.0)*sj15*x2327);
evalcond[0]=((-1.0)*r02*x2326);
evalcond[1]=(((r21*x2331))+(((-1.0)*x2330*x2332)));
evalcond[2]=((((-1.0)*x2328*x2332))+((r11*x2331)));
evalcond[3]=(((sj11*sj12))+((x2327*x2330))+(((-1.0)*cj11*x2329))+(((-1.0)*r21*x2333)));
evalcond[4]=((((-1.0)*cj11*sj10*sj12))+(((-1.0)*sj10*sj11*x2329))+((x2327*x2328))+(((-1.0)*r11*x2333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2334=((1.0)*sj15);
CheckValue<IkReal> x2335=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj15*r21))+(((-1.0)*r20*x2334)))),-1);
if(!x2335.valid){
continue;
}
CheckValue<IkReal> x2336 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x2334))+(((-1.0)*cj10*r01*x2334))+((cj15*r10*sj10))+((cj10*cj15*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2336.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2335.value)))+(x2336.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2337=IKsin(j14);
IkReal x2338=IKcos(j14);
IkReal x2339=(r11*sj15);
IkReal x2340=((1.0)*cj11);
IkReal x2341=((1.0)*sj10);
IkReal x2342=(cj12*sj11);
IkReal x2343=(r21*sj15);
IkReal x2344=(r01*sj15);
IkReal x2345=((1.0)*x2338);
IkReal x2346=((1.0)*x2337);
IkReal x2347=(cj15*x2338);
evalcond[0]=((((-1.0)*r22*x2345))+((x2337*x2343))+(((-1.0)*cj15*r20*x2346)));
evalcond[1]=(((x2337*x2339))+cj10+(((-1.0)*r12*x2345))+(((-1.0)*cj15*r10*x2346)));
evalcond[2]=((((-1.0)*r02*x2345))+((x2337*x2344))+(((-1.0)*cj15*r00*x2346))+(((-1.0)*x2341)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x2340))+(((-1.0)*r22*x2346))+((r20*x2347))+(((-1.0)*x2343*x2345)));
evalcond[4]=((((-1.0)*x2344*x2345))+((r00*x2347))+(((-1.0)*cj10*sj12*x2340))+(((-1.0)*r02*x2346))+(((-1.0)*cj10*x2342)));
evalcond[5]=((((-1.0)*x2339*x2345))+((r10*x2347))+(((-1.0)*x2341*x2342))+(((-1.0)*r12*x2346))+(((-1.0)*sj10*sj12*x2340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2348=((1.0)*cj15);
CheckValue<IkReal> x2349=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2348))+(((-1.0)*r10*sj15)))),-1);
if(!x2349.valid){
continue;
}
CheckValue<IkReal> x2350 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x2348))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2350.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2349.value)))+(x2350.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2351=IKsin(j14);
IkReal x2352=IKcos(j14);
IkReal x2353=(r11*sj15);
IkReal x2354=((1.0)*cj11);
IkReal x2355=((1.0)*sj10);
IkReal x2356=(cj12*sj11);
IkReal x2357=(r21*sj15);
IkReal x2358=(r01*sj15);
IkReal x2359=((1.0)*x2352);
IkReal x2360=((1.0)*x2351);
IkReal x2361=(cj15*x2352);
evalcond[0]=((((-1.0)*cj15*r20*x2360))+((x2351*x2357))+(((-1.0)*r22*x2359)));
evalcond[1]=((((-1.0)*cj15*r10*x2360))+cj10+((x2351*x2353))+(((-1.0)*r12*x2359)));
evalcond[2]=((((-1.0)*cj15*r00*x2360))+((x2351*x2358))+(((-1.0)*r02*x2359))+(((-1.0)*x2355)));
evalcond[3]=(((sj11*sj12))+((r20*x2361))+(((-1.0)*x2357*x2359))+(((-1.0)*cj12*x2354))+(((-1.0)*r22*x2360)));
evalcond[4]=((((-1.0)*x2358*x2359))+(((-1.0)*cj10*sj12*x2354))+(((-1.0)*cj10*x2356))+((r00*x2361))+(((-1.0)*r02*x2360)));
evalcond[5]=((((-1.0)*x2355*x2356))+((r10*x2361))+(((-1.0)*x2353*x2359))+(((-1.0)*r12*x2360))+(((-1.0)*sj10*sj12*x2354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2362=((1.0)*cj15);
CheckValue<IkReal> x2363 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x2362))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2363.valid){
continue;
}
CheckValue<IkReal> x2364=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2362))+(((-1.0)*r00*sj15)))),-1);
if(!x2364.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2363.value)+(((1.5707963267949)*(x2364.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2365=IKsin(j14);
IkReal x2366=IKcos(j14);
IkReal x2367=(r11*sj15);
IkReal x2368=((1.0)*cj11);
IkReal x2369=((1.0)*sj10);
IkReal x2370=(cj12*sj11);
IkReal x2371=(r21*sj15);
IkReal x2372=(r01*sj15);
IkReal x2373=((1.0)*x2366);
IkReal x2374=((1.0)*x2365);
IkReal x2375=(cj15*x2366);
evalcond[0]=(((x2365*x2371))+(((-1.0)*cj15*r20*x2374))+(((-1.0)*r22*x2373)));
evalcond[1]=((((-1.0)*cj15*r10*x2374))+((x2365*x2367))+cj10+(((-1.0)*r12*x2373)));
evalcond[2]=((((-1.0)*r02*x2373))+((x2365*x2372))+(((-1.0)*x2369))+(((-1.0)*cj15*r00*x2374)));
evalcond[3]=(((sj11*sj12))+((r20*x2375))+(((-1.0)*x2371*x2373))+(((-1.0)*r22*x2374))+(((-1.0)*cj12*x2368)));
evalcond[4]=((((-1.0)*cj10*x2370))+(((-1.0)*r02*x2374))+(((-1.0)*cj10*sj12*x2368))+(((-1.0)*x2372*x2373))+((r00*x2375)));
evalcond[5]=(((r10*x2375))+(((-1.0)*x2369*x2370))+(((-1.0)*sj10*sj12*x2368))+(((-1.0)*x2367*x2373))+(((-1.0)*r12*x2374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2376=cj15*cj15;
IkReal x2377=r21*r21;
IkReal x2378=(r21*sj15);
IkReal x2379=(sj11*sj12);
IkReal x2380=(cj15*r20);
IkReal x2381=((1.0)*cj11*cj12);
CheckValue<IkReal> x2382 = IKatan2WithCheck(IkReal((((r22*x2379))+(((-1.0)*r22*x2381)))),IkReal((((x2378*x2379))+(((-1.0)*x2378*x2381))+((cj11*cj12*x2380))+(((-1.0)*x2379*x2380)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2382.valid){
continue;
}
CheckValue<IkReal> x2383=IKPowWithIntegerCheck(IKsign(((r22*r22)+x2377+(((-1.0)*x2376*x2377))+((x2376*(r20*r20)))+(((-2.0)*x2378*x2380)))),-1);
if(!x2383.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2382.value)+(((1.5707963267949)*(x2383.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
IkReal x2384=IKsin(j14);
IkReal x2385=IKcos(j14);
IkReal x2386=(r21*sj15);
IkReal x2387=((1.0)*r22);
IkReal x2388=(cj15*r20);
evalcond[0]=(((x2384*x2386))+(((-1.0)*x2384*x2388))+(((-1.0)*x2385*x2387)));
evalcond[1]=(((sj11*sj12))+((x2385*x2388))+(((-1.0)*x2385*x2386))+(((-1.0)*x2384*x2387))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2389=(cj15*sj14);
IkReal x2390=(sj14*sj15);
if( IKabs((((r01*x2390))+(((-1.0)*r00*x2389))+(((-1.0)*cj14*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj14*r12))+((r10*x2389))+(((-1.0)*r11*x2390)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2390))+(((-1.0)*r00*x2389))+(((-1.0)*cj14*r02))))+IKsqr((((cj14*r12))+((r10*x2389))+(((-1.0)*r11*x2390))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r01*x2390))+(((-1.0)*r00*x2389))+(((-1.0)*cj14*r02))), (((cj14*r12))+((r10*x2389))+(((-1.0)*r11*x2390))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x2391=IKcos(j10);
IkReal x2392=IKsin(j10);
IkReal x2393=(sj11*sj12);
IkReal x2394=((1.0)*cj14);
IkReal x2395=(cj15*r00);
IkReal x2396=(sj14*sj15);
IkReal x2397=(cj11*cj12);
IkReal x2398=((1.0)*sj14);
IkReal x2399=(cj15*r10);
IkReal x2400=(r10*sj15);
IkReal x2401=((1.0)*sj12);
IkReal x2402=(cj12*sj11);
IkReal x2403=(r00*sj15);
IkReal x2404=(cj15*r11);
IkReal x2405=(cj15*r01);
IkReal x2406=(cj11*x2392);
IkReal x2407=((0.21325)*x2391);
IkReal x2408=((1.0)*x2391);
IkReal x2409=(cj11*x2391);
IkReal x2410=((1.0)*x2392);
evalcond[0]=(x2391+(((-1.0)*x2398*x2399))+((r11*x2396))+(((-1.0)*r12*x2394)));
evalcond[1]=((((-1.0)*r02*x2394))+((r01*x2396))+(((-1.0)*x2410))+(((-1.0)*x2395*x2398)));
evalcond[2]=(x2405+x2403+(((-1.0)*x2397*x2408))+((x2391*x2393)));
evalcond[3]=(((x2392*x2393))+x2404+x2400+(((-1.0)*x2397*x2410)));
evalcond[4]=((((-1.0)*x2401*x2409))+(((-1.0)*r02*x2398))+(((-1.0)*x2402*x2408))+(((-1.0)*r01*sj15*x2394))+((cj14*x2395)));
evalcond[5]=((((-1.0)*x2401*x2406))+(((-1.0)*x2402*x2410))+(((-1.0)*r11*sj15*x2394))+((cj14*x2399))+(((-1.0)*r12*x2398)));
evalcond[6]=((((-1.0)*x2393*x2407))+(((0.24365)*x2409))+(((-1.0)*px))+(((-0.08535)*x2403))+(((-0.08535)*x2405))+((x2397*x2407))+(((-0.11235)*x2392)));
evalcond[7]=((((0.21325)*x2392*x2397))+(((0.24365)*x2406))+(((-1.0)*py))+(((-0.08535)*x2400))+(((-0.08535)*x2404))+(((0.11235)*x2391))+(((-0.21325)*x2392*x2393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x2411=((1.0)*cj15);
IkReal x2412=((1.0)*sj15);
CheckValue<IkReal> x2413=IKPowWithIntegerCheck(IKsign((((sj11*sj12))+(((-1.0)*cj11*cj12)))),-1);
if(!x2413.valid){
continue;
}
CheckValue<IkReal> x2414 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2411))+(((-1.0)*r10*x2412)))),IkReal(((((-1.0)*r00*x2412))+(((-1.0)*r01*x2411)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2414.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2413.value)))+(x2414.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x2415=IKcos(j10);
IkReal x2416=IKsin(j10);
IkReal x2417=(sj11*sj12);
IkReal x2418=(cj11*cj12);
IkReal x2419=(r10*sj15);
IkReal x2420=(r00*sj15);
IkReal x2421=((0.08535)*cj15);
IkReal x2422=(cj11*x2416);
IkReal x2423=((0.21325)*x2415);
evalcond[0]=(((cj15*r01))+x2420+((x2415*x2417))+(((-1.0)*x2415*x2418)));
evalcond[1]=(x2419+((cj15*r11))+(((-1.0)*x2416*x2418))+((x2416*x2417)));
evalcond[2]=((((-1.0)*r01*x2421))+((x2418*x2423))+(((-1.0)*px))+(((0.24365)*cj11*x2415))+(((-0.11235)*x2416))+(((-1.0)*x2417*x2423))+(((-0.08535)*x2420)));
evalcond[3]=((((0.24365)*x2422))+(((-1.0)*r11*x2421))+(((0.11235)*x2415))+(((-1.0)*py))+(((-0.21325)*x2416*x2417))+(((-0.08535)*x2419))+(((0.21325)*x2416*x2418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x2424=((1.0)*cj15);
IkReal x2425=((((-1.0)*r01*x2424))+(((-1.0)*r00*sj15)));
j14eval[0]=x2425;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x2424))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x2425);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x2426=((1.0)*cj15);
IkReal x2427=((((-1.0)*r11*x2426))+(((-1.0)*r10*sj15)));
j14eval[0]=x2427;
j14eval[1]=((IKabs((((r21*sj10*sj15))+(((-1.0)*r20*sj10*x2426)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x2427);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x2428=((1.0)*sj15);
IkReal x2429=((((-1.0)*cj15*r21))+(((-1.0)*r20*x2428)));
j14eval[0]=x2429;
j14eval[1]=((IKabs(((((-1.0)*r11*sj10*x2428))+((cj15*r10*sj10))+(((-1.0)*cj10*r01*x2428))+((cj10*cj15*r00)))))+(IKabs(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02))))));
j14eval[2]=IKsign(x2429);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2430=((-1.0)*r20);
IkReal x2432 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2432)==0){
continue;
}
IkReal x2431=pow(x2432,-0.5);
CheckValue<IkReal> x2433 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2430),IKFAST_ATAN2_MAGTHRESH);
if(!x2433.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2433.value));
IkReal gconst79=(r21*x2431);
IkReal gconst80=(x2430*x2431);
CheckValue<IkReal> x2434 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2434.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x2434.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x2435=((-1.0)*r20);
IkReal x2436=x2431;
CheckValue<IkReal> x2438 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2435),IKFAST_ATAN2_MAGTHRESH);
if(!x2438.valid){
continue;
}
IkReal x2437=((-1.0)*(x2438.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst79;
cj15=gconst80;
j15=x2437;
IkReal gconst78=x2437;
IkReal gconst79=(r21*x2436);
IkReal gconst80=(x2435*x2436);
j14eval[0]=cj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x2439=((-1.0)*r20);
IkReal x2440=x2431;
CheckValue<IkReal> x2442 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2439),IKFAST_ATAN2_MAGTHRESH);
if(!x2442.valid){
continue;
}
IkReal x2441=((-1.0)*(x2442.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst79;
cj15=gconst80;
j15=x2441;
IkReal gconst78=x2441;
IkReal gconst79=(r21*x2440);
IkReal gconst80=(x2439*x2440);
j14eval[0]=sj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x2443=((-1.0)*r20);
IkReal x2444=x2431;
CheckValue<IkReal> x2446 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2443),IKFAST_ATAN2_MAGTHRESH);
if(!x2446.valid){
continue;
}
IkReal x2445=((-1.0)*(x2446.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst79;
cj15=gconst80;
j15=x2445;
IkReal gconst78=x2445;
IkReal gconst79=(r21*x2444);
IkReal gconst80=(x2443*x2444);
IkReal x2447=r22*r22;
CheckValue<IkReal> x2450=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2447))),-1);
if(!x2450.valid){
continue;
}
IkReal x2448=x2450.value;
IkReal x2449=(x2447+(((2.0)*x2448*(r20*r20)*(r21*r21)))+((x2448*(r21*r21*r21*r21)))+((x2448*(r20*r20*r20*r20))));
j14eval[0]=x2449;
j14eval[1]=IKsign(x2449);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2451=(sj11*sj12);
IkReal x2452=(gconst79*r21);
IkReal x2453=(cj11*cj12);
IkReal x2454=(gconst80*r20);
CheckValue<IkReal> x2455=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2452*x2454))+(r22*r22)+(x2454*x2454)+(x2452*x2452))),-1);
if(!x2455.valid){
continue;
}
CheckValue<IkReal> x2456 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2453))+((r22*x2451)))),IkReal(((((-1.0)*x2452*x2453))+((x2453*x2454))+((x2451*x2452))+(((-1.0)*x2451*x2454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2456.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2455.value)))+(x2456.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2457=IKsin(j14);
IkReal x2458=IKcos(j14);
IkReal x2459=(gconst80*r10);
IkReal x2460=(gconst79*r11);
IkReal x2461=((1.0)*cj11);
IkReal x2462=((1.0)*sj10);
IkReal x2463=(gconst79*r01);
IkReal x2464=(gconst80*r00);
IkReal x2465=(cj12*sj11);
IkReal x2466=(gconst79*r21);
IkReal x2467=(gconst80*r20);
IkReal x2468=((1.0)*x2458);
IkReal x2469=((1.0)*x2457);
evalcond[0]=((((-1.0)*r22*x2468))+((x2457*x2466))+(((-1.0)*x2467*x2469)));
evalcond[1]=((((-1.0)*r12*x2468))+cj10+((x2457*x2460))+(((-1.0)*x2459*x2469)));
evalcond[2]=((((-1.0)*x2464*x2469))+((x2457*x2463))+(((-1.0)*x2462))+(((-1.0)*r02*x2468)));
evalcond[3]=(((sj11*sj12))+((x2458*x2467))+(((-1.0)*r22*x2469))+(((-1.0)*cj12*x2461))+(((-1.0)*x2466*x2468)));
evalcond[4]=(((x2458*x2464))+(((-1.0)*x2463*x2468))+(((-1.0)*r02*x2469))+(((-1.0)*cj10*x2465))+(((-1.0)*cj10*sj12*x2461)));
evalcond[5]=(((x2458*x2459))+(((-1.0)*sj10*sj12*x2461))+(((-1.0)*r12*x2469))+(((-1.0)*x2460*x2468))+(((-1.0)*x2462*x2465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2470=((1.0)*gconst80);
CheckValue<IkReal> x2471=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2470))+(((-1.0)*gconst79*r10)))),-1);
if(!x2471.valid){
continue;
}
CheckValue<IkReal> x2472 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst79*r21*sj10))+(((-1.0)*r20*sj10*x2470)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2472.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2471.value)))+(x2472.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2473=IKsin(j14);
IkReal x2474=IKcos(j14);
IkReal x2475=(gconst80*r10);
IkReal x2476=(gconst79*r11);
IkReal x2477=((1.0)*cj11);
IkReal x2478=((1.0)*sj10);
IkReal x2479=(gconst79*r01);
IkReal x2480=(gconst80*r00);
IkReal x2481=(cj12*sj11);
IkReal x2482=(gconst79*r21);
IkReal x2483=(gconst80*r20);
IkReal x2484=((1.0)*x2474);
IkReal x2485=((1.0)*x2473);
evalcond[0]=((((-1.0)*r22*x2484))+((x2473*x2482))+(((-1.0)*x2483*x2485)));
evalcond[1]=(cj10+(((-1.0)*r12*x2484))+((x2473*x2476))+(((-1.0)*x2475*x2485)));
evalcond[2]=((((-1.0)*x2478))+(((-1.0)*r02*x2484))+(((-1.0)*x2480*x2485))+((x2473*x2479)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r22*x2485))+((x2474*x2483))+(((-1.0)*x2482*x2484))+(((-1.0)*cj12*x2477)));
evalcond[4]=(((x2474*x2480))+(((-1.0)*r02*x2485))+(((-1.0)*cj10*x2481))+(((-1.0)*x2479*x2484))+(((-1.0)*cj10*sj12*x2477)));
evalcond[5]=((((-1.0)*sj10*sj12*x2477))+(((-1.0)*x2476*x2484))+(((-1.0)*r12*x2485))+((x2474*x2475))+(((-1.0)*x2478*x2481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2486=((1.0)*gconst80);
CheckValue<IkReal> x2487 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x2486))+((cj10*gconst79*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2487.valid){
continue;
}
CheckValue<IkReal> x2488=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2486))+(((-1.0)*gconst79*r00)))),-1);
if(!x2488.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2487.value)+(((1.5707963267949)*(x2488.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2489=IKsin(j14);
IkReal x2490=IKcos(j14);
IkReal x2491=(gconst80*r10);
IkReal x2492=(gconst79*r11);
IkReal x2493=((1.0)*cj11);
IkReal x2494=((1.0)*sj10);
IkReal x2495=(gconst79*r01);
IkReal x2496=(gconst80*r00);
IkReal x2497=(cj12*sj11);
IkReal x2498=(gconst79*r21);
IkReal x2499=(gconst80*r20);
IkReal x2500=((1.0)*x2490);
IkReal x2501=((1.0)*x2489);
evalcond[0]=((((-1.0)*r22*x2500))+(((-1.0)*x2499*x2501))+((x2489*x2498)));
evalcond[1]=((((-1.0)*r12*x2500))+cj10+(((-1.0)*x2491*x2501))+((x2489*x2492)));
evalcond[2]=((((-1.0)*r02*x2500))+(((-1.0)*x2496*x2501))+(((-1.0)*x2494))+((x2489*x2495)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x2493))+(((-1.0)*x2498*x2500))+((x2490*x2499))+(((-1.0)*r22*x2501)));
evalcond[4]=((((-1.0)*r02*x2501))+((x2490*x2496))+(((-1.0)*x2495*x2500))+(((-1.0)*cj10*sj12*x2493))+(((-1.0)*cj10*x2497)));
evalcond[5]=((((-1.0)*x2494*x2497))+(((-1.0)*r12*x2501))+((x2490*x2491))+(((-1.0)*x2492*x2500))+(((-1.0)*sj10*sj12*x2493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2502=((-1.0)*r21);
IkReal x2504 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2504)==0){
continue;
}
IkReal x2503=pow(x2504,-0.5);
CheckValue<IkReal> x2505 = IKatan2WithCheck(IkReal(x2502),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2505.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2505.value))));
IkReal gconst82=(x2502*x2503);
IkReal gconst83=((1.0)*r20*x2503);
CheckValue<IkReal> x2506 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2506.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x2506.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x2507=((-1.0)*r21);
CheckValue<IkReal> x2510 = IKatan2WithCheck(IkReal(x2507),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2510.valid){
continue;
}
IkReal x2508=((1.0)*(x2510.value));
IkReal x2509=x2503;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst82;
cj15=gconst83;
j15=((3.14159265)+(((-1.0)*x2508)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2508)));
IkReal gconst82=(x2507*x2509);
IkReal gconst83=((1.0)*r20*x2509);
IkReal x2511=r22*r22;
IkReal x2512=((1.0)*x2511);
CheckValue<IkReal> x2516=IKPowWithIntegerCheck(((-1.0)+x2511),-1);
if(!x2516.valid){
continue;
}
IkReal x2513=x2516.value;
if((((1.0)+(((-1.0)*x2512)))) < -0.00001)
continue;
IkReal x2514=IKsqrt(((1.0)+(((-1.0)*x2512))));
IkReal x2515=(cj10*x2513*x2514);
j14eval[0]=((IKabs((x2515+(((-1.0)*x2512*x2515)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x2517=((-1.0)*r21);
CheckValue<IkReal> x2520 = IKatan2WithCheck(IkReal(x2517),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2520.valid){
continue;
}
IkReal x2518=((1.0)*(x2520.value));
IkReal x2519=x2503;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst82;
cj15=gconst83;
j15=((3.14159265)+(((-1.0)*x2518)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2518)));
IkReal gconst82=(x2517*x2519);
IkReal gconst83=((1.0)*r20*x2519);
IkReal x2521=r22*r22;
IkReal x2522=((1.0)*x2521);
CheckValue<IkReal> x2526=IKPowWithIntegerCheck(((-1.0)+x2521),-1);
if(!x2526.valid){
continue;
}
IkReal x2523=x2526.value;
if((((1.0)+(((-1.0)*x2522)))) < -0.00001)
continue;
IkReal x2524=IKsqrt(((1.0)+(((-1.0)*x2522))));
IkReal x2525=(sj10*x2523*x2524);
j14eval[0]=((IKabs((x2525+(((-1.0)*x2522*x2525)))))+(IKabs((r22*sj10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x2527=((-1.0)*r21);
CheckValue<IkReal> x2530 = IKatan2WithCheck(IkReal(x2527),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2530.valid){
continue;
}
IkReal x2528=((1.0)*(x2530.value));
IkReal x2529=x2503;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst82;
cj15=gconst83;
j15=((3.14159265)+(((-1.0)*x2528)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2528)));
IkReal gconst82=(x2527*x2529);
IkReal gconst83=((1.0)*r20*x2529);
IkReal x2531=r22*r22;
IkReal x2532=(cj10*r02);
IkReal x2533=(r12*sj10);
CheckValue<IkReal> x2537=IKPowWithIntegerCheck(((-1.0)+x2531),-1);
if(!x2537.valid){
continue;
}
IkReal x2534=x2537.value;
if((((1.0)+(((-1.0)*x2531)))) < -0.00001)
continue;
IkReal x2535=IKsqrt(((1.0)+(((-1.0)*x2531))));
IkReal x2536=(r22*x2534*x2535);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=((IKabs((((x2533*x2536))+((x2532*x2536)))))+(IKabs(((((-1.0)*x2532))+(((-1.0)*x2533))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2538=((1.0)*gconst82);
CheckValue<IkReal> x2539=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2538))+(((-1.0)*gconst83*r21)))),-1);
if(!x2539.valid){
continue;
}
CheckValue<IkReal> x2540 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((gconst83*r10*sj10))+((cj10*gconst83*r00))+(((-1.0)*r11*sj10*x2538))+(((-1.0)*cj10*r01*x2538)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2540.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2539.value)))+(x2540.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2541=IKsin(j14);
IkReal x2542=IKcos(j14);
IkReal x2543=(gconst82*r01);
IkReal x2544=((1.0)*cj11);
IkReal x2545=(gconst82*r21);
IkReal x2546=((1.0)*sj10);
IkReal x2547=(gconst83*r00);
IkReal x2548=(gconst83*r10);
IkReal x2549=(gconst83*r20);
IkReal x2550=(gconst82*r11);
IkReal x2551=(cj12*sj11);
IkReal x2552=((1.0)*x2542);
IkReal x2553=((1.0)*x2541);
evalcond[0]=((((-1.0)*x2549*x2553))+(((-1.0)*r22*x2552))+((x2541*x2545)));
evalcond[1]=((((-1.0)*r12*x2552))+(((-1.0)*x2548*x2553))+cj10+((x2541*x2550)));
evalcond[2]=((((-1.0)*r02*x2552))+(((-1.0)*x2546))+(((-1.0)*x2547*x2553))+((x2541*x2543)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x2544))+((x2542*x2549))+(((-1.0)*x2545*x2552))+(((-1.0)*r22*x2553)));
evalcond[4]=((((-1.0)*cj10*sj12*x2544))+((x2542*x2547))+(((-1.0)*r02*x2553))+(((-1.0)*cj10*x2551))+(((-1.0)*x2543*x2552)));
evalcond[5]=((((-1.0)*r12*x2553))+(((-1.0)*x2550*x2552))+(((-1.0)*x2546*x2551))+((x2542*x2548))+(((-1.0)*sj10*sj12*x2544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2554=((1.0)*gconst83);
CheckValue<IkReal> x2555 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x2554))+((gconst82*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2555.valid){
continue;
}
CheckValue<IkReal> x2556=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2554))+(((-1.0)*gconst82*r10)))),-1);
if(!x2556.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2555.value)+(((1.5707963267949)*(x2556.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2557=IKsin(j14);
IkReal x2558=IKcos(j14);
IkReal x2559=(gconst82*r01);
IkReal x2560=((1.0)*cj11);
IkReal x2561=(gconst82*r21);
IkReal x2562=((1.0)*sj10);
IkReal x2563=(gconst83*r00);
IkReal x2564=(gconst83*r10);
IkReal x2565=(gconst83*r20);
IkReal x2566=(gconst82*r11);
IkReal x2567=(cj12*sj11);
IkReal x2568=((1.0)*x2558);
IkReal x2569=((1.0)*x2557);
evalcond[0]=((((-1.0)*r22*x2568))+((x2557*x2561))+(((-1.0)*x2565*x2569)));
evalcond[1]=(((x2557*x2566))+cj10+(((-1.0)*x2564*x2569))+(((-1.0)*r12*x2568)));
evalcond[2]=((((-1.0)*x2563*x2569))+(((-1.0)*r02*x2568))+(((-1.0)*x2562))+((x2557*x2559)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x2560))+(((-1.0)*r22*x2569))+((x2558*x2565))+(((-1.0)*x2561*x2568)));
evalcond[4]=((((-1.0)*cj10*sj12*x2560))+(((-1.0)*r02*x2569))+((x2558*x2563))+(((-1.0)*x2559*x2568))+(((-1.0)*cj10*x2567)));
evalcond[5]=((((-1.0)*x2562*x2567))+(((-1.0)*x2566*x2568))+((x2558*x2564))+(((-1.0)*sj10*sj12*x2560))+(((-1.0)*r12*x2569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2570=((1.0)*gconst83);
CheckValue<IkReal> x2571 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x2570))+((cj10*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2571.valid){
continue;
}
CheckValue<IkReal> x2572=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r00))+(((-1.0)*r01*x2570)))),-1);
if(!x2572.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2571.value)+(((1.5707963267949)*(x2572.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2573=IKsin(j14);
IkReal x2574=IKcos(j14);
IkReal x2575=(gconst82*r01);
IkReal x2576=((1.0)*cj11);
IkReal x2577=(gconst82*r21);
IkReal x2578=((1.0)*sj10);
IkReal x2579=(gconst83*r00);
IkReal x2580=(gconst83*r10);
IkReal x2581=(gconst83*r20);
IkReal x2582=(gconst82*r11);
IkReal x2583=(cj12*sj11);
IkReal x2584=((1.0)*x2574);
IkReal x2585=((1.0)*x2573);
evalcond[0]=(((x2573*x2577))+(((-1.0)*x2581*x2585))+(((-1.0)*r22*x2584)));
evalcond[1]=(cj10+((x2573*x2582))+(((-1.0)*x2580*x2585))+(((-1.0)*r12*x2584)));
evalcond[2]=(((x2573*x2575))+(((-1.0)*r02*x2584))+(((-1.0)*x2579*x2585))+(((-1.0)*x2578)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x2576))+((x2574*x2581))+(((-1.0)*x2577*x2584))+(((-1.0)*r22*x2585)));
evalcond[4]=(((x2574*x2579))+(((-1.0)*r02*x2585))+(((-1.0)*cj10*sj12*x2576))+(((-1.0)*cj10*x2583))+(((-1.0)*x2575*x2584)));
evalcond[5]=(((x2574*x2580))+(((-1.0)*x2578*x2583))+(((-1.0)*sj10*sj12*x2576))+(((-1.0)*x2582*x2584))+(((-1.0)*r12*x2585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2586=((-1.0)*r10);
IkReal x2588 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2588)==0){
continue;
}
IkReal x2587=pow(x2588,-0.5);
CheckValue<IkReal> x2589 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2586),IKFAST_ATAN2_MAGTHRESH);
if(!x2589.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2589.value));
IkReal gconst85=(r11*x2587);
IkReal gconst86=(x2586*x2587);
CheckValue<IkReal> x2590 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2590.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x2590.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x2591=((-1.0)*r10);
IkReal x2592=x2587;
CheckValue<IkReal> x2594 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2591),IKFAST_ATAN2_MAGTHRESH);
if(!x2594.valid){
continue;
}
IkReal x2593=((-1.0)*(x2594.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst85;
cj15=gconst86;
j15=x2593;
IkReal gconst84=x2593;
IkReal gconst85=(r11*x2592);
IkReal gconst86=(x2591*x2592);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2595=((1.0)*gconst85);
CheckValue<IkReal> x2596 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x2595))+((cj10*gconst86*r00))+((gconst86*r10*sj10))+(((-1.0)*r11*sj10*x2595)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2596.valid){
continue;
}
CheckValue<IkReal> x2597=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2595)))),-1);
if(!x2597.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2596.value)+(((1.5707963267949)*(x2597.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2598=IKsin(j14);
IkReal x2599=IKcos(j14);
IkReal x2600=((1.0)*cj11);
IkReal x2601=(gconst85*r21);
IkReal x2602=(gconst85*r01);
IkReal x2603=(gconst86*r20);
IkReal x2604=(gconst86*r10);
IkReal x2605=(gconst86*r00);
IkReal x2606=(gconst85*r11);
IkReal x2607=((1.0)*x2599);
IkReal x2608=((1.0)*x2598);
IkReal x2609=((1.0)*cj12*sj11);
evalcond[0]=(((x2598*x2601))+(((-1.0)*r22*x2607))+(((-1.0)*x2603*x2608)));
evalcond[1]=(cj10+(((-1.0)*r12*x2607))+((x2598*x2606))+(((-1.0)*x2604*x2608)));
evalcond[2]=(((x2598*x2602))+(((-1.0)*r02*x2607))+(((-1.0)*sj10))+(((-1.0)*x2605*x2608)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x2601*x2607))+(((-1.0)*r22*x2608))+(((-1.0)*cj12*x2600))+((x2599*x2603)));
evalcond[4]=((((-1.0)*cj10*x2609))+(((-1.0)*cj10*sj12*x2600))+(((-1.0)*r02*x2608))+(((-1.0)*x2602*x2607))+((x2599*x2605)));
evalcond[5]=((((-1.0)*sj10*sj12*x2600))+(((-1.0)*r12*x2608))+(((-1.0)*sj10*x2609))+((x2599*x2604))+(((-1.0)*x2606*x2607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2610=((1.0)*gconst86);
CheckValue<IkReal> x2611=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2610))+(((-1.0)*gconst85*r00)))),-1);
if(!x2611.valid){
continue;
}
CheckValue<IkReal> x2612 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x2610))+((cj10*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2612.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2611.value)))+(x2612.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2613=IKsin(j14);
IkReal x2614=IKcos(j14);
IkReal x2615=((1.0)*cj11);
IkReal x2616=(gconst85*r21);
IkReal x2617=(gconst85*r01);
IkReal x2618=(gconst86*r20);
IkReal x2619=(gconst86*r10);
IkReal x2620=(gconst86*r00);
IkReal x2621=(gconst85*r11);
IkReal x2622=((1.0)*x2614);
IkReal x2623=((1.0)*x2613);
IkReal x2624=((1.0)*cj12*sj11);
evalcond[0]=(((x2613*x2616))+(((-1.0)*x2618*x2623))+(((-1.0)*r22*x2622)));
evalcond[1]=((((-1.0)*x2619*x2623))+(((-1.0)*r12*x2622))+cj10+((x2613*x2621)));
evalcond[2]=(((x2613*x2617))+(((-1.0)*sj10))+(((-1.0)*r02*x2622))+(((-1.0)*x2620*x2623)));
evalcond[3]=(((sj11*sj12))+((x2614*x2618))+(((-1.0)*r22*x2623))+(((-1.0)*x2616*x2622))+(((-1.0)*cj12*x2615)));
evalcond[4]=((((-1.0)*x2617*x2622))+(((-1.0)*cj10*sj12*x2615))+((x2614*x2620))+(((-1.0)*r02*x2623))+(((-1.0)*cj10*x2624)));
evalcond[5]=((((-1.0)*sj10*sj12*x2615))+(((-1.0)*r12*x2623))+((x2614*x2619))+(((-1.0)*sj10*x2624))+(((-1.0)*x2621*x2622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2625=((-1.0)*r11);
IkReal x2627 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2627)==0){
continue;
}
IkReal x2626=pow(x2627,-0.5);
CheckValue<IkReal> x2628 = IKatan2WithCheck(IkReal(x2625),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2628.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2628.value))));
IkReal gconst88=(x2625*x2626);
IkReal gconst89=((1.0)*r10*x2626);
CheckValue<IkReal> x2629 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2629.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x2629.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x2630=((-1.0)*r11);
CheckValue<IkReal> x2633 = IKatan2WithCheck(IkReal(x2630),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2633.valid){
continue;
}
IkReal x2631=((1.0)*(x2633.value));
IkReal x2632=x2626;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst88;
cj15=gconst89;
j15=((3.14159265)+(((-1.0)*x2631)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2631)));
IkReal gconst88=(x2630*x2632);
IkReal gconst89=((1.0)*r10*x2632);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x2634=((-1.0)*r11);
CheckValue<IkReal> x2637 = IKatan2WithCheck(IkReal(x2634),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2637.valid){
continue;
}
IkReal x2635=((1.0)*(x2637.value));
IkReal x2636=x2626;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst88;
cj15=gconst89;
j15=((3.14159265)+(((-1.0)*x2635)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2635)));
IkReal gconst88=(x2634*x2636);
IkReal gconst89=((1.0)*r10*x2636);
IkReal x2638=r12*r12;
IkReal x2639=(cj10*r02);
IkReal x2640=x2626;
IkReal x2641=(sj10*x2640);
j14eval[0]=((IKabs((((x2638*x2641))+((r12*x2639*x2640))+(((-1.0)*x2641)))))+(IKabs(((((-1.0)*r12*sj10))+(((-1.0)*x2639))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x2642=((-1.0)*r11);
CheckValue<IkReal> x2645 = IKatan2WithCheck(IkReal(x2642),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2645.valid){
continue;
}
IkReal x2643=((1.0)*(x2645.value));
IkReal x2644=x2626;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst88;
cj15=gconst89;
j15=((3.14159265)+(((-1.0)*x2643)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2643)));
IkReal gconst88=(x2642*x2644);
IkReal gconst89=((1.0)*r10*x2644);
IkReal x2646=r12*r12;
IkReal x2647=(cj11*cj12*r22);
IkReal x2648=(r22*sj11*sj12);
CheckValue<IkReal> x2652=IKPowWithIntegerCheck(((-1.0)+x2646),-1);
if(!x2652.valid){
continue;
}
IkReal x2649=x2652.value;
if((((1.0)+(((-1.0)*x2646)))) < -0.00001)
continue;
IkReal x2650=IKsqrt(((1.0)+(((-1.0)*x2646))));
IkReal x2651=(r12*x2649*x2650);
j14eval[0]=((IKabs((((x2647*x2651))+(((-1.0)*x2648*x2651)))))+(IKabs(((((-1.0)*x2647))+x2648))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2653=(sj11*sj12);
IkReal x2654=(gconst89*r20);
IkReal x2655=(cj11*cj12);
IkReal x2656=(gconst88*r21);
CheckValue<IkReal> x2657 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2655))+((r22*x2653)))),IkReal(((((-1.0)*x2655*x2656))+((x2654*x2655))+((x2653*x2656))+(((-1.0)*x2653*x2654)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2657.valid){
continue;
}
CheckValue<IkReal> x2658=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x2654*x2656))+(x2656*x2656)+(x2654*x2654))),-1);
if(!x2658.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2657.value)+(((1.5707963267949)*(x2658.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2659=IKsin(j14);
IkReal x2660=IKcos(j14);
IkReal x2661=((1.0)*cj11);
IkReal x2662=((1.0)*sj10);
IkReal x2663=(cj12*sj11);
IkReal x2664=(gconst88*r01);
IkReal x2665=(gconst89*r20);
IkReal x2666=(gconst88*r11);
IkReal x2667=(gconst88*r21);
IkReal x2668=((1.0)*x2660);
IkReal x2669=((1.0)*x2659);
IkReal x2670=(gconst89*x2660);
evalcond[0]=(((x2659*x2667))+(((-1.0)*x2665*x2669))+(((-1.0)*r22*x2668)));
evalcond[1]=((((-1.0)*r12*x2668))+((x2659*x2666))+cj10+(((-1.0)*gconst89*r10*x2669)));
evalcond[2]=(((x2659*x2664))+(((-1.0)*gconst89*r00*x2669))+(((-1.0)*r02*x2668))+(((-1.0)*x2662)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x2661))+((x2660*x2665))+(((-1.0)*x2667*x2668))+(((-1.0)*r22*x2669)));
evalcond[4]=((((-1.0)*cj10*x2663))+(((-1.0)*r02*x2669))+(((-1.0)*x2664*x2668))+((r00*x2670))+(((-1.0)*cj10*sj12*x2661)));
evalcond[5]=((((-1.0)*r12*x2669))+(((-1.0)*x2662*x2663))+((r10*x2670))+(((-1.0)*sj10*sj12*x2661))+(((-1.0)*x2666*x2668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2671=((1.0)*gconst88);
CheckValue<IkReal> x2672 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x2671))+((gconst89*r10*sj10))+(((-1.0)*r11*sj10*x2671))+((cj10*gconst89*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2672.valid){
continue;
}
CheckValue<IkReal> x2673=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst89*r21))+(((-1.0)*r20*x2671)))),-1);
if(!x2673.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2672.value)+(((1.5707963267949)*(x2673.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2674=IKsin(j14);
IkReal x2675=IKcos(j14);
IkReal x2676=((1.0)*cj11);
IkReal x2677=((1.0)*sj10);
IkReal x2678=(cj12*sj11);
IkReal x2679=(gconst88*r01);
IkReal x2680=(gconst89*r20);
IkReal x2681=(gconst88*r11);
IkReal x2682=(gconst88*r21);
IkReal x2683=((1.0)*x2675);
IkReal x2684=((1.0)*x2674);
IkReal x2685=(gconst89*x2675);
evalcond[0]=(((x2674*x2682))+(((-1.0)*x2680*x2684))+(((-1.0)*r22*x2683)));
evalcond[1]=((((-1.0)*r12*x2683))+((x2674*x2681))+(((-1.0)*gconst89*r10*x2684))+cj10);
evalcond[2]=((((-1.0)*r02*x2683))+(((-1.0)*x2677))+(((-1.0)*gconst89*r00*x2684))+((x2674*x2679)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r22*x2684))+(((-1.0)*x2682*x2683))+(((-1.0)*cj12*x2676))+((x2675*x2680)));
evalcond[4]=((((-1.0)*r02*x2684))+(((-1.0)*cj10*x2678))+(((-1.0)*x2679*x2683))+((r00*x2685))+(((-1.0)*cj10*sj12*x2676)));
evalcond[5]=((((-1.0)*r12*x2684))+((r10*x2685))+(((-1.0)*x2677*x2678))+(((-1.0)*x2681*x2683))+(((-1.0)*sj10*sj12*x2676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2686=((1.0)*gconst89);
CheckValue<IkReal> x2687=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2686))+(((-1.0)*gconst88*r00)))),-1);
if(!x2687.valid){
continue;
}
CheckValue<IkReal> x2688 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst88*r21))+(((-1.0)*cj10*r20*x2686)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2688.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2687.value)))+(x2688.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2689=IKsin(j14);
IkReal x2690=IKcos(j14);
IkReal x2691=((1.0)*cj11);
IkReal x2692=((1.0)*sj10);
IkReal x2693=(cj12*sj11);
IkReal x2694=(gconst88*r01);
IkReal x2695=(gconst89*r20);
IkReal x2696=(gconst88*r11);
IkReal x2697=(gconst88*r21);
IkReal x2698=((1.0)*x2690);
IkReal x2699=((1.0)*x2689);
IkReal x2700=(gconst89*x2690);
evalcond[0]=(((x2689*x2697))+(((-1.0)*r22*x2698))+(((-1.0)*x2695*x2699)));
evalcond[1]=((((-1.0)*gconst89*r10*x2699))+((x2689*x2696))+cj10+(((-1.0)*r12*x2698)));
evalcond[2]=((((-1.0)*r02*x2698))+((x2689*x2694))+(((-1.0)*x2692))+(((-1.0)*gconst89*r00*x2699)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x2691))+(((-1.0)*r22*x2699))+(((-1.0)*x2697*x2698))+((x2690*x2695)));
evalcond[4]=(((r00*x2700))+(((-1.0)*r02*x2699))+(((-1.0)*cj10*sj12*x2691))+(((-1.0)*cj10*x2693))+(((-1.0)*x2694*x2698)));
evalcond[5]=((((-1.0)*x2692*x2693))+(((-1.0)*x2696*x2698))+((r10*x2700))+(((-1.0)*r12*x2699))+(((-1.0)*sj10*sj12*x2691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
IkReal x2701=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x2701;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj15*r00))+((r01*sj15))))));
j14eval[2]=IKsign(x2701);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
IkReal x2702=((1.0)*cj15);
IkReal x2703=((((-1.0)*r01*x2702))+(((-1.0)*r00*sj15)));
j14eval[0]=x2703;
j14eval[1]=((IKabs(((((-1.0)*r20*x2702))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x2703);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
IkReal x2704=cj15*cj15;
IkReal x2705=r11*r11;
IkReal x2706=(r11*sj15);
IkReal x2707=(cj15*r10);
IkReal x2708=(x2705+(((-2.0)*x2706*x2707))+(r12*r12)+(((-1.0)*x2704*x2705))+((x2704*(r10*r10))));
j14eval[0]=x2708;
j14eval[1]=IKsign(x2708);
j14eval[2]=((IKabs(r12))+(IKabs((x2707+(((-1.0)*x2706))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2709=cj15*cj15;
IkReal x2710=r11*r11;
IkReal x2711=(r11*sj15);
IkReal x2712=(cj15*r10);
CheckValue<IkReal> x2713 = IKatan2WithCheck(IkReal((x2712+(((-1.0)*x2711)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2713.valid){
continue;
}
CheckValue<IkReal> x2714=IKPowWithIntegerCheck(IKsign((x2710+(((-1.0)*x2709*x2710))+(r12*r12)+((x2709*(r10*r10)))+(((-2.0)*x2711*x2712)))),-1);
if(!x2714.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2713.value)+(((1.5707963267949)*(x2714.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2715=IKsin(j14);
IkReal x2716=IKcos(j14);
IkReal x2717=(r11*sj15);
IkReal x2718=((1.0)*cj11);
IkReal x2719=(cj15*r10);
IkReal x2720=(cj15*r00);
IkReal x2721=(r21*sj15);
IkReal x2722=(r01*sj15);
IkReal x2723=(cj15*r20);
IkReal x2724=((1.0)*x2716);
IkReal x2725=((1.0)*x2715);
evalcond[0]=(((x2715*x2721))+(((-1.0)*x2723*x2725))+(((-1.0)*r22*x2724)));
evalcond[1]=(((x2715*x2722))+(((-1.0)*x2720*x2725))+(((-1.0)*r02*x2724)));
evalcond[2]=(((x2716*x2719))+(((-1.0)*r12*x2725))+(((-1.0)*x2717*x2724)));
evalcond[3]=((1.0)+(((-1.0)*x2719*x2725))+(((-1.0)*r12*x2724))+((x2715*x2717)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x2721*x2724))+(((-1.0)*r22*x2725))+((x2716*x2723))+(((-1.0)*cj12*x2718)));
evalcond[5]=((((-1.0)*cj12*sj11))+(((-1.0)*x2722*x2724))+((x2716*x2720))+(((-1.0)*sj12*x2718))+(((-1.0)*r02*x2725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2726=((1.0)*cj15);
CheckValue<IkReal> x2727 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj15))+(((-1.0)*r20*x2726)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2727.valid){
continue;
}
CheckValue<IkReal> x2728=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2726))+(((-1.0)*r00*sj15)))),-1);
if(!x2728.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2727.value)+(((1.5707963267949)*(x2728.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2729=IKsin(j14);
IkReal x2730=IKcos(j14);
IkReal x2731=(r11*sj15);
IkReal x2732=((1.0)*cj11);
IkReal x2733=(cj15*r10);
IkReal x2734=(cj15*r00);
IkReal x2735=(r21*sj15);
IkReal x2736=(r01*sj15);
IkReal x2737=(cj15*r20);
IkReal x2738=((1.0)*x2730);
IkReal x2739=((1.0)*x2729);
evalcond[0]=((((-1.0)*x2737*x2739))+(((-1.0)*r22*x2738))+((x2729*x2735)));
evalcond[1]=((((-1.0)*x2734*x2739))+(((-1.0)*r02*x2738))+((x2729*x2736)));
evalcond[2]=((((-1.0)*x2731*x2738))+((x2730*x2733))+(((-1.0)*r12*x2739)));
evalcond[3]=((1.0)+(((-1.0)*x2733*x2739))+(((-1.0)*r12*x2738))+((x2729*x2731)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x2732))+(((-1.0)*x2735*x2738))+((x2730*x2737))+(((-1.0)*r22*x2739)));
evalcond[5]=((((-1.0)*cj12*sj11))+(((-1.0)*x2736*x2738))+(((-1.0)*r02*x2739))+((x2730*x2734))+(((-1.0)*sj12*x2732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x2740 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj15*r00))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2740.valid){
continue;
}
CheckValue<IkReal> x2741=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x2741.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2740.value)+(((1.5707963267949)*(x2741.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2742=IKsin(j14);
IkReal x2743=IKcos(j14);
IkReal x2744=(r11*sj15);
IkReal x2745=((1.0)*cj11);
IkReal x2746=(cj15*r10);
IkReal x2747=(cj15*r00);
IkReal x2748=(r21*sj15);
IkReal x2749=(r01*sj15);
IkReal x2750=(cj15*r20);
IkReal x2751=((1.0)*x2743);
IkReal x2752=((1.0)*x2742);
evalcond[0]=((((-1.0)*r22*x2751))+((x2742*x2748))+(((-1.0)*x2750*x2752)));
evalcond[1]=(((x2742*x2749))+(((-1.0)*x2747*x2752))+(((-1.0)*r02*x2751)));
evalcond[2]=((((-1.0)*x2744*x2751))+((x2743*x2746))+(((-1.0)*r12*x2752)));
evalcond[3]=((1.0)+((x2742*x2744))+(((-1.0)*r12*x2751))+(((-1.0)*x2746*x2752)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r22*x2752))+((x2743*x2750))+(((-1.0)*cj12*x2745))+(((-1.0)*x2748*x2751)));
evalcond[5]=((((-1.0)*sj12*x2745))+((x2743*x2747))+(((-1.0)*cj12*sj11))+(((-1.0)*x2749*x2751))+(((-1.0)*r02*x2752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x2753=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x2753;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x2753);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x2754=((1.0)*cj15);
IkReal x2755=((((-1.0)*r20*sj15))+(((-1.0)*r21*x2754)));
j14eval[0]=x2755;
j14eval[1]=IKsign(x2755);
j14eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2754))+((r01*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x2756=r11*r11;
IkReal x2757=cj15*cj15;
IkReal x2758=(cj15*r10);
IkReal x2759=(r11*sj15);
IkReal x2760=(((x2756*x2757))+(((-1.0)*x2757*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x2756))+(((2.0)*x2758*x2759)));
j14eval[0]=x2760;
j14eval[1]=((IKabs(r12))+(IKabs((x2758+(((-1.0)*x2759))))));
j14eval[2]=IKsign(x2760);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2761=r11*r11;
IkReal x2762=cj15*cj15;
IkReal x2763=(cj15*r10);
IkReal x2764=(r11*sj15);
CheckValue<IkReal> x2765 = IKatan2WithCheck(IkReal((x2763+(((-1.0)*x2764)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2765.valid){
continue;
}
CheckValue<IkReal> x2766=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2761))+(((-1.0)*x2762*(r10*r10)))+((x2761*x2762))+(((-1.0)*(r12*r12)))+(((2.0)*x2763*x2764)))),-1);
if(!x2766.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2765.value)+(((1.5707963267949)*(x2766.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2767=IKsin(j14);
IkReal x2768=IKcos(j14);
IkReal x2769=(r11*sj15);
IkReal x2770=(cj15*r10);
IkReal x2771=(cj15*r00);
IkReal x2772=(r21*sj15);
IkReal x2773=(r01*sj15);
IkReal x2774=(cj15*r20);
IkReal x2775=((1.0)*x2768);
IkReal x2776=((1.0)*x2767);
evalcond[0]=((((-1.0)*x2774*x2776))+((x2767*x2772))+(((-1.0)*r22*x2775)));
evalcond[1]=((((-1.0)*r02*x2775))+(((-1.0)*x2771*x2776))+((x2767*x2773)));
evalcond[2]=((((-1.0)*x2769*x2775))+((x2768*x2770))+(((-1.0)*r12*x2776)));
evalcond[3]=((-1.0)+(((-1.0)*x2770*x2776))+(((-1.0)*r12*x2775))+((x2767*x2769)));
evalcond[4]=(((x2768*x2771))+(((-1.0)*r02*x2776))+(((-1.0)*x2773*x2775))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x2768*x2774))+(((-1.0)*x2772*x2775))+(((-1.0)*cj11*cj12))+(((-1.0)*r22*x2776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2777=((1.0)*cj15);
CheckValue<IkReal> x2778=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2777))+(((-1.0)*r20*sj15)))),-1);
if(!x2778.valid){
continue;
}
CheckValue<IkReal> x2779 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x2777))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2779.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2778.value)))+(x2779.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2780=IKsin(j14);
IkReal x2781=IKcos(j14);
IkReal x2782=(r11*sj15);
IkReal x2783=(cj15*r10);
IkReal x2784=(cj15*r00);
IkReal x2785=(r21*sj15);
IkReal x2786=(r01*sj15);
IkReal x2787=(cj15*r20);
IkReal x2788=((1.0)*x2781);
IkReal x2789=((1.0)*x2780);
evalcond[0]=(((x2780*x2785))+(((-1.0)*x2787*x2789))+(((-1.0)*r22*x2788)));
evalcond[1]=(((x2780*x2786))+(((-1.0)*x2784*x2789))+(((-1.0)*r02*x2788)));
evalcond[2]=((((-1.0)*r12*x2789))+((x2781*x2783))+(((-1.0)*x2782*x2788)));
evalcond[3]=((-1.0)+((x2780*x2782))+(((-1.0)*r12*x2788))+(((-1.0)*x2783*x2789)));
evalcond[4]=(((x2781*x2784))+(((-1.0)*x2786*x2788))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*r02*x2789)));
evalcond[5]=(((sj11*sj12))+((x2781*x2787))+(((-1.0)*x2785*x2788))+(((-1.0)*r22*x2789))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x2790 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2790.valid){
continue;
}
CheckValue<IkReal> x2791=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x2791.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2790.value)+(((1.5707963267949)*(x2791.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2792=IKsin(j14);
IkReal x2793=IKcos(j14);
IkReal x2794=(r11*sj15);
IkReal x2795=(cj15*r10);
IkReal x2796=(cj15*r00);
IkReal x2797=(r21*sj15);
IkReal x2798=(r01*sj15);
IkReal x2799=(cj15*r20);
IkReal x2800=((1.0)*x2793);
IkReal x2801=((1.0)*x2792);
evalcond[0]=(((x2792*x2797))+(((-1.0)*x2799*x2801))+(((-1.0)*r22*x2800)));
evalcond[1]=(((x2792*x2798))+(((-1.0)*x2796*x2801))+(((-1.0)*r02*x2800)));
evalcond[2]=(((x2793*x2795))+(((-1.0)*r12*x2801))+(((-1.0)*x2794*x2800)));
evalcond[3]=((-1.0)+((x2792*x2794))+(((-1.0)*r12*x2800))+(((-1.0)*x2795*x2801)));
evalcond[4]=(((x2793*x2796))+((cj12*sj11))+(((-1.0)*x2798*x2800))+(((-1.0)*r02*x2801))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x2793*x2799))+(((-1.0)*r22*x2801))+(((-1.0)*x2797*x2800))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2802=((-1.0)*r00);
IkReal x2804 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2804)==0){
continue;
}
IkReal x2803=pow(x2804,-0.5);
CheckValue<IkReal> x2805 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2802),IKFAST_ATAN2_MAGTHRESH);
if(!x2805.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2805.value));
IkReal gconst91=(r01*x2803);
IkReal gconst92=(x2802*x2803);
CheckValue<IkReal> x2806 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2806.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x2806.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x2807=((-1.0)*r00);
IkReal x2808=x2803;
CheckValue<IkReal> x2810 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2807),IKFAST_ATAN2_MAGTHRESH);
if(!x2810.valid){
continue;
}
IkReal x2809=((-1.0)*(x2810.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst91;
cj15=gconst92;
j15=x2809;
IkReal gconst90=x2809;
IkReal gconst91=(r01*x2808);
IkReal gconst92=(x2807*x2808);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2811=((1.0)*gconst91);
CheckValue<IkReal> x2812 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x2811))+((gconst92*r10*sj10))+(((-1.0)*cj10*r01*x2811))+((cj10*gconst92*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2812.valid){
continue;
}
CheckValue<IkReal> x2813=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst92*r21))+(((-1.0)*r20*x2811)))),-1);
if(!x2813.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2812.value)+(((1.5707963267949)*(x2813.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2814=IKsin(j14);
IkReal x2815=IKcos(j14);
IkReal x2816=((1.0)*cj11);
IkReal x2817=(gconst91*r11);
IkReal x2818=((1.0)*sj10);
IkReal x2819=(gconst92*r10);
IkReal x2820=(gconst91*r01);
IkReal x2821=(cj12*sj11);
IkReal x2822=(gconst92*r00);
IkReal x2823=(gconst91*r21);
IkReal x2824=(gconst92*r20);
IkReal x2825=((1.0)*x2815);
IkReal x2826=((1.0)*x2814);
evalcond[0]=(((x2814*x2823))+(((-1.0)*x2824*x2826))+(((-1.0)*r22*x2825)));
evalcond[1]=((((-1.0)*r12*x2825))+cj10+((x2814*x2817))+(((-1.0)*x2819*x2826)));
evalcond[2]=(((x2814*x2820))+(((-1.0)*x2822*x2826))+(((-1.0)*r02*x2825))+(((-1.0)*x2818)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x2816))+((x2815*x2824))+(((-1.0)*r22*x2826))+(((-1.0)*x2823*x2825)));
evalcond[4]=((((-1.0)*x2820*x2825))+(((-1.0)*cj10*x2821))+((x2815*x2822))+(((-1.0)*r02*x2826))+(((-1.0)*cj10*sj12*x2816)));
evalcond[5]=((((-1.0)*r12*x2826))+(((-1.0)*x2817*x2825))+((x2815*x2819))+(((-1.0)*x2818*x2821))+(((-1.0)*sj10*sj12*x2816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2827=((1.0)*gconst92);
CheckValue<IkReal> x2828 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst91*r21*sj10))+(((-1.0)*r20*sj10*x2827)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2828.valid){
continue;
}
CheckValue<IkReal> x2829=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2827))+(((-1.0)*gconst91*r10)))),-1);
if(!x2829.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2828.value)+(((1.5707963267949)*(x2829.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2830=IKsin(j14);
IkReal x2831=IKcos(j14);
IkReal x2832=((1.0)*cj11);
IkReal x2833=(gconst91*r11);
IkReal x2834=((1.0)*sj10);
IkReal x2835=(gconst92*r10);
IkReal x2836=(gconst91*r01);
IkReal x2837=(cj12*sj11);
IkReal x2838=(gconst92*r00);
IkReal x2839=(gconst91*r21);
IkReal x2840=(gconst92*r20);
IkReal x2841=((1.0)*x2831);
IkReal x2842=((1.0)*x2830);
evalcond[0]=((((-1.0)*x2840*x2842))+((x2830*x2839))+(((-1.0)*r22*x2841)));
evalcond[1]=((((-1.0)*r12*x2841))+((x2830*x2833))+cj10+(((-1.0)*x2835*x2842)));
evalcond[2]=((((-1.0)*x2834))+((x2830*x2836))+(((-1.0)*r02*x2841))+(((-1.0)*x2838*x2842)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x2839*x2841))+((x2831*x2840))+(((-1.0)*r22*x2842))+(((-1.0)*cj12*x2832)));
evalcond[4]=((((-1.0)*cj10*sj12*x2832))+((x2831*x2838))+(((-1.0)*r02*x2842))+(((-1.0)*x2836*x2841))+(((-1.0)*cj10*x2837)));
evalcond[5]=((((-1.0)*r12*x2842))+(((-1.0)*x2834*x2837))+(((-1.0)*sj10*sj12*x2832))+((x2831*x2835))+(((-1.0)*x2833*x2841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2843=((-1.0)*r01);
IkReal x2845 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2845)==0){
continue;
}
IkReal x2844=pow(x2845,-0.5);
CheckValue<IkReal> x2846 = IKatan2WithCheck(IkReal(x2843),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2846.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2846.value))));
IkReal gconst94=(x2843*x2844);
IkReal gconst95=((1.0)*r00*x2844);
CheckValue<IkReal> x2847 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2847.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x2847.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[5];
IkReal x2848=((-1.0)*r01);
CheckValue<IkReal> x2851 = IKatan2WithCheck(IkReal(x2848),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2851.valid){
continue;
}
IkReal x2849=((1.0)*(x2851.value));
IkReal x2850=x2844;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst94;
cj15=gconst95;
j15=((3.14159265)+(((-1.0)*x2849)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2849)));
IkReal gconst94=(x2848*x2850);
IkReal gconst95=((1.0)*r00*x2850);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=cj10;
j14eval[3]=r22;
j14eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  || IKabs(j14eval[4]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x2852=((-1.0)*r01);
CheckValue<IkReal> x2855 = IKatan2WithCheck(IkReal(x2852),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2855.valid){
continue;
}
IkReal x2853=((1.0)*(x2855.value));
IkReal x2854=x2844;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst94;
cj15=gconst95;
j15=((3.14159265)+(((-1.0)*x2853)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2853)));
IkReal gconst94=(x2852*x2854);
IkReal gconst95=((1.0)*r00*x2854);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x2856=((-1.0)*r01);
CheckValue<IkReal> x2859 = IKatan2WithCheck(IkReal(x2856),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2859.valid){
continue;
}
IkReal x2857=((1.0)*(x2859.value));
IkReal x2858=x2844;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj15=gconst94;
cj15=gconst95;
j15=((3.14159265)+(((-1.0)*x2857)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2857)));
IkReal gconst94=(x2856*x2858);
IkReal gconst95=((1.0)*r00*x2858);
IkReal x2860=r02*r02;
IkReal x2861=(r12*sj10);
IkReal x2862=x2844;
IkReal x2863=(cj10*x2862);
j14eval[0]=((IKabs(((((-1.0)*x2863))+((r02*x2861*x2862))+((x2860*x2863)))))+(IKabs(((((-1.0)*x2861))+(((-1.0)*cj10*r02))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2864=((1.0)*cj10);
IkReal x2865=((1.0)*sj10);
CheckValue<IkReal> x2866 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2864))+(((-1.0)*r12*x2865)))),IkReal(((((-1.0)*gconst94*r11*x2865))+((cj10*gconst95*r00))+((gconst95*r10*sj10))+(((-1.0)*gconst94*r01*x2864)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2866.valid){
continue;
}
CheckValue<IkReal> x2867=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2867.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2866.value)+(((1.5707963267949)*(x2867.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2868=IKsin(j14);
IkReal x2869=IKcos(j14);
IkReal x2870=((1.0)*cj11);
IkReal x2871=((1.0)*sj10);
IkReal x2872=(gconst94*r11);
IkReal x2873=(cj12*sj11);
IkReal x2874=((1.0)*x2869);
IkReal x2875=((1.0)*x2868);
IkReal x2876=(gconst95*x2869);
IkReal x2877=(gconst94*x2868);
evalcond[0]=((((-1.0)*r22*x2874))+((r21*x2877))+(((-1.0)*gconst95*r20*x2875)));
evalcond[1]=((((-1.0)*gconst95*r10*x2875))+((x2868*x2872))+cj10+(((-1.0)*r12*x2874)));
evalcond[2]=((((-1.0)*gconst95*r00*x2875))+(((-1.0)*r02*x2874))+((r01*x2877))+(((-1.0)*x2871)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x2870))+(((-1.0)*r22*x2875))+((r20*x2876))+(((-1.0)*gconst94*r21*x2874)));
evalcond[4]=(((r00*x2876))+(((-1.0)*r02*x2875))+(((-1.0)*cj10*x2873))+(((-1.0)*cj10*sj12*x2870))+(((-1.0)*gconst94*r01*x2874)));
evalcond[5]=(((r10*x2876))+(((-1.0)*x2871*x2873))+(((-1.0)*x2872*x2874))+(((-1.0)*sj10*sj12*x2870))+(((-1.0)*r12*x2875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2878=((1.0)*gconst95);
CheckValue<IkReal> x2879 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x2878))+((gconst94*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2879.valid){
continue;
}
CheckValue<IkReal> x2880=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2878)))),-1);
if(!x2880.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2879.value)+(((1.5707963267949)*(x2880.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2881=IKsin(j14);
IkReal x2882=IKcos(j14);
IkReal x2883=((1.0)*cj11);
IkReal x2884=((1.0)*sj10);
IkReal x2885=(gconst94*r11);
IkReal x2886=(cj12*sj11);
IkReal x2887=((1.0)*x2882);
IkReal x2888=((1.0)*x2881);
IkReal x2889=(gconst95*x2882);
IkReal x2890=(gconst94*x2881);
evalcond[0]=((((-1.0)*r22*x2887))+((r21*x2890))+(((-1.0)*gconst95*r20*x2888)));
evalcond[1]=((((-1.0)*gconst95*r10*x2888))+cj10+((x2881*x2885))+(((-1.0)*r12*x2887)));
evalcond[2]=((((-1.0)*gconst95*r00*x2888))+(((-1.0)*r02*x2887))+((r01*x2890))+(((-1.0)*x2884)));
evalcond[3]=(((sj11*sj12))+((r20*x2889))+(((-1.0)*r22*x2888))+(((-1.0)*cj12*x2883))+(((-1.0)*gconst94*r21*x2887)));
evalcond[4]=((((-1.0)*r02*x2888))+(((-1.0)*gconst94*r01*x2887))+(((-1.0)*cj10*x2886))+((r00*x2889))+(((-1.0)*cj10*sj12*x2883)));
evalcond[5]=((((-1.0)*x2885*x2887))+((r10*x2889))+(((-1.0)*x2884*x2886))+(((-1.0)*r12*x2888))+(((-1.0)*sj10*sj12*x2883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2891=((1.0)*gconst95);
CheckValue<IkReal> x2892 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x2891))+((cj10*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2892.valid){
continue;
}
CheckValue<IkReal> x2893=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2891)))),-1);
if(!x2893.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2892.value)+(((1.5707963267949)*(x2893.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2894=IKsin(j14);
IkReal x2895=IKcos(j14);
IkReal x2896=((1.0)*cj11);
IkReal x2897=((1.0)*sj10);
IkReal x2898=(gconst94*r11);
IkReal x2899=(cj12*sj11);
IkReal x2900=((1.0)*x2895);
IkReal x2901=((1.0)*x2894);
IkReal x2902=(gconst95*x2895);
IkReal x2903=(gconst94*x2894);
evalcond[0]=((((-1.0)*gconst95*r20*x2901))+((r21*x2903))+(((-1.0)*r22*x2900)));
evalcond[1]=((((-1.0)*gconst95*r10*x2901))+cj10+((x2894*x2898))+(((-1.0)*r12*x2900)));
evalcond[2]=((((-1.0)*r02*x2900))+(((-1.0)*gconst95*r00*x2901))+((r01*x2903))+(((-1.0)*x2897)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*gconst94*r21*x2900))+(((-1.0)*cj12*x2896))+((r20*x2902))+(((-1.0)*r22*x2901)));
evalcond[4]=((((-1.0)*gconst94*r01*x2900))+(((-1.0)*r02*x2901))+(((-1.0)*cj10*x2899))+((r00*x2902))+(((-1.0)*cj10*sj12*x2896)));
evalcond[5]=(((r10*x2902))+(((-1.0)*x2898*x2900))+(((-1.0)*x2897*x2899))+(((-1.0)*r12*x2901))+(((-1.0)*sj10*sj12*x2896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x2904=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x2904;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x2904);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x2905=((1.0)*cj15);
IkReal x2906=((((-1.0)*r10*sj15))+(((-1.0)*r11*x2905)));
j14eval[0]=x2906;
j14eval[1]=IKsign(x2906);
j14eval[2]=((IKabs(r22))+(IKabs((((r21*sj15))+(((-1.0)*r20*x2905))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x2907=r01*r01;
IkReal x2908=cj15*cj15;
IkReal x2909=(r01*sj15);
IkReal x2910=(cj15*r00);
IkReal x2911=((((-1.0)*(r02*r02)))+(((2.0)*x2909*x2910))+(((-1.0)*x2908*(r00*r00)))+((x2907*x2908))+(((-1.0)*x2907)));
j14eval[0]=x2911;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x2909))+x2910))));
j14eval[2]=IKsign(x2911);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2912=r01*r01;
IkReal x2913=cj15*cj15;
IkReal x2914=(r01*sj15);
IkReal x2915=(cj15*r00);
CheckValue<IkReal> x2916=IKPowWithIntegerCheck(IKsign(((((2.0)*x2914*x2915))+(((-1.0)*x2913*(r00*r00)))+(((-1.0)*(r02*r02)))+((x2912*x2913))+(((-1.0)*x2912)))),-1);
if(!x2916.valid){
continue;
}
CheckValue<IkReal> x2917 = IKatan2WithCheck(IkReal(((((-1.0)*x2914))+x2915)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2917.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2916.value)))+(x2917.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2918=IKsin(j14);
IkReal x2919=IKcos(j14);
IkReal x2920=(r11*sj15);
IkReal x2921=((1.0)*cj11);
IkReal x2922=(cj15*r10);
IkReal x2923=(cj15*r00);
IkReal x2924=(r21*sj15);
IkReal x2925=(r01*sj15);
IkReal x2926=(cj15*r20);
IkReal x2927=((1.0)*x2919);
IkReal x2928=((1.0)*x2918);
evalcond[0]=(((x2918*x2924))+(((-1.0)*x2926*x2928))+(((-1.0)*r22*x2927)));
evalcond[1]=(((x2918*x2920))+(((-1.0)*r12*x2927))+(((-1.0)*x2922*x2928)));
evalcond[2]=((((-1.0)*r02*x2928))+((x2919*x2923))+(((-1.0)*x2925*x2927)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2927))+(((-1.0)*x2923*x2928))+((x2918*x2925)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x2921))+((x2919*x2926))+(((-1.0)*x2924*x2927))+(((-1.0)*r22*x2928)));
evalcond[5]=((((-1.0)*x2920*x2927))+((x2919*x2922))+(((-1.0)*cj12*sj11))+(((-1.0)*r12*x2928))+(((-1.0)*sj12*x2921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2929=((1.0)*cj15);
CheckValue<IkReal> x2930=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2929))+(((-1.0)*r10*sj15)))),-1);
if(!x2930.valid){
continue;
}
CheckValue<IkReal> x2931 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2929))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2931.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2930.value)))+(x2931.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2932=IKsin(j14);
IkReal x2933=IKcos(j14);
IkReal x2934=(r11*sj15);
IkReal x2935=((1.0)*cj11);
IkReal x2936=(cj15*r10);
IkReal x2937=(cj15*r00);
IkReal x2938=(r21*sj15);
IkReal x2939=(r01*sj15);
IkReal x2940=(cj15*r20);
IkReal x2941=((1.0)*x2933);
IkReal x2942=((1.0)*x2932);
evalcond[0]=((((-1.0)*x2940*x2942))+((x2932*x2938))+(((-1.0)*r22*x2941)));
evalcond[1]=((((-1.0)*r12*x2941))+(((-1.0)*x2936*x2942))+((x2932*x2934)));
evalcond[2]=((((-1.0)*x2939*x2941))+(((-1.0)*r02*x2942))+((x2933*x2937)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2941))+((x2932*x2939))+(((-1.0)*x2937*x2942)));
evalcond[4]=(((sj11*sj12))+((x2933*x2940))+(((-1.0)*r22*x2942))+(((-1.0)*cj12*x2935))+(((-1.0)*x2938*x2941)));
evalcond[5]=((((-1.0)*x2934*x2941))+(((-1.0)*r12*x2942))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x2935))+((x2933*x2936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x2943=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x2943.valid){
continue;
}
CheckValue<IkReal> x2944 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2944.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2943.value)))+(x2944.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2945=IKsin(j14);
IkReal x2946=IKcos(j14);
IkReal x2947=(r11*sj15);
IkReal x2948=((1.0)*cj11);
IkReal x2949=(cj15*r10);
IkReal x2950=(cj15*r00);
IkReal x2951=(r21*sj15);
IkReal x2952=(r01*sj15);
IkReal x2953=(cj15*r20);
IkReal x2954=((1.0)*x2946);
IkReal x2955=((1.0)*x2945);
evalcond[0]=((((-1.0)*x2953*x2955))+((x2945*x2951))+(((-1.0)*r22*x2954)));
evalcond[1]=(((x2945*x2947))+(((-1.0)*x2949*x2955))+(((-1.0)*r12*x2954)));
evalcond[2]=((((-1.0)*r02*x2955))+(((-1.0)*x2952*x2954))+((x2946*x2950)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2954))+((x2945*x2952))+(((-1.0)*x2950*x2955)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x2948))+((x2946*x2953))+(((-1.0)*x2951*x2954))+(((-1.0)*r22*x2955)));
evalcond[5]=((((-1.0)*x2947*x2954))+((x2946*x2949))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x2948))+(((-1.0)*r12*x2955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x2956=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x2956;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x2956);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x2957=((1.0)*cj15);
IkReal x2958=((((-1.0)*r21*x2957))+(((-1.0)*r20*sj15)));
j14eval[0]=x2958;
j14eval[1]=IKsign(x2958);
j14eval[2]=((IKabs(((((-1.0)*r10*x2957))+((r11*sj15)))))+(IKabs(r12)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x2959=cj15*cj15;
IkReal x2960=r01*r01;
IkReal x2961=(cj15*r00);
IkReal x2962=(r01*sj15);
IkReal x2963=((((-2.0)*x2961*x2962))+((x2959*(r00*r00)))+(((-1.0)*x2959*x2960))+(r02*r02)+x2960);
j14eval[0]=x2963;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x2962))+x2961))));
j14eval[2]=IKsign(x2963);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2964=cj15*cj15;
IkReal x2965=r01*r01;
IkReal x2966=(r01*sj15);
IkReal x2967=(cj15*r00);
CheckValue<IkReal> x2968 = IKatan2WithCheck(IkReal(((((-1.0)*x2966))+x2967)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2968.valid){
continue;
}
CheckValue<IkReal> x2969=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2964*x2965))+((x2964*(r00*r00)))+(((-2.0)*x2966*x2967))+(r02*r02)+x2965)),-1);
if(!x2969.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x2968.value)+(((1.5707963267949)*(x2969.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2970=IKsin(j14);
IkReal x2971=IKcos(j14);
IkReal x2972=(r11*sj15);
IkReal x2973=(cj15*r10);
IkReal x2974=(cj15*r00);
IkReal x2975=(r21*sj15);
IkReal x2976=(r01*sj15);
IkReal x2977=(cj15*r20);
IkReal x2978=((1.0)*x2971);
IkReal x2979=((1.0)*x2970);
evalcond[0]=(((x2970*x2975))+(((-1.0)*x2977*x2979))+(((-1.0)*r22*x2978)));
evalcond[1]=(((x2970*x2972))+(((-1.0)*r12*x2978))+(((-1.0)*x2973*x2979)));
evalcond[2]=(((x2971*x2974))+(((-1.0)*r02*x2979))+(((-1.0)*x2976*x2978)));
evalcond[3]=((1.0)+((x2970*x2976))+(((-1.0)*r02*x2978))+(((-1.0)*x2974*x2979)));
evalcond[4]=((((-1.0)*x2972*x2978))+((x2971*x2973))+(((-1.0)*r12*x2979))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x2975*x2978))+((x2971*x2977))+(((-1.0)*r22*x2979))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2980=((1.0)*cj15);
CheckValue<IkReal> x2981=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2980))+(((-1.0)*r20*sj15)))),-1);
if(!x2981.valid){
continue;
}
CheckValue<IkReal> x2982 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2980))+((r11*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2982.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2981.value)))+(x2982.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2983=IKsin(j14);
IkReal x2984=IKcos(j14);
IkReal x2985=(r11*sj15);
IkReal x2986=(cj15*r10);
IkReal x2987=(cj15*r00);
IkReal x2988=(r21*sj15);
IkReal x2989=(r01*sj15);
IkReal x2990=(cj15*r20);
IkReal x2991=((1.0)*x2984);
IkReal x2992=((1.0)*x2983);
evalcond[0]=(((x2983*x2988))+(((-1.0)*r22*x2991))+(((-1.0)*x2990*x2992)));
evalcond[1]=(((x2983*x2985))+(((-1.0)*r12*x2991))+(((-1.0)*x2986*x2992)));
evalcond[2]=(((x2984*x2987))+(((-1.0)*x2989*x2991))+(((-1.0)*r02*x2992)));
evalcond[3]=((1.0)+((x2983*x2989))+(((-1.0)*x2987*x2992))+(((-1.0)*r02*x2991)));
evalcond[4]=(((x2984*x2986))+(((-1.0)*x2985*x2991))+(((-1.0)*r12*x2992))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r22*x2992))+(((-1.0)*x2988*x2991))+((x2984*x2990))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x2993=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x2993.valid){
continue;
}
CheckValue<IkReal> x2994 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2994.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2993.value)))+(x2994.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x2995=IKsin(j14);
IkReal x2996=IKcos(j14);
IkReal x2997=(r11*sj15);
IkReal x2998=(cj15*r10);
IkReal x2999=(cj15*r00);
IkReal x3000=(r21*sj15);
IkReal x3001=(r01*sj15);
IkReal x3002=(cj15*r20);
IkReal x3003=((1.0)*x2996);
IkReal x3004=((1.0)*x2995);
evalcond[0]=((((-1.0)*r22*x3003))+(((-1.0)*x3002*x3004))+((x2995*x3000)));
evalcond[1]=(((x2995*x2997))+(((-1.0)*x2998*x3004))+(((-1.0)*r12*x3003)));
evalcond[2]=(((x2996*x2999))+(((-1.0)*r02*x3004))+(((-1.0)*x3001*x3003)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3003))+((x2995*x3001))+(((-1.0)*x2999*x3004)));
evalcond[4]=((((-1.0)*x2997*x3003))+((x2996*x2998))+(((-1.0)*r12*x3004))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r22*x3004))+(((-1.0)*x3000*x3003))+((x2996*x3002))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x3005=((-1.0)*px);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3005);
rxp1_1=(px*r21);
rxp1_2=(r11*x3005);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x3006=((-1.0)*px);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3006);
rxp1_1=(px*r21);
rxp1_2=(r11*x3006);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=((((-1.0)*r21*sj15))+((cj15*r20)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x3007=((-1.0)*px);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3007);
rxp1_1=(px*r21);
rxp1_2=(r11*x3007);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=(((cj15*r10))+(((-1.0)*r11*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x3010=IKPowWithIntegerCheck((((cj15*r10))+(((-1.0)*r11*sj15))),-1);
if(!x3010.valid){
continue;
}
IkReal x3008=x3010.value;
IkReal x3009=(sj10*x3008);
cj14array[0]=(((cj12*sj11*x3009))+((cj11*sj12*x3009)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x3011=IKsin(j14);
IkReal x3012=IKcos(j14);
IkReal x3013=(sj15*x3011);
IkReal x3014=((1.0)*x3012);
IkReal x3015=((1.0)*cj15*x3011);
evalcond[0]=((-1.0)*r02*x3011);
evalcond[1]=((((-1.0)*r02*x3014))+(((-1.0)*sj10)));
evalcond[2]=((((-1.0)*r20*x3015))+((r21*x3013)));
evalcond[3]=((((-1.0)*r10*x3015))+((r11*x3013)));
evalcond[4]=(((sj11*sj12))+((cj15*r20*x3012))+(((-1.0)*r21*sj15*x3014))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x3017=IKPowWithIntegerCheck(((((-1.0)*r21*sj15))+((cj15*r20))),-1);
if(!x3017.valid){
continue;
}
IkReal x3016=x3017.value;
cj14array[0]=(((cj11*cj12*x3016))+(((-1.0)*sj11*sj12*x3016)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x3018=IKsin(j14);
IkReal x3019=IKcos(j14);
IkReal x3020=(cj15*r10);
IkReal x3021=((1.0)*sj10);
IkReal x3022=(sj15*x3018);
IkReal x3023=((1.0)*x3019);
IkReal x3024=((1.0)*x3018);
evalcond[0]=((-1.0)*r02*x3018);
evalcond[1]=((((-1.0)*x3021))+(((-1.0)*r02*x3023)));
evalcond[2]=((((-1.0)*cj15*r20*x3024))+((r21*x3022)));
evalcond[3]=(((r11*x3022))+(((-1.0)*x3020*x3024)));
evalcond[4]=((((-1.0)*cj11*sj12*x3021))+((x3019*x3020))+(((-1.0)*r11*sj15*x3023))+(((-1.0)*cj12*sj11*x3021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x3025=IKPowWithIntegerCheck(r02,-1);
if(!x3025.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x3025.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x3026=IKsin(j14);
IkReal x3027=IKcos(j14);
IkReal x3028=(cj15*r10);
IkReal x3029=((1.0)*cj12);
IkReal x3030=(cj15*r20);
IkReal x3031=(sj15*x3026);
IkReal x3032=((1.0)*x3026);
IkReal x3033=((1.0)*sj15*x3027);
evalcond[0]=((-1.0)*r02*x3026);
evalcond[1]=((((-1.0)*x3030*x3032))+((r21*x3031)));
evalcond[2]=(((r11*x3031))+(((-1.0)*x3028*x3032)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r21*x3033))+(((-1.0)*cj11*x3029))+((x3027*x3030)));
evalcond[4]=((((-1.0)*sj10*sj11*x3029))+((x3027*x3028))+(((-1.0)*cj11*sj10*sj12))+(((-1.0)*r11*x3033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3034=((1.0)*sj15);
CheckValue<IkReal> x3035 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x3034))+((cj15*r10*sj10))+(((-1.0)*r11*sj10*x3034))+((cj10*cj15*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3035.valid){
continue;
}
CheckValue<IkReal> x3036=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3034))+(((-1.0)*cj15*r21)))),-1);
if(!x3036.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3035.value)+(((1.5707963267949)*(x3036.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3037=IKsin(j14);
IkReal x3038=IKcos(j14);
IkReal x3039=(r11*sj15);
IkReal x3040=((1.0)*cj11);
IkReal x3041=((1.0)*sj10);
IkReal x3042=(cj12*sj11);
IkReal x3043=(r21*sj15);
IkReal x3044=(r01*sj15);
IkReal x3045=((1.0)*x3038);
IkReal x3046=((1.0)*x3037);
IkReal x3047=(cj15*x3038);
evalcond[0]=(((x3037*x3043))+(((-1.0)*cj15*r20*x3046))+(((-1.0)*r22*x3045)));
evalcond[1]=((((-1.0)*cj15*r10*x3046))+(((-1.0)*r12*x3045))+((x3037*x3039))+cj10);
evalcond[2]=(((x3037*x3044))+(((-1.0)*x3041))+(((-1.0)*cj15*r00*x3046))+(((-1.0)*r02*x3045)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r22*x3046))+(((-1.0)*cj12*x3040))+((r20*x3047))+(((-1.0)*x3043*x3045)));
evalcond[4]=((((-1.0)*cj10*sj12*x3040))+(((-1.0)*cj10*x3042))+(((-1.0)*x3044*x3045))+((r00*x3047))+(((-1.0)*r02*x3046)));
evalcond[5]=((((-1.0)*sj10*sj12*x3040))+((r10*x3047))+(((-1.0)*r12*x3046))+(((-1.0)*x3039*x3045))+(((-1.0)*x3041*x3042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3048=((1.0)*cj15);
CheckValue<IkReal> x3049 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x3048))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3049.valid){
continue;
}
CheckValue<IkReal> x3050=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3048))+(((-1.0)*r10*sj15)))),-1);
if(!x3050.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3049.value)+(((1.5707963267949)*(x3050.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3051=IKsin(j14);
IkReal x3052=IKcos(j14);
IkReal x3053=(r11*sj15);
IkReal x3054=((1.0)*cj11);
IkReal x3055=((1.0)*sj10);
IkReal x3056=(cj12*sj11);
IkReal x3057=(r21*sj15);
IkReal x3058=(r01*sj15);
IkReal x3059=((1.0)*x3052);
IkReal x3060=((1.0)*x3051);
IkReal x3061=(cj15*x3052);
evalcond[0]=(((x3051*x3057))+(((-1.0)*cj15*r20*x3060))+(((-1.0)*r22*x3059)));
evalcond[1]=(((x3051*x3053))+cj10+(((-1.0)*cj15*r10*x3060))+(((-1.0)*r12*x3059)));
evalcond[2]=((((-1.0)*cj15*r00*x3060))+((x3051*x3058))+(((-1.0)*r02*x3059))+(((-1.0)*x3055)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r22*x3060))+(((-1.0)*x3057*x3059))+((r20*x3061))+(((-1.0)*cj12*x3054)));
evalcond[4]=((((-1.0)*cj10*x3056))+(((-1.0)*x3058*x3059))+(((-1.0)*cj10*sj12*x3054))+((r00*x3061))+(((-1.0)*r02*x3060)));
evalcond[5]=((((-1.0)*x3055*x3056))+(((-1.0)*x3053*x3059))+(((-1.0)*r12*x3060))+(((-1.0)*sj10*sj12*x3054))+((r10*x3061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3062=((1.0)*cj15);
CheckValue<IkReal> x3063 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x3062)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3063.valid){
continue;
}
CheckValue<IkReal> x3064=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3062))+(((-1.0)*r00*sj15)))),-1);
if(!x3064.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3063.value)+(((1.5707963267949)*(x3064.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3065=IKsin(j14);
IkReal x3066=IKcos(j14);
IkReal x3067=(r11*sj15);
IkReal x3068=((1.0)*cj11);
IkReal x3069=((1.0)*sj10);
IkReal x3070=(cj12*sj11);
IkReal x3071=(r21*sj15);
IkReal x3072=(r01*sj15);
IkReal x3073=((1.0)*x3066);
IkReal x3074=((1.0)*x3065);
IkReal x3075=(cj15*x3066);
evalcond[0]=((((-1.0)*r22*x3073))+((x3065*x3071))+(((-1.0)*cj15*r20*x3074)));
evalcond[1]=(((x3065*x3067))+cj10+(((-1.0)*r12*x3073))+(((-1.0)*cj15*r10*x3074)));
evalcond[2]=((((-1.0)*cj15*r00*x3074))+(((-1.0)*r02*x3073))+((x3065*x3072))+(((-1.0)*x3069)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r22*x3074))+((r20*x3075))+(((-1.0)*x3071*x3073))+(((-1.0)*cj12*x3068)));
evalcond[4]=((((-1.0)*x3072*x3073))+((r00*x3075))+(((-1.0)*r02*x3074))+(((-1.0)*cj10*x3070))+(((-1.0)*cj10*sj12*x3068)));
evalcond[5]=((((-1.0)*x3067*x3073))+((r10*x3075))+(((-1.0)*r12*x3074))+(((-1.0)*x3069*x3070))+(((-1.0)*sj10*sj12*x3068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x3076=(((sj11*sj12))+(((-1.0)*cj11*cj12)));
j10eval[0]=x3076;
j10eval[1]=IKsign(x3076);
j10eval[2]=((IKabs((((cj15*r01))+((r00*sj15)))))+(IKabs((((cj15*r11))+((r10*sj15))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x3077=r21*r21;
IkReal x3078=cj15*cj15;
IkReal x3079=(cj11*cj12);
IkReal x3080=(r21*sj15);
IkReal x3081=(cj15*r20);
IkReal x3082=(sj11*sj12);
IkReal x3083=((((-1.0)*x3077))+(((2.0)*x3080*x3081))+(((-1.0)*x3078*(r20*r20)))+((x3077*x3078))+(((-1.0)*(r22*r22))));
j14eval[0]=x3083;
j14eval[1]=((IKabs((((r22*x3082))+(((-1.0)*r22*x3079)))))+(IKabs((((x3080*x3082))+((x3079*x3081))+(((-1.0)*x3079*x3080))+(((-1.0)*x3081*x3082))))));
j14eval[2]=IKsign(x3083);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[1];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j10eval[0]=(((sj11*sj12))+(((-1.0)*cj11*cj12)));
if( IKabs(j10eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((3.3845991639283)*py))))+IKsqr(((((3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.56068013982083)*px))+(((3.3845991639283)*py))), ((((3.3845991639283)*px))+(((1.56068013982083)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x3084=IKsin(j10);
IkReal x3085=IKcos(j10);
evalcond[0]=((((-0.11235)*x3084))+(((-1.0)*px))+(((0.24365)*x3085)));
evalcond[1]=((((0.11235)*x3085))+(((-1.0)*py))+(((0.24365)*x3084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x3086=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x3086;
j14eval[1]=IKsign(x3086);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x3087=((1.0)*cj15);
IkReal x3088=((((-1.0)*r00*sj15))+(((-1.0)*r01*x3087)));
j14eval[0]=x3088;
j14eval[1]=((IKabs((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x3087)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x3088);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x3089=((1.0)*cj15);
IkReal x3090=((((-1.0)*r00*sj15))+(((-1.0)*r01*x3089)));
j14eval[0]=x3090;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x3089))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x3090);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3091=((1.0)*cj15);
CheckValue<IkReal> x3092 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj10*x3091))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3092.valid){
continue;
}
CheckValue<IkReal> x3093=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3091))+(((-1.0)*r00*sj15)))),-1);
if(!x3093.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3092.value)+(((1.5707963267949)*(x3093.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3094=IKcos(j14);
IkReal x3095=IKsin(j14);
IkReal x3096=((1.0)*sj10);
IkReal x3097=(sj15*x3095);
IkReal x3098=((1.0)*x3094);
IkReal x3099=(sj15*x3094);
IkReal x3100=((1.0)*cj15*x3095);
evalcond[0]=(((r21*x3099))+(((-1.0)*cj15*r20*x3098))+((r22*x3095)));
evalcond[1]=((((-1.0)*r20*x3100))+(((-1.0)*r22*x3098))+((r21*x3097)));
evalcond[2]=((((-1.0)*r12*x3098))+(((-1.0)*r10*x3100))+cj10+((r11*x3097)));
evalcond[3]=(((r01*x3099))+(((-1.0)*cj15*r00*x3098))+((r02*x3095))+(((-1.0)*cj10)));
evalcond[4]=((((-1.0)*cj15*r10*x3098))+(((-1.0)*x3096))+((r11*x3099))+((r12*x3095)));
evalcond[5]=(((r01*x3097))+(((-1.0)*r02*x3098))+(((-1.0)*x3096))+(((-1.0)*r00*x3100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3101=((1.0)*cj15);
CheckValue<IkReal> x3102 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x3101))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3102.valid){
continue;
}
CheckValue<IkReal> x3103=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3101))+(((-1.0)*r00*sj15)))),-1);
if(!x3103.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3102.value)+(((1.5707963267949)*(x3103.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3104=IKcos(j14);
IkReal x3105=IKsin(j14);
IkReal x3106=((1.0)*sj10);
IkReal x3107=(sj15*x3105);
IkReal x3108=((1.0)*x3104);
IkReal x3109=(sj15*x3104);
IkReal x3110=((1.0)*cj15*x3105);
evalcond[0]=(((r21*x3109))+((r22*x3105))+(((-1.0)*cj15*r20*x3108)));
evalcond[1]=((((-1.0)*r20*x3110))+((r21*x3107))+(((-1.0)*r22*x3108)));
evalcond[2]=(((r11*x3107))+(((-1.0)*r12*x3108))+cj10+(((-1.0)*r10*x3110)));
evalcond[3]=((((-1.0)*cj15*r00*x3108))+((r02*x3105))+((r01*x3109))+(((-1.0)*cj10)));
evalcond[4]=(((r11*x3109))+(((-1.0)*x3106))+(((-1.0)*cj15*r10*x3108))+((r12*x3105)));
evalcond[5]=((((-1.0)*x3106))+(((-1.0)*r00*x3110))+((r01*x3107))+(((-1.0)*r02*x3108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x3111=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x3111.valid){
continue;
}
CheckValue<IkReal> x3112 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3112.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3111.value)))+(x3112.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3113=IKcos(j14);
IkReal x3114=IKsin(j14);
IkReal x3115=((1.0)*sj10);
IkReal x3116=(sj15*x3114);
IkReal x3117=((1.0)*x3113);
IkReal x3118=(sj15*x3113);
IkReal x3119=((1.0)*cj15*x3114);
evalcond[0]=(((r22*x3114))+(((-1.0)*cj15*r20*x3117))+((r21*x3118)));
evalcond[1]=((((-1.0)*r20*x3119))+((r21*x3116))+(((-1.0)*r22*x3117)));
evalcond[2]=((((-1.0)*r12*x3117))+cj10+(((-1.0)*r10*x3119))+((r11*x3116)));
evalcond[3]=(((r02*x3114))+(((-1.0)*cj10))+((r01*x3118))+(((-1.0)*cj15*r00*x3117)));
evalcond[4]=(((r12*x3114))+(((-1.0)*x3115))+(((-1.0)*cj15*r10*x3117))+((r11*x3118)));
evalcond[5]=((((-1.0)*r02*x3117))+(((-1.0)*x3115))+(((-1.0)*r00*x3119))+((r01*x3116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((3.3845991639283)*py))))+IKsqr(((((3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.56068013982083)*px))+(((3.3845991639283)*py))), ((((3.3845991639283)*px))+(((1.56068013982083)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x3120=IKsin(j10);
IkReal x3121=IKcos(j10);
evalcond[0]=((((0.24365)*x3121))+(((-1.0)*px))+(((-0.11235)*x3120)));
evalcond[1]=((((0.24365)*x3120))+(((-1.0)*py))+(((0.11235)*x3121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x3122=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x3122;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x3122);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x3123=((1.0)*cj15);
IkReal x3124=((((-1.0)*r11*x3123))+(((-1.0)*r10*sj15)));
j14eval[0]=x3124;
j14eval[1]=IKsign(x3124);
j14eval[2]=((IKabs(((((-1.0)*cj10*r20*x3123))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x3125=cj15*cj15;
IkReal x3126=(cj15*sj15);
IkReal x3127=(r01*r21);
IkReal x3128=((1.0)*r20);
IkReal x3129=((((-1.0)*r02*r22))+(((-1.0)*x3127))+((r00*r21*x3126))+((x3125*x3127))+((r01*r20*x3126))+(((-1.0)*r00*x3125*x3128)));
j14eval[0]=x3129;
j14eval[1]=((IKabs((cj10*r22)))+(IKabs(((((-1.0)*cj10*cj15*x3128))+((cj10*r21*sj15))))));
j14eval[2]=IKsign(x3129);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3130=cj15*cj15;
IkReal x3131=(cj15*sj15);
IkReal x3132=(r01*r21);
IkReal x3133=((1.0)*r20);
CheckValue<IkReal> x3134=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((x3130*x3132))+(((-1.0)*x3132))+((r00*r21*x3131))+((r01*r20*x3131))+(((-1.0)*r00*x3130*x3133)))),-1);
if(!x3134.valid){
continue;
}
CheckValue<IkReal> x3135 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*x3133))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3135.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3134.value)))+(x3135.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3136=IKcos(j14);
IkReal x3137=IKsin(j14);
IkReal x3138=(cj15*r00);
IkReal x3139=(cj15*r10);
IkReal x3140=(cj15*r20);
IkReal x3141=(sj15*x3137);
IkReal x3142=((1.0)*x3136);
IkReal x3143=(sj15*x3136);
IkReal x3144=((1.0)*x3137);
evalcond[0]=((((-1.0)*x3140*x3142))+((r22*x3137))+((r21*x3143)));
evalcond[1]=((((-1.0)*r22*x3142))+(((-1.0)*x3140*x3144))+((r21*x3141)));
evalcond[2]=(((r01*x3143))+cj10+((r02*x3137))+(((-1.0)*x3138*x3142)));
evalcond[3]=(((r11*x3143))+sj10+((r12*x3137))+(((-1.0)*x3139*x3142)));
evalcond[4]=((((-1.0)*r12*x3142))+((r11*x3141))+cj10+(((-1.0)*x3139*x3144)));
evalcond[5]=(((r01*x3141))+(((-1.0)*r02*x3142))+(((-1.0)*sj10))+(((-1.0)*x3138*x3144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3145=((1.0)*cj15);
CheckValue<IkReal> x3146=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3145))+(((-1.0)*r10*sj15)))),-1);
if(!x3146.valid){
continue;
}
CheckValue<IkReal> x3147 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*r20*x3145))+((cj10*r21*sj15)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3147.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3146.value)))+(x3147.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3148=IKcos(j14);
IkReal x3149=IKsin(j14);
IkReal x3150=(cj15*r00);
IkReal x3151=(cj15*r10);
IkReal x3152=(cj15*r20);
IkReal x3153=(sj15*x3149);
IkReal x3154=((1.0)*x3148);
IkReal x3155=(sj15*x3148);
IkReal x3156=((1.0)*x3149);
evalcond[0]=(((r22*x3149))+((r21*x3155))+(((-1.0)*x3152*x3154)));
evalcond[1]=((((-1.0)*r22*x3154))+((r21*x3153))+(((-1.0)*x3152*x3156)));
evalcond[2]=(((r02*x3149))+(((-1.0)*x3150*x3154))+cj10+((r01*x3155)));
evalcond[3]=(((r12*x3149))+((r11*x3155))+sj10+(((-1.0)*x3151*x3154)));
evalcond[4]=(((r11*x3153))+cj10+(((-1.0)*r12*x3154))+(((-1.0)*x3151*x3156)));
evalcond[5]=((((-1.0)*x3150*x3156))+(((-1.0)*sj10))+((r01*x3153))+(((-1.0)*r02*x3154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x3157 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3157.valid){
continue;
}
CheckValue<IkReal> x3158=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x3158.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3157.value)+(((1.5707963267949)*(x3158.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3159=IKcos(j14);
IkReal x3160=IKsin(j14);
IkReal x3161=(cj15*r00);
IkReal x3162=(cj15*r10);
IkReal x3163=(cj15*r20);
IkReal x3164=(sj15*x3160);
IkReal x3165=((1.0)*x3159);
IkReal x3166=(sj15*x3159);
IkReal x3167=((1.0)*x3160);
evalcond[0]=(((r22*x3160))+(((-1.0)*x3163*x3165))+((r21*x3166)));
evalcond[1]=((((-1.0)*x3163*x3167))+((r21*x3164))+(((-1.0)*r22*x3165)));
evalcond[2]=(((r02*x3160))+(((-1.0)*x3161*x3165))+cj10+((r01*x3166)));
evalcond[3]=((((-1.0)*x3162*x3165))+((r11*x3166))+((r12*x3160))+sj10);
evalcond[4]=((((-1.0)*r12*x3165))+(((-1.0)*x3162*x3167))+((r11*x3164))+cj10);
evalcond[5]=((((-1.0)*x3161*x3167))+((r01*x3164))+(((-1.0)*sj10))+(((-1.0)*r02*x3165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
evalcond[0]=((((-0.11235)*(IKsin(j10))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x3168=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x3168;
j14eval[1]=IKsign(x3168);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x3169=((1.0)*cj15);
IkReal x3170=((((-1.0)*r00*sj15))+(((-1.0)*r01*x3169)));
j14eval[0]=x3170;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x3169))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x3170);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x3171=((1.0)*cj15);
IkReal x3172=((((-1.0)*r01*x3171))+(((-1.0)*r00*sj15)));
j14eval[0]=x3172;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x3171))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x3172);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3173=((1.0)*cj15);
CheckValue<IkReal> x3174=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3173))+(((-1.0)*r00*sj15)))),-1);
if(!x3174.valid){
continue;
}
CheckValue<IkReal> x3175 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj10*x3173))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3175.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3174.value)))+(x3175.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3176=IKcos(j14);
IkReal x3177=IKsin(j14);
IkReal x3178=((1.0)*sj10);
IkReal x3179=(sj15*x3177);
IkReal x3180=((1.0)*x3176);
IkReal x3181=(sj15*x3176);
IkReal x3182=((1.0)*cj15*x3177);
evalcond[0]=((((-1.0)*cj15*r20*x3180))+((r22*x3177))+((r21*x3181)));
evalcond[1]=((((-1.0)*r22*x3180))+(((-1.0)*r20*x3182))+((r21*x3179)));
evalcond[2]=(((r11*x3179))+cj10+(((-1.0)*r12*x3180))+(((-1.0)*r10*x3182)));
evalcond[3]=(((r01*x3181))+((r02*x3177))+(((-1.0)*cj15*r00*x3180))+(((-1.0)*cj10)));
evalcond[4]=((((-1.0)*cj15*r10*x3180))+(((-1.0)*x3178))+((r11*x3181))+((r12*x3177)));
evalcond[5]=((((-1.0)*r02*x3180))+(((-1.0)*x3178))+((r01*x3179))+(((-1.0)*r00*x3182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3183=((1.0)*cj15);
CheckValue<IkReal> x3184=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x3183)))),-1);
if(!x3184.valid){
continue;
}
CheckValue<IkReal> x3185 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x3183))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3185.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3184.value)))+(x3185.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3186=IKcos(j14);
IkReal x3187=IKsin(j14);
IkReal x3188=((1.0)*sj10);
IkReal x3189=(sj15*x3187);
IkReal x3190=((1.0)*x3186);
IkReal x3191=(sj15*x3186);
IkReal x3192=((1.0)*cj15*x3187);
evalcond[0]=(((r22*x3187))+((r21*x3191))+(((-1.0)*cj15*r20*x3190)));
evalcond[1]=((((-1.0)*r22*x3190))+(((-1.0)*r20*x3192))+((r21*x3189)));
evalcond[2]=((((-1.0)*r10*x3192))+cj10+(((-1.0)*r12*x3190))+((r11*x3189)));
evalcond[3]=(((r01*x3191))+(((-1.0)*cj15*r00*x3190))+(((-1.0)*cj10))+((r02*x3187)));
evalcond[4]=((((-1.0)*cj15*r10*x3190))+((r12*x3187))+((r11*x3191))+(((-1.0)*x3188)));
evalcond[5]=(((r01*x3189))+(((-1.0)*r02*x3190))+(((-1.0)*x3188))+(((-1.0)*r00*x3192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x3193=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x3193.valid){
continue;
}
CheckValue<IkReal> x3194 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3194.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3193.value)))+(x3194.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3195=IKcos(j14);
IkReal x3196=IKsin(j14);
IkReal x3197=((1.0)*sj10);
IkReal x3198=(sj15*x3196);
IkReal x3199=((1.0)*x3195);
IkReal x3200=(sj15*x3195);
IkReal x3201=((1.0)*cj15*x3196);
evalcond[0]=((((-1.0)*cj15*r20*x3199))+((r22*x3196))+((r21*x3200)));
evalcond[1]=((((-1.0)*r22*x3199))+((r21*x3198))+(((-1.0)*r20*x3201)));
evalcond[2]=((((-1.0)*r10*x3201))+((r11*x3198))+cj10+(((-1.0)*r12*x3199)));
evalcond[3]=(((r01*x3200))+(((-1.0)*cj15*r00*x3199))+(((-1.0)*cj10))+((r02*x3196)));
evalcond[4]=((((-1.0)*cj15*r10*x3199))+((r11*x3200))+((r12*x3196))+(((-1.0)*x3197)));
evalcond[5]=((((-1.0)*r00*x3201))+((r01*x3198))+(((-1.0)*r02*x3199))+(((-1.0)*x3197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
evalcond[0]=((((-0.11235)*(IKsin(j10))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x3202=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x3202;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x3202);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x3203=((1.0)*cj15);
IkReal x3204=((((-1.0)*r11*x3203))+(((-1.0)*r10*sj15)));
j14eval[0]=x3204;
j14eval[1]=IKsign(x3204);
j14eval[2]=((IKabs(((((-1.0)*cj10*r20*x3203))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x3205=cj15*cj15;
IkReal x3206=(cj15*sj15);
IkReal x3207=(r01*r21);
IkReal x3208=((1.0)*r20);
IkReal x3209=((((-1.0)*r02*r22))+((x3205*x3207))+((r00*r21*x3206))+(((-1.0)*x3207))+((r01*r20*x3206))+(((-1.0)*r00*x3205*x3208)));
j14eval[0]=x3209;
j14eval[1]=((IKabs(((((-1.0)*cj10*cj15*x3208))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x3209);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3210=cj15*cj15;
IkReal x3211=(cj15*sj15);
IkReal x3212=(r01*r21);
IkReal x3213=((1.0)*r20);
CheckValue<IkReal> x3214=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((r01*r20*x3211))+((r00*r21*x3211))+(((-1.0)*x3212))+(((-1.0)*r00*x3210*x3213))+((x3210*x3212)))),-1);
if(!x3214.valid){
continue;
}
CheckValue<IkReal> x3215 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*x3213))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3215.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3214.value)))+(x3215.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3216=IKcos(j14);
IkReal x3217=IKsin(j14);
IkReal x3218=(cj15*r00);
IkReal x3219=(cj15*r10);
IkReal x3220=(cj15*r20);
IkReal x3221=(sj15*x3217);
IkReal x3222=((1.0)*x3216);
IkReal x3223=(sj15*x3216);
IkReal x3224=((1.0)*x3217);
evalcond[0]=(((r22*x3217))+((r21*x3223))+(((-1.0)*x3220*x3222)));
evalcond[1]=(((r21*x3221))+(((-1.0)*r22*x3222))+(((-1.0)*x3220*x3224)));
evalcond[2]=(((r01*x3223))+cj10+(((-1.0)*x3218*x3222))+((r02*x3217)));
evalcond[3]=(((r11*x3223))+((r12*x3217))+sj10+(((-1.0)*x3219*x3222)));
evalcond[4]=(((r11*x3221))+cj10+(((-1.0)*x3219*x3224))+(((-1.0)*r12*x3222)));
evalcond[5]=((((-1.0)*r02*x3222))+((r01*x3221))+(((-1.0)*sj10))+(((-1.0)*x3218*x3224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3225=((1.0)*cj15);
CheckValue<IkReal> x3226 = IKatan2WithCheck(IkReal((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x3225)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3226.valid){
continue;
}
CheckValue<IkReal> x3227=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj15))+(((-1.0)*r11*x3225)))),-1);
if(!x3227.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3226.value)+(((1.5707963267949)*(x3227.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3228=IKcos(j14);
IkReal x3229=IKsin(j14);
IkReal x3230=(cj15*r00);
IkReal x3231=(cj15*r10);
IkReal x3232=(cj15*r20);
IkReal x3233=(sj15*x3229);
IkReal x3234=((1.0)*x3228);
IkReal x3235=(sj15*x3228);
IkReal x3236=((1.0)*x3229);
evalcond[0]=((((-1.0)*x3232*x3234))+((r22*x3229))+((r21*x3235)));
evalcond[1]=((((-1.0)*x3232*x3236))+(((-1.0)*r22*x3234))+((r21*x3233)));
evalcond[2]=(((r02*x3229))+((r01*x3235))+(((-1.0)*x3230*x3234))+cj10);
evalcond[3]=(((r12*x3229))+(((-1.0)*x3231*x3234))+((r11*x3235))+sj10);
evalcond[4]=((((-1.0)*x3231*x3236))+((r11*x3233))+(((-1.0)*r12*x3234))+cj10);
evalcond[5]=((((-1.0)*r02*x3234))+((r01*x3233))+(((-1.0)*x3230*x3236))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x3237 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3237.valid){
continue;
}
CheckValue<IkReal> x3238=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x3238.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3237.value)+(((1.5707963267949)*(x3238.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3239=IKcos(j14);
IkReal x3240=IKsin(j14);
IkReal x3241=(cj15*r00);
IkReal x3242=(cj15*r10);
IkReal x3243=(cj15*r20);
IkReal x3244=(sj15*x3240);
IkReal x3245=((1.0)*x3239);
IkReal x3246=(sj15*x3239);
IkReal x3247=((1.0)*x3240);
evalcond[0]=(((r22*x3240))+(((-1.0)*x3243*x3245))+((r21*x3246)));
evalcond[1]=((((-1.0)*x3243*x3247))+((r21*x3244))+(((-1.0)*r22*x3245)));
evalcond[2]=(((r01*x3246))+cj10+(((-1.0)*x3241*x3245))+((r02*x3240)));
evalcond[3]=(sj10+((r12*x3240))+(((-1.0)*x3242*x3245))+((r11*x3246)));
evalcond[4]=((((-1.0)*r12*x3245))+cj10+(((-1.0)*x3242*x3247))+((r11*x3244)));
evalcond[5]=(((r01*x3244))+(((-1.0)*r02*x3245))+(((-1.0)*sj10))+(((-1.0)*x3241*x3247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((-3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))))+IKsqr(((((-3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))), ((((-3.3845991639283)*px))+(((1.56068013982083)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x3248=IKcos(j10);
IkReal x3249=IKsin(j10);
evalcond[0]=((((-1.0)*px))+(((-0.11235)*x3249))+(((-0.24365)*x3248)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*x3248))+(((-0.24365)*x3249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x3250=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x3250;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x3250);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x3251=((1.0)*cj15);
IkReal x3252=((((-1.0)*r10*sj15))+(((-1.0)*r11*x3251)));
j14eval[0]=x3252;
j14eval[1]=IKsign(x3252);
j14eval[2]=((IKabs((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x3251)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x3253=cj15*cj15;
IkReal x3254=(cj15*sj15);
IkReal x3255=(r01*r21);
IkReal x3256=((1.0)*r20);
IkReal x3257=((((-1.0)*r02*r22))+(((-1.0)*r00*x3253*x3256))+(((-1.0)*x3255))+((x3253*x3255))+((r01*r20*x3254))+((r00*r21*x3254)));
j14eval[0]=x3257;
j14eval[1]=((IKabs((((cj10*r21*sj15))+(((-1.0)*cj10*cj15*x3256)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x3257);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3258=cj15*cj15;
IkReal x3259=(cj15*sj15);
IkReal x3260=(r01*r21);
IkReal x3261=((1.0)*r20);
CheckValue<IkReal> x3262 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*x3261))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3262.valid){
continue;
}
CheckValue<IkReal> x3263=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3258*x3261))+(((-1.0)*r02*r22))+(((-1.0)*x3260))+((x3258*x3260))+((r01*r20*x3259))+((r00*r21*x3259)))),-1);
if(!x3263.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3262.value)+(((1.5707963267949)*(x3263.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3264=IKcos(j14);
IkReal x3265=IKsin(j14);
IkReal x3266=(cj15*r00);
IkReal x3267=(cj15*r10);
IkReal x3268=(cj15*r20);
IkReal x3269=(sj15*x3265);
IkReal x3270=((1.0)*x3264);
IkReal x3271=(sj15*x3264);
IkReal x3272=((1.0)*x3265);
evalcond[0]=((((-1.0)*x3268*x3270))+((r21*x3271))+((r22*x3265)));
evalcond[1]=((((-1.0)*x3268*x3272))+((r21*x3269))+(((-1.0)*r22*x3270)));
evalcond[2]=(((r01*x3271))+cj10+((r02*x3265))+(((-1.0)*x3266*x3270)));
evalcond[3]=(sj10+((r11*x3271))+((r12*x3265))+(((-1.0)*x3267*x3270)));
evalcond[4]=((((-1.0)*r12*x3270))+cj10+((r11*x3269))+(((-1.0)*x3267*x3272)));
evalcond[5]=(((r01*x3269))+(((-1.0)*x3266*x3272))+(((-1.0)*sj10))+(((-1.0)*r02*x3270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3273=((1.0)*cj15);
CheckValue<IkReal> x3274=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3273))+(((-1.0)*r10*sj15)))),-1);
if(!x3274.valid){
continue;
}
CheckValue<IkReal> x3275 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*r20*x3273))+((cj10*r21*sj15)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3275.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3274.value)))+(x3275.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3276=IKcos(j14);
IkReal x3277=IKsin(j14);
IkReal x3278=(cj15*r00);
IkReal x3279=(cj15*r10);
IkReal x3280=(cj15*r20);
IkReal x3281=(sj15*x3277);
IkReal x3282=((1.0)*x3276);
IkReal x3283=(sj15*x3276);
IkReal x3284=((1.0)*x3277);
evalcond[0]=((((-1.0)*x3280*x3282))+((r21*x3283))+((r22*x3277)));
evalcond[1]=((((-1.0)*x3280*x3284))+(((-1.0)*r22*x3282))+((r21*x3281)));
evalcond[2]=(cj10+((r02*x3277))+(((-1.0)*x3278*x3282))+((r01*x3283)));
evalcond[3]=((((-1.0)*x3279*x3282))+sj10+((r12*x3277))+((r11*x3283)));
evalcond[4]=((((-1.0)*r12*x3282))+(((-1.0)*x3279*x3284))+cj10+((r11*x3281)));
evalcond[5]=((((-1.0)*sj10))+(((-1.0)*r02*x3282))+(((-1.0)*x3278*x3284))+((r01*x3281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x3285 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3285.valid){
continue;
}
CheckValue<IkReal> x3286=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x3286.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3285.value)+(((1.5707963267949)*(x3286.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3287=IKcos(j14);
IkReal x3288=IKsin(j14);
IkReal x3289=(cj15*r00);
IkReal x3290=(cj15*r10);
IkReal x3291=(cj15*r20);
IkReal x3292=(sj15*x3288);
IkReal x3293=((1.0)*x3287);
IkReal x3294=(sj15*x3287);
IkReal x3295=((1.0)*x3288);
evalcond[0]=((((-1.0)*x3291*x3293))+((r22*x3288))+((r21*x3294)));
evalcond[1]=((((-1.0)*r22*x3293))+(((-1.0)*x3291*x3295))+((r21*x3292)));
evalcond[2]=(((r01*x3294))+((r02*x3288))+cj10+(((-1.0)*x3289*x3293)));
evalcond[3]=(sj10+((r11*x3294))+((r12*x3288))+(((-1.0)*x3290*x3293)));
evalcond[4]=((((-1.0)*r12*x3293))+cj10+((r11*x3292))+(((-1.0)*x3290*x3295)));
evalcond[5]=(((r01*x3292))+(((-1.0)*r02*x3293))+(((-1.0)*sj10))+(((-1.0)*x3289*x3295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-1.56068013982083)*px))+(((-3.3845991639283)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.3845991639283)*px))+(((1.56068013982083)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))))+IKsqr(((((-3.3845991639283)*px))+(((1.56068013982083)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.56068013982083)*px))+(((-3.3845991639283)*py))), ((((-3.3845991639283)*px))+(((1.56068013982083)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x3296=IKcos(j10);
IkReal x3297=IKsin(j10);
evalcond[0]=((((-0.11235)*x3297))+(((-1.0)*px))+(((-0.24365)*x3296)));
evalcond[1]=((((0.11235)*x3296))+(((-1.0)*py))+(((-0.24365)*x3297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x3298=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x3298;
j14eval[1]=IKsign(x3298);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x3299=((1.0)*cj15);
IkReal x3300=((((-1.0)*r01*x3299))+(((-1.0)*r00*sj15)));
j14eval[0]=x3300;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x3299))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x3300);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x3301=((1.0)*cj15);
IkReal x3302=((((-1.0)*r00*sj15))+(((-1.0)*r01*x3301)));
j14eval[0]=x3302;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x3301))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x3302);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3303=((1.0)*cj15);
CheckValue<IkReal> x3304 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj10*x3303))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3304.valid){
continue;
}
CheckValue<IkReal> x3305=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x3303)))),-1);
if(!x3305.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3304.value)+(((1.5707963267949)*(x3305.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3306=IKcos(j14);
IkReal x3307=IKsin(j14);
IkReal x3308=((1.0)*sj10);
IkReal x3309=(sj15*x3307);
IkReal x3310=((1.0)*x3306);
IkReal x3311=(sj15*x3306);
IkReal x3312=((1.0)*cj15*x3307);
evalcond[0]=((((-1.0)*cj15*r20*x3310))+((r21*x3311))+((r22*x3307)));
evalcond[1]=((((-1.0)*r20*x3312))+((r21*x3309))+(((-1.0)*r22*x3310)));
evalcond[2]=(((r11*x3309))+cj10+(((-1.0)*r12*x3310))+(((-1.0)*r10*x3312)));
evalcond[3]=((((-1.0)*cj15*r00*x3310))+((r02*x3307))+(((-1.0)*cj10))+((r01*x3311)));
evalcond[4]=((((-1.0)*cj15*r10*x3310))+(((-1.0)*x3308))+((r11*x3311))+((r12*x3307)));
evalcond[5]=((((-1.0)*x3308))+(((-1.0)*r02*x3310))+(((-1.0)*r00*x3312))+((r01*x3309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3313=((1.0)*cj15);
CheckValue<IkReal> x3314=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x3313)))),-1);
if(!x3314.valid){
continue;
}
CheckValue<IkReal> x3315 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x3313)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3315.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3314.value)))+(x3315.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3316=IKcos(j14);
IkReal x3317=IKsin(j14);
IkReal x3318=((1.0)*sj10);
IkReal x3319=(sj15*x3317);
IkReal x3320=((1.0)*x3316);
IkReal x3321=(sj15*x3316);
IkReal x3322=((1.0)*cj15*x3317);
evalcond[0]=(((r22*x3317))+((r21*x3321))+(((-1.0)*cj15*r20*x3320)));
evalcond[1]=(((r21*x3319))+(((-1.0)*r20*x3322))+(((-1.0)*r22*x3320)));
evalcond[2]=((((-1.0)*r10*x3322))+((r11*x3319))+cj10+(((-1.0)*r12*x3320)));
evalcond[3]=(((r01*x3321))+((r02*x3317))+(((-1.0)*cj10))+(((-1.0)*cj15*r00*x3320)));
evalcond[4]=((((-1.0)*cj15*r10*x3320))+((r11*x3321))+(((-1.0)*x3318))+((r12*x3317)));
evalcond[5]=((((-1.0)*r02*x3320))+(((-1.0)*x3318))+((r01*x3319))+(((-1.0)*r00*x3322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x3323=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x3323.valid){
continue;
}
CheckValue<IkReal> x3324 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3324.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3323.value)))+(x3324.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3325=IKcos(j14);
IkReal x3326=IKsin(j14);
IkReal x3327=((1.0)*sj10);
IkReal x3328=(sj15*x3326);
IkReal x3329=((1.0)*x3325);
IkReal x3330=(sj15*x3325);
IkReal x3331=((1.0)*cj15*x3326);
evalcond[0]=(((r22*x3326))+((r21*x3330))+(((-1.0)*cj15*r20*x3329)));
evalcond[1]=((((-1.0)*r20*x3331))+((r21*x3328))+(((-1.0)*r22*x3329)));
evalcond[2]=(((r11*x3328))+cj10+(((-1.0)*r10*x3331))+(((-1.0)*r12*x3329)));
evalcond[3]=(((r01*x3330))+(((-1.0)*cj10))+((r02*x3326))+(((-1.0)*cj15*r00*x3329)));
evalcond[4]=((((-1.0)*x3327))+((r12*x3326))+(((-1.0)*cj15*r10*x3329))+((r11*x3330)));
evalcond[5]=((((-1.0)*x3327))+(((-1.0)*r02*x3329))+((r01*x3328))+(((-1.0)*r00*x3331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
evalcond[0]=((((-0.11235)*(IKsin(j10))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x3332=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x3332;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x3332);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x3333=((1.0)*cj15);
IkReal x3334=((((-1.0)*r10*sj15))+(((-1.0)*r11*x3333)));
j14eval[0]=x3334;
j14eval[1]=IKsign(x3334);
j14eval[2]=((IKabs(((((-1.0)*cj10*r20*x3333))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x3335=cj15*cj15;
IkReal x3336=(cj15*sj15);
IkReal x3337=(r01*r21);
IkReal x3338=((1.0)*r20);
IkReal x3339=(((r00*r21*x3336))+(((-1.0)*r02*r22))+((r01*r20*x3336))+(((-1.0)*x3337))+(((-1.0)*r00*x3335*x3338))+((x3335*x3337)));
j14eval[0]=x3339;
j14eval[1]=((IKabs(((((-1.0)*cj10*cj15*x3338))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x3339);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3340=cj15*cj15;
IkReal x3341=(cj15*sj15);
IkReal x3342=(r01*r21);
IkReal x3343=((1.0)*r20);
CheckValue<IkReal> x3344=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3340*x3343))+((r01*r20*x3341))+((x3340*x3342))+(((-1.0)*x3342))+(((-1.0)*r02*r22))+((r00*r21*x3341)))),-1);
if(!x3344.valid){
continue;
}
CheckValue<IkReal> x3345 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*x3343))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3345.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3344.value)))+(x3345.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3346=IKcos(j14);
IkReal x3347=IKsin(j14);
IkReal x3348=(cj15*r00);
IkReal x3349=(cj15*r10);
IkReal x3350=(cj15*r20);
IkReal x3351=(sj15*x3347);
IkReal x3352=((1.0)*x3346);
IkReal x3353=(sj15*x3346);
IkReal x3354=((1.0)*x3347);
evalcond[0]=(((r22*x3347))+(((-1.0)*x3350*x3352))+((r21*x3353)));
evalcond[1]=((((-1.0)*x3350*x3354))+((r21*x3351))+(((-1.0)*r22*x3352)));
evalcond[2]=((((-1.0)*x3348*x3352))+((r01*x3353))+((r02*x3347))+cj10);
evalcond[3]=(((r11*x3353))+(((-1.0)*x3349*x3352))+sj10+((r12*x3347)));
evalcond[4]=(((r11*x3351))+(((-1.0)*x3349*x3354))+cj10+(((-1.0)*r12*x3352)));
evalcond[5]=((((-1.0)*x3348*x3354))+(((-1.0)*r02*x3352))+((r01*x3351))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3355=((1.0)*cj15);
CheckValue<IkReal> x3356 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*r20*x3355))+((cj10*r21*sj15)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3356.valid){
continue;
}
CheckValue<IkReal> x3357=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3355))+(((-1.0)*r10*sj15)))),-1);
if(!x3357.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3356.value)+(((1.5707963267949)*(x3357.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3358=IKcos(j14);
IkReal x3359=IKsin(j14);
IkReal x3360=(cj15*r00);
IkReal x3361=(cj15*r10);
IkReal x3362=(cj15*r20);
IkReal x3363=(sj15*x3359);
IkReal x3364=((1.0)*x3358);
IkReal x3365=(sj15*x3358);
IkReal x3366=((1.0)*x3359);
evalcond[0]=((((-1.0)*x3362*x3364))+((r21*x3365))+((r22*x3359)));
evalcond[1]=((((-1.0)*x3362*x3366))+((r21*x3363))+(((-1.0)*r22*x3364)));
evalcond[2]=((((-1.0)*x3360*x3364))+((r01*x3365))+cj10+((r02*x3359)));
evalcond[3]=((((-1.0)*x3361*x3364))+((r12*x3359))+sj10+((r11*x3365)));
evalcond[4]=((((-1.0)*x3361*x3366))+(((-1.0)*r12*x3364))+cj10+((r11*x3363)));
evalcond[5]=((((-1.0)*x3360*x3366))+((r01*x3363))+(((-1.0)*r02*x3364))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x3367 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3367.valid){
continue;
}
CheckValue<IkReal> x3368=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x3368.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3367.value)+(((1.5707963267949)*(x3368.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3369=IKcos(j14);
IkReal x3370=IKsin(j14);
IkReal x3371=(cj15*r00);
IkReal x3372=(cj15*r10);
IkReal x3373=(cj15*r20);
IkReal x3374=(sj15*x3370);
IkReal x3375=((1.0)*x3369);
IkReal x3376=(sj15*x3369);
IkReal x3377=((1.0)*x3370);
evalcond[0]=((((-1.0)*x3373*x3375))+((r22*x3370))+((r21*x3376)));
evalcond[1]=((((-1.0)*r22*x3375))+(((-1.0)*x3373*x3377))+((r21*x3374)));
evalcond[2]=(((r01*x3376))+((r02*x3370))+cj10+(((-1.0)*x3371*x3375)));
evalcond[3]=(((r12*x3370))+sj10+((r11*x3376))+(((-1.0)*x3372*x3375)));
evalcond[4]=(cj10+(((-1.0)*r12*x3375))+((r11*x3374))+(((-1.0)*x3372*x3377)));
evalcond[5]=(((r01*x3374))+(((-1.0)*r02*x3375))+(((-1.0)*x3371*x3377))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((-8.90075656430797)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.90075656430797)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-8.90075656430797)*px))+IKsqr(((8.90075656430797)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((-8.90075656430797)*px), ((8.90075656430797)*py));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
evalcond[0]=((((-0.11235)*(IKsin(j10))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*(IKcos(j10)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x3378=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x3378;
j14eval[1]=IKsign(x3378);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x3379=((1.0)*cj15);
IkReal x3380=((((-1.0)*r00*sj15))+(((-1.0)*r01*x3379)));
j14eval[0]=x3380;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x3379))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x3380);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x3381=((1.0)*cj15);
IkReal x3382=((((-1.0)*r00*sj15))+(((-1.0)*r01*x3381)));
j14eval[0]=x3382;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x3381))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x3382);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3383=((1.0)*cj15);
CheckValue<IkReal> x3384 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj10*x3383))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3384.valid){
continue;
}
CheckValue<IkReal> x3385=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x3383)))),-1);
if(!x3385.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3384.value)+(((1.5707963267949)*(x3385.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3386=IKcos(j14);
IkReal x3387=IKsin(j14);
IkReal x3388=((1.0)*sj10);
IkReal x3389=(sj15*x3387);
IkReal x3390=((1.0)*x3386);
IkReal x3391=(sj15*x3386);
IkReal x3392=((1.0)*cj15*x3387);
evalcond[0]=(((r21*x3391))+((r22*x3387))+(((-1.0)*cj15*r20*x3390)));
evalcond[1]=((((-1.0)*r22*x3390))+((r21*x3389))+(((-1.0)*r20*x3392)));
evalcond[2]=(cj10+(((-1.0)*r10*x3392))+(((-1.0)*r12*x3390))+((r11*x3389)));
evalcond[3]=((((-1.0)*cj15*r00*x3390))+((r01*x3391))+((r02*x3387))+(((-1.0)*cj10)));
evalcond[4]=((((-1.0)*cj15*r10*x3390))+((r11*x3391))+((r12*x3387))+(((-1.0)*x3388)));
evalcond[5]=(((r01*x3389))+(((-1.0)*r02*x3390))+(((-1.0)*x3388))+(((-1.0)*r00*x3392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3393=((1.0)*cj15);
CheckValue<IkReal> x3394 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x3393))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3394.valid){
continue;
}
CheckValue<IkReal> x3395=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3393))+(((-1.0)*r00*sj15)))),-1);
if(!x3395.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3394.value)+(((1.5707963267949)*(x3395.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3396=IKcos(j14);
IkReal x3397=IKsin(j14);
IkReal x3398=((1.0)*sj10);
IkReal x3399=(sj15*x3397);
IkReal x3400=((1.0)*x3396);
IkReal x3401=(sj15*x3396);
IkReal x3402=((1.0)*cj15*x3397);
evalcond[0]=((((-1.0)*cj15*r20*x3400))+((r21*x3401))+((r22*x3397)));
evalcond[1]=((((-1.0)*r20*x3402))+((r21*x3399))+(((-1.0)*r22*x3400)));
evalcond[2]=((((-1.0)*r12*x3400))+cj10+((r11*x3399))+(((-1.0)*r10*x3402)));
evalcond[3]=((((-1.0)*cj15*r00*x3400))+((r02*x3397))+((r01*x3401))+(((-1.0)*cj10)));
evalcond[4]=(((r11*x3401))+(((-1.0)*x3398))+((r12*x3397))+(((-1.0)*cj15*r10*x3400)));
evalcond[5]=((((-1.0)*r00*x3402))+((r01*x3399))+(((-1.0)*r02*x3400))+(((-1.0)*x3398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x3403=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x3403.valid){
continue;
}
CheckValue<IkReal> x3404 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3404.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3403.value)))+(x3404.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3405=IKcos(j14);
IkReal x3406=IKsin(j14);
IkReal x3407=((1.0)*sj10);
IkReal x3408=(sj15*x3406);
IkReal x3409=((1.0)*x3405);
IkReal x3410=(sj15*x3405);
IkReal x3411=((1.0)*cj15*x3406);
evalcond[0]=(((r22*x3406))+(((-1.0)*cj15*r20*x3409))+((r21*x3410)));
evalcond[1]=((((-1.0)*r20*x3411))+((r21*x3408))+(((-1.0)*r22*x3409)));
evalcond[2]=(((r11*x3408))+(((-1.0)*r12*x3409))+cj10+(((-1.0)*r10*x3411)));
evalcond[3]=(((r02*x3406))+(((-1.0)*cj15*r00*x3409))+((r01*x3410))+(((-1.0)*cj10)));
evalcond[4]=(((r11*x3410))+((r12*x3406))+(((-1.0)*cj15*r10*x3409))+(((-1.0)*x3407)));
evalcond[5]=((((-1.0)*r02*x3409))+((r01*x3408))+(((-1.0)*x3407))+(((-1.0)*r00*x3411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10, j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x3412=(sj11*sj12);
IkReal x3413=(cj11*cj12);
IkReal x3414=((20000.0)*px);
IkReal x3415=((4873.0)*cj11);
IkReal x3416=(r00*sj15);
IkReal x3417=(cj15*r01);
IkReal x3418=((5972.0)*x3417);
CheckValue<IkReal> x3419=IKPowWithIntegerCheck(((((2247.0)*x3412))+(((-2247.0)*x3413))),-1);
if(!x3419.valid){
continue;
}
CheckValue<IkReal> x3420=IKPowWithIntegerCheck(((((-1.0)*x3413))+x3412),-1);
if(!x3420.valid){
continue;
}
if( IKabs(((x3419.value)*(((((-1.0)*x3412*x3418))+(((-1.0)*x3412*x3414))+(((-5972.0)*x3412*x3416))+((x3413*x3414))+((x3413*x3418))+(((5972.0)*x3413*x3416))+((x3415*x3416))+((x3415*x3417)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3420.value)*((x3416+x3417)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3419.value)*(((((-1.0)*x3412*x3418))+(((-1.0)*x3412*x3414))+(((-5972.0)*x3412*x3416))+((x3413*x3414))+((x3413*x3418))+(((5972.0)*x3413*x3416))+((x3415*x3416))+((x3415*x3417))))))+IKsqr(((x3420.value)*((x3416+x3417))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x3419.value)*(((((-1.0)*x3412*x3418))+(((-1.0)*x3412*x3414))+(((-5972.0)*x3412*x3416))+((x3413*x3414))+((x3413*x3418))+(((5972.0)*x3413*x3416))+((x3415*x3416))+((x3415*x3417))))), ((x3420.value)*((x3416+x3417))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x3421=IKcos(j10);
IkReal x3422=IKsin(j10);
IkReal x3423=(sj11*sj12);
IkReal x3424=((1.0)*cj15);
IkReal x3425=(cj11*cj12);
IkReal x3426=(r00*sj15);
IkReal x3427=(r10*sj15);
IkReal x3428=((0.08535)*cj15);
IkReal x3429=(cj11*x3422);
IkReal x3430=((0.21325)*x3421);
evalcond[0]=((((-1.0)*x3421*x3425))+(((-1.0)*r01*x3424))+((x3421*x3423))+(((-1.0)*x3426)));
evalcond[1]=((((-1.0)*r11*x3424))+(((-1.0)*x3422*x3425))+((x3422*x3423))+(((-1.0)*x3427)));
evalcond[2]=(((x3425*x3430))+(((-0.11235)*x3422))+(((-1.0)*r01*x3428))+(((-1.0)*px))+(((0.24365)*cj11*x3421))+(((-0.08535)*x3426))+(((-1.0)*x3423*x3430)));
evalcond[3]=((((0.21325)*x3422*x3425))+(((0.24365)*x3429))+(((-1.0)*r11*x3428))+(((-1.0)*py))+(((-0.21325)*x3422*x3423))+(((-0.08535)*x3427))+(((0.11235)*x3421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x3431=((1.0)*cj15);
IkReal x3432=((((-1.0)*r01*x3431))+(((-1.0)*r00*sj15)));
j14eval[0]=x3432;
j14eval[1]=((IKabs((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x3431)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x3432);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x3433=((1.0)*cj15);
IkReal x3434=((((-1.0)*r11*x3433))+(((-1.0)*r10*sj15)));
j14eval[0]=x3434;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x3433))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x3434);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x3435=((1.0)*sj15);
IkReal x3436=((((-1.0)*cj15*r21))+(((-1.0)*r20*x3435)));
j14eval[0]=x3436;
j14eval[1]=((IKabs(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))))+(IKabs(((((-1.0)*cj10*r01*x3435))+((cj15*r10*sj10))+(((-1.0)*r11*sj10*x3435))+((cj10*cj15*r00))))));
j14eval[2]=IKsign(x3436);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3437=((-1.0)*r20);
IkReal x3439 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3439)==0){
continue;
}
IkReal x3438=pow(x3439,-0.5);
CheckValue<IkReal> x3440 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3437),IKFAST_ATAN2_MAGTHRESH);
if(!x3440.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3440.value));
IkReal gconst97=(r21*x3438);
IkReal gconst98=(x3437*x3438);
CheckValue<IkReal> x3441 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3441.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x3441.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x3442=((-1.0)*r20);
IkReal x3443=x3438;
CheckValue<IkReal> x3445 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3442),IKFAST_ATAN2_MAGTHRESH);
if(!x3445.valid){
continue;
}
IkReal x3444=((-1.0)*(x3445.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst97;
cj15=gconst98;
j15=x3444;
IkReal gconst96=x3444;
IkReal gconst97=(r21*x3443);
IkReal gconst98=(x3442*x3443);
j14eval[0]=cj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x3446=((-1.0)*r20);
IkReal x3447=x3438;
CheckValue<IkReal> x3449 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3446),IKFAST_ATAN2_MAGTHRESH);
if(!x3449.valid){
continue;
}
IkReal x3448=((-1.0)*(x3449.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst97;
cj15=gconst98;
j15=x3448;
IkReal gconst96=x3448;
IkReal gconst97=(r21*x3447);
IkReal gconst98=(x3446*x3447);
j14eval[0]=sj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x3450=((-1.0)*r20);
IkReal x3451=x3438;
CheckValue<IkReal> x3453 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3450),IKFAST_ATAN2_MAGTHRESH);
if(!x3453.valid){
continue;
}
IkReal x3452=((-1.0)*(x3453.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst97;
cj15=gconst98;
j15=x3452;
IkReal gconst96=x3452;
IkReal gconst97=(r21*x3451);
IkReal gconst98=(x3450*x3451);
IkReal x3454=((1.0)*(r22*r22));
CheckValue<IkReal> x3458=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3454))),-1);
if(!x3458.valid){
continue;
}
IkReal x3455=x3458.value;
IkReal x3456=((1.0)*x3455);
IkReal x3457=((((-1.0)*x3454))+(((-2.0)*x3455*(r20*r20)*(r21*r21)))+(((-1.0)*x3456*(r20*r20*r20*r20)))+(((-1.0)*x3456*(r21*r21*r21*r21))));
j14eval[0]=x3457;
j14eval[1]=IKsign(x3457);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3459=(gconst98*r20);
IkReal x3460=(cj11*cj12);
IkReal x3461=(sj11*sj12);
IkReal x3462=(gconst97*r21);
CheckValue<IkReal> x3463=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3459*x3459)))+(((2.0)*x3459*x3462))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3462*x3462))))),-1);
if(!x3463.valid){
continue;
}
CheckValue<IkReal> x3464 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3460))+((r22*x3461)))),IkReal((((x3461*x3462))+(((-1.0)*x3459*x3461))+(((-1.0)*x3460*x3462))+((x3459*x3460)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3464.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3463.value)))+(x3464.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3465=IKsin(j14);
IkReal x3466=IKcos(j14);
IkReal x3467=(gconst98*r10);
IkReal x3468=((1.0)*cj11);
IkReal x3469=((1.0)*sj10);
IkReal x3470=(gconst97*r21);
IkReal x3471=(cj12*sj11);
IkReal x3472=((1.0)*x3466);
IkReal x3473=(gconst97*x3465);
IkReal x3474=(gconst97*x3466);
IkReal x3475=((1.0)*gconst98*x3465);
evalcond[0]=((((-1.0)*r20*x3475))+((x3465*x3470))+(((-1.0)*r22*x3472)));
evalcond[1]=((((-1.0)*x3465*x3467))+(((-1.0)*r12*x3472))+cj10+((r11*x3473)));
evalcond[2]=((((-1.0)*r00*x3475))+(((-1.0)*r02*x3472))+((r01*x3473))+(((-1.0)*x3469)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*gconst98*r20*x3472))+((x3466*x3470))+(((-1.0)*cj12*x3468))+((r22*x3465)));
evalcond[4]=((((-1.0)*cj10*sj12*x3468))+(((-1.0)*cj10*x3471))+((r01*x3474))+(((-1.0)*gconst98*r00*x3472))+((r02*x3465)));
evalcond[5]=((((-1.0)*x3467*x3472))+((r12*x3465))+(((-1.0)*sj10*sj12*x3468))+(((-1.0)*x3469*x3471))+((r11*x3474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3476=((1.0)*gconst98);
CheckValue<IkReal> x3477 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x3476))+((gconst97*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3477.valid){
continue;
}
CheckValue<IkReal> x3478=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3476))+(((-1.0)*gconst97*r10)))),-1);
if(!x3478.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3477.value)+(((1.5707963267949)*(x3478.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3479=IKsin(j14);
IkReal x3480=IKcos(j14);
IkReal x3481=(gconst98*r10);
IkReal x3482=((1.0)*cj11);
IkReal x3483=((1.0)*sj10);
IkReal x3484=(gconst97*r21);
IkReal x3485=(cj12*sj11);
IkReal x3486=((1.0)*x3480);
IkReal x3487=(gconst97*x3479);
IkReal x3488=(gconst97*x3480);
IkReal x3489=((1.0)*gconst98*x3479);
evalcond[0]=((((-1.0)*r20*x3489))+((x3479*x3484))+(((-1.0)*r22*x3486)));
evalcond[1]=((((-1.0)*r12*x3486))+cj10+(((-1.0)*x3479*x3481))+((r11*x3487)));
evalcond[2]=((((-1.0)*r00*x3489))+(((-1.0)*r02*x3486))+((r01*x3487))+(((-1.0)*x3483)));
evalcond[3]=(((sj11*sj12))+((x3480*x3484))+(((-1.0)*gconst98*r20*x3486))+(((-1.0)*cj12*x3482))+((r22*x3479)));
evalcond[4]=(((r01*x3488))+(((-1.0)*cj10*x3485))+(((-1.0)*gconst98*r00*x3486))+((r02*x3479))+(((-1.0)*cj10*sj12*x3482)));
evalcond[5]=((((-1.0)*x3483*x3485))+(((-1.0)*x3481*x3486))+((r12*x3479))+((r11*x3488))+(((-1.0)*sj10*sj12*x3482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3490=((1.0)*gconst98);
CheckValue<IkReal> x3491 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst97*r21))+(((-1.0)*cj10*r20*x3490)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3491.valid){
continue;
}
CheckValue<IkReal> x3492=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3490))+(((-1.0)*gconst97*r00)))),-1);
if(!x3492.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3491.value)+(((1.5707963267949)*(x3492.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3493=IKsin(j14);
IkReal x3494=IKcos(j14);
IkReal x3495=(gconst98*r10);
IkReal x3496=((1.0)*cj11);
IkReal x3497=((1.0)*sj10);
IkReal x3498=(gconst97*r21);
IkReal x3499=(cj12*sj11);
IkReal x3500=((1.0)*x3494);
IkReal x3501=(gconst97*x3493);
IkReal x3502=(gconst97*x3494);
IkReal x3503=((1.0)*gconst98*x3493);
evalcond[0]=((((-1.0)*r22*x3500))+((x3493*x3498))+(((-1.0)*r20*x3503)));
evalcond[1]=((((-1.0)*r12*x3500))+(((-1.0)*x3493*x3495))+cj10+((r11*x3501)));
evalcond[2]=(((r01*x3501))+(((-1.0)*x3497))+(((-1.0)*r00*x3503))+(((-1.0)*r02*x3500)));
evalcond[3]=(((sj11*sj12))+((x3494*x3498))+(((-1.0)*cj12*x3496))+((r22*x3493))+(((-1.0)*gconst98*r20*x3500)));
evalcond[4]=(((r01*x3502))+(((-1.0)*cj10*sj12*x3496))+(((-1.0)*gconst98*r00*x3500))+(((-1.0)*cj10*x3499))+((r02*x3493)));
evalcond[5]=((((-1.0)*x3495*x3500))+(((-1.0)*x3497*x3499))+(((-1.0)*sj10*sj12*x3496))+((r11*x3502))+((r12*x3493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3504=((-1.0)*r21);
IkReal x3506 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3506)==0){
continue;
}
IkReal x3505=pow(x3506,-0.5);
CheckValue<IkReal> x3507 = IKatan2WithCheck(IkReal(x3504),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3507.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3507.value))));
IkReal gconst100=(x3504*x3505);
IkReal gconst101=((1.0)*r20*x3505);
CheckValue<IkReal> x3508 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3508.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x3508.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x3509=((-1.0)*r21);
CheckValue<IkReal> x3512 = IKatan2WithCheck(IkReal(x3509),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3512.valid){
continue;
}
IkReal x3510=((1.0)*(x3512.value));
IkReal x3511=x3505;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst100;
cj15=gconst101;
j15=((3.14159265)+(((-1.0)*x3510)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3510)));
IkReal gconst100=(x3509*x3511);
IkReal gconst101=((1.0)*r20*x3511);
IkReal x3513=r22*r22;
IkReal x3514=((1.0)*x3513);
CheckValue<IkReal> x3518=IKPowWithIntegerCheck(((-1.0)+x3513),-1);
if(!x3518.valid){
continue;
}
IkReal x3515=x3518.value;
if((((1.0)+(((-1.0)*x3514)))) < -0.00001)
continue;
IkReal x3516=IKsqrt(((1.0)+(((-1.0)*x3514))));
IkReal x3517=(cj10*x3515*x3516);
j14eval[0]=((IKabs(((((-1.0)*x3514*x3517))+x3517)))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x3519=((-1.0)*r21);
CheckValue<IkReal> x3522 = IKatan2WithCheck(IkReal(x3519),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3522.valid){
continue;
}
IkReal x3520=((1.0)*(x3522.value));
IkReal x3521=x3505;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst100;
cj15=gconst101;
j15=((3.14159265)+(((-1.0)*x3520)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3520)));
IkReal gconst100=(x3519*x3521);
IkReal gconst101=((1.0)*r20*x3521);
IkReal x3523=r22*r22;
IkReal x3524=((1.0)*x3523);
CheckValue<IkReal> x3528=IKPowWithIntegerCheck(((-1.0)+x3523),-1);
if(!x3528.valid){
continue;
}
IkReal x3525=x3528.value;
if((((1.0)+(((-1.0)*x3524)))) < -0.00001)
continue;
IkReal x3526=IKsqrt(((1.0)+(((-1.0)*x3524))));
IkReal x3527=(sj10*x3525*x3526);
j14eval[0]=((IKabs(((((-1.0)*x3524*x3527))+x3527)))+(IKabs((r22*sj10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x3529=((-1.0)*r21);
CheckValue<IkReal> x3532 = IKatan2WithCheck(IkReal(x3529),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3532.valid){
continue;
}
IkReal x3530=((1.0)*(x3532.value));
IkReal x3531=x3505;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst100;
cj15=gconst101;
j15=((3.14159265)+(((-1.0)*x3530)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3530)));
IkReal gconst100=(x3529*x3531);
IkReal gconst101=((1.0)*r20*x3531);
IkReal x3533=r22*r22;
IkReal x3534=(cj10*r02);
IkReal x3535=(r12*sj10);
CheckValue<IkReal> x3539=IKPowWithIntegerCheck(((-1.0)+x3533),-1);
if(!x3539.valid){
continue;
}
IkReal x3536=x3539.value;
if((((1.0)+(((-1.0)*x3533)))) < -0.00001)
continue;
IkReal x3537=IKsqrt(((1.0)+(((-1.0)*x3533))));
IkReal x3538=(r22*x3536*x3537);
j14eval[0]=0;
j14eval[1]=((IKabs((((x3534*x3538))+((x3535*x3538)))))+(IKabs(((((-1.0)*x3535))+(((-1.0)*x3534))))));
j14eval[2]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3540=((1.0)*gconst100);
CheckValue<IkReal> x3541=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3540))+(((-1.0)*gconst101*r21)))),-1);
if(!x3541.valid){
continue;
}
CheckValue<IkReal> x3542 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((gconst101*r10*sj10))+(((-1.0)*r11*sj10*x3540))+((cj10*gconst101*r00))+(((-1.0)*cj10*r01*x3540)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3542.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3541.value)))+(x3542.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3543=IKsin(j14);
IkReal x3544=IKcos(j14);
IkReal x3545=(gconst101*r20);
IkReal x3546=((1.0)*cj11);
IkReal x3547=((1.0)*sj10);
IkReal x3548=(cj12*sj11);
IkReal x3549=((1.0)*x3544);
IkReal x3550=(gconst100*x3544);
IkReal x3551=(gconst100*x3543);
IkReal x3552=((1.0)*gconst101*x3543);
evalcond[0]=(((r21*x3551))+(((-1.0)*x3543*x3545))+(((-1.0)*r22*x3549)));
evalcond[1]=((((-1.0)*r10*x3552))+cj10+(((-1.0)*r12*x3549))+((r11*x3551)));
evalcond[2]=((((-1.0)*r02*x3549))+((r01*x3551))+(((-1.0)*r00*x3552))+(((-1.0)*x3547)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x3545*x3549))+((r21*x3550))+((r22*x3543))+(((-1.0)*cj12*x3546)));
evalcond[4]=((((-1.0)*cj10*sj12*x3546))+((r02*x3543))+((r01*x3550))+(((-1.0)*cj10*x3548))+(((-1.0)*gconst101*r00*x3549)));
evalcond[5]=((((-1.0)*sj10*sj12*x3546))+((r12*x3543))+(((-1.0)*gconst101*r10*x3549))+((r11*x3550))+(((-1.0)*x3547*x3548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3553=((1.0)*gconst101);
CheckValue<IkReal> x3554 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x3553))+((gconst100*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3554.valid){
continue;
}
CheckValue<IkReal> x3555=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3553)))),-1);
if(!x3555.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3554.value)+(((1.5707963267949)*(x3555.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3556=IKsin(j14);
IkReal x3557=IKcos(j14);
IkReal x3558=(gconst101*r20);
IkReal x3559=((1.0)*cj11);
IkReal x3560=((1.0)*sj10);
IkReal x3561=(cj12*sj11);
IkReal x3562=((1.0)*x3557);
IkReal x3563=(gconst100*x3557);
IkReal x3564=(gconst100*x3556);
IkReal x3565=((1.0)*gconst101*x3556);
evalcond[0]=(((r21*x3564))+(((-1.0)*r22*x3562))+(((-1.0)*x3556*x3558)));
evalcond[1]=((((-1.0)*r10*x3565))+(((-1.0)*r12*x3562))+cj10+((r11*x3564)));
evalcond[2]=((((-1.0)*r02*x3562))+((r01*x3564))+(((-1.0)*x3560))+(((-1.0)*r00*x3565)));
evalcond[3]=(((sj11*sj12))+((r21*x3563))+((r22*x3556))+(((-1.0)*cj12*x3559))+(((-1.0)*x3558*x3562)));
evalcond[4]=((((-1.0)*cj10*sj12*x3559))+((r01*x3563))+(((-1.0)*cj10*x3561))+(((-1.0)*gconst101*r00*x3562))+((r02*x3556)));
evalcond[5]=((((-1.0)*sj10*sj12*x3559))+(((-1.0)*x3560*x3561))+((r12*x3556))+((r11*x3563))+(((-1.0)*gconst101*r10*x3562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3566=((1.0)*gconst101);
CheckValue<IkReal> x3567=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x3566)))),-1);
if(!x3567.valid){
continue;
}
CheckValue<IkReal> x3568 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x3566))+((cj10*gconst100*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3568.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3567.value)))+(x3568.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3569=IKsin(j14);
IkReal x3570=IKcos(j14);
IkReal x3571=(gconst101*r20);
IkReal x3572=((1.0)*cj11);
IkReal x3573=((1.0)*sj10);
IkReal x3574=(cj12*sj11);
IkReal x3575=((1.0)*x3570);
IkReal x3576=(gconst100*x3570);
IkReal x3577=(gconst100*x3569);
IkReal x3578=((1.0)*gconst101*x3569);
evalcond[0]=(((r21*x3577))+(((-1.0)*x3569*x3571))+(((-1.0)*r22*x3575)));
evalcond[1]=((((-1.0)*r10*x3578))+cj10+((r11*x3577))+(((-1.0)*r12*x3575)));
evalcond[2]=(((r01*x3577))+(((-1.0)*x3573))+(((-1.0)*r00*x3578))+(((-1.0)*r02*x3575)));
evalcond[3]=(((sj11*sj12))+((r21*x3576))+(((-1.0)*cj12*x3572))+(((-1.0)*x3571*x3575))+((r22*x3569)));
evalcond[4]=((((-1.0)*cj10*sj12*x3572))+((r01*x3576))+((r02*x3569))+(((-1.0)*cj10*x3574))+(((-1.0)*gconst101*r00*x3575)));
evalcond[5]=((((-1.0)*gconst101*r10*x3575))+(((-1.0)*sj10*sj12*x3572))+(((-1.0)*x3573*x3574))+((r11*x3576))+((r12*x3569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3579=((-1.0)*r10);
IkReal x3581 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3581)==0){
continue;
}
IkReal x3580=pow(x3581,-0.5);
CheckValue<IkReal> x3582 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3579),IKFAST_ATAN2_MAGTHRESH);
if(!x3582.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3582.value));
IkReal gconst103=(r11*x3580);
IkReal gconst104=(x3579*x3580);
CheckValue<IkReal> x3583 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3583.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x3583.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x3584=((-1.0)*r10);
IkReal x3585=x3580;
CheckValue<IkReal> x3587 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3584),IKFAST_ATAN2_MAGTHRESH);
if(!x3587.valid){
continue;
}
IkReal x3586=((-1.0)*(x3587.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst103;
cj15=gconst104;
j15=x3586;
IkReal gconst102=x3586;
IkReal gconst103=(r11*x3585);
IkReal gconst104=(x3584*x3585);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3588=((1.0)*cj10);
IkReal x3589=((1.0)*gconst103);
CheckValue<IkReal> x3590=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x3589)))),-1);
if(!x3590.valid){
continue;
}
CheckValue<IkReal> x3591 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3588))+(((-1.0)*r12*sj10)))),IkReal(((((-1.0)*r11*sj10*x3589))+((cj10*gconst104*r00))+(((-1.0)*gconst103*r01*x3588))+((gconst104*r10*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3591.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3590.value)))+(x3591.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3592=IKsin(j14);
IkReal x3593=IKcos(j14);
IkReal x3594=((1.0)*cj11);
IkReal x3595=(gconst104*r20);
IkReal x3596=(gconst103*r11);
IkReal x3597=((1.0)*sj10);
IkReal x3598=(gconst104*r00);
IkReal x3599=(cj12*sj11);
IkReal x3600=(gconst104*r10);
IkReal x3601=((1.0)*x3593);
IkReal x3602=(gconst103*x3592);
IkReal x3603=((1.0)*x3592);
IkReal x3604=(gconst103*x3593);
evalcond[0]=(((r21*x3602))+(((-1.0)*r22*x3601))+(((-1.0)*x3595*x3603)));
evalcond[1]=((((-1.0)*r12*x3601))+((x3592*x3596))+cj10+(((-1.0)*x3600*x3603)));
evalcond[2]=((((-1.0)*x3598*x3603))+(((-1.0)*r02*x3601))+((r01*x3602))+(((-1.0)*x3597)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x3594))+((r21*x3604))+(((-1.0)*x3595*x3601))+((r22*x3592)));
evalcond[4]=((((-1.0)*cj10*sj12*x3594))+((r02*x3592))+(((-1.0)*x3598*x3601))+((r01*x3604))+(((-1.0)*cj10*x3599)));
evalcond[5]=(((x3593*x3596))+((r12*x3592))+(((-1.0)*sj10*sj12*x3594))+(((-1.0)*x3600*x3601))+(((-1.0)*x3597*x3599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3605=((1.0)*gconst104);
CheckValue<IkReal> x3606=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3605))+(((-1.0)*gconst103*r00)))),-1);
if(!x3606.valid){
continue;
}
CheckValue<IkReal> x3607 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x3605))+((cj10*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3607.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3606.value)))+(x3607.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3608=IKsin(j14);
IkReal x3609=IKcos(j14);
IkReal x3610=((1.0)*cj11);
IkReal x3611=(gconst104*r20);
IkReal x3612=(gconst103*r11);
IkReal x3613=((1.0)*sj10);
IkReal x3614=(gconst104*r00);
IkReal x3615=(cj12*sj11);
IkReal x3616=(gconst104*r10);
IkReal x3617=((1.0)*x3609);
IkReal x3618=(gconst103*x3608);
IkReal x3619=((1.0)*x3608);
IkReal x3620=(gconst103*x3609);
evalcond[0]=((((-1.0)*x3611*x3619))+((r21*x3618))+(((-1.0)*r22*x3617)));
evalcond[1]=((((-1.0)*x3616*x3619))+((x3608*x3612))+(((-1.0)*r12*x3617))+cj10);
evalcond[2]=((((-1.0)*r02*x3617))+(((-1.0)*x3614*x3619))+((r01*x3618))+(((-1.0)*x3613)));
evalcond[3]=(((sj11*sj12))+((r21*x3620))+(((-1.0)*x3611*x3617))+(((-1.0)*cj12*x3610))+((r22*x3608)));
evalcond[4]=((((-1.0)*cj10*sj12*x3610))+((r02*x3608))+((r01*x3620))+(((-1.0)*x3614*x3617))+(((-1.0)*cj10*x3615)));
evalcond[5]=((((-1.0)*x3616*x3617))+((x3609*x3612))+(((-1.0)*x3613*x3615))+(((-1.0)*sj10*sj12*x3610))+((r12*x3608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3621=((-1.0)*r11);
IkReal x3623 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3623)==0){
continue;
}
IkReal x3622=pow(x3623,-0.5);
CheckValue<IkReal> x3624 = IKatan2WithCheck(IkReal(x3621),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3624.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3624.value))));
IkReal gconst106=(x3621*x3622);
IkReal gconst107=((1.0)*r10*x3622);
CheckValue<IkReal> x3625 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3625.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x3625.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x3626=((-1.0)*r11);
CheckValue<IkReal> x3629 = IKatan2WithCheck(IkReal(x3626),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3629.valid){
continue;
}
IkReal x3627=((1.0)*(x3629.value));
IkReal x3628=x3622;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst106;
cj15=gconst107;
j15=((3.14159265)+(((-1.0)*x3627)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3627)));
IkReal gconst106=(x3626*x3628);
IkReal gconst107=((1.0)*r10*x3628);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x3630=((-1.0)*r11);
CheckValue<IkReal> x3633 = IKatan2WithCheck(IkReal(x3630),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3633.valid){
continue;
}
IkReal x3631=((1.0)*(x3633.value));
IkReal x3632=x3622;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst106;
cj15=gconst107;
j15=((3.14159265)+(((-1.0)*x3631)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3631)));
IkReal gconst106=(x3630*x3632);
IkReal gconst107=((1.0)*r10*x3632);
IkReal x3634=r12*r12;
IkReal x3635=(cj10*r02);
IkReal x3636=x3622;
IkReal x3637=(sj10*x3636);
j14eval[0]=((IKabs(((((-1.0)*x3635))+(((-1.0)*r12*sj10)))))+(IKabs((((x3634*x3637))+(((-1.0)*x3637))+((r12*x3635*x3636))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x3638=((-1.0)*r11);
CheckValue<IkReal> x3641 = IKatan2WithCheck(IkReal(x3638),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3641.valid){
continue;
}
IkReal x3639=((1.0)*(x3641.value));
IkReal x3640=x3622;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst106;
cj15=gconst107;
j15=((3.14159265)+(((-1.0)*x3639)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3639)));
IkReal gconst106=(x3638*x3640);
IkReal gconst107=((1.0)*r10*x3640);
IkReal x3642=r12*r12;
IkReal x3643=(cj11*cj12);
IkReal x3644=(sj11*sj12);
IkReal x3645=((1.0)+(((-1.0)*x3642)));
CheckValue<IkReal> x3652=IKPowWithIntegerCheck(x3645,-1);
if(!x3652.valid){
continue;
}
IkReal x3646=x3652.value;
CheckValue<IkReal> x3653=IKPowWithIntegerCheck(((-1.0)+x3642),-1);
if(!x3653.valid){
continue;
}
IkReal x3647=x3653.value;
IkReal x3648=((1.0)*x3646);
if((x3645) < -0.00001)
continue;
IkReal x3649=IKsqrt(x3645);
IkReal x3650=(r12*r22*x3647*x3649);
IkReal x3651=((((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x3646))+(((-1.0)*x3648*(r10*r10)*(r20*r20)))+(((-1.0)*x3648*(r11*r11)*(r21*r21))));
j14eval[0]=x3651;
j14eval[1]=IKsign(x3651);
j14eval[2]=((IKabs((((x3643*x3650))+(((-1.0)*x3644*x3650)))))+(IKabs(((((-1.0)*r22*x3643))+((r22*x3644))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3654=(sj11*sj12);
IkReal x3655=(gconst107*r20);
IkReal x3656=(gconst106*r21);
IkReal x3657=((1.0)*cj11*cj12);
CheckValue<IkReal> x3658=IKPowWithIntegerCheck(IKsign(((((2.0)*x3655*x3656))+(((-1.0)*(x3655*x3655)))+(((-1.0)*(x3656*x3656)))+(((-1.0)*(r22*r22))))),-1);
if(!x3658.valid){
continue;
}
CheckValue<IkReal> x3659 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3657))+((r22*x3654)))),IkReal(((((-1.0)*x3654*x3655))+((x3654*x3656))+(((-1.0)*x3656*x3657))+((cj11*cj12*x3655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3659.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3658.value)))+(x3659.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3660=IKsin(j14);
IkReal x3661=IKcos(j14);
IkReal x3662=((1.0)*cj11);
IkReal x3663=(gconst106*r21);
IkReal x3664=(gconst107*r20);
IkReal x3665=((1.0)*sj10);
IkReal x3666=(gconst107*r10);
IkReal x3667=(cj12*sj11);
IkReal x3668=(gconst107*r00);
IkReal x3669=((1.0)*x3661);
IkReal x3670=(gconst106*x3660);
IkReal x3671=((1.0)*x3660);
IkReal x3672=(gconst106*x3661);
evalcond[0]=((((-1.0)*r22*x3669))+(((-1.0)*x3664*x3671))+((x3660*x3663)));
evalcond[1]=(((r11*x3670))+cj10+(((-1.0)*x3666*x3671))+(((-1.0)*r12*x3669)));
evalcond[2]=(((r01*x3670))+(((-1.0)*x3665))+(((-1.0)*r02*x3669))+(((-1.0)*x3668*x3671)));
evalcond[3]=(((sj11*sj12))+((r22*x3660))+(((-1.0)*cj12*x3662))+(((-1.0)*x3664*x3669))+((x3661*x3663)));
evalcond[4]=((((-1.0)*x3668*x3669))+((r01*x3672))+(((-1.0)*cj10*x3667))+(((-1.0)*cj10*sj12*x3662))+((r02*x3660)));
evalcond[5]=(((r11*x3672))+(((-1.0)*x3666*x3669))+(((-1.0)*sj10*sj12*x3662))+(((-1.0)*x3665*x3667))+((r12*x3660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3673=((1.0)*gconst106);
CheckValue<IkReal> x3674 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x3673))+((cj10*gconst107*r00))+(((-1.0)*cj10*r01*x3673))+((gconst107*r10*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3674.valid){
continue;
}
CheckValue<IkReal> x3675=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x3673)))),-1);
if(!x3675.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3674.value)+(((1.5707963267949)*(x3675.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3676=IKsin(j14);
IkReal x3677=IKcos(j14);
IkReal x3678=((1.0)*cj11);
IkReal x3679=(gconst106*r21);
IkReal x3680=(gconst107*r20);
IkReal x3681=((1.0)*sj10);
IkReal x3682=(gconst107*r10);
IkReal x3683=(cj12*sj11);
IkReal x3684=(gconst107*r00);
IkReal x3685=((1.0)*x3677);
IkReal x3686=(gconst106*x3676);
IkReal x3687=((1.0)*x3676);
IkReal x3688=(gconst106*x3677);
evalcond[0]=((((-1.0)*r22*x3685))+((x3676*x3679))+(((-1.0)*x3680*x3687)));
evalcond[1]=((((-1.0)*x3682*x3687))+cj10+(((-1.0)*r12*x3685))+((r11*x3686)));
evalcond[2]=(((r01*x3686))+(((-1.0)*x3681))+(((-1.0)*x3684*x3687))+(((-1.0)*r02*x3685)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x3678))+(((-1.0)*x3680*x3685))+((r22*x3676))+((x3677*x3679)));
evalcond[4]=((((-1.0)*cj10*x3683))+(((-1.0)*cj10*sj12*x3678))+((r01*x3688))+((r02*x3676))+(((-1.0)*x3684*x3685)));
evalcond[5]=(((r12*x3676))+(((-1.0)*x3682*x3685))+(((-1.0)*sj10*sj12*x3678))+((r11*x3688))+(((-1.0)*x3681*x3683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3689=((1.0)*gconst107);
CheckValue<IkReal> x3690 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x3689))+((cj10*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3690.valid){
continue;
}
CheckValue<IkReal> x3691=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x3689)))),-1);
if(!x3691.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3690.value)+(((1.5707963267949)*(x3691.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3692=IKsin(j14);
IkReal x3693=IKcos(j14);
IkReal x3694=((1.0)*cj11);
IkReal x3695=(gconst106*r21);
IkReal x3696=(gconst107*r20);
IkReal x3697=((1.0)*sj10);
IkReal x3698=(gconst107*r10);
IkReal x3699=(cj12*sj11);
IkReal x3700=(gconst107*r00);
IkReal x3701=((1.0)*x3693);
IkReal x3702=(gconst106*x3692);
IkReal x3703=((1.0)*x3692);
IkReal x3704=(gconst106*x3693);
evalcond[0]=(((x3692*x3695))+(((-1.0)*x3696*x3703))+(((-1.0)*r22*x3701)));
evalcond[1]=((((-1.0)*x3698*x3703))+((r11*x3702))+cj10+(((-1.0)*r12*x3701)));
evalcond[2]=((((-1.0)*r02*x3701))+((r01*x3702))+(((-1.0)*x3700*x3703))+(((-1.0)*x3697)));
evalcond[3]=(((sj11*sj12))+((x3693*x3695))+((r22*x3692))+(((-1.0)*cj12*x3694))+(((-1.0)*x3696*x3701)));
evalcond[4]=((((-1.0)*cj10*sj12*x3694))+((r01*x3704))+((r02*x3692))+(((-1.0)*x3700*x3701))+(((-1.0)*cj10*x3699)));
evalcond[5]=((((-1.0)*x3698*x3701))+((r11*x3704))+(((-1.0)*x3697*x3699))+(((-1.0)*sj10*sj12*x3694))+((r12*x3692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
IkReal x3705=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x3705;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj15*r00))+((r01*sj15))))));
j14eval[2]=IKsign(x3705);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
IkReal x3706=((1.0)*cj15);
IkReal x3707=((((-1.0)*r01*x3706))+(((-1.0)*r00*sj15)));
j14eval[0]=x3707;
j14eval[1]=((IKabs(r22))+(IKabs((((r21*sj15))+(((-1.0)*r20*x3706))))));
j14eval[2]=IKsign(x3707);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
IkReal x3708=((1.0)*cj15);
IkReal x3709=(r11*sj15);
IkReal x3710=(sj11*sj12);
IkReal x3711=(cj11*cj12);
IkReal x3712=((((-1.0)*r01*x3708))+(((-1.0)*r00*sj15)));
j14eval[0]=x3712;
j14eval[1]=((IKabs(((((-1.0)*x3709*x3711))+((x3709*x3710))+(((-1.0)*r10*x3708*x3710))+((cj15*r10*x3711)))))+(IKabs((((r12*x3711))+(((-1.0)*r12*x3710))))));
j14eval[2]=IKsign(x3712);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3713=((1.0)*cj15);
IkReal x3714=(r11*sj15);
IkReal x3715=(cj11*cj12);
IkReal x3716=(sj11*sj12);
CheckValue<IkReal> x3717 = IKatan2WithCheck(IkReal(((((-1.0)*x3714*x3715))+(((-1.0)*r10*x3713*x3716))+((x3714*x3716))+((cj15*r10*x3715)))),IkReal((((r12*x3715))+(((-1.0)*r12*x3716)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3717.valid){
continue;
}
CheckValue<IkReal> x3718=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3713))+(((-1.0)*r00*sj15)))),-1);
if(!x3718.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3717.value)+(((1.5707963267949)*(x3718.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3719=IKcos(j14);
IkReal x3720=IKsin(j14);
IkReal x3721=((1.0)*cj11);
IkReal x3722=(cj15*r20);
IkReal x3723=(cj15*r10);
IkReal x3724=(cj15*r00);
IkReal x3725=((1.0)*x3719);
IkReal x3726=(sj15*x3719);
IkReal x3727=((1.0)*x3720);
IkReal x3728=(sj15*x3720);
evalcond[0]=(((r11*x3726))+(((-1.0)*x3723*x3725))+((r12*x3720)));
evalcond[1]=((((-1.0)*r22*x3725))+(((-1.0)*x3722*x3727))+((r21*x3728)));
evalcond[2]=(((r01*x3728))+(((-1.0)*x3724*x3727))+(((-1.0)*r02*x3725)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3725))+((r11*x3728))+(((-1.0)*x3723*x3727)));
evalcond[4]=(((sj11*sj12))+((r22*x3720))+(((-1.0)*cj12*x3721))+(((-1.0)*x3722*x3725))+((r21*x3726)));
evalcond[5]=(((r01*x3726))+(((-1.0)*x3724*x3725))+((r02*x3720))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x3721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3729=((1.0)*cj15);
CheckValue<IkReal> x3730 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3729))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3730.valid){
continue;
}
CheckValue<IkReal> x3731=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3729))+(((-1.0)*r00*sj15)))),-1);
if(!x3731.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3730.value)+(((1.5707963267949)*(x3731.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3732=IKcos(j14);
IkReal x3733=IKsin(j14);
IkReal x3734=((1.0)*cj11);
IkReal x3735=(cj15*r20);
IkReal x3736=(cj15*r10);
IkReal x3737=(cj15*r00);
IkReal x3738=((1.0)*x3732);
IkReal x3739=(sj15*x3732);
IkReal x3740=((1.0)*x3733);
IkReal x3741=(sj15*x3733);
evalcond[0]=(((r11*x3739))+(((-1.0)*x3736*x3738))+((r12*x3733)));
evalcond[1]=(((r21*x3741))+(((-1.0)*r22*x3738))+(((-1.0)*x3735*x3740)));
evalcond[2]=(((r01*x3741))+(((-1.0)*x3737*x3740))+(((-1.0)*r02*x3738)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3738))+((r11*x3741))+(((-1.0)*x3736*x3740)));
evalcond[4]=(((sj11*sj12))+((r22*x3733))+(((-1.0)*cj12*x3734))+(((-1.0)*x3735*x3738))+((r21*x3739)));
evalcond[5]=(((r01*x3739))+((r02*x3733))+(((-1.0)*cj12*sj11))+(((-1.0)*x3737*x3738))+(((-1.0)*sj12*x3734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x3742 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj15*r00))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3742.valid){
continue;
}
CheckValue<IkReal> x3743=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x3743.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3742.value)+(((1.5707963267949)*(x3743.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3744=IKcos(j14);
IkReal x3745=IKsin(j14);
IkReal x3746=((1.0)*cj11);
IkReal x3747=(cj15*r20);
IkReal x3748=(cj15*r10);
IkReal x3749=(cj15*r00);
IkReal x3750=((1.0)*x3744);
IkReal x3751=(sj15*x3744);
IkReal x3752=((1.0)*x3745);
IkReal x3753=(sj15*x3745);
evalcond[0]=((((-1.0)*x3748*x3750))+((r12*x3745))+((r11*x3751)));
evalcond[1]=((((-1.0)*r22*x3750))+(((-1.0)*x3747*x3752))+((r21*x3753)));
evalcond[2]=(((r01*x3753))+(((-1.0)*x3749*x3752))+(((-1.0)*r02*x3750)));
evalcond[3]=((1.0)+(((-1.0)*x3748*x3752))+(((-1.0)*r12*x3750))+((r11*x3753)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x3746))+(((-1.0)*x3747*x3750))+((r22*x3745))+((r21*x3751)));
evalcond[5]=(((r01*x3751))+(((-1.0)*x3749*x3750))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x3746))+((r02*x3745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x3754=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x3754;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x3754);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x3755=((1.0)*cj15);
IkReal x3756=((((-1.0)*r21*x3755))+(((-1.0)*r20*sj15)));
j14eval[0]=x3756;
j14eval[1]=IKsign(x3756);
j14eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x3755))+((r01*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x3757=cj15*cj15;
IkReal x3758=r11*r11;
IkReal x3759=(r11*sj15);
IkReal x3760=(cj15*r10);
IkReal x3761=((r12*r12)+(((-2.0)*x3759*x3760))+((x3757*(r10*r10)))+(((-1.0)*x3757*x3758))+x3758);
j14eval[0]=x3761;
j14eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x3760))+x3759))));
j14eval[2]=IKsign(x3761);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3762=cj15*cj15;
IkReal x3763=r11*r11;
IkReal x3764=(r11*sj15);
IkReal x3765=(cj15*r10);
CheckValue<IkReal> x3766 = IKatan2WithCheck(IkReal(((((-1.0)*x3765))+x3764)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3766.valid){
continue;
}
CheckValue<IkReal> x3767=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x3762*x3763))+((x3762*(r10*r10)))+(((-2.0)*x3764*x3765))+x3763)),-1);
if(!x3767.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3766.value)+(((1.5707963267949)*(x3767.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3768=IKcos(j14);
IkReal x3769=IKsin(j14);
IkReal x3770=(cj15*r20);
IkReal x3771=(cj15*r10);
IkReal x3772=(cj15*r00);
IkReal x3773=((1.0)*x3768);
IkReal x3774=(sj15*x3768);
IkReal x3775=((1.0)*x3769);
IkReal x3776=(sj15*x3769);
evalcond[0]=(((r11*x3774))+((r12*x3769))+(((-1.0)*x3771*x3773)));
evalcond[1]=(((r21*x3776))+(((-1.0)*r22*x3773))+(((-1.0)*x3770*x3775)));
evalcond[2]=((((-1.0)*r02*x3773))+(((-1.0)*x3772*x3775))+((r01*x3776)));
evalcond[3]=((-1.0)+((r11*x3776))+(((-1.0)*x3771*x3775))+(((-1.0)*r12*x3773)));
evalcond[4]=(((r02*x3769))+((cj12*sj11))+(((-1.0)*x3772*x3773))+((cj11*sj12))+((r01*x3774)));
evalcond[5]=(((sj11*sj12))+((r22*x3769))+((r21*x3774))+(((-1.0)*x3770*x3773))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3777=((1.0)*cj15);
CheckValue<IkReal> x3778=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3777))+(((-1.0)*r20*sj15)))),-1);
if(!x3778.valid){
continue;
}
CheckValue<IkReal> x3779 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj15))+(((-1.0)*r00*x3777)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3779.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3778.value)))+(x3779.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3780=IKcos(j14);
IkReal x3781=IKsin(j14);
IkReal x3782=(cj15*r20);
IkReal x3783=(cj15*r10);
IkReal x3784=(cj15*r00);
IkReal x3785=((1.0)*x3780);
IkReal x3786=(sj15*x3780);
IkReal x3787=((1.0)*x3781);
IkReal x3788=(sj15*x3781);
evalcond[0]=(((r12*x3781))+(((-1.0)*x3783*x3785))+((r11*x3786)));
evalcond[1]=(((r21*x3788))+(((-1.0)*x3782*x3787))+(((-1.0)*r22*x3785)));
evalcond[2]=((((-1.0)*x3784*x3787))+(((-1.0)*r02*x3785))+((r01*x3788)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3785))+(((-1.0)*x3783*x3787))+((r11*x3788)));
evalcond[4]=((((-1.0)*x3784*x3785))+((r02*x3781))+((r01*x3786))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r22*x3781))+((r21*x3786))+(((-1.0)*x3782*x3785))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x3789 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3789.valid){
continue;
}
CheckValue<IkReal> x3790=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x3790.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3789.value)+(((1.5707963267949)*(x3790.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3791=IKcos(j14);
IkReal x3792=IKsin(j14);
IkReal x3793=(cj15*r20);
IkReal x3794=(cj15*r10);
IkReal x3795=(cj15*r00);
IkReal x3796=((1.0)*x3791);
IkReal x3797=(sj15*x3791);
IkReal x3798=((1.0)*x3792);
IkReal x3799=(sj15*x3792);
evalcond[0]=(((r12*x3792))+((r11*x3797))+(((-1.0)*x3794*x3796)));
evalcond[1]=(((r21*x3799))+(((-1.0)*r22*x3796))+(((-1.0)*x3793*x3798)));
evalcond[2]=((((-1.0)*r02*x3796))+(((-1.0)*x3795*x3798))+((r01*x3799)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3796))+((r11*x3799))+(((-1.0)*x3794*x3798)));
evalcond[4]=(((r02*x3792))+(((-1.0)*x3795*x3796))+((cj12*sj11))+((r01*x3797))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r21*x3797))+((r22*x3792))+(((-1.0)*x3793*x3796))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3800=((-1.0)*r00);
IkReal x3802 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3802)==0){
continue;
}
IkReal x3801=pow(x3802,-0.5);
CheckValue<IkReal> x3803 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3800),IKFAST_ATAN2_MAGTHRESH);
if(!x3803.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3803.value));
IkReal gconst109=(r01*x3801);
IkReal gconst110=(x3800*x3801);
CheckValue<IkReal> x3804 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3804.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x3804.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x3805=((-1.0)*r00);
IkReal x3806=x3801;
CheckValue<IkReal> x3808 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3805),IKFAST_ATAN2_MAGTHRESH);
if(!x3808.valid){
continue;
}
IkReal x3807=((-1.0)*(x3808.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst109;
cj15=gconst110;
j15=x3807;
IkReal gconst108=x3807;
IkReal gconst109=(r01*x3806);
IkReal gconst110=(x3805*x3806);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3809=((1.0)*gconst109);
CheckValue<IkReal> x3810 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x3809))+((cj10*gconst110*r00))+(((-1.0)*cj10*r01*x3809))+((gconst110*r10*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3810.valid){
continue;
}
CheckValue<IkReal> x3811=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3809))+(((-1.0)*gconst110*r21)))),-1);
if(!x3811.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3810.value)+(((1.5707963267949)*(x3811.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3812=IKsin(j14);
IkReal x3813=IKcos(j14);
IkReal x3814=((1.0)*cj11);
IkReal x3815=((1.0)*sj10);
IkReal x3816=(cj12*sj11);
IkReal x3817=((1.0)*x3813);
IkReal x3818=(gconst109*x3813);
IkReal x3819=(gconst109*x3812);
IkReal x3820=((1.0)*gconst110*x3812);
evalcond[0]=((((-1.0)*r22*x3817))+((r21*x3819))+(((-1.0)*r20*x3820)));
evalcond[1]=((((-1.0)*r12*x3817))+((r11*x3819))+cj10+(((-1.0)*r10*x3820)));
evalcond[2]=((((-1.0)*r00*x3820))+(((-1.0)*r02*x3817))+(((-1.0)*x3815))+((r01*x3819)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x3814))+((r21*x3818))+((r22*x3812))+(((-1.0)*gconst110*r20*x3817)));
evalcond[4]=((((-1.0)*cj10*x3816))+((r02*x3812))+(((-1.0)*cj10*sj12*x3814))+((r01*x3818))+(((-1.0)*gconst110*r00*x3817)));
evalcond[5]=((((-1.0)*gconst110*r10*x3817))+((r12*x3812))+(((-1.0)*sj10*sj12*x3814))+(((-1.0)*x3815*x3816))+((r11*x3818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3821=((1.0)*gconst110);
CheckValue<IkReal> x3822=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r10))+(((-1.0)*r11*x3821)))),-1);
if(!x3822.valid){
continue;
}
CheckValue<IkReal> x3823 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst109*r21*sj10))+(((-1.0)*r20*sj10*x3821)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3823.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3822.value)))+(x3823.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3824=IKsin(j14);
IkReal x3825=IKcos(j14);
IkReal x3826=((1.0)*cj11);
IkReal x3827=((1.0)*sj10);
IkReal x3828=(cj12*sj11);
IkReal x3829=((1.0)*x3825);
IkReal x3830=(gconst109*x3825);
IkReal x3831=(gconst109*x3824);
IkReal x3832=((1.0)*gconst110*x3824);
evalcond[0]=((((-1.0)*r22*x3829))+(((-1.0)*r20*x3832))+((r21*x3831)));
evalcond[1]=((((-1.0)*r12*x3829))+(((-1.0)*r10*x3832))+cj10+((r11*x3831)));
evalcond[2]=((((-1.0)*r02*x3829))+((r01*x3831))+(((-1.0)*x3827))+(((-1.0)*r00*x3832)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x3826))+((r22*x3824))+((r21*x3830))+(((-1.0)*gconst110*r20*x3829)));
evalcond[4]=(((r01*x3830))+(((-1.0)*cj10*x3828))+((r02*x3824))+(((-1.0)*cj10*sj12*x3826))+(((-1.0)*gconst110*r00*x3829)));
evalcond[5]=((((-1.0)*gconst110*r10*x3829))+((r12*x3824))+(((-1.0)*x3827*x3828))+(((-1.0)*sj10*sj12*x3826))+((r11*x3830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3833=((-1.0)*r01);
IkReal x3835 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3835)==0){
continue;
}
IkReal x3834=pow(x3835,-0.5);
CheckValue<IkReal> x3836 = IKatan2WithCheck(IkReal(x3833),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3836.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3836.value))));
IkReal gconst112=(x3833*x3834);
IkReal gconst113=((1.0)*r00*x3834);
CheckValue<IkReal> x3837 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3837.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x3837.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[5];
IkReal x3838=((-1.0)*r01);
CheckValue<IkReal> x3841 = IKatan2WithCheck(IkReal(x3838),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3841.valid){
continue;
}
IkReal x3839=((1.0)*(x3841.value));
IkReal x3840=x3834;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst112;
cj15=gconst113;
j15=((3.14159265)+(((-1.0)*x3839)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3839)));
IkReal gconst112=(x3838*x3840);
IkReal gconst113=((1.0)*r00*x3840);
j14eval[0]=0;
j14eval[1]=cj10;
j14eval[2]=r22;
j14eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j14eval[4]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  || IKabs(j14eval[4]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x3842=((-1.0)*r01);
CheckValue<IkReal> x3845 = IKatan2WithCheck(IkReal(x3842),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3845.valid){
continue;
}
IkReal x3843=((1.0)*(x3845.value));
IkReal x3844=x3834;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst112;
cj15=gconst113;
j15=((3.14159265)+(((-1.0)*x3843)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3843)));
IkReal gconst112=(x3842*x3844);
IkReal gconst113=((1.0)*r00*x3844);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x3846=((-1.0)*r01);
CheckValue<IkReal> x3849 = IKatan2WithCheck(IkReal(x3846),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3849.valid){
continue;
}
IkReal x3847=((1.0)*(x3849.value));
IkReal x3848=x3834;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst112;
cj15=gconst113;
j15=((3.14159265)+(((-1.0)*x3847)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3847)));
IkReal gconst112=(x3846*x3848);
IkReal gconst113=((1.0)*r00*x3848);
IkReal x3850=r02*r02;
IkReal x3851=(r12*sj10);
IkReal x3852=x3834;
IkReal x3853=(cj10*x3852);
j14eval[0]=((IKabs((((x3850*x3853))+(((-1.0)*x3853))+((r02*x3851*x3852)))))+(IKabs(((((-1.0)*x3851))+(((-1.0)*cj10*r02))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3854=((1.0)*gconst112);
CheckValue<IkReal> x3855=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3854))+(((-1.0)*gconst113*r21)))),-1);
if(!x3855.valid){
continue;
}
CheckValue<IkReal> x3856 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((cj10*gconst113*r00))+((gconst113*r10*sj10))+(((-1.0)*cj10*r01*x3854))+(((-1.0)*r11*sj10*x3854)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3856.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3855.value)))+(x3856.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3857=IKsin(j14);
IkReal x3858=IKcos(j14);
IkReal x3859=((1.0)*cj11);
IkReal x3860=((1.0)*sj10);
IkReal x3861=(gconst113*r10);
IkReal x3862=(gconst113*r00);
IkReal x3863=(cj12*sj11);
IkReal x3864=(gconst113*r20);
IkReal x3865=((1.0)*x3858);
IkReal x3866=(gconst112*x3858);
IkReal x3867=((1.0)*x3857);
IkReal x3868=(gconst112*x3857);
evalcond[0]=(((r21*x3868))+(((-1.0)*x3864*x3867))+(((-1.0)*r22*x3865)));
evalcond[1]=(((r11*x3868))+(((-1.0)*x3861*x3867))+cj10+(((-1.0)*r12*x3865)));
evalcond[2]=((((-1.0)*r02*x3865))+(((-1.0)*x3860))+((r01*x3868))+(((-1.0)*x3862*x3867)));
evalcond[3]=(((sj11*sj12))+((r21*x3866))+(((-1.0)*x3864*x3865))+(((-1.0)*cj12*x3859))+((r22*x3857)));
evalcond[4]=(((r02*x3857))+(((-1.0)*cj10*sj12*x3859))+(((-1.0)*cj10*x3863))+((r01*x3866))+(((-1.0)*x3862*x3865)));
evalcond[5]=(((r11*x3866))+(((-1.0)*x3860*x3863))+(((-1.0)*x3861*x3865))+(((-1.0)*sj10*sj12*x3859))+((r12*x3857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3869=((1.0)*gconst113);
CheckValue<IkReal> x3870 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst112*r21*sj10))+(((-1.0)*r20*sj10*x3869)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3870.valid){
continue;
}
CheckValue<IkReal> x3871=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3869))+(((-1.0)*gconst112*r10)))),-1);
if(!x3871.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3870.value)+(((1.5707963267949)*(x3871.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3872=IKsin(j14);
IkReal x3873=IKcos(j14);
IkReal x3874=((1.0)*cj11);
IkReal x3875=((1.0)*sj10);
IkReal x3876=(gconst113*r10);
IkReal x3877=(gconst113*r00);
IkReal x3878=(cj12*sj11);
IkReal x3879=(gconst113*r20);
IkReal x3880=((1.0)*x3873);
IkReal x3881=(gconst112*x3873);
IkReal x3882=((1.0)*x3872);
IkReal x3883=(gconst112*x3872);
evalcond[0]=((((-1.0)*x3879*x3882))+((r21*x3883))+(((-1.0)*r22*x3880)));
evalcond[1]=(((r11*x3883))+cj10+(((-1.0)*r12*x3880))+(((-1.0)*x3876*x3882)));
evalcond[2]=((((-1.0)*r02*x3880))+(((-1.0)*x3877*x3882))+((r01*x3883))+(((-1.0)*x3875)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x3879*x3880))+((r21*x3881))+(((-1.0)*cj12*x3874))+((r22*x3872)));
evalcond[4]=((((-1.0)*x3877*x3880))+((r01*x3881))+(((-1.0)*cj10*x3878))+(((-1.0)*cj10*sj12*x3874))+((r02*x3872)));
evalcond[5]=(((r11*x3881))+(((-1.0)*x3875*x3878))+(((-1.0)*sj10*sj12*x3874))+((r12*x3872))+(((-1.0)*x3876*x3880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3884=((1.0)*gconst113);
CheckValue<IkReal> x3885 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x3884))+((cj10*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3885.valid){
continue;
}
CheckValue<IkReal> x3886=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3884))+(((-1.0)*gconst112*r00)))),-1);
if(!x3886.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3885.value)+(((1.5707963267949)*(x3886.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3887=IKsin(j14);
IkReal x3888=IKcos(j14);
IkReal x3889=((1.0)*cj11);
IkReal x3890=((1.0)*sj10);
IkReal x3891=(gconst113*r10);
IkReal x3892=(gconst113*r00);
IkReal x3893=(cj12*sj11);
IkReal x3894=(gconst113*r20);
IkReal x3895=((1.0)*x3888);
IkReal x3896=(gconst112*x3888);
IkReal x3897=((1.0)*x3887);
IkReal x3898=(gconst112*x3887);
evalcond[0]=((((-1.0)*r22*x3895))+(((-1.0)*x3894*x3897))+((r21*x3898)));
evalcond[1]=((((-1.0)*r12*x3895))+cj10+(((-1.0)*x3891*x3897))+((r11*x3898)));
evalcond[2]=(((r01*x3898))+(((-1.0)*x3892*x3897))+(((-1.0)*x3890))+(((-1.0)*r02*x3895)));
evalcond[3]=(((sj11*sj12))+((r22*x3887))+(((-1.0)*x3894*x3895))+((r21*x3896))+(((-1.0)*cj12*x3889)));
evalcond[4]=((((-1.0)*cj10*x3893))+((r01*x3896))+((r02*x3887))+(((-1.0)*cj10*sj12*x3889))+(((-1.0)*x3892*x3895)));
evalcond[5]=(((r12*x3887))+(((-1.0)*x3891*x3895))+((r11*x3896))+(((-1.0)*sj10*sj12*x3889))+(((-1.0)*x3890*x3893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x3899=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x3899;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x3899);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x3900=((1.0)*cj15);
IkReal x3901=((((-1.0)*r10*sj15))+(((-1.0)*r11*x3900)));
j14eval[0]=x3901;
j14eval[1]=IKsign(x3901);
j14eval[2]=((IKabs(r22))+(IKabs((((r21*sj15))+(((-1.0)*r20*x3900))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x3902=cj15*cj15;
IkReal x3903=r01*r01;
IkReal x3904=(cj15*r00);
IkReal x3905=(r01*sj15);
IkReal x3906=((((-2.0)*x3904*x3905))+x3903+((x3902*(r00*r00)))+(r02*r02)+(((-1.0)*x3902*x3903)));
j14eval[0]=x3906;
j14eval[1]=((IKabs(((((-1.0)*x3904))+x3905)))+(IKabs(r02)));
j14eval[2]=IKsign(x3906);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3907=cj15*cj15;
IkReal x3908=r01*r01;
IkReal x3909=(r01*sj15);
IkReal x3910=(cj15*r00);
CheckValue<IkReal> x3911=IKPowWithIntegerCheck(IKsign((x3908+(((-2.0)*x3909*x3910))+((x3907*(r00*r00)))+(r02*r02)+(((-1.0)*x3907*x3908)))),-1);
if(!x3911.valid){
continue;
}
CheckValue<IkReal> x3912 = IKatan2WithCheck(IkReal(((((-1.0)*x3910))+x3909)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3912.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3911.value)))+(x3912.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3913=IKcos(j14);
IkReal x3914=IKsin(j14);
IkReal x3915=((1.0)*cj11);
IkReal x3916=(cj15*r20);
IkReal x3917=(cj15*r10);
IkReal x3918=(cj15*r00);
IkReal x3919=((1.0)*x3913);
IkReal x3920=(sj15*x3913);
IkReal x3921=((1.0)*x3914);
IkReal x3922=(sj15*x3914);
evalcond[0]=((((-1.0)*x3918*x3919))+((r02*x3914))+((r01*x3920)));
evalcond[1]=((((-1.0)*r22*x3919))+((r21*x3922))+(((-1.0)*x3916*x3921)));
evalcond[2]=(((r11*x3922))+(((-1.0)*x3917*x3921))+(((-1.0)*r12*x3919)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3919))+(((-1.0)*x3918*x3921))+((r01*x3922)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x3916*x3919))+((r21*x3920))+(((-1.0)*cj12*x3915))+((r22*x3914)));
evalcond[5]=((((-1.0)*sj12*x3915))+((r11*x3920))+(((-1.0)*x3917*x3919))+(((-1.0)*cj12*sj11))+((r12*x3914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3923=((1.0)*cj15);
CheckValue<IkReal> x3924 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3923))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3924.valid){
continue;
}
CheckValue<IkReal> x3925=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3923))+(((-1.0)*r10*sj15)))),-1);
if(!x3925.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3924.value)+(((1.5707963267949)*(x3925.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3926=IKcos(j14);
IkReal x3927=IKsin(j14);
IkReal x3928=((1.0)*cj11);
IkReal x3929=(cj15*r20);
IkReal x3930=(cj15*r10);
IkReal x3931=(cj15*r00);
IkReal x3932=((1.0)*x3926);
IkReal x3933=(sj15*x3926);
IkReal x3934=((1.0)*x3927);
IkReal x3935=(sj15*x3927);
evalcond[0]=(((r01*x3933))+((r02*x3927))+(((-1.0)*x3931*x3932)));
evalcond[1]=(((r21*x3935))+(((-1.0)*x3929*x3934))+(((-1.0)*r22*x3932)));
evalcond[2]=((((-1.0)*x3930*x3934))+(((-1.0)*r12*x3932))+((r11*x3935)));
evalcond[3]=((-1.0)+((r01*x3935))+(((-1.0)*x3931*x3934))+(((-1.0)*r02*x3932)));
evalcond[4]=(((sj11*sj12))+((r21*x3933))+(((-1.0)*x3929*x3932))+((r22*x3927))+(((-1.0)*cj12*x3928)));
evalcond[5]=(((r12*x3927))+(((-1.0)*cj12*sj11))+(((-1.0)*x3930*x3932))+(((-1.0)*sj12*x3928))+((r11*x3933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x3936=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x3936.valid){
continue;
}
CheckValue<IkReal> x3937 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3937.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3936.value)))+(x3937.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3938=IKcos(j14);
IkReal x3939=IKsin(j14);
IkReal x3940=((1.0)*cj11);
IkReal x3941=(cj15*r20);
IkReal x3942=(cj15*r10);
IkReal x3943=(cj15*r00);
IkReal x3944=((1.0)*x3938);
IkReal x3945=(sj15*x3938);
IkReal x3946=((1.0)*x3939);
IkReal x3947=(sj15*x3939);
evalcond[0]=(((r01*x3945))+(((-1.0)*x3943*x3944))+((r02*x3939)));
evalcond[1]=((((-1.0)*r22*x3944))+(((-1.0)*x3941*x3946))+((r21*x3947)));
evalcond[2]=((((-1.0)*x3942*x3946))+(((-1.0)*r12*x3944))+((r11*x3947)));
evalcond[3]=((-1.0)+((r01*x3947))+(((-1.0)*r02*x3944))+(((-1.0)*x3943*x3946)));
evalcond[4]=(((sj11*sj12))+((r22*x3939))+(((-1.0)*cj12*x3940))+(((-1.0)*x3941*x3944))+((r21*x3945)));
evalcond[5]=((((-1.0)*sj12*x3940))+(((-1.0)*x3942*x3944))+(((-1.0)*cj12*sj11))+((r12*x3939))+((r11*x3945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x3948=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x3948;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x3948);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x3949=((1.0)*cj15);
IkReal x3950=((((-1.0)*r21*x3949))+(((-1.0)*r20*sj15)));
j14eval[0]=x3950;
j14eval[1]=IKsign(x3950);
j14eval[2]=((IKabs((((r11*sj15))+(((-1.0)*r10*x3949)))))+(IKabs(r12)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x3951=r01*r01;
IkReal x3952=cj15*cj15;
IkReal x3953=(r01*sj15);
IkReal x3954=(cj15*r00);
IkReal x3955=((((-1.0)*(r02*r02)))+(((-1.0)*x3951))+(((2.0)*x3953*x3954))+((x3951*x3952))+(((-1.0)*x3952*(r00*r00))));
j14eval[0]=x3955;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x3954))+x3953))));
j14eval[2]=IKsign(x3955);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3956=r01*r01;
IkReal x3957=cj15*cj15;
IkReal x3958=(cj15*r00);
IkReal x3959=(r01*sj15);
CheckValue<IkReal> x3960 = IKatan2WithCheck(IkReal(((((-1.0)*x3958))+x3959)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3960.valid){
continue;
}
CheckValue<IkReal> x3961=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3957*(r00*r00)))+((x3956*x3957))+(((-1.0)*(r02*r02)))+(((-1.0)*x3956))+(((2.0)*x3958*x3959)))),-1);
if(!x3961.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x3960.value)+(((1.5707963267949)*(x3961.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3962=IKcos(j14);
IkReal x3963=IKsin(j14);
IkReal x3964=(cj15*r20);
IkReal x3965=(cj15*r10);
IkReal x3966=(cj15*r00);
IkReal x3967=((1.0)*x3962);
IkReal x3968=(sj15*x3962);
IkReal x3969=((1.0)*x3963);
IkReal x3970=(sj15*x3963);
evalcond[0]=(((r02*x3963))+(((-1.0)*x3966*x3967))+((r01*x3968)));
evalcond[1]=(((r21*x3970))+(((-1.0)*r22*x3967))+(((-1.0)*x3964*x3969)));
evalcond[2]=((((-1.0)*x3965*x3969))+((r11*x3970))+(((-1.0)*r12*x3967)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3967))+((r01*x3970))+(((-1.0)*x3966*x3969)));
evalcond[4]=(((r11*x3968))+(((-1.0)*x3965*x3967))+((r12*x3963))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r22*x3963))+((r21*x3968))+(((-1.0)*cj11*cj12))+(((-1.0)*x3964*x3967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x3971=((1.0)*cj15);
CheckValue<IkReal> x3972=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3971))+(((-1.0)*r20*sj15)))),-1);
if(!x3972.valid){
continue;
}
CheckValue<IkReal> x3973 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*r10*x3971)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3973.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3972.value)))+(x3973.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3974=IKcos(j14);
IkReal x3975=IKsin(j14);
IkReal x3976=(cj15*r20);
IkReal x3977=(cj15*r10);
IkReal x3978=(cj15*r00);
IkReal x3979=((1.0)*x3974);
IkReal x3980=(sj15*x3974);
IkReal x3981=((1.0)*x3975);
IkReal x3982=(sj15*x3975);
evalcond[0]=(((r02*x3975))+(((-1.0)*x3978*x3979))+((r01*x3980)));
evalcond[1]=(((r21*x3982))+(((-1.0)*x3976*x3981))+(((-1.0)*r22*x3979)));
evalcond[2]=((((-1.0)*r12*x3979))+((r11*x3982))+(((-1.0)*x3977*x3981)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3979))+((r01*x3982))+(((-1.0)*x3978*x3981)));
evalcond[4]=(((r11*x3980))+(((-1.0)*x3977*x3979))+((r12*x3975))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x3976*x3979))+((r21*x3980))+((r22*x3975))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x3983=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x3983.valid){
continue;
}
CheckValue<IkReal> x3984 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3984.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3983.value)))+(x3984.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x3985=IKcos(j14);
IkReal x3986=IKsin(j14);
IkReal x3987=(cj15*r20);
IkReal x3988=(cj15*r10);
IkReal x3989=(cj15*r00);
IkReal x3990=((1.0)*x3985);
IkReal x3991=(sj15*x3985);
IkReal x3992=((1.0)*x3986);
IkReal x3993=(sj15*x3986);
evalcond[0]=((((-1.0)*x3989*x3990))+((r01*x3991))+((r02*x3986)));
evalcond[1]=(((r21*x3993))+(((-1.0)*x3987*x3992))+(((-1.0)*r22*x3990)));
evalcond[2]=((((-1.0)*x3988*x3992))+(((-1.0)*r12*x3990))+((r11*x3993)));
evalcond[3]=((1.0)+(((-1.0)*x3989*x3992))+(((-1.0)*r02*x3990))+((r01*x3993)));
evalcond[4]=((((-1.0)*x3988*x3990))+((r11*x3991))+((cj12*sj11))+((cj11*sj12))+((r12*x3986)));
evalcond[5]=(((sj11*sj12))+((r21*x3991))+(((-1.0)*x3987*x3990))+((r22*x3986))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x3994=((-1.0)*px);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3994);
rxp1_1=(px*r21);
rxp1_2=(r11*x3994);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x3995=((-1.0)*px);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3995);
rxp1_1=(px*r21);
rxp1_2=(r11*x3995);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=((((-1.0)*cj15*r20))+((r21*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x3996=((-1.0)*px);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3996);
rxp1_1=(px*r21);
rxp1_2=(r11*x3996);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=(((r11*sj15))+(((-1.0)*cj15*r10)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x3999=IKPowWithIntegerCheck((((r11*sj15))+(((-1.0)*cj15*r10))),-1);
if(!x3999.valid){
continue;
}
IkReal x3997=x3999.value;
IkReal x3998=(sj10*x3997);
cj14array[0]=(((cj12*sj11*x3998))+((cj11*sj12*x3998)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x4000=IKsin(j14);
IkReal x4001=IKcos(j14);
IkReal x4002=(sj15*x4000);
IkReal x4003=((1.0)*x4001);
IkReal x4004=((1.0)*cj15*x4000);
evalcond[0]=(r02*x4000);
evalcond[1]=((((-1.0)*r02*x4003))+(((-1.0)*sj10)));
evalcond[2]=((((-1.0)*r20*x4004))+((r21*x4002)));
evalcond[3]=((((-1.0)*r10*x4004))+((r11*x4002)));
evalcond[4]=(((sj11*sj12))+((r21*sj15*x4001))+(((-1.0)*cj15*r20*x4003))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x4006=IKPowWithIntegerCheck(((((-1.0)*cj15*r20))+((r21*sj15))),-1);
if(!x4006.valid){
continue;
}
IkReal x4005=x4006.value;
cj14array[0]=((((-1.0)*sj11*sj12*x4005))+((cj11*cj12*x4005)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x4007=IKsin(j14);
IkReal x4008=IKcos(j14);
IkReal x4009=(cj15*r10);
IkReal x4010=((1.0)*sj10);
IkReal x4011=(sj15*x4007);
IkReal x4012=((1.0)*x4008);
IkReal x4013=((1.0)*x4007);
evalcond[0]=(r02*x4007);
evalcond[1]=((((-1.0)*r02*x4012))+(((-1.0)*x4010)));
evalcond[2]=(((r21*x4011))+(((-1.0)*cj15*r20*x4013)));
evalcond[3]=((((-1.0)*x4009*x4013))+((r11*x4011)));
evalcond[4]=((((-1.0)*cj11*sj12*x4010))+(((-1.0)*x4009*x4012))+(((-1.0)*cj12*sj11*x4010))+((r11*sj15*x4008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x4014=IKPowWithIntegerCheck(r02,-1);
if(!x4014.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x4014.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x4015=IKsin(j14);
IkReal x4016=IKcos(j14);
IkReal x4017=((1.0)*cj15);
IkReal x4018=((1.0)*cj11);
IkReal x4019=(sj15*x4015);
IkReal x4020=(sj15*x4016);
evalcond[0]=(r02*x4015);
evalcond[1]=((((-1.0)*r20*x4015*x4017))+((r21*x4019)));
evalcond[2]=((((-1.0)*r10*x4015*x4017))+((r11*x4019)));
evalcond[3]=(((sj11*sj12))+((r21*x4020))+(((-1.0)*r20*x4016*x4017))+(((-1.0)*cj12*x4018)));
evalcond[4]=((((-1.0)*cj12*sj10*sj11))+(((-1.0)*r10*x4016*x4017))+((r11*x4020))+(((-1.0)*sj10*sj12*x4018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4021=((1.0)*sj15);
CheckValue<IkReal> x4022=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj15*r21))+(((-1.0)*r20*x4021)))),-1);
if(!x4022.valid){
continue;
}
CheckValue<IkReal> x4023 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x4021))+((cj15*r10*sj10))+(((-1.0)*cj10*r01*x4021))+((cj10*cj15*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4023.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4022.value)))+(x4023.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4024=IKsin(j14);
IkReal x4025=IKcos(j14);
IkReal x4026=((1.0)*cj11);
IkReal x4027=(cj15*r20);
IkReal x4028=((1.0)*sj10);
IkReal x4029=(cj15*r10);
IkReal x4030=(cj12*sj11);
IkReal x4031=(cj15*r00);
IkReal x4032=((1.0)*x4025);
IkReal x4033=(sj15*x4025);
IkReal x4034=((1.0)*x4024);
IkReal x4035=(sj15*x4024);
evalcond[0]=(((r21*x4035))+(((-1.0)*r22*x4032))+(((-1.0)*x4027*x4034)));
evalcond[1]=(cj10+(((-1.0)*r12*x4032))+(((-1.0)*x4029*x4034))+((r11*x4035)));
evalcond[2]=((((-1.0)*x4031*x4034))+(((-1.0)*x4028))+((r01*x4035))+(((-1.0)*r02*x4032)));
evalcond[3]=(((r21*x4033))+((sj11*sj12))+(((-1.0)*x4027*x4032))+((r22*x4024))+(((-1.0)*cj12*x4026)));
evalcond[4]=((((-1.0)*cj10*x4030))+(((-1.0)*x4031*x4032))+(((-1.0)*cj10*sj12*x4026))+((r01*x4033))+((r02*x4024)));
evalcond[5]=((((-1.0)*x4028*x4030))+((r12*x4024))+(((-1.0)*x4029*x4032))+(((-1.0)*sj10*sj12*x4026))+((r11*x4033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4036=((1.0)*cj15);
CheckValue<IkReal> x4037 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x4036))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4037.valid){
continue;
}
CheckValue<IkReal> x4038=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4036))+(((-1.0)*r10*sj15)))),-1);
if(!x4038.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4037.value)+(((1.5707963267949)*(x4038.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4039=IKsin(j14);
IkReal x4040=IKcos(j14);
IkReal x4041=((1.0)*cj11);
IkReal x4042=(cj15*r20);
IkReal x4043=((1.0)*sj10);
IkReal x4044=(cj15*r10);
IkReal x4045=(cj12*sj11);
IkReal x4046=(cj15*r00);
IkReal x4047=((1.0)*x4040);
IkReal x4048=(sj15*x4040);
IkReal x4049=((1.0)*x4039);
IkReal x4050=(sj15*x4039);
evalcond[0]=(((r21*x4050))+(((-1.0)*x4042*x4049))+(((-1.0)*r22*x4047)));
evalcond[1]=((((-1.0)*x4044*x4049))+(((-1.0)*r12*x4047))+((r11*x4050))+cj10);
evalcond[2]=((((-1.0)*x4046*x4049))+(((-1.0)*r02*x4047))+(((-1.0)*x4043))+((r01*x4050)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x4041))+((r21*x4048))+(((-1.0)*x4042*x4047))+((r22*x4039)));
evalcond[4]=(((r02*x4039))+(((-1.0)*x4046*x4047))+(((-1.0)*cj10*x4045))+(((-1.0)*cj10*sj12*x4041))+((r01*x4048)));
evalcond[5]=((((-1.0)*x4043*x4045))+(((-1.0)*sj10*sj12*x4041))+(((-1.0)*x4044*x4047))+((r11*x4048))+((r12*x4039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4051=((1.0)*cj15);
CheckValue<IkReal> x4052 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x4051)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4052.valid){
continue;
}
CheckValue<IkReal> x4053=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x4051)))),-1);
if(!x4053.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4052.value)+(((1.5707963267949)*(x4053.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4054=IKsin(j14);
IkReal x4055=IKcos(j14);
IkReal x4056=((1.0)*cj11);
IkReal x4057=(cj15*r20);
IkReal x4058=((1.0)*sj10);
IkReal x4059=(cj15*r10);
IkReal x4060=(cj12*sj11);
IkReal x4061=(cj15*r00);
IkReal x4062=((1.0)*x4055);
IkReal x4063=(sj15*x4055);
IkReal x4064=((1.0)*x4054);
IkReal x4065=(sj15*x4054);
evalcond[0]=(((r21*x4065))+(((-1.0)*x4057*x4064))+(((-1.0)*r22*x4062)));
evalcond[1]=((((-1.0)*r12*x4062))+(((-1.0)*x4059*x4064))+((r11*x4065))+cj10);
evalcond[2]=((((-1.0)*x4061*x4064))+(((-1.0)*x4058))+(((-1.0)*r02*x4062))+((r01*x4065)));
evalcond[3]=(((sj11*sj12))+((r21*x4063))+(((-1.0)*cj12*x4056))+(((-1.0)*x4057*x4062))+((r22*x4054)));
evalcond[4]=((((-1.0)*x4061*x4062))+((r02*x4054))+(((-1.0)*cj10*sj12*x4056))+(((-1.0)*cj10*x4060))+((r01*x4063)));
evalcond[5]=((((-1.0)*sj10*sj12*x4056))+(((-1.0)*x4059*x4062))+((r11*x4063))+((r12*x4054))+(((-1.0)*x4058*x4060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4066=r21*r21;
IkReal x4067=cj15*cj15;
IkReal x4068=(cj11*cj12);
IkReal x4069=(r21*sj15);
IkReal x4070=(cj15*r20);
IkReal x4071=(sj11*sj12);
CheckValue<IkReal> x4072 = IKatan2WithCheck(IkReal((((r22*x4071))+(((-1.0)*r22*x4068)))),IkReal(((((-1.0)*x4070*x4071))+((x4068*x4070))+((x4069*x4071))+(((-1.0)*x4068*x4069)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4072.valid){
continue;
}
CheckValue<IkReal> x4073=IKPowWithIntegerCheck(IKsign((((x4066*x4067))+(((-1.0)*(r22*r22)))+(((-1.0)*x4067*(r20*r20)))+(((-1.0)*x4066))+(((2.0)*x4069*x4070)))),-1);
if(!x4073.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4072.value)+(((1.5707963267949)*(x4073.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
IkReal x4074=IKsin(j14);
IkReal x4075=IKcos(j14);
IkReal x4076=(r21*sj15);
IkReal x4077=(cj15*r20);
IkReal x4078=((1.0)*x4075);
evalcond[0]=((((-1.0)*x4074*x4077))+((x4074*x4076))+(((-1.0)*r22*x4078)));
evalcond[1]=(((sj11*sj12))+((r22*x4074))+((x4075*x4076))+(((-1.0)*cj11*cj12))+(((-1.0)*x4077*x4078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4079=(cj15*sj14);
IkReal x4080=(sj14*sj15);
if( IKabs((((r01*x4080))+(((-1.0)*cj14*r02))+(((-1.0)*r00*x4079)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj14*r12))+((r10*x4079))+(((-1.0)*r11*x4080)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x4080))+(((-1.0)*cj14*r02))+(((-1.0)*r00*x4079))))+IKsqr((((cj14*r12))+((r10*x4079))+(((-1.0)*r11*x4080))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r01*x4080))+(((-1.0)*cj14*r02))+(((-1.0)*r00*x4079))), (((cj14*r12))+((r10*x4079))+(((-1.0)*r11*x4080))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x4081=IKcos(j10);
IkReal x4082=IKsin(j10);
IkReal x4083=(cj14*sj15);
IkReal x4084=(sj11*sj12);
IkReal x4085=((1.0)*cj14);
IkReal x4086=((0.08535)*sj15);
IkReal x4087=(cj15*r00);
IkReal x4088=((1.0)*cj15);
IkReal x4089=(sj14*sj15);
IkReal x4090=(cj11*cj12);
IkReal x4091=((1.0)*sj12);
IkReal x4092=((1.0)*sj15);
IkReal x4093=(cj12*sj11);
IkReal x4094=((0.08535)*cj15);
IkReal x4095=(cj11*x4082);
IkReal x4096=((0.21325)*x4081);
IkReal x4097=(cj11*x4081);
IkReal x4098=((1.0)*x4081);
IkReal x4099=((1.0)*x4082);
evalcond[0]=((((-1.0)*r12*x4085))+x4081+(((-1.0)*r10*sj14*x4088))+((r11*x4089)));
evalcond[1]=(((r01*x4089))+(((-1.0)*x4099))+(((-1.0)*sj14*x4087))+(((-1.0)*r02*x4085)));
evalcond[2]=((((-1.0)*x4090*x4098))+((x4081*x4084))+(((-1.0)*r01*x4088))+(((-1.0)*r00*x4092)));
evalcond[3]=((((-1.0)*r10*x4092))+((x4082*x4084))+(((-1.0)*r11*x4088))+(((-1.0)*x4090*x4099)));
evalcond[4]=(((r01*x4083))+((r02*sj14))+(((-1.0)*x4093*x4098))+(((-1.0)*x4085*x4087))+(((-1.0)*x4091*x4097)));
evalcond[5]=(((r12*sj14))+(((-1.0)*x4093*x4099))+((r11*x4083))+(((-1.0)*x4091*x4095))+(((-1.0)*cj15*r10*x4085)));
evalcond[6]=((((-1.0)*x4084*x4096))+(((-1.0)*px))+(((-1.0)*r00*x4086))+(((-1.0)*r01*x4094))+(((-0.11235)*x4082))+(((0.24365)*x4097))+((x4090*x4096)));
evalcond[7]=((((-1.0)*r11*x4094))+(((0.11235)*x4081))+(((-0.21325)*x4082*x4084))+(((0.21325)*x4082*x4090))+(((-1.0)*py))+(((0.24365)*x4095))+(((-1.0)*r10*x4086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x4100=IKPowWithIntegerCheck(IKsign((((sj11*sj12))+(((-1.0)*cj11*cj12)))),-1);
if(!x4100.valid){
continue;
}
CheckValue<IkReal> x4101 = IKatan2WithCheck(IkReal((((cj15*r11))+((r10*sj15)))),IkReal((((cj15*r01))+((r00*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4101.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4100.value)))+(x4101.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x4102=IKcos(j10);
IkReal x4103=IKsin(j10);
IkReal x4104=(sj11*sj12);
IkReal x4105=((1.0)*cj15);
IkReal x4106=(cj11*cj12);
IkReal x4107=(r00*sj15);
IkReal x4108=(r10*sj15);
IkReal x4109=((0.08535)*cj15);
IkReal x4110=(cj11*x4103);
IkReal x4111=((0.21325)*x4102);
evalcond[0]=((((-1.0)*x4107))+(((-1.0)*x4102*x4106))+(((-1.0)*r01*x4105))+((x4102*x4104)));
evalcond[1]=((((-1.0)*x4108))+((x4103*x4104))+(((-1.0)*r11*x4105))+(((-1.0)*x4103*x4106)));
evalcond[2]=((((-1.0)*x4104*x4111))+((x4106*x4111))+(((0.24365)*cj11*x4102))+(((-1.0)*px))+(((-0.08535)*x4107))+(((-1.0)*r01*x4109))+(((-0.11235)*x4103)));
evalcond[3]=((((0.24365)*x4110))+(((-0.21325)*x4103*x4104))+(((0.11235)*x4102))+(((-1.0)*py))+(((-1.0)*r11*x4109))+(((-0.08535)*x4108))+(((0.21325)*x4103*x4106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x4112=((1.0)*cj15);
IkReal x4113=((((-1.0)*r01*x4112))+(((-1.0)*r00*sj15)));
j14eval[0]=x4113;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x4112))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x4113);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x4114=((1.0)*cj15);
IkReal x4115=((((-1.0)*r11*x4114))+(((-1.0)*r10*sj15)));
j14eval[0]=x4115;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x4114))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x4115);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x4116=((1.0)*sj15);
IkReal x4117=((((-1.0)*cj15*r21))+(((-1.0)*r20*x4116)));
j14eval[0]=x4117;
j14eval[1]=((IKabs((((cj15*r10*sj10))+(((-1.0)*cj10*r01*x4116))+(((-1.0)*r11*sj10*x4116))+((cj10*cj15*r00)))))+(IKabs(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02))))));
j14eval[2]=IKsign(x4117);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4118=((-1.0)*r20);
IkReal x4120 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4120)==0){
continue;
}
IkReal x4119=pow(x4120,-0.5);
CheckValue<IkReal> x4121 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4118),IKFAST_ATAN2_MAGTHRESH);
if(!x4121.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4121.value));
IkReal gconst97=(r21*x4119);
IkReal gconst98=(x4118*x4119);
CheckValue<IkReal> x4122 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4122.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x4122.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x4123=((-1.0)*r20);
IkReal x4124=x4119;
CheckValue<IkReal> x4126 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4123),IKFAST_ATAN2_MAGTHRESH);
if(!x4126.valid){
continue;
}
IkReal x4125=((-1.0)*(x4126.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst97;
cj15=gconst98;
j15=x4125;
IkReal gconst96=x4125;
IkReal gconst97=(r21*x4124);
IkReal gconst98=(x4123*x4124);
j14eval[0]=cj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x4127=((-1.0)*r20);
IkReal x4128=x4119;
CheckValue<IkReal> x4130 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4127),IKFAST_ATAN2_MAGTHRESH);
if(!x4130.valid){
continue;
}
IkReal x4129=((-1.0)*(x4130.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst97;
cj15=gconst98;
j15=x4129;
IkReal gconst96=x4129;
IkReal gconst97=(r21*x4128);
IkReal gconst98=(x4127*x4128);
j14eval[0]=sj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x4131=((-1.0)*r20);
IkReal x4132=x4119;
CheckValue<IkReal> x4134 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4131),IKFAST_ATAN2_MAGTHRESH);
if(!x4134.valid){
continue;
}
IkReal x4133=((-1.0)*(x4134.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst97;
cj15=gconst98;
j15=x4133;
IkReal gconst96=x4133;
IkReal gconst97=(r21*x4132);
IkReal gconst98=(x4131*x4132);
IkReal x4135=((1.0)*(r22*r22));
CheckValue<IkReal> x4139=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4135))),-1);
if(!x4139.valid){
continue;
}
IkReal x4136=x4139.value;
IkReal x4137=((1.0)*x4136);
IkReal x4138=((((-2.0)*x4136*(r20*r20)*(r21*r21)))+(((-1.0)*x4137*(r21*r21*r21*r21)))+(((-1.0)*x4135))+(((-1.0)*x4137*(r20*r20*r20*r20))));
j14eval[0]=x4138;
j14eval[1]=IKsign(x4138);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4140=(gconst98*r20);
IkReal x4141=(cj11*cj12);
IkReal x4142=(sj11*sj12);
IkReal x4143=(gconst97*r21);
CheckValue<IkReal> x4144 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4141))+((r22*x4142)))),IkReal((((x4142*x4143))+(((-1.0)*x4141*x4143))+(((-1.0)*x4140*x4142))+((x4140*x4141)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4144.valid){
continue;
}
CheckValue<IkReal> x4145=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4140*x4140)))+(((-1.0)*(x4143*x4143)))+(((2.0)*x4140*x4143))+(((-1.0)*(r22*r22))))),-1);
if(!x4145.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4144.value)+(((1.5707963267949)*(x4145.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4146=IKsin(j14);
IkReal x4147=IKcos(j14);
IkReal x4148=(gconst98*r10);
IkReal x4149=((1.0)*cj11);
IkReal x4150=((1.0)*sj10);
IkReal x4151=(gconst97*r21);
IkReal x4152=(cj12*sj11);
IkReal x4153=((1.0)*x4147);
IkReal x4154=(gconst97*x4146);
IkReal x4155=(gconst97*x4147);
IkReal x4156=((1.0)*gconst98*x4146);
evalcond[0]=(((x4146*x4151))+(((-1.0)*r22*x4153))+(((-1.0)*r20*x4156)));
evalcond[1]=(((r11*x4154))+(((-1.0)*x4146*x4148))+cj10+(((-1.0)*r12*x4153)));
evalcond[2]=(((r01*x4154))+(((-1.0)*r02*x4153))+(((-1.0)*r00*x4156))+(((-1.0)*x4150)));
evalcond[3]=(((sj11*sj12))+((r22*x4146))+(((-1.0)*cj12*x4149))+(((-1.0)*gconst98*r20*x4153))+((x4147*x4151)));
evalcond[4]=(((r02*x4146))+((r01*x4155))+(((-1.0)*gconst98*r00*x4153))+(((-1.0)*cj10*x4152))+(((-1.0)*cj10*sj12*x4149)));
evalcond[5]=((((-1.0)*sj10*sj12*x4149))+((r12*x4146))+(((-1.0)*x4148*x4153))+((r11*x4155))+(((-1.0)*x4150*x4152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4157=((1.0)*gconst98);
CheckValue<IkReal> x4158 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x4157))+((gconst97*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4158.valid){
continue;
}
CheckValue<IkReal> x4159=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst97*r10))+(((-1.0)*r11*x4157)))),-1);
if(!x4159.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4158.value)+(((1.5707963267949)*(x4159.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4160=IKsin(j14);
IkReal x4161=IKcos(j14);
IkReal x4162=(gconst98*r10);
IkReal x4163=((1.0)*cj11);
IkReal x4164=((1.0)*sj10);
IkReal x4165=(gconst97*r21);
IkReal x4166=(cj12*sj11);
IkReal x4167=((1.0)*x4161);
IkReal x4168=(gconst97*x4160);
IkReal x4169=(gconst97*x4161);
IkReal x4170=((1.0)*gconst98*x4160);
evalcond[0]=((((-1.0)*r20*x4170))+((x4160*x4165))+(((-1.0)*r22*x4167)));
evalcond[1]=((((-1.0)*x4160*x4162))+(((-1.0)*r12*x4167))+cj10+((r11*x4168)));
evalcond[2]=(((r01*x4168))+(((-1.0)*r02*x4167))+(((-1.0)*r00*x4170))+(((-1.0)*x4164)));
evalcond[3]=(((sj11*sj12))+((r22*x4160))+(((-1.0)*gconst98*r20*x4167))+(((-1.0)*cj12*x4163))+((x4161*x4165)));
evalcond[4]=(((r01*x4169))+(((-1.0)*cj10*sj12*x4163))+((r02*x4160))+(((-1.0)*cj10*x4166))+(((-1.0)*gconst98*r00*x4167)));
evalcond[5]=((((-1.0)*x4162*x4167))+((r11*x4169))+(((-1.0)*x4164*x4166))+((r12*x4160))+(((-1.0)*sj10*sj12*x4163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4171=((1.0)*gconst98);
CheckValue<IkReal> x4172=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4171))+(((-1.0)*gconst97*r00)))),-1);
if(!x4172.valid){
continue;
}
CheckValue<IkReal> x4173 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x4171))+((cj10*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4173.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4172.value)))+(x4173.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4174=IKsin(j14);
IkReal x4175=IKcos(j14);
IkReal x4176=(gconst98*r10);
IkReal x4177=((1.0)*cj11);
IkReal x4178=((1.0)*sj10);
IkReal x4179=(gconst97*r21);
IkReal x4180=(cj12*sj11);
IkReal x4181=((1.0)*x4175);
IkReal x4182=(gconst97*x4174);
IkReal x4183=(gconst97*x4175);
IkReal x4184=((1.0)*gconst98*x4174);
evalcond[0]=((((-1.0)*r20*x4184))+(((-1.0)*r22*x4181))+((x4174*x4179)));
evalcond[1]=((((-1.0)*r12*x4181))+((r11*x4182))+cj10+(((-1.0)*x4174*x4176)));
evalcond[2]=((((-1.0)*x4178))+(((-1.0)*r00*x4184))+(((-1.0)*r02*x4181))+((r01*x4182)));
evalcond[3]=(((sj11*sj12))+((x4175*x4179))+((r22*x4174))+(((-1.0)*gconst98*r20*x4181))+(((-1.0)*cj12*x4177)));
evalcond[4]=((((-1.0)*cj10*sj12*x4177))+((r01*x4183))+(((-1.0)*cj10*x4180))+((r02*x4174))+(((-1.0)*gconst98*r00*x4181)));
evalcond[5]=((((-1.0)*sj10*sj12*x4177))+((r12*x4174))+((r11*x4183))+(((-1.0)*x4176*x4181))+(((-1.0)*x4178*x4180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4185=((-1.0)*r21);
IkReal x4187 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4187)==0){
continue;
}
IkReal x4186=pow(x4187,-0.5);
CheckValue<IkReal> x4188 = IKatan2WithCheck(IkReal(x4185),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4188.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4188.value))));
IkReal gconst100=(x4185*x4186);
IkReal gconst101=((1.0)*r20*x4186);
CheckValue<IkReal> x4189 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4189.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x4189.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x4190=((-1.0)*r21);
CheckValue<IkReal> x4193 = IKatan2WithCheck(IkReal(x4190),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4193.valid){
continue;
}
IkReal x4191=((1.0)*(x4193.value));
IkReal x4192=x4186;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst100;
cj15=gconst101;
j15=((3.14159265)+(((-1.0)*x4191)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4191)));
IkReal gconst100=(x4190*x4192);
IkReal gconst101=((1.0)*r20*x4192);
IkReal x4194=r22*r22;
IkReal x4195=((1.0)*x4194);
CheckValue<IkReal> x4199=IKPowWithIntegerCheck(((-1.0)+x4194),-1);
if(!x4199.valid){
continue;
}
IkReal x4196=x4199.value;
if((((1.0)+(((-1.0)*x4195)))) < -0.00001)
continue;
IkReal x4197=IKsqrt(((1.0)+(((-1.0)*x4195))));
IkReal x4198=(cj10*x4196*x4197);
j14eval[0]=((IKabs(((((-1.0)*x4195*x4198))+x4198)))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x4200=((-1.0)*r21);
CheckValue<IkReal> x4203 = IKatan2WithCheck(IkReal(x4200),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4203.valid){
continue;
}
IkReal x4201=((1.0)*(x4203.value));
IkReal x4202=x4186;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst100;
cj15=gconst101;
j15=((3.14159265)+(((-1.0)*x4201)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4201)));
IkReal gconst100=(x4200*x4202);
IkReal gconst101=((1.0)*r20*x4202);
IkReal x4204=r22*r22;
IkReal x4205=((1.0)*x4204);
CheckValue<IkReal> x4209=IKPowWithIntegerCheck(((-1.0)+x4204),-1);
if(!x4209.valid){
continue;
}
IkReal x4206=x4209.value;
if((((1.0)+(((-1.0)*x4205)))) < -0.00001)
continue;
IkReal x4207=IKsqrt(((1.0)+(((-1.0)*x4205))));
IkReal x4208=(sj10*x4206*x4207);
j14eval[0]=((IKabs((x4208+(((-1.0)*x4205*x4208)))))+(IKabs((r22*sj10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x4210=((-1.0)*r21);
CheckValue<IkReal> x4213 = IKatan2WithCheck(IkReal(x4210),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4213.valid){
continue;
}
IkReal x4211=((1.0)*(x4213.value));
IkReal x4212=x4186;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst100;
cj15=gconst101;
j15=((3.14159265)+(((-1.0)*x4211)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4211)));
IkReal gconst100=(x4210*x4212);
IkReal gconst101=((1.0)*r20*x4212);
IkReal x4214=r22*r22;
IkReal x4215=(cj10*r02);
IkReal x4216=(r12*sj10);
CheckValue<IkReal> x4220=IKPowWithIntegerCheck(((-1.0)+x4214),-1);
if(!x4220.valid){
continue;
}
IkReal x4217=x4220.value;
if((((1.0)+(((-1.0)*x4214)))) < -0.00001)
continue;
IkReal x4218=IKsqrt(((1.0)+(((-1.0)*x4214))));
IkReal x4219=(r22*x4217*x4218);
j14eval[0]=0;
j14eval[1]=((IKabs(((((-1.0)*x4216))+(((-1.0)*x4215)))))+(IKabs((((x4215*x4219))+((x4216*x4219))))));
j14eval[2]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4221=((1.0)*gconst100);
CheckValue<IkReal> x4222=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst101*r21))+(((-1.0)*r20*x4221)))),-1);
if(!x4222.valid){
continue;
}
CheckValue<IkReal> x4223 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((gconst101*r10*sj10))+(((-1.0)*r11*sj10*x4221))+(((-1.0)*cj10*r01*x4221))+((cj10*gconst101*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4223.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4222.value)))+(x4223.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4224=IKsin(j14);
IkReal x4225=IKcos(j14);
IkReal x4226=(gconst101*r20);
IkReal x4227=((1.0)*cj11);
IkReal x4228=((1.0)*sj10);
IkReal x4229=(cj12*sj11);
IkReal x4230=((1.0)*x4225);
IkReal x4231=(gconst100*x4225);
IkReal x4232=(gconst100*x4224);
IkReal x4233=((1.0)*gconst101*x4224);
evalcond[0]=((((-1.0)*r22*x4230))+((r21*x4232))+(((-1.0)*x4224*x4226)));
evalcond[1]=((((-1.0)*r12*x4230))+(((-1.0)*r10*x4233))+cj10+((r11*x4232)));
evalcond[2]=((((-1.0)*x4228))+((r01*x4232))+(((-1.0)*r02*x4230))+(((-1.0)*r00*x4233)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x4226*x4230))+((r22*x4224))+(((-1.0)*cj12*x4227))+((r21*x4231)));
evalcond[4]=(((r01*x4231))+(((-1.0)*cj10*x4229))+(((-1.0)*gconst101*r00*x4230))+(((-1.0)*cj10*sj12*x4227))+((r02*x4224)));
evalcond[5]=((((-1.0)*sj10*sj12*x4227))+(((-1.0)*x4228*x4229))+(((-1.0)*gconst101*r10*x4230))+((r11*x4231))+((r12*x4224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4234=((1.0)*gconst101);
CheckValue<IkReal> x4235 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x4234))+((gconst100*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4235.valid){
continue;
}
CheckValue<IkReal> x4236=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x4234)))),-1);
if(!x4236.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4235.value)+(((1.5707963267949)*(x4236.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4237=IKsin(j14);
IkReal x4238=IKcos(j14);
IkReal x4239=(gconst101*r20);
IkReal x4240=((1.0)*cj11);
IkReal x4241=((1.0)*sj10);
IkReal x4242=(cj12*sj11);
IkReal x4243=((1.0)*x4238);
IkReal x4244=(gconst100*x4238);
IkReal x4245=(gconst100*x4237);
IkReal x4246=((1.0)*gconst101*x4237);
evalcond[0]=((((-1.0)*r22*x4243))+((r21*x4245))+(((-1.0)*x4237*x4239)));
evalcond[1]=(cj10+(((-1.0)*r12*x4243))+(((-1.0)*r10*x4246))+((r11*x4245)));
evalcond[2]=(((r01*x4245))+(((-1.0)*x4241))+(((-1.0)*r02*x4243))+(((-1.0)*r00*x4246)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x4240))+((r22*x4237))+(((-1.0)*x4239*x4243))+((r21*x4244)));
evalcond[4]=(((r01*x4244))+(((-1.0)*cj10*x4242))+((r02*x4237))+(((-1.0)*gconst101*r00*x4243))+(((-1.0)*cj10*sj12*x4240)));
evalcond[5]=(((r12*x4237))+(((-1.0)*x4241*x4242))+(((-1.0)*sj10*sj12*x4240))+(((-1.0)*gconst101*r10*x4243))+((r11*x4244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4247=((1.0)*gconst101);
CheckValue<IkReal> x4248=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4247))+(((-1.0)*gconst100*r00)))),-1);
if(!x4248.valid){
continue;
}
CheckValue<IkReal> x4249 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x4247))+((cj10*gconst100*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4249.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4248.value)))+(x4249.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4250=IKsin(j14);
IkReal x4251=IKcos(j14);
IkReal x4252=(gconst101*r20);
IkReal x4253=((1.0)*cj11);
IkReal x4254=((1.0)*sj10);
IkReal x4255=(cj12*sj11);
IkReal x4256=((1.0)*x4251);
IkReal x4257=(gconst100*x4251);
IkReal x4258=(gconst100*x4250);
IkReal x4259=((1.0)*gconst101*x4250);
evalcond[0]=((((-1.0)*x4250*x4252))+(((-1.0)*r22*x4256))+((r21*x4258)));
evalcond[1]=(cj10+((r11*x4258))+(((-1.0)*r10*x4259))+(((-1.0)*r12*x4256)));
evalcond[2]=(((r01*x4258))+(((-1.0)*x4254))+(((-1.0)*r00*x4259))+(((-1.0)*r02*x4256)));
evalcond[3]=(((sj11*sj12))+((r22*x4250))+(((-1.0)*x4252*x4256))+(((-1.0)*cj12*x4253))+((r21*x4257)));
evalcond[4]=((((-1.0)*cj10*x4255))+(((-1.0)*gconst101*r00*x4256))+(((-1.0)*cj10*sj12*x4253))+((r02*x4250))+((r01*x4257)));
evalcond[5]=((((-1.0)*x4254*x4255))+((r12*x4250))+(((-1.0)*gconst101*r10*x4256))+((r11*x4257))+(((-1.0)*sj10*sj12*x4253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4260=((-1.0)*r10);
IkReal x4262 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4262)==0){
continue;
}
IkReal x4261=pow(x4262,-0.5);
CheckValue<IkReal> x4263 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4260),IKFAST_ATAN2_MAGTHRESH);
if(!x4263.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4263.value));
IkReal gconst103=(r11*x4261);
IkReal gconst104=(x4260*x4261);
CheckValue<IkReal> x4264 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4264.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x4264.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x4265=((-1.0)*r10);
IkReal x4266=x4261;
CheckValue<IkReal> x4268 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4265),IKFAST_ATAN2_MAGTHRESH);
if(!x4268.valid){
continue;
}
IkReal x4267=((-1.0)*(x4268.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst103;
cj15=gconst104;
j15=x4267;
IkReal gconst102=x4267;
IkReal gconst103=(r11*x4266);
IkReal gconst104=(x4265*x4266);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4269=((1.0)*cj10);
IkReal x4270=((1.0)*gconst103);
CheckValue<IkReal> x4271=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4270)))),-1);
if(!x4271.valid){
continue;
}
CheckValue<IkReal> x4272 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4269))+(((-1.0)*r12*sj10)))),IkReal((((cj10*gconst104*r00))+(((-1.0)*gconst103*r01*x4269))+((gconst104*r10*sj10))+(((-1.0)*r11*sj10*x4270)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4272.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4271.value)))+(x4272.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4273=IKsin(j14);
IkReal x4274=IKcos(j14);
IkReal x4275=((1.0)*cj11);
IkReal x4276=(gconst104*r20);
IkReal x4277=(gconst103*r11);
IkReal x4278=((1.0)*sj10);
IkReal x4279=(gconst104*r00);
IkReal x4280=(cj12*sj11);
IkReal x4281=(gconst104*r10);
IkReal x4282=((1.0)*x4274);
IkReal x4283=(gconst103*x4273);
IkReal x4284=((1.0)*x4273);
IkReal x4285=(gconst103*x4274);
evalcond[0]=((((-1.0)*r22*x4282))+(((-1.0)*x4276*x4284))+((r21*x4283)));
evalcond[1]=((((-1.0)*r12*x4282))+cj10+((x4273*x4277))+(((-1.0)*x4281*x4284)));
evalcond[2]=((((-1.0)*r02*x4282))+(((-1.0)*x4279*x4284))+(((-1.0)*x4278))+((r01*x4283)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x4276*x4282))+(((-1.0)*cj12*x4275))+((r21*x4285))+((r22*x4273)));
evalcond[4]=((((-1.0)*cj10*x4280))+((r02*x4273))+(((-1.0)*cj10*sj12*x4275))+(((-1.0)*x4279*x4282))+((r01*x4285)));
evalcond[5]=(((r12*x4273))+((x4274*x4277))+(((-1.0)*x4278*x4280))+(((-1.0)*sj10*sj12*x4275))+(((-1.0)*x4281*x4282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4286=((1.0)*gconst104);
CheckValue<IkReal> x4287 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst103*r21))+(((-1.0)*cj10*r20*x4286)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4287.valid){
continue;
}
CheckValue<IkReal> x4288=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x4286)))),-1);
if(!x4288.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4287.value)+(((1.5707963267949)*(x4288.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4289=IKsin(j14);
IkReal x4290=IKcos(j14);
IkReal x4291=((1.0)*cj11);
IkReal x4292=(gconst104*r20);
IkReal x4293=(gconst103*r11);
IkReal x4294=((1.0)*sj10);
IkReal x4295=(gconst104*r00);
IkReal x4296=(cj12*sj11);
IkReal x4297=(gconst104*r10);
IkReal x4298=((1.0)*x4290);
IkReal x4299=(gconst103*x4289);
IkReal x4300=((1.0)*x4289);
IkReal x4301=(gconst103*x4290);
evalcond[0]=((((-1.0)*r22*x4298))+((r21*x4299))+(((-1.0)*x4292*x4300)));
evalcond[1]=(((x4289*x4293))+(((-1.0)*x4297*x4300))+cj10+(((-1.0)*r12*x4298)));
evalcond[2]=(((r01*x4299))+(((-1.0)*x4294))+(((-1.0)*x4295*x4300))+(((-1.0)*r02*x4298)));
evalcond[3]=(((sj11*sj12))+((r22*x4289))+(((-1.0)*cj12*x4291))+(((-1.0)*x4292*x4298))+((r21*x4301)));
evalcond[4]=(((r02*x4289))+(((-1.0)*x4295*x4298))+((r01*x4301))+(((-1.0)*cj10*x4296))+(((-1.0)*cj10*sj12*x4291)));
evalcond[5]=(((r12*x4289))+(((-1.0)*x4297*x4298))+(((-1.0)*x4294*x4296))+(((-1.0)*sj10*sj12*x4291))+((x4290*x4293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4302=((-1.0)*r11);
IkReal x4304 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4304)==0){
continue;
}
IkReal x4303=pow(x4304,-0.5);
CheckValue<IkReal> x4305 = IKatan2WithCheck(IkReal(x4302),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4305.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4305.value))));
IkReal gconst106=(x4302*x4303);
IkReal gconst107=((1.0)*r10*x4303);
CheckValue<IkReal> x4306 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4306.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x4306.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x4307=((-1.0)*r11);
CheckValue<IkReal> x4310 = IKatan2WithCheck(IkReal(x4307),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4310.valid){
continue;
}
IkReal x4308=((1.0)*(x4310.value));
IkReal x4309=x4303;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst106;
cj15=gconst107;
j15=((3.14159265)+(((-1.0)*x4308)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4308)));
IkReal gconst106=(x4307*x4309);
IkReal gconst107=((1.0)*r10*x4309);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x4311=((-1.0)*r11);
CheckValue<IkReal> x4314 = IKatan2WithCheck(IkReal(x4311),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4314.valid){
continue;
}
IkReal x4312=((1.0)*(x4314.value));
IkReal x4313=x4303;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst106;
cj15=gconst107;
j15=((3.14159265)+(((-1.0)*x4312)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4312)));
IkReal gconst106=(x4311*x4313);
IkReal gconst107=((1.0)*r10*x4313);
IkReal x4315=r12*r12;
IkReal x4316=(cj10*r02);
IkReal x4317=x4303;
IkReal x4318=(sj10*x4317);
j14eval[0]=((IKabs((((x4315*x4318))+((r12*x4316*x4317))+(((-1.0)*x4318)))))+(IKabs(((((-1.0)*r12*sj10))+(((-1.0)*x4316))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x4319=((-1.0)*r11);
CheckValue<IkReal> x4322 = IKatan2WithCheck(IkReal(x4319),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4322.valid){
continue;
}
IkReal x4320=((1.0)*(x4322.value));
IkReal x4321=x4303;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst106;
cj15=gconst107;
j15=((3.14159265)+(((-1.0)*x4320)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4320)));
IkReal gconst106=(x4319*x4321);
IkReal gconst107=((1.0)*r10*x4321);
IkReal x4323=r12*r12;
IkReal x4324=(cj11*cj12);
IkReal x4325=(sj11*sj12);
IkReal x4326=((1.0)+(((-1.0)*x4323)));
CheckValue<IkReal> x4333=IKPowWithIntegerCheck(x4326,-1);
if(!x4333.valid){
continue;
}
IkReal x4327=x4333.value;
CheckValue<IkReal> x4334=IKPowWithIntegerCheck(((-1.0)+x4323),-1);
if(!x4334.valid){
continue;
}
IkReal x4328=x4334.value;
IkReal x4329=((1.0)*x4327);
if((x4326) < -0.00001)
continue;
IkReal x4330=IKsqrt(x4326);
IkReal x4331=(r12*r22*x4328*x4330);
IkReal x4332=((((-1.0)*x4329*(r10*r10)*(r20*r20)))+(((-1.0)*x4329*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x4327))+(((-1.0)*(r22*r22))));
j14eval[0]=x4332;
j14eval[1]=IKsign(x4332);
j14eval[2]=((IKabs((((x4324*x4331))+(((-1.0)*x4325*x4331)))))+(IKabs(((((-1.0)*r22*x4324))+((r22*x4325))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4335=(sj11*sj12);
IkReal x4336=(gconst107*r20);
IkReal x4337=(gconst106*r21);
IkReal x4338=((1.0)*cj11*cj12);
CheckValue<IkReal> x4339 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4338))+((r22*x4335)))),IkReal((((x4335*x4337))+(((-1.0)*x4335*x4336))+((cj11*cj12*x4336))+(((-1.0)*x4337*x4338)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4339.valid){
continue;
}
CheckValue<IkReal> x4340=IKPowWithIntegerCheck(IKsign(((((2.0)*x4336*x4337))+(((-1.0)*(x4336*x4336)))+(((-1.0)*(x4337*x4337)))+(((-1.0)*(r22*r22))))),-1);
if(!x4340.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4339.value)+(((1.5707963267949)*(x4340.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4341=IKsin(j14);
IkReal x4342=IKcos(j14);
IkReal x4343=((1.0)*cj11);
IkReal x4344=(gconst106*r21);
IkReal x4345=(gconst107*r20);
IkReal x4346=((1.0)*sj10);
IkReal x4347=(gconst107*r10);
IkReal x4348=(cj12*sj11);
IkReal x4349=(gconst107*r00);
IkReal x4350=((1.0)*x4342);
IkReal x4351=(gconst106*x4341);
IkReal x4352=((1.0)*x4341);
IkReal x4353=(gconst106*x4342);
evalcond[0]=((((-1.0)*x4345*x4352))+((x4341*x4344))+(((-1.0)*r22*x4350)));
evalcond[1]=((((-1.0)*r12*x4350))+cj10+((r11*x4351))+(((-1.0)*x4347*x4352)));
evalcond[2]=((((-1.0)*r02*x4350))+(((-1.0)*x4346))+(((-1.0)*x4349*x4352))+((r01*x4351)));
evalcond[3]=(((sj11*sj12))+((x4342*x4344))+(((-1.0)*x4345*x4350))+((r22*x4341))+(((-1.0)*cj12*x4343)));
evalcond[4]=((((-1.0)*x4349*x4350))+((r02*x4341))+(((-1.0)*cj10*x4348))+(((-1.0)*cj10*sj12*x4343))+((r01*x4353)));
evalcond[5]=((((-1.0)*x4346*x4348))+(((-1.0)*sj10*sj12*x4343))+((r12*x4341))+((r11*x4353))+(((-1.0)*x4347*x4350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4354=((1.0)*gconst106);
CheckValue<IkReal> x4355=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x4354)))),-1);
if(!x4355.valid){
continue;
}
CheckValue<IkReal> x4356 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x4354))+((cj10*gconst107*r00))+(((-1.0)*r11*sj10*x4354))+((gconst107*r10*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4356.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4355.value)))+(x4356.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4357=IKsin(j14);
IkReal x4358=IKcos(j14);
IkReal x4359=((1.0)*cj11);
IkReal x4360=(gconst106*r21);
IkReal x4361=(gconst107*r20);
IkReal x4362=((1.0)*sj10);
IkReal x4363=(gconst107*r10);
IkReal x4364=(cj12*sj11);
IkReal x4365=(gconst107*r00);
IkReal x4366=((1.0)*x4358);
IkReal x4367=(gconst106*x4357);
IkReal x4368=((1.0)*x4357);
IkReal x4369=(gconst106*x4358);
evalcond[0]=((((-1.0)*x4361*x4368))+(((-1.0)*r22*x4366))+((x4357*x4360)));
evalcond[1]=(((r11*x4367))+cj10+(((-1.0)*r12*x4366))+(((-1.0)*x4363*x4368)));
evalcond[2]=((((-1.0)*x4362))+((r01*x4367))+(((-1.0)*x4365*x4368))+(((-1.0)*r02*x4366)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x4361*x4366))+((r22*x4357))+((x4358*x4360))+(((-1.0)*cj12*x4359)));
evalcond[4]=((((-1.0)*cj10*x4364))+(((-1.0)*cj10*sj12*x4359))+((r01*x4369))+((r02*x4357))+(((-1.0)*x4365*x4366)));
evalcond[5]=((((-1.0)*sj10*sj12*x4359))+((r11*x4369))+(((-1.0)*x4362*x4364))+((r12*x4357))+(((-1.0)*x4363*x4366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4370=((1.0)*gconst107);
CheckValue<IkReal> x4371 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x4370))+((cj10*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4371.valid){
continue;
}
CheckValue<IkReal> x4372=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4370)))),-1);
if(!x4372.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4371.value)+(((1.5707963267949)*(x4372.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4373=IKsin(j14);
IkReal x4374=IKcos(j14);
IkReal x4375=((1.0)*cj11);
IkReal x4376=(gconst106*r21);
IkReal x4377=(gconst107*r20);
IkReal x4378=((1.0)*sj10);
IkReal x4379=(gconst107*r10);
IkReal x4380=(cj12*sj11);
IkReal x4381=(gconst107*r00);
IkReal x4382=((1.0)*x4374);
IkReal x4383=(gconst106*x4373);
IkReal x4384=((1.0)*x4373);
IkReal x4385=(gconst106*x4374);
evalcond[0]=((((-1.0)*r22*x4382))+(((-1.0)*x4377*x4384))+((x4373*x4376)));
evalcond[1]=((((-1.0)*x4379*x4384))+(((-1.0)*r12*x4382))+cj10+((r11*x4383)));
evalcond[2]=((((-1.0)*r02*x4382))+(((-1.0)*x4381*x4384))+(((-1.0)*x4378))+((r01*x4383)));
evalcond[3]=(((sj11*sj12))+((r22*x4373))+((x4374*x4376))+(((-1.0)*cj12*x4375))+(((-1.0)*x4377*x4382)));
evalcond[4]=(((r02*x4373))+(((-1.0)*x4381*x4382))+(((-1.0)*cj10*x4380))+(((-1.0)*cj10*sj12*x4375))+((r01*x4385)));
evalcond[5]=((((-1.0)*x4379*x4382))+((r12*x4373))+(((-1.0)*x4378*x4380))+(((-1.0)*sj10*sj12*x4375))+((r11*x4385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
IkReal x4386=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x4386;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj15*r00))+((r01*sj15))))));
j14eval[2]=IKsign(x4386);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
IkReal x4387=((1.0)*cj15);
IkReal x4388=((((-1.0)*r01*x4387))+(((-1.0)*r00*sj15)));
j14eval[0]=x4388;
j14eval[1]=((IKabs((((r21*sj15))+(((-1.0)*r20*x4387)))))+(IKabs(r22)));
j14eval[2]=IKsign(x4388);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
IkReal x4389=((1.0)*cj15);
IkReal x4390=(r11*sj15);
IkReal x4391=(sj11*sj12);
IkReal x4392=(cj11*cj12);
IkReal x4393=((((-1.0)*r01*x4389))+(((-1.0)*r00*sj15)));
j14eval[0]=x4393;
j14eval[1]=((IKabs(((((-1.0)*r12*x4391))+((r12*x4392)))))+(IKabs((((x4390*x4391))+((cj15*r10*x4392))+(((-1.0)*x4390*x4392))+(((-1.0)*r10*x4389*x4391))))));
j14eval[2]=IKsign(x4393);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4394=((1.0)*cj15);
IkReal x4395=(r11*sj15);
IkReal x4396=(cj11*cj12);
IkReal x4397=(sj11*sj12);
CheckValue<IkReal> x4398=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4394))+(((-1.0)*r00*sj15)))),-1);
if(!x4398.valid){
continue;
}
CheckValue<IkReal> x4399 = IKatan2WithCheck(IkReal(((((-1.0)*x4395*x4396))+(((-1.0)*r10*x4394*x4397))+((cj15*r10*x4396))+((x4395*x4397)))),IkReal(((((-1.0)*r12*x4397))+((r12*x4396)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4399.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4398.value)))+(x4399.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4400=IKcos(j14);
IkReal x4401=IKsin(j14);
IkReal x4402=((1.0)*cj11);
IkReal x4403=(cj15*r20);
IkReal x4404=(cj15*r10);
IkReal x4405=(cj15*r00);
IkReal x4406=((1.0)*x4400);
IkReal x4407=(sj15*x4400);
IkReal x4408=((1.0)*x4401);
IkReal x4409=(sj15*x4401);
evalcond[0]=(((r11*x4407))+((r12*x4401))+(((-1.0)*x4404*x4406)));
evalcond[1]=(((r21*x4409))+(((-1.0)*x4403*x4408))+(((-1.0)*r22*x4406)));
evalcond[2]=(((r01*x4409))+(((-1.0)*r02*x4406))+(((-1.0)*x4405*x4408)));
evalcond[3]=((1.0)+((r11*x4409))+(((-1.0)*r12*x4406))+(((-1.0)*x4404*x4408)));
evalcond[4]=(((sj11*sj12))+((r22*x4401))+((r21*x4407))+(((-1.0)*x4403*x4406))+(((-1.0)*cj12*x4402)));
evalcond[5]=((((-1.0)*sj12*x4402))+(((-1.0)*cj12*sj11))+((r01*x4407))+(((-1.0)*x4405*x4406))+((r02*x4401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4410=((1.0)*cj15);
CheckValue<IkReal> x4411=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4410))+(((-1.0)*r00*sj15)))),-1);
if(!x4411.valid){
continue;
}
CheckValue<IkReal> x4412 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj15))+(((-1.0)*r20*x4410)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4412.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4411.value)))+(x4412.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4413=IKcos(j14);
IkReal x4414=IKsin(j14);
IkReal x4415=((1.0)*cj11);
IkReal x4416=(cj15*r20);
IkReal x4417=(cj15*r10);
IkReal x4418=(cj15*r00);
IkReal x4419=((1.0)*x4413);
IkReal x4420=(sj15*x4413);
IkReal x4421=((1.0)*x4414);
IkReal x4422=(sj15*x4414);
evalcond[0]=(((r12*x4414))+(((-1.0)*x4417*x4419))+((r11*x4420)));
evalcond[1]=((((-1.0)*r22*x4419))+((r21*x4422))+(((-1.0)*x4416*x4421)));
evalcond[2]=((((-1.0)*r02*x4419))+((r01*x4422))+(((-1.0)*x4418*x4421)));
evalcond[3]=((1.0)+(((-1.0)*x4417*x4421))+(((-1.0)*r12*x4419))+((r11*x4422)));
evalcond[4]=(((sj11*sj12))+((r22*x4414))+((r21*x4420))+(((-1.0)*x4416*x4419))+(((-1.0)*cj12*x4415)));
evalcond[5]=((((-1.0)*x4418*x4419))+(((-1.0)*sj12*x4415))+(((-1.0)*cj12*sj11))+((r01*x4420))+((r02*x4414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x4423 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj15*r00))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4423.valid){
continue;
}
CheckValue<IkReal> x4424=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x4424.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4423.value)+(((1.5707963267949)*(x4424.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4425=IKcos(j14);
IkReal x4426=IKsin(j14);
IkReal x4427=((1.0)*cj11);
IkReal x4428=(cj15*r20);
IkReal x4429=(cj15*r10);
IkReal x4430=(cj15*r00);
IkReal x4431=((1.0)*x4425);
IkReal x4432=(sj15*x4425);
IkReal x4433=((1.0)*x4426);
IkReal x4434=(sj15*x4426);
evalcond[0]=((((-1.0)*x4429*x4431))+((r11*x4432))+((r12*x4426)));
evalcond[1]=((((-1.0)*x4428*x4433))+(((-1.0)*r22*x4431))+((r21*x4434)));
evalcond[2]=((((-1.0)*r02*x4431))+(((-1.0)*x4430*x4433))+((r01*x4434)));
evalcond[3]=((1.0)+(((-1.0)*x4429*x4433))+(((-1.0)*r12*x4431))+((r11*x4434)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x4428*x4431))+((r22*x4426))+((r21*x4432))+(((-1.0)*cj12*x4427)));
evalcond[5]=((((-1.0)*x4430*x4431))+((r02*x4426))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x4427))+((r01*x4432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x4435=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x4435;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x4435);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x4436=((1.0)*cj15);
IkReal x4437=((((-1.0)*r20*sj15))+(((-1.0)*r21*x4436)));
j14eval[0]=x4437;
j14eval[1]=IKsign(x4437);
j14eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x4436))+((r01*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x4438=cj15*cj15;
IkReal x4439=r11*r11;
IkReal x4440=(r11*sj15);
IkReal x4441=(cj15*r10);
IkReal x4442=((r12*r12)+x4439+(((-2.0)*x4440*x4441))+(((-1.0)*x4438*x4439))+((x4438*(r10*r10))));
j14eval[0]=x4442;
j14eval[1]=((IKabs(r12))+(IKabs((x4440+(((-1.0)*x4441))))));
j14eval[2]=IKsign(x4442);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4443=cj15*cj15;
IkReal x4444=r11*r11;
IkReal x4445=(r11*sj15);
IkReal x4446=(cj15*r10);
CheckValue<IkReal> x4447=IKPowWithIntegerCheck(IKsign(((r12*r12)+x4444+((x4443*(r10*r10)))+(((-2.0)*x4445*x4446))+(((-1.0)*x4443*x4444)))),-1);
if(!x4447.valid){
continue;
}
CheckValue<IkReal> x4448 = IKatan2WithCheck(IkReal((x4445+(((-1.0)*x4446)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4448.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4447.value)))+(x4448.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4449=IKcos(j14);
IkReal x4450=IKsin(j14);
IkReal x4451=(cj15*r20);
IkReal x4452=(cj15*r10);
IkReal x4453=(cj15*r00);
IkReal x4454=((1.0)*x4449);
IkReal x4455=(sj15*x4449);
IkReal x4456=((1.0)*x4450);
IkReal x4457=(sj15*x4450);
evalcond[0]=(((r11*x4455))+((r12*x4450))+(((-1.0)*x4452*x4454)));
evalcond[1]=(((r21*x4457))+(((-1.0)*r22*x4454))+(((-1.0)*x4451*x4456)));
evalcond[2]=(((r01*x4457))+(((-1.0)*r02*x4454))+(((-1.0)*x4453*x4456)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x4454))+((r11*x4457))+(((-1.0)*x4452*x4456)));
evalcond[4]=(((r01*x4455))+((cj12*sj11))+((r02*x4450))+((cj11*sj12))+(((-1.0)*x4453*x4454)));
evalcond[5]=(((sj11*sj12))+((r21*x4455))+(((-1.0)*cj11*cj12))+(((-1.0)*x4451*x4454))+((r22*x4450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4458=((1.0)*cj15);
CheckValue<IkReal> x4459=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15))+(((-1.0)*r21*x4458)))),-1);
if(!x4459.valid){
continue;
}
CheckValue<IkReal> x4460 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj15))+(((-1.0)*r00*x4458)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4460.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4459.value)))+(x4460.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4461=IKcos(j14);
IkReal x4462=IKsin(j14);
IkReal x4463=(cj15*r20);
IkReal x4464=(cj15*r10);
IkReal x4465=(cj15*r00);
IkReal x4466=((1.0)*x4461);
IkReal x4467=(sj15*x4461);
IkReal x4468=((1.0)*x4462);
IkReal x4469=(sj15*x4462);
evalcond[0]=((((-1.0)*x4464*x4466))+((r12*x4462))+((r11*x4467)));
evalcond[1]=((((-1.0)*x4463*x4468))+(((-1.0)*r22*x4466))+((r21*x4469)));
evalcond[2]=((((-1.0)*x4465*x4468))+((r01*x4469))+(((-1.0)*r02*x4466)));
evalcond[3]=((-1.0)+(((-1.0)*x4464*x4468))+((r11*x4469))+(((-1.0)*r12*x4466)));
evalcond[4]=((((-1.0)*x4465*x4466))+((r01*x4467))+((cj12*sj11))+((cj11*sj12))+((r02*x4462)));
evalcond[5]=(((sj11*sj12))+((r22*x4462))+(((-1.0)*x4463*x4466))+((r21*x4467))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x4470 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4470.valid){
continue;
}
CheckValue<IkReal> x4471=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x4471.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4470.value)+(((1.5707963267949)*(x4471.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4472=IKcos(j14);
IkReal x4473=IKsin(j14);
IkReal x4474=(cj15*r20);
IkReal x4475=(cj15*r10);
IkReal x4476=(cj15*r00);
IkReal x4477=((1.0)*x4472);
IkReal x4478=(sj15*x4472);
IkReal x4479=((1.0)*x4473);
IkReal x4480=(sj15*x4473);
evalcond[0]=((((-1.0)*x4475*x4477))+((r12*x4473))+((r11*x4478)));
evalcond[1]=(((r21*x4480))+(((-1.0)*x4474*x4479))+(((-1.0)*r22*x4477)));
evalcond[2]=((((-1.0)*x4476*x4479))+((r01*x4480))+(((-1.0)*r02*x4477)));
evalcond[3]=((-1.0)+((r11*x4480))+(((-1.0)*r12*x4477))+(((-1.0)*x4475*x4479)));
evalcond[4]=((((-1.0)*x4476*x4477))+((r02*x4473))+((cj12*sj11))+((r01*x4478))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r21*x4478))+(((-1.0)*x4474*x4477))+((r22*x4473))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4481=((-1.0)*r00);
IkReal x4483 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4483)==0){
continue;
}
IkReal x4482=pow(x4483,-0.5);
CheckValue<IkReal> x4484 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4481),IKFAST_ATAN2_MAGTHRESH);
if(!x4484.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4484.value));
IkReal gconst109=(r01*x4482);
IkReal gconst110=(x4481*x4482);
CheckValue<IkReal> x4485 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4485.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x4485.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x4486=((-1.0)*r00);
IkReal x4487=x4482;
CheckValue<IkReal> x4489 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4486),IKFAST_ATAN2_MAGTHRESH);
if(!x4489.valid){
continue;
}
IkReal x4488=((-1.0)*(x4489.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst109;
cj15=gconst110;
j15=x4488;
IkReal gconst108=x4488;
IkReal gconst109=(r01*x4487);
IkReal gconst110=(x4486*x4487);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4490=((1.0)*gconst109);
CheckValue<IkReal> x4491 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x4490))+((cj10*gconst110*r00))+((gconst110*r10*sj10))+(((-1.0)*cj10*r01*x4490)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4491.valid){
continue;
}
CheckValue<IkReal> x4492=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4490))+(((-1.0)*gconst110*r21)))),-1);
if(!x4492.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4491.value)+(((1.5707963267949)*(x4492.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4493=IKsin(j14);
IkReal x4494=IKcos(j14);
IkReal x4495=((1.0)*cj11);
IkReal x4496=((1.0)*sj10);
IkReal x4497=(cj12*sj11);
IkReal x4498=((1.0)*x4494);
IkReal x4499=(gconst109*x4494);
IkReal x4500=(gconst109*x4493);
IkReal x4501=((1.0)*gconst110*x4493);
evalcond[0]=(((r21*x4500))+(((-1.0)*r22*x4498))+(((-1.0)*r20*x4501)));
evalcond[1]=(((r11*x4500))+cj10+(((-1.0)*r10*x4501))+(((-1.0)*r12*x4498)));
evalcond[2]=((((-1.0)*r00*x4501))+(((-1.0)*r02*x4498))+((r01*x4500))+(((-1.0)*x4496)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x4495))+((r21*x4499))+((r22*x4493))+(((-1.0)*gconst110*r20*x4498)));
evalcond[4]=((((-1.0)*cj10*x4497))+(((-1.0)*gconst110*r00*x4498))+((r02*x4493))+(((-1.0)*cj10*sj12*x4495))+((r01*x4499)));
evalcond[5]=(((r12*x4493))+(((-1.0)*x4496*x4497))+(((-1.0)*sj10*sj12*x4495))+((r11*x4499))+(((-1.0)*gconst110*r10*x4498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4502=((1.0)*gconst110);
CheckValue<IkReal> x4503=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r10))+(((-1.0)*r11*x4502)))),-1);
if(!x4503.valid){
continue;
}
CheckValue<IkReal> x4504 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst109*r21*sj10))+(((-1.0)*r20*sj10*x4502)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4504.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4503.value)))+(x4504.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4505=IKsin(j14);
IkReal x4506=IKcos(j14);
IkReal x4507=((1.0)*cj11);
IkReal x4508=((1.0)*sj10);
IkReal x4509=(cj12*sj11);
IkReal x4510=((1.0)*x4506);
IkReal x4511=(gconst109*x4506);
IkReal x4512=(gconst109*x4505);
IkReal x4513=((1.0)*gconst110*x4505);
evalcond[0]=(((r21*x4512))+(((-1.0)*r20*x4513))+(((-1.0)*r22*x4510)));
evalcond[1]=((((-1.0)*r12*x4510))+(((-1.0)*r10*x4513))+cj10+((r11*x4512)));
evalcond[2]=((((-1.0)*r02*x4510))+(((-1.0)*x4508))+((r01*x4512))+(((-1.0)*r00*x4513)));
evalcond[3]=(((sj11*sj12))+((r22*x4505))+(((-1.0)*cj12*x4507))+(((-1.0)*gconst110*r20*x4510))+((r21*x4511)));
evalcond[4]=(((r02*x4505))+((r01*x4511))+(((-1.0)*cj10*x4509))+(((-1.0)*gconst110*r00*x4510))+(((-1.0)*cj10*sj12*x4507)));
evalcond[5]=(((r12*x4505))+(((-1.0)*x4508*x4509))+((r11*x4511))+(((-1.0)*gconst110*r10*x4510))+(((-1.0)*sj10*sj12*x4507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4514=((-1.0)*r01);
IkReal x4516 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4516)==0){
continue;
}
IkReal x4515=pow(x4516,-0.5);
CheckValue<IkReal> x4517 = IKatan2WithCheck(IkReal(x4514),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4517.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4517.value))));
IkReal gconst112=(x4514*x4515);
IkReal gconst113=((1.0)*r00*x4515);
CheckValue<IkReal> x4518 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4518.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x4518.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[5];
IkReal x4519=((-1.0)*r01);
CheckValue<IkReal> x4522 = IKatan2WithCheck(IkReal(x4519),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4522.valid){
continue;
}
IkReal x4520=((1.0)*(x4522.value));
IkReal x4521=x4515;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst112;
cj15=gconst113;
j15=((3.14159265)+(((-1.0)*x4520)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4520)));
IkReal gconst112=(x4519*x4521);
IkReal gconst113=((1.0)*r00*x4521);
j14eval[0]=0;
j14eval[1]=cj10;
j14eval[2]=r22;
j14eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j14eval[4]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  || IKabs(j14eval[4]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x4523=((-1.0)*r01);
CheckValue<IkReal> x4526 = IKatan2WithCheck(IkReal(x4523),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4526.valid){
continue;
}
IkReal x4524=((1.0)*(x4526.value));
IkReal x4525=x4515;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst112;
cj15=gconst113;
j15=((3.14159265)+(((-1.0)*x4524)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4524)));
IkReal gconst112=(x4523*x4525);
IkReal gconst113=((1.0)*r00*x4525);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x4527=((-1.0)*r01);
CheckValue<IkReal> x4530 = IKatan2WithCheck(IkReal(x4527),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4530.valid){
continue;
}
IkReal x4528=((1.0)*(x4530.value));
IkReal x4529=x4515;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj15=gconst112;
cj15=gconst113;
j15=((3.14159265)+(((-1.0)*x4528)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4528)));
IkReal gconst112=(x4527*x4529);
IkReal gconst113=((1.0)*r00*x4529);
IkReal x4531=r02*r02;
IkReal x4532=(r12*sj10);
IkReal x4533=x4515;
IkReal x4534=(cj10*x4533);
j14eval[0]=((IKabs(((((-1.0)*x4534))+((x4531*x4534))+((r02*x4532*x4533)))))+(IKabs(((((-1.0)*x4532))+(((-1.0)*cj10*r02))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4535=((1.0)*gconst112);
CheckValue<IkReal> x4536=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4535))+(((-1.0)*gconst113*r21)))),-1);
if(!x4536.valid){
continue;
}
CheckValue<IkReal> x4537 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x4535))+(((-1.0)*r11*sj10*x4535))+((cj10*gconst113*r00))+((gconst113*r10*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4537.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4536.value)))+(x4537.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4538=IKsin(j14);
IkReal x4539=IKcos(j14);
IkReal x4540=((1.0)*cj11);
IkReal x4541=((1.0)*sj10);
IkReal x4542=(gconst113*r10);
IkReal x4543=(gconst113*r00);
IkReal x4544=(cj12*sj11);
IkReal x4545=(gconst113*r20);
IkReal x4546=((1.0)*x4539);
IkReal x4547=(gconst112*x4539);
IkReal x4548=((1.0)*x4538);
IkReal x4549=(gconst112*x4538);
evalcond[0]=((((-1.0)*r22*x4546))+(((-1.0)*x4545*x4548))+((r21*x4549)));
evalcond[1]=((((-1.0)*x4542*x4548))+(((-1.0)*r12*x4546))+cj10+((r11*x4549)));
evalcond[2]=((((-1.0)*r02*x4546))+((r01*x4549))+(((-1.0)*x4543*x4548))+(((-1.0)*x4541)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x4540))+(((-1.0)*x4545*x4546))+((r22*x4538))+((r21*x4547)));
evalcond[4]=(((r01*x4547))+(((-1.0)*cj10*x4544))+(((-1.0)*cj10*sj12*x4540))+((r02*x4538))+(((-1.0)*x4543*x4546)));
evalcond[5]=(((r12*x4538))+(((-1.0)*x4542*x4546))+(((-1.0)*x4541*x4544))+((r11*x4547))+(((-1.0)*sj10*sj12*x4540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4550=((1.0)*gconst113);
CheckValue<IkReal> x4551=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4550))+(((-1.0)*gconst112*r10)))),-1);
if(!x4551.valid){
continue;
}
CheckValue<IkReal> x4552 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst112*r21*sj10))+(((-1.0)*r20*sj10*x4550)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4552.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4551.value)))+(x4552.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4553=IKsin(j14);
IkReal x4554=IKcos(j14);
IkReal x4555=((1.0)*cj11);
IkReal x4556=((1.0)*sj10);
IkReal x4557=(gconst113*r10);
IkReal x4558=(gconst113*r00);
IkReal x4559=(cj12*sj11);
IkReal x4560=(gconst113*r20);
IkReal x4561=((1.0)*x4554);
IkReal x4562=(gconst112*x4554);
IkReal x4563=((1.0)*x4553);
IkReal x4564=(gconst112*x4553);
evalcond[0]=(((r21*x4564))+(((-1.0)*r22*x4561))+(((-1.0)*x4560*x4563)));
evalcond[1]=(((r11*x4564))+cj10+(((-1.0)*r12*x4561))+(((-1.0)*x4557*x4563)));
evalcond[2]=((((-1.0)*x4556))+(((-1.0)*r02*x4561))+(((-1.0)*x4558*x4563))+((r01*x4564)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x4555))+((r21*x4562))+((r22*x4553))+(((-1.0)*x4560*x4561)));
evalcond[4]=((((-1.0)*cj10*sj12*x4555))+((r02*x4553))+(((-1.0)*x4558*x4561))+(((-1.0)*cj10*x4559))+((r01*x4562)));
evalcond[5]=((((-1.0)*x4556*x4559))+((r11*x4562))+(((-1.0)*sj10*sj12*x4555))+((r12*x4553))+(((-1.0)*x4557*x4561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4565=((1.0)*gconst113);
CheckValue<IkReal> x4566=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4565))+(((-1.0)*gconst112*r00)))),-1);
if(!x4566.valid){
continue;
}
CheckValue<IkReal> x4567 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x4565))+((cj10*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4567.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4566.value)))+(x4567.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4568=IKsin(j14);
IkReal x4569=IKcos(j14);
IkReal x4570=((1.0)*cj11);
IkReal x4571=((1.0)*sj10);
IkReal x4572=(gconst113*r10);
IkReal x4573=(gconst113*r00);
IkReal x4574=(cj12*sj11);
IkReal x4575=(gconst113*r20);
IkReal x4576=((1.0)*x4569);
IkReal x4577=(gconst112*x4569);
IkReal x4578=((1.0)*x4568);
IkReal x4579=(gconst112*x4568);
evalcond[0]=((((-1.0)*x4575*x4578))+((r21*x4579))+(((-1.0)*r22*x4576)));
evalcond[1]=(((r11*x4579))+cj10+(((-1.0)*x4572*x4578))+(((-1.0)*r12*x4576)));
evalcond[2]=((((-1.0)*x4571))+(((-1.0)*r02*x4576))+((r01*x4579))+(((-1.0)*x4573*x4578)));
evalcond[3]=(((sj11*sj12))+((r22*x4568))+(((-1.0)*x4575*x4576))+(((-1.0)*cj12*x4570))+((r21*x4577)));
evalcond[4]=((((-1.0)*cj10*sj12*x4570))+((r02*x4568))+((r01*x4577))+(((-1.0)*cj10*x4574))+(((-1.0)*x4573*x4576)));
evalcond[5]=((((-1.0)*x4571*x4574))+((r12*x4568))+((r11*x4577))+(((-1.0)*x4572*x4576))+(((-1.0)*sj10*sj12*x4570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x4580=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x4580;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x4580);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x4581=((1.0)*cj15);
IkReal x4582=((((-1.0)*r11*x4581))+(((-1.0)*r10*sj15)));
j14eval[0]=x4582;
j14eval[1]=IKsign(x4582);
j14eval[2]=((IKabs(r22))+(IKabs((((r21*sj15))+(((-1.0)*r20*x4581))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x4583=cj15*cj15;
IkReal x4584=r01*r01;
IkReal x4585=(cj15*r00);
IkReal x4586=(r01*sj15);
IkReal x4587=(x4584+(((-1.0)*x4583*x4584))+(r02*r02)+(((-2.0)*x4585*x4586))+((x4583*(r00*r00))));
j14eval[0]=x4587;
j14eval[1]=((IKabs(r02))+(IKabs((x4586+(((-1.0)*x4585))))));
j14eval[2]=IKsign(x4587);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4588=cj15*cj15;
IkReal x4589=r01*r01;
IkReal x4590=(r01*sj15);
IkReal x4591=(cj15*r00);
CheckValue<IkReal> x4592=IKPowWithIntegerCheck(IKsign((x4589+((x4588*(r00*r00)))+(((-1.0)*x4588*x4589))+(((-2.0)*x4590*x4591))+(r02*r02))),-1);
if(!x4592.valid){
continue;
}
CheckValue<IkReal> x4593 = IKatan2WithCheck(IkReal((x4590+(((-1.0)*x4591)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4593.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4592.value)))+(x4593.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4594=IKcos(j14);
IkReal x4595=IKsin(j14);
IkReal x4596=((1.0)*cj11);
IkReal x4597=(cj15*r20);
IkReal x4598=(cj15*r10);
IkReal x4599=(cj15*r00);
IkReal x4600=((1.0)*x4594);
IkReal x4601=(sj15*x4594);
IkReal x4602=((1.0)*x4595);
IkReal x4603=(sj15*x4595);
evalcond[0]=(((r01*x4601))+((r02*x4595))+(((-1.0)*x4599*x4600)));
evalcond[1]=(((r21*x4603))+(((-1.0)*x4597*x4602))+(((-1.0)*r22*x4600)));
evalcond[2]=(((r11*x4603))+(((-1.0)*r12*x4600))+(((-1.0)*x4598*x4602)));
evalcond[3]=((-1.0)+((r01*x4603))+(((-1.0)*r02*x4600))+(((-1.0)*x4599*x4602)));
evalcond[4]=(((sj11*sj12))+((r22*x4595))+((r21*x4601))+(((-1.0)*x4597*x4600))+(((-1.0)*cj12*x4596)));
evalcond[5]=(((r11*x4601))+(((-1.0)*sj12*x4596))+(((-1.0)*cj12*sj11))+(((-1.0)*x4598*x4600))+((r12*x4595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4604=((1.0)*cj15);
CheckValue<IkReal> x4605=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4604))+(((-1.0)*r10*sj15)))),-1);
if(!x4605.valid){
continue;
}
CheckValue<IkReal> x4606 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4604))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4606.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4605.value)))+(x4606.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4607=IKcos(j14);
IkReal x4608=IKsin(j14);
IkReal x4609=((1.0)*cj11);
IkReal x4610=(cj15*r20);
IkReal x4611=(cj15*r10);
IkReal x4612=(cj15*r00);
IkReal x4613=((1.0)*x4607);
IkReal x4614=(sj15*x4607);
IkReal x4615=((1.0)*x4608);
IkReal x4616=(sj15*x4608);
evalcond[0]=((((-1.0)*x4612*x4613))+((r01*x4614))+((r02*x4608)));
evalcond[1]=(((r21*x4616))+(((-1.0)*r22*x4613))+(((-1.0)*x4610*x4615)));
evalcond[2]=(((r11*x4616))+(((-1.0)*r12*x4613))+(((-1.0)*x4611*x4615)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4613))+(((-1.0)*x4612*x4615))+((r01*x4616)));
evalcond[4]=(((sj11*sj12))+((r21*x4614))+((r22*x4608))+(((-1.0)*x4610*x4613))+(((-1.0)*cj12*x4609)));
evalcond[5]=((((-1.0)*sj12*x4609))+((r12*x4608))+(((-1.0)*cj12*sj11))+((r11*x4614))+(((-1.0)*x4611*x4613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x4617=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x4617.valid){
continue;
}
CheckValue<IkReal> x4618 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4618.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4617.value)))+(x4618.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4619=IKcos(j14);
IkReal x4620=IKsin(j14);
IkReal x4621=((1.0)*cj11);
IkReal x4622=(cj15*r20);
IkReal x4623=(cj15*r10);
IkReal x4624=(cj15*r00);
IkReal x4625=((1.0)*x4619);
IkReal x4626=(sj15*x4619);
IkReal x4627=((1.0)*x4620);
IkReal x4628=(sj15*x4620);
evalcond[0]=(((r02*x4620))+((r01*x4626))+(((-1.0)*x4624*x4625)));
evalcond[1]=((((-1.0)*r22*x4625))+((r21*x4628))+(((-1.0)*x4622*x4627)));
evalcond[2]=(((r11*x4628))+(((-1.0)*x4623*x4627))+(((-1.0)*r12*x4625)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4625))+((r01*x4628))+(((-1.0)*x4624*x4627)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x4621))+((r22*x4620))+((r21*x4626))+(((-1.0)*x4622*x4625)));
evalcond[5]=(((r12*x4620))+(((-1.0)*sj12*x4621))+((r11*x4626))+(((-1.0)*cj12*sj11))+(((-1.0)*x4623*x4625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x4629=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x4629;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x4629);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x4630=((1.0)*cj15);
IkReal x4631=((((-1.0)*r21*x4630))+(((-1.0)*r20*sj15)));
j14eval[0]=x4631;
j14eval[1]=IKsign(x4631);
j14eval[2]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*r10*x4630))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x4632=r01*r01;
IkReal x4633=cj15*cj15;
IkReal x4634=(r01*sj15);
IkReal x4635=(cj15*r00);
IkReal x4636=((((-1.0)*x4632))+(((-1.0)*(r02*r02)))+((x4632*x4633))+(((-1.0)*x4633*(r00*r00)))+(((2.0)*x4634*x4635)));
j14eval[0]=x4636;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x4635))+x4634))));
j14eval[2]=IKsign(x4636);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4637=r01*r01;
IkReal x4638=cj15*cj15;
IkReal x4639=(cj15*r00);
IkReal x4640=(r01*sj15);
CheckValue<IkReal> x4641=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4637))+(((-1.0)*(r02*r02)))+(((2.0)*x4639*x4640))+((x4637*x4638))+(((-1.0)*x4638*(r00*r00))))),-1);
if(!x4641.valid){
continue;
}
CheckValue<IkReal> x4642 = IKatan2WithCheck(IkReal(((((-1.0)*x4639))+x4640)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4642.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4641.value)))+(x4642.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4643=IKcos(j14);
IkReal x4644=IKsin(j14);
IkReal x4645=(cj15*r20);
IkReal x4646=(cj15*r10);
IkReal x4647=(cj15*r00);
IkReal x4648=((1.0)*x4643);
IkReal x4649=(sj15*x4643);
IkReal x4650=((1.0)*x4644);
IkReal x4651=(sj15*x4644);
evalcond[0]=(((r02*x4644))+(((-1.0)*x4647*x4648))+((r01*x4649)));
evalcond[1]=((((-1.0)*r22*x4648))+(((-1.0)*x4645*x4650))+((r21*x4651)));
evalcond[2]=(((r11*x4651))+(((-1.0)*r12*x4648))+(((-1.0)*x4646*x4650)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4648))+(((-1.0)*x4647*x4650))+((r01*x4651)));
evalcond[4]=(((r11*x4649))+((r12*x4644))+(((-1.0)*x4646*x4648))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x4645*x4648))+((r21*x4649))+((r22*x4644))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4652=((1.0)*cj15);
CheckValue<IkReal> x4653 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*r10*x4652)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4653.valid){
continue;
}
CheckValue<IkReal> x4654=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4652))+(((-1.0)*r20*sj15)))),-1);
if(!x4654.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4653.value)+(((1.5707963267949)*(x4654.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4655=IKcos(j14);
IkReal x4656=IKsin(j14);
IkReal x4657=(cj15*r20);
IkReal x4658=(cj15*r10);
IkReal x4659=(cj15*r00);
IkReal x4660=((1.0)*x4655);
IkReal x4661=(sj15*x4655);
IkReal x4662=((1.0)*x4656);
IkReal x4663=(sj15*x4656);
evalcond[0]=((((-1.0)*x4659*x4660))+((r01*x4661))+((r02*x4656)));
evalcond[1]=(((r21*x4663))+(((-1.0)*r22*x4660))+(((-1.0)*x4657*x4662)));
evalcond[2]=((((-1.0)*x4658*x4662))+((r11*x4663))+(((-1.0)*r12*x4660)));
evalcond[3]=((1.0)+(((-1.0)*x4659*x4662))+((r01*x4663))+(((-1.0)*r02*x4660)));
evalcond[4]=(((r12*x4656))+(((-1.0)*x4658*x4660))+((r11*x4661))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r21*x4661))+((r22*x4656))+(((-1.0)*cj11*cj12))+(((-1.0)*x4657*x4660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x4664=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x4664.valid){
continue;
}
CheckValue<IkReal> x4665 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4665.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4664.value)))+(x4665.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4666=IKcos(j14);
IkReal x4667=IKsin(j14);
IkReal x4668=(cj15*r20);
IkReal x4669=(cj15*r10);
IkReal x4670=(cj15*r00);
IkReal x4671=((1.0)*x4666);
IkReal x4672=(sj15*x4666);
IkReal x4673=((1.0)*x4667);
IkReal x4674=(sj15*x4667);
evalcond[0]=(((r02*x4667))+((r01*x4672))+(((-1.0)*x4670*x4671)));
evalcond[1]=(((r21*x4674))+(((-1.0)*r22*x4671))+(((-1.0)*x4668*x4673)));
evalcond[2]=(((r11*x4674))+(((-1.0)*r12*x4671))+(((-1.0)*x4669*x4673)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4671))+((r01*x4674))+(((-1.0)*x4670*x4673)));
evalcond[4]=(((r12*x4667))+((r11*x4672))+(((-1.0)*x4669*x4671))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r21*x4672))+((r22*x4667))+(((-1.0)*x4668*x4671))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x4675=((-1.0)*px);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4675);
rxp1_1=(px*r21);
rxp1_2=(r11*x4675);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x4676=((-1.0)*px);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4676);
rxp1_1=(px*r21);
rxp1_2=(r11*x4676);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=((((-1.0)*cj15*r20))+((r21*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x4677=((-1.0)*px);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4677);
rxp1_1=(px*r21);
rxp1_2=(r11*x4677);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=(((r11*sj15))+(((-1.0)*cj15*r10)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x4680=IKPowWithIntegerCheck((((r11*sj15))+(((-1.0)*cj15*r10))),-1);
if(!x4680.valid){
continue;
}
IkReal x4678=x4680.value;
IkReal x4679=(sj10*x4678);
cj14array[0]=(((cj12*sj11*x4679))+((cj11*sj12*x4679)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x4681=IKsin(j14);
IkReal x4682=IKcos(j14);
IkReal x4683=(sj15*x4681);
IkReal x4684=((1.0)*x4682);
IkReal x4685=((1.0)*cj15*x4681);
evalcond[0]=(r02*x4681);
evalcond[1]=((((-1.0)*r02*x4684))+(((-1.0)*sj10)));
evalcond[2]=(((r21*x4683))+(((-1.0)*r20*x4685)));
evalcond[3]=(((r11*x4683))+(((-1.0)*r10*x4685)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj15*r20*x4684))+(((-1.0)*cj11*cj12))+((r21*sj15*x4682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x4687=IKPowWithIntegerCheck(((((-1.0)*cj15*r20))+((r21*sj15))),-1);
if(!x4687.valid){
continue;
}
IkReal x4686=x4687.value;
cj14array[0]=(((cj11*cj12*x4686))+(((-1.0)*sj11*sj12*x4686)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x4688=IKsin(j14);
IkReal x4689=IKcos(j14);
IkReal x4690=(cj15*r10);
IkReal x4691=((1.0)*sj10);
IkReal x4692=(sj15*x4688);
IkReal x4693=((1.0)*x4689);
IkReal x4694=((1.0)*x4688);
evalcond[0]=(r02*x4688);
evalcond[1]=((((-1.0)*r02*x4693))+(((-1.0)*x4691)));
evalcond[2]=(((r21*x4692))+(((-1.0)*cj15*r20*x4694)));
evalcond[3]=((((-1.0)*x4690*x4694))+((r11*x4692)));
evalcond[4]=((((-1.0)*cj12*sj11*x4691))+(((-1.0)*x4690*x4693))+((r11*sj15*x4689))+(((-1.0)*cj11*sj12*x4691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x4695=IKPowWithIntegerCheck(r02,-1);
if(!x4695.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x4695.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x4696=IKsin(j14);
IkReal x4697=IKcos(j14);
IkReal x4698=((1.0)*cj15);
IkReal x4699=((1.0)*cj11);
IkReal x4700=(sj15*x4696);
IkReal x4701=(sj15*x4697);
evalcond[0]=(r02*x4696);
evalcond[1]=((((-1.0)*r20*x4696*x4698))+((r21*x4700)));
evalcond[2]=((((-1.0)*r10*x4696*x4698))+((r11*x4700)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x4699))+((r21*x4701))+(((-1.0)*r20*x4697*x4698)));
evalcond[4]=((((-1.0)*r10*x4697*x4698))+(((-1.0)*cj12*sj10*sj11))+((r11*x4701))+(((-1.0)*sj10*sj12*x4699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4702=((1.0)*sj15);
CheckValue<IkReal> x4703=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj15*r21))+(((-1.0)*r20*x4702)))),-1);
if(!x4703.valid){
continue;
}
CheckValue<IkReal> x4704 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((cj15*r10*sj10))+(((-1.0)*r11*sj10*x4702))+(((-1.0)*cj10*r01*x4702))+((cj10*cj15*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4704.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4703.value)))+(x4704.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4705=IKsin(j14);
IkReal x4706=IKcos(j14);
IkReal x4707=((1.0)*cj11);
IkReal x4708=(cj15*r20);
IkReal x4709=((1.0)*sj10);
IkReal x4710=(cj15*r10);
IkReal x4711=(cj12*sj11);
IkReal x4712=(cj15*r00);
IkReal x4713=((1.0)*x4706);
IkReal x4714=(sj15*x4706);
IkReal x4715=((1.0)*x4705);
IkReal x4716=(sj15*x4705);
evalcond[0]=((((-1.0)*r22*x4713))+((r21*x4716))+(((-1.0)*x4708*x4715)));
evalcond[1]=((((-1.0)*x4710*x4715))+cj10+(((-1.0)*r12*x4713))+((r11*x4716)));
evalcond[2]=((((-1.0)*x4712*x4715))+(((-1.0)*r02*x4713))+((r01*x4716))+(((-1.0)*x4709)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x4707))+((r21*x4714))+(((-1.0)*x4708*x4713))+((r22*x4705)));
evalcond[4]=((((-1.0)*x4712*x4713))+((r01*x4714))+(((-1.0)*cj10*x4711))+(((-1.0)*cj10*sj12*x4707))+((r02*x4705)));
evalcond[5]=((((-1.0)*x4709*x4711))+(((-1.0)*x4710*x4713))+(((-1.0)*sj10*sj12*x4707))+((r11*x4714))+((r12*x4705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4717=((1.0)*cj15);
CheckValue<IkReal> x4718=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4717))+(((-1.0)*r10*sj15)))),-1);
if(!x4718.valid){
continue;
}
CheckValue<IkReal> x4719 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x4717))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4719.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4718.value)))+(x4719.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4720=IKsin(j14);
IkReal x4721=IKcos(j14);
IkReal x4722=((1.0)*cj11);
IkReal x4723=(cj15*r20);
IkReal x4724=((1.0)*sj10);
IkReal x4725=(cj15*r10);
IkReal x4726=(cj12*sj11);
IkReal x4727=(cj15*r00);
IkReal x4728=((1.0)*x4721);
IkReal x4729=(sj15*x4721);
IkReal x4730=((1.0)*x4720);
IkReal x4731=(sj15*x4720);
evalcond[0]=((((-1.0)*x4723*x4730))+((r21*x4731))+(((-1.0)*r22*x4728)));
evalcond[1]=(((r11*x4731))+(((-1.0)*r12*x4728))+(((-1.0)*x4725*x4730))+cj10);
evalcond[2]=((((-1.0)*x4724))+(((-1.0)*x4727*x4730))+(((-1.0)*r02*x4728))+((r01*x4731)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x4723*x4728))+((r21*x4729))+(((-1.0)*cj12*x4722))+((r22*x4720)));
evalcond[4]=((((-1.0)*cj10*sj12*x4722))+(((-1.0)*x4727*x4728))+((r02*x4720))+(((-1.0)*cj10*x4726))+((r01*x4729)));
evalcond[5]=(((r11*x4729))+(((-1.0)*x4724*x4726))+(((-1.0)*x4725*x4728))+(((-1.0)*sj10*sj12*x4722))+((r12*x4720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4732=((1.0)*cj15);
CheckValue<IkReal> x4733 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x4732))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4733.valid){
continue;
}
CheckValue<IkReal> x4734=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4732))+(((-1.0)*r00*sj15)))),-1);
if(!x4734.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4733.value)+(((1.5707963267949)*(x4734.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4735=IKsin(j14);
IkReal x4736=IKcos(j14);
IkReal x4737=((1.0)*cj11);
IkReal x4738=(cj15*r20);
IkReal x4739=((1.0)*sj10);
IkReal x4740=(cj15*r10);
IkReal x4741=(cj12*sj11);
IkReal x4742=(cj15*r00);
IkReal x4743=((1.0)*x4736);
IkReal x4744=(sj15*x4736);
IkReal x4745=((1.0)*x4735);
IkReal x4746=(sj15*x4735);
evalcond[0]=((((-1.0)*r22*x4743))+((r21*x4746))+(((-1.0)*x4738*x4745)));
evalcond[1]=(((r11*x4746))+(((-1.0)*r12*x4743))+cj10+(((-1.0)*x4740*x4745)));
evalcond[2]=(((r01*x4746))+(((-1.0)*x4739))+(((-1.0)*x4742*x4745))+(((-1.0)*r02*x4743)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x4737))+((r22*x4735))+((r21*x4744))+(((-1.0)*x4738*x4743)));
evalcond[4]=((((-1.0)*cj10*sj12*x4737))+((r01*x4744))+((r02*x4735))+(((-1.0)*cj10*x4741))+(((-1.0)*x4742*x4743)));
evalcond[5]=(((r11*x4744))+(((-1.0)*x4740*x4743))+(((-1.0)*sj10*sj12*x4737))+(((-1.0)*x4739*x4741))+((r12*x4735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x4747=((1.0)*cj15);
IkReal x4748=((1.0)*sj15);
IkReal x4749=((((-1.0)*cj11*sj12))+(((-1.0)*cj12*sj11)));
j10eval[0]=x4749;
j10eval[1]=IKsign(x4749);
j10eval[2]=((IKabs(((((-1.0)*r00*x4748))+(((-1.0)*r01*x4747)))))+(IKabs(((((-1.0)*r10*x4748))+(((-1.0)*r11*x4747))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x4750=r21*r21;
IkReal x4751=cj15*cj15;
IkReal x4752=(cj12*sj11);
IkReal x4753=(cj15*r20);
IkReal x4754=(r21*sj15);
IkReal x4755=(cj11*sj12);
IkReal x4756=((((2.0)*x4753*x4754))+((x4750*x4751))+(((-1.0)*(r22*r22)))+(((-1.0)*x4751*(r20*r20)))+(((-1.0)*x4750)));
j14eval[0]=x4756;
j14eval[1]=((IKabs(((((-1.0)*x4752*x4753))+((x4754*x4755))+(((-1.0)*x4753*x4755))+((x4752*x4754)))))+(IKabs((((r22*x4752))+((r22*x4755))))));
j14eval[2]=IKsign(x4756);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=0;
cj13=1.0;
j13=0;
IkReal x4757=cj11*cj11;
IkReal x4758=(cj12*sj12);
IkReal x4759=(cj12*sj11);
IkReal x4760=(cj11*sj11);
j10eval[0]=((((-2.0)*cj11*cj12*x4759))+(((-2.0)*x4757*x4758))+x4758+x4760+(((-1.14255568581477)*cj11*x4759))+(((-1.14255568581477)*sj12*x4757)));
j10eval[1]=((((-1.0)*cj11*sj12))+(((-1.0)*x4759)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((2.06387083990023)*py))+(((-0.507498115261088)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.06387083990023)*px))+(((0.507498115261088)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.06387083990023)*py))+(((-0.507498115261088)*px))))+IKsqr(((((2.06387083990023)*px))+(((0.507498115261088)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((2.06387083990023)*py))+(((-0.507498115261088)*px))), ((((2.06387083990023)*px))+(((0.507498115261088)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x4761=IKsin(j10);
IkReal x4762=IKcos(j10);
evalcond[0]=((((-1.0)*px))+(((0.4569)*x4762))+(((-0.11235)*x4761)));
evalcond[1]=((((0.11235)*x4762))+(((-1.0)*py))+(((0.4569)*x4761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x4763=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x4763;
j14eval[1]=IKsign(x4763);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x4764=((1.0)*cj15);
IkReal x4765=((((-1.0)*r00*sj15))+(((-1.0)*r01*x4764)));
j14eval[0]=x4765;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x4764))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x4765);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x4766=((1.0)*cj15);
IkReal x4767=((((-1.0)*r00*sj15))+(((-1.0)*r01*x4766)));
j14eval[0]=x4767;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x4766))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x4767);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4768=((1.0)*cj15);
CheckValue<IkReal> x4769 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj10*x4768))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4769.valid){
continue;
}
CheckValue<IkReal> x4770=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x4768)))),-1);
if(!x4770.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4769.value)+(((1.5707963267949)*(x4770.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4771=IKcos(j14);
IkReal x4772=IKsin(j14);
IkReal x4773=((1.0)*sj10);
IkReal x4774=(sj15*x4772);
IkReal x4775=((1.0)*x4771);
IkReal x4776=(sj15*x4771);
IkReal x4777=((1.0)*cj15*x4772);
evalcond[0]=((((-1.0)*cj15*r20*x4775))+((r21*x4776))+((r22*x4772)));
evalcond[1]=((((-1.0)*r20*x4777))+(((-1.0)*r22*x4775))+((r21*x4774)));
evalcond[2]=(((r11*x4774))+(((-1.0)*r12*x4775))+cj10+(((-1.0)*r10*x4777)));
evalcond[3]=(((r01*x4776))+(((-1.0)*cj15*r00*x4775))+((r02*x4772))+(((-1.0)*cj10)));
evalcond[4]=(((r11*x4776))+((r12*x4772))+(((-1.0)*x4773))+(((-1.0)*cj15*r10*x4775)));
evalcond[5]=(((r01*x4774))+(((-1.0)*r00*x4777))+(((-1.0)*x4773))+(((-1.0)*r02*x4775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4778=((1.0)*cj15);
CheckValue<IkReal> x4779=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4778))+(((-1.0)*r00*sj15)))),-1);
if(!x4779.valid){
continue;
}
CheckValue<IkReal> x4780 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x4778))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4780.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4779.value)))+(x4780.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4781=IKcos(j14);
IkReal x4782=IKsin(j14);
IkReal x4783=((1.0)*sj10);
IkReal x4784=(sj15*x4782);
IkReal x4785=((1.0)*x4781);
IkReal x4786=(sj15*x4781);
IkReal x4787=((1.0)*cj15*x4782);
evalcond[0]=(((r22*x4782))+(((-1.0)*cj15*r20*x4785))+((r21*x4786)));
evalcond[1]=((((-1.0)*r20*x4787))+(((-1.0)*r22*x4785))+((r21*x4784)));
evalcond[2]=(((r11*x4784))+cj10+(((-1.0)*r10*x4787))+(((-1.0)*r12*x4785)));
evalcond[3]=(((r02*x4782))+(((-1.0)*cj15*r00*x4785))+((r01*x4786))+(((-1.0)*cj10)));
evalcond[4]=(((r12*x4782))+((r11*x4786))+(((-1.0)*cj15*r10*x4785))+(((-1.0)*x4783)));
evalcond[5]=(((r01*x4784))+(((-1.0)*r00*x4787))+(((-1.0)*r02*x4785))+(((-1.0)*x4783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x4788=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x4788.valid){
continue;
}
CheckValue<IkReal> x4789 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4789.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4788.value)))+(x4789.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4790=IKcos(j14);
IkReal x4791=IKsin(j14);
IkReal x4792=((1.0)*sj10);
IkReal x4793=(sj15*x4791);
IkReal x4794=((1.0)*x4790);
IkReal x4795=(sj15*x4790);
IkReal x4796=((1.0)*cj15*x4791);
evalcond[0]=(((r21*x4795))+(((-1.0)*cj15*r20*x4794))+((r22*x4791)));
evalcond[1]=(((r21*x4793))+(((-1.0)*r22*x4794))+(((-1.0)*r20*x4796)));
evalcond[2]=(cj10+(((-1.0)*r12*x4794))+((r11*x4793))+(((-1.0)*r10*x4796)));
evalcond[3]=(((r01*x4795))+(((-1.0)*cj15*r00*x4794))+((r02*x4791))+(((-1.0)*cj10)));
evalcond[4]=((((-1.0)*x4792))+((r11*x4795))+((r12*x4791))+(((-1.0)*cj15*r10*x4794)));
evalcond[5]=(((r01*x4793))+(((-1.0)*r02*x4794))+(((-1.0)*x4792))+(((-1.0)*r00*x4796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-8.29354345611924)*px))+(((2.24409186529617)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.24409186529617)*px))+(((8.29354345611924)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.29354345611924)*px))+(((2.24409186529617)*py))))+IKsqr(((((2.24409186529617)*px))+(((8.29354345611924)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-8.29354345611924)*px))+(((2.24409186529617)*py))), ((((2.24409186529617)*px))+(((8.29354345611924)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x4797=IKcos(j10);
IkReal x4798=IKsin(j10);
evalcond[0]=((((0.0304)*x4797))+(((-1.0)*px))+(((-0.11235)*x4798)));
evalcond[1]=((((0.0304)*x4798))+(((-1.0)*py))+(((0.11235)*x4797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x4799=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x4799;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x4799);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x4800=((1.0)*cj15);
IkReal x4801=((((-1.0)*r11*x4800))+(((-1.0)*r10*sj15)));
j14eval[0]=x4801;
j14eval[1]=IKsign(x4801);
j14eval[2]=((IKabs((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x4800)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x4802=cj15*cj15;
IkReal x4803=(cj15*sj15);
IkReal x4804=(r01*r21);
IkReal x4805=((1.0)*r20);
IkReal x4806=((((-1.0)*r02*r22))+(((-1.0)*r00*x4802*x4805))+((r01*r20*x4803))+((r00*r21*x4803))+(((-1.0)*x4804))+((x4802*x4804)));
j14eval[0]=x4806;
j14eval[1]=((IKabs(((((-1.0)*cj10*cj15*x4805))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x4806);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4807=cj15*cj15;
IkReal x4808=(cj15*sj15);
IkReal x4809=(r01*r21);
IkReal x4810=((1.0)*r20);
CheckValue<IkReal> x4811=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((r01*r20*x4808))+((r00*r21*x4808))+(((-1.0)*x4809))+((x4807*x4809))+(((-1.0)*r00*x4807*x4810)))),-1);
if(!x4811.valid){
continue;
}
CheckValue<IkReal> x4812 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*x4810))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4812.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4811.value)))+(x4812.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4813=IKcos(j14);
IkReal x4814=IKsin(j14);
IkReal x4815=(cj15*r00);
IkReal x4816=(cj15*r10);
IkReal x4817=(cj15*r20);
IkReal x4818=(sj15*x4814);
IkReal x4819=((1.0)*x4813);
IkReal x4820=(sj15*x4813);
IkReal x4821=((1.0)*x4814);
evalcond[0]=(((r21*x4820))+(((-1.0)*x4817*x4819))+((r22*x4814)));
evalcond[1]=(((r21*x4818))+(((-1.0)*x4817*x4821))+(((-1.0)*r22*x4819)));
evalcond[2]=((((-1.0)*x4815*x4819))+((r02*x4814))+cj10+((r01*x4820)));
evalcond[3]=(((r11*x4820))+(((-1.0)*x4816*x4819))+((r12*x4814))+sj10);
evalcond[4]=(((r11*x4818))+(((-1.0)*x4816*x4821))+cj10+(((-1.0)*r12*x4819)));
evalcond[5]=((((-1.0)*x4815*x4821))+(((-1.0)*r02*x4819))+(((-1.0)*sj10))+((r01*x4818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4822=((1.0)*cj15);
CheckValue<IkReal> x4823=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj15))+(((-1.0)*r11*x4822)))),-1);
if(!x4823.valid){
continue;
}
CheckValue<IkReal> x4824 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*r20*x4822))+((cj10*r21*sj15)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4824.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4823.value)))+(x4824.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4825=IKcos(j14);
IkReal x4826=IKsin(j14);
IkReal x4827=(cj15*r00);
IkReal x4828=(cj15*r10);
IkReal x4829=(cj15*r20);
IkReal x4830=(sj15*x4826);
IkReal x4831=((1.0)*x4825);
IkReal x4832=(sj15*x4825);
IkReal x4833=((1.0)*x4826);
evalcond[0]=(((r22*x4826))+(((-1.0)*x4829*x4831))+((r21*x4832)));
evalcond[1]=((((-1.0)*x4829*x4833))+(((-1.0)*r22*x4831))+((r21*x4830)));
evalcond[2]=(((r01*x4832))+((r02*x4826))+cj10+(((-1.0)*x4827*x4831)));
evalcond[3]=(((r11*x4832))+((r12*x4826))+sj10+(((-1.0)*x4828*x4831)));
evalcond[4]=(((r11*x4830))+(((-1.0)*r12*x4831))+cj10+(((-1.0)*x4828*x4833)));
evalcond[5]=(((r01*x4830))+(((-1.0)*r02*x4831))+(((-1.0)*x4827*x4833))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x4834 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4834.valid){
continue;
}
CheckValue<IkReal> x4835=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x4835.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4834.value)+(((1.5707963267949)*(x4835.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4836=IKcos(j14);
IkReal x4837=IKsin(j14);
IkReal x4838=(cj15*r00);
IkReal x4839=(cj15*r10);
IkReal x4840=(cj15*r20);
IkReal x4841=(sj15*x4837);
IkReal x4842=((1.0)*x4836);
IkReal x4843=(sj15*x4836);
IkReal x4844=((1.0)*x4837);
evalcond[0]=((((-1.0)*x4840*x4842))+((r22*x4837))+((r21*x4843)));
evalcond[1]=((((-1.0)*x4840*x4844))+((r21*x4841))+(((-1.0)*r22*x4842)));
evalcond[2]=((((-1.0)*x4838*x4842))+cj10+((r01*x4843))+((r02*x4837)));
evalcond[3]=(((r12*x4837))+(((-1.0)*x4839*x4842))+((r11*x4843))+sj10);
evalcond[4]=((((-1.0)*x4839*x4844))+((r11*x4841))+cj10+(((-1.0)*r12*x4842)));
evalcond[5]=((((-1.0)*x4838*x4844))+(((-1.0)*r02*x4842))+(((-1.0)*sj10))+((r01*x4841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs((((cj15*r11))+((r10*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*r01))+((r00*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj15*r11))+((r10*sj15))))+IKsqr((((cj15*r01))+((r00*sj15))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((cj15*r11))+((r10*sj15))), (((cj15*r01))+((r00*sj15))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x4845=IKsin(j10);
IkReal x4846=IKcos(j10);
IkReal x4847=((0.08535)*sj15);
IkReal x4848=(cj15*r11);
IkReal x4849=(cj15*r01);
evalcond[0]=(((r00*sj15))+(((-1.0)*x4846))+x4849);
evalcond[1]=(((r10*sj15))+(((-1.0)*x4845))+x4848);
evalcond[2]=((((-1.0)*r00*x4847))+(((-1.0)*px))+(((-0.08535)*x4849))+(((-0.11235)*x4845)));
evalcond[3]=((((-1.0)*py))+(((-0.08535)*x4848))+(((0.11235)*x4846))+(((-1.0)*r10*x4847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x4850=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x4850;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj15*r00))+((r01*sj15))))));
j14eval[2]=IKsign(x4850);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x4851=((1.0)*cj15);
IkReal x4852=((((-1.0)*r01*x4851))+(((-1.0)*r00*sj15)));
j14eval[0]=x4852;
j14eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x4851))+((r11*sj15))))));
j14eval[2]=IKsign(x4852);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x4853=cj15*cj15;
IkReal x4854=(r01*r11);
IkReal x4855=(r01*sj15);
IkReal x4856=(cj15*r00);
IkReal x4857=(((x4853*x4854))+(((-1.0)*r02*r12))+(((-1.0)*r00*r10*x4853))+(((-1.0)*x4854))+((cj15*r10*x4855))+((r11*sj15*x4856)));
j14eval[0]=x4857;
j14eval[1]=((IKabs((cj10*r02)))+(IKabs(((((-1.0)*cj10*x4856))+((cj10*x4855))))));
j14eval[2]=IKsign(x4857);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4858=cj15*cj15;
IkReal x4859=(cj15*r00);
IkReal x4860=(r01*sj15);
IkReal x4861=(r01*r11);
CheckValue<IkReal> x4862 = IKatan2WithCheck(IkReal((((cj10*x4860))+(((-1.0)*cj10*x4859)))),IkReal(((-1.0)*cj10*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4862.valid){
continue;
}
CheckValue<IkReal> x4863=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+(((-1.0)*r00*r10*x4858))+(((-1.0)*x4861))+((cj15*r10*x4860))+((r11*sj15*x4859))+((x4858*x4861)))),-1);
if(!x4863.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4862.value)+(((1.5707963267949)*(x4863.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4864=IKcos(j14);
IkReal x4865=IKsin(j14);
IkReal x4866=(cj15*r00);
IkReal x4867=(cj15*r10);
IkReal x4868=(cj15*r20);
IkReal x4869=(sj15*x4865);
IkReal x4870=((1.0)*x4864);
IkReal x4871=(sj15*x4864);
IkReal x4872=((1.0)*x4865);
evalcond[0]=((((-1.0)*x4866*x4870))+((r01*x4871))+((r02*x4865)));
evalcond[1]=(((r12*x4865))+((r11*x4871))+(((-1.0)*x4867*x4870)));
evalcond[2]=((((-1.0)*x4868*x4872))+(((-1.0)*r22*x4870))+((r21*x4869)));
evalcond[3]=((1.0)+(((-1.0)*x4868*x4870))+((r22*x4865))+((r21*x4871)));
evalcond[4]=(((r11*x4869))+cj10+(((-1.0)*r12*x4870))+(((-1.0)*x4867*x4872)));
evalcond[5]=(((r01*x4869))+(((-1.0)*x4866*x4872))+(((-1.0)*sj10))+(((-1.0)*r02*x4870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4873=((1.0)*cj15);
CheckValue<IkReal> x4874 = IKatan2WithCheck(IkReal((((r11*sj15))+(((-1.0)*r10*x4873)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4874.valid){
continue;
}
CheckValue<IkReal> x4875=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4873))+(((-1.0)*r00*sj15)))),-1);
if(!x4875.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4874.value)+(((1.5707963267949)*(x4875.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4876=IKcos(j14);
IkReal x4877=IKsin(j14);
IkReal x4878=(cj15*r00);
IkReal x4879=(cj15*r10);
IkReal x4880=(cj15*r20);
IkReal x4881=(sj15*x4877);
IkReal x4882=((1.0)*x4876);
IkReal x4883=(sj15*x4876);
IkReal x4884=((1.0)*x4877);
evalcond[0]=(((r02*x4877))+((r01*x4883))+(((-1.0)*x4878*x4882)));
evalcond[1]=(((r11*x4883))+(((-1.0)*x4879*x4882))+((r12*x4877)));
evalcond[2]=((((-1.0)*x4880*x4884))+(((-1.0)*r22*x4882))+((r21*x4881)));
evalcond[3]=((1.0)+(((-1.0)*x4880*x4882))+((r22*x4877))+((r21*x4883)));
evalcond[4]=(((r11*x4881))+(((-1.0)*r12*x4882))+(((-1.0)*x4879*x4884))+cj10);
evalcond[5]=((((-1.0)*r02*x4882))+(((-1.0)*sj10))+((r01*x4881))+(((-1.0)*x4878*x4884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x4885=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x4885.valid){
continue;
}
CheckValue<IkReal> x4886 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r00))+((r01*sj15)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4886.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4885.value)))+(x4886.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4887=IKcos(j14);
IkReal x4888=IKsin(j14);
IkReal x4889=(cj15*r00);
IkReal x4890=(cj15*r10);
IkReal x4891=(cj15*r20);
IkReal x4892=(sj15*x4888);
IkReal x4893=((1.0)*x4887);
IkReal x4894=(sj15*x4887);
IkReal x4895=((1.0)*x4888);
evalcond[0]=(((r02*x4888))+(((-1.0)*x4889*x4893))+((r01*x4894)));
evalcond[1]=(((r11*x4894))+((r12*x4888))+(((-1.0)*x4890*x4893)));
evalcond[2]=(((r21*x4892))+(((-1.0)*x4891*x4895))+(((-1.0)*r22*x4893)));
evalcond[3]=((1.0)+((r21*x4894))+(((-1.0)*x4891*x4893))+((r22*x4888)));
evalcond[4]=(((r11*x4892))+(((-1.0)*r12*x4893))+cj10+(((-1.0)*x4890*x4895)));
evalcond[5]=((((-1.0)*r02*x4893))+(((-1.0)*sj10))+(((-1.0)*x4889*x4895))+((r01*x4892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-3.67051685094268)*py))+(((-1.9337986785623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.67051685094268)*px))+(((1.9337986785623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))))+IKsqr(((((-3.67051685094268)*px))+(((1.9337986785623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))), ((((-3.67051685094268)*px))+(((1.9337986785623)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x4896=IKcos(j10);
IkReal x4897=IKsin(j10);
evalcond[0]=((((-0.21325)*x4896))+(((-0.11235)*x4897))+(((-1.0)*px)));
evalcond[1]=((((-0.21325)*x4897))+(((0.11235)*x4896))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x4898=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x4898;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x4898);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x4899=((1.0)*cj15);
IkReal x4900=((((-1.0)*r11*x4899))+(((-1.0)*r10*sj15)));
j14eval[0]=x4900;
j14eval[1]=IKsign(x4900);
j14eval[2]=((IKabs(((((-1.0)*cj10*r20*x4899))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x4901=cj15*cj15;
IkReal x4902=(cj15*sj15);
IkReal x4903=(r01*r21);
IkReal x4904=((1.0)*r20);
IkReal x4905=((((-1.0)*r02*r22))+(((-1.0)*r00*x4901*x4904))+(((-1.0)*x4903))+((x4901*x4903))+((r00*r21*x4902))+((r01*r20*x4902)));
j14eval[0]=x4905;
j14eval[1]=((IKabs(((((-1.0)*cj10*cj15*x4904))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x4905);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4906=cj15*cj15;
IkReal x4907=(cj15*sj15);
IkReal x4908=(r01*r21);
IkReal x4909=((1.0)*r20);
CheckValue<IkReal> x4910=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*x4908))+(((-1.0)*r00*x4906*x4909))+((r00*r21*x4907))+((x4906*x4908))+((r01*r20*x4907)))),-1);
if(!x4910.valid){
continue;
}
CheckValue<IkReal> x4911 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*x4909))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4911.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4910.value)))+(x4911.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4912=IKcos(j14);
IkReal x4913=IKsin(j14);
IkReal x4914=(cj15*r00);
IkReal x4915=(cj15*r10);
IkReal x4916=(cj15*r20);
IkReal x4917=(sj15*x4913);
IkReal x4918=((1.0)*x4912);
IkReal x4919=(sj15*x4912);
IkReal x4920=((1.0)*x4913);
evalcond[0]=(((r21*x4919))+(((-1.0)*x4916*x4918))+((r22*x4913)));
evalcond[1]=(((r21*x4917))+(((-1.0)*x4916*x4920))+(((-1.0)*r22*x4918)));
evalcond[2]=(((r02*x4913))+cj10+((r01*x4919))+(((-1.0)*x4914*x4918)));
evalcond[3]=((((-1.0)*x4915*x4918))+sj10+((r12*x4913))+((r11*x4919)));
evalcond[4]=((((-1.0)*r12*x4918))+(((-1.0)*x4915*x4920))+cj10+((r11*x4917)));
evalcond[5]=((((-1.0)*r02*x4918))+(((-1.0)*x4914*x4920))+(((-1.0)*sj10))+((r01*x4917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4921=((1.0)*cj15);
CheckValue<IkReal> x4922 = IKatan2WithCheck(IkReal((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x4921)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4922.valid){
continue;
}
CheckValue<IkReal> x4923=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4921))+(((-1.0)*r10*sj15)))),-1);
if(!x4923.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4922.value)+(((1.5707963267949)*(x4923.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4924=IKcos(j14);
IkReal x4925=IKsin(j14);
IkReal x4926=(cj15*r00);
IkReal x4927=(cj15*r10);
IkReal x4928=(cj15*r20);
IkReal x4929=(sj15*x4925);
IkReal x4930=((1.0)*x4924);
IkReal x4931=(sj15*x4924);
IkReal x4932=((1.0)*x4925);
evalcond[0]=(((r22*x4925))+((r21*x4931))+(((-1.0)*x4928*x4930)));
evalcond[1]=(((r21*x4929))+(((-1.0)*r22*x4930))+(((-1.0)*x4928*x4932)));
evalcond[2]=(cj10+(((-1.0)*x4926*x4930))+((r01*x4931))+((r02*x4925)));
evalcond[3]=(sj10+(((-1.0)*x4927*x4930))+((r11*x4931))+((r12*x4925)));
evalcond[4]=(cj10+(((-1.0)*r12*x4930))+(((-1.0)*x4927*x4932))+((r11*x4929)));
evalcond[5]=((((-1.0)*r02*x4930))+(((-1.0)*x4926*x4932))+((r01*x4929))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x4933 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4933.valid){
continue;
}
CheckValue<IkReal> x4934=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x4934.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4933.value)+(((1.5707963267949)*(x4934.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4935=IKcos(j14);
IkReal x4936=IKsin(j14);
IkReal x4937=(cj15*r00);
IkReal x4938=(cj15*r10);
IkReal x4939=(cj15*r20);
IkReal x4940=(sj15*x4936);
IkReal x4941=((1.0)*x4935);
IkReal x4942=(sj15*x4935);
IkReal x4943=((1.0)*x4936);
evalcond[0]=(((r21*x4942))+(((-1.0)*x4939*x4941))+((r22*x4936)));
evalcond[1]=(((r21*x4940))+(((-1.0)*x4939*x4943))+(((-1.0)*r22*x4941)));
evalcond[2]=(((r01*x4942))+(((-1.0)*x4937*x4941))+cj10+((r02*x4936)));
evalcond[3]=(((r12*x4936))+(((-1.0)*x4938*x4941))+((r11*x4942))+sj10);
evalcond[4]=((((-1.0)*x4938*x4943))+((r11*x4940))+(((-1.0)*r12*x4941))+cj10);
evalcond[5]=(((r01*x4940))+(((-1.0)*x4937*x4943))+(((-1.0)*sj10))+(((-1.0)*r02*x4941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x4944=((1.0)*cj15);
IkReal x4945=((1.0)*sj15);
if( IKabs(((((-1.0)*r10*x4945))+(((-1.0)*r11*x4944)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x4945))+(((-1.0)*r01*x4944)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x4945))+(((-1.0)*r11*x4944))))+IKsqr(((((-1.0)*r00*x4945))+(((-1.0)*r01*x4944))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r10*x4945))+(((-1.0)*r11*x4944))), ((((-1.0)*r00*x4945))+(((-1.0)*r01*x4944))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x4946=IKsin(j10);
IkReal x4947=IKcos(j10);
IkReal x4948=((0.08535)*sj15);
IkReal x4949=(cj15*r11);
IkReal x4950=(cj15*r01);
evalcond[0]=(x4950+x4947+((r00*sj15)));
evalcond[1]=(x4946+x4949+((r10*sj15)));
evalcond[2]=((((-0.08535)*x4950))+(((-1.0)*px))+(((-0.11235)*x4946))+(((-1.0)*r00*x4948)));
evalcond[3]=((((-1.0)*r10*x4948))+(((-0.08535)*x4949))+(((-1.0)*py))+(((0.11235)*x4947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x4951=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x4951;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x4951);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x4952=((1.0)*cj15);
IkReal x4953=((((-1.0)*r11*x4952))+(((-1.0)*r10*sj15)));
j14eval[0]=x4953;
j14eval[1]=((IKabs(r02))+(IKabs((((r01*sj15))+(((-1.0)*r00*x4952))))));
j14eval[2]=IKsign(x4953);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x4954=cj15*cj15;
IkReal x4955=(r01*r11);
IkReal x4956=(r01*sj15);
IkReal x4957=(cj15*r00);
IkReal x4958=((((-1.0)*r02*r12))+((x4954*x4955))+(((-1.0)*x4955))+(((-1.0)*r00*r10*x4954))+((cj15*r10*x4956))+((r11*sj15*x4957)));
j14eval[0]=x4958;
j14eval[1]=((IKabs((cj10*r02)))+(IKabs(((((-1.0)*cj10*x4957))+((cj10*x4956))))));
j14eval[2]=IKsign(x4958);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4959=cj15*cj15;
IkReal x4960=(cj15*r00);
IkReal x4961=(r01*sj15);
IkReal x4962=(r01*r11);
CheckValue<IkReal> x4963 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*x4960))+((cj10*x4961)))),IkReal(((-1.0)*cj10*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4963.valid){
continue;
}
CheckValue<IkReal> x4964=IKPowWithIntegerCheck(IKsign((((x4959*x4962))+(((-1.0)*r02*r12))+(((-1.0)*x4962))+(((-1.0)*r00*r10*x4959))+((cj15*r10*x4961))+((r11*sj15*x4960)))),-1);
if(!x4964.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4963.value)+(((1.5707963267949)*(x4964.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4965=IKcos(j14);
IkReal x4966=IKsin(j14);
IkReal x4967=(cj15*r00);
IkReal x4968=(cj15*r10);
IkReal x4969=(cj15*r20);
IkReal x4970=(sj15*x4966);
IkReal x4971=((1.0)*x4965);
IkReal x4972=(sj15*x4965);
IkReal x4973=((1.0)*x4966);
evalcond[0]=(((r02*x4966))+(((-1.0)*x4967*x4971))+((r01*x4972)));
evalcond[1]=((((-1.0)*x4968*x4971))+((r12*x4966))+((r11*x4972)));
evalcond[2]=((((-1.0)*r22*x4971))+((r21*x4970))+(((-1.0)*x4969*x4973)));
evalcond[3]=((-1.0)+((r22*x4966))+((r21*x4972))+(((-1.0)*x4969*x4971)));
evalcond[4]=((((-1.0)*x4968*x4973))+((r11*x4970))+(((-1.0)*r12*x4971))+cj10);
evalcond[5]=((((-1.0)*r02*x4971))+(((-1.0)*sj10))+(((-1.0)*x4967*x4973))+((r01*x4970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x4974=((1.0)*cj15);
CheckValue<IkReal> x4975 = IKatan2WithCheck(IkReal((((r01*sj15))+(((-1.0)*r00*x4974)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4975.valid){
continue;
}
CheckValue<IkReal> x4976=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4974))+(((-1.0)*r10*sj15)))),-1);
if(!x4976.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x4975.value)+(((1.5707963267949)*(x4976.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4977=IKcos(j14);
IkReal x4978=IKsin(j14);
IkReal x4979=(cj15*r00);
IkReal x4980=(cj15*r10);
IkReal x4981=(cj15*r20);
IkReal x4982=(sj15*x4978);
IkReal x4983=((1.0)*x4977);
IkReal x4984=(sj15*x4977);
IkReal x4985=((1.0)*x4978);
evalcond[0]=(((r01*x4984))+((r02*x4978))+(((-1.0)*x4979*x4983)));
evalcond[1]=(((r11*x4984))+((r12*x4978))+(((-1.0)*x4980*x4983)));
evalcond[2]=((((-1.0)*r22*x4983))+((r21*x4982))+(((-1.0)*x4981*x4985)));
evalcond[3]=((-1.0)+((r22*x4978))+((r21*x4984))+(((-1.0)*x4981*x4983)));
evalcond[4]=(((r11*x4982))+cj10+(((-1.0)*r12*x4983))+(((-1.0)*x4980*x4985)));
evalcond[5]=(((r01*x4982))+(((-1.0)*sj10))+(((-1.0)*x4979*x4985))+(((-1.0)*r02*x4983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x4986=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x4986.valid){
continue;
}
CheckValue<IkReal> x4987 = IKatan2WithCheck(IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4987.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4986.value)))+(x4987.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x4988=IKcos(j14);
IkReal x4989=IKsin(j14);
IkReal x4990=(cj15*r00);
IkReal x4991=(cj15*r10);
IkReal x4992=(cj15*r20);
IkReal x4993=(sj15*x4989);
IkReal x4994=((1.0)*x4988);
IkReal x4995=(sj15*x4988);
IkReal x4996=((1.0)*x4989);
evalcond[0]=((((-1.0)*x4990*x4994))+((r01*x4995))+((r02*x4989)));
evalcond[1]=(((r12*x4989))+(((-1.0)*x4991*x4994))+((r11*x4995)));
evalcond[2]=((((-1.0)*r22*x4994))+((r21*x4993))+(((-1.0)*x4992*x4996)));
evalcond[3]=((-1.0)+((r22*x4989))+((r21*x4995))+(((-1.0)*x4992*x4994)));
evalcond[4]=((((-1.0)*r12*x4994))+(((-1.0)*x4991*x4996))+((r11*x4993))+cj10);
evalcond[5]=((((-1.0)*x4990*x4996))+(((-1.0)*r02*x4994))+(((-1.0)*sj10))+((r01*x4993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-1.9337986785623)*px))+(((3.67051685094268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.9337986785623)*py))+(((3.67051685094268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.9337986785623)*px))+(((3.67051685094268)*py))))+IKsqr(((((1.9337986785623)*py))+(((3.67051685094268)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.9337986785623)*px))+(((3.67051685094268)*py))), ((((1.9337986785623)*py))+(((3.67051685094268)*px))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x4997=IKcos(j10);
IkReal x4998=IKsin(j10);
evalcond[0]=((((0.21325)*x4997))+(((-1.0)*px))+(((-0.11235)*x4998)));
evalcond[1]=((((0.21325)*x4998))+(((-1.0)*py))+(((0.11235)*x4997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x4999=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x4999;
j14eval[1]=IKsign(x4999);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x5000=((1.0)*cj15);
IkReal x5001=((((-1.0)*r00*sj15))+(((-1.0)*r01*x5000)));
j14eval[0]=x5001;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x5000))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x5001);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x5002=((1.0)*cj15);
IkReal x5003=((((-1.0)*r00*sj15))+(((-1.0)*r01*x5002)));
j14eval[0]=x5003;
j14eval[1]=((IKabs((((r21*sj10*sj15))+(((-1.0)*r20*sj10*x5002)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x5003);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5004=((1.0)*cj15);
CheckValue<IkReal> x5005=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x5004)))),-1);
if(!x5005.valid){
continue;
}
CheckValue<IkReal> x5006 = IKatan2WithCheck(IkReal((((r21*sj10*sj15))+(((-1.0)*r20*sj10*x5004)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5006.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5005.value)))+(x5006.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5007=IKcos(j14);
IkReal x5008=IKsin(j14);
IkReal x5009=((1.0)*sj10);
IkReal x5010=(sj15*x5008);
IkReal x5011=((1.0)*x5007);
IkReal x5012=(sj15*x5007);
IkReal x5013=((1.0)*cj15*x5008);
evalcond[0]=(((r21*x5012))+(((-1.0)*cj15*r20*x5011))+((r22*x5008)));
evalcond[1]=((((-1.0)*r20*x5013))+(((-1.0)*r22*x5011))+((r21*x5010)));
evalcond[2]=((((-1.0)*r10*x5013))+cj10+(((-1.0)*r12*x5011))+((r11*x5010)));
evalcond[3]=((((-1.0)*cj15*r00*x5011))+((r02*x5008))+(((-1.0)*cj10))+((r01*x5012)));
evalcond[4]=((((-1.0)*cj15*r10*x5011))+((r12*x5008))+((r11*x5012))+(((-1.0)*x5009)));
evalcond[5]=((((-1.0)*r02*x5011))+((r01*x5010))+(((-1.0)*r00*x5013))+(((-1.0)*x5009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5014=((1.0)*cj15);
CheckValue<IkReal> x5015=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x5014)))),-1);
if(!x5015.valid){
continue;
}
CheckValue<IkReal> x5016 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x5014))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5016.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5015.value)))+(x5016.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5017=IKcos(j14);
IkReal x5018=IKsin(j14);
IkReal x5019=((1.0)*sj10);
IkReal x5020=(sj15*x5018);
IkReal x5021=((1.0)*x5017);
IkReal x5022=(sj15*x5017);
IkReal x5023=((1.0)*cj15*x5018);
evalcond[0]=((((-1.0)*cj15*r20*x5021))+((r22*x5018))+((r21*x5022)));
evalcond[1]=((((-1.0)*r20*x5023))+(((-1.0)*r22*x5021))+((r21*x5020)));
evalcond[2]=(((r11*x5020))+(((-1.0)*r12*x5021))+cj10+(((-1.0)*r10*x5023)));
evalcond[3]=(((r02*x5018))+(((-1.0)*cj15*r00*x5021))+((r01*x5022))+(((-1.0)*cj10)));
evalcond[4]=(((r11*x5022))+(((-1.0)*cj15*r10*x5021))+((r12*x5018))+(((-1.0)*x5019)));
evalcond[5]=((((-1.0)*r00*x5023))+(((-1.0)*r02*x5021))+((r01*x5020))+(((-1.0)*x5019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x5024=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x5024.valid){
continue;
}
CheckValue<IkReal> x5025 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5025.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5024.value)))+(x5025.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5026=IKcos(j14);
IkReal x5027=IKsin(j14);
IkReal x5028=((1.0)*sj10);
IkReal x5029=(sj15*x5027);
IkReal x5030=((1.0)*x5026);
IkReal x5031=(sj15*x5026);
IkReal x5032=((1.0)*cj15*x5027);
evalcond[0]=((((-1.0)*cj15*r20*x5030))+((r22*x5027))+((r21*x5031)));
evalcond[1]=((((-1.0)*r22*x5030))+((r21*x5029))+(((-1.0)*r20*x5032)));
evalcond[2]=(((r11*x5029))+(((-1.0)*r12*x5030))+cj10+(((-1.0)*r10*x5032)));
evalcond[3]=(((r02*x5027))+((r01*x5031))+(((-1.0)*cj15*r00*x5030))+(((-1.0)*cj10)));
evalcond[4]=(((r12*x5027))+((r11*x5031))+(((-1.0)*cj15*r10*x5030))+(((-1.0)*x5028)));
evalcond[5]=(((r01*x5029))+(((-1.0)*r02*x5030))+(((-1.0)*x5028))+(((-1.0)*r00*x5032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-0.507498115261088)*px))+(((-2.06387083990023)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.06387083990023)*px))+(((0.507498115261088)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.507498115261088)*px))+(((-2.06387083990023)*py))))+IKsqr(((((-2.06387083990023)*px))+(((0.507498115261088)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-0.507498115261088)*px))+(((-2.06387083990023)*py))), ((((-2.06387083990023)*px))+(((0.507498115261088)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x5033=IKcos(j10);
IkReal x5034=IKsin(j10);
evalcond[0]=((((-0.11235)*x5034))+(((-0.4569)*x5033))+(((-1.0)*px)));
evalcond[1]=((((-0.4569)*x5034))+(((-1.0)*py))+(((0.11235)*x5033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x5035=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x5035;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x5035);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x5036=((1.0)*cj15);
IkReal x5037=((((-1.0)*r11*x5036))+(((-1.0)*r10*sj15)));
j14eval[0]=x5037;
j14eval[1]=IKsign(x5037);
j14eval[2]=((IKabs((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x5036)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x5038=cj15*cj15;
IkReal x5039=(cj15*sj15);
IkReal x5040=(r01*r21);
IkReal x5041=((1.0)*r20);
IkReal x5042=((((-1.0)*r02*r22))+((r01*r20*x5039))+(((-1.0)*r00*x5038*x5041))+((x5038*x5040))+(((-1.0)*x5040))+((r00*r21*x5039)));
j14eval[0]=x5042;
j14eval[1]=((IKabs(((((-1.0)*cj10*cj15*x5041))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x5042);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5043=cj15*cj15;
IkReal x5044=(cj15*sj15);
IkReal x5045=(r01*r21);
IkReal x5046=((1.0)*r20);
CheckValue<IkReal> x5047=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((r00*r21*x5044))+((x5043*x5045))+(((-1.0)*x5045))+(((-1.0)*r00*x5043*x5046))+((r01*r20*x5044)))),-1);
if(!x5047.valid){
continue;
}
CheckValue<IkReal> x5048 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*x5046))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5048.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5047.value)))+(x5048.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5049=IKcos(j14);
IkReal x5050=IKsin(j14);
IkReal x5051=(cj15*r00);
IkReal x5052=(cj15*r10);
IkReal x5053=(cj15*r20);
IkReal x5054=(sj15*x5050);
IkReal x5055=((1.0)*x5049);
IkReal x5056=(sj15*x5049);
IkReal x5057=((1.0)*x5050);
evalcond[0]=(((r21*x5056))+((r22*x5050))+(((-1.0)*x5053*x5055)));
evalcond[1]=(((r21*x5054))+(((-1.0)*r22*x5055))+(((-1.0)*x5053*x5057)));
evalcond[2]=(((r01*x5056))+cj10+((r02*x5050))+(((-1.0)*x5051*x5055)));
evalcond[3]=(((r12*x5050))+((r11*x5056))+sj10+(((-1.0)*x5052*x5055)));
evalcond[4]=((((-1.0)*r12*x5055))+((r11*x5054))+cj10+(((-1.0)*x5052*x5057)));
evalcond[5]=(((r01*x5054))+(((-1.0)*sj10))+(((-1.0)*r02*x5055))+(((-1.0)*x5051*x5057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5058=((1.0)*cj15);
CheckValue<IkReal> x5059 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*r20*x5058))+((cj10*r21*sj15)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5059.valid){
continue;
}
CheckValue<IkReal> x5060=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5058))+(((-1.0)*r10*sj15)))),-1);
if(!x5060.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5059.value)+(((1.5707963267949)*(x5060.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5061=IKcos(j14);
IkReal x5062=IKsin(j14);
IkReal x5063=(cj15*r00);
IkReal x5064=(cj15*r10);
IkReal x5065=(cj15*r20);
IkReal x5066=(sj15*x5062);
IkReal x5067=((1.0)*x5061);
IkReal x5068=(sj15*x5061);
IkReal x5069=((1.0)*x5062);
evalcond[0]=(((r21*x5068))+(((-1.0)*x5065*x5067))+((r22*x5062)));
evalcond[1]=((((-1.0)*r22*x5067))+((r21*x5066))+(((-1.0)*x5065*x5069)));
evalcond[2]=(((r02*x5062))+cj10+((r01*x5068))+(((-1.0)*x5063*x5067)));
evalcond[3]=(sj10+((r11*x5068))+((r12*x5062))+(((-1.0)*x5064*x5067)));
evalcond[4]=(cj10+(((-1.0)*r12*x5067))+((r11*x5066))+(((-1.0)*x5064*x5069)));
evalcond[5]=((((-1.0)*r02*x5067))+(((-1.0)*sj10))+((r01*x5066))+(((-1.0)*x5063*x5069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x5070 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5070.valid){
continue;
}
CheckValue<IkReal> x5071=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x5071.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5070.value)+(((1.5707963267949)*(x5071.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5072=IKcos(j14);
IkReal x5073=IKsin(j14);
IkReal x5074=(cj15*r00);
IkReal x5075=(cj15*r10);
IkReal x5076=(cj15*r20);
IkReal x5077=(sj15*x5073);
IkReal x5078=((1.0)*x5072);
IkReal x5079=(sj15*x5072);
IkReal x5080=((1.0)*x5073);
evalcond[0]=(((r21*x5079))+(((-1.0)*x5076*x5078))+((r22*x5073)));
evalcond[1]=(((r21*x5077))+(((-1.0)*r22*x5078))+(((-1.0)*x5076*x5080)));
evalcond[2]=(cj10+((r02*x5073))+((r01*x5079))+(((-1.0)*x5074*x5078)));
evalcond[3]=(sj10+((r12*x5073))+(((-1.0)*x5075*x5078))+((r11*x5079)));
evalcond[4]=((((-1.0)*x5075*x5080))+cj10+(((-1.0)*r12*x5078))+((r11*x5077)));
evalcond[5]=((((-1.0)*r02*x5078))+(((-1.0)*x5074*x5080))+(((-1.0)*sj10))+((r01*x5077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-2.24409186529617)*py))+(((-8.29354345611924)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.24409186529617)*px))+(((8.29354345611924)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.24409186529617)*py))+(((-8.29354345611924)*px))))+IKsqr(((((-2.24409186529617)*px))+(((8.29354345611924)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-2.24409186529617)*py))+(((-8.29354345611924)*px))), ((((-2.24409186529617)*px))+(((8.29354345611924)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x5081=IKcos(j10);
IkReal x5082=IKsin(j10);
evalcond[0]=((((-0.11235)*x5082))+(((-1.0)*px))+(((-0.0304)*x5081)));
evalcond[1]=((((0.11235)*x5081))+(((-1.0)*py))+(((-0.0304)*x5082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x5083=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x5083;
j14eval[1]=IKsign(x5083);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x5084=((1.0)*cj15);
IkReal x5085=((((-1.0)*r01*x5084))+(((-1.0)*r00*sj15)));
j14eval[0]=x5085;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x5084))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x5085);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x5086=((1.0)*cj15);
IkReal x5087=((((-1.0)*r01*x5086))+(((-1.0)*r00*sj15)));
j14eval[0]=x5087;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x5086))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x5087);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5088=((1.0)*cj15);
CheckValue<IkReal> x5089=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5088))+(((-1.0)*r00*sj15)))),-1);
if(!x5089.valid){
continue;
}
CheckValue<IkReal> x5090 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj10*x5088))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5090.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5089.value)))+(x5090.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5091=IKcos(j14);
IkReal x5092=IKsin(j14);
IkReal x5093=((1.0)*sj10);
IkReal x5094=(sj15*x5092);
IkReal x5095=((1.0)*x5091);
IkReal x5096=(sj15*x5091);
IkReal x5097=((1.0)*cj15*x5092);
evalcond[0]=(((r21*x5096))+(((-1.0)*cj15*r20*x5095))+((r22*x5092)));
evalcond[1]=((((-1.0)*r22*x5095))+((r21*x5094))+(((-1.0)*r20*x5097)));
evalcond[2]=((((-1.0)*r10*x5097))+((r11*x5094))+cj10+(((-1.0)*r12*x5095)));
evalcond[3]=(((r01*x5096))+(((-1.0)*cj10))+(((-1.0)*cj15*r00*x5095))+((r02*x5092)));
evalcond[4]=(((r11*x5096))+((r12*x5092))+(((-1.0)*x5093))+(((-1.0)*cj15*r10*x5095)));
evalcond[5]=((((-1.0)*r00*x5097))+((r01*x5094))+(((-1.0)*x5093))+(((-1.0)*r02*x5095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5098=((1.0)*cj15);
CheckValue<IkReal> x5099=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5098))+(((-1.0)*r00*sj15)))),-1);
if(!x5099.valid){
continue;
}
CheckValue<IkReal> x5100 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x5098))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5100.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5099.value)))+(x5100.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5101=IKcos(j14);
IkReal x5102=IKsin(j14);
IkReal x5103=((1.0)*sj10);
IkReal x5104=(sj15*x5102);
IkReal x5105=((1.0)*x5101);
IkReal x5106=(sj15*x5101);
IkReal x5107=((1.0)*cj15*x5102);
evalcond[0]=(((r22*x5102))+((r21*x5106))+(((-1.0)*cj15*r20*x5105)));
evalcond[1]=((((-1.0)*r22*x5105))+((r21*x5104))+(((-1.0)*r20*x5107)));
evalcond[2]=((((-1.0)*r10*x5107))+cj10+((r11*x5104))+(((-1.0)*r12*x5105)));
evalcond[3]=((((-1.0)*cj15*r00*x5105))+((r01*x5106))+((r02*x5102))+(((-1.0)*cj10)));
evalcond[4]=(((r12*x5102))+(((-1.0)*x5103))+(((-1.0)*cj15*r10*x5105))+((r11*x5106)));
evalcond[5]=((((-1.0)*x5103))+((r01*x5104))+(((-1.0)*r02*x5105))+(((-1.0)*r00*x5107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x5108=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x5108.valid){
continue;
}
CheckValue<IkReal> x5109 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5109.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5108.value)))+(x5109.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5110=IKcos(j14);
IkReal x5111=IKsin(j14);
IkReal x5112=((1.0)*sj10);
IkReal x5113=(sj15*x5111);
IkReal x5114=((1.0)*x5110);
IkReal x5115=(sj15*x5110);
IkReal x5116=((1.0)*cj15*x5111);
evalcond[0]=(((r21*x5115))+((r22*x5111))+(((-1.0)*cj15*r20*x5114)));
evalcond[1]=((((-1.0)*r20*x5116))+(((-1.0)*r22*x5114))+((r21*x5113)));
evalcond[2]=(cj10+((r11*x5113))+(((-1.0)*r12*x5114))+(((-1.0)*r10*x5116)));
evalcond[3]=(((r01*x5115))+(((-1.0)*cj15*r00*x5114))+((r02*x5111))+(((-1.0)*cj10)));
evalcond[4]=((((-1.0)*cj15*r10*x5114))+((r11*x5115))+((r12*x5111))+(((-1.0)*x5112)));
evalcond[5]=(((r01*x5113))+(((-1.0)*r02*x5114))+(((-1.0)*r00*x5116))+(((-1.0)*x5112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5117=((1.0)*cj15);
IkReal x5118=((1.0)*sj15);
if( IKabs(((((-1.0)*r11*x5117))+(((-1.0)*r10*x5118)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5117))+(((-1.0)*r00*x5118)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5117))+(((-1.0)*r10*x5118))))+IKsqr(((((-1.0)*r01*x5117))+(((-1.0)*r00*x5118))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r11*x5117))+(((-1.0)*r10*x5118))), ((((-1.0)*r01*x5117))+(((-1.0)*r00*x5118))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x5119=IKsin(j10);
IkReal x5120=IKcos(j10);
IkReal x5121=((0.08535)*sj15);
IkReal x5122=(cj15*r11);
IkReal x5123=(cj15*r01);
evalcond[0]=(x5120+x5123+((r00*sj15)));
evalcond[1]=(x5119+x5122+((r10*sj15)));
evalcond[2]=((((-1.0)*r00*x5121))+(((-1.0)*px))+(((-0.11235)*x5119))+(((-0.08535)*x5123)));
evalcond[3]=((((0.11235)*x5120))+(((-1.0)*r10*x5121))+(((-1.0)*py))+(((-0.08535)*x5122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x5124=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x5124;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x5124);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x5125=((1.0)*cj15);
IkReal x5126=((((-1.0)*r11*x5125))+(((-1.0)*r10*sj15)));
j14eval[0]=x5126;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x5125))+((r01*sj15))))));
j14eval[2]=IKsign(x5126);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x5127=cj15*cj15;
IkReal x5128=(r01*r11);
IkReal x5129=(r01*sj15);
IkReal x5130=(cj15*r00);
IkReal x5131=((((-1.0)*r02*r12))+((r11*sj15*x5130))+((cj15*r10*x5129))+(((-1.0)*r00*r10*x5127))+(((-1.0)*x5128))+((x5127*x5128)));
j14eval[0]=x5131;
j14eval[1]=((IKabs((cj10*r02)))+(IKabs((((cj10*x5129))+(((-1.0)*cj10*x5130))))));
j14eval[2]=IKsign(x5131);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5132=cj15*cj15;
IkReal x5133=(cj15*r00);
IkReal x5134=(r01*sj15);
IkReal x5135=(r01*r11);
CheckValue<IkReal> x5136=IKPowWithIntegerCheck(IKsign((((x5132*x5135))+(((-1.0)*r02*r12))+((r11*sj15*x5133))+((cj15*r10*x5134))+(((-1.0)*r00*r10*x5132))+(((-1.0)*x5135)))),-1);
if(!x5136.valid){
continue;
}
CheckValue<IkReal> x5137 = IKatan2WithCheck(IkReal((((cj10*x5134))+(((-1.0)*cj10*x5133)))),IkReal(((-1.0)*cj10*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5137.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5136.value)))+(x5137.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5138=IKcos(j14);
IkReal x5139=IKsin(j14);
IkReal x5140=(cj15*r00);
IkReal x5141=(cj15*r10);
IkReal x5142=(cj15*r20);
IkReal x5143=(sj15*x5139);
IkReal x5144=((1.0)*x5138);
IkReal x5145=(sj15*x5138);
IkReal x5146=((1.0)*x5139);
evalcond[0]=(((r01*x5145))+(((-1.0)*x5140*x5144))+((r02*x5139)));
evalcond[1]=(((r12*x5139))+(((-1.0)*x5141*x5144))+((r11*x5145)));
evalcond[2]=(((r21*x5143))+(((-1.0)*x5142*x5146))+(((-1.0)*r22*x5144)));
evalcond[3]=((-1.0)+((r21*x5145))+((r22*x5139))+(((-1.0)*x5142*x5144)));
evalcond[4]=((((-1.0)*x5141*x5146))+(((-1.0)*r12*x5144))+cj10+((r11*x5143)));
evalcond[5]=(((r01*x5143))+(((-1.0)*x5140*x5146))+(((-1.0)*r02*x5144))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5147=((1.0)*cj15);
CheckValue<IkReal> x5148 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x5147))+((r01*sj15)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5148.valid){
continue;
}
CheckValue<IkReal> x5149=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5147))+(((-1.0)*r10*sj15)))),-1);
if(!x5149.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5148.value)+(((1.5707963267949)*(x5149.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5150=IKcos(j14);
IkReal x5151=IKsin(j14);
IkReal x5152=(cj15*r00);
IkReal x5153=(cj15*r10);
IkReal x5154=(cj15*r20);
IkReal x5155=(sj15*x5151);
IkReal x5156=((1.0)*x5150);
IkReal x5157=(sj15*x5150);
IkReal x5158=((1.0)*x5151);
evalcond[0]=(((r01*x5157))+((r02*x5151))+(((-1.0)*x5152*x5156)));
evalcond[1]=(((r11*x5157))+((r12*x5151))+(((-1.0)*x5153*x5156)));
evalcond[2]=((((-1.0)*x5154*x5158))+((r21*x5155))+(((-1.0)*r22*x5156)));
evalcond[3]=((-1.0)+(((-1.0)*x5154*x5156))+((r21*x5157))+((r22*x5151)));
evalcond[4]=(((r11*x5155))+(((-1.0)*r12*x5156))+cj10+(((-1.0)*x5153*x5158)));
evalcond[5]=(((r01*x5155))+(((-1.0)*sj10))+(((-1.0)*x5152*x5158))+(((-1.0)*r02*x5156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x5159=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x5159.valid){
continue;
}
CheckValue<IkReal> x5160 = IKatan2WithCheck(IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5160.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5159.value)))+(x5160.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5161=IKcos(j14);
IkReal x5162=IKsin(j14);
IkReal x5163=(cj15*r00);
IkReal x5164=(cj15*r10);
IkReal x5165=(cj15*r20);
IkReal x5166=(sj15*x5162);
IkReal x5167=((1.0)*x5161);
IkReal x5168=(sj15*x5161);
IkReal x5169=((1.0)*x5162);
evalcond[0]=(((r01*x5168))+(((-1.0)*x5163*x5167))+((r02*x5162)));
evalcond[1]=(((r12*x5162))+((r11*x5168))+(((-1.0)*x5164*x5167)));
evalcond[2]=((((-1.0)*r22*x5167))+((r21*x5166))+(((-1.0)*x5165*x5169)));
evalcond[3]=((-1.0)+((r21*x5168))+(((-1.0)*x5165*x5167))+((r22*x5162)));
evalcond[4]=((((-1.0)*r12*x5167))+cj10+((r11*x5166))+(((-1.0)*x5164*x5169)));
evalcond[5]=(((r01*x5166))+(((-1.0)*r02*x5167))+(((-1.0)*sj10))+(((-1.0)*x5163*x5169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-1.9337986785623)*px))+(((3.67051685094268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.9337986785623)*py))+(((3.67051685094268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.9337986785623)*px))+(((3.67051685094268)*py))))+IKsqr(((((1.9337986785623)*py))+(((3.67051685094268)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.9337986785623)*px))+(((3.67051685094268)*py))), ((((1.9337986785623)*py))+(((3.67051685094268)*px))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x5170=IKcos(j10);
IkReal x5171=IKsin(j10);
evalcond[0]=((((-0.11235)*x5171))+(((0.21325)*x5170))+(((-1.0)*px)));
evalcond[1]=((((0.11235)*x5170))+(((0.21325)*x5171))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x5172=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x5172;
j14eval[1]=IKsign(x5172);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x5173=((1.0)*cj15);
IkReal x5174=((((-1.0)*r01*x5173))+(((-1.0)*r00*sj15)));
j14eval[0]=x5174;
j14eval[1]=((IKabs((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x5173)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x5174);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x5175=((1.0)*cj15);
IkReal x5176=((((-1.0)*r01*x5175))+(((-1.0)*r00*sj15)));
j14eval[0]=x5176;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x5175))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x5176);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5177=((1.0)*cj15);
CheckValue<IkReal> x5178=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5177))+(((-1.0)*r00*sj15)))),-1);
if(!x5178.valid){
continue;
}
CheckValue<IkReal> x5179 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj10*x5177))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5179.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5178.value)))+(x5179.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5180=IKcos(j14);
IkReal x5181=IKsin(j14);
IkReal x5182=((1.0)*sj10);
IkReal x5183=(sj15*x5181);
IkReal x5184=((1.0)*x5180);
IkReal x5185=(sj15*x5180);
IkReal x5186=((1.0)*cj15*x5181);
evalcond[0]=(((r22*x5181))+(((-1.0)*cj15*r20*x5184))+((r21*x5185)));
evalcond[1]=((((-1.0)*r22*x5184))+((r21*x5183))+(((-1.0)*r20*x5186)));
evalcond[2]=(cj10+(((-1.0)*r10*x5186))+(((-1.0)*r12*x5184))+((r11*x5183)));
evalcond[3]=(((r01*x5185))+(((-1.0)*cj10))+((r02*x5181))+(((-1.0)*cj15*r00*x5184)));
evalcond[4]=(((r11*x5185))+(((-1.0)*x5182))+(((-1.0)*cj15*r10*x5184))+((r12*x5181)));
evalcond[5]=((((-1.0)*r02*x5184))+((r01*x5183))+(((-1.0)*r00*x5186))+(((-1.0)*x5182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5187=((1.0)*cj15);
CheckValue<IkReal> x5188=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x5187)))),-1);
if(!x5188.valid){
continue;
}
CheckValue<IkReal> x5189 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x5187))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5189.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5188.value)))+(x5189.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5190=IKcos(j14);
IkReal x5191=IKsin(j14);
IkReal x5192=((1.0)*sj10);
IkReal x5193=(sj15*x5191);
IkReal x5194=((1.0)*x5190);
IkReal x5195=(sj15*x5190);
IkReal x5196=((1.0)*cj15*x5191);
evalcond[0]=((((-1.0)*cj15*r20*x5194))+((r21*x5195))+((r22*x5191)));
evalcond[1]=((((-1.0)*r20*x5196))+((r21*x5193))+(((-1.0)*r22*x5194)));
evalcond[2]=((((-1.0)*r12*x5194))+(((-1.0)*r10*x5196))+((r11*x5193))+cj10);
evalcond[3]=(((r02*x5191))+(((-1.0)*cj15*r00*x5194))+(((-1.0)*cj10))+((r01*x5195)));
evalcond[4]=(((r11*x5195))+(((-1.0)*x5192))+((r12*x5191))+(((-1.0)*cj15*r10*x5194)));
evalcond[5]=((((-1.0)*r00*x5196))+(((-1.0)*x5192))+(((-1.0)*r02*x5194))+((r01*x5193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x5197=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x5197.valid){
continue;
}
CheckValue<IkReal> x5198 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5198.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5197.value)))+(x5198.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5199=IKcos(j14);
IkReal x5200=IKsin(j14);
IkReal x5201=((1.0)*sj10);
IkReal x5202=(sj15*x5200);
IkReal x5203=((1.0)*x5199);
IkReal x5204=(sj15*x5199);
IkReal x5205=((1.0)*cj15*x5200);
evalcond[0]=((((-1.0)*cj15*r20*x5203))+((r22*x5200))+((r21*x5204)));
evalcond[1]=((((-1.0)*r22*x5203))+(((-1.0)*r20*x5205))+((r21*x5202)));
evalcond[2]=((((-1.0)*r10*x5205))+((r11*x5202))+cj10+(((-1.0)*r12*x5203)));
evalcond[3]=(((r01*x5204))+(((-1.0)*cj15*r00*x5203))+((r02*x5200))+(((-1.0)*cj10)));
evalcond[4]=((((-1.0)*x5201))+((r11*x5204))+((r12*x5200))+(((-1.0)*cj15*r10*x5203)));
evalcond[5]=((((-1.0)*x5201))+(((-1.0)*r02*x5203))+((r01*x5202))+(((-1.0)*r00*x5205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs((((cj15*r11))+((r10*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*r01))+((r00*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj15*r11))+((r10*sj15))))+IKsqr((((cj15*r01))+((r00*sj15))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((cj15*r11))+((r10*sj15))), (((cj15*r01))+((r00*sj15))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x5206=IKsin(j10);
IkReal x5207=IKcos(j10);
IkReal x5208=((0.08535)*sj15);
IkReal x5209=(cj15*r11);
IkReal x5210=(cj15*r01);
evalcond[0]=(x5210+((r00*sj15))+(((-1.0)*x5207)));
evalcond[1]=(x5209+((r10*sj15))+(((-1.0)*x5206)));
evalcond[2]=((((-0.11235)*x5206))+(((-0.08535)*x5210))+(((-1.0)*px))+(((-1.0)*r00*x5208)));
evalcond[3]=((((-1.0)*r10*x5208))+(((-1.0)*py))+(((-0.08535)*x5209))+(((0.11235)*x5207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x5211=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x5211;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj15*r00))+((r01*sj15))))));
j14eval[2]=IKsign(x5211);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x5212=((1.0)*cj15);
IkReal x5213=((((-1.0)*r01*x5212))+(((-1.0)*r00*sj15)));
j14eval[0]=x5213;
j14eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5212))+((r11*sj15))))));
j14eval[2]=IKsign(x5213);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x5214=cj15*cj15;
IkReal x5215=(r01*r11);
IkReal x5216=(r01*sj15);
IkReal x5217=(cj15*r00);
IkReal x5218=((((-1.0)*r02*r12))+((r11*sj15*x5217))+((cj15*r10*x5216))+((x5214*x5215))+(((-1.0)*r00*r10*x5214))+(((-1.0)*x5215)));
j14eval[0]=x5218;
j14eval[1]=((IKabs((cj10*r02)))+(IKabs(((((-1.0)*cj10*x5217))+((cj10*x5216))))));
j14eval[2]=IKsign(x5218);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5219=cj15*cj15;
IkReal x5220=(cj15*r00);
IkReal x5221=(r01*sj15);
IkReal x5222=(r01*r11);
CheckValue<IkReal> x5223=IKPowWithIntegerCheck(IKsign((((r11*sj15*x5220))+(((-1.0)*r02*r12))+((x5219*x5222))+(((-1.0)*r00*r10*x5219))+(((-1.0)*x5222))+((cj15*r10*x5221)))),-1);
if(!x5223.valid){
continue;
}
CheckValue<IkReal> x5224 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*x5220))+((cj10*x5221)))),IkReal(((-1.0)*cj10*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5224.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5223.value)))+(x5224.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5225=IKcos(j14);
IkReal x5226=IKsin(j14);
IkReal x5227=(cj15*r00);
IkReal x5228=(cj15*r10);
IkReal x5229=(cj15*r20);
IkReal x5230=(sj15*x5226);
IkReal x5231=((1.0)*x5225);
IkReal x5232=(sj15*x5225);
IkReal x5233=((1.0)*x5226);
evalcond[0]=(((r02*x5226))+((r01*x5232))+(((-1.0)*x5227*x5231)));
evalcond[1]=(((r11*x5232))+(((-1.0)*x5228*x5231))+((r12*x5226)));
evalcond[2]=((((-1.0)*r22*x5231))+(((-1.0)*x5229*x5233))+((r21*x5230)));
evalcond[3]=((1.0)+((r22*x5226))+(((-1.0)*x5229*x5231))+((r21*x5232)));
evalcond[4]=(((r11*x5230))+(((-1.0)*r12*x5231))+(((-1.0)*x5228*x5233))+cj10);
evalcond[5]=((((-1.0)*r02*x5231))+((r01*x5230))+(((-1.0)*sj10))+(((-1.0)*x5227*x5233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5234=((1.0)*cj15);
CheckValue<IkReal> x5235 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5234))+((r11*sj15)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5235.valid){
continue;
}
CheckValue<IkReal> x5236=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5234))+(((-1.0)*r00*sj15)))),-1);
if(!x5236.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5235.value)+(((1.5707963267949)*(x5236.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5237=IKcos(j14);
IkReal x5238=IKsin(j14);
IkReal x5239=(cj15*r00);
IkReal x5240=(cj15*r10);
IkReal x5241=(cj15*r20);
IkReal x5242=(sj15*x5238);
IkReal x5243=((1.0)*x5237);
IkReal x5244=(sj15*x5237);
IkReal x5245=((1.0)*x5238);
evalcond[0]=(((r01*x5244))+(((-1.0)*x5239*x5243))+((r02*x5238)));
evalcond[1]=(((r11*x5244))+((r12*x5238))+(((-1.0)*x5240*x5243)));
evalcond[2]=((((-1.0)*r22*x5243))+(((-1.0)*x5241*x5245))+((r21*x5242)));
evalcond[3]=((1.0)+(((-1.0)*x5241*x5243))+((r21*x5244))+((r22*x5238)));
evalcond[4]=((((-1.0)*r12*x5243))+((r11*x5242))+cj10+(((-1.0)*x5240*x5245)));
evalcond[5]=(((r01*x5242))+(((-1.0)*r02*x5243))+(((-1.0)*x5239*x5245))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x5246=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x5246.valid){
continue;
}
CheckValue<IkReal> x5247 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r00))+((r01*sj15)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5247.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5246.value)))+(x5247.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5248=IKcos(j14);
IkReal x5249=IKsin(j14);
IkReal x5250=(cj15*r00);
IkReal x5251=(cj15*r10);
IkReal x5252=(cj15*r20);
IkReal x5253=(sj15*x5249);
IkReal x5254=((1.0)*x5248);
IkReal x5255=(sj15*x5248);
IkReal x5256=((1.0)*x5249);
evalcond[0]=(((r01*x5255))+(((-1.0)*x5250*x5254))+((r02*x5249)));
evalcond[1]=(((r12*x5249))+((r11*x5255))+(((-1.0)*x5251*x5254)));
evalcond[2]=(((r21*x5253))+(((-1.0)*r22*x5254))+(((-1.0)*x5252*x5256)));
evalcond[3]=((1.0)+((r21*x5255))+((r22*x5249))+(((-1.0)*x5252*x5254)));
evalcond[4]=((((-1.0)*r12*x5254))+((r11*x5253))+cj10+(((-1.0)*x5251*x5256)));
evalcond[5]=((((-1.0)*r02*x5254))+((r01*x5253))+(((-1.0)*x5250*x5256))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-3.67051685094268)*py))+(((-1.9337986785623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.67051685094268)*px))+(((1.9337986785623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))))+IKsqr(((((-3.67051685094268)*px))+(((1.9337986785623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))), ((((-3.67051685094268)*px))+(((1.9337986785623)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x5257=IKcos(j10);
IkReal x5258=IKsin(j10);
evalcond[0]=((((-0.11235)*x5258))+(((-1.0)*px))+(((-0.21325)*x5257)));
evalcond[1]=((((0.11235)*x5257))+(((-1.0)*py))+(((-0.21325)*x5258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x5259=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x5259;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x5259);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x5260=((1.0)*cj15);
IkReal x5261=((((-1.0)*r11*x5260))+(((-1.0)*r10*sj15)));
j14eval[0]=x5261;
j14eval[1]=IKsign(x5261);
j14eval[2]=((IKabs(((((-1.0)*cj10*r20*x5260))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x5262=cj15*cj15;
IkReal x5263=(cj15*sj15);
IkReal x5264=(r01*r21);
IkReal x5265=((1.0)*r20);
IkReal x5266=((((-1.0)*x5264))+(((-1.0)*r02*r22))+((x5262*x5264))+(((-1.0)*r00*x5262*x5265))+((r01*r20*x5263))+((r00*r21*x5263)));
j14eval[0]=x5266;
j14eval[1]=((IKabs(((((-1.0)*cj10*cj15*x5265))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x5266);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5267=cj15*cj15;
IkReal x5268=(cj15*sj15);
IkReal x5269=(r01*r21);
IkReal x5270=((1.0)*r20);
CheckValue<IkReal> x5271 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*x5270))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5271.valid){
continue;
}
CheckValue<IkReal> x5272=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5269))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5267*x5270))+((x5267*x5269))+((r01*r20*x5268))+((r00*r21*x5268)))),-1);
if(!x5272.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5271.value)+(((1.5707963267949)*(x5272.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5273=IKcos(j14);
IkReal x5274=IKsin(j14);
IkReal x5275=(cj15*r00);
IkReal x5276=(cj15*r10);
IkReal x5277=(cj15*r20);
IkReal x5278=(sj15*x5274);
IkReal x5279=((1.0)*x5273);
IkReal x5280=(sj15*x5273);
IkReal x5281=((1.0)*x5274);
evalcond[0]=(((r22*x5274))+((r21*x5280))+(((-1.0)*x5277*x5279)));
evalcond[1]=(((r21*x5278))+(((-1.0)*x5277*x5281))+(((-1.0)*r22*x5279)));
evalcond[2]=(((r02*x5274))+(((-1.0)*x5275*x5279))+cj10+((r01*x5280)));
evalcond[3]=((((-1.0)*x5276*x5279))+sj10+((r11*x5280))+((r12*x5274)));
evalcond[4]=((((-1.0)*x5276*x5281))+cj10+(((-1.0)*r12*x5279))+((r11*x5278)));
evalcond[5]=((((-1.0)*x5275*x5281))+((r01*x5278))+(((-1.0)*sj10))+(((-1.0)*r02*x5279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5282=((1.0)*cj15);
CheckValue<IkReal> x5283 = IKatan2WithCheck(IkReal((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x5282)))),IkReal(((-1.0)*cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5283.valid){
continue;
}
CheckValue<IkReal> x5284=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5282))+(((-1.0)*r10*sj15)))),-1);
if(!x5284.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5283.value)+(((1.5707963267949)*(x5284.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5285=IKcos(j14);
IkReal x5286=IKsin(j14);
IkReal x5287=(cj15*r00);
IkReal x5288=(cj15*r10);
IkReal x5289=(cj15*r20);
IkReal x5290=(sj15*x5286);
IkReal x5291=((1.0)*x5285);
IkReal x5292=(sj15*x5285);
IkReal x5293=((1.0)*x5286);
evalcond[0]=((((-1.0)*x5289*x5291))+((r22*x5286))+((r21*x5292)));
evalcond[1]=((((-1.0)*x5289*x5293))+(((-1.0)*r22*x5291))+((r21*x5290)));
evalcond[2]=((((-1.0)*x5287*x5291))+((r02*x5286))+cj10+((r01*x5292)));
evalcond[3]=(((r12*x5286))+(((-1.0)*x5288*x5291))+sj10+((r11*x5292)));
evalcond[4]=((((-1.0)*x5288*x5293))+(((-1.0)*r12*x5291))+cj10+((r11*x5290)));
evalcond[5]=((((-1.0)*x5287*x5293))+(((-1.0)*sj10))+((r01*x5290))+(((-1.0)*r02*x5291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x5294 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20*sj10))+((r21*sj10*sj15)))),IkReal(((-1.0)*r22*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5294.valid){
continue;
}
CheckValue<IkReal> x5295=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x5295.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5294.value)+(((1.5707963267949)*(x5295.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5296=IKcos(j14);
IkReal x5297=IKsin(j14);
IkReal x5298=(cj15*r00);
IkReal x5299=(cj15*r10);
IkReal x5300=(cj15*r20);
IkReal x5301=(sj15*x5297);
IkReal x5302=((1.0)*x5296);
IkReal x5303=(sj15*x5296);
IkReal x5304=((1.0)*x5297);
evalcond[0]=(((r21*x5303))+((r22*x5297))+(((-1.0)*x5300*x5302)));
evalcond[1]=((((-1.0)*r22*x5302))+((r21*x5301))+(((-1.0)*x5300*x5304)));
evalcond[2]=(((r02*x5297))+cj10+(((-1.0)*x5298*x5302))+((r01*x5303)));
evalcond[3]=(((r12*x5297))+sj10+((r11*x5303))+(((-1.0)*x5299*x5302)));
evalcond[4]=((((-1.0)*r12*x5302))+cj10+((r11*x5301))+(((-1.0)*x5299*x5304)));
evalcond[5]=((((-1.0)*sj10))+(((-1.0)*r02*x5302))+(((-1.0)*x5298*x5304))+((r01*x5301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10, j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5305=cj11*cj11;
IkReal x5306=((20000.0)*py);
IkReal x5307=(cj11*sj12);
IkReal x5308=(cj12*sj11);
IkReal x5309=(r00*sj15);
IkReal x5310=(cj11*sj11);
IkReal x5311=(cj15*r01);
IkReal x5312=(sj12*x5305);
IkReal x5313=((1707.0)*cj15*r11);
IkReal x5314=((1707.0)*r10*sj15);
CheckValue<IkReal> x5315=IKPowWithIntegerCheck(((((-4873.0)*cj11*x5308))+(((-8530.0)*cj11*cj12*x5308))+(((-8530.0)*cj12*x5312))+(((4265.0)*cj12*sj12))+(((-4873.0)*x5312))+(((4265.0)*x5310))),-1);
if(!x5315.valid){
continue;
}
CheckValue<IkReal> x5316=IKPowWithIntegerCheck(((((-1.0)*x5307))+(((-1.0)*x5308))),-1);
if(!x5316.valid){
continue;
}
if( IKabs(((x5315.value)*(((((-1.0)*x5306*x5308))+(((-1.0)*x5306*x5307))+(((-1.0)*x5308*x5314))+(((-1.0)*x5308*x5313))+(((-1.0)*x5307*x5313))+(((-1.0)*x5307*x5314))+(((2247.0)*x5309))+(((2247.0)*x5311)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5316.value)*(((((-1.0)*x5309))+(((-1.0)*x5311)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5315.value)*(((((-1.0)*x5306*x5308))+(((-1.0)*x5306*x5307))+(((-1.0)*x5308*x5314))+(((-1.0)*x5308*x5313))+(((-1.0)*x5307*x5313))+(((-1.0)*x5307*x5314))+(((2247.0)*x5309))+(((2247.0)*x5311))))))+IKsqr(((x5316.value)*(((((-1.0)*x5309))+(((-1.0)*x5311))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x5315.value)*(((((-1.0)*x5306*x5308))+(((-1.0)*x5306*x5307))+(((-1.0)*x5308*x5314))+(((-1.0)*x5308*x5313))+(((-1.0)*x5307*x5313))+(((-1.0)*x5307*x5314))+(((2247.0)*x5309))+(((2247.0)*x5311))))), ((x5316.value)*(((((-1.0)*x5309))+(((-1.0)*x5311))))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x5317=IKcos(j10);
IkReal x5318=IKsin(j10);
IkReal x5319=(sj11*sj12);
IkReal x5320=(r10*sj15);
IkReal x5321=((1.0)*sj12);
IkReal x5322=(r00*sj15);
IkReal x5323=((0.08535)*cj15);
IkReal x5324=(cj11*x5318);
IkReal x5325=((0.21325)*x5317);
IkReal x5326=((1.0)*cj12*sj11);
IkReal x5327=(cj11*x5317);
evalcond[0]=((((-1.0)*x5321*x5327))+((cj15*r01))+x5322+(((-1.0)*x5317*x5326)));
evalcond[1]=((((-1.0)*x5318*x5326))+(((-1.0)*x5321*x5324))+((cj15*r11))+x5320);
evalcond[2]=((((-0.11235)*x5318))+(((-0.08535)*x5322))+(((0.24365)*x5327))+(((-1.0)*px))+((cj11*cj12*x5325))+(((-1.0)*x5319*x5325))+(((-1.0)*r01*x5323)));
evalcond[3]=((((-0.21325)*x5318*x5319))+(((-0.08535)*x5320))+(((0.24365)*x5324))+(((-1.0)*py))+(((-1.0)*r11*x5323))+(((0.11235)*x5317))+(((0.21325)*cj12*x5324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x5328=((1.0)*cj15);
IkReal x5329=((((-1.0)*r00*sj15))+(((-1.0)*r01*x5328)));
j14eval[0]=x5329;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x5328))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x5329);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x5330=((1.0)*cj15);
IkReal x5331=((((-1.0)*r11*x5330))+(((-1.0)*r10*sj15)));
j14eval[0]=x5331;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x5330))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x5331);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x5332=((1.0)*sj15);
IkReal x5333=((((-1.0)*r20*x5332))+(((-1.0)*cj15*r21)));
j14eval[0]=x5333;
j14eval[1]=((IKabs(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))))+(IKabs(((((-1.0)*cj10*r01*x5332))+((cj15*r10*sj10))+(((-1.0)*r11*sj10*x5332))+((cj10*cj15*r00))))));
j14eval[2]=IKsign(x5333);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5334=((-1.0)*r20);
IkReal x5336 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5336)==0){
continue;
}
IkReal x5335=pow(x5336,-0.5);
CheckValue<IkReal> x5337 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5334),IKFAST_ATAN2_MAGTHRESH);
if(!x5337.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5337.value));
IkReal gconst115=(r21*x5335);
IkReal gconst116=(x5334*x5335);
CheckValue<IkReal> x5338 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5338.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x5338.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x5339=((-1.0)*r20);
IkReal x5340=x5335;
CheckValue<IkReal> x5342 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5339),IKFAST_ATAN2_MAGTHRESH);
if(!x5342.valid){
continue;
}
IkReal x5341=((-1.0)*(x5342.value));
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst115;
cj15=gconst116;
j15=x5341;
IkReal gconst114=x5341;
IkReal gconst115=(r21*x5340);
IkReal gconst116=(x5339*x5340);
j14eval[0]=cj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x5343=((-1.0)*r20);
IkReal x5344=x5335;
CheckValue<IkReal> x5346 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5343),IKFAST_ATAN2_MAGTHRESH);
if(!x5346.valid){
continue;
}
IkReal x5345=((-1.0)*(x5346.value));
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst115;
cj15=gconst116;
j15=x5345;
IkReal gconst114=x5345;
IkReal gconst115=(r21*x5344);
IkReal gconst116=(x5343*x5344);
j14eval[0]=sj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x5347=((-1.0)*r20);
IkReal x5348=x5335;
CheckValue<IkReal> x5350 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5347),IKFAST_ATAN2_MAGTHRESH);
if(!x5350.valid){
continue;
}
IkReal x5349=((-1.0)*(x5350.value));
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst115;
cj15=gconst116;
j15=x5349;
IkReal gconst114=x5349;
IkReal gconst115=(r21*x5348);
IkReal gconst116=(x5347*x5348);
IkReal x5351=((1.0)*(r22*r22));
CheckValue<IkReal> x5355=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5351))),-1);
if(!x5355.valid){
continue;
}
IkReal x5352=x5355.value;
IkReal x5353=((1.0)*x5352);
IkReal x5354=((((-1.0)*x5353*(r20*r20*r20*r20)))+(((-1.0)*x5351))+(((-2.0)*x5352*(r20*r20)*(r21*r21)))+(((-1.0)*x5353*(r21*r21*r21*r21))));
j14eval[0]=x5354;
j14eval[1]=IKsign(x5354);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5356=(gconst115*r21);
IkReal x5357=(cj12*sj11);
IkReal x5358=(cj11*sj12);
IkReal x5359=(gconst116*r20);
CheckValue<IkReal> x5360=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5356*x5356)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5359*x5359)))+(((2.0)*x5356*x5359)))),-1);
if(!x5360.valid){
continue;
}
CheckValue<IkReal> x5361 = IKatan2WithCheck(IkReal((((r22*x5358))+((r22*x5357)))),IkReal(((((-1.0)*x5357*x5359))+((x5356*x5358))+((x5356*x5357))+(((-1.0)*x5358*x5359)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5361.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5360.value)))+(x5361.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5362=IKsin(j14);
IkReal x5363=IKcos(j14);
IkReal x5364=((1.0)*sj10);
IkReal x5365=(gconst115*r11);
IkReal x5366=(sj11*sj12);
IkReal x5367=(cj11*cj12);
IkReal x5368=((1.0)*x5363);
IkReal x5369=(gconst115*x5362);
IkReal x5370=(gconst115*x5363);
IkReal x5371=((1.0)*gconst116*x5362);
evalcond[0]=((((-1.0)*r22*x5368))+((r21*x5369))+(((-1.0)*r20*x5371)));
evalcond[1]=(((x5362*x5365))+cj10+(((-1.0)*r12*x5368))+(((-1.0)*r10*x5371)));
evalcond[2]=((((-1.0)*r00*x5371))+(((-1.0)*r02*x5368))+(((-1.0)*x5364))+((r01*x5369)));
evalcond[3]=(((r22*x5362))+((r21*x5370))+((cj12*sj11))+(((-1.0)*gconst116*r20*x5368))+((cj11*sj12)));
evalcond[4]=(((r02*x5362))+(((-1.0)*cj10*x5367))+((cj10*x5366))+((r01*x5370))+(((-1.0)*gconst116*r00*x5368)));
evalcond[5]=(((r12*x5362))+(((-1.0)*x5364*x5367))+((x5363*x5365))+(((-1.0)*gconst116*r10*x5368))+((sj10*x5366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5372=((1.0)*gconst116);
CheckValue<IkReal> x5373=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5372))+(((-1.0)*gconst115*r10)))),-1);
if(!x5373.valid){
continue;
}
CheckValue<IkReal> x5374 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst115*r21*sj10))+(((-1.0)*r20*sj10*x5372)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5374.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5373.value)))+(x5374.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5375=IKsin(j14);
IkReal x5376=IKcos(j14);
IkReal x5377=((1.0)*sj10);
IkReal x5378=(gconst115*r11);
IkReal x5379=(sj11*sj12);
IkReal x5380=(cj11*cj12);
IkReal x5381=((1.0)*x5376);
IkReal x5382=(gconst115*x5375);
IkReal x5383=(gconst115*x5376);
IkReal x5384=((1.0)*gconst116*x5375);
evalcond[0]=((((-1.0)*r20*x5384))+(((-1.0)*r22*x5381))+((r21*x5382)));
evalcond[1]=(cj10+(((-1.0)*r12*x5381))+(((-1.0)*r10*x5384))+((x5375*x5378)));
evalcond[2]=((((-1.0)*x5377))+(((-1.0)*r02*x5381))+((r01*x5382))+(((-1.0)*r00*x5384)));
evalcond[3]=(((r22*x5375))+(((-1.0)*gconst116*r20*x5381))+((cj12*sj11))+((r21*x5383))+((cj11*sj12)));
evalcond[4]=(((r02*x5375))+((cj10*x5379))+(((-1.0)*gconst116*r00*x5381))+((r01*x5383))+(((-1.0)*cj10*x5380)));
evalcond[5]=((((-1.0)*gconst116*r10*x5381))+((x5376*x5378))+((r12*x5375))+(((-1.0)*x5377*x5380))+((sj10*x5379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5385=((1.0)*gconst116);
CheckValue<IkReal> x5386 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x5385))+((cj10*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5386.valid){
continue;
}
CheckValue<IkReal> x5387=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x5385)))),-1);
if(!x5387.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5386.value)+(((1.5707963267949)*(x5387.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5388=IKsin(j14);
IkReal x5389=IKcos(j14);
IkReal x5390=((1.0)*sj10);
IkReal x5391=(gconst115*r11);
IkReal x5392=(sj11*sj12);
IkReal x5393=(cj11*cj12);
IkReal x5394=((1.0)*x5389);
IkReal x5395=(gconst115*x5388);
IkReal x5396=(gconst115*x5389);
IkReal x5397=((1.0)*gconst116*x5388);
evalcond[0]=((((-1.0)*r20*x5397))+(((-1.0)*r22*x5394))+((r21*x5395)));
evalcond[1]=(((x5388*x5391))+cj10+(((-1.0)*r12*x5394))+(((-1.0)*r10*x5397)));
evalcond[2]=((((-1.0)*r02*x5394))+(((-1.0)*x5390))+((r01*x5395))+(((-1.0)*r00*x5397)));
evalcond[3]=((((-1.0)*gconst116*r20*x5394))+((cj12*sj11))+((r21*x5396))+((cj11*sj12))+((r22*x5388)));
evalcond[4]=(((r02*x5388))+(((-1.0)*gconst116*r00*x5394))+((cj10*x5392))+((r01*x5396))+(((-1.0)*cj10*x5393)));
evalcond[5]=(((x5389*x5391))+(((-1.0)*gconst116*r10*x5394))+((r12*x5388))+(((-1.0)*x5390*x5393))+((sj10*x5392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5398=((-1.0)*r21);
IkReal x5400 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5400)==0){
continue;
}
IkReal x5399=pow(x5400,-0.5);
CheckValue<IkReal> x5401 = IKatan2WithCheck(IkReal(x5398),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5401.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5401.value))));
IkReal gconst118=(x5398*x5399);
IkReal gconst119=((1.0)*r20*x5399);
CheckValue<IkReal> x5402 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5402.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x5402.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x5403=((-1.0)*r21);
CheckValue<IkReal> x5406 = IKatan2WithCheck(IkReal(x5403),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5406.valid){
continue;
}
IkReal x5404=((1.0)*(x5406.value));
IkReal x5405=x5399;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst118;
cj15=gconst119;
j15=((3.14159265)+(((-1.0)*x5404)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5404)));
IkReal gconst118=(x5403*x5405);
IkReal gconst119=((1.0)*r20*x5405);
IkReal x5407=r22*r22;
IkReal x5408=((1.0)*x5407);
CheckValue<IkReal> x5412=IKPowWithIntegerCheck(((-1.0)+x5407),-1);
if(!x5412.valid){
continue;
}
IkReal x5409=x5412.value;
if((((1.0)+(((-1.0)*x5408)))) < -0.00001)
continue;
IkReal x5410=IKsqrt(((1.0)+(((-1.0)*x5408))));
IkReal x5411=(cj10*x5409*x5410);
j14eval[0]=((IKabs((x5411+(((-1.0)*x5408*x5411)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x5413=((-1.0)*r21);
CheckValue<IkReal> x5416 = IKatan2WithCheck(IkReal(x5413),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5416.valid){
continue;
}
IkReal x5414=((1.0)*(x5416.value));
IkReal x5415=x5399;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst118;
cj15=gconst119;
j15=((3.14159265)+(((-1.0)*x5414)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5414)));
IkReal gconst118=(x5413*x5415);
IkReal gconst119=((1.0)*r20*x5415);
IkReal x5417=r22*r22;
IkReal x5418=((1.0)*x5417);
CheckValue<IkReal> x5422=IKPowWithIntegerCheck(((-1.0)+x5417),-1);
if(!x5422.valid){
continue;
}
IkReal x5419=x5422.value;
if((((1.0)+(((-1.0)*x5418)))) < -0.00001)
continue;
IkReal x5420=IKsqrt(((1.0)+(((-1.0)*x5418))));
IkReal x5421=(sj10*x5419*x5420);
j14eval[0]=((IKabs((x5421+(((-1.0)*x5418*x5421)))))+(IKabs((r22*sj10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x5423=((-1.0)*r21);
CheckValue<IkReal> x5426 = IKatan2WithCheck(IkReal(x5423),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5426.valid){
continue;
}
IkReal x5424=((1.0)*(x5426.value));
IkReal x5425=x5399;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst118;
cj15=gconst119;
j15=((3.14159265)+(((-1.0)*x5424)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5424)));
IkReal gconst118=(x5423*x5425);
IkReal gconst119=((1.0)*r20*x5425);
IkReal x5427=r22*r22;
IkReal x5428=(cj10*r02);
IkReal x5429=(r12*sj10);
CheckValue<IkReal> x5433=IKPowWithIntegerCheck(((-1.0)+x5427),-1);
if(!x5433.valid){
continue;
}
IkReal x5430=x5433.value;
if((((1.0)+(((-1.0)*x5427)))) < -0.00001)
continue;
IkReal x5431=IKsqrt(((1.0)+(((-1.0)*x5427))));
IkReal x5432=(r22*x5430*x5431);
j14eval[0]=0;
j14eval[1]=((IKabs((((x5429*x5432))+((x5428*x5432)))))+(IKabs(((((-1.0)*x5428))+(((-1.0)*x5429))))));
j14eval[2]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5434=((1.0)*gconst118);
CheckValue<IkReal> x5435=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5434)))),-1);
if(!x5435.valid){
continue;
}
CheckValue<IkReal> x5436 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x5434))+(((-1.0)*r11*sj10*x5434))+((gconst119*r10*sj10))+((cj10*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5436.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5435.value)))+(x5436.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5437=IKsin(j14);
IkReal x5438=IKcos(j14);
IkReal x5439=(gconst119*r10);
IkReal x5440=((1.0)*sj10);
IkReal x5441=(sj11*sj12);
IkReal x5442=(gconst119*r20);
IkReal x5443=(gconst119*r00);
IkReal x5444=(cj11*cj12);
IkReal x5445=(gconst118*x5437);
IkReal x5446=(gconst118*x5438);
IkReal x5447=((1.0)*x5438);
IkReal x5448=((1.0)*x5437);
evalcond[0]=((((-1.0)*x5442*x5448))+(((-1.0)*r22*x5447))+((r21*x5445)));
evalcond[1]=((((-1.0)*r12*x5447))+cj10+(((-1.0)*x5439*x5448))+((r11*x5445)));
evalcond[2]=((((-1.0)*x5440))+((r01*x5445))+(((-1.0)*x5443*x5448))+(((-1.0)*r02*x5447)));
evalcond[3]=(((r22*x5437))+(((-1.0)*x5442*x5447))+((cj12*sj11))+((r21*x5446))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj10*x5444))+((r02*x5437))+((r01*x5446))+(((-1.0)*x5443*x5447))+((cj10*x5441)));
evalcond[5]=(((sj10*x5441))+(((-1.0)*x5439*x5447))+(((-1.0)*x5440*x5444))+((r11*x5446))+((r12*x5437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5449=((1.0)*gconst119);
CheckValue<IkReal> x5450=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x5449)))),-1);
if(!x5450.valid){
continue;
}
CheckValue<IkReal> x5451 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst118*r21*sj10))+(((-1.0)*r20*sj10*x5449)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5451.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5450.value)))+(x5451.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5452=IKsin(j14);
IkReal x5453=IKcos(j14);
IkReal x5454=(gconst119*r10);
IkReal x5455=((1.0)*sj10);
IkReal x5456=(sj11*sj12);
IkReal x5457=(gconst119*r20);
IkReal x5458=(gconst119*r00);
IkReal x5459=(cj11*cj12);
IkReal x5460=(gconst118*x5452);
IkReal x5461=(gconst118*x5453);
IkReal x5462=((1.0)*x5453);
IkReal x5463=((1.0)*x5452);
evalcond[0]=((((-1.0)*x5457*x5463))+((r21*x5460))+(((-1.0)*r22*x5462)));
evalcond[1]=(((r11*x5460))+cj10+(((-1.0)*r12*x5462))+(((-1.0)*x5454*x5463)));
evalcond[2]=(((r01*x5460))+(((-1.0)*x5458*x5463))+(((-1.0)*r02*x5462))+(((-1.0)*x5455)));
evalcond[3]=(((r22*x5452))+(((-1.0)*x5457*x5462))+((r21*x5461))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj10*x5459))+((r01*x5461))+(((-1.0)*x5458*x5462))+((r02*x5452))+((cj10*x5456)));
evalcond[5]=((((-1.0)*x5455*x5459))+((r12*x5452))+((r11*x5461))+(((-1.0)*x5454*x5462))+((sj10*x5456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5464=((1.0)*gconst119);
CheckValue<IkReal> x5465=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5464))+(((-1.0)*gconst118*r00)))),-1);
if(!x5465.valid){
continue;
}
CheckValue<IkReal> x5466 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x5464))+((cj10*gconst118*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5466.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5465.value)))+(x5466.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5467=IKsin(j14);
IkReal x5468=IKcos(j14);
IkReal x5469=(gconst119*r10);
IkReal x5470=((1.0)*sj10);
IkReal x5471=(sj11*sj12);
IkReal x5472=(gconst119*r20);
IkReal x5473=(gconst119*r00);
IkReal x5474=(cj11*cj12);
IkReal x5475=(gconst118*x5467);
IkReal x5476=(gconst118*x5468);
IkReal x5477=((1.0)*x5468);
IkReal x5478=((1.0)*x5467);
evalcond[0]=((((-1.0)*x5472*x5478))+(((-1.0)*r22*x5477))+((r21*x5475)));
evalcond[1]=((((-1.0)*r12*x5477))+cj10+((r11*x5475))+(((-1.0)*x5469*x5478)));
evalcond[2]=(((r01*x5475))+(((-1.0)*x5470))+(((-1.0)*x5473*x5478))+(((-1.0)*r02*x5477)));
evalcond[3]=(((r22*x5467))+(((-1.0)*x5472*x5477))+((cj12*sj11))+((cj11*sj12))+((r21*x5476)));
evalcond[4]=((((-1.0)*cj10*x5474))+((r02*x5467))+((r01*x5476))+(((-1.0)*x5473*x5477))+((cj10*x5471)));
evalcond[5]=(((sj10*x5471))+((r12*x5467))+(((-1.0)*x5470*x5474))+((r11*x5476))+(((-1.0)*x5469*x5477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5479=((-1.0)*r10);
IkReal x5481 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5481)==0){
continue;
}
IkReal x5480=pow(x5481,-0.5);
CheckValue<IkReal> x5482 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5479),IKFAST_ATAN2_MAGTHRESH);
if(!x5482.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5482.value));
IkReal gconst121=(r11*x5480);
IkReal gconst122=(x5479*x5480);
CheckValue<IkReal> x5483 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5483.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x5483.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x5484=((-1.0)*r10);
IkReal x5485=x5480;
CheckValue<IkReal> x5487 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5484),IKFAST_ATAN2_MAGTHRESH);
if(!x5487.valid){
continue;
}
IkReal x5486=((-1.0)*(x5487.value));
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst121;
cj15=gconst122;
j15=x5486;
IkReal gconst120=x5486;
IkReal gconst121=(r11*x5485);
IkReal gconst122=(x5484*x5485);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5488=((1.0)*gconst121);
CheckValue<IkReal> x5489=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5488))+(((-1.0)*gconst122*r21)))),-1);
if(!x5489.valid){
continue;
}
CheckValue<IkReal> x5490 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x5488))+(((-1.0)*cj10*r01*x5488))+((gconst122*r10*sj10))+((cj10*gconst122*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5490.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5489.value)))+(x5490.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5491=IKsin(j14);
IkReal x5492=IKcos(j14);
IkReal x5493=(gconst122*r00);
IkReal x5494=((1.0)*sj10);
IkReal x5495=(sj11*sj12);
IkReal x5496=(gconst122*r10);
IkReal x5497=(gconst122*r20);
IkReal x5498=(cj11*cj12);
IkReal x5499=((1.0)*x5492);
IkReal x5500=(gconst121*x5491);
IkReal x5501=(gconst121*x5492);
IkReal x5502=((1.0)*x5491);
evalcond[0]=((((-1.0)*x5497*x5502))+(((-1.0)*r22*x5499))+((r21*x5500)));
evalcond[1]=((((-1.0)*x5496*x5502))+(((-1.0)*r12*x5499))+cj10+((r11*x5500)));
evalcond[2]=((((-1.0)*x5494))+(((-1.0)*r02*x5499))+((r01*x5500))+(((-1.0)*x5493*x5502)));
evalcond[3]=(((r21*x5501))+(((-1.0)*x5497*x5499))+((cj12*sj11))+((r22*x5491))+((cj11*sj12)));
evalcond[4]=((((-1.0)*x5493*x5499))+(((-1.0)*cj10*x5498))+((r01*x5501))+((cj10*x5495))+((r02*x5491)));
evalcond[5]=(((sj10*x5495))+((r12*x5491))+(((-1.0)*x5494*x5498))+((r11*x5501))+(((-1.0)*x5496*x5499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5503=((1.0)*gconst122);
CheckValue<IkReal> x5504=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5503)))),-1);
if(!x5504.valid){
continue;
}
CheckValue<IkReal> x5505 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst121*r21))+(((-1.0)*cj10*r20*x5503)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5505.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5504.value)))+(x5505.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5506=IKsin(j14);
IkReal x5507=IKcos(j14);
IkReal x5508=(gconst122*r00);
IkReal x5509=((1.0)*sj10);
IkReal x5510=(sj11*sj12);
IkReal x5511=(gconst122*r10);
IkReal x5512=(gconst122*r20);
IkReal x5513=(cj11*cj12);
IkReal x5514=((1.0)*x5507);
IkReal x5515=(gconst121*x5506);
IkReal x5516=(gconst121*x5507);
IkReal x5517=((1.0)*x5506);
evalcond[0]=((((-1.0)*r22*x5514))+(((-1.0)*x5512*x5517))+((r21*x5515)));
evalcond[1]=((((-1.0)*x5511*x5517))+(((-1.0)*r12*x5514))+cj10+((r11*x5515)));
evalcond[2]=((((-1.0)*r02*x5514))+(((-1.0)*x5509))+((r01*x5515))+(((-1.0)*x5508*x5517)));
evalcond[3]=((((-1.0)*x5512*x5514))+((r21*x5516))+((r22*x5506))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((r02*x5506))+(((-1.0)*cj10*x5513))+((r01*x5516))+((cj10*x5510))+(((-1.0)*x5508*x5514)));
evalcond[5]=((((-1.0)*x5511*x5514))+((r12*x5506))+((r11*x5516))+((sj10*x5510))+(((-1.0)*x5509*x5513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5518=((-1.0)*r11);
IkReal x5520 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5520)==0){
continue;
}
IkReal x5519=pow(x5520,-0.5);
CheckValue<IkReal> x5521 = IKatan2WithCheck(IkReal(x5518),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5521.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5521.value))));
IkReal gconst124=(x5518*x5519);
IkReal gconst125=((1.0)*r10*x5519);
CheckValue<IkReal> x5522 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5522.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x5522.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x5523=((-1.0)*r11);
CheckValue<IkReal> x5526 = IKatan2WithCheck(IkReal(x5523),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5526.valid){
continue;
}
IkReal x5524=((1.0)*(x5526.value));
IkReal x5525=x5519;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst124;
cj15=gconst125;
j15=((3.14159265)+(((-1.0)*x5524)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5524)));
IkReal gconst124=(x5523*x5525);
IkReal gconst125=((1.0)*r10*x5525);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x5527=((-1.0)*r11);
CheckValue<IkReal> x5530 = IKatan2WithCheck(IkReal(x5527),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5530.valid){
continue;
}
IkReal x5528=((1.0)*(x5530.value));
IkReal x5529=x5519;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst124;
cj15=gconst125;
j15=((3.14159265)+(((-1.0)*x5528)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5528)));
IkReal gconst124=(x5527*x5529);
IkReal gconst125=((1.0)*r10*x5529);
IkReal x5531=r12*r12;
IkReal x5532=(cj10*r02);
IkReal x5533=x5519;
IkReal x5534=(sj10*x5533);
j14eval[0]=((IKabs((((r12*x5532*x5533))+(((-1.0)*x5534))+((x5531*x5534)))))+(IKabs(((((-1.0)*r12*sj10))+(((-1.0)*x5532))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x5535=((-1.0)*r11);
CheckValue<IkReal> x5538 = IKatan2WithCheck(IkReal(x5535),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5538.valid){
continue;
}
IkReal x5536=((1.0)*(x5538.value));
IkReal x5537=x5519;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst124;
cj15=gconst125;
j15=((3.14159265)+(((-1.0)*x5536)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5536)));
IkReal gconst124=(x5535*x5537);
IkReal gconst125=((1.0)*r10*x5537);
IkReal x5539=r12*r12;
IkReal x5540=(cj11*sj12);
IkReal x5541=(cj12*sj11);
IkReal x5542=((1.0)+(((-1.0)*x5539)));
CheckValue<IkReal> x5549=IKPowWithIntegerCheck(x5542,-1);
if(!x5549.valid){
continue;
}
IkReal x5543=x5549.value;
CheckValue<IkReal> x5550=IKPowWithIntegerCheck(((-1.0)+x5539),-1);
if(!x5550.valid){
continue;
}
IkReal x5544=x5550.value;
IkReal x5545=((1.0)*x5543);
if((x5542) < -0.00001)
continue;
IkReal x5546=IKsqrt(x5542);
IkReal x5547=((1.0)*r12*r22*x5544*x5546);
IkReal x5548=((((-2.0)*r10*r11*r20*r21*x5543))+(((-1.0)*x5545*(r10*r10)*(r20*r20)))+(((-1.0)*x5545*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22))));
j14eval[0]=x5548;
j14eval[1]=IKsign(x5548);
j14eval[2]=((IKabs((((r22*x5541))+((r22*x5540)))))+(IKabs(((((-1.0)*x5541*x5547))+(((-1.0)*x5540*x5547))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5551=(cj11*sj12);
IkReal x5552=(gconst125*r20);
IkReal x5553=(gconst124*r21);
IkReal x5554=(cj12*sj11);
CheckValue<IkReal> x5555=IKPowWithIntegerCheck(IKsign(((((2.0)*x5552*x5553))+(((-1.0)*(x5552*x5552)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5553*x5553))))),-1);
if(!x5555.valid){
continue;
}
CheckValue<IkReal> x5556 = IKatan2WithCheck(IkReal((((r22*x5554))+((r22*x5551)))),IkReal((((x5551*x5553))+(((-1.0)*x5551*x5552))+((x5553*x5554))+(((-1.0)*x5552*x5554)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5556.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5555.value)))+(x5556.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5557=IKsin(j14);
IkReal x5558=IKcos(j14);
IkReal x5559=((1.0)*sj10);
IkReal x5560=(gconst125*r20);
IkReal x5561=(sj11*sj12);
IkReal x5562=(gconst125*r00);
IkReal x5563=(cj11*cj12);
IkReal x5564=(gconst125*r10);
IkReal x5565=((1.0)*x5558);
IkReal x5566=(gconst124*x5558);
IkReal x5567=(gconst124*x5557);
IkReal x5568=((1.0)*x5557);
evalcond[0]=((((-1.0)*r22*x5565))+((r21*x5567))+(((-1.0)*x5560*x5568)));
evalcond[1]=((((-1.0)*x5564*x5568))+(((-1.0)*r12*x5565))+((r11*x5567))+cj10);
evalcond[2]=((((-1.0)*r02*x5565))+(((-1.0)*x5562*x5568))+(((-1.0)*x5559))+((r01*x5567)));
evalcond[3]=(((r21*x5566))+((r22*x5557))+((cj12*sj11))+(((-1.0)*x5560*x5565))+((cj11*sj12)));
evalcond[4]=(((r02*x5557))+(((-1.0)*x5562*x5565))+(((-1.0)*cj10*x5563))+((cj10*x5561))+((r01*x5566)));
evalcond[5]=((((-1.0)*x5564*x5565))+((r12*x5557))+((r11*x5566))+(((-1.0)*x5559*x5563))+((sj10*x5561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5569=((1.0)*sj10);
IkReal x5570=((1.0)*gconst124);
CheckValue<IkReal> x5571=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst125*r21))+(((-1.0)*r20*x5570)))),-1);
if(!x5571.valid){
continue;
}
CheckValue<IkReal> x5572 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5569))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*gconst124*r11*x5569))+(((-1.0)*cj10*r01*x5570))+((cj10*gconst125*r00))+((gconst125*r10*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5572.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5571.value)))+(x5572.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5573=IKsin(j14);
IkReal x5574=IKcos(j14);
IkReal x5575=((1.0)*sj10);
IkReal x5576=(gconst125*r20);
IkReal x5577=(sj11*sj12);
IkReal x5578=(gconst125*r00);
IkReal x5579=(cj11*cj12);
IkReal x5580=(gconst125*r10);
IkReal x5581=((1.0)*x5574);
IkReal x5582=(gconst124*x5574);
IkReal x5583=(gconst124*x5573);
IkReal x5584=((1.0)*x5573);
evalcond[0]=(((r21*x5583))+(((-1.0)*x5576*x5584))+(((-1.0)*r22*x5581)));
evalcond[1]=((((-1.0)*r12*x5581))+((r11*x5583))+cj10+(((-1.0)*x5580*x5584)));
evalcond[2]=((((-1.0)*x5578*x5584))+(((-1.0)*r02*x5581))+(((-1.0)*x5575))+((r01*x5583)));
evalcond[3]=(((r21*x5582))+(((-1.0)*x5576*x5581))+((r22*x5573))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((r02*x5573))+(((-1.0)*x5578*x5581))+(((-1.0)*cj10*x5579))+((cj10*x5577))+((r01*x5582)));
evalcond[5]=(((r11*x5582))+((r12*x5573))+(((-1.0)*x5580*x5581))+(((-1.0)*x5575*x5579))+((sj10*x5577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5585=((1.0)*gconst125);
CheckValue<IkReal> x5586 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x5585))+((cj10*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5586.valid){
continue;
}
CheckValue<IkReal> x5587=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5585)))),-1);
if(!x5587.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5586.value)+(((1.5707963267949)*(x5587.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5588=IKsin(j14);
IkReal x5589=IKcos(j14);
IkReal x5590=((1.0)*sj10);
IkReal x5591=(gconst125*r20);
IkReal x5592=(sj11*sj12);
IkReal x5593=(gconst125*r00);
IkReal x5594=(cj11*cj12);
IkReal x5595=(gconst125*r10);
IkReal x5596=((1.0)*x5589);
IkReal x5597=(gconst124*x5589);
IkReal x5598=(gconst124*x5588);
IkReal x5599=((1.0)*x5588);
evalcond[0]=(((r21*x5598))+(((-1.0)*x5591*x5599))+(((-1.0)*r22*x5596)));
evalcond[1]=((((-1.0)*r12*x5596))+(((-1.0)*x5595*x5599))+((r11*x5598))+cj10);
evalcond[2]=((((-1.0)*x5593*x5599))+(((-1.0)*r02*x5596))+(((-1.0)*x5590))+((r01*x5598)));
evalcond[3]=(((r21*x5597))+((cj12*sj11))+(((-1.0)*x5591*x5596))+((r22*x5588))+((cj11*sj12)));
evalcond[4]=((((-1.0)*x5593*x5596))+((cj10*x5592))+((r02*x5588))+(((-1.0)*cj10*x5594))+((r01*x5597)));
evalcond[5]=(((sj10*x5592))+(((-1.0)*x5595*x5596))+(((-1.0)*x5590*x5594))+((r11*x5597))+((r12*x5588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x5600=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x5600;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj15*r00))+((r01*sj15))))));
j14eval[2]=IKsign(x5600);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x5601=((1.0)*cj15);
IkReal x5602=((((-1.0)*r01*x5601))+(((-1.0)*r00*sj15)));
j14eval[0]=x5602;
j14eval[1]=((IKabs(r22))+(IKabs((((r21*sj15))+(((-1.0)*r20*x5601))))));
j14eval[2]=IKsign(x5602);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x5603=r11*r11;
IkReal x5604=cj15*cj15;
IkReal x5605=(cj15*r10);
IkReal x5606=(r11*sj15);
IkReal x5607=((((-1.0)*x5603))+((x5603*x5604))+(((2.0)*x5605*x5606))+(((-1.0)*x5604*(r10*r10)))+(((-1.0)*(r12*r12))));
j14eval[0]=x5607;
j14eval[1]=((IKabs(r12))+(IKabs((x5606+(((-1.0)*x5605))))));
j14eval[2]=IKsign(x5607);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5608=r11*r11;
IkReal x5609=cj15*cj15;
IkReal x5610=(r11*sj15);
IkReal x5611=(cj15*r10);
CheckValue<IkReal> x5612=IKPowWithIntegerCheck(IKsign((((x5608*x5609))+(((-1.0)*x5608))+(((-1.0)*x5609*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x5610*x5611)))),-1);
if(!x5612.valid){
continue;
}
CheckValue<IkReal> x5613 = IKatan2WithCheck(IkReal(((((-1.0)*x5611))+x5610)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5613.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5612.value)))+(x5613.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5614=IKcos(j14);
IkReal x5615=IKsin(j14);
IkReal x5616=(cj15*r20);
IkReal x5617=(cj15*r10);
IkReal x5618=(cj15*r00);
IkReal x5619=((1.0)*x5614);
IkReal x5620=(sj15*x5614);
IkReal x5621=((1.0)*x5615);
IkReal x5622=(sj15*x5615);
evalcond[0]=((((-1.0)*x5617*x5619))+((r12*x5615))+((r11*x5620)));
evalcond[1]=((((-1.0)*r22*x5619))+((r21*x5622))+(((-1.0)*x5616*x5621)));
evalcond[2]=((((-1.0)*x5618*x5621))+((r01*x5622))+(((-1.0)*r02*x5619)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5619))+(((-1.0)*x5617*x5621))+((r11*x5622)));
evalcond[4]=(((r21*x5620))+((cj12*sj11))+(((-1.0)*x5616*x5619))+((cj11*sj12))+((r22*x5615)));
evalcond[5]=(((sj11*sj12))+((r02*x5615))+(((-1.0)*x5618*x5619))+((r01*x5620))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5623=((1.0)*cj15);
CheckValue<IkReal> x5624 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj15))+(((-1.0)*r20*x5623)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5624.valid){
continue;
}
CheckValue<IkReal> x5625=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5623))+(((-1.0)*r00*sj15)))),-1);
if(!x5625.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5624.value)+(((1.5707963267949)*(x5625.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5626=IKcos(j14);
IkReal x5627=IKsin(j14);
IkReal x5628=(cj15*r20);
IkReal x5629=(cj15*r10);
IkReal x5630=(cj15*r00);
IkReal x5631=((1.0)*x5626);
IkReal x5632=(sj15*x5626);
IkReal x5633=((1.0)*x5627);
IkReal x5634=(sj15*x5627);
evalcond[0]=((((-1.0)*x5629*x5631))+((r11*x5632))+((r12*x5627)));
evalcond[1]=((((-1.0)*x5628*x5633))+(((-1.0)*r22*x5631))+((r21*x5634)));
evalcond[2]=(((r01*x5634))+(((-1.0)*r02*x5631))+(((-1.0)*x5630*x5633)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5631))+(((-1.0)*x5629*x5633))+((r11*x5634)));
evalcond[4]=((((-1.0)*x5628*x5631))+((cj12*sj11))+((cj11*sj12))+((r22*x5627))+((r21*x5632)));
evalcond[5]=(((sj11*sj12))+((r01*x5632))+((r02*x5627))+(((-1.0)*x5630*x5631))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x5635 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj15*r00))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5635.valid){
continue;
}
CheckValue<IkReal> x5636=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x5636.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5635.value)+(((1.5707963267949)*(x5636.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5637=IKcos(j14);
IkReal x5638=IKsin(j14);
IkReal x5639=(cj15*r20);
IkReal x5640=(cj15*r10);
IkReal x5641=(cj15*r00);
IkReal x5642=((1.0)*x5637);
IkReal x5643=(sj15*x5637);
IkReal x5644=((1.0)*x5638);
IkReal x5645=(sj15*x5638);
evalcond[0]=(((r12*x5638))+((r11*x5643))+(((-1.0)*x5640*x5642)));
evalcond[1]=((((-1.0)*r22*x5642))+((r21*x5645))+(((-1.0)*x5639*x5644)));
evalcond[2]=(((r01*x5645))+(((-1.0)*r02*x5642))+(((-1.0)*x5641*x5644)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5642))+((r11*x5645))+(((-1.0)*x5640*x5644)));
evalcond[4]=(((r22*x5638))+((r21*x5643))+((cj12*sj11))+(((-1.0)*x5639*x5642))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r01*x5643))+(((-1.0)*x5641*x5642))+((r02*x5638))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x5646=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x5646;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x5646);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x5647=((1.0)*cj15);
IkReal x5648=((((-1.0)*r21*x5647))+(((-1.0)*r20*sj15)));
j14eval[0]=x5648;
j14eval[1]=IKsign(x5648);
j14eval[2]=((IKabs(r02))+(IKabs((((r01*sj15))+(((-1.0)*r00*x5647))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x5649=cj15*cj15;
IkReal x5650=r11*r11;
IkReal x5651=(r11*sj15);
IkReal x5652=(cj15*r10);
IkReal x5653=(x5650+((x5649*(r10*r10)))+(r12*r12)+(((-1.0)*x5649*x5650))+(((-2.0)*x5651*x5652)));
j14eval[0]=x5653;
j14eval[1]=((IKabs((x5651+(((-1.0)*x5652)))))+(IKabs(r12)));
j14eval[2]=IKsign(x5653);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5654=cj15*cj15;
IkReal x5655=r11*r11;
IkReal x5656=(r11*sj15);
IkReal x5657=(cj15*r10);
CheckValue<IkReal> x5658 = IKatan2WithCheck(IkReal((x5656+(((-1.0)*x5657)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5658.valid){
continue;
}
CheckValue<IkReal> x5659=IKPowWithIntegerCheck(IKsign((x5655+(r12*r12)+((x5654*(r10*r10)))+(((-2.0)*x5656*x5657))+(((-1.0)*x5654*x5655)))),-1);
if(!x5659.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5658.value)+(((1.5707963267949)*(x5659.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5660=IKcos(j14);
IkReal x5661=IKsin(j14);
IkReal x5662=(cj15*r20);
IkReal x5663=(cj15*r10);
IkReal x5664=(cj15*r00);
IkReal x5665=((1.0)*x5660);
IkReal x5666=(sj15*x5660);
IkReal x5667=((1.0)*x5661);
IkReal x5668=(sj15*x5661);
evalcond[0]=((((-1.0)*x5663*x5665))+((r11*x5666))+((r12*x5661)));
evalcond[1]=((((-1.0)*r22*x5665))+(((-1.0)*x5662*x5667))+((r21*x5668)));
evalcond[2]=(((r01*x5668))+(((-1.0)*r02*x5665))+(((-1.0)*x5664*x5667)));
evalcond[3]=((-1.0)+(((-1.0)*x5663*x5667))+((r11*x5668))+(((-1.0)*r12*x5665)));
evalcond[4]=(((r22*x5661))+(((-1.0)*x5662*x5665))+((cj12*sj11))+((cj11*sj12))+((r21*x5666)));
evalcond[5]=(((r01*x5666))+(((-1.0)*sj11*sj12))+((cj11*cj12))+((r02*x5661))+(((-1.0)*x5664*x5665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5669=((1.0)*cj15);
CheckValue<IkReal> x5670 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x5669))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5670.valid){
continue;
}
CheckValue<IkReal> x5671=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5669))+(((-1.0)*r20*sj15)))),-1);
if(!x5671.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5670.value)+(((1.5707963267949)*(x5671.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5672=IKcos(j14);
IkReal x5673=IKsin(j14);
IkReal x5674=(cj15*r20);
IkReal x5675=(cj15*r10);
IkReal x5676=(cj15*r00);
IkReal x5677=((1.0)*x5672);
IkReal x5678=(sj15*x5672);
IkReal x5679=((1.0)*x5673);
IkReal x5680=(sj15*x5673);
evalcond[0]=(((r11*x5678))+((r12*x5673))+(((-1.0)*x5675*x5677)));
evalcond[1]=((((-1.0)*r22*x5677))+((r21*x5680))+(((-1.0)*x5674*x5679)));
evalcond[2]=((((-1.0)*x5676*x5679))+((r01*x5680))+(((-1.0)*r02*x5677)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5677))+((r11*x5680))+(((-1.0)*x5675*x5679)));
evalcond[4]=(((cj12*sj11))+((r21*x5678))+((r22*x5673))+(((-1.0)*x5674*x5677))+((cj11*sj12)));
evalcond[5]=(((r02*x5673))+(((-1.0)*sj11*sj12))+((cj11*cj12))+((r01*x5678))+(((-1.0)*x5676*x5677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x5681 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5681.valid){
continue;
}
CheckValue<IkReal> x5682=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x5682.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5681.value)+(((1.5707963267949)*(x5682.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5683=IKcos(j14);
IkReal x5684=IKsin(j14);
IkReal x5685=(cj15*r20);
IkReal x5686=(cj15*r10);
IkReal x5687=(cj15*r00);
IkReal x5688=((1.0)*x5683);
IkReal x5689=(sj15*x5683);
IkReal x5690=((1.0)*x5684);
IkReal x5691=(sj15*x5684);
evalcond[0]=((((-1.0)*x5686*x5688))+((r12*x5684))+((r11*x5689)));
evalcond[1]=((((-1.0)*x5685*x5690))+(((-1.0)*r22*x5688))+((r21*x5691)));
evalcond[2]=((((-1.0)*r02*x5688))+(((-1.0)*x5687*x5690))+((r01*x5691)));
evalcond[3]=((-1.0)+(((-1.0)*x5686*x5690))+((r11*x5691))+(((-1.0)*r12*x5688)));
evalcond[4]=(((r22*x5684))+(((-1.0)*x5685*x5688))+((cj12*sj11))+((r21*x5689))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+((r02*x5684))+(((-1.0)*x5687*x5688))+((r01*x5689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5692=((-1.0)*r00);
IkReal x5694 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5694)==0){
continue;
}
IkReal x5693=pow(x5694,-0.5);
CheckValue<IkReal> x5695 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5692),IKFAST_ATAN2_MAGTHRESH);
if(!x5695.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5695.value));
IkReal gconst127=(r01*x5693);
IkReal gconst128=(x5692*x5693);
CheckValue<IkReal> x5696 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5696.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x5696.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x5697=((-1.0)*r00);
IkReal x5698=x5693;
CheckValue<IkReal> x5700 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5697),IKFAST_ATAN2_MAGTHRESH);
if(!x5700.valid){
continue;
}
IkReal x5699=((-1.0)*(x5700.value));
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst127;
cj15=gconst128;
j15=x5699;
IkReal gconst126=x5699;
IkReal gconst127=(r01*x5698);
IkReal gconst128=(x5697*x5698);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5701=((1.0)*gconst127);
CheckValue<IkReal> x5702 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x5701))+((gconst128*r10*sj10))+((cj10*gconst128*r00))+(((-1.0)*cj10*r01*x5701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5702.valid){
continue;
}
CheckValue<IkReal> x5703=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x5701)))),-1);
if(!x5703.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5702.value)+(((1.5707963267949)*(x5703.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5704=IKsin(j14);
IkReal x5705=IKcos(j14);
IkReal x5706=(gconst127*r11);
IkReal x5707=((1.0)*sj10);
IkReal x5708=(gconst127*r01);
IkReal x5709=(sj11*sj12);
IkReal x5710=(gconst127*r21);
IkReal x5711=(cj11*cj12);
IkReal x5712=((1.0)*x5705);
IkReal x5713=((1.0)*gconst128*x5704);
evalcond[0]=(((x5704*x5710))+(((-1.0)*r22*x5712))+(((-1.0)*r20*x5713)));
evalcond[1]=((((-1.0)*r10*x5713))+cj10+(((-1.0)*r12*x5712))+((x5704*x5706)));
evalcond[2]=((((-1.0)*r00*x5713))+((x5704*x5708))+(((-1.0)*x5707))+(((-1.0)*r02*x5712)));
evalcond[3]=(((r22*x5704))+(((-1.0)*gconst128*r20*x5712))+((cj12*sj11))+((cj11*sj12))+((x5705*x5710)));
evalcond[4]=(((cj10*x5709))+(((-1.0)*gconst128*r00*x5712))+((r02*x5704))+((x5705*x5708))+(((-1.0)*cj10*x5711)));
evalcond[5]=((((-1.0)*gconst128*r10*x5712))+((x5705*x5706))+((sj10*x5709))+((r12*x5704))+(((-1.0)*x5707*x5711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5714=((1.0)*gconst128);
CheckValue<IkReal> x5715=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5714))+(((-1.0)*gconst127*r10)))),-1);
if(!x5715.valid){
continue;
}
CheckValue<IkReal> x5716 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x5714))+((gconst127*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5716.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5715.value)))+(x5716.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5717=IKsin(j14);
IkReal x5718=IKcos(j14);
IkReal x5719=(gconst127*r11);
IkReal x5720=((1.0)*sj10);
IkReal x5721=(gconst127*r01);
IkReal x5722=(sj11*sj12);
IkReal x5723=(gconst127*r21);
IkReal x5724=(cj11*cj12);
IkReal x5725=((1.0)*x5718);
IkReal x5726=((1.0)*gconst128*x5717);
evalcond[0]=((((-1.0)*r20*x5726))+((x5717*x5723))+(((-1.0)*r22*x5725)));
evalcond[1]=((((-1.0)*r12*x5725))+cj10+(((-1.0)*r10*x5726))+((x5717*x5719)));
evalcond[2]=((((-1.0)*x5720))+((x5717*x5721))+(((-1.0)*r02*x5725))+(((-1.0)*r00*x5726)));
evalcond[3]=(((r22*x5717))+((x5718*x5723))+((cj12*sj11))+(((-1.0)*gconst128*r20*x5725))+((cj11*sj12)));
evalcond[4]=(((r02*x5717))+(((-1.0)*gconst128*r00*x5725))+((x5718*x5721))+(((-1.0)*cj10*x5724))+((cj10*x5722)));
evalcond[5]=((((-1.0)*gconst128*r10*x5725))+((r12*x5717))+(((-1.0)*x5720*x5724))+((sj10*x5722))+((x5718*x5719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5727=((-1.0)*r01);
IkReal x5729 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5729)==0){
continue;
}
IkReal x5728=pow(x5729,-0.5);
CheckValue<IkReal> x5730 = IKatan2WithCheck(IkReal(x5727),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5730.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5730.value))));
IkReal gconst130=(x5727*x5728);
IkReal gconst131=((1.0)*r00*x5728);
CheckValue<IkReal> x5731 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5731.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x5731.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[5];
IkReal x5732=((-1.0)*r01);
CheckValue<IkReal> x5735 = IKatan2WithCheck(IkReal(x5732),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5735.valid){
continue;
}
IkReal x5733=((1.0)*(x5735.value));
IkReal x5734=x5728;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst130;
cj15=gconst131;
j15=((3.14159265)+(((-1.0)*x5733)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5733)));
IkReal gconst130=(x5732*x5734);
IkReal gconst131=((1.0)*r00*x5734);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=cj10;
j14eval[3]=r22;
j14eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  || IKabs(j14eval[4]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x5736=((-1.0)*r01);
CheckValue<IkReal> x5739 = IKatan2WithCheck(IkReal(x5736),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5739.valid){
continue;
}
IkReal x5737=((1.0)*(x5739.value));
IkReal x5738=x5728;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst130;
cj15=gconst131;
j15=((3.14159265)+(((-1.0)*x5737)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5737)));
IkReal gconst130=(x5736*x5738);
IkReal gconst131=((1.0)*r00*x5738);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x5740=((-1.0)*r01);
CheckValue<IkReal> x5743 = IKatan2WithCheck(IkReal(x5740),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5743.valid){
continue;
}
IkReal x5741=((1.0)*(x5743.value));
IkReal x5742=x5728;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst130;
cj15=gconst131;
j15=((3.14159265)+(((-1.0)*x5741)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5741)));
IkReal gconst130=(x5740*x5742);
IkReal gconst131=((1.0)*r00*x5742);
IkReal x5744=r02*r02;
IkReal x5745=(r12*sj10);
IkReal x5746=x5728;
IkReal x5747=(cj10*x5746);
j14eval[0]=((IKabs(((((-1.0)*x5745))+(((-1.0)*cj10*r02)))))+(IKabs((((r02*x5745*x5746))+((x5744*x5747))+(((-1.0)*x5747))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5748=((1.0)*gconst130);
CheckValue<IkReal> x5749=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5748))+(((-1.0)*gconst131*r21)))),-1);
if(!x5749.valid){
continue;
}
CheckValue<IkReal> x5750 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x5748))+((gconst131*r10*sj10))+(((-1.0)*r11*sj10*x5748))+((cj10*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5750.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5749.value)))+(x5750.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5751=IKsin(j14);
IkReal x5752=IKcos(j14);
IkReal x5753=(gconst131*r10);
IkReal x5754=((1.0)*sj10);
IkReal x5755=(gconst130*r11);
IkReal x5756=(gconst131*r20);
IkReal x5757=(sj11*sj12);
IkReal x5758=(gconst131*r00);
IkReal x5759=(cj11*cj12);
IkReal x5760=((1.0)*x5752);
IkReal x5761=((1.0)*x5751);
IkReal x5762=(gconst130*x5752);
IkReal x5763=(gconst130*x5751);
evalcond[0]=((((-1.0)*x5756*x5761))+((r21*x5763))+(((-1.0)*r22*x5760)));
evalcond[1]=((((-1.0)*r12*x5760))+cj10+((x5751*x5755))+(((-1.0)*x5753*x5761)));
evalcond[2]=(((r01*x5763))+(((-1.0)*x5758*x5761))+(((-1.0)*x5754))+(((-1.0)*r02*x5760)));
evalcond[3]=((((-1.0)*x5756*x5760))+((r21*x5762))+((cj12*sj11))+((cj11*sj12))+((r22*x5751)));
evalcond[4]=(((r01*x5762))+(((-1.0)*x5758*x5760))+(((-1.0)*cj10*x5759))+((r02*x5751))+((cj10*x5757)));
evalcond[5]=(((sj10*x5757))+((x5752*x5755))+(((-1.0)*x5754*x5759))+((r12*x5751))+(((-1.0)*x5753*x5760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5764=((1.0)*gconst131);
CheckValue<IkReal> x5765=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5764))+(((-1.0)*gconst130*r10)))),-1);
if(!x5765.valid){
continue;
}
CheckValue<IkReal> x5766 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x5764))+((gconst130*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5766.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5765.value)))+(x5766.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5767=IKsin(j14);
IkReal x5768=IKcos(j14);
IkReal x5769=(gconst131*r10);
IkReal x5770=((1.0)*sj10);
IkReal x5771=(gconst130*r11);
IkReal x5772=(gconst131*r20);
IkReal x5773=(sj11*sj12);
IkReal x5774=(gconst131*r00);
IkReal x5775=(cj11*cj12);
IkReal x5776=((1.0)*x5768);
IkReal x5777=((1.0)*x5767);
IkReal x5778=(gconst130*x5768);
IkReal x5779=(gconst130*x5767);
evalcond[0]=(((r21*x5779))+(((-1.0)*r22*x5776))+(((-1.0)*x5772*x5777)));
evalcond[1]=(((x5767*x5771))+(((-1.0)*x5769*x5777))+(((-1.0)*r12*x5776))+cj10);
evalcond[2]=(((r01*x5779))+(((-1.0)*x5774*x5777))+(((-1.0)*r02*x5776))+(((-1.0)*x5770)));
evalcond[3]=(((r22*x5767))+((r21*x5778))+((cj12*sj11))+(((-1.0)*x5772*x5776))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj10*x5775))+((r01*x5778))+(((-1.0)*x5774*x5776))+((cj10*x5773))+((r02*x5767)));
evalcond[5]=((((-1.0)*x5769*x5776))+(((-1.0)*x5770*x5775))+((x5768*x5771))+((r12*x5767))+((sj10*x5773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5780=((1.0)*gconst131);
CheckValue<IkReal> x5781=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5780))+(((-1.0)*gconst130*r00)))),-1);
if(!x5781.valid){
continue;
}
CheckValue<IkReal> x5782 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst130*r21))+(((-1.0)*cj10*r20*x5780)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5782.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5781.value)))+(x5782.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5783=IKsin(j14);
IkReal x5784=IKcos(j14);
IkReal x5785=(gconst131*r10);
IkReal x5786=((1.0)*sj10);
IkReal x5787=(gconst130*r11);
IkReal x5788=(gconst131*r20);
IkReal x5789=(sj11*sj12);
IkReal x5790=(gconst131*r00);
IkReal x5791=(cj11*cj12);
IkReal x5792=((1.0)*x5784);
IkReal x5793=((1.0)*x5783);
IkReal x5794=(gconst130*x5784);
IkReal x5795=(gconst130*x5783);
evalcond[0]=(((r21*x5795))+(((-1.0)*r22*x5792))+(((-1.0)*x5788*x5793)));
evalcond[1]=((((-1.0)*x5785*x5793))+cj10+((x5783*x5787))+(((-1.0)*r12*x5792)));
evalcond[2]=((((-1.0)*x5786))+((r01*x5795))+(((-1.0)*x5790*x5793))+(((-1.0)*r02*x5792)));
evalcond[3]=(((r21*x5794))+((r22*x5783))+((cj12*sj11))+(((-1.0)*x5788*x5792))+((cj11*sj12)));
evalcond[4]=(((cj10*x5789))+((r01*x5794))+(((-1.0)*x5790*x5792))+(((-1.0)*cj10*x5791))+((r02*x5783)));
evalcond[5]=((((-1.0)*x5785*x5792))+((x5784*x5787))+((r12*x5783))+(((-1.0)*x5786*x5791))+((sj10*x5789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x5796=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x5796;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x5796);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x5797=((1.0)*cj15);
IkReal x5798=((((-1.0)*r11*x5797))+(((-1.0)*r10*sj15)));
j14eval[0]=x5798;
j14eval[1]=IKsign(x5798);
j14eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x5797))+((r21*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x5799=cj15*cj15;
IkReal x5800=r01*r01;
IkReal x5801=(cj15*r00);
IkReal x5802=(r01*sj15);
IkReal x5803=((((-1.0)*x5799*x5800))+(r02*r02)+(((-2.0)*x5801*x5802))+x5800+((x5799*(r00*r00))));
j14eval[0]=x5803;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x5801))+x5802))));
j14eval[2]=IKsign(x5803);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5804=cj15*cj15;
IkReal x5805=r01*r01;
IkReal x5806=(r01*sj15);
IkReal x5807=(cj15*r00);
CheckValue<IkReal> x5808=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5804*x5805))+(r02*r02)+((x5804*(r00*r00)))+(((-2.0)*x5806*x5807))+x5805)),-1);
if(!x5808.valid){
continue;
}
CheckValue<IkReal> x5809 = IKatan2WithCheck(IkReal(((((-1.0)*x5807))+x5806)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5809.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5808.value)))+(x5809.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5810=IKcos(j14);
IkReal x5811=IKsin(j14);
IkReal x5812=(cj15*r20);
IkReal x5813=(cj15*r10);
IkReal x5814=(cj15*r00);
IkReal x5815=((1.0)*x5810);
IkReal x5816=(sj15*x5810);
IkReal x5817=((1.0)*x5811);
IkReal x5818=(sj15*x5811);
evalcond[0]=((((-1.0)*x5814*x5815))+((r02*x5811))+((r01*x5816)));
evalcond[1]=(((r21*x5818))+(((-1.0)*x5812*x5817))+(((-1.0)*r22*x5815)));
evalcond[2]=((((-1.0)*r12*x5815))+(((-1.0)*x5813*x5817))+((r11*x5818)));
evalcond[3]=((-1.0)+(((-1.0)*x5814*x5817))+(((-1.0)*r02*x5815))+((r01*x5818)));
evalcond[4]=(((r21*x5816))+((r22*x5811))+((cj12*sj11))+(((-1.0)*x5812*x5815))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x5813*x5815))+((r11*x5816))+((r12*x5811))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5819=((1.0)*cj15);
CheckValue<IkReal> x5820=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5819))+(((-1.0)*r10*sj15)))),-1);
if(!x5820.valid){
continue;
}
CheckValue<IkReal> x5821 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj15))+(((-1.0)*r20*x5819)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5821.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5820.value)))+(x5821.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5822=IKcos(j14);
IkReal x5823=IKsin(j14);
IkReal x5824=(cj15*r20);
IkReal x5825=(cj15*r10);
IkReal x5826=(cj15*r00);
IkReal x5827=((1.0)*x5822);
IkReal x5828=(sj15*x5822);
IkReal x5829=((1.0)*x5823);
IkReal x5830=(sj15*x5823);
evalcond[0]=(((r02*x5823))+((r01*x5828))+(((-1.0)*x5826*x5827)));
evalcond[1]=((((-1.0)*r22*x5827))+((r21*x5830))+(((-1.0)*x5824*x5829)));
evalcond[2]=(((r11*x5830))+(((-1.0)*r12*x5827))+(((-1.0)*x5825*x5829)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x5827))+((r01*x5830))+(((-1.0)*x5826*x5829)));
evalcond[4]=(((r21*x5828))+(((-1.0)*x5824*x5827))+((cj12*sj11))+((r22*x5823))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r12*x5823))+((r11*x5828))+(((-1.0)*x5825*x5827))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x5831=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x5831.valid){
continue;
}
CheckValue<IkReal> x5832 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5832.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5831.value)))+(x5832.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5833=IKcos(j14);
IkReal x5834=IKsin(j14);
IkReal x5835=(cj15*r20);
IkReal x5836=(cj15*r10);
IkReal x5837=(cj15*r00);
IkReal x5838=((1.0)*x5833);
IkReal x5839=(sj15*x5833);
IkReal x5840=((1.0)*x5834);
IkReal x5841=(sj15*x5834);
evalcond[0]=(((r02*x5834))+((r01*x5839))+(((-1.0)*x5837*x5838)));
evalcond[1]=((((-1.0)*r22*x5838))+((r21*x5841))+(((-1.0)*x5835*x5840)));
evalcond[2]=(((r11*x5841))+(((-1.0)*x5836*x5840))+(((-1.0)*r12*x5838)));
evalcond[3]=((-1.0)+(((-1.0)*x5837*x5840))+(((-1.0)*r02*x5838))+((r01*x5841)));
evalcond[4]=(((r21*x5839))+((cj12*sj11))+((r22*x5834))+((cj11*sj12))+(((-1.0)*x5835*x5838)));
evalcond[5]=(((sj11*sj12))+((r12*x5834))+((r11*x5839))+(((-1.0)*cj11*cj12))+(((-1.0)*x5836*x5838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x5842=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x5842;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x5842);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x5843=((1.0)*cj15);
IkReal x5844=((((-1.0)*r21*x5843))+(((-1.0)*r20*sj15)));
j14eval[0]=x5844;
j14eval[1]=IKsign(x5844);
j14eval[2]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*r10*x5843))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x5845=(cj11*sj12);
IkReal x5846=(r01*sj15);
IkReal x5847=((1.0)*r02);
IkReal x5848=(cj12*sj11);
IkReal x5849=((1.0)*cj15*r00);
IkReal x5850=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x5850;
j14eval[1]=IKsign(x5850);
j14eval[2]=((IKabs((((x5845*x5846))+((x5846*x5848))+(((-1.0)*x5848*x5849))+(((-1.0)*x5845*x5849)))))+(IKabs(((((-1.0)*x5847*x5848))+(((-1.0)*x5845*x5847))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5851=(cj11*sj12);
IkReal x5852=(r01*sj15);
IkReal x5853=((1.0)*r02);
IkReal x5854=(cj12*sj11);
IkReal x5855=((1.0)*cj15*r00);
CheckValue<IkReal> x5856 = IKatan2WithCheck(IkReal((((x5852*x5854))+((x5851*x5852))+(((-1.0)*x5854*x5855))+(((-1.0)*x5851*x5855)))),IkReal(((((-1.0)*x5853*x5854))+(((-1.0)*x5851*x5853)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5856.valid){
continue;
}
CheckValue<IkReal> x5857=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x5857.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5856.value)+(((1.5707963267949)*(x5857.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5858=IKcos(j14);
IkReal x5859=IKsin(j14);
IkReal x5860=(cj15*r20);
IkReal x5861=(cj15*r10);
IkReal x5862=(cj15*r00);
IkReal x5863=((1.0)*x5858);
IkReal x5864=(sj15*x5858);
IkReal x5865=((1.0)*x5859);
IkReal x5866=(sj15*x5859);
evalcond[0]=((((-1.0)*x5862*x5863))+((r02*x5859))+((r01*x5864)));
evalcond[1]=((((-1.0)*r22*x5863))+((r21*x5866))+(((-1.0)*x5860*x5865)));
evalcond[2]=((((-1.0)*x5861*x5865))+((r11*x5866))+(((-1.0)*r12*x5863)));
evalcond[3]=((1.0)+(((-1.0)*x5862*x5865))+(((-1.0)*r02*x5863))+((r01*x5866)));
evalcond[4]=(((r21*x5864))+((r22*x5859))+(((-1.0)*x5860*x5863))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+(((-1.0)*x5861*x5863))+((cj11*cj12))+((r12*x5859))+((r11*x5864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5867=((1.0)*cj15);
CheckValue<IkReal> x5868 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x5867))+((r11*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5868.valid){
continue;
}
CheckValue<IkReal> x5869=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15))+(((-1.0)*r21*x5867)))),-1);
if(!x5869.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5868.value)+(((1.5707963267949)*(x5869.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5870=IKcos(j14);
IkReal x5871=IKsin(j14);
IkReal x5872=(cj15*r20);
IkReal x5873=(cj15*r10);
IkReal x5874=(cj15*r00);
IkReal x5875=((1.0)*x5870);
IkReal x5876=(sj15*x5870);
IkReal x5877=((1.0)*x5871);
IkReal x5878=(sj15*x5871);
evalcond[0]=((((-1.0)*x5874*x5875))+((r02*x5871))+((r01*x5876)));
evalcond[1]=((((-1.0)*r22*x5875))+(((-1.0)*x5872*x5877))+((r21*x5878)));
evalcond[2]=((((-1.0)*r12*x5875))+(((-1.0)*x5873*x5877))+((r11*x5878)));
evalcond[3]=((1.0)+(((-1.0)*x5874*x5877))+(((-1.0)*r02*x5875))+((r01*x5878)));
evalcond[4]=(((r22*x5871))+(((-1.0)*x5872*x5875))+((cj12*sj11))+((cj11*sj12))+((r21*x5876)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*x5873*x5875))+((r12*x5871))+((r11*x5876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x5879=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x5879.valid){
continue;
}
CheckValue<IkReal> x5880 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5880.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5879.value)))+(x5880.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5881=IKcos(j14);
IkReal x5882=IKsin(j14);
IkReal x5883=(cj15*r20);
IkReal x5884=(cj15*r10);
IkReal x5885=(cj15*r00);
IkReal x5886=((1.0)*x5881);
IkReal x5887=(sj15*x5881);
IkReal x5888=((1.0)*x5882);
IkReal x5889=(sj15*x5882);
evalcond[0]=(((r01*x5887))+(((-1.0)*x5885*x5886))+((r02*x5882)));
evalcond[1]=((((-1.0)*x5883*x5888))+((r21*x5889))+(((-1.0)*r22*x5886)));
evalcond[2]=(((r11*x5889))+(((-1.0)*r12*x5886))+(((-1.0)*x5884*x5888)));
evalcond[3]=((1.0)+((r01*x5889))+(((-1.0)*x5885*x5888))+(((-1.0)*r02*x5886)));
evalcond[4]=((((-1.0)*x5883*x5886))+((r22*x5882))+((r21*x5887))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((r12*x5882))+((cj11*cj12))+((r11*x5887))+(((-1.0)*x5884*x5886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x5890=((-1.0)*px);
sj13=0;
cj13=1.0;
j13=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5890);
rxp1_1=(px*r21);
rxp1_2=(r11*x5890);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x5891=((-1.0)*px);
sj13=0;
cj13=1.0;
j13=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5891);
rxp1_1=(px*r21);
rxp1_2=(r11*x5891);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=((((-1.0)*cj15*r20))+((r21*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x5892=((-1.0)*px);
sj13=0;
cj13=1.0;
j13=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5892);
rxp1_1=(px*r21);
rxp1_2=(r11*x5892);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=(((r11*sj15))+(((-1.0)*cj15*r10)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x5895=IKPowWithIntegerCheck((((r11*sj15))+(((-1.0)*cj15*r10))),-1);
if(!x5895.valid){
continue;
}
IkReal x5893=x5895.value;
IkReal x5894=(sj10*x5893);
cj14array[0]=((((-1.0)*sj11*sj12*x5894))+((cj11*cj12*x5894)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x5896=IKsin(j14);
IkReal x5897=IKcos(j14);
IkReal x5898=(sj15*x5896);
IkReal x5899=((1.0)*x5897);
IkReal x5900=((1.0)*cj15*x5896);
evalcond[0]=(r02*x5896);
evalcond[1]=((((-1.0)*r02*x5899))+(((-1.0)*sj10)));
evalcond[2]=(((r21*x5898))+(((-1.0)*r20*x5900)));
evalcond[3]=((((-1.0)*r10*x5900))+((r11*x5898)));
evalcond[4]=((((-1.0)*cj15*r20*x5899))+((cj12*sj11))+((r21*sj15*x5897))+((cj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x5903=IKPowWithIntegerCheck(((((-1.0)*cj15*r20))+((r21*sj15))),-1);
if(!x5903.valid){
continue;
}
IkReal x5901=x5903.value;
IkReal x5902=((1.0)*x5901);
cj14array[0]=((((-1.0)*cj11*sj12*x5902))+(((-1.0)*cj12*sj11*x5902)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x5904=IKsin(j14);
IkReal x5905=IKcos(j14);
IkReal x5906=(cj15*r10);
IkReal x5907=((1.0)*sj10);
IkReal x5908=(sj15*x5904);
IkReal x5909=((1.0)*x5905);
IkReal x5910=((1.0)*x5904);
evalcond[0]=(r02*x5904);
evalcond[1]=((((-1.0)*r02*x5909))+(((-1.0)*x5907)));
evalcond[2]=((((-1.0)*cj15*r20*x5910))+((r21*x5908)));
evalcond[3]=((((-1.0)*x5906*x5910))+((r11*x5908)));
evalcond[4]=(((r11*sj15*x5905))+(((-1.0)*x5906*x5909))+((sj10*sj11*sj12))+(((-1.0)*cj11*cj12*x5907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x5911=IKPowWithIntegerCheck(r02,-1);
if(!x5911.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x5911.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x5912=IKsin(j14);
IkReal x5913=IKcos(j14);
IkReal x5914=((1.0)*cj15);
IkReal x5915=(sj15*x5912);
IkReal x5916=(sj15*x5913);
evalcond[0]=(r02*x5912);
evalcond[1]=((((-1.0)*r20*x5912*x5914))+((r21*x5915)));
evalcond[2]=((((-1.0)*r10*x5912*x5914))+((r11*x5915)));
evalcond[3]=((((-1.0)*r20*x5913*x5914))+((cj12*sj11))+((r21*x5916))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj11*cj12*sj10))+(((-1.0)*r10*x5913*x5914))+((sj10*sj11*sj12))+((r11*x5916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5917=((1.0)*sj15);
CheckValue<IkReal> x5918=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5917))+(((-1.0)*cj15*r21)))),-1);
if(!x5918.valid){
continue;
}
CheckValue<IkReal> x5919 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((cj15*r10*sj10))+(((-1.0)*r11*sj10*x5917))+(((-1.0)*cj10*r01*x5917))+((cj10*cj15*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5919.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5918.value)))+(x5919.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5920=IKsin(j14);
IkReal x5921=IKcos(j14);
IkReal x5922=(cj15*r20);
IkReal x5923=((1.0)*sj10);
IkReal x5924=(cj15*r10);
IkReal x5925=(sj11*sj12);
IkReal x5926=(cj15*r00);
IkReal x5927=(cj11*cj12);
IkReal x5928=((1.0)*x5921);
IkReal x5929=(sj15*x5921);
IkReal x5930=((1.0)*x5920);
IkReal x5931=(sj15*x5920);
evalcond[0]=((((-1.0)*r22*x5928))+((r21*x5931))+(((-1.0)*x5922*x5930)));
evalcond[1]=(((r11*x5931))+cj10+(((-1.0)*x5924*x5930))+(((-1.0)*r12*x5928)));
evalcond[2]=((((-1.0)*x5926*x5930))+(((-1.0)*r02*x5928))+(((-1.0)*x5923))+((r01*x5931)));
evalcond[3]=(((r22*x5920))+((r21*x5929))+((cj12*sj11))+(((-1.0)*x5922*x5928))+((cj11*sj12)));
evalcond[4]=(((cj10*x5925))+(((-1.0)*cj10*x5927))+((r01*x5929))+(((-1.0)*x5926*x5928))+((r02*x5920)));
evalcond[5]=(((sj10*x5925))+((r11*x5929))+((r12*x5920))+(((-1.0)*x5924*x5928))+(((-1.0)*x5923*x5927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5932=((1.0)*cj15);
CheckValue<IkReal> x5933=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5932))+(((-1.0)*r10*sj15)))),-1);
if(!x5933.valid){
continue;
}
CheckValue<IkReal> x5934 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x5932))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5934.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5933.value)))+(x5934.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5935=IKsin(j14);
IkReal x5936=IKcos(j14);
IkReal x5937=(cj15*r20);
IkReal x5938=((1.0)*sj10);
IkReal x5939=(cj15*r10);
IkReal x5940=(sj11*sj12);
IkReal x5941=(cj15*r00);
IkReal x5942=(cj11*cj12);
IkReal x5943=((1.0)*x5936);
IkReal x5944=(sj15*x5936);
IkReal x5945=((1.0)*x5935);
IkReal x5946=(sj15*x5935);
evalcond[0]=((((-1.0)*r22*x5943))+(((-1.0)*x5937*x5945))+((r21*x5946)));
evalcond[1]=((((-1.0)*r12*x5943))+cj10+(((-1.0)*x5939*x5945))+((r11*x5946)));
evalcond[2]=(((r01*x5946))+(((-1.0)*x5941*x5945))+(((-1.0)*x5938))+(((-1.0)*r02*x5943)));
evalcond[3]=((((-1.0)*x5937*x5943))+((r22*x5935))+((r21*x5944))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((cj10*x5940))+((r01*x5944))+(((-1.0)*cj10*x5942))+(((-1.0)*x5941*x5943))+((r02*x5935)));
evalcond[5]=((((-1.0)*x5938*x5942))+((r12*x5935))+(((-1.0)*x5939*x5943))+((r11*x5944))+((sj10*x5940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5947=((1.0)*cj15);
CheckValue<IkReal> x5948 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x5947))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5948.valid){
continue;
}
CheckValue<IkReal> x5949=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x5947)))),-1);
if(!x5949.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x5948.value)+(((1.5707963267949)*(x5949.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x5950=IKsin(j14);
IkReal x5951=IKcos(j14);
IkReal x5952=(cj15*r20);
IkReal x5953=((1.0)*sj10);
IkReal x5954=(cj15*r10);
IkReal x5955=(sj11*sj12);
IkReal x5956=(cj15*r00);
IkReal x5957=(cj11*cj12);
IkReal x5958=((1.0)*x5951);
IkReal x5959=(sj15*x5951);
IkReal x5960=((1.0)*x5950);
IkReal x5961=(sj15*x5950);
evalcond[0]=((((-1.0)*x5952*x5960))+((r21*x5961))+(((-1.0)*r22*x5958)));
evalcond[1]=((((-1.0)*x5954*x5960))+cj10+((r11*x5961))+(((-1.0)*r12*x5958)));
evalcond[2]=(((r01*x5961))+(((-1.0)*x5956*x5960))+(((-1.0)*r02*x5958))+(((-1.0)*x5953)));
evalcond[3]=(((r21*x5959))+(((-1.0)*x5952*x5958))+((cj12*sj11))+((r22*x5950))+((cj11*sj12)));
evalcond[4]=(((r02*x5950))+((cj10*x5955))+(((-1.0)*x5956*x5958))+(((-1.0)*cj10*x5957))+((r01*x5959)));
evalcond[5]=(((r11*x5959))+((r12*x5950))+((sj10*x5955))+(((-1.0)*x5954*x5958))+(((-1.0)*x5953*x5957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x5962=r21*r21;
IkReal x5963=cj15*cj15;
IkReal x5964=(cj15*r20);
IkReal x5965=(cj12*sj11);
IkReal x5966=(r21*sj15);
IkReal x5967=(cj11*sj12);
CheckValue<IkReal> x5968=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5962))+(((-1.0)*x5963*(r20*r20)))+((x5962*x5963))+(((-1.0)*(r22*r22)))+(((2.0)*x5964*x5966)))),-1);
if(!x5968.valid){
continue;
}
CheckValue<IkReal> x5969 = IKatan2WithCheck(IkReal((((r22*x5965))+((r22*x5967)))),IkReal((((x5965*x5966))+((x5966*x5967))+(((-1.0)*x5964*x5965))+(((-1.0)*x5964*x5967)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5969.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5968.value)))+(x5969.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
IkReal x5970=IKsin(j14);
IkReal x5971=IKcos(j14);
IkReal x5972=(r21*sj15);
IkReal x5973=(cj15*r20);
IkReal x5974=((1.0)*x5971);
evalcond[0]=(((x5970*x5972))+(((-1.0)*r22*x5974))+(((-1.0)*x5970*x5973)));
evalcond[1]=(((r22*x5970))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*x5973*x5974))+((x5971*x5972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5975=(cj15*sj14);
IkReal x5976=(sj14*sj15);
if( IKabs((((r01*x5976))+(((-1.0)*cj14*r02))+(((-1.0)*r00*x5975)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x5976))+((cj14*r12))+((r10*x5975)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x5976))+(((-1.0)*cj14*r02))+(((-1.0)*r00*x5975))))+IKsqr(((((-1.0)*r11*x5976))+((cj14*r12))+((r10*x5975))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((r01*x5976))+(((-1.0)*cj14*r02))+(((-1.0)*r00*x5975))), ((((-1.0)*r11*x5976))+((cj14*r12))+((r10*x5975))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x5977=IKcos(j10);
IkReal x5978=IKsin(j10);
IkReal x5979=(cj14*sj15);
IkReal x5980=(sj11*sj12);
IkReal x5981=((1.0)*cj14);
IkReal x5982=(r10*sj15);
IkReal x5983=(cj15*r00);
IkReal x5984=(sj14*sj15);
IkReal x5985=(cj11*cj12);
IkReal x5986=((1.0)*sj14);
IkReal x5987=((1.0)*sj12);
IkReal x5988=(cj12*sj11);
IkReal x5989=(r00*sj15);
IkReal x5990=(cj15*r10);
IkReal x5991=(cj15*r11);
IkReal x5992=(cj15*r01);
IkReal x5993=(cj11*x5978);
IkReal x5994=((0.21325)*x5977);
IkReal x5995=((1.0)*x5977);
IkReal x5996=(cj11*x5977);
IkReal x5997=((1.0)*x5978);
evalcond[0]=((((-1.0)*r12*x5981))+(((-1.0)*x5986*x5990))+((r11*x5984))+x5977);
evalcond[1]=((((-1.0)*r02*x5981))+((r01*x5984))+(((-1.0)*x5983*x5986))+(((-1.0)*x5997)));
evalcond[2]=((((-1.0)*x5987*x5996))+(((-1.0)*x5988*x5995))+x5989+x5992);
evalcond[3]=((((-1.0)*x5987*x5993))+(((-1.0)*x5988*x5997))+x5982+x5991);
evalcond[4]=(((r02*sj14))+(((-1.0)*x5985*x5995))+((x5977*x5980))+((r01*x5979))+(((-1.0)*x5981*x5983)));
evalcond[5]=(((r12*sj14))+((x5978*x5980))+(((-1.0)*x5985*x5997))+((r11*x5979))+(((-1.0)*x5981*x5990)));
evalcond[6]=(((x5985*x5994))+(((-1.0)*x5980*x5994))+(((-0.08535)*x5989))+(((-0.08535)*x5992))+(((-1.0)*px))+(((0.24365)*x5996))+(((-0.11235)*x5978)));
evalcond[7]=((((-0.08535)*x5982))+(((-0.08535)*x5991))+(((-1.0)*py))+(((0.21325)*x5978*x5985))+(((0.24365)*x5993))+(((-0.21325)*x5978*x5980))+(((0.11235)*x5977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x5998=((1.0)*cj15);
IkReal x5999=((1.0)*sj15);
CheckValue<IkReal> x6000=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*sj11)))),-1);
if(!x6000.valid){
continue;
}
CheckValue<IkReal> x6001 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x5998))+(((-1.0)*r10*x5999)))),IkReal(((((-1.0)*r01*x5998))+(((-1.0)*r00*x5999)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6001.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6000.value)))+(x6001.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x6002=IKcos(j10);
IkReal x6003=IKsin(j10);
IkReal x6004=(sj11*sj12);
IkReal x6005=(r10*sj15);
IkReal x6006=((1.0)*sj12);
IkReal x6007=(r00*sj15);
IkReal x6008=((0.08535)*cj15);
IkReal x6009=(cj11*x6003);
IkReal x6010=((0.21325)*x6002);
IkReal x6011=((1.0)*cj12*sj11);
IkReal x6012=(cj11*x6002);
evalcond[0]=(((cj15*r01))+x6007+(((-1.0)*x6006*x6012))+(((-1.0)*x6002*x6011)));
evalcond[1]=(((cj15*r11))+x6005+(((-1.0)*x6006*x6009))+(((-1.0)*x6003*x6011)));
evalcond[2]=(((cj11*cj12*x6010))+(((-1.0)*r01*x6008))+(((-1.0)*px))+(((-0.08535)*x6007))+(((-1.0)*x6004*x6010))+(((0.24365)*x6012))+(((-0.11235)*x6003)));
evalcond[3]=((((0.11235)*x6002))+(((-1.0)*r11*x6008))+(((0.24365)*x6009))+(((0.21325)*cj12*x6009))+(((-0.21325)*x6003*x6004))+(((-1.0)*py))+(((-0.08535)*x6005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x6013=((1.0)*cj15);
IkReal x6014=((((-1.0)*r00*sj15))+(((-1.0)*r01*x6013)));
j14eval[0]=x6014;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x6013))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x6014);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x6015=((1.0)*cj15);
IkReal x6016=((((-1.0)*r11*x6015))+(((-1.0)*r10*sj15)));
j14eval[0]=x6016;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x6015))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x6016);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
IkReal x6017=((1.0)*sj15);
IkReal x6018=((((-1.0)*cj15*r21))+(((-1.0)*r20*x6017)));
j14eval[0]=x6018;
j14eval[1]=((IKabs((((cj15*r10*sj10))+(((-1.0)*cj10*r01*x6017))+((cj10*cj15*r00))+(((-1.0)*r11*sj10*x6017)))))+(IKabs(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02))))));
j14eval[2]=IKsign(x6018);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6019=((-1.0)*r20);
IkReal x6021 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6021)==0){
continue;
}
IkReal x6020=pow(x6021,-0.5);
CheckValue<IkReal> x6022 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6019),IKFAST_ATAN2_MAGTHRESH);
if(!x6022.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6022.value));
IkReal gconst115=(r21*x6020);
IkReal gconst116=(x6019*x6020);
CheckValue<IkReal> x6023 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6023.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x6023.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x6024=((-1.0)*r20);
IkReal x6025=x6020;
CheckValue<IkReal> x6027 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6024),IKFAST_ATAN2_MAGTHRESH);
if(!x6027.valid){
continue;
}
IkReal x6026=((-1.0)*(x6027.value));
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst115;
cj15=gconst116;
j15=x6026;
IkReal gconst114=x6026;
IkReal gconst115=(r21*x6025);
IkReal gconst116=(x6024*x6025);
j14eval[0]=cj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x6028=((-1.0)*r20);
IkReal x6029=x6020;
CheckValue<IkReal> x6031 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6028),IKFAST_ATAN2_MAGTHRESH);
if(!x6031.valid){
continue;
}
IkReal x6030=((-1.0)*(x6031.value));
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst115;
cj15=gconst116;
j15=x6030;
IkReal gconst114=x6030;
IkReal gconst115=(r21*x6029);
IkReal gconst116=(x6028*x6029);
j14eval[0]=sj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x6032=((-1.0)*r20);
IkReal x6033=x6020;
CheckValue<IkReal> x6035 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6032),IKFAST_ATAN2_MAGTHRESH);
if(!x6035.valid){
continue;
}
IkReal x6034=((-1.0)*(x6035.value));
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst115;
cj15=gconst116;
j15=x6034;
IkReal gconst114=x6034;
IkReal gconst115=(r21*x6033);
IkReal gconst116=(x6032*x6033);
IkReal x6036=((1.0)*(r22*r22));
CheckValue<IkReal> x6040=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6036))),-1);
if(!x6040.valid){
continue;
}
IkReal x6037=x6040.value;
IkReal x6038=((1.0)*x6037);
IkReal x6039=((((-1.0)*x6036))+(((-1.0)*x6038*(r20*r20*r20*r20)))+(((-2.0)*x6037*(r20*r20)*(r21*r21)))+(((-1.0)*x6038*(r21*r21*r21*r21))));
j14eval[0]=x6039;
j14eval[1]=IKsign(x6039);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6041=(gconst115*r21);
IkReal x6042=(cj12*sj11);
IkReal x6043=(cj11*sj12);
IkReal x6044=(gconst116*r20);
CheckValue<IkReal> x6045=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6041*x6041)))+(((2.0)*x6041*x6044))+(((-1.0)*(r22*r22)))+(((-1.0)*(x6044*x6044))))),-1);
if(!x6045.valid){
continue;
}
CheckValue<IkReal> x6046 = IKatan2WithCheck(IkReal((((r22*x6042))+((r22*x6043)))),IkReal((((x6041*x6042))+((x6041*x6043))+(((-1.0)*x6042*x6044))+(((-1.0)*x6043*x6044)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6046.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6045.value)))+(x6046.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6047=IKsin(j14);
IkReal x6048=IKcos(j14);
IkReal x6049=((1.0)*sj10);
IkReal x6050=(gconst115*r11);
IkReal x6051=(sj11*sj12);
IkReal x6052=(cj11*cj12);
IkReal x6053=((1.0)*x6048);
IkReal x6054=(gconst115*x6047);
IkReal x6055=(gconst115*x6048);
IkReal x6056=((1.0)*gconst116*x6047);
evalcond[0]=((((-1.0)*r20*x6056))+(((-1.0)*r22*x6053))+((r21*x6054)));
evalcond[1]=(((x6047*x6050))+(((-1.0)*r10*x6056))+cj10+(((-1.0)*r12*x6053)));
evalcond[2]=(((r01*x6054))+(((-1.0)*x6049))+(((-1.0)*r00*x6056))+(((-1.0)*r02*x6053)));
evalcond[3]=((((-1.0)*gconst116*r20*x6053))+((r22*x6047))+((cj12*sj11))+((cj11*sj12))+((r21*x6055)));
evalcond[4]=(((r01*x6055))+(((-1.0)*cj10*x6052))+((r02*x6047))+((cj10*x6051))+(((-1.0)*gconst116*r00*x6053)));
evalcond[5]=((((-1.0)*gconst116*r10*x6053))+(((-1.0)*x6049*x6052))+((x6048*x6050))+((sj10*x6051))+((r12*x6047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6057=((1.0)*gconst116);
CheckValue<IkReal> x6058=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x6057)))),-1);
if(!x6058.valid){
continue;
}
CheckValue<IkReal> x6059 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst115*r21*sj10))+(((-1.0)*r20*sj10*x6057)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6059.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6058.value)))+(x6059.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6060=IKsin(j14);
IkReal x6061=IKcos(j14);
IkReal x6062=((1.0)*sj10);
IkReal x6063=(gconst115*r11);
IkReal x6064=(sj11*sj12);
IkReal x6065=(cj11*cj12);
IkReal x6066=((1.0)*x6061);
IkReal x6067=(gconst115*x6060);
IkReal x6068=(gconst115*x6061);
IkReal x6069=((1.0)*gconst116*x6060);
evalcond[0]=((((-1.0)*r22*x6066))+((r21*x6067))+(((-1.0)*r20*x6069)));
evalcond[1]=((((-1.0)*r10*x6069))+((x6060*x6063))+cj10+(((-1.0)*r12*x6066)));
evalcond[2]=((((-1.0)*r00*x6069))+((r01*x6067))+(((-1.0)*x6062))+(((-1.0)*r02*x6066)));
evalcond[3]=(((r22*x6060))+((r21*x6068))+((cj12*sj11))+(((-1.0)*gconst116*r20*x6066))+((cj11*sj12)));
evalcond[4]=(((cj10*x6064))+((r01*x6068))+(((-1.0)*gconst116*r00*x6066))+(((-1.0)*cj10*x6065))+((r02*x6060)));
evalcond[5]=(((sj10*x6064))+((x6061*x6063))+((r12*x6060))+(((-1.0)*x6062*x6065))+(((-1.0)*gconst116*r10*x6066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6070=((1.0)*gconst116);
CheckValue<IkReal> x6071 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst115*r21))+(((-1.0)*cj10*r20*x6070)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6071.valid){
continue;
}
CheckValue<IkReal> x6072=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x6070)))),-1);
if(!x6072.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6071.value)+(((1.5707963267949)*(x6072.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6073=IKsin(j14);
IkReal x6074=IKcos(j14);
IkReal x6075=((1.0)*sj10);
IkReal x6076=(gconst115*r11);
IkReal x6077=(sj11*sj12);
IkReal x6078=(cj11*cj12);
IkReal x6079=((1.0)*x6074);
IkReal x6080=(gconst115*x6073);
IkReal x6081=(gconst115*x6074);
IkReal x6082=((1.0)*gconst116*x6073);
evalcond[0]=(((r21*x6080))+(((-1.0)*r20*x6082))+(((-1.0)*r22*x6079)));
evalcond[1]=(cj10+(((-1.0)*r12*x6079))+((x6073*x6076))+(((-1.0)*r10*x6082)));
evalcond[2]=((((-1.0)*r00*x6082))+((r01*x6080))+(((-1.0)*x6075))+(((-1.0)*r02*x6079)));
evalcond[3]=((((-1.0)*gconst116*r20*x6079))+((r22*x6073))+((r21*x6081))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((r01*x6081))+(((-1.0)*cj10*x6078))+(((-1.0)*gconst116*r00*x6079))+((cj10*x6077))+((r02*x6073)));
evalcond[5]=((((-1.0)*gconst116*r10*x6079))+((sj10*x6077))+((x6074*x6076))+(((-1.0)*x6075*x6078))+((r12*x6073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6083=((-1.0)*r21);
IkReal x6085 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6085)==0){
continue;
}
IkReal x6084=pow(x6085,-0.5);
CheckValue<IkReal> x6086 = IKatan2WithCheck(IkReal(x6083),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6086.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6086.value))));
IkReal gconst118=(x6083*x6084);
IkReal gconst119=((1.0)*r20*x6084);
CheckValue<IkReal> x6087 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6087.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x6087.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x6088=((-1.0)*r21);
CheckValue<IkReal> x6091 = IKatan2WithCheck(IkReal(x6088),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6091.valid){
continue;
}
IkReal x6089=((1.0)*(x6091.value));
IkReal x6090=x6084;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst118;
cj15=gconst119;
j15=((3.14159265)+(((-1.0)*x6089)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6089)));
IkReal gconst118=(x6088*x6090);
IkReal gconst119=((1.0)*r20*x6090);
IkReal x6092=r22*r22;
IkReal x6093=((1.0)*x6092);
CheckValue<IkReal> x6097=IKPowWithIntegerCheck(((-1.0)+x6092),-1);
if(!x6097.valid){
continue;
}
IkReal x6094=x6097.value;
if((((1.0)+(((-1.0)*x6093)))) < -0.00001)
continue;
IkReal x6095=IKsqrt(((1.0)+(((-1.0)*x6093))));
IkReal x6096=(cj10*x6094*x6095);
j14eval[0]=((IKabs((x6096+(((-1.0)*x6093*x6096)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x6098=((-1.0)*r21);
CheckValue<IkReal> x6101 = IKatan2WithCheck(IkReal(x6098),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6101.valid){
continue;
}
IkReal x6099=((1.0)*(x6101.value));
IkReal x6100=x6084;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst118;
cj15=gconst119;
j15=((3.14159265)+(((-1.0)*x6099)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6099)));
IkReal gconst118=(x6098*x6100);
IkReal gconst119=((1.0)*r20*x6100);
IkReal x6102=r22*r22;
IkReal x6103=((1.0)*x6102);
CheckValue<IkReal> x6107=IKPowWithIntegerCheck(((-1.0)+x6102),-1);
if(!x6107.valid){
continue;
}
IkReal x6104=x6107.value;
if((((1.0)+(((-1.0)*x6103)))) < -0.00001)
continue;
IkReal x6105=IKsqrt(((1.0)+(((-1.0)*x6103))));
IkReal x6106=(sj10*x6104*x6105);
j14eval[0]=((IKabs(((((-1.0)*x6103*x6106))+x6106)))+(IKabs((r22*sj10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x6108=((-1.0)*r21);
CheckValue<IkReal> x6111 = IKatan2WithCheck(IkReal(x6108),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6111.valid){
continue;
}
IkReal x6109=((1.0)*(x6111.value));
IkReal x6110=x6084;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst118;
cj15=gconst119;
j15=((3.14159265)+(((-1.0)*x6109)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6109)));
IkReal gconst118=(x6108*x6110);
IkReal gconst119=((1.0)*r20*x6110);
IkReal x6112=r22*r22;
IkReal x6113=(cj10*r02);
IkReal x6114=(r12*sj10);
CheckValue<IkReal> x6118=IKPowWithIntegerCheck(((-1.0)+x6112),-1);
if(!x6118.valid){
continue;
}
IkReal x6115=x6118.value;
if((((1.0)+(((-1.0)*x6112)))) < -0.00001)
continue;
IkReal x6116=IKsqrt(((1.0)+(((-1.0)*x6112))));
IkReal x6117=(r22*x6115*x6116);
j14eval[0]=0;
j14eval[1]=((IKabs(((((-1.0)*x6113))+(((-1.0)*x6114)))))+(IKabs((((x6113*x6117))+((x6114*x6117))))));
j14eval[2]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6119=((1.0)*gconst118);
CheckValue<IkReal> x6120 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x6119))+((gconst119*r10*sj10))+((cj10*gconst119*r00))+(((-1.0)*r11*sj10*x6119)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6120.valid){
continue;
}
CheckValue<IkReal> x6121=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6119)))),-1);
if(!x6121.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6120.value)+(((1.5707963267949)*(x6121.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6122=IKsin(j14);
IkReal x6123=IKcos(j14);
IkReal x6124=(gconst119*r10);
IkReal x6125=((1.0)*sj10);
IkReal x6126=(sj11*sj12);
IkReal x6127=(gconst119*r20);
IkReal x6128=(gconst119*r00);
IkReal x6129=(cj11*cj12);
IkReal x6130=(gconst118*x6122);
IkReal x6131=(gconst118*x6123);
IkReal x6132=((1.0)*x6123);
IkReal x6133=((1.0)*x6122);
evalcond[0]=(((r21*x6130))+(((-1.0)*r22*x6132))+(((-1.0)*x6127*x6133)));
evalcond[1]=(((r11*x6130))+(((-1.0)*x6124*x6133))+cj10+(((-1.0)*r12*x6132)));
evalcond[2]=((((-1.0)*x6128*x6133))+(((-1.0)*x6125))+((r01*x6130))+(((-1.0)*r02*x6132)));
evalcond[3]=(((r21*x6131))+(((-1.0)*x6127*x6132))+((cj12*sj11))+((cj11*sj12))+((r22*x6122)));
evalcond[4]=(((cj10*x6126))+(((-1.0)*x6128*x6132))+((r02*x6122))+(((-1.0)*cj10*x6129))+((r01*x6131)));
evalcond[5]=(((sj10*x6126))+(((-1.0)*x6125*x6129))+((r11*x6131))+((r12*x6122))+(((-1.0)*x6124*x6132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6134=((1.0)*gconst119);
CheckValue<IkReal> x6135 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst118*r21*sj10))+(((-1.0)*r20*sj10*x6134)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6135.valid){
continue;
}
CheckValue<IkReal> x6136=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x6134)))),-1);
if(!x6136.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6135.value)+(((1.5707963267949)*(x6136.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6137=IKsin(j14);
IkReal x6138=IKcos(j14);
IkReal x6139=(gconst119*r10);
IkReal x6140=((1.0)*sj10);
IkReal x6141=(sj11*sj12);
IkReal x6142=(gconst119*r20);
IkReal x6143=(gconst119*r00);
IkReal x6144=(cj11*cj12);
IkReal x6145=(gconst118*x6137);
IkReal x6146=(gconst118*x6138);
IkReal x6147=((1.0)*x6138);
IkReal x6148=((1.0)*x6137);
evalcond[0]=((((-1.0)*x6142*x6148))+((r21*x6145))+(((-1.0)*r22*x6147)));
evalcond[1]=((((-1.0)*x6139*x6148))+cj10+((r11*x6145))+(((-1.0)*r12*x6147)));
evalcond[2]=((((-1.0)*x6140))+(((-1.0)*r02*x6147))+((r01*x6145))+(((-1.0)*x6143*x6148)));
evalcond[3]=(((r22*x6137))+(((-1.0)*x6142*x6147))+((cj12*sj11))+((r21*x6146))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj10*x6144))+((r01*x6146))+(((-1.0)*x6143*x6147))+((r02*x6137))+((cj10*x6141)));
evalcond[5]=((((-1.0)*x6139*x6147))+((r11*x6146))+(((-1.0)*x6140*x6144))+((sj10*x6141))+((r12*x6137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6149=((1.0)*gconst119);
CheckValue<IkReal> x6150 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst118*r21))+(((-1.0)*cj10*r20*x6149)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6150.valid){
continue;
}
CheckValue<IkReal> x6151=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6149))+(((-1.0)*gconst118*r00)))),-1);
if(!x6151.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6150.value)+(((1.5707963267949)*(x6151.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6152=IKsin(j14);
IkReal x6153=IKcos(j14);
IkReal x6154=(gconst119*r10);
IkReal x6155=((1.0)*sj10);
IkReal x6156=(sj11*sj12);
IkReal x6157=(gconst119*r20);
IkReal x6158=(gconst119*r00);
IkReal x6159=(cj11*cj12);
IkReal x6160=(gconst118*x6152);
IkReal x6161=(gconst118*x6153);
IkReal x6162=((1.0)*x6153);
IkReal x6163=((1.0)*x6152);
evalcond[0]=(((r21*x6160))+(((-1.0)*x6157*x6163))+(((-1.0)*r22*x6162)));
evalcond[1]=((((-1.0)*x6154*x6163))+(((-1.0)*r12*x6162))+((r11*x6160))+cj10);
evalcond[2]=((((-1.0)*x6155))+((r01*x6160))+(((-1.0)*r02*x6162))+(((-1.0)*x6158*x6163)));
evalcond[3]=(((r22*x6152))+((r21*x6161))+(((-1.0)*x6157*x6162))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((cj10*x6156))+((r02*x6152))+((r01*x6161))+(((-1.0)*cj10*x6159))+(((-1.0)*x6158*x6162)));
evalcond[5]=(((r12*x6152))+(((-1.0)*x6154*x6162))+((sj10*x6156))+((r11*x6161))+(((-1.0)*x6155*x6159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6164=((-1.0)*r10);
IkReal x6166 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6166)==0){
continue;
}
IkReal x6165=pow(x6166,-0.5);
CheckValue<IkReal> x6167 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6164),IKFAST_ATAN2_MAGTHRESH);
if(!x6167.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6167.value));
IkReal gconst121=(r11*x6165);
IkReal gconst122=(x6164*x6165);
CheckValue<IkReal> x6168 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6168.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x6168.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x6169=((-1.0)*r10);
IkReal x6170=x6165;
CheckValue<IkReal> x6172 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6169),IKFAST_ATAN2_MAGTHRESH);
if(!x6172.valid){
continue;
}
IkReal x6171=((-1.0)*(x6172.value));
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst121;
cj15=gconst122;
j15=x6171;
IkReal gconst120=x6171;
IkReal gconst121=(r11*x6170);
IkReal gconst122=(x6169*x6170);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6173=((1.0)*gconst121);
CheckValue<IkReal> x6174 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x6173))+(((-1.0)*cj10*r01*x6173))+((gconst122*r10*sj10))+((cj10*gconst122*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6174.valid){
continue;
}
CheckValue<IkReal> x6175=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6173))+(((-1.0)*gconst122*r21)))),-1);
if(!x6175.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6174.value)+(((1.5707963267949)*(x6175.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6176=IKsin(j14);
IkReal x6177=IKcos(j14);
IkReal x6178=(gconst122*r00);
IkReal x6179=((1.0)*sj10);
IkReal x6180=(sj11*sj12);
IkReal x6181=(gconst122*r10);
IkReal x6182=(gconst122*r20);
IkReal x6183=(cj11*cj12);
IkReal x6184=((1.0)*x6177);
IkReal x6185=(gconst121*x6176);
IkReal x6186=(gconst121*x6177);
IkReal x6187=((1.0)*x6176);
evalcond[0]=((((-1.0)*r22*x6184))+((r21*x6185))+(((-1.0)*x6182*x6187)));
evalcond[1]=(cj10+(((-1.0)*r12*x6184))+((r11*x6185))+(((-1.0)*x6181*x6187)));
evalcond[2]=((((-1.0)*x6178*x6187))+(((-1.0)*r02*x6184))+((r01*x6185))+(((-1.0)*x6179)));
evalcond[3]=(((r21*x6186))+(((-1.0)*x6182*x6184))+((cj12*sj11))+((r22*x6176))+((cj11*sj12)));
evalcond[4]=(((cj10*x6180))+(((-1.0)*x6178*x6184))+((r01*x6186))+((r02*x6176))+(((-1.0)*cj10*x6183)));
evalcond[5]=(((r12*x6176))+((sj10*x6180))+(((-1.0)*x6179*x6183))+((r11*x6186))+(((-1.0)*x6181*x6184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6188=((1.0)*gconst122);
CheckValue<IkReal> x6189 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x6188))+((cj10*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6189.valid){
continue;
}
CheckValue<IkReal> x6190=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x6188)))),-1);
if(!x6190.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6189.value)+(((1.5707963267949)*(x6190.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6191=IKsin(j14);
IkReal x6192=IKcos(j14);
IkReal x6193=(gconst122*r00);
IkReal x6194=((1.0)*sj10);
IkReal x6195=(sj11*sj12);
IkReal x6196=(gconst122*r10);
IkReal x6197=(gconst122*r20);
IkReal x6198=(cj11*cj12);
IkReal x6199=((1.0)*x6192);
IkReal x6200=(gconst121*x6191);
IkReal x6201=(gconst121*x6192);
IkReal x6202=((1.0)*x6191);
evalcond[0]=((((-1.0)*x6197*x6202))+((r21*x6200))+(((-1.0)*r22*x6199)));
evalcond[1]=((((-1.0)*r12*x6199))+(((-1.0)*x6196*x6202))+cj10+((r11*x6200)));
evalcond[2]=(((r01*x6200))+(((-1.0)*x6193*x6202))+(((-1.0)*x6194))+(((-1.0)*r02*x6199)));
evalcond[3]=((((-1.0)*x6197*x6199))+((r21*x6201))+((cj12*sj11))+((r22*x6191))+((cj11*sj12)));
evalcond[4]=(((r01*x6201))+((r02*x6191))+(((-1.0)*x6193*x6199))+(((-1.0)*cj10*x6198))+((cj10*x6195)));
evalcond[5]=(((r12*x6191))+(((-1.0)*x6194*x6198))+(((-1.0)*x6196*x6199))+((sj10*x6195))+((r11*x6201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6203=((-1.0)*r11);
IkReal x6205 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6205)==0){
continue;
}
IkReal x6204=pow(x6205,-0.5);
CheckValue<IkReal> x6206 = IKatan2WithCheck(IkReal(x6203),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6206.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6206.value))));
IkReal gconst124=(x6203*x6204);
IkReal gconst125=((1.0)*r10*x6204);
CheckValue<IkReal> x6207 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6207.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x6207.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x6208=((-1.0)*r11);
CheckValue<IkReal> x6211 = IKatan2WithCheck(IkReal(x6208),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6211.valid){
continue;
}
IkReal x6209=((1.0)*(x6211.value));
IkReal x6210=x6204;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst124;
cj15=gconst125;
j15=((3.14159265)+(((-1.0)*x6209)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6209)));
IkReal gconst124=(x6208*x6210);
IkReal gconst125=((1.0)*r10*x6210);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x6212=((-1.0)*r11);
CheckValue<IkReal> x6215 = IKatan2WithCheck(IkReal(x6212),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6215.valid){
continue;
}
IkReal x6213=((1.0)*(x6215.value));
IkReal x6214=x6204;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst124;
cj15=gconst125;
j15=((3.14159265)+(((-1.0)*x6213)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6213)));
IkReal gconst124=(x6212*x6214);
IkReal gconst125=((1.0)*r10*x6214);
IkReal x6216=r12*r12;
IkReal x6217=(cj10*r02);
IkReal x6218=x6204;
IkReal x6219=(sj10*x6218);
j14eval[0]=((IKabs(((((-1.0)*x6217))+(((-1.0)*r12*sj10)))))+(IKabs(((((-1.0)*x6219))+((x6216*x6219))+((r12*x6217*x6218))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x6220=((-1.0)*r11);
CheckValue<IkReal> x6223 = IKatan2WithCheck(IkReal(x6220),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6223.valid){
continue;
}
IkReal x6221=((1.0)*(x6223.value));
IkReal x6222=x6204;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst124;
cj15=gconst125;
j15=((3.14159265)+(((-1.0)*x6221)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6221)));
IkReal gconst124=(x6220*x6222);
IkReal gconst125=((1.0)*r10*x6222);
IkReal x6224=r12*r12;
IkReal x6225=(cj11*sj12);
IkReal x6226=(cj12*sj11);
IkReal x6227=((1.0)+(((-1.0)*x6224)));
CheckValue<IkReal> x6234=IKPowWithIntegerCheck(x6227,-1);
if(!x6234.valid){
continue;
}
IkReal x6228=x6234.value;
CheckValue<IkReal> x6235=IKPowWithIntegerCheck(((-1.0)+x6224),-1);
if(!x6235.valid){
continue;
}
IkReal x6229=x6235.value;
IkReal x6230=((1.0)*x6228);
if((x6227) < -0.00001)
continue;
IkReal x6231=IKsqrt(x6227);
IkReal x6232=((1.0)*r12*r22*x6229*x6231);
IkReal x6233=((((-1.0)*x6230*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x6228))+(((-1.0)*x6230*(r11*r11)*(r21*r21))));
j14eval[0]=x6233;
j14eval[1]=IKsign(x6233);
j14eval[2]=((IKabs(((((-1.0)*x6225*x6232))+(((-1.0)*x6226*x6232)))))+(IKabs((((r22*x6225))+((r22*x6226))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6236=(cj11*sj12);
IkReal x6237=(gconst125*r20);
IkReal x6238=(gconst124*r21);
IkReal x6239=(cj12*sj11);
CheckValue<IkReal> x6240 = IKatan2WithCheck(IkReal((((r22*x6239))+((r22*x6236)))),IkReal(((((-1.0)*x6237*x6239))+((x6236*x6238))+(((-1.0)*x6236*x6237))+((x6238*x6239)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6240.valid){
continue;
}
CheckValue<IkReal> x6241=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6237*x6237)))+(((-1.0)*(x6238*x6238)))+(((-1.0)*(r22*r22)))+(((2.0)*x6237*x6238)))),-1);
if(!x6241.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6240.value)+(((1.5707963267949)*(x6241.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6242=IKsin(j14);
IkReal x6243=IKcos(j14);
IkReal x6244=((1.0)*sj10);
IkReal x6245=(gconst125*r20);
IkReal x6246=(sj11*sj12);
IkReal x6247=(gconst125*r00);
IkReal x6248=(cj11*cj12);
IkReal x6249=(gconst125*r10);
IkReal x6250=((1.0)*x6243);
IkReal x6251=(gconst124*x6243);
IkReal x6252=(gconst124*x6242);
IkReal x6253=((1.0)*x6242);
evalcond[0]=((((-1.0)*x6245*x6253))+((r21*x6252))+(((-1.0)*r22*x6250)));
evalcond[1]=(cj10+(((-1.0)*x6249*x6253))+(((-1.0)*r12*x6250))+((r11*x6252)));
evalcond[2]=((((-1.0)*x6247*x6253))+((r01*x6252))+(((-1.0)*r02*x6250))+(((-1.0)*x6244)));
evalcond[3]=((((-1.0)*x6245*x6250))+((r21*x6251))+((cj12*sj11))+((r22*x6242))+((cj11*sj12)));
evalcond[4]=((((-1.0)*x6247*x6250))+((r01*x6251))+((r02*x6242))+((cj10*x6246))+(((-1.0)*cj10*x6248)));
evalcond[5]=(((sj10*x6246))+((r12*x6242))+(((-1.0)*x6249*x6250))+(((-1.0)*x6244*x6248))+((r11*x6251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6254=((1.0)*sj10);
IkReal x6255=((1.0)*gconst124);
CheckValue<IkReal> x6256 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*r02))+(((-1.0)*r12*x6254)))),IkReal(((((-1.0)*gconst124*r11*x6254))+((cj10*gconst125*r00))+((gconst125*r10*sj10))+(((-1.0)*cj10*r01*x6255)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6256.valid){
continue;
}
CheckValue<IkReal> x6257=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst125*r21))+(((-1.0)*r20*x6255)))),-1);
if(!x6257.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6256.value)+(((1.5707963267949)*(x6257.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6258=IKsin(j14);
IkReal x6259=IKcos(j14);
IkReal x6260=((1.0)*sj10);
IkReal x6261=(gconst125*r20);
IkReal x6262=(sj11*sj12);
IkReal x6263=(gconst125*r00);
IkReal x6264=(cj11*cj12);
IkReal x6265=(gconst125*r10);
IkReal x6266=((1.0)*x6259);
IkReal x6267=(gconst124*x6259);
IkReal x6268=(gconst124*x6258);
IkReal x6269=((1.0)*x6258);
evalcond[0]=(((r21*x6268))+(((-1.0)*x6261*x6269))+(((-1.0)*r22*x6266)));
evalcond[1]=(cj10+(((-1.0)*x6265*x6269))+(((-1.0)*r12*x6266))+((r11*x6268)));
evalcond[2]=(((r01*x6268))+(((-1.0)*r02*x6266))+(((-1.0)*x6263*x6269))+(((-1.0)*x6260)));
evalcond[3]=(((r22*x6258))+((r21*x6267))+(((-1.0)*x6261*x6266))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((r01*x6267))+(((-1.0)*cj10*x6264))+(((-1.0)*x6263*x6266))+((r02*x6258))+((cj10*x6262)));
evalcond[5]=(((sj10*x6262))+(((-1.0)*x6265*x6266))+(((-1.0)*x6260*x6264))+((r12*x6258))+((r11*x6267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6270=((1.0)*gconst125);
CheckValue<IkReal> x6271=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6270))+(((-1.0)*gconst124*r00)))),-1);
if(!x6271.valid){
continue;
}
CheckValue<IkReal> x6272 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x6270))+((cj10*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6272.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6271.value)))+(x6272.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6273=IKsin(j14);
IkReal x6274=IKcos(j14);
IkReal x6275=((1.0)*sj10);
IkReal x6276=(gconst125*r20);
IkReal x6277=(sj11*sj12);
IkReal x6278=(gconst125*r00);
IkReal x6279=(cj11*cj12);
IkReal x6280=(gconst125*r10);
IkReal x6281=((1.0)*x6274);
IkReal x6282=(gconst124*x6274);
IkReal x6283=(gconst124*x6273);
IkReal x6284=((1.0)*x6273);
evalcond[0]=((((-1.0)*r22*x6281))+((r21*x6283))+(((-1.0)*x6276*x6284)));
evalcond[1]=(cj10+((r11*x6283))+(((-1.0)*r12*x6281))+(((-1.0)*x6280*x6284)));
evalcond[2]=((((-1.0)*r02*x6281))+(((-1.0)*x6275))+((r01*x6283))+(((-1.0)*x6278*x6284)));
evalcond[3]=(((r22*x6273))+((cj12*sj11))+((r21*x6282))+((cj11*sj12))+(((-1.0)*x6276*x6281)));
evalcond[4]=(((cj10*x6277))+(((-1.0)*cj10*x6279))+((r02*x6273))+((r01*x6282))+(((-1.0)*x6278*x6281)));
evalcond[5]=(((r12*x6273))+(((-1.0)*x6275*x6279))+((sj10*x6277))+((r11*x6282))+(((-1.0)*x6280*x6281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x6285=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x6285;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj15*r00))+((r01*sj15))))));
j14eval[2]=IKsign(x6285);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x6286=((1.0)*cj15);
IkReal x6287=((((-1.0)*r00*sj15))+(((-1.0)*r01*x6286)));
j14eval[0]=x6287;
j14eval[1]=((IKabs(((((-1.0)*r20*x6286))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x6287);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=1.0;
j10=0;
IkReal x6288=r11*r11;
IkReal x6289=cj15*cj15;
IkReal x6290=(cj15*r10);
IkReal x6291=(r11*sj15);
IkReal x6292=((((2.0)*x6290*x6291))+(((-1.0)*(r12*r12)))+((x6288*x6289))+(((-1.0)*x6289*(r10*r10)))+(((-1.0)*x6288)));
j14eval[0]=x6292;
j14eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x6290))+x6291))));
j14eval[2]=IKsign(x6292);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6293=r11*r11;
IkReal x6294=cj15*cj15;
IkReal x6295=(r11*sj15);
IkReal x6296=(cj15*r10);
CheckValue<IkReal> x6297 = IKatan2WithCheck(IkReal(((((-1.0)*x6296))+x6295)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6297.valid){
continue;
}
CheckValue<IkReal> x6298=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6293))+(((-1.0)*x6294*(r10*r10)))+(((-1.0)*(r12*r12)))+((x6293*x6294))+(((2.0)*x6295*x6296)))),-1);
if(!x6298.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6297.value)+(((1.5707963267949)*(x6298.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6299=IKcos(j14);
IkReal x6300=IKsin(j14);
IkReal x6301=(cj15*r20);
IkReal x6302=(cj15*r10);
IkReal x6303=(cj15*r00);
IkReal x6304=((1.0)*x6299);
IkReal x6305=(sj15*x6299);
IkReal x6306=((1.0)*x6300);
IkReal x6307=(sj15*x6300);
evalcond[0]=((((-1.0)*x6302*x6304))+((r11*x6305))+((r12*x6300)));
evalcond[1]=(((r21*x6307))+(((-1.0)*r22*x6304))+(((-1.0)*x6301*x6306)));
evalcond[2]=((((-1.0)*r02*x6304))+((r01*x6307))+(((-1.0)*x6303*x6306)));
evalcond[3]=((1.0)+(((-1.0)*x6302*x6306))+(((-1.0)*r12*x6304))+((r11*x6307)));
evalcond[4]=(((r22*x6300))+((r21*x6305))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*x6301*x6304)));
evalcond[5]=(((sj11*sj12))+((r01*x6305))+((r02*x6300))+(((-1.0)*x6303*x6304))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6308=((1.0)*cj15);
CheckValue<IkReal> x6309 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj15))+(((-1.0)*r20*x6308)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6309.valid){
continue;
}
CheckValue<IkReal> x6310=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6308))+(((-1.0)*r00*sj15)))),-1);
if(!x6310.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6309.value)+(((1.5707963267949)*(x6310.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6311=IKcos(j14);
IkReal x6312=IKsin(j14);
IkReal x6313=(cj15*r20);
IkReal x6314=(cj15*r10);
IkReal x6315=(cj15*r00);
IkReal x6316=((1.0)*x6311);
IkReal x6317=(sj15*x6311);
IkReal x6318=((1.0)*x6312);
IkReal x6319=(sj15*x6312);
evalcond[0]=(((r11*x6317))+((r12*x6312))+(((-1.0)*x6314*x6316)));
evalcond[1]=((((-1.0)*r22*x6316))+((r21*x6319))+(((-1.0)*x6313*x6318)));
evalcond[2]=((((-1.0)*r02*x6316))+((r01*x6319))+(((-1.0)*x6315*x6318)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6316))+((r11*x6319))+(((-1.0)*x6314*x6318)));
evalcond[4]=(((r22*x6312))+((r21*x6317))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*x6313*x6316)));
evalcond[5]=(((sj11*sj12))+((r01*x6317))+((r02*x6312))+(((-1.0)*x6315*x6316))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x6320 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj15*r00))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6320.valid){
continue;
}
CheckValue<IkReal> x6321=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x6321.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6320.value)+(((1.5707963267949)*(x6321.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6322=IKcos(j14);
IkReal x6323=IKsin(j14);
IkReal x6324=(cj15*r20);
IkReal x6325=(cj15*r10);
IkReal x6326=(cj15*r00);
IkReal x6327=((1.0)*x6322);
IkReal x6328=(sj15*x6322);
IkReal x6329=((1.0)*x6323);
IkReal x6330=(sj15*x6323);
evalcond[0]=((((-1.0)*x6325*x6327))+((r11*x6328))+((r12*x6323)));
evalcond[1]=((((-1.0)*r22*x6327))+((r21*x6330))+(((-1.0)*x6324*x6329)));
evalcond[2]=((((-1.0)*x6326*x6329))+((r01*x6330))+(((-1.0)*r02*x6327)));
evalcond[3]=((1.0)+(((-1.0)*x6325*x6329))+((r11*x6330))+(((-1.0)*r12*x6327)));
evalcond[4]=(((cj12*sj11))+(((-1.0)*x6324*x6327))+((r22*x6323))+((r21*x6328))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x6326*x6327))+((r02*x6323))+((r01*x6328))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x6331=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x6331;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x6331);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x6332=((1.0)*cj15);
IkReal x6333=((((-1.0)*r21*x6332))+(((-1.0)*r20*sj15)));
j14eval[0]=x6333;
j14eval[1]=IKsign(x6333);
j14eval[2]=((IKabs(r02))+(IKabs((((r01*sj15))+(((-1.0)*r00*x6332))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x6334=cj15*cj15;
IkReal x6335=r11*r11;
IkReal x6336=(r11*sj15);
IkReal x6337=(cj15*r10);
IkReal x6338=((r12*r12)+x6335+((x6334*(r10*r10)))+(((-1.0)*x6334*x6335))+(((-2.0)*x6336*x6337)));
j14eval[0]=x6338;
j14eval[1]=((IKabs(r12))+(IKabs((x6336+(((-1.0)*x6337))))));
j14eval[2]=IKsign(x6338);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6339=cj15*cj15;
IkReal x6340=r11*r11;
IkReal x6341=(r11*sj15);
IkReal x6342=(cj15*r10);
CheckValue<IkReal> x6343 = IKatan2WithCheck(IkReal((x6341+(((-1.0)*x6342)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6343.valid){
continue;
}
CheckValue<IkReal> x6344=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x6341*x6342))+x6340+((x6339*(r10*r10)))+(((-1.0)*x6339*x6340)))),-1);
if(!x6344.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6343.value)+(((1.5707963267949)*(x6344.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6345=IKcos(j14);
IkReal x6346=IKsin(j14);
IkReal x6347=(cj15*r20);
IkReal x6348=(cj15*r10);
IkReal x6349=(cj15*r00);
IkReal x6350=((1.0)*x6345);
IkReal x6351=(sj15*x6345);
IkReal x6352=((1.0)*x6346);
IkReal x6353=(sj15*x6346);
evalcond[0]=(((r12*x6346))+((r11*x6351))+(((-1.0)*x6348*x6350)));
evalcond[1]=((((-1.0)*x6347*x6352))+((r21*x6353))+(((-1.0)*r22*x6350)));
evalcond[2]=((((-1.0)*x6349*x6352))+(((-1.0)*r02*x6350))+((r01*x6353)));
evalcond[3]=((-1.0)+((r11*x6353))+(((-1.0)*r12*x6350))+(((-1.0)*x6348*x6352)));
evalcond[4]=((((-1.0)*x6347*x6350))+((r21*x6351))+((r22*x6346))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=((((-1.0)*x6349*x6350))+(((-1.0)*sj11*sj12))+((cj11*cj12))+((r02*x6346))+((r01*x6351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6354=((1.0)*cj15);
CheckValue<IkReal> x6355 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x6354))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6355.valid){
continue;
}
CheckValue<IkReal> x6356=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6354))+(((-1.0)*r20*sj15)))),-1);
if(!x6356.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6355.value)+(((1.5707963267949)*(x6356.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6357=IKcos(j14);
IkReal x6358=IKsin(j14);
IkReal x6359=(cj15*r20);
IkReal x6360=(cj15*r10);
IkReal x6361=(cj15*r00);
IkReal x6362=((1.0)*x6357);
IkReal x6363=(sj15*x6357);
IkReal x6364=((1.0)*x6358);
IkReal x6365=(sj15*x6358);
evalcond[0]=((((-1.0)*x6360*x6362))+((r11*x6363))+((r12*x6358)));
evalcond[1]=((((-1.0)*x6359*x6364))+(((-1.0)*r22*x6362))+((r21*x6365)));
evalcond[2]=((((-1.0)*x6361*x6364))+(((-1.0)*r02*x6362))+((r01*x6365)));
evalcond[3]=((-1.0)+(((-1.0)*x6360*x6364))+((r11*x6365))+(((-1.0)*r12*x6362)));
evalcond[4]=(((r22*x6358))+((cj12*sj11))+(((-1.0)*x6359*x6362))+((cj11*sj12))+((r21*x6363)));
evalcond[5]=((((-1.0)*sj11*sj12))+(((-1.0)*x6361*x6362))+((cj11*cj12))+((r01*x6363))+((r02*x6358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x6366 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6366.valid){
continue;
}
CheckValue<IkReal> x6367=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x6367.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6366.value)+(((1.5707963267949)*(x6367.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6368=IKcos(j14);
IkReal x6369=IKsin(j14);
IkReal x6370=(cj15*r20);
IkReal x6371=(cj15*r10);
IkReal x6372=(cj15*r00);
IkReal x6373=((1.0)*x6368);
IkReal x6374=(sj15*x6368);
IkReal x6375=((1.0)*x6369);
IkReal x6376=(sj15*x6369);
evalcond[0]=(((r12*x6369))+((r11*x6374))+(((-1.0)*x6371*x6373)));
evalcond[1]=(((r21*x6376))+(((-1.0)*x6370*x6375))+(((-1.0)*r22*x6373)));
evalcond[2]=((((-1.0)*x6372*x6375))+(((-1.0)*r02*x6373))+((r01*x6376)));
evalcond[3]=((-1.0)+((r11*x6376))+(((-1.0)*x6371*x6375))+(((-1.0)*r12*x6373)));
evalcond[4]=(((r21*x6374))+(((-1.0)*x6370*x6373))+((cj12*sj11))+((r22*x6369))+((cj11*sj12)));
evalcond[5]=((((-1.0)*x6372*x6373))+(((-1.0)*sj11*sj12))+((cj11*cj12))+((r01*x6374))+((r02*x6369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6377=((-1.0)*r00);
IkReal x6379 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6379)==0){
continue;
}
IkReal x6378=pow(x6379,-0.5);
CheckValue<IkReal> x6380 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6377),IKFAST_ATAN2_MAGTHRESH);
if(!x6380.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6380.value));
IkReal gconst127=(r01*x6378);
IkReal gconst128=(x6377*x6378);
CheckValue<IkReal> x6381 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6381.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x6381.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x6382=((-1.0)*r00);
IkReal x6383=x6378;
CheckValue<IkReal> x6385 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6382),IKFAST_ATAN2_MAGTHRESH);
if(!x6385.valid){
continue;
}
IkReal x6384=((-1.0)*(x6385.value));
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst127;
cj15=gconst128;
j15=x6384;
IkReal gconst126=x6384;
IkReal gconst127=(r01*x6383);
IkReal gconst128=(x6382*x6383);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6386=((1.0)*gconst127);
CheckValue<IkReal> x6387=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6386))+(((-1.0)*gconst128*r21)))),-1);
if(!x6387.valid){
continue;
}
CheckValue<IkReal> x6388 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x6386))+(((-1.0)*r11*sj10*x6386))+((gconst128*r10*sj10))+((cj10*gconst128*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6388.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6387.value)))+(x6388.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6389=IKsin(j14);
IkReal x6390=IKcos(j14);
IkReal x6391=(gconst127*r11);
IkReal x6392=((1.0)*sj10);
IkReal x6393=(gconst127*r01);
IkReal x6394=(sj11*sj12);
IkReal x6395=(gconst127*r21);
IkReal x6396=(cj11*cj12);
IkReal x6397=((1.0)*x6390);
IkReal x6398=((1.0)*gconst128*x6389);
evalcond[0]=((((-1.0)*r20*x6398))+(((-1.0)*r22*x6397))+((x6389*x6395)));
evalcond[1]=(cj10+(((-1.0)*r10*x6398))+(((-1.0)*r12*x6397))+((x6389*x6391)));
evalcond[2]=((((-1.0)*r00*x6398))+(((-1.0)*x6392))+(((-1.0)*r02*x6397))+((x6389*x6393)));
evalcond[3]=(((x6390*x6395))+((r22*x6389))+(((-1.0)*gconst128*r20*x6397))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((x6390*x6393))+((r02*x6389))+((cj10*x6394))+(((-1.0)*gconst128*r00*x6397))+(((-1.0)*cj10*x6396)));
evalcond[5]=(((x6390*x6391))+(((-1.0)*x6392*x6396))+(((-1.0)*gconst128*r10*x6397))+((r12*x6389))+((sj10*x6394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6399=((1.0)*gconst128);
CheckValue<IkReal> x6400=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6399))+(((-1.0)*gconst127*r10)))),-1);
if(!x6400.valid){
continue;
}
CheckValue<IkReal> x6401 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x6399))+((gconst127*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6401.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6400.value)))+(x6401.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6402=IKsin(j14);
IkReal x6403=IKcos(j14);
IkReal x6404=(gconst127*r11);
IkReal x6405=((1.0)*sj10);
IkReal x6406=(gconst127*r01);
IkReal x6407=(sj11*sj12);
IkReal x6408=(gconst127*r21);
IkReal x6409=(cj11*cj12);
IkReal x6410=((1.0)*x6403);
IkReal x6411=((1.0)*gconst128*x6402);
evalcond[0]=((((-1.0)*r20*x6411))+(((-1.0)*r22*x6410))+((x6402*x6408)));
evalcond[1]=((((-1.0)*r10*x6411))+cj10+(((-1.0)*r12*x6410))+((x6402*x6404)));
evalcond[2]=((((-1.0)*r02*x6410))+(((-1.0)*x6405))+((x6402*x6406))+(((-1.0)*r00*x6411)));
evalcond[3]=((((-1.0)*gconst128*r20*x6410))+((cj12*sj11))+((r22*x6402))+((x6403*x6408))+((cj11*sj12)));
evalcond[4]=(((r02*x6402))+((cj10*x6407))+(((-1.0)*gconst128*r00*x6410))+(((-1.0)*cj10*x6409))+((x6403*x6406)));
evalcond[5]=((((-1.0)*gconst128*r10*x6410))+((sj10*x6407))+((r12*x6402))+((x6403*x6404))+(((-1.0)*x6405*x6409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6412=((-1.0)*r01);
IkReal x6414 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6414)==0){
continue;
}
IkReal x6413=pow(x6414,-0.5);
CheckValue<IkReal> x6415 = IKatan2WithCheck(IkReal(x6412),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6415.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6415.value))));
IkReal gconst130=(x6412*x6413);
IkReal gconst131=((1.0)*r00*x6413);
CheckValue<IkReal> x6416 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6416.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x6416.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[5];
IkReal x6417=((-1.0)*r01);
CheckValue<IkReal> x6420 = IKatan2WithCheck(IkReal(x6417),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6420.valid){
continue;
}
IkReal x6418=((1.0)*(x6420.value));
IkReal x6419=x6413;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst130;
cj15=gconst131;
j15=((3.14159265)+(((-1.0)*x6418)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6418)));
IkReal gconst130=(x6417*x6419);
IkReal gconst131=((1.0)*r00*x6419);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=cj10;
j14eval[3]=r22;
j14eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  || IKabs(j14eval[4]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x6421=((-1.0)*r01);
CheckValue<IkReal> x6424 = IKatan2WithCheck(IkReal(x6421),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6424.valid){
continue;
}
IkReal x6422=((1.0)*(x6424.value));
IkReal x6423=x6413;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst130;
cj15=gconst131;
j15=((3.14159265)+(((-1.0)*x6422)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6422)));
IkReal gconst130=(x6421*x6423);
IkReal gconst131=((1.0)*r00*x6423);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x6425=((-1.0)*r01);
CheckValue<IkReal> x6428 = IKatan2WithCheck(IkReal(x6425),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6428.valid){
continue;
}
IkReal x6426=((1.0)*(x6428.value));
IkReal x6427=x6413;
sj13=0;
cj13=1.0;
j13=0;
sj15=gconst130;
cj15=gconst131;
j15=((3.14159265)+(((-1.0)*x6426)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6426)));
IkReal gconst130=(x6425*x6427);
IkReal gconst131=((1.0)*r00*x6427);
IkReal x6429=r02*r02;
IkReal x6430=(r12*sj10);
IkReal x6431=x6413;
IkReal x6432=(cj10*x6431);
j14eval[0]=((IKabs((((x6429*x6432))+((r02*x6430*x6431))+(((-1.0)*x6432)))))+(IKabs(((((-1.0)*cj10*r02))+(((-1.0)*x6430))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6433=((1.0)*gconst130);
CheckValue<IkReal> x6434=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r21))+(((-1.0)*r20*x6433)))),-1);
if(!x6434.valid){
continue;
}
CheckValue<IkReal> x6435 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((gconst131*r10*sj10))+(((-1.0)*cj10*r01*x6433))+(((-1.0)*r11*sj10*x6433))+((cj10*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6435.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6434.value)))+(x6435.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6436=IKsin(j14);
IkReal x6437=IKcos(j14);
IkReal x6438=(gconst131*r10);
IkReal x6439=((1.0)*sj10);
IkReal x6440=(gconst130*r11);
IkReal x6441=(gconst131*r20);
IkReal x6442=(sj11*sj12);
IkReal x6443=(gconst131*r00);
IkReal x6444=(cj11*cj12);
IkReal x6445=((1.0)*x6437);
IkReal x6446=((1.0)*x6436);
IkReal x6447=(gconst130*x6437);
IkReal x6448=(gconst130*x6436);
evalcond[0]=(((r21*x6448))+(((-1.0)*r22*x6445))+(((-1.0)*x6441*x6446)));
evalcond[1]=((((-1.0)*x6438*x6446))+(((-1.0)*r12*x6445))+cj10+((x6436*x6440)));
evalcond[2]=(((r01*x6448))+(((-1.0)*r02*x6445))+(((-1.0)*x6439))+(((-1.0)*x6443*x6446)));
evalcond[3]=(((r22*x6436))+((r21*x6447))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*x6441*x6445)));
evalcond[4]=(((r01*x6447))+(((-1.0)*cj10*x6444))+((r02*x6436))+(((-1.0)*x6443*x6445))+((cj10*x6442)));
evalcond[5]=(((sj10*x6442))+(((-1.0)*x6439*x6444))+((r12*x6436))+(((-1.0)*x6438*x6445))+((x6437*x6440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6449=((1.0)*gconst131);
CheckValue<IkReal> x6450=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6449))+(((-1.0)*gconst130*r10)))),-1);
if(!x6450.valid){
continue;
}
CheckValue<IkReal> x6451 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst130*r21*sj10))+(((-1.0)*r20*sj10*x6449)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6451.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6450.value)))+(x6451.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6452=IKsin(j14);
IkReal x6453=IKcos(j14);
IkReal x6454=(gconst131*r10);
IkReal x6455=((1.0)*sj10);
IkReal x6456=(gconst130*r11);
IkReal x6457=(gconst131*r20);
IkReal x6458=(sj11*sj12);
IkReal x6459=(gconst131*r00);
IkReal x6460=(cj11*cj12);
IkReal x6461=((1.0)*x6453);
IkReal x6462=((1.0)*x6452);
IkReal x6463=(gconst130*x6453);
IkReal x6464=(gconst130*x6452);
evalcond[0]=((((-1.0)*x6457*x6462))+((r21*x6464))+(((-1.0)*r22*x6461)));
evalcond[1]=((((-1.0)*x6454*x6462))+((x6452*x6456))+cj10+(((-1.0)*r12*x6461)));
evalcond[2]=(((r01*x6464))+(((-1.0)*x6455))+(((-1.0)*r02*x6461))+(((-1.0)*x6459*x6462)));
evalcond[3]=((((-1.0)*x6457*x6461))+((r21*x6463))+((r22*x6452))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((r01*x6463))+((r02*x6452))+(((-1.0)*cj10*x6460))+(((-1.0)*x6459*x6461))+((cj10*x6458)));
evalcond[5]=(((sj10*x6458))+((x6453*x6456))+(((-1.0)*x6454*x6461))+(((-1.0)*x6455*x6460))+((r12*x6452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6465=((1.0)*gconst131);
CheckValue<IkReal> x6466=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6465))+(((-1.0)*gconst130*r00)))),-1);
if(!x6466.valid){
continue;
}
CheckValue<IkReal> x6467 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst130*r21))+(((-1.0)*cj10*r20*x6465)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6467.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6466.value)))+(x6467.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6468=IKsin(j14);
IkReal x6469=IKcos(j14);
IkReal x6470=(gconst131*r10);
IkReal x6471=((1.0)*sj10);
IkReal x6472=(gconst130*r11);
IkReal x6473=(gconst131*r20);
IkReal x6474=(sj11*sj12);
IkReal x6475=(gconst131*r00);
IkReal x6476=(cj11*cj12);
IkReal x6477=((1.0)*x6469);
IkReal x6478=((1.0)*x6468);
IkReal x6479=(gconst130*x6469);
IkReal x6480=(gconst130*x6468);
evalcond[0]=(((r21*x6480))+(((-1.0)*x6473*x6478))+(((-1.0)*r22*x6477)));
evalcond[1]=((((-1.0)*r12*x6477))+cj10+((x6468*x6472))+(((-1.0)*x6470*x6478)));
evalcond[2]=(((r01*x6480))+(((-1.0)*x6475*x6478))+(((-1.0)*r02*x6477))+(((-1.0)*x6471)));
evalcond[3]=((((-1.0)*x6473*x6477))+((r22*x6468))+((cj12*sj11))+((cj11*sj12))+((r21*x6479)));
evalcond[4]=((((-1.0)*cj10*x6476))+((cj10*x6474))+((r01*x6479))+(((-1.0)*x6475*x6477))+((r02*x6468)));
evalcond[5]=(((sj10*x6474))+(((-1.0)*x6470*x6477))+(((-1.0)*x6471*x6476))+((r12*x6468))+((x6469*x6472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x6481=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x6481;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x6481);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x6482=((1.0)*cj15);
IkReal x6483=((((-1.0)*r11*x6482))+(((-1.0)*r10*sj15)));
j14eval[0]=x6483;
j14eval[1]=IKsign(x6483);
j14eval[2]=((IKabs((((r21*sj15))+(((-1.0)*r20*x6482)))))+(IKabs(r22)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x6484=cj15*cj15;
IkReal x6485=r01*r01;
IkReal x6486=(cj15*r00);
IkReal x6487=(r01*sj15);
IkReal x6488=((((-2.0)*x6486*x6487))+x6485+(r02*r02)+(((-1.0)*x6484*x6485))+((x6484*(r00*r00))));
j14eval[0]=x6488;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x6486))+x6487))));
j14eval[2]=IKsign(x6488);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6489=cj15*cj15;
IkReal x6490=r01*r01;
IkReal x6491=(r01*sj15);
IkReal x6492=(cj15*r00);
CheckValue<IkReal> x6493 = IKatan2WithCheck(IkReal(((((-1.0)*x6492))+x6491)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6493.valid){
continue;
}
CheckValue<IkReal> x6494=IKPowWithIntegerCheck(IKsign((((x6489*(r00*r00)))+(((-1.0)*x6489*x6490))+x6490+(r02*r02)+(((-2.0)*x6491*x6492)))),-1);
if(!x6494.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6493.value)+(((1.5707963267949)*(x6494.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6495=IKcos(j14);
IkReal x6496=IKsin(j14);
IkReal x6497=(cj15*r20);
IkReal x6498=(cj15*r10);
IkReal x6499=(cj15*r00);
IkReal x6500=((1.0)*x6495);
IkReal x6501=(sj15*x6495);
IkReal x6502=((1.0)*x6496);
IkReal x6503=(sj15*x6496);
evalcond[0]=(((r02*x6496))+(((-1.0)*x6499*x6500))+((r01*x6501)));
evalcond[1]=(((r21*x6503))+(((-1.0)*x6497*x6502))+(((-1.0)*r22*x6500)));
evalcond[2]=((((-1.0)*r12*x6500))+(((-1.0)*x6498*x6502))+((r11*x6503)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6500))+(((-1.0)*x6499*x6502))+((r01*x6503)));
evalcond[4]=(((r21*x6501))+(((-1.0)*x6497*x6500))+((cj12*sj11))+((cj11*sj12))+((r22*x6496)));
evalcond[5]=(((sj11*sj12))+((r12*x6496))+(((-1.0)*x6498*x6500))+((r11*x6501))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6504=((1.0)*cj15);
CheckValue<IkReal> x6505=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6504))+(((-1.0)*r10*sj15)))),-1);
if(!x6505.valid){
continue;
}
CheckValue<IkReal> x6506 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6504))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6506.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6505.value)))+(x6506.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6507=IKcos(j14);
IkReal x6508=IKsin(j14);
IkReal x6509=(cj15*r20);
IkReal x6510=(cj15*r10);
IkReal x6511=(cj15*r00);
IkReal x6512=((1.0)*x6507);
IkReal x6513=(sj15*x6507);
IkReal x6514=((1.0)*x6508);
IkReal x6515=(sj15*x6508);
evalcond[0]=(((r02*x6508))+((r01*x6513))+(((-1.0)*x6511*x6512)));
evalcond[1]=((((-1.0)*r22*x6512))+((r21*x6515))+(((-1.0)*x6509*x6514)));
evalcond[2]=(((r11*x6515))+(((-1.0)*r12*x6512))+(((-1.0)*x6510*x6514)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6512))+((r01*x6515))+(((-1.0)*x6511*x6514)));
evalcond[4]=(((r22*x6508))+((cj12*sj11))+((r21*x6513))+(((-1.0)*x6509*x6512))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r12*x6508))+((r11*x6513))+(((-1.0)*x6510*x6512))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x6516=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x6516.valid){
continue;
}
CheckValue<IkReal> x6517 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6517.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6516.value)))+(x6517.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6518=IKcos(j14);
IkReal x6519=IKsin(j14);
IkReal x6520=(cj15*r20);
IkReal x6521=(cj15*r10);
IkReal x6522=(cj15*r00);
IkReal x6523=((1.0)*x6518);
IkReal x6524=(sj15*x6518);
IkReal x6525=((1.0)*x6519);
IkReal x6526=(sj15*x6519);
evalcond[0]=((((-1.0)*x6522*x6523))+((r02*x6519))+((r01*x6524)));
evalcond[1]=((((-1.0)*r22*x6523))+(((-1.0)*x6520*x6525))+((r21*x6526)));
evalcond[2]=((((-1.0)*x6521*x6525))+(((-1.0)*r12*x6523))+((r11*x6526)));
evalcond[3]=((-1.0)+(((-1.0)*x6522*x6525))+(((-1.0)*r02*x6523))+((r01*x6526)));
evalcond[4]=((((-1.0)*x6520*x6523))+((cj12*sj11))+((r21*x6524))+((r22*x6519))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x6521*x6523))+((r12*x6519))+((r11*x6524))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x6527=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x6527;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x6527);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x6528=((1.0)*cj15);
IkReal x6529=((((-1.0)*r21*x6528))+(((-1.0)*r20*sj15)));
j14eval[0]=x6529;
j14eval[1]=IKsign(x6529);
j14eval[2]=((IKabs((((r11*sj15))+(((-1.0)*r10*x6528)))))+(IKabs(r12)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=1.0;
j13=0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x6530=(cj11*sj12);
IkReal x6531=(r01*sj15);
IkReal x6532=((1.0)*r02);
IkReal x6533=(cj12*sj11);
IkReal x6534=((1.0)*cj15*r00);
IkReal x6535=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x6535;
j14eval[1]=IKsign(x6535);
j14eval[2]=((IKabs(((((-1.0)*x6532*x6533))+(((-1.0)*x6530*x6532)))))+(IKabs(((((-1.0)*x6533*x6534))+((x6531*x6533))+((x6530*x6531))+(((-1.0)*x6530*x6534))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6536=(cj11*sj12);
IkReal x6537=(r01*sj15);
IkReal x6538=((1.0)*r02);
IkReal x6539=(cj12*sj11);
IkReal x6540=((1.0)*cj15*r00);
CheckValue<IkReal> x6541=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x6541.valid){
continue;
}
CheckValue<IkReal> x6542 = IKatan2WithCheck(IkReal((((x6536*x6537))+(((-1.0)*x6536*x6540))+(((-1.0)*x6539*x6540))+((x6537*x6539)))),IkReal(((((-1.0)*x6536*x6538))+(((-1.0)*x6538*x6539)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6542.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6541.value)))+(x6542.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6543=IKcos(j14);
IkReal x6544=IKsin(j14);
IkReal x6545=(cj15*r20);
IkReal x6546=(cj15*r10);
IkReal x6547=(cj15*r00);
IkReal x6548=((1.0)*x6543);
IkReal x6549=(sj15*x6543);
IkReal x6550=((1.0)*x6544);
IkReal x6551=(sj15*x6544);
evalcond[0]=(((r02*x6544))+(((-1.0)*x6547*x6548))+((r01*x6549)));
evalcond[1]=((((-1.0)*x6545*x6550))+(((-1.0)*r22*x6548))+((r21*x6551)));
evalcond[2]=((((-1.0)*r12*x6548))+(((-1.0)*x6546*x6550))+((r11*x6551)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6548))+(((-1.0)*x6547*x6550))+((r01*x6551)));
evalcond[4]=((((-1.0)*x6545*x6548))+((r22*x6544))+((cj12*sj11))+((r21*x6549))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*x6546*x6548))+((r11*x6549))+((r12*x6544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6552=((1.0)*cj15);
CheckValue<IkReal> x6553 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*r10*x6552)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6553.valid){
continue;
}
CheckValue<IkReal> x6554=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15))+(((-1.0)*r21*x6552)))),-1);
if(!x6554.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6553.value)+(((1.5707963267949)*(x6554.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6555=IKcos(j14);
IkReal x6556=IKsin(j14);
IkReal x6557=(cj15*r20);
IkReal x6558=(cj15*r10);
IkReal x6559=(cj15*r00);
IkReal x6560=((1.0)*x6555);
IkReal x6561=(sj15*x6555);
IkReal x6562=((1.0)*x6556);
IkReal x6563=(sj15*x6556);
evalcond[0]=(((r02*x6556))+(((-1.0)*x6559*x6560))+((r01*x6561)));
evalcond[1]=((((-1.0)*r22*x6560))+((r21*x6563))+(((-1.0)*x6557*x6562)));
evalcond[2]=(((r11*x6563))+(((-1.0)*x6558*x6562))+(((-1.0)*r12*x6560)));
evalcond[3]=((1.0)+(((-1.0)*x6559*x6562))+(((-1.0)*r02*x6560))+((r01*x6563)));
evalcond[4]=(((r21*x6561))+(((-1.0)*x6557*x6560))+((cj12*sj11))+((r22*x6556))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+((r11*x6561))+((r12*x6556))+(((-1.0)*x6558*x6560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x6564=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x6564.valid){
continue;
}
CheckValue<IkReal> x6565 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6565.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6564.value)))+(x6565.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6566=IKcos(j14);
IkReal x6567=IKsin(j14);
IkReal x6568=(cj15*r20);
IkReal x6569=(cj15*r10);
IkReal x6570=(cj15*r00);
IkReal x6571=((1.0)*x6566);
IkReal x6572=(sj15*x6566);
IkReal x6573=((1.0)*x6567);
IkReal x6574=(sj15*x6567);
evalcond[0]=(((r01*x6572))+((r02*x6567))+(((-1.0)*x6570*x6571)));
evalcond[1]=((((-1.0)*r22*x6571))+((r21*x6574))+(((-1.0)*x6568*x6573)));
evalcond[2]=(((r11*x6574))+(((-1.0)*x6569*x6573))+(((-1.0)*r12*x6571)));
evalcond[3]=((1.0)+((r01*x6574))+(((-1.0)*r02*x6571))+(((-1.0)*x6570*x6573)));
evalcond[4]=(((r22*x6567))+((r21*x6572))+((cj12*sj11))+(((-1.0)*x6568*x6571))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((r12*x6567))+((cj11*cj12))+((r11*x6572))+(((-1.0)*x6569*x6571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x6575=((-1.0)*px);
sj13=0;
cj13=1.0;
j13=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6575);
rxp1_1=(px*r21);
rxp1_2=(r11*x6575);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x6576=((-1.0)*px);
sj13=0;
cj13=1.0;
j13=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6576);
rxp1_1=(px*r21);
rxp1_2=(r11*x6576);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=((((-1.0)*cj15*r20))+((r21*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x6577=((-1.0)*px);
sj13=0;
cj13=1.0;
j13=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6577);
rxp1_1=(px*r21);
rxp1_2=(r11*x6577);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=(((r11*sj15))+(((-1.0)*cj15*r10)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x6580=IKPowWithIntegerCheck((((r11*sj15))+(((-1.0)*cj15*r10))),-1);
if(!x6580.valid){
continue;
}
IkReal x6578=x6580.value;
IkReal x6579=(sj10*x6578);
cj14array[0]=((((-1.0)*sj11*sj12*x6579))+((cj11*cj12*x6579)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x6581=IKsin(j14);
IkReal x6582=IKcos(j14);
IkReal x6583=(sj15*x6581);
IkReal x6584=((1.0)*x6582);
IkReal x6585=((1.0)*cj15*x6581);
evalcond[0]=(r02*x6581);
evalcond[1]=((((-1.0)*r02*x6584))+(((-1.0)*sj10)));
evalcond[2]=(((r21*x6583))+(((-1.0)*r20*x6585)));
evalcond[3]=(((r11*x6583))+(((-1.0)*r10*x6585)));
evalcond[4]=(((r21*sj15*x6582))+((cj12*sj11))+(((-1.0)*cj15*r20*x6584))+((cj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x6588=IKPowWithIntegerCheck(((((-1.0)*cj15*r20))+((r21*sj15))),-1);
if(!x6588.valid){
continue;
}
IkReal x6586=x6588.value;
IkReal x6587=((1.0)*x6586);
cj14array[0]=((((-1.0)*cj12*sj11*x6587))+(((-1.0)*cj11*sj12*x6587)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x6589=IKsin(j14);
IkReal x6590=IKcos(j14);
IkReal x6591=(cj15*r10);
IkReal x6592=((1.0)*sj10);
IkReal x6593=(sj15*x6589);
IkReal x6594=((1.0)*x6590);
IkReal x6595=((1.0)*x6589);
evalcond[0]=(r02*x6589);
evalcond[1]=((((-1.0)*r02*x6594))+(((-1.0)*x6592)));
evalcond[2]=(((r21*x6593))+(((-1.0)*cj15*r20*x6595)));
evalcond[3]=(((r11*x6593))+(((-1.0)*x6591*x6595)));
evalcond[4]=((((-1.0)*cj11*cj12*x6592))+(((-1.0)*x6591*x6594))+((r11*sj15*x6590))+((sj10*sj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x6596=IKPowWithIntegerCheck(r02,-1);
if(!x6596.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x6596.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x6597=IKsin(j14);
IkReal x6598=IKcos(j14);
IkReal x6599=((1.0)*cj15);
IkReal x6600=(sj15*x6597);
IkReal x6601=(sj15*x6598);
evalcond[0]=(r02*x6597);
evalcond[1]=(((r21*x6600))+(((-1.0)*r20*x6597*x6599)));
evalcond[2]=((((-1.0)*r10*x6597*x6599))+((r11*x6600)));
evalcond[3]=(((r21*x6601))+((cj12*sj11))+(((-1.0)*r20*x6598*x6599))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj11*cj12*sj10))+(((-1.0)*r10*x6598*x6599))+((r11*x6601))+((sj10*sj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6602=((1.0)*sj15);
CheckValue<IkReal> x6603=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj15*r21))+(((-1.0)*r20*x6602)))),-1);
if(!x6603.valid){
continue;
}
CheckValue<IkReal> x6604 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x6602))+((cj15*r10*sj10))+(((-1.0)*cj10*r01*x6602))+((cj10*cj15*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6604.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6603.value)))+(x6604.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6605=IKsin(j14);
IkReal x6606=IKcos(j14);
IkReal x6607=(cj15*r20);
IkReal x6608=((1.0)*sj10);
IkReal x6609=(cj15*r10);
IkReal x6610=(sj11*sj12);
IkReal x6611=(cj15*r00);
IkReal x6612=(cj11*cj12);
IkReal x6613=((1.0)*x6606);
IkReal x6614=(sj15*x6606);
IkReal x6615=((1.0)*x6605);
IkReal x6616=(sj15*x6605);
evalcond[0]=(((r21*x6616))+(((-1.0)*x6607*x6615))+(((-1.0)*r22*x6613)));
evalcond[1]=((((-1.0)*r12*x6613))+(((-1.0)*x6609*x6615))+cj10+((r11*x6616)));
evalcond[2]=((((-1.0)*x6611*x6615))+((r01*x6616))+(((-1.0)*r02*x6613))+(((-1.0)*x6608)));
evalcond[3]=(((r21*x6614))+(((-1.0)*x6607*x6613))+((r22*x6605))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj10*x6612))+(((-1.0)*x6611*x6613))+((r01*x6614))+((r02*x6605))+((cj10*x6610)));
evalcond[5]=((((-1.0)*x6608*x6612))+((sj10*x6610))+(((-1.0)*x6609*x6613))+((r11*x6614))+((r12*x6605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6617=((1.0)*cj15);
CheckValue<IkReal> x6618=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6617))+(((-1.0)*r10*sj15)))),-1);
if(!x6618.valid){
continue;
}
CheckValue<IkReal> x6619 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x6617))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6619.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6618.value)))+(x6619.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6620=IKsin(j14);
IkReal x6621=IKcos(j14);
IkReal x6622=(cj15*r20);
IkReal x6623=((1.0)*sj10);
IkReal x6624=(cj15*r10);
IkReal x6625=(sj11*sj12);
IkReal x6626=(cj15*r00);
IkReal x6627=(cj11*cj12);
IkReal x6628=((1.0)*x6621);
IkReal x6629=(sj15*x6621);
IkReal x6630=((1.0)*x6620);
IkReal x6631=(sj15*x6620);
evalcond[0]=(((r21*x6631))+(((-1.0)*r22*x6628))+(((-1.0)*x6622*x6630)));
evalcond[1]=((((-1.0)*r12*x6628))+((r11*x6631))+cj10+(((-1.0)*x6624*x6630)));
evalcond[2]=((((-1.0)*x6623))+((r01*x6631))+(((-1.0)*r02*x6628))+(((-1.0)*x6626*x6630)));
evalcond[3]=(((r22*x6620))+((cj12*sj11))+(((-1.0)*x6622*x6628))+((cj11*sj12))+((r21*x6629)));
evalcond[4]=(((r02*x6620))+(((-1.0)*cj10*x6627))+((r01*x6629))+(((-1.0)*x6626*x6628))+((cj10*x6625)));
evalcond[5]=(((sj10*x6625))+((r12*x6620))+((r11*x6629))+(((-1.0)*x6624*x6628))+(((-1.0)*x6623*x6627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6632=((1.0)*cj15);
CheckValue<IkReal> x6633 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x6632))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6633.valid){
continue;
}
CheckValue<IkReal> x6634=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x6632)))),-1);
if(!x6634.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6633.value)+(((1.5707963267949)*(x6634.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6635=IKsin(j14);
IkReal x6636=IKcos(j14);
IkReal x6637=(cj15*r20);
IkReal x6638=((1.0)*sj10);
IkReal x6639=(cj15*r10);
IkReal x6640=(sj11*sj12);
IkReal x6641=(cj15*r00);
IkReal x6642=(cj11*cj12);
IkReal x6643=((1.0)*x6636);
IkReal x6644=(sj15*x6636);
IkReal x6645=((1.0)*x6635);
IkReal x6646=(sj15*x6635);
evalcond[0]=((((-1.0)*r22*x6643))+((r21*x6646))+(((-1.0)*x6637*x6645)));
evalcond[1]=((((-1.0)*x6639*x6645))+((r11*x6646))+cj10+(((-1.0)*r12*x6643)));
evalcond[2]=(((r01*x6646))+(((-1.0)*x6641*x6645))+(((-1.0)*r02*x6643))+(((-1.0)*x6638)));
evalcond[3]=(((r21*x6644))+(((-1.0)*x6637*x6643))+((r22*x6635))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj10*x6642))+((r01*x6644))+(((-1.0)*x6641*x6643))+((r02*x6635))+((cj10*x6640)));
evalcond[5]=((((-1.0)*x6639*x6643))+(((-1.0)*x6638*x6642))+((r11*x6644))+((sj10*x6640))+((r12*x6635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x6647=((((-1.0)*cj11*sj12))+(((-1.0)*cj12*sj11)));
j10eval[0]=x6647;
j10eval[1]=IKsign(x6647);
j10eval[2]=((IKabs((((cj15*r01))+((r00*sj15)))))+(IKabs((((cj15*r11))+((r10*sj15))))));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  || IKabs(j10eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x6648=cj15*cj15;
IkReal x6649=r21*r21;
IkReal x6650=(cj15*r20);
IkReal x6651=(cj12*sj11);
IkReal x6652=(r21*sj15);
IkReal x6653=(cj11*sj12);
IkReal x6654=((r22*r22)+x6649+(((-2.0)*x6650*x6652))+(((-1.0)*x6648*x6649))+((x6648*(r20*r20))));
j14eval[0]=x6654;
j14eval[1]=IKsign(x6654);
j14eval[2]=((IKabs((((x6652*x6653))+(((-1.0)*x6650*x6653))+(((-1.0)*x6650*x6651))+((x6651*x6652)))))+(IKabs((((r22*x6651))+((r22*x6653))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j10eval[2];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x6655=cj11*cj11;
IkReal x6656=(cj12*sj12);
IkReal x6657=(cj12*sj11);
IkReal x6658=(cj11*sj11);
j10eval[0]=((((-2.0)*cj11*cj12*x6657))+x6658+x6656+(((-2.0)*x6655*x6656))+(((-1.14255568581477)*sj12*x6655))+(((-1.14255568581477)*cj11*x6657)));
j10eval[1]=((((-1.0)*cj11*sj12))+(((-1.0)*x6657)));
if( IKabs(j10eval[0]) < 0.0000010000000000  || IKabs(j10eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((2.06387083990023)*py))+(((-0.507498115261088)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.06387083990023)*px))+(((0.507498115261088)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.06387083990023)*py))+(((-0.507498115261088)*px))))+IKsqr(((((2.06387083990023)*px))+(((0.507498115261088)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((2.06387083990023)*py))+(((-0.507498115261088)*px))), ((((2.06387083990023)*px))+(((0.507498115261088)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x6659=IKsin(j10);
IkReal x6660=IKcos(j10);
evalcond[0]=((((-0.11235)*x6659))+(((0.4569)*x6660))+(((-1.0)*px)));
evalcond[1]=((((0.4569)*x6659))+(((-1.0)*py))+(((0.11235)*x6660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x6661=((1.0)*cj15);
IkReal x6662=((((-1.0)*r01*x6661))+(((-1.0)*r00*sj15)));
j14eval[0]=x6662;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x6661))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x6662);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x6663=((1.0)*cj15);
IkReal x6664=((((-1.0)*r11*x6663))+(((-1.0)*r10*sj15)));
j14eval[0]=x6664;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x6663))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x6664);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=0;
sj11=0;
cj11=1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x6665=cj15*cj15;
IkReal x6666=(r11*r21);
IkReal x6667=(cj15*r20);
IkReal x6668=((1.0)*r21*sj15);
IkReal x6669=(x6666+((r12*r22))+(((-1.0)*r11*sj15*x6667))+((r10*r20*x6665))+(((-1.0)*x6665*x6666))+(((-1.0)*cj15*r10*x6668)));
j14eval[0]=x6669;
j14eval[1]=IKsign(x6669);
j14eval[2]=((IKabs((((cj10*x6667))+(((-1.0)*cj10*x6668)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6670=cj15*cj15;
IkReal x6671=(cj15*r20);
IkReal x6672=(r11*r21);
IkReal x6673=((1.0)*r21*sj15);
CheckValue<IkReal> x6674 = IKatan2WithCheck(IkReal((((cj10*x6671))+(((-1.0)*cj10*x6673)))),IkReal((cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6674.valid){
continue;
}
CheckValue<IkReal> x6675=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj15*x6671))+x6672+((r12*r22))+((r10*r20*x6670))+(((-1.0)*cj15*r10*x6673))+(((-1.0)*x6670*x6672)))),-1);
if(!x6675.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6674.value)+(((1.5707963267949)*(x6675.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6676=IKsin(j14);
IkReal x6677=IKcos(j14);
IkReal x6678=((1.0)*sj10);
IkReal x6679=(sj15*x6676);
IkReal x6680=((1.0)*x6677);
IkReal x6681=((1.0)*x6676);
IkReal x6682=(cj15*x6677);
IkReal x6683=(cj15*x6681);
evalcond[0]=((((-1.0)*r20*x6683))+(((-1.0)*r22*x6680))+((r21*x6679)));
evalcond[1]=(((r20*x6682))+(((-1.0)*r21*sj15*x6680))+(((-1.0)*r22*x6681)));
evalcond[2]=(((r11*x6679))+cj10+(((-1.0)*r10*x6683))+(((-1.0)*r12*x6680)));
evalcond[3]=((((-1.0)*r02*x6680))+(((-1.0)*r00*x6683))+(((-1.0)*x6678))+((r01*x6679)));
evalcond[4]=((((-1.0)*r02*x6681))+(((-1.0)*r01*sj15*x6680))+((r00*x6682))+(((-1.0)*cj10)));
evalcond[5]=((((-1.0)*x6678))+((r10*x6682))+(((-1.0)*r12*x6681))+(((-1.0)*r11*sj15*x6680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6684=((1.0)*cj15);
CheckValue<IkReal> x6685=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6684))+(((-1.0)*r10*sj15)))),-1);
if(!x6685.valid){
continue;
}
CheckValue<IkReal> x6686 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x6684))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6686.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6685.value)))+(x6686.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6687=IKsin(j14);
IkReal x6688=IKcos(j14);
IkReal x6689=((1.0)*sj10);
IkReal x6690=(sj15*x6687);
IkReal x6691=((1.0)*x6688);
IkReal x6692=((1.0)*x6687);
IkReal x6693=(cj15*x6688);
IkReal x6694=(cj15*x6692);
evalcond[0]=((((-1.0)*r20*x6694))+((r21*x6690))+(((-1.0)*r22*x6691)));
evalcond[1]=((((-1.0)*r21*sj15*x6691))+((r20*x6693))+(((-1.0)*r22*x6692)));
evalcond[2]=((((-1.0)*r10*x6694))+((r11*x6690))+cj10+(((-1.0)*r12*x6691)));
evalcond[3]=((((-1.0)*r00*x6694))+(((-1.0)*r02*x6691))+(((-1.0)*x6689))+((r01*x6690)));
evalcond[4]=((((-1.0)*r02*x6692))+(((-1.0)*r01*sj15*x6691))+((r00*x6693))+(((-1.0)*cj10)));
evalcond[5]=((((-1.0)*r11*sj15*x6691))+((r10*x6693))+(((-1.0)*x6689))+(((-1.0)*r12*x6692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6695=((1.0)*cj15);
CheckValue<IkReal> x6696=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6695))+(((-1.0)*r00*sj15)))),-1);
if(!x6696.valid){
continue;
}
CheckValue<IkReal> x6697 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x6695)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6697.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6696.value)))+(x6697.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6698=IKsin(j14);
IkReal x6699=IKcos(j14);
IkReal x6700=((1.0)*sj10);
IkReal x6701=(sj15*x6698);
IkReal x6702=((1.0)*x6699);
IkReal x6703=((1.0)*x6698);
IkReal x6704=(cj15*x6699);
IkReal x6705=(cj15*x6703);
evalcond[0]=(((r21*x6701))+(((-1.0)*r22*x6702))+(((-1.0)*r20*x6705)));
evalcond[1]=((((-1.0)*r21*sj15*x6702))+(((-1.0)*r22*x6703))+((r20*x6704)));
evalcond[2]=((((-1.0)*r10*x6705))+cj10+((r11*x6701))+(((-1.0)*r12*x6702)));
evalcond[3]=((((-1.0)*r02*x6702))+(((-1.0)*x6700))+((r01*x6701))+(((-1.0)*r00*x6705)));
evalcond[4]=((((-1.0)*r02*x6703))+((r00*x6704))+(((-1.0)*r01*sj15*x6702))+(((-1.0)*cj10)));
evalcond[5]=(((r10*x6704))+(((-1.0)*x6700))+(((-1.0)*r11*sj15*x6702))+(((-1.0)*r12*x6703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-8.29354345611924)*px))+(((2.24409186529617)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.24409186529617)*px))+(((8.29354345611924)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-8.29354345611924)*px))+(((2.24409186529617)*py))))+IKsqr(((((2.24409186529617)*px))+(((8.29354345611924)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-8.29354345611924)*px))+(((2.24409186529617)*py))), ((((2.24409186529617)*px))+(((8.29354345611924)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x6706=IKcos(j10);
IkReal x6707=IKsin(j10);
evalcond[0]=((((0.0304)*x6706))+(((-1.0)*px))+(((-0.11235)*x6707)));
evalcond[1]=((((0.0304)*x6707))+(((-1.0)*py))+(((0.11235)*x6706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x6708=((1.0)*cj15);
IkReal x6709=((((-1.0)*r00*sj15))+(((-1.0)*r01*x6708)));
j14eval[0]=x6709;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x6708))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x6709);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x6710=cj15*cj15;
IkReal x6711=(r01*r21);
IkReal x6712=((1.0)*cj15*sj15);
IkReal x6713=(((r00*r20*x6710))+x6711+(((-1.0)*x6710*x6711))+(((-1.0)*r01*r20*x6712))+((r02*r22))+(((-1.0)*r00*r21*x6712)));
j14eval[0]=x6713;
j14eval[1]=IKsign(x6713);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=0;
sj11=0;
cj11=1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x6714=cj15*cj15;
IkReal x6715=(r21*sj15);
IkReal x6716=(r11*r21);
IkReal x6717=((1.0)*cj15);
IkReal x6718=((((-1.0)*r11*r20*sj15*x6717))+x6716+(((-1.0)*r10*x6715*x6717))+((r12*r22))+((r10*r20*x6714))+(((-1.0)*x6714*x6716)));
j14eval[0]=x6718;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x6717))+((sj10*x6715)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x6718);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6719=cj15*cj15;
IkReal x6720=(r21*sj15);
IkReal x6721=((1.0)*cj15);
IkReal x6722=(r11*r21);
CheckValue<IkReal> x6723 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x6721))+((sj10*x6720)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6723.valid){
continue;
}
CheckValue<IkReal> x6724=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6720*x6721))+(((-1.0)*r11*r20*sj15*x6721))+x6722+((r12*r22))+((r10*r20*x6719))+(((-1.0)*x6719*x6722)))),-1);
if(!x6724.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6723.value)+(((1.5707963267949)*(x6724.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6725=IKsin(j14);
IkReal x6726=IKcos(j14);
IkReal x6727=(sj15*x6725);
IkReal x6728=((1.0)*x6726);
IkReal x6729=((1.0)*x6725);
IkReal x6730=(cj15*x6726);
IkReal x6731=(cj15*x6729);
evalcond[0]=((((-1.0)*r22*x6728))+(((-1.0)*r20*x6731))+((r21*x6727)));
evalcond[1]=((((-1.0)*r22*x6729))+((r20*x6730))+(((-1.0)*r21*sj15*x6728)));
evalcond[2]=(((r11*x6727))+(((-1.0)*r10*x6731))+cj10+(((-1.0)*r12*x6728)));
evalcond[3]=(cj10+(((-1.0)*r01*sj15*x6728))+(((-1.0)*r02*x6729))+((r00*x6730)));
evalcond[4]=((((-1.0)*r11*sj15*x6728))+sj10+((r10*x6730))+(((-1.0)*r12*x6729)));
evalcond[5]=((((-1.0)*r00*x6731))+(((-1.0)*sj10))+(((-1.0)*r02*x6728))+((r01*x6727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6732=cj15*cj15;
IkReal x6733=(r01*r21);
IkReal x6734=((1.0)*cj15*sj15);
CheckValue<IkReal> x6735 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6735.valid){
continue;
}
CheckValue<IkReal> x6736=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6732*x6733))+(((-1.0)*r01*r20*x6734))+x6733+(((-1.0)*r00*r21*x6734))+((r00*r20*x6732))+((r02*r22)))),-1);
if(!x6736.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6735.value)+(((1.5707963267949)*(x6736.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6737=IKsin(j14);
IkReal x6738=IKcos(j14);
IkReal x6739=(sj15*x6737);
IkReal x6740=((1.0)*x6738);
IkReal x6741=((1.0)*x6737);
IkReal x6742=(cj15*x6738);
IkReal x6743=(cj15*x6741);
evalcond[0]=(((r21*x6739))+(((-1.0)*r22*x6740))+(((-1.0)*r20*x6743)));
evalcond[1]=((((-1.0)*r22*x6741))+(((-1.0)*r21*sj15*x6740))+((r20*x6742)));
evalcond[2]=((((-1.0)*r12*x6740))+(((-1.0)*r10*x6743))+((r11*x6739))+cj10);
evalcond[3]=((((-1.0)*r01*sj15*x6740))+(((-1.0)*r02*x6741))+cj10+((r00*x6742)));
evalcond[4]=((((-1.0)*r12*x6741))+((r10*x6742))+sj10+(((-1.0)*r11*sj15*x6740)));
evalcond[5]=((((-1.0)*r00*x6743))+(((-1.0)*r02*x6740))+(((-1.0)*sj10))+((r01*x6739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6744=((1.0)*cj15);
CheckValue<IkReal> x6745 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x6744))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6745.valid){
continue;
}
CheckValue<IkReal> x6746=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6744))+(((-1.0)*r00*sj15)))),-1);
if(!x6746.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6745.value)+(((1.5707963267949)*(x6746.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6747=IKsin(j14);
IkReal x6748=IKcos(j14);
IkReal x6749=(sj15*x6747);
IkReal x6750=((1.0)*x6748);
IkReal x6751=((1.0)*x6747);
IkReal x6752=(cj15*x6748);
IkReal x6753=(cj15*x6751);
evalcond[0]=((((-1.0)*r20*x6753))+((r21*x6749))+(((-1.0)*r22*x6750)));
evalcond[1]=(((r20*x6752))+(((-1.0)*r21*sj15*x6750))+(((-1.0)*r22*x6751)));
evalcond[2]=(((r11*x6749))+(((-1.0)*r10*x6753))+cj10+(((-1.0)*r12*x6750)));
evalcond[3]=((((-1.0)*r01*sj15*x6750))+((r00*x6752))+cj10+(((-1.0)*r02*x6751)));
evalcond[4]=(sj10+((r10*x6752))+(((-1.0)*r12*x6751))+(((-1.0)*r11*sj15*x6750)));
evalcond[5]=((((-1.0)*sj10))+(((-1.0)*r00*x6753))+(((-1.0)*r02*x6750))+((r01*x6749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x6754=((1.0)*cj15);
IkReal x6755=((1.0)*sj15);
if( IKabs(((((-1.0)*r10*x6755))+(((-1.0)*r11*x6754)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x6754))+(((-1.0)*r00*x6755)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x6755))+(((-1.0)*r11*x6754))))+IKsqr(((((-1.0)*r01*x6754))+(((-1.0)*r00*x6755))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r10*x6755))+(((-1.0)*r11*x6754))), ((((-1.0)*r01*x6754))+(((-1.0)*r00*x6755))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x6756=IKsin(j10);
IkReal x6757=IKcos(j10);
IkReal x6758=((1.0)*cj15);
IkReal x6759=((0.08535)*sj15);
IkReal x6760=((1.0)*sj15);
IkReal x6761=((0.08535)*cj15);
evalcond[0]=((((-1.0)*x6757))+(((-1.0)*r01*x6758))+(((-1.0)*r00*x6760)));
evalcond[1]=((((-1.0)*x6756))+(((-1.0)*r10*x6760))+(((-1.0)*r11*x6758)));
evalcond[2]=((((-0.11235)*x6756))+(((-1.0)*px))+(((-1.0)*r01*x6761))+(((-1.0)*r00*x6759)));
evalcond[3]=((((0.11235)*x6757))+(((-1.0)*r10*x6759))+(((-1.0)*py))+(((-1.0)*r11*x6761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x6762=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x6762;
j14eval[1]=((IKabs(r02))+(IKabs((((cj15*r00))+(((-1.0)*r01*sj15))))));
j14eval[2]=IKsign(x6762);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x6763=((1.0)*cj15);
IkReal x6764=((((-1.0)*r01*x6763))+(((-1.0)*r00*sj15)));
j14eval[0]=x6764;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x6763))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x6764);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x6765=cj15*cj15;
IkReal x6766=r21*r21;
IkReal x6767=(cj15*r20);
IkReal x6768=(r21*sj15);
IkReal x6769=((((-2.0)*x6767*x6768))+(r22*r22)+x6766+(((-1.0)*x6765*x6766))+((x6765*(r20*r20))));
j14eval[0]=x6769;
j14eval[1]=IKsign(x6769);
j14eval[2]=((IKabs(r22))+(IKabs((x6768+(((-1.0)*x6767))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6770=cj15*cj15;
IkReal x6771=r21*r21;
IkReal x6772=(cj15*r20);
IkReal x6773=(r21*sj15);
CheckValue<IkReal> x6774 = IKatan2WithCheck(IkReal(r22),IkReal((x6773+(((-1.0)*x6772)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6774.valid){
continue;
}
CheckValue<IkReal> x6775=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-1.0)*x6770*x6771))+x6771+(((-2.0)*x6772*x6773))+((x6770*(r20*r20))))),-1);
if(!x6775.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6774.value)+(((1.5707963267949)*(x6775.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6776=IKsin(j14);
IkReal x6777=IKcos(j14);
IkReal x6778=(sj15*x6776);
IkReal x6779=(cj15*x6777);
IkReal x6780=((1.0)*x6777);
IkReal x6781=((1.0)*x6776);
IkReal x6782=(cj15*x6781);
evalcond[0]=(((r21*x6778))+(((-1.0)*r22*x6780))+(((-1.0)*r20*x6782)));
evalcond[1]=((((-1.0)*r02*x6781))+(((-1.0)*r01*sj15*x6780))+((r00*x6779)));
evalcond[2]=((((-1.0)*r12*x6781))+((r10*x6779))+(((-1.0)*r11*sj15*x6780)));
evalcond[3]=(((r11*x6778))+(((-1.0)*r12*x6780))+cj10+(((-1.0)*r10*x6782)));
evalcond[4]=((1.0)+(((-1.0)*r21*sj15*x6780))+(((-1.0)*r22*x6781))+((r20*x6779)));
evalcond[5]=((((-1.0)*r02*x6780))+(((-1.0)*sj10))+(((-1.0)*r00*x6782))+((r01*x6778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6783=((1.0)*cj15);
CheckValue<IkReal> x6784 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x6783)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6784.valid){
continue;
}
CheckValue<IkReal> x6785=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x6783)))),-1);
if(!x6785.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6784.value)+(((1.5707963267949)*(x6785.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6786=IKsin(j14);
IkReal x6787=IKcos(j14);
IkReal x6788=(sj15*x6786);
IkReal x6789=(cj15*x6787);
IkReal x6790=((1.0)*x6787);
IkReal x6791=((1.0)*x6786);
IkReal x6792=(cj15*x6791);
evalcond[0]=((((-1.0)*r22*x6790))+(((-1.0)*r20*x6792))+((r21*x6788)));
evalcond[1]=((((-1.0)*r01*sj15*x6790))+((r00*x6789))+(((-1.0)*r02*x6791)));
evalcond[2]=((((-1.0)*r11*sj15*x6790))+((r10*x6789))+(((-1.0)*r12*x6791)));
evalcond[3]=((((-1.0)*r10*x6792))+((r11*x6788))+cj10+(((-1.0)*r12*x6790)));
evalcond[4]=((1.0)+((r20*x6789))+(((-1.0)*r21*sj15*x6790))+(((-1.0)*r22*x6791)));
evalcond[5]=((((-1.0)*r00*x6792))+(((-1.0)*sj10))+((r01*x6788))+(((-1.0)*r02*x6790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x6793=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x6793.valid){
continue;
}
CheckValue<IkReal> x6794 = IKatan2WithCheck(IkReal((((cj15*r00))+(((-1.0)*r01*sj15)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6794.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6793.value)))+(x6794.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6795=IKsin(j14);
IkReal x6796=IKcos(j14);
IkReal x6797=(sj15*x6795);
IkReal x6798=(cj15*x6796);
IkReal x6799=((1.0)*x6796);
IkReal x6800=((1.0)*x6795);
IkReal x6801=(cj15*x6800);
evalcond[0]=(((r21*x6797))+(((-1.0)*r22*x6799))+(((-1.0)*r20*x6801)));
evalcond[1]=(((r00*x6798))+(((-1.0)*r02*x6800))+(((-1.0)*r01*sj15*x6799)));
evalcond[2]=((((-1.0)*r12*x6800))+(((-1.0)*r11*sj15*x6799))+((r10*x6798)));
evalcond[3]=(cj10+(((-1.0)*r10*x6801))+((r11*x6797))+(((-1.0)*r12*x6799)));
evalcond[4]=((1.0)+(((-1.0)*r22*x6800))+(((-1.0)*r21*sj15*x6799))+((r20*x6798)));
evalcond[5]=(((r01*x6797))+(((-1.0)*sj10))+(((-1.0)*r00*x6801))+(((-1.0)*r02*x6799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-3.67051685094268)*py))+(((-1.9337986785623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.67051685094268)*px))+(((1.9337986785623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))))+IKsqr(((((-3.67051685094268)*px))+(((1.9337986785623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))), ((((-3.67051685094268)*px))+(((1.9337986785623)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x6802=IKcos(j10);
IkReal x6803=IKsin(j10);
evalcond[0]=((((-0.21325)*x6802))+(((-1.0)*px))+(((-0.11235)*x6803)));
evalcond[1]=((((-0.21325)*x6803))+(((-1.0)*py))+(((0.11235)*x6802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x6804=((1.0)*cj15);
IkReal x6805=((((-1.0)*r01*x6804))+(((-1.0)*r00*sj15)));
j14eval[0]=x6805;
j14eval[1]=((IKabs((cj10*r22)))+(IKabs(((((-1.0)*cj10*r20*x6804))+((cj10*r21*sj15))))));
j14eval[2]=IKsign(x6805);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x6806=cj15*cj15;
IkReal x6807=(r01*r21);
IkReal x6808=((1.0)*cj15*sj15);
IkReal x6809=(((r00*r20*x6806))+x6807+(((-1.0)*x6806*x6807))+((r02*r22))+(((-1.0)*r00*r21*x6808))+(((-1.0)*r01*r20*x6808)));
j14eval[0]=x6809;
j14eval[1]=IKsign(x6809);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x6810=cj15*cj15;
IkReal x6811=(r21*sj15);
IkReal x6812=(r11*r21);
IkReal x6813=((1.0)*cj15);
IkReal x6814=((((-1.0)*x6810*x6812))+((r10*r20*x6810))+(((-1.0)*r11*r20*sj15*x6813))+((r12*r22))+(((-1.0)*r10*x6811*x6813))+x6812);
j14eval[0]=x6814;
j14eval[1]=((IKabs((((sj10*x6811))+(((-1.0)*r20*sj10*x6813)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x6814);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6815=cj15*cj15;
IkReal x6816=(r21*sj15);
IkReal x6817=((1.0)*cj15);
IkReal x6818=(r11*r21);
CheckValue<IkReal> x6819 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((sj10*x6816))+(((-1.0)*r20*sj10*x6817)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6819.valid){
continue;
}
CheckValue<IkReal> x6820=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6816*x6817))+((r10*r20*x6815))+(((-1.0)*r11*r20*sj15*x6817))+((r12*r22))+x6818+(((-1.0)*x6815*x6818)))),-1);
if(!x6820.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6819.value)+(((1.5707963267949)*(x6820.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6821=IKsin(j14);
IkReal x6822=IKcos(j14);
IkReal x6823=(sj15*x6821);
IkReal x6824=((1.0)*x6822);
IkReal x6825=((1.0)*x6821);
IkReal x6826=(cj15*x6822);
IkReal x6827=(cj15*x6825);
evalcond[0]=(((r21*x6823))+(((-1.0)*r22*x6824))+(((-1.0)*r20*x6827)));
evalcond[1]=(((r20*x6826))+(((-1.0)*r22*x6825))+(((-1.0)*r21*sj15*x6824)));
evalcond[2]=((((-1.0)*r12*x6824))+(((-1.0)*r10*x6827))+cj10+((r11*x6823)));
evalcond[3]=(((r00*x6826))+(((-1.0)*r02*x6825))+(((-1.0)*r01*sj15*x6824))+cj10);
evalcond[4]=(((r10*x6826))+(((-1.0)*r12*x6825))+sj10+(((-1.0)*r11*sj15*x6824)));
evalcond[5]=((((-1.0)*r02*x6824))+((r01*x6823))+(((-1.0)*r00*x6827))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6828=cj15*cj15;
IkReal x6829=(r01*r21);
IkReal x6830=((1.0)*cj15*sj15);
CheckValue<IkReal> x6831 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6831.valid){
continue;
}
CheckValue<IkReal> x6832=IKPowWithIntegerCheck(IKsign((x6829+((r02*r22))+((r00*r20*x6828))+(((-1.0)*r01*r20*x6830))+(((-1.0)*x6828*x6829))+(((-1.0)*r00*r21*x6830)))),-1);
if(!x6832.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6831.value)+(((1.5707963267949)*(x6832.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6833=IKsin(j14);
IkReal x6834=IKcos(j14);
IkReal x6835=(sj15*x6833);
IkReal x6836=((1.0)*x6834);
IkReal x6837=((1.0)*x6833);
IkReal x6838=(cj15*x6834);
IkReal x6839=(cj15*x6837);
evalcond[0]=(((r21*x6835))+(((-1.0)*r22*x6836))+(((-1.0)*r20*x6839)));
evalcond[1]=(((r20*x6838))+(((-1.0)*r22*x6837))+(((-1.0)*r21*sj15*x6836)));
evalcond[2]=((((-1.0)*r12*x6836))+((r11*x6835))+cj10+(((-1.0)*r10*x6839)));
evalcond[3]=((((-1.0)*r02*x6837))+((r00*x6838))+(((-1.0)*r01*sj15*x6836))+cj10);
evalcond[4]=((((-1.0)*r12*x6837))+((r10*x6838))+sj10+(((-1.0)*r11*sj15*x6836)));
evalcond[5]=((((-1.0)*r02*x6836))+((r01*x6835))+(((-1.0)*r00*x6839))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6840=((1.0)*cj15);
CheckValue<IkReal> x6841=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6840))+(((-1.0)*r00*sj15)))),-1);
if(!x6841.valid){
continue;
}
CheckValue<IkReal> x6842 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x6840)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6842.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6841.value)))+(x6842.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6843=IKsin(j14);
IkReal x6844=IKcos(j14);
IkReal x6845=(sj15*x6843);
IkReal x6846=((1.0)*x6844);
IkReal x6847=((1.0)*x6843);
IkReal x6848=(cj15*x6844);
IkReal x6849=(cj15*x6847);
evalcond[0]=(((r21*x6845))+(((-1.0)*r20*x6849))+(((-1.0)*r22*x6846)));
evalcond[1]=((((-1.0)*r22*x6847))+(((-1.0)*r21*sj15*x6846))+((r20*x6848)));
evalcond[2]=(((r11*x6845))+cj10+(((-1.0)*r10*x6849))+(((-1.0)*r12*x6846)));
evalcond[3]=((((-1.0)*r01*sj15*x6846))+cj10+(((-1.0)*r02*x6847))+((r00*x6848)));
evalcond[4]=((((-1.0)*r11*sj15*x6846))+sj10+(((-1.0)*r12*x6847))+((r10*x6848)));
evalcond[5]=((((-1.0)*r00*x6849))+(((-1.0)*sj10))+(((-1.0)*r02*x6846))+((r01*x6845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs((((cj15*r11))+((r10*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*r01))+((r00*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj15*r11))+((r10*sj15))))+IKsqr((((cj15*r01))+((r00*sj15))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((cj15*r11))+((r10*sj15))), (((cj15*r01))+((r00*sj15))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x6850=IKsin(j10);
IkReal x6851=IKcos(j10);
IkReal x6852=((1.0)*cj15);
IkReal x6853=((0.08535)*sj15);
IkReal x6854=((1.0)*sj15);
IkReal x6855=((0.08535)*cj15);
evalcond[0]=((((-1.0)*r00*x6854))+(((-1.0)*r01*x6852))+x6851);
evalcond[1]=((((-1.0)*r10*x6854))+(((-1.0)*r11*x6852))+x6850);
evalcond[2]=((((-1.0)*r00*x6853))+(((-1.0)*px))+(((-1.0)*r01*x6855))+(((-0.11235)*x6850)));
evalcond[3]=((((-1.0)*r10*x6853))+(((-1.0)*r11*x6855))+(((-1.0)*py))+(((0.11235)*x6851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x6856=((1.0)*sj15);
IkReal x6857=((((-1.0)*r10*x6856))+(((-1.0)*cj15*r11)));
j14eval[0]=x6857;
j14eval[1]=IKsign(x6857);
j14eval[2]=((IKabs(r02))+(IKabs((((cj15*r00))+(((-1.0)*r01*x6856))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x6858=((1.0)*cj15);
IkReal x6859=((((-1.0)*r01*x6858))+(((-1.0)*r00*sj15)));
j14eval[0]=x6859;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x6858))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x6859);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x6860=r21*r21;
IkReal x6861=cj15*cj15;
IkReal x6862=(cj15*r20);
IkReal x6863=(r21*sj15);
IkReal x6864=(((x6860*x6861))+(((-1.0)*x6861*(r20*r20)))+(((-1.0)*x6860))+(((-1.0)*(r22*r22)))+(((2.0)*x6862*x6863)));
j14eval[0]=x6864;
j14eval[1]=IKsign(x6864);
j14eval[2]=((IKabs(((((-1.0)*x6862))+x6863)))+(IKabs(r22)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6865=r21*r21;
IkReal x6866=cj15*cj15;
IkReal x6867=(cj15*r20);
IkReal x6868=(r21*sj15);
CheckValue<IkReal> x6869=IKPowWithIntegerCheck(IKsign(((((2.0)*x6867*x6868))+((x6865*x6866))+(((-1.0)*x6865))+(((-1.0)*(r22*r22)))+(((-1.0)*x6866*(r20*r20))))),-1);
if(!x6869.valid){
continue;
}
CheckValue<IkReal> x6870 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x6867))+x6868)),IKFAST_ATAN2_MAGTHRESH);
if(!x6870.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6869.value)))+(x6870.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6871=IKsin(j14);
IkReal x6872=IKcos(j14);
IkReal x6873=(sj15*x6871);
IkReal x6874=(cj15*x6872);
IkReal x6875=((1.0)*x6872);
IkReal x6876=((1.0)*x6871);
IkReal x6877=(cj15*x6876);
evalcond[0]=((((-1.0)*r20*x6877))+((r21*x6873))+(((-1.0)*r22*x6875)));
evalcond[1]=((((-1.0)*r01*sj15*x6875))+(((-1.0)*r02*x6876))+((r00*x6874)));
evalcond[2]=((((-1.0)*r12*x6876))+((r10*x6874))+(((-1.0)*r11*sj15*x6875)));
evalcond[3]=(((r11*x6873))+cj10+(((-1.0)*r12*x6875))+(((-1.0)*r10*x6877)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x6876))+(((-1.0)*r21*sj15*x6875))+((r20*x6874)));
evalcond[5]=((((-1.0)*r00*x6877))+(((-1.0)*sj10))+(((-1.0)*r02*x6875))+((r01*x6873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6878=((1.0)*cj15);
CheckValue<IkReal> x6879=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6878))+(((-1.0)*r00*sj15)))),-1);
if(!x6879.valid){
continue;
}
CheckValue<IkReal> x6880 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x6878)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6880.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6879.value)))+(x6880.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6881=IKsin(j14);
IkReal x6882=IKcos(j14);
IkReal x6883=(sj15*x6881);
IkReal x6884=(cj15*x6882);
IkReal x6885=((1.0)*x6882);
IkReal x6886=((1.0)*x6881);
IkReal x6887=(cj15*x6886);
evalcond[0]=((((-1.0)*r20*x6887))+((r21*x6883))+(((-1.0)*r22*x6885)));
evalcond[1]=((((-1.0)*r02*x6886))+(((-1.0)*r01*sj15*x6885))+((r00*x6884)));
evalcond[2]=((((-1.0)*r11*sj15*x6885))+(((-1.0)*r12*x6886))+((r10*x6884)));
evalcond[3]=(((r11*x6883))+cj10+(((-1.0)*r12*x6885))+(((-1.0)*r10*x6887)));
evalcond[4]=((-1.0)+((r20*x6884))+(((-1.0)*r21*sj15*x6885))+(((-1.0)*r22*x6886)));
evalcond[5]=((((-1.0)*r02*x6885))+(((-1.0)*sj10))+((r01*x6883))+(((-1.0)*r00*x6887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6888=((1.0)*sj15);
CheckValue<IkReal> x6889 = IKatan2WithCheck(IkReal((((cj15*r00))+(((-1.0)*r01*x6888)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6889.valid){
continue;
}
CheckValue<IkReal> x6890=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj15*r11))+(((-1.0)*r10*x6888)))),-1);
if(!x6890.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6889.value)+(((1.5707963267949)*(x6890.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6891=IKsin(j14);
IkReal x6892=IKcos(j14);
IkReal x6893=(sj15*x6891);
IkReal x6894=(cj15*x6892);
IkReal x6895=((1.0)*x6892);
IkReal x6896=((1.0)*x6891);
IkReal x6897=(cj15*x6896);
evalcond[0]=((((-1.0)*r20*x6897))+((r21*x6893))+(((-1.0)*r22*x6895)));
evalcond[1]=((((-1.0)*r02*x6896))+(((-1.0)*r01*sj15*x6895))+((r00*x6894)));
evalcond[2]=(((r10*x6894))+(((-1.0)*r11*sj15*x6895))+(((-1.0)*r12*x6896)));
evalcond[3]=((((-1.0)*r10*x6897))+cj10+(((-1.0)*r12*x6895))+((r11*x6893)));
evalcond[4]=((-1.0)+(((-1.0)*r21*sj15*x6895))+(((-1.0)*r22*x6896))+((r20*x6894)));
evalcond[5]=((((-1.0)*sj10))+(((-1.0)*r02*x6895))+(((-1.0)*r00*x6897))+((r01*x6893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-1.9337986785623)*px))+(((3.67051685094268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.9337986785623)*py))+(((3.67051685094268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.9337986785623)*px))+(((3.67051685094268)*py))))+IKsqr(((((1.9337986785623)*py))+(((3.67051685094268)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.9337986785623)*px))+(((3.67051685094268)*py))), ((((1.9337986785623)*py))+(((3.67051685094268)*px))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x6898=IKcos(j10);
IkReal x6899=IKsin(j10);
evalcond[0]=((((-0.11235)*x6899))+(((-1.0)*px))+(((0.21325)*x6898)));
evalcond[1]=((((0.11235)*x6898))+(((-1.0)*py))+(((0.21325)*x6899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x6900=((1.0)*cj15);
IkReal x6901=((((-1.0)*r00*sj15))+(((-1.0)*r01*x6900)));
j14eval[0]=x6901;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x6900))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x6901);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x6902=((1.0)*cj15);
IkReal x6903=((((-1.0)*r11*x6902))+(((-1.0)*r10*sj15)));
j14eval[0]=x6903;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x6902))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x6903);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x6904=cj15*cj15;
IkReal x6905=(r11*r21);
IkReal x6906=(cj15*r20);
IkReal x6907=((1.0)*r21*sj15);
IkReal x6908=(((r12*r22))+(((-1.0)*x6904*x6905))+(((-1.0)*r11*sj15*x6906))+((r10*r20*x6904))+(((-1.0)*cj15*r10*x6907))+x6905);
j14eval[0]=x6908;
j14eval[1]=IKsign(x6908);
j14eval[2]=((IKabs((((cj10*x6906))+(((-1.0)*cj10*x6907)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6909=cj15*cj15;
IkReal x6910=(cj15*r20);
IkReal x6911=(r11*r21);
IkReal x6912=((1.0)*r21*sj15);
CheckValue<IkReal> x6913 = IKatan2WithCheck(IkReal((((cj10*x6910))+(((-1.0)*cj10*x6912)))),IkReal((cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6913.valid){
continue;
}
CheckValue<IkReal> x6914=IKPowWithIntegerCheck(IKsign((((r12*r22))+(((-1.0)*x6909*x6911))+((r10*r20*x6909))+(((-1.0)*r11*sj15*x6910))+x6911+(((-1.0)*cj15*r10*x6912)))),-1);
if(!x6914.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6913.value)+(((1.5707963267949)*(x6914.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6915=IKsin(j14);
IkReal x6916=IKcos(j14);
IkReal x6917=((1.0)*sj10);
IkReal x6918=(sj15*x6915);
IkReal x6919=((1.0)*x6916);
IkReal x6920=((1.0)*x6915);
IkReal x6921=(cj15*x6916);
IkReal x6922=(cj15*x6920);
evalcond[0]=((((-1.0)*r22*x6919))+((r21*x6918))+(((-1.0)*r20*x6922)));
evalcond[1]=(((r20*x6921))+(((-1.0)*r22*x6920))+(((-1.0)*r21*sj15*x6919)));
evalcond[2]=((((-1.0)*r12*x6919))+cj10+((r11*x6918))+(((-1.0)*r10*x6922)));
evalcond[3]=((((-1.0)*x6917))+(((-1.0)*r00*x6922))+(((-1.0)*r02*x6919))+((r01*x6918)));
evalcond[4]=((((-1.0)*r02*x6920))+((r00*x6921))+(((-1.0)*r01*sj15*x6919))+(((-1.0)*cj10)));
evalcond[5]=(((r10*x6921))+(((-1.0)*x6917))+(((-1.0)*r12*x6920))+(((-1.0)*r11*sj15*x6919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6923=((1.0)*cj15);
CheckValue<IkReal> x6924 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x6923))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6924.valid){
continue;
}
CheckValue<IkReal> x6925=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6923))+(((-1.0)*r10*sj15)))),-1);
if(!x6925.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6924.value)+(((1.5707963267949)*(x6925.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6926=IKsin(j14);
IkReal x6927=IKcos(j14);
IkReal x6928=((1.0)*sj10);
IkReal x6929=(sj15*x6926);
IkReal x6930=((1.0)*x6927);
IkReal x6931=((1.0)*x6926);
IkReal x6932=(cj15*x6927);
IkReal x6933=(cj15*x6931);
evalcond[0]=((((-1.0)*r22*x6930))+(((-1.0)*r20*x6933))+((r21*x6929)));
evalcond[1]=(((r20*x6932))+(((-1.0)*r21*sj15*x6930))+(((-1.0)*r22*x6931)));
evalcond[2]=((((-1.0)*r10*x6933))+cj10+((r11*x6929))+(((-1.0)*r12*x6930)));
evalcond[3]=(((r01*x6929))+(((-1.0)*r02*x6930))+(((-1.0)*r00*x6933))+(((-1.0)*x6928)));
evalcond[4]=(((r00*x6932))+(((-1.0)*r02*x6931))+(((-1.0)*r01*sj15*x6930))+(((-1.0)*cj10)));
evalcond[5]=((((-1.0)*r11*sj15*x6930))+((r10*x6932))+(((-1.0)*r12*x6931))+(((-1.0)*x6928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6934=((1.0)*cj15);
CheckValue<IkReal> x6935=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6934))+(((-1.0)*r00*sj15)))),-1);
if(!x6935.valid){
continue;
}
CheckValue<IkReal> x6936 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x6934))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6936.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6935.value)))+(x6936.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6937=IKsin(j14);
IkReal x6938=IKcos(j14);
IkReal x6939=((1.0)*sj10);
IkReal x6940=(sj15*x6937);
IkReal x6941=((1.0)*x6938);
IkReal x6942=((1.0)*x6937);
IkReal x6943=(cj15*x6938);
IkReal x6944=(cj15*x6942);
evalcond[0]=((((-1.0)*r20*x6944))+(((-1.0)*r22*x6941))+((r21*x6940)));
evalcond[1]=((((-1.0)*r21*sj15*x6941))+((r20*x6943))+(((-1.0)*r22*x6942)));
evalcond[2]=((((-1.0)*r12*x6941))+cj10+(((-1.0)*r10*x6944))+((r11*x6940)));
evalcond[3]=((((-1.0)*r02*x6941))+((r01*x6940))+(((-1.0)*x6939))+(((-1.0)*r00*x6944)));
evalcond[4]=((((-1.0)*r01*sj15*x6941))+(((-1.0)*r02*x6942))+((r00*x6943))+(((-1.0)*cj10)));
evalcond[5]=(((r10*x6943))+(((-1.0)*r12*x6942))+(((-1.0)*r11*sj15*x6941))+(((-1.0)*x6939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-0.507498115261088)*px))+(((-2.06387083990023)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.06387083990023)*px))+(((0.507498115261088)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.507498115261088)*px))+(((-2.06387083990023)*py))))+IKsqr(((((-2.06387083990023)*px))+(((0.507498115261088)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-0.507498115261088)*px))+(((-2.06387083990023)*py))), ((((-2.06387083990023)*px))+(((0.507498115261088)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x6945=IKcos(j10);
IkReal x6946=IKsin(j10);
evalcond[0]=((((-1.0)*px))+(((-0.4569)*x6945))+(((-0.11235)*x6946)));
evalcond[1]=((((-1.0)*py))+(((0.11235)*x6945))+(((-0.4569)*x6946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x6947=((1.0)*cj15);
IkReal x6948=((((-1.0)*r00*sj15))+(((-1.0)*r01*x6947)));
j14eval[0]=x6948;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x6947))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x6948);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x6949=cj15*cj15;
IkReal x6950=(r01*r21);
IkReal x6951=((1.0)*cj15*sj15);
IkReal x6952=((((-1.0)*x6949*x6950))+((r00*r20*x6949))+(((-1.0)*r01*r20*x6951))+x6950+((r02*r22))+(((-1.0)*r00*r21*x6951)));
j14eval[0]=x6952;
j14eval[1]=IKsign(x6952);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x6953=cj15*cj15;
IkReal x6954=(r21*sj15);
IkReal x6955=(r11*r21);
IkReal x6956=((1.0)*cj15);
IkReal x6957=((((-1.0)*r10*x6954*x6956))+((r12*r22))+(((-1.0)*x6953*x6955))+(((-1.0)*r11*r20*sj15*x6956))+x6955+((r10*r20*x6953)));
j14eval[0]=x6957;
j14eval[1]=((IKabs((((sj10*x6954))+(((-1.0)*r20*sj10*x6956)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x6957);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6958=cj15*cj15;
IkReal x6959=(r21*sj15);
IkReal x6960=((1.0)*cj15);
IkReal x6961=(r11*r21);
CheckValue<IkReal> x6962 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((sj10*x6959))+(((-1.0)*r20*sj10*x6960)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6962.valid){
continue;
}
CheckValue<IkReal> x6963=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6959*x6960))+((r12*r22))+(((-1.0)*r11*r20*sj15*x6960))+(((-1.0)*x6958*x6961))+x6961+((r10*r20*x6958)))),-1);
if(!x6963.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6962.value)+(((1.5707963267949)*(x6963.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6964=IKsin(j14);
IkReal x6965=IKcos(j14);
IkReal x6966=(sj15*x6964);
IkReal x6967=((1.0)*x6965);
IkReal x6968=((1.0)*x6964);
IkReal x6969=(cj15*x6965);
IkReal x6970=(cj15*x6968);
evalcond[0]=(((r21*x6966))+(((-1.0)*r20*x6970))+(((-1.0)*r22*x6967)));
evalcond[1]=((((-1.0)*r22*x6968))+((r20*x6969))+(((-1.0)*r21*sj15*x6967)));
evalcond[2]=((((-1.0)*r10*x6970))+(((-1.0)*r12*x6967))+cj10+((r11*x6966)));
evalcond[3]=((((-1.0)*r02*x6968))+((r00*x6969))+(((-1.0)*r01*sj15*x6967))+cj10);
evalcond[4]=(((r10*x6969))+(((-1.0)*r12*x6968))+sj10+(((-1.0)*r11*sj15*x6967)));
evalcond[5]=((((-1.0)*r02*x6967))+((r01*x6966))+(((-1.0)*sj10))+(((-1.0)*r00*x6970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6971=cj15*cj15;
IkReal x6972=(r01*r21);
IkReal x6973=((1.0)*cj15*sj15);
CheckValue<IkReal> x6974=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r20*x6973))+(((-1.0)*x6971*x6972))+((r00*r20*x6971))+x6972+((r02*r22))+(((-1.0)*r00*r21*x6973)))),-1);
if(!x6974.valid){
continue;
}
CheckValue<IkReal> x6975 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6975.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6974.value)))+(x6975.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6976=IKsin(j14);
IkReal x6977=IKcos(j14);
IkReal x6978=(sj15*x6976);
IkReal x6979=((1.0)*x6977);
IkReal x6980=((1.0)*x6976);
IkReal x6981=(cj15*x6977);
IkReal x6982=(cj15*x6980);
evalcond[0]=((((-1.0)*r20*x6982))+((r21*x6978))+(((-1.0)*r22*x6979)));
evalcond[1]=(((r20*x6981))+(((-1.0)*r22*x6980))+(((-1.0)*r21*sj15*x6979)));
evalcond[2]=((((-1.0)*r10*x6982))+(((-1.0)*r12*x6979))+cj10+((r11*x6978)));
evalcond[3]=((((-1.0)*r01*sj15*x6979))+cj10+((r00*x6981))+(((-1.0)*r02*x6980)));
evalcond[4]=(((r10*x6981))+(((-1.0)*r11*sj15*x6979))+(((-1.0)*r12*x6980))+sj10);
evalcond[5]=((((-1.0)*r02*x6979))+((r01*x6978))+(((-1.0)*sj10))+(((-1.0)*r00*x6982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x6983=((1.0)*cj15);
CheckValue<IkReal> x6984 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x6983))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6984.valid){
continue;
}
CheckValue<IkReal> x6985=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x6983)))),-1);
if(!x6985.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x6984.value)+(((1.5707963267949)*(x6985.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x6986=IKsin(j14);
IkReal x6987=IKcos(j14);
IkReal x6988=(sj15*x6986);
IkReal x6989=((1.0)*x6987);
IkReal x6990=((1.0)*x6986);
IkReal x6991=(cj15*x6987);
IkReal x6992=(cj15*x6990);
evalcond[0]=((((-1.0)*r22*x6989))+((r21*x6988))+(((-1.0)*r20*x6992)));
evalcond[1]=(((r20*x6991))+(((-1.0)*r22*x6990))+(((-1.0)*r21*sj15*x6989)));
evalcond[2]=((((-1.0)*r10*x6992))+(((-1.0)*r12*x6989))+cj10+((r11*x6988)));
evalcond[3]=(cj10+((r00*x6991))+(((-1.0)*r02*x6990))+(((-1.0)*r01*sj15*x6989)));
evalcond[4]=((((-1.0)*r12*x6990))+((r10*x6991))+(((-1.0)*r11*sj15*x6989))+sj10);
evalcond[5]=((((-1.0)*r00*x6992))+(((-1.0)*sj10))+((r01*x6988))+(((-1.0)*r02*x6989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-2.24409186529617)*py))+(((-8.29354345611924)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.24409186529617)*px))+(((8.29354345611924)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.24409186529617)*py))+(((-8.29354345611924)*px))))+IKsqr(((((-2.24409186529617)*px))+(((8.29354345611924)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-2.24409186529617)*py))+(((-8.29354345611924)*px))), ((((-2.24409186529617)*px))+(((8.29354345611924)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x6993=IKcos(j10);
IkReal x6994=IKsin(j10);
evalcond[0]=((((-0.11235)*x6994))+(((-0.0304)*x6993))+(((-1.0)*px)));
evalcond[1]=((((-0.0304)*x6994))+(((0.11235)*x6993))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x6995=((1.0)*cj15);
IkReal x6996=((((-1.0)*r00*sj15))+(((-1.0)*r01*x6995)));
j14eval[0]=x6996;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x6995))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x6996);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x6997=((1.0)*cj15);
IkReal x6998=((((-1.0)*r11*x6997))+(((-1.0)*r10*sj15)));
j14eval[0]=x6998;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x6997))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x6998);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x6999=cj15*cj15;
IkReal x7000=(r11*r21);
IkReal x7001=(cj15*r20);
IkReal x7002=((1.0)*r21*sj15);
IkReal x7003=(x7000+(((-1.0)*cj15*r10*x7002))+((r12*r22))+(((-1.0)*r11*sj15*x7001))+(((-1.0)*x6999*x7000))+((r10*r20*x6999)));
j14eval[0]=x7003;
j14eval[1]=IKsign(x7003);
j14eval[2]=((IKabs(((((-1.0)*cj10*x7002))+((cj10*x7001)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7004=cj15*cj15;
IkReal x7005=(cj15*r20);
IkReal x7006=(r11*r21);
IkReal x7007=((1.0)*r21*sj15);
CheckValue<IkReal> x7008=IKPowWithIntegerCheck(IKsign((x7006+(((-1.0)*cj15*r10*x7007))+((r10*r20*x7004))+(((-1.0)*x7004*x7006))+((r12*r22))+(((-1.0)*r11*sj15*x7005)))),-1);
if(!x7008.valid){
continue;
}
CheckValue<IkReal> x7009 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*x7007))+((cj10*x7005)))),IkReal((cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7009.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7008.value)))+(x7009.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7010=IKsin(j14);
IkReal x7011=IKcos(j14);
IkReal x7012=((1.0)*sj10);
IkReal x7013=(sj15*x7010);
IkReal x7014=((1.0)*x7011);
IkReal x7015=((1.0)*x7010);
IkReal x7016=(cj15*x7011);
IkReal x7017=(cj15*x7015);
evalcond[0]=((((-1.0)*r20*x7017))+(((-1.0)*r22*x7014))+((r21*x7013)));
evalcond[1]=((((-1.0)*r22*x7015))+(((-1.0)*r21*sj15*x7014))+((r20*x7016)));
evalcond[2]=(cj10+(((-1.0)*r10*x7017))+(((-1.0)*r12*x7014))+((r11*x7013)));
evalcond[3]=((((-1.0)*r00*x7017))+(((-1.0)*x7012))+((r01*x7013))+(((-1.0)*r02*x7014)));
evalcond[4]=((((-1.0)*r01*sj15*x7014))+((r00*x7016))+(((-1.0)*cj10))+(((-1.0)*r02*x7015)));
evalcond[5]=((((-1.0)*r11*sj15*x7014))+(((-1.0)*x7012))+(((-1.0)*r12*x7015))+((r10*x7016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7018=((1.0)*cj15);
CheckValue<IkReal> x7019 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x7018))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7019.valid){
continue;
}
CheckValue<IkReal> x7020=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7018))+(((-1.0)*r10*sj15)))),-1);
if(!x7020.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7019.value)+(((1.5707963267949)*(x7020.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7021=IKsin(j14);
IkReal x7022=IKcos(j14);
IkReal x7023=((1.0)*sj10);
IkReal x7024=(sj15*x7021);
IkReal x7025=((1.0)*x7022);
IkReal x7026=((1.0)*x7021);
IkReal x7027=(cj15*x7022);
IkReal x7028=(cj15*x7026);
evalcond[0]=((((-1.0)*r22*x7025))+(((-1.0)*r20*x7028))+((r21*x7024)));
evalcond[1]=((((-1.0)*r22*x7026))+((r20*x7027))+(((-1.0)*r21*sj15*x7025)));
evalcond[2]=((((-1.0)*r12*x7025))+(((-1.0)*r10*x7028))+((r11*x7024))+cj10);
evalcond[3]=(((r01*x7024))+(((-1.0)*r02*x7025))+(((-1.0)*r00*x7028))+(((-1.0)*x7023)));
evalcond[4]=((((-1.0)*r01*sj15*x7025))+((r00*x7027))+(((-1.0)*r02*x7026))+(((-1.0)*cj10)));
evalcond[5]=((((-1.0)*r12*x7026))+(((-1.0)*r11*sj15*x7025))+((r10*x7027))+(((-1.0)*x7023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7029=((1.0)*cj15);
CheckValue<IkReal> x7030=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7029))+(((-1.0)*r00*sj15)))),-1);
if(!x7030.valid){
continue;
}
CheckValue<IkReal> x7031 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x7029)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7031.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7030.value)))+(x7031.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7032=IKsin(j14);
IkReal x7033=IKcos(j14);
IkReal x7034=((1.0)*sj10);
IkReal x7035=(sj15*x7032);
IkReal x7036=((1.0)*x7033);
IkReal x7037=((1.0)*x7032);
IkReal x7038=(cj15*x7033);
IkReal x7039=(cj15*x7037);
evalcond[0]=((((-1.0)*r22*x7036))+((r21*x7035))+(((-1.0)*r20*x7039)));
evalcond[1]=((((-1.0)*r22*x7037))+(((-1.0)*r21*sj15*x7036))+((r20*x7038)));
evalcond[2]=((((-1.0)*r12*x7036))+((r11*x7035))+cj10+(((-1.0)*r10*x7039)));
evalcond[3]=(((r01*x7035))+(((-1.0)*r02*x7036))+(((-1.0)*r00*x7039))+(((-1.0)*x7034)));
evalcond[4]=((((-1.0)*r01*sj15*x7036))+(((-1.0)*r02*x7037))+((r00*x7038))+(((-1.0)*cj10)));
evalcond[5]=((((-1.0)*r11*sj15*x7036))+(((-1.0)*r12*x7037))+((r10*x7038))+(((-1.0)*x7034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs((((cj15*r11))+((r10*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj15*r01))+((r00*sj15)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj15*r11))+((r10*sj15))))+IKsqr((((cj15*r01))+((r00*sj15))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2((((cj15*r11))+((r10*sj15))), (((cj15*r01))+((r00*sj15))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x7040=IKsin(j10);
IkReal x7041=IKcos(j10);
IkReal x7042=((1.0)*cj15);
IkReal x7043=((0.08535)*sj15);
IkReal x7044=((1.0)*sj15);
IkReal x7045=((0.08535)*cj15);
evalcond[0]=(x7041+(((-1.0)*r00*x7044))+(((-1.0)*r01*x7042)));
evalcond[1]=(x7040+(((-1.0)*r11*x7042))+(((-1.0)*r10*x7044)));
evalcond[2]=((((-0.11235)*x7040))+(((-1.0)*r00*x7043))+(((-1.0)*r01*x7045))+(((-1.0)*px)));
evalcond[3]=((((-1.0)*r11*x7045))+(((0.11235)*x7041))+(((-1.0)*py))+(((-1.0)*r10*x7043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x7046=((1.0)*sj15);
IkReal x7047=((((-1.0)*cj15*r11))+(((-1.0)*r10*x7046)));
j14eval[0]=x7047;
j14eval[1]=IKsign(x7047);
j14eval[2]=((IKabs(r02))+(IKabs((((cj15*r00))+(((-1.0)*r01*x7046))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x7048=((1.0)*cj15);
IkReal x7049=((((-1.0)*r01*x7048))+(((-1.0)*r00*sj15)));
j14eval[0]=x7049;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x7048))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x7049);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x7050=r21*r21;
IkReal x7051=cj15*cj15;
IkReal x7052=(cj15*r20);
IkReal x7053=(r21*sj15);
IkReal x7054=(((x7050*x7051))+(((-1.0)*x7050))+(((-1.0)*x7051*(r20*r20)))+(((-1.0)*(r22*r22)))+(((2.0)*x7052*x7053)));
j14eval[0]=x7054;
j14eval[1]=IKsign(x7054);
j14eval[2]=((IKabs(r22))+(IKabs((x7053+(((-1.0)*x7052))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7055=r21*r21;
IkReal x7056=cj15*cj15;
IkReal x7057=(cj15*r20);
IkReal x7058=(r21*sj15);
CheckValue<IkReal> x7059=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7056*(r20*r20)))+(((2.0)*x7057*x7058))+(((-1.0)*x7055))+(((-1.0)*(r22*r22)))+((x7055*x7056)))),-1);
if(!x7059.valid){
continue;
}
CheckValue<IkReal> x7060 = IKatan2WithCheck(IkReal(r22),IkReal((x7058+(((-1.0)*x7057)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7060.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7059.value)))+(x7060.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7061=IKsin(j14);
IkReal x7062=IKcos(j14);
IkReal x7063=(sj15*x7061);
IkReal x7064=(cj15*x7062);
IkReal x7065=((1.0)*x7062);
IkReal x7066=((1.0)*x7061);
IkReal x7067=(cj15*x7066);
evalcond[0]=((((-1.0)*r20*x7067))+((r21*x7063))+(((-1.0)*r22*x7065)));
evalcond[1]=((((-1.0)*r01*sj15*x7065))+((r00*x7064))+(((-1.0)*r02*x7066)));
evalcond[2]=((((-1.0)*r11*sj15*x7065))+(((-1.0)*r12*x7066))+((r10*x7064)));
evalcond[3]=((((-1.0)*r12*x7065))+cj10+(((-1.0)*r10*x7067))+((r11*x7063)));
evalcond[4]=((-1.0)+(((-1.0)*r21*sj15*x7065))+((r20*x7064))+(((-1.0)*r22*x7066)));
evalcond[5]=((((-1.0)*r00*x7067))+((r01*x7063))+(((-1.0)*r02*x7065))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7068=((1.0)*cj15);
CheckValue<IkReal> x7069=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7068))+(((-1.0)*r00*sj15)))),-1);
if(!x7069.valid){
continue;
}
CheckValue<IkReal> x7070 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x7068))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7070.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7069.value)))+(x7070.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7071=IKsin(j14);
IkReal x7072=IKcos(j14);
IkReal x7073=(sj15*x7071);
IkReal x7074=(cj15*x7072);
IkReal x7075=((1.0)*x7072);
IkReal x7076=((1.0)*x7071);
IkReal x7077=(cj15*x7076);
evalcond[0]=((((-1.0)*r20*x7077))+((r21*x7073))+(((-1.0)*r22*x7075)));
evalcond[1]=((((-1.0)*r01*sj15*x7075))+((r00*x7074))+(((-1.0)*r02*x7076)));
evalcond[2]=((((-1.0)*r12*x7076))+((r10*x7074))+(((-1.0)*r11*sj15*x7075)));
evalcond[3]=(((r11*x7073))+cj10+(((-1.0)*r12*x7075))+(((-1.0)*r10*x7077)));
evalcond[4]=((-1.0)+(((-1.0)*r21*sj15*x7075))+((r20*x7074))+(((-1.0)*r22*x7076)));
evalcond[5]=((((-1.0)*r00*x7077))+((r01*x7073))+(((-1.0)*r02*x7075))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7078=((1.0)*sj15);
CheckValue<IkReal> x7079 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7078))+((cj15*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7079.valid){
continue;
}
CheckValue<IkReal> x7080=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x7078))+(((-1.0)*cj15*r11)))),-1);
if(!x7080.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7079.value)+(((1.5707963267949)*(x7080.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7081=IKsin(j14);
IkReal x7082=IKcos(j14);
IkReal x7083=(sj15*x7081);
IkReal x7084=(cj15*x7082);
IkReal x7085=((1.0)*x7082);
IkReal x7086=((1.0)*x7081);
IkReal x7087=(cj15*x7086);
evalcond[0]=(((r21*x7083))+(((-1.0)*r20*x7087))+(((-1.0)*r22*x7085)));
evalcond[1]=(((r00*x7084))+(((-1.0)*r01*sj15*x7085))+(((-1.0)*r02*x7086)));
evalcond[2]=((((-1.0)*r11*sj15*x7085))+(((-1.0)*r12*x7086))+((r10*x7084)));
evalcond[3]=(((r11*x7083))+(((-1.0)*r10*x7087))+cj10+(((-1.0)*r12*x7085)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7086))+(((-1.0)*r21*sj15*x7085))+((r20*x7084)));
evalcond[5]=(((r01*x7083))+(((-1.0)*r00*x7087))+(((-1.0)*sj10))+(((-1.0)*r02*x7085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-1.9337986785623)*px))+(((3.67051685094268)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.9337986785623)*py))+(((3.67051685094268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.9337986785623)*px))+(((3.67051685094268)*py))))+IKsqr(((((1.9337986785623)*py))+(((3.67051685094268)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.9337986785623)*px))+(((3.67051685094268)*py))), ((((1.9337986785623)*py))+(((3.67051685094268)*px))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x7088=IKcos(j10);
IkReal x7089=IKsin(j10);
evalcond[0]=((((-0.11235)*x7089))+(((-1.0)*px))+(((0.21325)*x7088)));
evalcond[1]=((((0.11235)*x7088))+(((-1.0)*py))+(((0.21325)*x7089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x7090=((1.0)*cj15);
IkReal x7091=((((-1.0)*r01*x7090))+(((-1.0)*r00*sj15)));
j14eval[0]=x7091;
j14eval[1]=((IKabs((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x7090)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x7091);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x7092=((1.0)*cj15);
IkReal x7093=((((-1.0)*r11*x7092))+(((-1.0)*r10*sj15)));
j14eval[0]=x7093;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x7092))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x7093);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x7094=cj15*cj15;
IkReal x7095=(r11*r21);
IkReal x7096=(cj15*r20);
IkReal x7097=((1.0)*r21*sj15);
IkReal x7098=(x7095+(((-1.0)*r11*sj15*x7096))+((r12*r22))+((r10*r20*x7094))+(((-1.0)*x7094*x7095))+(((-1.0)*cj15*r10*x7097)));
j14eval[0]=x7098;
j14eval[1]=IKsign(x7098);
j14eval[2]=((IKabs(((((-1.0)*cj10*x7097))+((cj10*x7096)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7099=cj15*cj15;
IkReal x7100=(cj15*r20);
IkReal x7101=(r11*r21);
IkReal x7102=((1.0)*r21*sj15);
CheckValue<IkReal> x7103 = IKatan2WithCheck(IkReal((((cj10*x7100))+(((-1.0)*cj10*x7102)))),IkReal((cj10*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7103.valid){
continue;
}
CheckValue<IkReal> x7104=IKPowWithIntegerCheck(IKsign((x7101+(((-1.0)*r11*sj15*x7100))+((r12*r22))+((r10*r20*x7099))+(((-1.0)*x7099*x7101))+(((-1.0)*cj15*r10*x7102)))),-1);
if(!x7104.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7103.value)+(((1.5707963267949)*(x7104.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7105=IKsin(j14);
IkReal x7106=IKcos(j14);
IkReal x7107=((1.0)*sj10);
IkReal x7108=(sj15*x7105);
IkReal x7109=((1.0)*x7106);
IkReal x7110=((1.0)*x7105);
IkReal x7111=(cj15*x7106);
IkReal x7112=(cj15*x7110);
evalcond[0]=(((r21*x7108))+(((-1.0)*r20*x7112))+(((-1.0)*r22*x7109)));
evalcond[1]=((((-1.0)*r22*x7110))+((r20*x7111))+(((-1.0)*r21*sj15*x7109)));
evalcond[2]=((((-1.0)*r12*x7109))+(((-1.0)*r10*x7112))+cj10+((r11*x7108)));
evalcond[3]=((((-1.0)*x7107))+(((-1.0)*r02*x7109))+(((-1.0)*r00*x7112))+((r01*x7108)));
evalcond[4]=((((-1.0)*r02*x7110))+(((-1.0)*cj10))+((r00*x7111))+(((-1.0)*r01*sj15*x7109)));
evalcond[5]=((((-1.0)*x7107))+(((-1.0)*r12*x7110))+((r10*x7111))+(((-1.0)*r11*sj15*x7109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7113=((1.0)*cj15);
CheckValue<IkReal> x7114 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x7113))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7114.valid){
continue;
}
CheckValue<IkReal> x7115=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7113))+(((-1.0)*r10*sj15)))),-1);
if(!x7115.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7114.value)+(((1.5707963267949)*(x7115.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7116=IKsin(j14);
IkReal x7117=IKcos(j14);
IkReal x7118=((1.0)*sj10);
IkReal x7119=(sj15*x7116);
IkReal x7120=((1.0)*x7117);
IkReal x7121=((1.0)*x7116);
IkReal x7122=(cj15*x7117);
IkReal x7123=(cj15*x7121);
evalcond[0]=(((r21*x7119))+(((-1.0)*r22*x7120))+(((-1.0)*r20*x7123)));
evalcond[1]=(((r20*x7122))+(((-1.0)*r21*sj15*x7120))+(((-1.0)*r22*x7121)));
evalcond[2]=(((r11*x7119))+cj10+(((-1.0)*r12*x7120))+(((-1.0)*r10*x7123)));
evalcond[3]=((((-1.0)*r00*x7123))+(((-1.0)*r02*x7120))+((r01*x7119))+(((-1.0)*x7118)));
evalcond[4]=(((r00*x7122))+(((-1.0)*r01*sj15*x7120))+(((-1.0)*r02*x7121))+(((-1.0)*cj10)));
evalcond[5]=((((-1.0)*r11*sj15*x7120))+((r10*x7122))+(((-1.0)*r12*x7121))+(((-1.0)*x7118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7124=((1.0)*cj15);
CheckValue<IkReal> x7125=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7124))+(((-1.0)*r00*sj15)))),-1);
if(!x7125.valid){
continue;
}
CheckValue<IkReal> x7126 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x7124))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7126.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7125.value)))+(x7126.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7127=IKsin(j14);
IkReal x7128=IKcos(j14);
IkReal x7129=((1.0)*sj10);
IkReal x7130=(sj15*x7127);
IkReal x7131=((1.0)*x7128);
IkReal x7132=((1.0)*x7127);
IkReal x7133=(cj15*x7128);
IkReal x7134=(cj15*x7132);
evalcond[0]=(((r21*x7130))+(((-1.0)*r22*x7131))+(((-1.0)*r20*x7134)));
evalcond[1]=((((-1.0)*r21*sj15*x7131))+(((-1.0)*r22*x7132))+((r20*x7133)));
evalcond[2]=(((r11*x7130))+(((-1.0)*r10*x7134))+(((-1.0)*r12*x7131))+cj10);
evalcond[3]=((((-1.0)*r00*x7134))+((r01*x7130))+(((-1.0)*x7129))+(((-1.0)*r02*x7131)));
evalcond[4]=((((-1.0)*r01*sj15*x7131))+((r00*x7133))+(((-1.0)*cj10))+(((-1.0)*r02*x7132)));
evalcond[5]=((((-1.0)*r12*x7132))+((r10*x7133))+(((-1.0)*x7129))+(((-1.0)*r11*sj15*x7131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7135=((1.0)*cj15);
IkReal x7136=((1.0)*sj15);
if( IKabs(((((-1.0)*r10*x7136))+(((-1.0)*r11*x7135)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x7135))+(((-1.0)*r00*x7136)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x7136))+(((-1.0)*r11*x7135))))+IKsqr(((((-1.0)*r01*x7135))+(((-1.0)*r00*x7136))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r10*x7136))+(((-1.0)*r11*x7135))), ((((-1.0)*r01*x7135))+(((-1.0)*r00*x7136))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x7137=IKsin(j10);
IkReal x7138=IKcos(j10);
IkReal x7139=((1.0)*cj15);
IkReal x7140=((0.08535)*sj15);
IkReal x7141=((1.0)*sj15);
IkReal x7142=((0.08535)*cj15);
evalcond[0]=((((-1.0)*r01*x7139))+(((-1.0)*r00*x7141))+(((-1.0)*x7138)));
evalcond[1]=((((-1.0)*r11*x7139))+(((-1.0)*r10*x7141))+(((-1.0)*x7137)));
evalcond[2]=((((-0.11235)*x7137))+(((-1.0)*r01*x7142))+(((-1.0)*px))+(((-1.0)*r00*x7140)));
evalcond[3]=((((-1.0)*py))+(((-1.0)*r11*x7142))+(((0.11235)*x7138))+(((-1.0)*r10*x7140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x7143=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x7143;
j14eval[1]=((IKabs(r02))+(IKabs((((cj15*r00))+(((-1.0)*r01*sj15))))));
j14eval[2]=IKsign(x7143);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x7144=((1.0)*cj15);
IkReal x7145=((((-1.0)*r01*x7144))+(((-1.0)*r00*sj15)));
j14eval[0]=x7145;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x7144))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x7145);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x7146=cj15*cj15;
IkReal x7147=r21*r21;
IkReal x7148=(cj15*r20);
IkReal x7149=(r21*sj15);
IkReal x7150=(x7147+(r22*r22)+(((-1.0)*x7146*x7147))+((x7146*(r20*r20)))+(((-2.0)*x7148*x7149)));
j14eval[0]=x7150;
j14eval[1]=IKsign(x7150);
j14eval[2]=((IKabs(r22))+(IKabs((x7149+(((-1.0)*x7148))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7151=cj15*cj15;
IkReal x7152=r21*r21;
IkReal x7153=(cj15*r20);
IkReal x7154=(r21*sj15);
CheckValue<IkReal> x7155 = IKatan2WithCheck(IkReal(r22),IkReal((x7154+(((-1.0)*x7153)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7155.valid){
continue;
}
CheckValue<IkReal> x7156=IKPowWithIntegerCheck(IKsign((x7152+(r22*r22)+(((-2.0)*x7153*x7154))+((x7151*(r20*r20)))+(((-1.0)*x7151*x7152)))),-1);
if(!x7156.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7155.value)+(((1.5707963267949)*(x7156.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7157=IKsin(j14);
IkReal x7158=IKcos(j14);
IkReal x7159=(sj15*x7157);
IkReal x7160=(cj15*x7158);
IkReal x7161=((1.0)*x7158);
IkReal x7162=((1.0)*x7157);
IkReal x7163=(cj15*x7162);
evalcond[0]=((((-1.0)*r22*x7161))+((r21*x7159))+(((-1.0)*r20*x7163)));
evalcond[1]=((((-1.0)*r02*x7162))+((r00*x7160))+(((-1.0)*r01*sj15*x7161)));
evalcond[2]=((((-1.0)*r11*sj15*x7161))+(((-1.0)*r12*x7162))+((r10*x7160)));
evalcond[3]=(cj10+((r11*x7159))+(((-1.0)*r10*x7163))+(((-1.0)*r12*x7161)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7162))+(((-1.0)*r21*sj15*x7161))+((r20*x7160)));
evalcond[5]=((((-1.0)*r02*x7161))+((r01*x7159))+(((-1.0)*r00*x7163))+(((-1.0)*sj10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7164=((1.0)*cj15);
CheckValue<IkReal> x7165=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7164))+(((-1.0)*r00*sj15)))),-1);
if(!x7165.valid){
continue;
}
CheckValue<IkReal> x7166 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x7164))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7166.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7165.value)))+(x7166.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7167=IKsin(j14);
IkReal x7168=IKcos(j14);
IkReal x7169=(sj15*x7167);
IkReal x7170=(cj15*x7168);
IkReal x7171=((1.0)*x7168);
IkReal x7172=((1.0)*x7167);
IkReal x7173=(cj15*x7172);
evalcond[0]=((((-1.0)*r20*x7173))+(((-1.0)*r22*x7171))+((r21*x7169)));
evalcond[1]=((((-1.0)*r02*x7172))+((r00*x7170))+(((-1.0)*r01*sj15*x7171)));
evalcond[2]=(((r10*x7170))+(((-1.0)*r12*x7172))+(((-1.0)*r11*sj15*x7171)));
evalcond[3]=((((-1.0)*r10*x7173))+((r11*x7169))+(((-1.0)*r12*x7171))+cj10);
evalcond[4]=((1.0)+(((-1.0)*r21*sj15*x7171))+(((-1.0)*r22*x7172))+((r20*x7170)));
evalcond[5]=((((-1.0)*r02*x7171))+((r01*x7169))+(((-1.0)*sj10))+(((-1.0)*r00*x7173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x7174=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x7174.valid){
continue;
}
CheckValue<IkReal> x7175 = IKatan2WithCheck(IkReal((((cj15*r00))+(((-1.0)*r01*sj15)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7175.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7174.value)))+(x7175.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7176=IKsin(j14);
IkReal x7177=IKcos(j14);
IkReal x7178=(sj15*x7176);
IkReal x7179=(cj15*x7177);
IkReal x7180=((1.0)*x7177);
IkReal x7181=((1.0)*x7176);
IkReal x7182=(cj15*x7181);
evalcond[0]=(((r21*x7178))+(((-1.0)*r20*x7182))+(((-1.0)*r22*x7180)));
evalcond[1]=((((-1.0)*r02*x7181))+(((-1.0)*r01*sj15*x7180))+((r00*x7179)));
evalcond[2]=(((r10*x7179))+(((-1.0)*r12*x7181))+(((-1.0)*r11*sj15*x7180)));
evalcond[3]=(((r11*x7178))+(((-1.0)*r10*x7182))+cj10+(((-1.0)*r12*x7180)));
evalcond[4]=((1.0)+(((-1.0)*r21*sj15*x7180))+(((-1.0)*r22*x7181))+((r20*x7179)));
evalcond[5]=((((-1.0)*r00*x7182))+(((-1.0)*sj10))+((r01*x7178))+(((-1.0)*r02*x7180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
if( IKabs(((((-3.67051685094268)*py))+(((-1.9337986785623)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.67051685094268)*px))+(((1.9337986785623)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))))+IKsqr(((((-3.67051685094268)*px))+(((1.9337986785623)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-3.67051685094268)*py))+(((-1.9337986785623)*px))), ((((-3.67051685094268)*px))+(((1.9337986785623)*py))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x7183=IKcos(j10);
IkReal x7184=IKsin(j10);
evalcond[0]=((((-0.21325)*x7183))+(((-1.0)*px))+(((-0.11235)*x7184)));
evalcond[1]=((((0.11235)*x7183))+(((-0.21325)*x7184))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x7185=((1.0)*cj15);
IkReal x7186=((((-1.0)*r01*x7185))+(((-1.0)*r00*sj15)));
j14eval[0]=x7186;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x7185))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x7186);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x7187=cj15*cj15;
IkReal x7188=(r01*r21);
IkReal x7189=((1.0)*cj15*sj15);
IkReal x7190=(x7188+(((-1.0)*r00*r21*x7189))+(((-1.0)*r01*r20*x7189))+((r02*r22))+((r00*r20*x7187))+(((-1.0)*x7187*x7188)));
j14eval[0]=x7190;
j14eval[1]=IKsign(x7190);
j14eval[2]=((IKabs(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x7191=cj15*cj15;
IkReal x7192=(r21*sj15);
IkReal x7193=(r11*r21);
IkReal x7194=((1.0)*cj15);
IkReal x7195=(x7193+(((-1.0)*x7191*x7193))+(((-1.0)*r10*x7192*x7194))+((r12*r22))+(((-1.0)*r11*r20*sj15*x7194))+((r10*r20*x7191)));
j14eval[0]=x7195;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x7194))+((sj10*x7192)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x7195);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7196=cj15*cj15;
IkReal x7197=(r21*sj15);
IkReal x7198=((1.0)*cj15);
IkReal x7199=(r11*r21);
CheckValue<IkReal> x7200 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x7198))+((sj10*x7197)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7200.valid){
continue;
}
CheckValue<IkReal> x7201=IKPowWithIntegerCheck(IKsign((x7199+((r12*r22))+(((-1.0)*r11*r20*sj15*x7198))+(((-1.0)*x7196*x7199))+((r10*r20*x7196))+(((-1.0)*r10*x7197*x7198)))),-1);
if(!x7201.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7200.value)+(((1.5707963267949)*(x7201.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7202=IKsin(j14);
IkReal x7203=IKcos(j14);
IkReal x7204=(sj15*x7202);
IkReal x7205=((1.0)*x7203);
IkReal x7206=((1.0)*x7202);
IkReal x7207=(cj15*x7203);
IkReal x7208=(cj15*x7206);
evalcond[0]=(((r21*x7204))+(((-1.0)*r20*x7208))+(((-1.0)*r22*x7205)));
evalcond[1]=(((r20*x7207))+(((-1.0)*r21*sj15*x7205))+(((-1.0)*r22*x7206)));
evalcond[2]=((((-1.0)*r10*x7208))+cj10+((r11*x7204))+(((-1.0)*r12*x7205)));
evalcond[3]=(((r00*x7207))+cj10+(((-1.0)*r01*sj15*x7205))+(((-1.0)*r02*x7206)));
evalcond[4]=(((r10*x7207))+sj10+(((-1.0)*r11*sj15*x7205))+(((-1.0)*r12*x7206)));
evalcond[5]=(((r01*x7204))+(((-1.0)*sj10))+(((-1.0)*r00*x7208))+(((-1.0)*r02*x7205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7209=cj15*cj15;
IkReal x7210=(r01*r21);
IkReal x7211=((1.0)*cj15*sj15);
CheckValue<IkReal> x7212 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*cj15*r20))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7212.valid){
continue;
}
CheckValue<IkReal> x7213=IKPowWithIntegerCheck(IKsign((((r00*r20*x7209))+x7210+(((-1.0)*x7209*x7210))+(((-1.0)*r01*r20*x7211))+(((-1.0)*r00*r21*x7211))+((r02*r22)))),-1);
if(!x7213.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7212.value)+(((1.5707963267949)*(x7213.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7214=IKsin(j14);
IkReal x7215=IKcos(j14);
IkReal x7216=(sj15*x7214);
IkReal x7217=((1.0)*x7215);
IkReal x7218=((1.0)*x7214);
IkReal x7219=(cj15*x7215);
IkReal x7220=(cj15*x7218);
evalcond[0]=((((-1.0)*r20*x7220))+((r21*x7216))+(((-1.0)*r22*x7217)));
evalcond[1]=((((-1.0)*r21*sj15*x7217))+((r20*x7219))+(((-1.0)*r22*x7218)));
evalcond[2]=(((r11*x7216))+(((-1.0)*r10*x7220))+cj10+(((-1.0)*r12*x7217)));
evalcond[3]=(((r00*x7219))+cj10+(((-1.0)*r02*x7218))+(((-1.0)*r01*sj15*x7217)));
evalcond[4]=(((r10*x7219))+(((-1.0)*r11*sj15*x7217))+(((-1.0)*r12*x7218))+sj10);
evalcond[5]=((((-1.0)*r00*x7220))+(((-1.0)*sj10))+(((-1.0)*r02*x7217))+((r01*x7216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7221=((1.0)*cj15);
CheckValue<IkReal> x7222 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x7221))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7222.valid){
continue;
}
CheckValue<IkReal> x7223=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7221))+(((-1.0)*r00*sj15)))),-1);
if(!x7223.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7222.value)+(((1.5707963267949)*(x7223.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7224=IKsin(j14);
IkReal x7225=IKcos(j14);
IkReal x7226=(sj15*x7224);
IkReal x7227=((1.0)*x7225);
IkReal x7228=((1.0)*x7224);
IkReal x7229=(cj15*x7225);
IkReal x7230=(cj15*x7228);
evalcond[0]=((((-1.0)*r20*x7230))+((r21*x7226))+(((-1.0)*r22*x7227)));
evalcond[1]=(((r20*x7229))+(((-1.0)*r21*sj15*x7227))+(((-1.0)*r22*x7228)));
evalcond[2]=((((-1.0)*r10*x7230))+cj10+(((-1.0)*r12*x7227))+((r11*x7226)));
evalcond[3]=((((-1.0)*r01*sj15*x7227))+(((-1.0)*r02*x7228))+((r00*x7229))+cj10);
evalcond[4]=((((-1.0)*r11*sj15*x7227))+((r10*x7229))+sj10+(((-1.0)*r12*x7228)));
evalcond[5]=((((-1.0)*r02*x7227))+((r01*x7226))+(((-1.0)*sj10))+(((-1.0)*r00*x7230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10, j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7231=cj11*cj11;
IkReal x7232=(cj11*sj12);
IkReal x7233=((20000.0)*py);
IkReal x7234=(cj12*sj11);
IkReal x7235=(r00*sj15);
IkReal x7236=(cj11*sj11);
IkReal x7237=(cj15*r01);
IkReal x7238=(sj12*x7231);
IkReal x7239=((1707.0)*cj15*r11);
IkReal x7240=((1707.0)*r10*sj15);
CheckValue<IkReal> x7241=IKPowWithIntegerCheck(((((-4873.0)*x7238))+(((-8530.0)*cj11*cj12*x7234))+(((-4873.0)*cj11*x7234))+(((4265.0)*x7236))+(((4265.0)*cj12*sj12))+(((-8530.0)*cj12*x7238))),-1);
if(!x7241.valid){
continue;
}
CheckValue<IkReal> x7242=IKPowWithIntegerCheck(((((-1.0)*x7232))+(((-1.0)*x7234))),-1);
if(!x7242.valid){
continue;
}
if( IKabs(((x7241.value)*(((((-1.0)*x7232*x7240))+(((-1.0)*x7234*x7239))+(((-1.0)*x7233*x7234))+(((-1.0)*x7232*x7233))+(((-1.0)*x7232*x7239))+(((-1.0)*x7234*x7240))+(((-2247.0)*x7237))+(((-2247.0)*x7235)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7242.value)*((x7237+x7235)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7241.value)*(((((-1.0)*x7232*x7240))+(((-1.0)*x7234*x7239))+(((-1.0)*x7233*x7234))+(((-1.0)*x7232*x7233))+(((-1.0)*x7232*x7239))+(((-1.0)*x7234*x7240))+(((-2247.0)*x7237))+(((-2247.0)*x7235))))))+IKsqr(((x7242.value)*((x7237+x7235))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((x7241.value)*(((((-1.0)*x7232*x7240))+(((-1.0)*x7234*x7239))+(((-1.0)*x7233*x7234))+(((-1.0)*x7232*x7233))+(((-1.0)*x7232*x7239))+(((-1.0)*x7234*x7240))+(((-2247.0)*x7237))+(((-2247.0)*x7235))))), ((x7242.value)*((x7237+x7235))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x7243=IKcos(j10);
IkReal x7244=IKsin(j10);
IkReal x7245=(sj11*sj12);
IkReal x7246=((1.0)*cj15);
IkReal x7247=((1.0)*sj12);
IkReal x7248=((0.08535)*sj15);
IkReal x7249=((1.0)*sj15);
IkReal x7250=((0.08535)*cj15);
IkReal x7251=(cj11*x7244);
IkReal x7252=((0.21325)*x7243);
IkReal x7253=((1.0)*cj12*sj11);
IkReal x7254=(cj11*x7243);
evalcond[0]=((((-1.0)*x7243*x7253))+(((-1.0)*x7247*x7254))+(((-1.0)*r00*x7249))+(((-1.0)*r01*x7246)));
evalcond[1]=((((-1.0)*x7244*x7253))+(((-1.0)*x7247*x7251))+(((-1.0)*r11*x7246))+(((-1.0)*r10*x7249)));
evalcond[2]=((((-0.11235)*x7244))+(((-1.0)*r01*x7250))+(((0.24365)*x7254))+(((-1.0)*px))+(((-1.0)*r00*x7248))+((cj11*cj12*x7252))+(((-1.0)*x7245*x7252)));
evalcond[3]=((((0.21325)*cj12*x7251))+(((0.11235)*x7243))+(((-1.0)*r10*x7248))+(((-1.0)*r11*x7250))+(((0.24365)*x7251))+(((-1.0)*py))+(((-0.21325)*x7244*x7245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x7255=((1.0)*cj15);
IkReal x7256=((((-1.0)*r01*x7255))+(((-1.0)*r00*sj15)));
j14eval[0]=x7256;
j14eval[1]=((IKabs((((cj10*r21*sj15))+(((-1.0)*cj10*r20*x7255)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x7256);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x7257=((1.0)*cj15);
IkReal x7258=((((-1.0)*r11*x7257))+(((-1.0)*r10*sj15)));
j14eval[0]=x7258;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x7257))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x7258);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x7259=((1.0)*sj15);
IkReal x7260=((((-1.0)*cj15*r21))+(((-1.0)*r20*x7259)));
j14eval[0]=x7260;
j14eval[1]=((IKabs(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))))+(IKabs(((((-1.0)*r11*sj10*x7259))+((cj15*r10*sj10))+((cj10*cj15*r00))+(((-1.0)*cj10*r01*x7259))))));
j14eval[2]=IKsign(x7260);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7261=((-1.0)*r20);
IkReal x7263 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7263)==0){
continue;
}
IkReal x7262=pow(x7263,-0.5);
CheckValue<IkReal> x7264 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7261),IKFAST_ATAN2_MAGTHRESH);
if(!x7264.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7264.value));
IkReal gconst133=(r21*x7262);
IkReal gconst134=(x7261*x7262);
CheckValue<IkReal> x7265 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7265.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x7265.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x7266=((-1.0)*r20);
IkReal x7267=x7262;
CheckValue<IkReal> x7269 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7266),IKFAST_ATAN2_MAGTHRESH);
if(!x7269.valid){
continue;
}
IkReal x7268=((-1.0)*(x7269.value));
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst133;
cj15=gconst134;
j15=x7268;
IkReal gconst132=x7268;
IkReal gconst133=(r21*x7267);
IkReal gconst134=(x7266*x7267);
j14eval[0]=cj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x7270=((-1.0)*r20);
IkReal x7271=x7262;
CheckValue<IkReal> x7273 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7270),IKFAST_ATAN2_MAGTHRESH);
if(!x7273.valid){
continue;
}
IkReal x7272=((-1.0)*(x7273.value));
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst133;
cj15=gconst134;
j15=x7272;
IkReal gconst132=x7272;
IkReal gconst133=(r21*x7271);
IkReal gconst134=(x7270*x7271);
j14eval[0]=sj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x7274=((-1.0)*r20);
IkReal x7275=x7262;
CheckValue<IkReal> x7277 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7274),IKFAST_ATAN2_MAGTHRESH);
if(!x7277.valid){
continue;
}
IkReal x7276=((-1.0)*(x7277.value));
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst133;
cj15=gconst134;
j15=x7276;
IkReal gconst132=x7276;
IkReal gconst133=(r21*x7275);
IkReal gconst134=(x7274*x7275);
IkReal x7278=r22*r22;
CheckValue<IkReal> x7281=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7278))),-1);
if(!x7281.valid){
continue;
}
IkReal x7279=x7281.value;
IkReal x7280=(x7278+((x7279*(r20*r20*r20*r20)))+((x7279*(r21*r21*r21*r21)))+(((2.0)*x7279*(r20*r20)*(r21*r21))));
j14eval[0]=x7280;
j14eval[1]=IKsign(x7280);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7282=(gconst134*r20);
IkReal x7283=(cj12*sj11);
IkReal x7284=(gconst133*r21);
IkReal x7285=(cj11*sj12);
CheckValue<IkReal> x7286=IKPowWithIntegerCheck(IKsign(((x7284*x7284)+(x7282*x7282)+(r22*r22)+(((-2.0)*x7282*x7284)))),-1);
if(!x7286.valid){
continue;
}
CheckValue<IkReal> x7287 = IKatan2WithCheck(IkReal((((r22*x7283))+((r22*x7285)))),IkReal(((((-1.0)*x7282*x7285))+(((-1.0)*x7282*x7283))+((x7284*x7285))+((x7283*x7284)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7287.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7286.value)))+(x7287.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7288=IKsin(j14);
IkReal x7289=IKcos(j14);
IkReal x7290=((1.0)*sj10);
IkReal x7291=(gconst134*r20);
IkReal x7292=(gconst134*r10);
IkReal x7293=(gconst134*r00);
IkReal x7294=(sj11*sj12);
IkReal x7295=(cj11*cj12);
IkReal x7296=((1.0)*x7289);
IkReal x7297=((1.0)*x7288);
IkReal x7298=(gconst133*x7288);
evalcond[0]=((((-1.0)*x7291*x7297))+(((-1.0)*r22*x7296))+((r21*x7298)));
evalcond[1]=(((r11*x7298))+cj10+(((-1.0)*r12*x7296))+(((-1.0)*x7292*x7297)));
evalcond[2]=((((-1.0)*x7290))+(((-1.0)*r02*x7296))+(((-1.0)*x7293*x7297))+((r01*x7298)));
evalcond[3]=((((-1.0)*r22*x7297))+(((-1.0)*gconst133*r21*x7296))+((cj12*sj11))+((x7289*x7291))+((cj11*sj12)));
evalcond[4]=((((-1.0)*gconst133*r01*x7296))+(((-1.0)*r02*x7297))+((x7289*x7293))+((cj10*x7294))+(((-1.0)*cj10*x7295)));
evalcond[5]=((((-1.0)*x7290*x7295))+((sj10*x7294))+(((-1.0)*r12*x7297))+(((-1.0)*gconst133*r11*x7296))+((x7289*x7292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7299=((1.0)*gconst134);
CheckValue<IkReal> x7300 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x7299))+((gconst133*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7300.valid){
continue;
}
CheckValue<IkReal> x7301=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7299)))),-1);
if(!x7301.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7300.value)+(((1.5707963267949)*(x7301.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7302=IKsin(j14);
IkReal x7303=IKcos(j14);
IkReal x7304=((1.0)*sj10);
IkReal x7305=(gconst134*r20);
IkReal x7306=(gconst134*r10);
IkReal x7307=(gconst134*r00);
IkReal x7308=(sj11*sj12);
IkReal x7309=(cj11*cj12);
IkReal x7310=((1.0)*x7303);
IkReal x7311=((1.0)*x7302);
IkReal x7312=(gconst133*x7302);
evalcond[0]=(((r21*x7312))+(((-1.0)*r22*x7310))+(((-1.0)*x7305*x7311)));
evalcond[1]=(cj10+(((-1.0)*r12*x7310))+(((-1.0)*x7306*x7311))+((r11*x7312)));
evalcond[2]=(((r01*x7312))+(((-1.0)*x7304))+(((-1.0)*x7307*x7311))+(((-1.0)*r02*x7310)));
evalcond[3]=((((-1.0)*gconst133*r21*x7310))+((x7303*x7305))+((cj12*sj11))+(((-1.0)*r22*x7311))+((cj11*sj12)));
evalcond[4]=(((x7303*x7307))+((cj10*x7308))+(((-1.0)*gconst133*r01*x7310))+(((-1.0)*cj10*x7309))+(((-1.0)*r02*x7311)));
evalcond[5]=((((-1.0)*gconst133*r11*x7310))+((x7303*x7306))+(((-1.0)*r12*x7311))+(((-1.0)*x7304*x7309))+((sj10*x7308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7313=((1.0)*gconst134);
CheckValue<IkReal> x7314 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst133*r21))+(((-1.0)*cj10*r20*x7313)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7314.valid){
continue;
}
CheckValue<IkReal> x7315=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7313)))),-1);
if(!x7315.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7314.value)+(((1.5707963267949)*(x7315.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7316=IKsin(j14);
IkReal x7317=IKcos(j14);
IkReal x7318=((1.0)*sj10);
IkReal x7319=(gconst134*r20);
IkReal x7320=(gconst134*r10);
IkReal x7321=(gconst134*r00);
IkReal x7322=(sj11*sj12);
IkReal x7323=(cj11*cj12);
IkReal x7324=((1.0)*x7317);
IkReal x7325=((1.0)*x7316);
IkReal x7326=(gconst133*x7316);
evalcond[0]=(((r21*x7326))+(((-1.0)*r22*x7324))+(((-1.0)*x7319*x7325)));
evalcond[1]=(cj10+(((-1.0)*r12*x7324))+((r11*x7326))+(((-1.0)*x7320*x7325)));
evalcond[2]=(((r01*x7326))+(((-1.0)*x7321*x7325))+(((-1.0)*x7318))+(((-1.0)*r02*x7324)));
evalcond[3]=(((x7317*x7319))+(((-1.0)*r22*x7325))+(((-1.0)*gconst133*r21*x7324))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*gconst133*r01*x7324))+((cj10*x7322))+((x7317*x7321))+(((-1.0)*cj10*x7323))+(((-1.0)*r02*x7325)));
evalcond[5]=((((-1.0)*x7318*x7323))+(((-1.0)*gconst133*r11*x7324))+(((-1.0)*r12*x7325))+((x7317*x7320))+((sj10*x7322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7327=((-1.0)*r21);
IkReal x7329 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7329)==0){
continue;
}
IkReal x7328=pow(x7329,-0.5);
CheckValue<IkReal> x7330 = IKatan2WithCheck(IkReal(x7327),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7330.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7330.value))));
IkReal gconst136=(x7327*x7328);
IkReal gconst137=((1.0)*r20*x7328);
CheckValue<IkReal> x7331 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7331.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x7331.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x7332=((-1.0)*r21);
CheckValue<IkReal> x7335 = IKatan2WithCheck(IkReal(x7332),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7335.valid){
continue;
}
IkReal x7333=((1.0)*(x7335.value));
IkReal x7334=x7328;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst136;
cj15=gconst137;
j15=((3.14159265)+(((-1.0)*x7333)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7333)));
IkReal gconst136=(x7332*x7334);
IkReal gconst137=((1.0)*r20*x7334);
IkReal x7336=r22*r22;
IkReal x7337=((1.0)*x7336);
CheckValue<IkReal> x7341=IKPowWithIntegerCheck(((-1.0)+x7336),-1);
if(!x7341.valid){
continue;
}
IkReal x7338=x7341.value;
if((((1.0)+(((-1.0)*x7337)))) < -0.00001)
continue;
IkReal x7339=IKsqrt(((1.0)+(((-1.0)*x7337))));
IkReal x7340=(cj10*x7338*x7339);
j14eval[0]=((IKabs((x7340+(((-1.0)*x7337*x7340)))))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x7342=((-1.0)*r21);
CheckValue<IkReal> x7345 = IKatan2WithCheck(IkReal(x7342),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7345.valid){
continue;
}
IkReal x7343=((1.0)*(x7345.value));
IkReal x7344=x7328;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst136;
cj15=gconst137;
j15=((3.14159265)+(((-1.0)*x7343)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7343)));
IkReal gconst136=(x7342*x7344);
IkReal gconst137=((1.0)*r20*x7344);
IkReal x7346=r22*r22;
IkReal x7347=((1.0)*x7346);
CheckValue<IkReal> x7351=IKPowWithIntegerCheck(((-1.0)+x7346),-1);
if(!x7351.valid){
continue;
}
IkReal x7348=x7351.value;
if((((1.0)+(((-1.0)*x7347)))) < -0.00001)
continue;
IkReal x7349=IKsqrt(((1.0)+(((-1.0)*x7347))));
IkReal x7350=(sj10*x7348*x7349);
j14eval[0]=((IKabs((x7350+(((-1.0)*x7347*x7350)))))+(IKabs((r22*sj10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x7352=((-1.0)*r21);
CheckValue<IkReal> x7355 = IKatan2WithCheck(IkReal(x7352),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7355.valid){
continue;
}
IkReal x7353=((1.0)*(x7355.value));
IkReal x7354=x7328;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst136;
cj15=gconst137;
j15=((3.14159265)+(((-1.0)*x7353)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7353)));
IkReal gconst136=(x7352*x7354);
IkReal gconst137=((1.0)*r20*x7354);
IkReal x7356=r22*r22;
IkReal x7357=(cj10*r02);
IkReal x7358=(r12*sj10);
CheckValue<IkReal> x7362=IKPowWithIntegerCheck(((-1.0)+x7356),-1);
if(!x7362.valid){
continue;
}
IkReal x7359=x7362.value;
if((((1.0)+(((-1.0)*x7356)))) < -0.00001)
continue;
IkReal x7360=IKsqrt(((1.0)+(((-1.0)*x7356))));
IkReal x7361=(r22*x7359*x7360);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=((IKabs((((x7358*x7361))+((x7357*x7361)))))+(IKabs(((((-1.0)*x7357))+(((-1.0)*x7358))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7363=((1.0)*gconst136);
CheckValue<IkReal> x7364=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7363))+(((-1.0)*gconst137*r21)))),-1);
if(!x7364.valid){
continue;
}
CheckValue<IkReal> x7365 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x7363))+(((-1.0)*cj10*r01*x7363))+((gconst137*r10*sj10))+((cj10*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7365.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7364.value)))+(x7365.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7366=IKsin(j14);
IkReal x7367=IKcos(j14);
IkReal x7368=(gconst136*r01);
IkReal x7369=(gconst136*r11);
IkReal x7370=(gconst136*r21);
IkReal x7371=(sj11*sj12);
IkReal x7372=((1.0)*x7367);
IkReal x7373=(gconst137*x7367);
IkReal x7374=((1.0)*x7366);
IkReal x7375=((1.0)*cj11*cj12);
evalcond[0]=((((-1.0)*gconst137*r20*x7374))+(((-1.0)*r22*x7372))+((x7366*x7370)));
evalcond[1]=((((-1.0)*r12*x7372))+cj10+((x7366*x7369))+(((-1.0)*gconst137*r10*x7374)));
evalcond[2]=(((x7366*x7368))+(((-1.0)*gconst137*r00*x7374))+(((-1.0)*sj10))+(((-1.0)*r02*x7372)));
evalcond[3]=((((-1.0)*r22*x7374))+(((-1.0)*x7370*x7372))+((r20*x7373))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((r00*x7373))+(((-1.0)*x7368*x7372))+(((-1.0)*r02*x7374))+((cj10*x7371))+(((-1.0)*cj10*x7375)));
evalcond[5]=((((-1.0)*r12*x7374))+((sj10*x7371))+(((-1.0)*sj10*x7375))+(((-1.0)*x7369*x7372))+((r10*x7373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7376=((1.0)*gconst137);
CheckValue<IkReal> x7377=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7376))+(((-1.0)*gconst136*r10)))),-1);
if(!x7377.valid){
continue;
}
CheckValue<IkReal> x7378 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x7376))+((gconst136*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7378.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7377.value)))+(x7378.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7379=IKsin(j14);
IkReal x7380=IKcos(j14);
IkReal x7381=(gconst136*r01);
IkReal x7382=(gconst136*r11);
IkReal x7383=(gconst136*r21);
IkReal x7384=(sj11*sj12);
IkReal x7385=((1.0)*x7380);
IkReal x7386=(gconst137*x7380);
IkReal x7387=((1.0)*x7379);
IkReal x7388=((1.0)*cj11*cj12);
evalcond[0]=((((-1.0)*gconst137*r20*x7387))+(((-1.0)*r22*x7385))+((x7379*x7383)));
evalcond[1]=(((x7379*x7382))+cj10+(((-1.0)*r12*x7385))+(((-1.0)*gconst137*r10*x7387)));
evalcond[2]=((((-1.0)*r02*x7385))+(((-1.0)*gconst137*r00*x7387))+((x7379*x7381))+(((-1.0)*sj10)));
evalcond[3]=((((-1.0)*r22*x7387))+((r20*x7386))+(((-1.0)*x7383*x7385))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*r02*x7387))+(((-1.0)*x7381*x7385))+(((-1.0)*cj10*x7388))+((cj10*x7384))+((r00*x7386)));
evalcond[5]=(((sj10*x7384))+(((-1.0)*sj10*x7388))+((r10*x7386))+(((-1.0)*r12*x7387))+(((-1.0)*x7382*x7385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7389=((1.0)*gconst137);
CheckValue<IkReal> x7390 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst136*r21))+(((-1.0)*cj10*r20*x7389)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7390.valid){
continue;
}
CheckValue<IkReal> x7391=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x7389)))),-1);
if(!x7391.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7390.value)+(((1.5707963267949)*(x7391.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7392=IKsin(j14);
IkReal x7393=IKcos(j14);
IkReal x7394=(gconst136*r01);
IkReal x7395=(gconst136*r11);
IkReal x7396=(gconst136*r21);
IkReal x7397=(sj11*sj12);
IkReal x7398=((1.0)*x7393);
IkReal x7399=(gconst137*x7393);
IkReal x7400=((1.0)*x7392);
IkReal x7401=((1.0)*cj11*cj12);
evalcond[0]=((((-1.0)*gconst137*r20*x7400))+(((-1.0)*r22*x7398))+((x7392*x7396)));
evalcond[1]=((((-1.0)*r12*x7398))+(((-1.0)*gconst137*r10*x7400))+cj10+((x7392*x7395)));
evalcond[2]=((((-1.0)*r02*x7398))+(((-1.0)*sj10))+(((-1.0)*gconst137*r00*x7400))+((x7392*x7394)));
evalcond[3]=((((-1.0)*x7396*x7398))+(((-1.0)*r22*x7400))+((cj12*sj11))+((r20*x7399))+((cj11*sj12)));
evalcond[4]=((((-1.0)*x7394*x7398))+((cj10*x7397))+((r00*x7399))+(((-1.0)*cj10*x7401))+(((-1.0)*r02*x7400)));
evalcond[5]=(((sj10*x7397))+(((-1.0)*r12*x7400))+((r10*x7399))+(((-1.0)*x7395*x7398))+(((-1.0)*sj10*x7401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7402=((-1.0)*r10);
IkReal x7404 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7404)==0){
continue;
}
IkReal x7403=pow(x7404,-0.5);
CheckValue<IkReal> x7405 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7402),IKFAST_ATAN2_MAGTHRESH);
if(!x7405.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7405.value));
IkReal gconst139=(r11*x7403);
IkReal gconst140=(x7402*x7403);
CheckValue<IkReal> x7406 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7406.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x7406.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x7407=((-1.0)*r10);
IkReal x7408=x7403;
CheckValue<IkReal> x7410 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7407),IKFAST_ATAN2_MAGTHRESH);
if(!x7410.valid){
continue;
}
IkReal x7409=((-1.0)*(x7410.value));
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst139;
cj15=gconst140;
j15=x7409;
IkReal gconst138=x7409;
IkReal gconst139=(r11*x7408);
IkReal gconst140=(x7407*x7408);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7411=((1.0)*gconst139);
CheckValue<IkReal> x7412 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x7411))+(((-1.0)*cj10*r01*x7411))+((gconst140*r10*sj10))+((cj10*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7412.valid){
continue;
}
CheckValue<IkReal> x7413=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7411)))),-1);
if(!x7413.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7412.value)+(((1.5707963267949)*(x7413.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7414=IKsin(j14);
IkReal x7415=IKcos(j14);
IkReal x7416=(gconst139*r21);
IkReal x7417=((1.0)*sj10);
IkReal x7418=(gconst140*r20);
IkReal x7419=(gconst140*r10);
IkReal x7420=(sj11*sj12);
IkReal x7421=(gconst139*r01);
IkReal x7422=(gconst140*r00);
IkReal x7423=(cj11*cj12);
IkReal x7424=(gconst139*r11);
IkReal x7425=((1.0)*x7415);
IkReal x7426=((1.0)*x7414);
evalcond[0]=((((-1.0)*r22*x7425))+(((-1.0)*x7418*x7426))+((x7414*x7416)));
evalcond[1]=((((-1.0)*r12*x7425))+cj10+(((-1.0)*x7419*x7426))+((x7414*x7424)));
evalcond[2]=((((-1.0)*x7422*x7426))+(((-1.0)*r02*x7425))+(((-1.0)*x7417))+((x7414*x7421)));
evalcond[3]=((((-1.0)*x7416*x7425))+((x7415*x7418))+(((-1.0)*r22*x7426))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*x7421*x7425))+((cj10*x7420))+(((-1.0)*r02*x7426))+(((-1.0)*cj10*x7423))+((x7415*x7422)));
evalcond[5]=(((x7415*x7419))+(((-1.0)*r12*x7426))+((sj10*x7420))+(((-1.0)*x7424*x7425))+(((-1.0)*x7417*x7423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7427=((1.0)*gconst140);
CheckValue<IkReal> x7428 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x7427))+((cj10*gconst139*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7428.valid){
continue;
}
CheckValue<IkReal> x7429=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x7427)))),-1);
if(!x7429.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7428.value)+(((1.5707963267949)*(x7429.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7430=IKsin(j14);
IkReal x7431=IKcos(j14);
IkReal x7432=(gconst139*r21);
IkReal x7433=((1.0)*sj10);
IkReal x7434=(gconst140*r20);
IkReal x7435=(gconst140*r10);
IkReal x7436=(sj11*sj12);
IkReal x7437=(gconst139*r01);
IkReal x7438=(gconst140*r00);
IkReal x7439=(cj11*cj12);
IkReal x7440=(gconst139*r11);
IkReal x7441=((1.0)*x7431);
IkReal x7442=((1.0)*x7430);
evalcond[0]=(((x7430*x7432))+(((-1.0)*x7434*x7442))+(((-1.0)*r22*x7441)));
evalcond[1]=((((-1.0)*x7435*x7442))+cj10+(((-1.0)*r12*x7441))+((x7430*x7440)));
evalcond[2]=((((-1.0)*x7433))+(((-1.0)*x7438*x7442))+(((-1.0)*r02*x7441))+((x7430*x7437)));
evalcond[3]=((((-1.0)*x7432*x7441))+((x7431*x7434))+((cj12*sj11))+(((-1.0)*r22*x7442))+((cj11*sj12)));
evalcond[4]=((((-1.0)*x7437*x7441))+((cj10*x7436))+(((-1.0)*r02*x7442))+((x7431*x7438))+(((-1.0)*cj10*x7439)));
evalcond[5]=((((-1.0)*x7440*x7441))+((sj10*x7436))+((x7431*x7435))+(((-1.0)*r12*x7442))+(((-1.0)*x7433*x7439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7443=((-1.0)*r11);
IkReal x7445 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7445)==0){
continue;
}
IkReal x7444=pow(x7445,-0.5);
CheckValue<IkReal> x7446 = IKatan2WithCheck(IkReal(x7443),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7446.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7446.value))));
IkReal gconst142=(x7443*x7444);
IkReal gconst143=((1.0)*r10*x7444);
CheckValue<IkReal> x7447 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7447.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x7447.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x7448=((-1.0)*r11);
CheckValue<IkReal> x7451 = IKatan2WithCheck(IkReal(x7448),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7451.valid){
continue;
}
IkReal x7449=((1.0)*(x7451.value));
IkReal x7450=x7444;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst142;
cj15=gconst143;
j15=((3.14159265)+(((-1.0)*x7449)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7449)));
IkReal gconst142=(x7448*x7450);
IkReal gconst143=((1.0)*r10*x7450);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x7452=((-1.0)*r11);
CheckValue<IkReal> x7455 = IKatan2WithCheck(IkReal(x7452),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7455.valid){
continue;
}
IkReal x7453=((1.0)*(x7455.value));
IkReal x7454=x7444;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst142;
cj15=gconst143;
j15=((3.14159265)+(((-1.0)*x7453)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7453)));
IkReal gconst142=(x7452*x7454);
IkReal gconst143=((1.0)*r10*x7454);
IkReal x7456=r12*r12;
IkReal x7457=(cj10*r02);
IkReal x7458=x7444;
IkReal x7459=(sj10*x7458);
j14eval[0]=((IKabs(((((-1.0)*x7459))+((x7456*x7459))+((r12*x7457*x7458)))))+(IKabs(((((-1.0)*x7457))+(((-1.0)*r12*sj10))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x7460=((-1.0)*r11);
CheckValue<IkReal> x7463 = IKatan2WithCheck(IkReal(x7460),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7463.valid){
continue;
}
IkReal x7461=((1.0)*(x7463.value));
IkReal x7462=x7444;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst142;
cj15=gconst143;
j15=((3.14159265)+(((-1.0)*x7461)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7461)));
IkReal gconst142=(x7460*x7462);
IkReal gconst143=((1.0)*r10*x7462);
IkReal x7464=r12*r12;
IkReal x7465=(cj12*r22*sj11);
IkReal x7466=(cj11*r22*sj12);
CheckValue<IkReal> x7470=IKPowWithIntegerCheck(((-1.0)+x7464),-1);
if(!x7470.valid){
continue;
}
IkReal x7467=x7470.value;
if((((1.0)+(((-1.0)*x7464)))) < -0.00001)
continue;
IkReal x7468=IKsqrt(((1.0)+(((-1.0)*x7464))));
IkReal x7469=((1.0)*r12*x7467*x7468);
j14eval[0]=((IKabs(((((-1.0)*x7466*x7469))+(((-1.0)*x7465*x7469)))))+(IKabs((x7466+x7465))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7471=(cj11*sj12);
IkReal x7472=(gconst143*r20);
IkReal x7473=(gconst142*r21);
IkReal x7474=(cj12*sj11);
CheckValue<IkReal> x7475=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7473*x7473)+(((-2.0)*x7472*x7473))+(x7472*x7472))),-1);
if(!x7475.valid){
continue;
}
CheckValue<IkReal> x7476 = IKatan2WithCheck(IkReal((((r22*x7471))+((r22*x7474)))),IkReal((((x7471*x7473))+(((-1.0)*x7472*x7474))+(((-1.0)*x7471*x7472))+((x7473*x7474)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7476.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7475.value)))+(x7476.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7477=IKsin(j14);
IkReal x7478=IKcos(j14);
IkReal x7479=((1.0)*sj10);
IkReal x7480=(gconst142*r21);
IkReal x7481=(gconst142*r01);
IkReal x7482=(sj11*sj12);
IkReal x7483=(cj11*cj12);
IkReal x7484=(gconst142*r11);
IkReal x7485=((1.0)*x7478);
IkReal x7486=((1.0)*x7477);
IkReal x7487=(gconst143*x7478);
evalcond[0]=(((x7477*x7480))+(((-1.0)*gconst143*r20*x7486))+(((-1.0)*r22*x7485)));
evalcond[1]=(((x7477*x7484))+(((-1.0)*gconst143*r10*x7486))+cj10+(((-1.0)*r12*x7485)));
evalcond[2]=(((x7477*x7481))+(((-1.0)*x7479))+(((-1.0)*gconst143*r00*x7486))+(((-1.0)*r02*x7485)));
evalcond[3]=((((-1.0)*x7480*x7485))+((r20*x7487))+((cj12*sj11))+(((-1.0)*r22*x7486))+((cj11*sj12)));
evalcond[4]=((((-1.0)*x7481*x7485))+(((-1.0)*cj10*x7483))+((r00*x7487))+((cj10*x7482))+(((-1.0)*r02*x7486)));
evalcond[5]=((((-1.0)*x7479*x7483))+((r10*x7487))+((sj10*x7482))+(((-1.0)*r12*x7486))+(((-1.0)*x7484*x7485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7488=((1.0)*sj10);
IkReal x7489=((1.0)*gconst142);
CheckValue<IkReal> x7490=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7489))+(((-1.0)*gconst143*r21)))),-1);
if(!x7490.valid){
continue;
}
CheckValue<IkReal> x7491 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7488))+(((-1.0)*cj10*r02)))),IkReal((((cj10*gconst143*r00))+((gconst143*r10*sj10))+(((-1.0)*cj10*r01*x7489))+(((-1.0)*gconst142*r11*x7488)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7491.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7490.value)))+(x7491.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7492=IKsin(j14);
IkReal x7493=IKcos(j14);
IkReal x7494=((1.0)*sj10);
IkReal x7495=(gconst142*r21);
IkReal x7496=(gconst142*r01);
IkReal x7497=(sj11*sj12);
IkReal x7498=(cj11*cj12);
IkReal x7499=(gconst142*r11);
IkReal x7500=((1.0)*x7493);
IkReal x7501=((1.0)*x7492);
IkReal x7502=(gconst143*x7493);
evalcond[0]=((((-1.0)*r22*x7500))+((x7492*x7495))+(((-1.0)*gconst143*r20*x7501)));
evalcond[1]=((((-1.0)*gconst143*r10*x7501))+((x7492*x7499))+cj10+(((-1.0)*r12*x7500)));
evalcond[2]=((((-1.0)*r02*x7500))+(((-1.0)*gconst143*r00*x7501))+((x7492*x7496))+(((-1.0)*x7494)));
evalcond[3]=((((-1.0)*r22*x7501))+((r20*x7502))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*x7495*x7500)));
evalcond[4]=(((r00*x7502))+(((-1.0)*x7496*x7500))+(((-1.0)*r02*x7501))+(((-1.0)*cj10*x7498))+((cj10*x7497)));
evalcond[5]=((((-1.0)*x7499*x7500))+(((-1.0)*x7494*x7498))+((r10*x7502))+((sj10*x7497))+(((-1.0)*r12*x7501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7503=((1.0)*gconst143);
CheckValue<IkReal> x7504=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7503))+(((-1.0)*gconst142*r00)))),-1);
if(!x7504.valid){
continue;
}
CheckValue<IkReal> x7505 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x7503))+((cj10*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7505.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7504.value)))+(x7505.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7506=IKsin(j14);
IkReal x7507=IKcos(j14);
IkReal x7508=((1.0)*sj10);
IkReal x7509=(gconst142*r21);
IkReal x7510=(gconst142*r01);
IkReal x7511=(sj11*sj12);
IkReal x7512=(cj11*cj12);
IkReal x7513=(gconst142*r11);
IkReal x7514=((1.0)*x7507);
IkReal x7515=((1.0)*x7506);
IkReal x7516=(gconst143*x7507);
evalcond[0]=((((-1.0)*gconst143*r20*x7515))+((x7506*x7509))+(((-1.0)*r22*x7514)));
evalcond[1]=(((x7506*x7513))+(((-1.0)*gconst143*r10*x7515))+cj10+(((-1.0)*r12*x7514)));
evalcond[2]=(((x7506*x7510))+(((-1.0)*gconst143*r00*x7515))+(((-1.0)*r02*x7514))+(((-1.0)*x7508)));
evalcond[3]=(((r20*x7516))+(((-1.0)*x7509*x7514))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*r22*x7515)));
evalcond[4]=(((r00*x7516))+((cj10*x7511))+(((-1.0)*x7510*x7514))+(((-1.0)*r02*x7515))+(((-1.0)*cj10*x7512)));
evalcond[5]=((((-1.0)*x7508*x7512))+((r10*x7516))+((sj10*x7511))+(((-1.0)*r12*x7515))+(((-1.0)*x7513*x7514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=1.0;
j10=0;
IkReal x7517=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x7517;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj15*r00))+((r01*sj15))))));
j14eval[2]=IKsign(x7517);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=1.0;
j10=0;
IkReal x7518=((1.0)*cj15);
IkReal x7519=((((-1.0)*r01*x7518))+(((-1.0)*r00*sj15)));
j14eval[0]=x7519;
j14eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x7518))+((r21*sj15))))));
j14eval[2]=IKsign(x7519);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=1.0;
j10=0;
IkReal x7520=cj15*cj15;
IkReal x7521=r11*r11;
IkReal x7522=(r11*sj15);
IkReal x7523=(cj15*r10);
IkReal x7524=((r12*r12)+(((-1.0)*x7520*x7521))+((x7520*(r10*r10)))+x7521+(((-2.0)*x7522*x7523)));
j14eval[0]=x7524;
j14eval[1]=IKsign(x7524);
j14eval[2]=((IKabs(r12))+(IKabs((x7523+(((-1.0)*x7522))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7525=cj15*cj15;
IkReal x7526=r11*r11;
IkReal x7527=(r11*sj15);
IkReal x7528=(cj15*r10);
CheckValue<IkReal> x7529 = IKatan2WithCheck(IkReal((x7528+(((-1.0)*x7527)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7529.valid){
continue;
}
CheckValue<IkReal> x7530=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7525*x7526))+(r12*r12)+((x7525*(r10*r10)))+(((-2.0)*x7527*x7528))+x7526)),-1);
if(!x7530.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7529.value)+(((1.5707963267949)*(x7530.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7531=IKsin(j14);
IkReal x7532=IKcos(j14);
IkReal x7533=(r11*sj15);
IkReal x7534=(cj15*r10);
IkReal x7535=(cj15*r00);
IkReal x7536=(r21*sj15);
IkReal x7537=(r01*sj15);
IkReal x7538=(cj15*r20);
IkReal x7539=((1.0)*x7532);
IkReal x7540=((1.0)*x7531);
evalcond[0]=((((-1.0)*r22*x7539))+(((-1.0)*x7538*x7540))+((x7531*x7536)));
evalcond[1]=((((-1.0)*x7535*x7540))+((x7531*x7537))+(((-1.0)*r02*x7539)));
evalcond[2]=((((-1.0)*x7533*x7539))+(((-1.0)*r12*x7540))+((x7532*x7534)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7539))+(((-1.0)*x7534*x7540))+((x7531*x7533)));
evalcond[4]=((((-1.0)*r22*x7540))+(((-1.0)*x7536*x7539))+((cj12*sj11))+((x7532*x7538))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x7537*x7539))+((x7532*x7535))+(((-1.0)*r02*x7540))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7541=((1.0)*cj15);
CheckValue<IkReal> x7542 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj15))+(((-1.0)*r20*x7541)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7542.valid){
continue;
}
CheckValue<IkReal> x7543=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7541))+(((-1.0)*r00*sj15)))),-1);
if(!x7543.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7542.value)+(((1.5707963267949)*(x7543.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7544=IKsin(j14);
IkReal x7545=IKcos(j14);
IkReal x7546=(r11*sj15);
IkReal x7547=(cj15*r10);
IkReal x7548=(cj15*r00);
IkReal x7549=(r21*sj15);
IkReal x7550=(r01*sj15);
IkReal x7551=(cj15*r20);
IkReal x7552=((1.0)*x7545);
IkReal x7553=((1.0)*x7544);
evalcond[0]=((((-1.0)*x7551*x7553))+(((-1.0)*r22*x7552))+((x7544*x7549)));
evalcond[1]=(((x7544*x7550))+(((-1.0)*r02*x7552))+(((-1.0)*x7548*x7553)));
evalcond[2]=(((x7545*x7547))+(((-1.0)*r12*x7553))+(((-1.0)*x7546*x7552)));
evalcond[3]=((1.0)+((x7544*x7546))+(((-1.0)*r12*x7552))+(((-1.0)*x7547*x7553)));
evalcond[4]=(((x7545*x7551))+(((-1.0)*r22*x7553))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*x7549*x7552)));
evalcond[5]=(((sj11*sj12))+((x7545*x7548))+(((-1.0)*x7550*x7552))+(((-1.0)*cj11*cj12))+(((-1.0)*r02*x7553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x7554 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj15*r00))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7554.valid){
continue;
}
CheckValue<IkReal> x7555=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x7555.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7554.value)+(((1.5707963267949)*(x7555.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7556=IKsin(j14);
IkReal x7557=IKcos(j14);
IkReal x7558=(r11*sj15);
IkReal x7559=(cj15*r10);
IkReal x7560=(cj15*r00);
IkReal x7561=(r21*sj15);
IkReal x7562=(r01*sj15);
IkReal x7563=(cj15*r20);
IkReal x7564=((1.0)*x7557);
IkReal x7565=((1.0)*x7556);
evalcond[0]=((((-1.0)*x7563*x7565))+(((-1.0)*r22*x7564))+((x7556*x7561)));
evalcond[1]=((((-1.0)*r02*x7564))+((x7556*x7562))+(((-1.0)*x7560*x7565)));
evalcond[2]=(((x7557*x7559))+(((-1.0)*r12*x7565))+(((-1.0)*x7558*x7564)));
evalcond[3]=((1.0)+(((-1.0)*x7559*x7565))+((x7556*x7558))+(((-1.0)*r12*x7564)));
evalcond[4]=((((-1.0)*r22*x7565))+((x7557*x7563))+((cj12*sj11))+(((-1.0)*x7561*x7564))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x7562*x7564))+(((-1.0)*r02*x7565))+((x7557*x7560))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x7566=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x7566;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x7566);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x7567=((1.0)*cj15);
IkReal x7568=((((-1.0)*r21*x7567))+(((-1.0)*r20*sj15)));
j14eval[0]=x7568;
j14eval[1]=IKsign(x7568);
j14eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x7567))+((r01*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x7569=r11*r11;
IkReal x7570=cj15*cj15;
IkReal x7571=(cj15*r10);
IkReal x7572=(r11*sj15);
IkReal x7573=((((-1.0)*x7569))+(((-1.0)*x7570*(r10*r10)))+((x7569*x7570))+(((-1.0)*(r12*r12)))+(((2.0)*x7571*x7572)));
j14eval[0]=x7573;
j14eval[1]=((IKabs(r12))+(IKabs((x7571+(((-1.0)*x7572))))));
j14eval[2]=IKsign(x7573);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7574=r11*r11;
IkReal x7575=cj15*cj15;
IkReal x7576=(cj15*r10);
IkReal x7577=(r11*sj15);
CheckValue<IkReal> x7578 = IKatan2WithCheck(IkReal((x7576+(((-1.0)*x7577)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7578.valid){
continue;
}
CheckValue<IkReal> x7579=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+((x7574*x7575))+(((-1.0)*x7575*(r10*r10)))+(((2.0)*x7576*x7577))+(((-1.0)*x7574)))),-1);
if(!x7579.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7578.value)+(((1.5707963267949)*(x7579.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7580=IKsin(j14);
IkReal x7581=IKcos(j14);
IkReal x7582=(r11*sj15);
IkReal x7583=(cj15*r10);
IkReal x7584=(cj15*r00);
IkReal x7585=(r21*sj15);
IkReal x7586=(r01*sj15);
IkReal x7587=(cj15*r20);
IkReal x7588=((1.0)*x7581);
IkReal x7589=((1.0)*x7580);
evalcond[0]=((((-1.0)*r22*x7588))+(((-1.0)*x7587*x7589))+((x7580*x7585)));
evalcond[1]=((((-1.0)*x7584*x7589))+(((-1.0)*r02*x7588))+((x7580*x7586)));
evalcond[2]=((((-1.0)*x7582*x7588))+((x7581*x7583))+(((-1.0)*r12*x7589)));
evalcond[3]=((-1.0)+(((-1.0)*x7583*x7589))+(((-1.0)*r12*x7588))+((x7580*x7582)));
evalcond[4]=((((-1.0)*x7585*x7588))+(((-1.0)*r22*x7589))+((cj12*sj11))+((x7581*x7587))+((cj11*sj12)));
evalcond[5]=((((-1.0)*x7586*x7588))+(((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*r02*x7589))+((x7581*x7584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7590=((1.0)*cj15);
CheckValue<IkReal> x7591 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj15))+(((-1.0)*r00*x7590)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7591.valid){
continue;
}
CheckValue<IkReal> x7592=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15))+(((-1.0)*r21*x7590)))),-1);
if(!x7592.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7591.value)+(((1.5707963267949)*(x7592.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7593=IKsin(j14);
IkReal x7594=IKcos(j14);
IkReal x7595=(r11*sj15);
IkReal x7596=(cj15*r10);
IkReal x7597=(cj15*r00);
IkReal x7598=(r21*sj15);
IkReal x7599=(r01*sj15);
IkReal x7600=(cj15*r20);
IkReal x7601=((1.0)*x7594);
IkReal x7602=((1.0)*x7593);
evalcond[0]=((((-1.0)*r22*x7601))+(((-1.0)*x7600*x7602))+((x7593*x7598)));
evalcond[1]=((((-1.0)*x7597*x7602))+(((-1.0)*r02*x7601))+((x7593*x7599)));
evalcond[2]=((((-1.0)*x7595*x7601))+((x7594*x7596))+(((-1.0)*r12*x7602)));
evalcond[3]=((-1.0)+(((-1.0)*x7596*x7602))+((x7593*x7595))+(((-1.0)*r12*x7601)));
evalcond[4]=((((-1.0)*r22*x7602))+((cj12*sj11))+(((-1.0)*x7598*x7601))+((cj11*sj12))+((x7594*x7600)));
evalcond[5]=(((x7594*x7597))+(((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*x7599*x7601))+(((-1.0)*r02*x7602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x7603 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7603.valid){
continue;
}
CheckValue<IkReal> x7604=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x7604.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7603.value)+(((1.5707963267949)*(x7604.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7605=IKsin(j14);
IkReal x7606=IKcos(j14);
IkReal x7607=(r11*sj15);
IkReal x7608=(cj15*r10);
IkReal x7609=(cj15*r00);
IkReal x7610=(r21*sj15);
IkReal x7611=(r01*sj15);
IkReal x7612=(cj15*r20);
IkReal x7613=((1.0)*x7606);
IkReal x7614=((1.0)*x7605);
evalcond[0]=(((x7605*x7610))+(((-1.0)*r22*x7613))+(((-1.0)*x7612*x7614)));
evalcond[1]=(((x7605*x7611))+(((-1.0)*r02*x7613))+(((-1.0)*x7609*x7614)));
evalcond[2]=(((x7606*x7608))+(((-1.0)*r12*x7614))+(((-1.0)*x7607*x7613)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7613))+((x7605*x7607))+(((-1.0)*x7608*x7614)));
evalcond[4]=((((-1.0)*r22*x7614))+((x7606*x7612))+(((-1.0)*x7610*x7613))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((x7606*x7609))+(((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*x7611*x7613))+(((-1.0)*r02*x7614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7615=((-1.0)*r00);
IkReal x7617 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7617)==0){
continue;
}
IkReal x7616=pow(x7617,-0.5);
CheckValue<IkReal> x7618 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7615),IKFAST_ATAN2_MAGTHRESH);
if(!x7618.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7618.value));
IkReal gconst145=(r01*x7616);
IkReal gconst146=(x7615*x7616);
CheckValue<IkReal> x7619 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7619.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x7619.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x7620=((-1.0)*r00);
IkReal x7621=x7616;
CheckValue<IkReal> x7623 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7620),IKFAST_ATAN2_MAGTHRESH);
if(!x7623.valid){
continue;
}
IkReal x7622=((-1.0)*(x7623.value));
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst145;
cj15=gconst146;
j15=x7622;
IkReal gconst144=x7622;
IkReal gconst145=(r01*x7621);
IkReal gconst146=(x7620*x7621);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7624=((1.0)*gconst145);
CheckValue<IkReal> x7625 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x7624))+((gconst146*r10*sj10))+((cj10*gconst146*r00))+(((-1.0)*cj10*r01*x7624)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7625.valid){
continue;
}
CheckValue<IkReal> x7626=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7624))+(((-1.0)*gconst146*r21)))),-1);
if(!x7626.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7625.value)+(((1.5707963267949)*(x7626.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7627=IKsin(j14);
IkReal x7628=IKcos(j14);
IkReal x7629=(gconst146*r10);
IkReal x7630=((1.0)*sj10);
IkReal x7631=(gconst146*r00);
IkReal x7632=(sj11*sj12);
IkReal x7633=(gconst145*r21);
IkReal x7634=(gconst146*r20);
IkReal x7635=(cj11*cj12);
IkReal x7636=((1.0)*x7628);
IkReal x7637=((1.0)*x7627);
IkReal x7638=(gconst145*x7627);
evalcond[0]=((((-1.0)*r22*x7636))+(((-1.0)*x7634*x7637))+((x7627*x7633)));
evalcond[1]=(((r11*x7638))+(((-1.0)*x7629*x7637))+cj10+(((-1.0)*r12*x7636)));
evalcond[2]=((((-1.0)*x7630))+((r01*x7638))+(((-1.0)*r02*x7636))+(((-1.0)*x7631*x7637)));
evalcond[3]=((((-1.0)*r22*x7637))+((x7628*x7634))+(((-1.0)*x7633*x7636))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((cj10*x7632))+((x7628*x7631))+(((-1.0)*cj10*x7635))+(((-1.0)*gconst145*r01*x7636))+(((-1.0)*r02*x7637)));
evalcond[5]=(((x7628*x7629))+(((-1.0)*x7630*x7635))+((sj10*x7632))+(((-1.0)*gconst145*r11*x7636))+(((-1.0)*r12*x7637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7639=((1.0)*gconst146);
CheckValue<IkReal> x7640 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x7639))+((gconst145*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7640.valid){
continue;
}
CheckValue<IkReal> x7641=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r10))+(((-1.0)*r11*x7639)))),-1);
if(!x7641.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7640.value)+(((1.5707963267949)*(x7641.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7642=IKsin(j14);
IkReal x7643=IKcos(j14);
IkReal x7644=(gconst146*r10);
IkReal x7645=((1.0)*sj10);
IkReal x7646=(gconst146*r00);
IkReal x7647=(sj11*sj12);
IkReal x7648=(gconst145*r21);
IkReal x7649=(gconst146*r20);
IkReal x7650=(cj11*cj12);
IkReal x7651=((1.0)*x7643);
IkReal x7652=((1.0)*x7642);
IkReal x7653=(gconst145*x7642);
evalcond[0]=((((-1.0)*r22*x7651))+(((-1.0)*x7649*x7652))+((x7642*x7648)));
evalcond[1]=(((r11*x7653))+(((-1.0)*x7644*x7652))+cj10+(((-1.0)*r12*x7651)));
evalcond[2]=((((-1.0)*r02*x7651))+(((-1.0)*x7646*x7652))+((r01*x7653))+(((-1.0)*x7645)));
evalcond[3]=((((-1.0)*r22*x7652))+((x7643*x7649))+(((-1.0)*x7648*x7651))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*r02*x7652))+((x7643*x7646))+(((-1.0)*cj10*x7650))+((cj10*x7647))+(((-1.0)*gconst145*r01*x7651)));
evalcond[5]=(((x7643*x7644))+((sj10*x7647))+(((-1.0)*gconst145*r11*x7651))+(((-1.0)*r12*x7652))+(((-1.0)*x7645*x7650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7654=((-1.0)*r01);
IkReal x7656 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7656)==0){
continue;
}
IkReal x7655=pow(x7656,-0.5);
CheckValue<IkReal> x7657 = IKatan2WithCheck(IkReal(x7654),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7657.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7657.value))));
IkReal gconst148=(x7654*x7655);
IkReal gconst149=((1.0)*r00*x7655);
CheckValue<IkReal> x7658 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7658.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x7658.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[5];
IkReal x7659=((-1.0)*r01);
CheckValue<IkReal> x7662 = IKatan2WithCheck(IkReal(x7659),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7662.valid){
continue;
}
IkReal x7660=((1.0)*(x7662.value));
IkReal x7661=x7655;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst148;
cj15=gconst149;
j15=((3.14159265)+(((-1.0)*x7660)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7660)));
IkReal gconst148=(x7659*x7661);
IkReal gconst149=((1.0)*r00*x7661);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=cj10;
j14eval[3]=r22;
j14eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  || IKabs(j14eval[4]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x7663=((-1.0)*r01);
CheckValue<IkReal> x7666 = IKatan2WithCheck(IkReal(x7663),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7666.valid){
continue;
}
IkReal x7664=((1.0)*(x7666.value));
IkReal x7665=x7655;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst148;
cj15=gconst149;
j15=((3.14159265)+(((-1.0)*x7664)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7664)));
IkReal gconst148=(x7663*x7665);
IkReal gconst149=((1.0)*r00*x7665);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x7667=((-1.0)*r01);
CheckValue<IkReal> x7670 = IKatan2WithCheck(IkReal(x7667),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7670.valid){
continue;
}
IkReal x7668=((1.0)*(x7670.value));
IkReal x7669=x7655;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst148;
cj15=gconst149;
j15=((3.14159265)+(((-1.0)*x7668)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7668)));
IkReal gconst148=(x7667*x7669);
IkReal gconst149=((1.0)*r00*x7669);
IkReal x7671=r02*r02;
IkReal x7672=(r12*sj10);
IkReal x7673=x7655;
IkReal x7674=(cj10*x7673);
j14eval[0]=((IKabs((((x7671*x7674))+((r02*x7672*x7673))+(((-1.0)*x7674)))))+(IKabs(((((-1.0)*cj10*r02))+(((-1.0)*x7672))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7675=((1.0)*gconst148);
CheckValue<IkReal> x7676 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x7675))+(((-1.0)*cj10*r01*x7675))+((gconst149*r10*sj10))+((cj10*gconst149*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7676.valid){
continue;
}
CheckValue<IkReal> x7677=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7675))+(((-1.0)*gconst149*r21)))),-1);
if(!x7677.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7676.value)+(((1.5707963267949)*(x7677.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7678=IKsin(j14);
IkReal x7679=IKcos(j14);
IkReal x7680=(gconst148*r21);
IkReal x7681=(gconst148*r01);
IkReal x7682=(gconst149*r20);
IkReal x7683=((1.0)*sj10);
IkReal x7684=(gconst149*r10);
IkReal x7685=(sj11*sj12);
IkReal x7686=(cj11*cj12);
IkReal x7687=(gconst148*r11);
IkReal x7688=(gconst149*r00);
IkReal x7689=((1.0)*x7679);
IkReal x7690=((1.0)*x7678);
evalcond[0]=((((-1.0)*r22*x7689))+(((-1.0)*x7682*x7690))+((x7678*x7680)));
evalcond[1]=(cj10+(((-1.0)*r12*x7689))+(((-1.0)*x7684*x7690))+((x7678*x7687)));
evalcond[2]=((((-1.0)*x7683))+((x7678*x7681))+(((-1.0)*x7688*x7690))+(((-1.0)*r02*x7689)));
evalcond[3]=(((x7679*x7682))+(((-1.0)*r22*x7690))+(((-1.0)*x7680*x7689))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*r02*x7690))+((x7679*x7688))+(((-1.0)*cj10*x7686))+((cj10*x7685))+(((-1.0)*x7681*x7689)));
evalcond[5]=(((x7679*x7684))+(((-1.0)*x7687*x7689))+((sj10*x7685))+(((-1.0)*r12*x7690))+(((-1.0)*x7683*x7686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7691=((1.0)*gconst149);
CheckValue<IkReal> x7692=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7691))+(((-1.0)*gconst148*r10)))),-1);
if(!x7692.valid){
continue;
}
CheckValue<IkReal> x7693 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst148*r21*sj10))+(((-1.0)*r20*sj10*x7691)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7693.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7692.value)))+(x7693.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7694=IKsin(j14);
IkReal x7695=IKcos(j14);
IkReal x7696=(gconst148*r21);
IkReal x7697=(gconst148*r01);
IkReal x7698=(gconst149*r20);
IkReal x7699=((1.0)*sj10);
IkReal x7700=(gconst149*r10);
IkReal x7701=(sj11*sj12);
IkReal x7702=(cj11*cj12);
IkReal x7703=(gconst148*r11);
IkReal x7704=(gconst149*r00);
IkReal x7705=((1.0)*x7695);
IkReal x7706=((1.0)*x7694);
evalcond[0]=((((-1.0)*x7698*x7706))+(((-1.0)*r22*x7705))+((x7694*x7696)));
evalcond[1]=((((-1.0)*r12*x7705))+cj10+(((-1.0)*x7700*x7706))+((x7694*x7703)));
evalcond[2]=(((x7694*x7697))+(((-1.0)*x7699))+(((-1.0)*x7704*x7706))+(((-1.0)*r02*x7705)));
evalcond[3]=((((-1.0)*x7696*x7705))+(((-1.0)*r22*x7706))+((x7695*x7698))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*x7697*x7705))+((x7695*x7704))+((cj10*x7701))+(((-1.0)*r02*x7706))+(((-1.0)*cj10*x7702)));
evalcond[5]=(((x7695*x7700))+(((-1.0)*r12*x7706))+((sj10*x7701))+(((-1.0)*x7703*x7705))+(((-1.0)*x7699*x7702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7707=((1.0)*gconst149);
CheckValue<IkReal> x7708=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7707))+(((-1.0)*gconst148*r00)))),-1);
if(!x7708.valid){
continue;
}
CheckValue<IkReal> x7709 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x7707))+((cj10*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7709.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7708.value)))+(x7709.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7710=IKsin(j14);
IkReal x7711=IKcos(j14);
IkReal x7712=(gconst148*r21);
IkReal x7713=(gconst148*r01);
IkReal x7714=(gconst149*r20);
IkReal x7715=((1.0)*sj10);
IkReal x7716=(gconst149*r10);
IkReal x7717=(sj11*sj12);
IkReal x7718=(cj11*cj12);
IkReal x7719=(gconst148*r11);
IkReal x7720=(gconst149*r00);
IkReal x7721=((1.0)*x7711);
IkReal x7722=((1.0)*x7710);
evalcond[0]=((((-1.0)*x7714*x7722))+((x7710*x7712))+(((-1.0)*r22*x7721)));
evalcond[1]=((((-1.0)*x7716*x7722))+cj10+((x7710*x7719))+(((-1.0)*r12*x7721)));
evalcond[2]=((((-1.0)*x7715))+(((-1.0)*r02*x7721))+((x7710*x7713))+(((-1.0)*x7720*x7722)));
evalcond[3]=((((-1.0)*x7712*x7721))+((x7711*x7714))+((cj12*sj11))+(((-1.0)*r22*x7722))+((cj11*sj12)));
evalcond[4]=(((x7711*x7720))+(((-1.0)*cj10*x7718))+(((-1.0)*x7713*x7721))+((cj10*x7717))+(((-1.0)*r02*x7722)));
evalcond[5]=((((-1.0)*x7719*x7721))+((x7711*x7716))+((sj10*x7717))+(((-1.0)*x7715*x7718))+(((-1.0)*r12*x7722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x7723=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x7723;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x7723);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x7724=((1.0)*cj15);
IkReal x7725=((((-1.0)*r10*sj15))+(((-1.0)*r11*x7724)));
j14eval[0]=x7725;
j14eval[1]=IKsign(x7725);
j14eval[2]=((IKabs((((r21*sj15))+(((-1.0)*r20*x7724)))))+(IKabs(r22)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x7726=r01*r01;
IkReal x7727=cj15*cj15;
IkReal x7728=(r01*sj15);
IkReal x7729=(cj15*r00);
IkReal x7730=((((-1.0)*(r02*r02)))+(((-1.0)*x7727*(r00*r00)))+((x7726*x7727))+(((-1.0)*x7726))+(((2.0)*x7728*x7729)));
j14eval[0]=x7730;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x7728))+x7729))));
j14eval[2]=IKsign(x7730);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7731=r01*r01;
IkReal x7732=cj15*cj15;
IkReal x7733=(r01*sj15);
IkReal x7734=(cj15*r00);
CheckValue<IkReal> x7735 = IKatan2WithCheck(IkReal(((((-1.0)*x7733))+x7734)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7735.valid){
continue;
}
CheckValue<IkReal> x7736=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7731))+(((-1.0)*x7732*(r00*r00)))+((x7731*x7732))+(((-1.0)*(r02*r02)))+(((2.0)*x7733*x7734)))),-1);
if(!x7736.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7735.value)+(((1.5707963267949)*(x7736.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7737=IKsin(j14);
IkReal x7738=IKcos(j14);
IkReal x7739=(r11*sj15);
IkReal x7740=(cj15*r10);
IkReal x7741=(cj15*r00);
IkReal x7742=(r21*sj15);
IkReal x7743=(r01*sj15);
IkReal x7744=(cj15*r20);
IkReal x7745=((1.0)*x7738);
IkReal x7746=((1.0)*x7737);
evalcond[0]=((((-1.0)*r22*x7745))+(((-1.0)*x7744*x7746))+((x7737*x7742)));
evalcond[1]=((((-1.0)*x7740*x7746))+(((-1.0)*r12*x7745))+((x7737*x7739)));
evalcond[2]=((((-1.0)*r02*x7746))+((x7738*x7741))+(((-1.0)*x7743*x7745)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7745))+(((-1.0)*x7741*x7746))+((x7737*x7743)));
evalcond[4]=((((-1.0)*x7742*x7745))+(((-1.0)*r22*x7746))+((x7738*x7744))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x7738*x7740))+(((-1.0)*x7739*x7745))+(((-1.0)*r12*x7746))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7747=((1.0)*cj15);
CheckValue<IkReal> x7748 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj15))+(((-1.0)*r20*x7747)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7748.valid){
continue;
}
CheckValue<IkReal> x7749=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7747))+(((-1.0)*r10*sj15)))),-1);
if(!x7749.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7748.value)+(((1.5707963267949)*(x7749.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7750=IKsin(j14);
IkReal x7751=IKcos(j14);
IkReal x7752=(r11*sj15);
IkReal x7753=(cj15*r10);
IkReal x7754=(cj15*r00);
IkReal x7755=(r21*sj15);
IkReal x7756=(r01*sj15);
IkReal x7757=(cj15*r20);
IkReal x7758=((1.0)*x7751);
IkReal x7759=((1.0)*x7750);
evalcond[0]=((((-1.0)*x7757*x7759))+(((-1.0)*r22*x7758))+((x7750*x7755)));
evalcond[1]=((((-1.0)*r12*x7758))+(((-1.0)*x7753*x7759))+((x7750*x7752)));
evalcond[2]=((((-1.0)*r02*x7759))+(((-1.0)*x7756*x7758))+((x7751*x7754)));
evalcond[3]=((-1.0)+(((-1.0)*x7754*x7759))+(((-1.0)*r02*x7758))+((x7750*x7756)));
evalcond[4]=((((-1.0)*r22*x7759))+(((-1.0)*x7755*x7758))+((cj12*sj11))+((x7751*x7757))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x7752*x7758))+(((-1.0)*r12*x7759))+((x7751*x7753))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x7760=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x7760.valid){
continue;
}
CheckValue<IkReal> x7761 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7761.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7760.value)))+(x7761.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7762=IKsin(j14);
IkReal x7763=IKcos(j14);
IkReal x7764=(r11*sj15);
IkReal x7765=(cj15*r10);
IkReal x7766=(cj15*r00);
IkReal x7767=(r21*sj15);
IkReal x7768=(r01*sj15);
IkReal x7769=(cj15*r20);
IkReal x7770=((1.0)*x7763);
IkReal x7771=((1.0)*x7762);
evalcond[0]=((((-1.0)*x7769*x7771))+(((-1.0)*r22*x7770))+((x7762*x7767)));
evalcond[1]=(((x7762*x7764))+(((-1.0)*r12*x7770))+(((-1.0)*x7765*x7771)));
evalcond[2]=((((-1.0)*r02*x7771))+(((-1.0)*x7768*x7770))+((x7763*x7766)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x7770))+(((-1.0)*x7766*x7771))+((x7762*x7768)));
evalcond[4]=((((-1.0)*x7767*x7770))+(((-1.0)*r22*x7771))+((cj12*sj11))+((x7763*x7769))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x7764*x7770))+((x7763*x7765))+(((-1.0)*r12*x7771))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x7772=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x7772;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x7772);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x7773=((1.0)*cj15);
IkReal x7774=((((-1.0)*r20*sj15))+(((-1.0)*r21*x7773)));
j14eval[0]=x7774;
j14eval[1]=IKsign(x7774);
j14eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x7773))+((r11*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x7775=cj15*cj15;
IkReal x7776=r01*r01;
IkReal x7777=(cj15*r00);
IkReal x7778=(r01*sj15);
IkReal x7779=((((-1.0)*x7775*x7776))+(((-2.0)*x7777*x7778))+((x7775*(r00*r00)))+(r02*r02)+x7776);
j14eval[0]=x7779;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x7778))+x7777))));
j14eval[2]=IKsign(x7779);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7780=cj15*cj15;
IkReal x7781=r01*r01;
IkReal x7782=(r01*sj15);
IkReal x7783=(cj15*r00);
CheckValue<IkReal> x7784 = IKatan2WithCheck(IkReal((x7783+(((-1.0)*x7782)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7784.valid){
continue;
}
CheckValue<IkReal> x7785=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7782*x7783))+((x7780*(r00*r00)))+(((-1.0)*x7780*x7781))+(r02*r02)+x7781)),-1);
if(!x7785.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7784.value)+(((1.5707963267949)*(x7785.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7786=IKsin(j14);
IkReal x7787=IKcos(j14);
IkReal x7788=(r11*sj15);
IkReal x7789=(cj15*r10);
IkReal x7790=(cj15*r00);
IkReal x7791=(r21*sj15);
IkReal x7792=(r01*sj15);
IkReal x7793=(cj15*r20);
IkReal x7794=((1.0)*x7787);
IkReal x7795=((1.0)*x7786);
evalcond[0]=((((-1.0)*r22*x7794))+(((-1.0)*x7793*x7795))+((x7786*x7791)));
evalcond[1]=((((-1.0)*r12*x7794))+((x7786*x7788))+(((-1.0)*x7789*x7795)));
evalcond[2]=((((-1.0)*x7792*x7794))+(((-1.0)*r02*x7795))+((x7787*x7790)));
evalcond[3]=((1.0)+((x7786*x7792))+(((-1.0)*x7790*x7795))+(((-1.0)*r02*x7794)));
evalcond[4]=((((-1.0)*r22*x7795))+(((-1.0)*x7791*x7794))+((cj12*sj11))+((x7787*x7793))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((x7787*x7789))+(((-1.0)*r12*x7795))+((cj11*cj12))+(((-1.0)*x7788*x7794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7796=((1.0)*cj15);
CheckValue<IkReal> x7797=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15))+(((-1.0)*r21*x7796)))),-1);
if(!x7797.valid){
continue;
}
CheckValue<IkReal> x7798 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x7796))+((r11*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7798.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7797.value)))+(x7798.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7799=IKsin(j14);
IkReal x7800=IKcos(j14);
IkReal x7801=(r11*sj15);
IkReal x7802=(cj15*r10);
IkReal x7803=(cj15*r00);
IkReal x7804=(r21*sj15);
IkReal x7805=(r01*sj15);
IkReal x7806=(cj15*r20);
IkReal x7807=((1.0)*x7800);
IkReal x7808=((1.0)*x7799);
evalcond[0]=((((-1.0)*r22*x7807))+((x7799*x7804))+(((-1.0)*x7806*x7808)));
evalcond[1]=((((-1.0)*r12*x7807))+(((-1.0)*x7802*x7808))+((x7799*x7801)));
evalcond[2]=((((-1.0)*x7805*x7807))+((x7800*x7803))+(((-1.0)*r02*x7808)));
evalcond[3]=((1.0)+(((-1.0)*r02*x7807))+((x7799*x7805))+(((-1.0)*x7803*x7808)));
evalcond[4]=(((x7800*x7806))+(((-1.0)*r22*x7808))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*x7804*x7807)));
evalcond[5]=((((-1.0)*x7801*x7807))+((x7800*x7802))+(((-1.0)*sj11*sj12))+(((-1.0)*r12*x7808))+((cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x7809=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x7809.valid){
continue;
}
CheckValue<IkReal> x7810 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7810.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7809.value)))+(x7810.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7811=IKsin(j14);
IkReal x7812=IKcos(j14);
IkReal x7813=(r11*sj15);
IkReal x7814=(cj15*r10);
IkReal x7815=(cj15*r00);
IkReal x7816=(r21*sj15);
IkReal x7817=(r01*sj15);
IkReal x7818=(cj15*r20);
IkReal x7819=((1.0)*x7812);
IkReal x7820=((1.0)*x7811);
evalcond[0]=((((-1.0)*r22*x7819))+(((-1.0)*x7818*x7820))+((x7811*x7816)));
evalcond[1]=((((-1.0)*r12*x7819))+(((-1.0)*x7814*x7820))+((x7811*x7813)));
evalcond[2]=(((x7812*x7815))+(((-1.0)*r02*x7820))+(((-1.0)*x7817*x7819)));
evalcond[3]=((1.0)+(((-1.0)*r02*x7819))+(((-1.0)*x7815*x7820))+((x7811*x7817)));
evalcond[4]=(((x7812*x7818))+(((-1.0)*x7816*x7819))+(((-1.0)*r22*x7820))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((x7812*x7814))+((cj11*cj12))+(((-1.0)*r12*x7820))+(((-1.0)*x7813*x7819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x7821=((-1.0)*px);
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7821);
rxp1_1=(px*r21);
rxp1_2=(r11*x7821);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x7822=((-1.0)*px);
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7822);
rxp1_1=(px*r21);
rxp1_2=(r11*x7822);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=((((-1.0)*r21*sj15))+((cj15*r20)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x7823=((-1.0)*px);
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7823);
rxp1_1=(px*r21);
rxp1_2=(r11*x7823);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=(((cj15*r10))+(((-1.0)*r11*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x7826=IKPowWithIntegerCheck((((cj15*r10))+(((-1.0)*r11*sj15))),-1);
if(!x7826.valid){
continue;
}
IkReal x7824=x7826.value;
IkReal x7825=(sj10*x7824);
cj14array[0]=((((-1.0)*sj11*sj12*x7825))+((cj11*cj12*x7825)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x7827=IKsin(j14);
IkReal x7828=IKcos(j14);
IkReal x7829=(sj15*x7827);
IkReal x7830=((1.0)*x7828);
IkReal x7831=((1.0)*cj15*x7827);
evalcond[0]=((-1.0)*r02*x7827);
evalcond[1]=((((-1.0)*r02*x7830))+(((-1.0)*sj10)));
evalcond[2]=(((r21*x7829))+(((-1.0)*r20*x7831)));
evalcond[3]=(((r11*x7829))+(((-1.0)*r10*x7831)));
evalcond[4]=(((cj15*r20*x7828))+(((-1.0)*r21*sj15*x7830))+((cj12*sj11))+((cj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x7834=IKPowWithIntegerCheck(((((-1.0)*r21*sj15))+((cj15*r20))),-1);
if(!x7834.valid){
continue;
}
IkReal x7832=x7834.value;
IkReal x7833=((1.0)*x7832);
cj14array[0]=((((-1.0)*cj12*sj11*x7833))+(((-1.0)*cj11*sj12*x7833)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x7835=IKsin(j14);
IkReal x7836=IKcos(j14);
IkReal x7837=(cj15*r10);
IkReal x7838=((1.0)*sj10);
IkReal x7839=(sj15*x7835);
IkReal x7840=((1.0)*x7836);
IkReal x7841=((1.0)*x7835);
evalcond[0]=((-1.0)*r02*x7835);
evalcond[1]=((((-1.0)*r02*x7840))+(((-1.0)*x7838)));
evalcond[2]=(((r21*x7839))+(((-1.0)*cj15*r20*x7841)));
evalcond[3]=((((-1.0)*x7837*x7841))+((r11*x7839)));
evalcond[4]=((((-1.0)*cj11*cj12*x7838))+((x7836*x7837))+(((-1.0)*r11*sj15*x7840))+((sj10*sj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x7842=IKPowWithIntegerCheck(r02,-1);
if(!x7842.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x7842.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x7843=IKsin(j14);
IkReal x7844=IKcos(j14);
IkReal x7845=(cj15*r10);
IkReal x7846=(cj15*r20);
IkReal x7847=(sj15*x7843);
IkReal x7848=((1.0)*x7843);
IkReal x7849=((1.0)*sj15*x7844);
evalcond[0]=((-1.0)*r02*x7843);
evalcond[1]=(((r21*x7847))+(((-1.0)*x7846*x7848)));
evalcond[2]=((((-1.0)*x7845*x7848))+((r11*x7847)));
evalcond[3]=(((x7844*x7846))+(((-1.0)*r21*x7849))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj11*cj12*sj10))+((x7844*x7845))+(((-1.0)*r11*x7849))+((sj10*sj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7850=((1.0)*sj15);
CheckValue<IkReal> x7851 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((cj15*r10*sj10))+(((-1.0)*cj10*r01*x7850))+(((-1.0)*r11*sj10*x7850))+((cj10*cj15*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7851.valid){
continue;
}
CheckValue<IkReal> x7852=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj15*r21))+(((-1.0)*r20*x7850)))),-1);
if(!x7852.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7851.value)+(((1.5707963267949)*(x7852.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7853=IKsin(j14);
IkReal x7854=IKcos(j14);
IkReal x7855=(r11*sj15);
IkReal x7856=((1.0)*sj10);
IkReal x7857=(sj11*sj12);
IkReal x7858=(cj15*r10);
IkReal x7859=(r21*sj15);
IkReal x7860=(r01*sj15);
IkReal x7861=(cj11*cj12);
IkReal x7862=((1.0)*x7854);
IkReal x7863=((1.0)*x7853);
IkReal x7864=(cj15*x7854);
evalcond[0]=(((x7853*x7859))+(((-1.0)*cj15*r20*x7863))+(((-1.0)*r22*x7862)));
evalcond[1]=((((-1.0)*x7858*x7863))+cj10+(((-1.0)*r12*x7862))+((x7853*x7855)));
evalcond[2]=(((x7853*x7860))+(((-1.0)*cj15*r00*x7863))+(((-1.0)*r02*x7862))+(((-1.0)*x7856)));
evalcond[3]=((((-1.0)*x7859*x7862))+((r20*x7864))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*r22*x7863)));
evalcond[4]=((((-1.0)*cj10*x7861))+((r00*x7864))+(((-1.0)*r02*x7863))+((cj10*x7857))+(((-1.0)*x7860*x7862)));
evalcond[5]=((((-1.0)*x7855*x7862))+(((-1.0)*r12*x7863))+(((-1.0)*x7856*x7861))+((x7854*x7858))+((sj10*x7857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7865=((1.0)*cj15);
CheckValue<IkReal> x7866 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x7865))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7866.valid){
continue;
}
CheckValue<IkReal> x7867=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7865))+(((-1.0)*r10*sj15)))),-1);
if(!x7867.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7866.value)+(((1.5707963267949)*(x7867.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7868=IKsin(j14);
IkReal x7869=IKcos(j14);
IkReal x7870=(r11*sj15);
IkReal x7871=((1.0)*sj10);
IkReal x7872=(sj11*sj12);
IkReal x7873=(cj15*r10);
IkReal x7874=(r21*sj15);
IkReal x7875=(r01*sj15);
IkReal x7876=(cj11*cj12);
IkReal x7877=((1.0)*x7869);
IkReal x7878=((1.0)*x7868);
IkReal x7879=(cj15*x7869);
evalcond[0]=((((-1.0)*r22*x7877))+((x7868*x7874))+(((-1.0)*cj15*r20*x7878)));
evalcond[1]=((((-1.0)*x7873*x7878))+(((-1.0)*r12*x7877))+cj10+((x7868*x7870)));
evalcond[2]=((((-1.0)*cj15*r00*x7878))+(((-1.0)*x7871))+(((-1.0)*r02*x7877))+((x7868*x7875)));
evalcond[3]=((((-1.0)*r22*x7878))+(((-1.0)*x7874*x7877))+((r20*x7879))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*x7875*x7877))+(((-1.0)*cj10*x7876))+((cj10*x7872))+((r00*x7879))+(((-1.0)*r02*x7878)));
evalcond[5]=((((-1.0)*x7870*x7877))+(((-1.0)*x7871*x7876))+(((-1.0)*r12*x7878))+((x7869*x7873))+((sj10*x7872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7880=((1.0)*cj15);
CheckValue<IkReal> x7881 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x7880))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7881.valid){
continue;
}
CheckValue<IkReal> x7882=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7880))+(((-1.0)*r00*sj15)))),-1);
if(!x7882.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7881.value)+(((1.5707963267949)*(x7882.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7883=IKsin(j14);
IkReal x7884=IKcos(j14);
IkReal x7885=(r11*sj15);
IkReal x7886=((1.0)*sj10);
IkReal x7887=(sj11*sj12);
IkReal x7888=(cj15*r10);
IkReal x7889=(r21*sj15);
IkReal x7890=(r01*sj15);
IkReal x7891=(cj11*cj12);
IkReal x7892=((1.0)*x7884);
IkReal x7893=((1.0)*x7883);
IkReal x7894=(cj15*x7884);
evalcond[0]=((((-1.0)*cj15*r20*x7893))+((x7883*x7889))+(((-1.0)*r22*x7892)));
evalcond[1]=((((-1.0)*x7888*x7893))+(((-1.0)*r12*x7892))+cj10+((x7883*x7885)));
evalcond[2]=(((x7883*x7890))+(((-1.0)*x7886))+(((-1.0)*cj15*r00*x7893))+(((-1.0)*r02*x7892)));
evalcond[3]=((((-1.0)*x7889*x7892))+((cj12*sj11))+(((-1.0)*r22*x7893))+((cj11*sj12))+((r20*x7894)));
evalcond[4]=(((cj10*x7887))+(((-1.0)*cj10*x7891))+(((-1.0)*x7890*x7892))+((r00*x7894))+(((-1.0)*r02*x7893)));
evalcond[5]=(((x7884*x7888))+(((-1.0)*x7885*x7892))+(((-1.0)*x7886*x7891))+(((-1.0)*r12*x7893))+((sj10*x7887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7895=cj15*cj15;
IkReal x7896=r21*r21;
IkReal x7897=(cj12*sj11);
IkReal x7898=(r21*sj15);
IkReal x7899=(cj11*sj12);
IkReal x7900=((1.0)*cj15*r20);
CheckValue<IkReal> x7901 = IKatan2WithCheck(IkReal((((r22*x7899))+((r22*x7897)))),IkReal(((((-1.0)*x7899*x7900))+(((-1.0)*x7897*x7900))+((x7897*x7898))+((x7898*x7899)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7901.valid){
continue;
}
CheckValue<IkReal> x7902=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7895*x7896))+(r22*r22)+(((-2.0)*cj15*r20*x7898))+x7896+((x7895*(r20*r20))))),-1);
if(!x7902.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7901.value)+(((1.5707963267949)*(x7902.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
IkReal x7903=IKsin(j14);
IkReal x7904=IKcos(j14);
IkReal x7905=(r21*sj15);
IkReal x7906=((1.0)*r22);
IkReal x7907=(cj15*r20);
evalcond[0]=(((x7903*x7905))+(((-1.0)*x7904*x7906))+(((-1.0)*x7903*x7907)));
evalcond[1]=((((-1.0)*x7904*x7905))+((cj12*sj11))+(((-1.0)*x7903*x7906))+((cj11*sj12))+((x7904*x7907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x7908=(cj15*sj14);
IkReal x7909=(sj14*sj15);
if( IKabs(((((-1.0)*r00*x7908))+((r01*x7909))+(((-1.0)*cj14*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj14*r12))+((r10*x7908))+(((-1.0)*r11*x7909)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x7908))+((r01*x7909))+(((-1.0)*cj14*r02))))+IKsqr((((cj14*r12))+((r10*x7908))+(((-1.0)*r11*x7909))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r00*x7908))+((r01*x7909))+(((-1.0)*cj14*r02))), (((cj14*r12))+((r10*x7908))+(((-1.0)*r11*x7909))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x7910=IKcos(j10);
IkReal x7911=IKsin(j10);
IkReal x7912=(sj11*sj12);
IkReal x7913=((1.0)*cj14);
IkReal x7914=(r01*sj15);
IkReal x7915=((1.0)*cj15);
IkReal x7916=(cj14*cj15);
IkReal x7917=(r11*sj15);
IkReal x7918=(cj11*cj12);
IkReal x7919=((1.0)*sj12);
IkReal x7920=(cj12*sj11);
IkReal x7921=((0.08535)*sj15);
IkReal x7922=((1.0)*sj14);
IkReal x7923=((1.0)*sj15);
IkReal x7924=((0.08535)*cj15);
IkReal x7925=(cj11*x7911);
IkReal x7926=((0.21325)*x7910);
IkReal x7927=((1.0)*x7910);
IkReal x7928=(cj11*x7910);
IkReal x7929=((1.0)*x7911);
evalcond[0]=(((sj14*x7917))+x7910+(((-1.0)*r12*x7913))+(((-1.0)*r10*sj14*x7915)));
evalcond[1]=((((-1.0)*x7929))+((sj14*x7914))+(((-1.0)*r02*x7913))+(((-1.0)*r00*sj14*x7915)));
evalcond[2]=((((-1.0)*x7920*x7927))+(((-1.0)*x7919*x7928))+(((-1.0)*r01*x7915))+(((-1.0)*r00*x7923)));
evalcond[3]=((((-1.0)*x7920*x7929))+(((-1.0)*r10*x7923))+(((-1.0)*r11*x7915))+(((-1.0)*x7919*x7925)));
evalcond[4]=((((-1.0)*r02*x7922))+(((-1.0)*x7913*x7914))+((r00*x7916))+((x7910*x7912))+(((-1.0)*x7918*x7927)));
evalcond[5]=(((x7911*x7912))+(((-1.0)*x7913*x7917))+((r10*x7916))+(((-1.0)*r12*x7922))+(((-1.0)*x7918*x7929)));
evalcond[6]=((((-1.0)*x7912*x7926))+(((-1.0)*px))+(((0.24365)*x7928))+((x7918*x7926))+(((-1.0)*r01*x7924))+(((-0.11235)*x7911))+(((-1.0)*r00*x7921)));
evalcond[7]=((((0.11235)*x7910))+(((0.21325)*x7911*x7918))+(((-1.0)*r10*x7921))+(((-1.0)*r11*x7924))+(((-1.0)*py))+(((0.24365)*x7925))+(((-0.21325)*x7911*x7912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
CheckValue<IkReal> x7930=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*sj11)))),-1);
if(!x7930.valid){
continue;
}
CheckValue<IkReal> x7931 = IKatan2WithCheck(IkReal((((cj15*r11))+((r10*sj15)))),IkReal((((cj15*r01))+((r00*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7931.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7930.value)))+(x7931.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[4];
IkReal x7932=IKcos(j10);
IkReal x7933=IKsin(j10);
IkReal x7934=(sj11*sj12);
IkReal x7935=((1.0)*cj15);
IkReal x7936=((1.0)*sj12);
IkReal x7937=((0.08535)*sj15);
IkReal x7938=((1.0)*sj15);
IkReal x7939=((0.08535)*cj15);
IkReal x7940=(cj11*x7933);
IkReal x7941=((0.21325)*x7932);
IkReal x7942=((1.0)*cj12*sj11);
IkReal x7943=(cj11*x7932);
evalcond[0]=((((-1.0)*r00*x7938))+(((-1.0)*r01*x7935))+(((-1.0)*x7936*x7943))+(((-1.0)*x7932*x7942)));
evalcond[1]=((((-1.0)*x7936*x7940))+(((-1.0)*r11*x7935))+(((-1.0)*r10*x7938))+(((-1.0)*x7933*x7942)));
evalcond[2]=((((-1.0)*r00*x7937))+(((-1.0)*x7934*x7941))+(((-1.0)*r01*x7939))+(((-1.0)*px))+((cj11*cj12*x7941))+(((-0.11235)*x7933))+(((0.24365)*x7943)));
evalcond[3]=((((-1.0)*r11*x7939))+(((-1.0)*py))+(((-1.0)*r10*x7937))+(((-0.21325)*x7933*x7934))+(((0.24365)*x7940))+(((0.11235)*x7932))+(((0.21325)*cj12*x7940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x7944=((1.0)*cj15);
IkReal x7945=((((-1.0)*r01*x7944))+(((-1.0)*r00*sj15)));
j14eval[0]=x7945;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x7944))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x7945);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x7946=((1.0)*cj15);
IkReal x7947=((((-1.0)*r11*x7946))+(((-1.0)*r10*sj15)));
j14eval[0]=x7947;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x7946))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x7947);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal x7948=((1.0)*sj15);
IkReal x7949=((((-1.0)*cj15*r21))+(((-1.0)*r20*x7948)));
j14eval[0]=x7949;
j14eval[1]=((IKabs(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))))+(IKabs((((cj15*r10*sj10))+(((-1.0)*r11*sj10*x7948))+(((-1.0)*cj10*r01*x7948))+((cj10*cj15*r00))))));
j14eval[2]=IKsign(x7949);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7950=((-1.0)*r20);
IkReal x7952 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7952)==0){
continue;
}
IkReal x7951=pow(x7952,-0.5);
CheckValue<IkReal> x7953 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7950),IKFAST_ATAN2_MAGTHRESH);
if(!x7953.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7953.value));
IkReal gconst133=(r21*x7951);
IkReal gconst134=(x7950*x7951);
CheckValue<IkReal> x7954 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7954.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x7954.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x7955=((-1.0)*r20);
IkReal x7956=x7951;
CheckValue<IkReal> x7958 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7955),IKFAST_ATAN2_MAGTHRESH);
if(!x7958.valid){
continue;
}
IkReal x7957=((-1.0)*(x7958.value));
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst133;
cj15=gconst134;
j15=x7957;
IkReal gconst132=x7957;
IkReal gconst133=(r21*x7956);
IkReal gconst134=(x7955*x7956);
j14eval[0]=cj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x7959=((-1.0)*r20);
IkReal x7960=x7951;
CheckValue<IkReal> x7962 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7959),IKFAST_ATAN2_MAGTHRESH);
if(!x7962.valid){
continue;
}
IkReal x7961=((-1.0)*(x7962.value));
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst133;
cj15=gconst134;
j15=x7961;
IkReal gconst132=x7961;
IkReal gconst133=(r21*x7960);
IkReal gconst134=(x7959*x7960);
j14eval[0]=sj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x7963=((-1.0)*r20);
IkReal x7964=x7951;
CheckValue<IkReal> x7966 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7963),IKFAST_ATAN2_MAGTHRESH);
if(!x7966.valid){
continue;
}
IkReal x7965=((-1.0)*(x7966.value));
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst133;
cj15=gconst134;
j15=x7965;
IkReal gconst132=x7965;
IkReal gconst133=(r21*x7964);
IkReal gconst134=(x7963*x7964);
IkReal x7967=r22*r22;
CheckValue<IkReal> x7970=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7967))),-1);
if(!x7970.valid){
continue;
}
IkReal x7968=x7970.value;
IkReal x7969=(x7967+((x7968*(r20*r20*r20*r20)))+(((2.0)*x7968*(r20*r20)*(r21*r21)))+((x7968*(r21*r21*r21*r21))));
j14eval[0]=x7969;
j14eval[1]=IKsign(x7969);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7971=(gconst134*r20);
IkReal x7972=(cj12*sj11);
IkReal x7973=(gconst133*r21);
IkReal x7974=(cj11*sj12);
CheckValue<IkReal> x7975 = IKatan2WithCheck(IkReal((((r22*x7974))+((r22*x7972)))),IkReal((((x7973*x7974))+((x7972*x7973))+(((-1.0)*x7971*x7972))+(((-1.0)*x7971*x7974)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7975.valid){
continue;
}
CheckValue<IkReal> x7976=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7973*x7973)+(((-2.0)*x7971*x7973))+(x7971*x7971))),-1);
if(!x7976.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7975.value)+(((1.5707963267949)*(x7976.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7977=IKsin(j14);
IkReal x7978=IKcos(j14);
IkReal x7979=((1.0)*sj10);
IkReal x7980=(gconst134*r20);
IkReal x7981=(gconst134*r10);
IkReal x7982=(gconst134*r00);
IkReal x7983=(sj11*sj12);
IkReal x7984=(cj11*cj12);
IkReal x7985=((1.0)*x7978);
IkReal x7986=((1.0)*x7977);
IkReal x7987=(gconst133*x7977);
evalcond[0]=((((-1.0)*r22*x7985))+(((-1.0)*x7980*x7986))+((r21*x7987)));
evalcond[1]=((((-1.0)*r12*x7985))+(((-1.0)*x7981*x7986))+cj10+((r11*x7987)));
evalcond[2]=((((-1.0)*x7979))+((r01*x7987))+(((-1.0)*x7982*x7986))+(((-1.0)*r02*x7985)));
evalcond[3]=((((-1.0)*r22*x7986))+(((-1.0)*gconst133*r21*x7985))+((cj12*sj11))+((x7978*x7980))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj10*x7984))+((cj10*x7983))+(((-1.0)*r02*x7986))+((x7978*x7982))+(((-1.0)*gconst133*r01*x7985)));
evalcond[5]=((((-1.0)*r12*x7986))+(((-1.0)*x7979*x7984))+(((-1.0)*gconst133*r11*x7985))+((x7978*x7981))+((sj10*x7983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x7988=((1.0)*gconst134);
CheckValue<IkReal> x7989 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x7988))+((gconst133*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7989.valid){
continue;
}
CheckValue<IkReal> x7990=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7988)))),-1);
if(!x7990.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x7989.value)+(((1.5707963267949)*(x7990.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x7991=IKsin(j14);
IkReal x7992=IKcos(j14);
IkReal x7993=((1.0)*sj10);
IkReal x7994=(gconst134*r20);
IkReal x7995=(gconst134*r10);
IkReal x7996=(gconst134*r00);
IkReal x7997=(sj11*sj12);
IkReal x7998=(cj11*cj12);
IkReal x7999=((1.0)*x7992);
IkReal x8000=((1.0)*x7991);
IkReal x8001=(gconst133*x7991);
evalcond[0]=(((r21*x8001))+(((-1.0)*r22*x7999))+(((-1.0)*x7994*x8000)));
evalcond[1]=((((-1.0)*x7995*x8000))+(((-1.0)*r12*x7999))+((r11*x8001))+cj10);
evalcond[2]=(((r01*x8001))+(((-1.0)*x7996*x8000))+(((-1.0)*x7993))+(((-1.0)*r02*x7999)));
evalcond[3]=((((-1.0)*gconst133*r21*x7999))+((cj12*sj11))+(((-1.0)*r22*x8000))+((x7992*x7994))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj10*x7998))+((cj10*x7997))+((x7992*x7996))+(((-1.0)*r02*x8000))+(((-1.0)*gconst133*r01*x7999)));
evalcond[5]=((((-1.0)*r12*x8000))+(((-1.0)*gconst133*r11*x7999))+(((-1.0)*x7993*x7998))+((x7992*x7995))+((sj10*x7997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8002=((1.0)*gconst134);
CheckValue<IkReal> x8003 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst133*r21))+(((-1.0)*cj10*r20*x8002)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8003.valid){
continue;
}
CheckValue<IkReal> x8004=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x8002)))),-1);
if(!x8004.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8003.value)+(((1.5707963267949)*(x8004.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8005=IKsin(j14);
IkReal x8006=IKcos(j14);
IkReal x8007=((1.0)*sj10);
IkReal x8008=(gconst134*r20);
IkReal x8009=(gconst134*r10);
IkReal x8010=(gconst134*r00);
IkReal x8011=(sj11*sj12);
IkReal x8012=(cj11*cj12);
IkReal x8013=((1.0)*x8006);
IkReal x8014=((1.0)*x8005);
IkReal x8015=(gconst133*x8005);
evalcond[0]=((((-1.0)*r22*x8013))+(((-1.0)*x8008*x8014))+((r21*x8015)));
evalcond[1]=((((-1.0)*x8009*x8014))+cj10+((r11*x8015))+(((-1.0)*r12*x8013)));
evalcond[2]=((((-1.0)*r02*x8013))+(((-1.0)*x8010*x8014))+((r01*x8015))+(((-1.0)*x8007)));
evalcond[3]=((((-1.0)*r22*x8014))+((cj12*sj11))+(((-1.0)*gconst133*r21*x8013))+((cj11*sj12))+((x8006*x8008)));
evalcond[4]=((((-1.0)*r02*x8014))+((cj10*x8011))+(((-1.0)*gconst133*r01*x8013))+((x8006*x8010))+(((-1.0)*cj10*x8012)));
evalcond[5]=(((sj10*x8011))+(((-1.0)*r12*x8014))+((x8006*x8009))+(((-1.0)*x8007*x8012))+(((-1.0)*gconst133*r11*x8013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8016=((-1.0)*r21);
IkReal x8018 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8018)==0){
continue;
}
IkReal x8017=pow(x8018,-0.5);
CheckValue<IkReal> x8019 = IKatan2WithCheck(IkReal(x8016),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8019.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8019.value))));
IkReal gconst136=(x8016*x8017);
IkReal gconst137=((1.0)*r20*x8017);
CheckValue<IkReal> x8020 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8020.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x8020.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x8021=((-1.0)*r21);
CheckValue<IkReal> x8024 = IKatan2WithCheck(IkReal(x8021),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8024.valid){
continue;
}
IkReal x8022=((1.0)*(x8024.value));
IkReal x8023=x8017;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst136;
cj15=gconst137;
j15=((3.14159265)+(((-1.0)*x8022)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8022)));
IkReal gconst136=(x8021*x8023);
IkReal gconst137=((1.0)*r20*x8023);
IkReal x8025=r22*r22;
IkReal x8026=((1.0)*x8025);
CheckValue<IkReal> x8030=IKPowWithIntegerCheck(((-1.0)+x8025),-1);
if(!x8030.valid){
continue;
}
IkReal x8027=x8030.value;
if((((1.0)+(((-1.0)*x8026)))) < -0.00001)
continue;
IkReal x8028=IKsqrt(((1.0)+(((-1.0)*x8026))));
IkReal x8029=(cj10*x8027*x8028);
j14eval[0]=((IKabs(((((-1.0)*x8026*x8029))+x8029)))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8031=((-1.0)*r21);
CheckValue<IkReal> x8034 = IKatan2WithCheck(IkReal(x8031),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8034.valid){
continue;
}
IkReal x8032=((1.0)*(x8034.value));
IkReal x8033=x8017;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst136;
cj15=gconst137;
j15=((3.14159265)+(((-1.0)*x8032)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8032)));
IkReal gconst136=(x8031*x8033);
IkReal gconst137=((1.0)*r20*x8033);
IkReal x8035=r22*r22;
IkReal x8036=((1.0)*x8035);
CheckValue<IkReal> x8040=IKPowWithIntegerCheck(((-1.0)+x8035),-1);
if(!x8040.valid){
continue;
}
IkReal x8037=x8040.value;
if((((1.0)+(((-1.0)*x8036)))) < -0.00001)
continue;
IkReal x8038=IKsqrt(((1.0)+(((-1.0)*x8036))));
IkReal x8039=(sj10*x8037*x8038);
j14eval[0]=((IKabs(((((-1.0)*x8036*x8039))+x8039)))+(IKabs((r22*sj10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x8041=((-1.0)*r21);
CheckValue<IkReal> x8044 = IKatan2WithCheck(IkReal(x8041),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8044.valid){
continue;
}
IkReal x8042=((1.0)*(x8044.value));
IkReal x8043=x8017;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst136;
cj15=gconst137;
j15=((3.14159265)+(((-1.0)*x8042)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8042)));
IkReal gconst136=(x8041*x8043);
IkReal gconst137=((1.0)*r20*x8043);
IkReal x8045=r22*r22;
IkReal x8046=(cj10*r02);
IkReal x8047=(r12*sj10);
CheckValue<IkReal> x8051=IKPowWithIntegerCheck(((-1.0)+x8045),-1);
if(!x8051.valid){
continue;
}
IkReal x8048=x8051.value;
if((((1.0)+(((-1.0)*x8045)))) < -0.00001)
continue;
IkReal x8049=IKsqrt(((1.0)+(((-1.0)*x8045))));
IkReal x8050=(r22*x8048*x8049);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=((IKabs((((x8047*x8050))+((x8046*x8050)))))+(IKabs(((((-1.0)*x8047))+(((-1.0)*x8046))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8052=((1.0)*gconst136);
CheckValue<IkReal> x8053 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x8052))+(((-1.0)*cj10*r01*x8052))+((gconst137*r10*sj10))+((cj10*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8053.valid){
continue;
}
CheckValue<IkReal> x8054=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst137*r21))+(((-1.0)*r20*x8052)))),-1);
if(!x8054.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8053.value)+(((1.5707963267949)*(x8054.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8055=IKsin(j14);
IkReal x8056=IKcos(j14);
IkReal x8057=(gconst136*r01);
IkReal x8058=(gconst136*r11);
IkReal x8059=(gconst136*r21);
IkReal x8060=(sj11*sj12);
IkReal x8061=((1.0)*x8056);
IkReal x8062=(gconst137*x8056);
IkReal x8063=((1.0)*x8055);
IkReal x8064=((1.0)*cj11*cj12);
evalcond[0]=((((-1.0)*gconst137*r20*x8063))+(((-1.0)*r22*x8061))+((x8055*x8059)));
evalcond[1]=((((-1.0)*r12*x8061))+cj10+(((-1.0)*gconst137*r10*x8063))+((x8055*x8058)));
evalcond[2]=((((-1.0)*sj10))+(((-1.0)*gconst137*r00*x8063))+((x8055*x8057))+(((-1.0)*r02*x8061)));
evalcond[3]=(((r20*x8062))+((cj12*sj11))+(((-1.0)*r22*x8063))+(((-1.0)*x8059*x8061))+((cj11*sj12)));
evalcond[4]=(((cj10*x8060))+(((-1.0)*x8057*x8061))+((r00*x8062))+(((-1.0)*cj10*x8064))+(((-1.0)*r02*x8063)));
evalcond[5]=(((sj10*x8060))+((r10*x8062))+(((-1.0)*r12*x8063))+(((-1.0)*x8058*x8061))+(((-1.0)*sj10*x8064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8065=((1.0)*gconst137);
CheckValue<IkReal> x8066 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x8065))+((gconst136*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8066.valid){
continue;
}
CheckValue<IkReal> x8067=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8065))+(((-1.0)*gconst136*r10)))),-1);
if(!x8067.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8066.value)+(((1.5707963267949)*(x8067.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8068=IKsin(j14);
IkReal x8069=IKcos(j14);
IkReal x8070=(gconst136*r01);
IkReal x8071=(gconst136*r11);
IkReal x8072=(gconst136*r21);
IkReal x8073=(sj11*sj12);
IkReal x8074=((1.0)*x8069);
IkReal x8075=(gconst137*x8069);
IkReal x8076=((1.0)*x8068);
IkReal x8077=((1.0)*cj11*cj12);
evalcond[0]=(((x8068*x8072))+(((-1.0)*gconst137*r20*x8076))+(((-1.0)*r22*x8074)));
evalcond[1]=(((x8068*x8071))+(((-1.0)*gconst137*r10*x8076))+cj10+(((-1.0)*r12*x8074)));
evalcond[2]=(((x8068*x8070))+(((-1.0)*r02*x8074))+(((-1.0)*gconst137*r00*x8076))+(((-1.0)*sj10)));
evalcond[3]=((((-1.0)*x8072*x8074))+((r20*x8075))+((cj12*sj11))+(((-1.0)*r22*x8076))+((cj11*sj12)));
evalcond[4]=((((-1.0)*r02*x8076))+((cj10*x8073))+(((-1.0)*cj10*x8077))+((r00*x8075))+(((-1.0)*x8070*x8074)));
evalcond[5]=((((-1.0)*sj10*x8077))+((r10*x8075))+((sj10*x8073))+(((-1.0)*x8071*x8074))+(((-1.0)*r12*x8076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8078=((1.0)*gconst137);
CheckValue<IkReal> x8079=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8078))+(((-1.0)*gconst136*r00)))),-1);
if(!x8079.valid){
continue;
}
CheckValue<IkReal> x8080 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst136*r21))+(((-1.0)*cj10*r20*x8078)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8080.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8079.value)))+(x8080.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8081=IKsin(j14);
IkReal x8082=IKcos(j14);
IkReal x8083=(gconst136*r01);
IkReal x8084=(gconst136*r11);
IkReal x8085=(gconst136*r21);
IkReal x8086=(sj11*sj12);
IkReal x8087=((1.0)*x8082);
IkReal x8088=(gconst137*x8082);
IkReal x8089=((1.0)*x8081);
IkReal x8090=((1.0)*cj11*cj12);
evalcond[0]=((((-1.0)*gconst137*r20*x8089))+((x8081*x8085))+(((-1.0)*r22*x8087)));
evalcond[1]=((((-1.0)*gconst137*r10*x8089))+cj10+((x8081*x8084))+(((-1.0)*r12*x8087)));
evalcond[2]=((((-1.0)*r02*x8087))+(((-1.0)*gconst137*r00*x8089))+((x8081*x8083))+(((-1.0)*sj10)));
evalcond[3]=((((-1.0)*r22*x8089))+((cj12*sj11))+(((-1.0)*x8085*x8087))+((cj11*sj12))+((r20*x8088)));
evalcond[4]=((((-1.0)*r02*x8089))+(((-1.0)*cj10*x8090))+((cj10*x8086))+((r00*x8088))+(((-1.0)*x8083*x8087)));
evalcond[5]=(((r10*x8088))+(((-1.0)*sj10*x8090))+((sj10*x8086))+(((-1.0)*r12*x8089))+(((-1.0)*x8084*x8087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8091=((-1.0)*r10);
IkReal x8093 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8093)==0){
continue;
}
IkReal x8092=pow(x8093,-0.5);
CheckValue<IkReal> x8094 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8091),IKFAST_ATAN2_MAGTHRESH);
if(!x8094.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8094.value));
IkReal gconst139=(r11*x8092);
IkReal gconst140=(x8091*x8092);
CheckValue<IkReal> x8095 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8095.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x8095.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x8096=((-1.0)*r10);
IkReal x8097=x8092;
CheckValue<IkReal> x8099 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8096),IKFAST_ATAN2_MAGTHRESH);
if(!x8099.valid){
continue;
}
IkReal x8098=((-1.0)*(x8099.value));
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst139;
cj15=gconst140;
j15=x8098;
IkReal gconst138=x8098;
IkReal gconst139=(r11*x8097);
IkReal gconst140=(x8096*x8097);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8100=((1.0)*gconst139);
CheckValue<IkReal> x8101 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((gconst140*r10*sj10))+(((-1.0)*r11*sj10*x8100))+(((-1.0)*cj10*r01*x8100))+((cj10*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8101.valid){
continue;
}
CheckValue<IkReal> x8102=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x8100)))),-1);
if(!x8102.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8101.value)+(((1.5707963267949)*(x8102.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8103=IKsin(j14);
IkReal x8104=IKcos(j14);
IkReal x8105=(gconst139*r21);
IkReal x8106=((1.0)*sj10);
IkReal x8107=(gconst140*r20);
IkReal x8108=(gconst140*r10);
IkReal x8109=(sj11*sj12);
IkReal x8110=(gconst139*r01);
IkReal x8111=(gconst140*r00);
IkReal x8112=(cj11*cj12);
IkReal x8113=(gconst139*r11);
IkReal x8114=((1.0)*x8104);
IkReal x8115=((1.0)*x8103);
evalcond[0]=((((-1.0)*r22*x8114))+((x8103*x8105))+(((-1.0)*x8107*x8115)));
evalcond[1]=((((-1.0)*r12*x8114))+(((-1.0)*x8108*x8115))+cj10+((x8103*x8113)));
evalcond[2]=((((-1.0)*x8106))+(((-1.0)*x8111*x8115))+(((-1.0)*r02*x8114))+((x8103*x8110)));
evalcond[3]=((((-1.0)*x8105*x8114))+((x8104*x8107))+(((-1.0)*r22*x8115))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((cj10*x8109))+(((-1.0)*cj10*x8112))+(((-1.0)*x8110*x8114))+(((-1.0)*r02*x8115))+((x8104*x8111)));
evalcond[5]=((((-1.0)*x8113*x8114))+(((-1.0)*r12*x8115))+((x8104*x8108))+(((-1.0)*x8106*x8112))+((sj10*x8109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8116=((1.0)*gconst140);
CheckValue<IkReal> x8117=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x8116)))),-1);
if(!x8117.valid){
continue;
}
CheckValue<IkReal> x8118 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x8116))+((cj10*gconst139*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8118.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8117.value)))+(x8118.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8119=IKsin(j14);
IkReal x8120=IKcos(j14);
IkReal x8121=(gconst139*r21);
IkReal x8122=((1.0)*sj10);
IkReal x8123=(gconst140*r20);
IkReal x8124=(gconst140*r10);
IkReal x8125=(sj11*sj12);
IkReal x8126=(gconst139*r01);
IkReal x8127=(gconst140*r00);
IkReal x8128=(cj11*cj12);
IkReal x8129=(gconst139*r11);
IkReal x8130=((1.0)*x8120);
IkReal x8131=((1.0)*x8119);
evalcond[0]=((((-1.0)*x8123*x8131))+(((-1.0)*r22*x8130))+((x8119*x8121)));
evalcond[1]=((((-1.0)*x8124*x8131))+(((-1.0)*r12*x8130))+cj10+((x8119*x8129)));
evalcond[2]=((((-1.0)*r02*x8130))+(((-1.0)*x8122))+(((-1.0)*x8127*x8131))+((x8119*x8126)));
evalcond[3]=(((x8120*x8123))+(((-1.0)*r22*x8131))+(((-1.0)*x8121*x8130))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*r02*x8131))+(((-1.0)*cj10*x8128))+((x8120*x8127))+(((-1.0)*x8126*x8130))+((cj10*x8125)));
evalcond[5]=((((-1.0)*x8122*x8128))+((x8120*x8124))+(((-1.0)*r12*x8131))+(((-1.0)*x8129*x8130))+((sj10*x8125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8132=((-1.0)*r11);
IkReal x8134 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8134)==0){
continue;
}
IkReal x8133=pow(x8134,-0.5);
CheckValue<IkReal> x8135 = IKatan2WithCheck(IkReal(x8132),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8135.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8135.value))));
IkReal gconst142=(x8132*x8133);
IkReal gconst143=((1.0)*r10*x8133);
CheckValue<IkReal> x8136 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8136.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x8136.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x8137=((-1.0)*r11);
CheckValue<IkReal> x8140 = IKatan2WithCheck(IkReal(x8137),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8140.valid){
continue;
}
IkReal x8138=((1.0)*(x8140.value));
IkReal x8139=x8133;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst142;
cj15=gconst143;
j15=((3.14159265)+(((-1.0)*x8138)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8138)));
IkReal gconst142=(x8137*x8139);
IkReal gconst143=((1.0)*r10*x8139);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8141=((-1.0)*r11);
CheckValue<IkReal> x8144 = IKatan2WithCheck(IkReal(x8141),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8144.valid){
continue;
}
IkReal x8142=((1.0)*(x8144.value));
IkReal x8143=x8133;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst142;
cj15=gconst143;
j15=((3.14159265)+(((-1.0)*x8142)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8142)));
IkReal gconst142=(x8141*x8143);
IkReal gconst143=((1.0)*r10*x8143);
IkReal x8145=r12*r12;
IkReal x8146=(cj10*r02);
IkReal x8147=x8133;
IkReal x8148=(sj10*x8147);
j14eval[0]=((IKabs(((((-1.0)*r12*sj10))+(((-1.0)*x8146)))))+(IKabs((((x8145*x8148))+((r12*x8146*x8147))+(((-1.0)*x8148))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8149=((-1.0)*r11);
CheckValue<IkReal> x8152 = IKatan2WithCheck(IkReal(x8149),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8152.valid){
continue;
}
IkReal x8150=((1.0)*(x8152.value));
IkReal x8151=x8133;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst142;
cj15=gconst143;
j15=((3.14159265)+(((-1.0)*x8150)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8150)));
IkReal gconst142=(x8149*x8151);
IkReal gconst143=((1.0)*r10*x8151);
IkReal x8153=r12*r12;
IkReal x8154=(cj12*r22*sj11);
IkReal x8155=(cj11*r22*sj12);
CheckValue<IkReal> x8159=IKPowWithIntegerCheck(((-1.0)+x8153),-1);
if(!x8159.valid){
continue;
}
IkReal x8156=x8159.value;
if((((1.0)+(((-1.0)*x8153)))) < -0.00001)
continue;
IkReal x8157=IKsqrt(((1.0)+(((-1.0)*x8153))));
IkReal x8158=((1.0)*r12*x8156*x8157);
j14eval[0]=((IKabs((x8154+x8155)))+(IKabs(((((-1.0)*x8155*x8158))+(((-1.0)*x8154*x8158))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8160=(cj11*sj12);
IkReal x8161=(gconst143*r20);
IkReal x8162=(gconst142*r21);
IkReal x8163=(cj12*sj11);
CheckValue<IkReal> x8164 = IKatan2WithCheck(IkReal((((r22*x8163))+((r22*x8160)))),IkReal(((((-1.0)*x8160*x8161))+((x8160*x8162))+((x8162*x8163))+(((-1.0)*x8161*x8163)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8164.valid){
continue;
}
CheckValue<IkReal> x8165=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x8161*x8162))+(x8161*x8161)+(x8162*x8162))),-1);
if(!x8165.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8164.value)+(((1.5707963267949)*(x8165.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8166=IKsin(j14);
IkReal x8167=IKcos(j14);
IkReal x8168=((1.0)*sj10);
IkReal x8169=(gconst142*r21);
IkReal x8170=(gconst142*r01);
IkReal x8171=(sj11*sj12);
IkReal x8172=(cj11*cj12);
IkReal x8173=(gconst142*r11);
IkReal x8174=((1.0)*x8167);
IkReal x8175=((1.0)*x8166);
IkReal x8176=(gconst143*x8167);
evalcond[0]=((((-1.0)*gconst143*r20*x8175))+(((-1.0)*r22*x8174))+((x8166*x8169)));
evalcond[1]=((((-1.0)*r12*x8174))+(((-1.0)*gconst143*r10*x8175))+((x8166*x8173))+cj10);
evalcond[2]=(((x8166*x8170))+(((-1.0)*x8168))+(((-1.0)*r02*x8174))+(((-1.0)*gconst143*r00*x8175)));
evalcond[3]=((((-1.0)*x8169*x8174))+((r20*x8176))+(((-1.0)*r22*x8175))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((cj10*x8171))+(((-1.0)*cj10*x8172))+(((-1.0)*x8170*x8174))+(((-1.0)*r02*x8175))+((r00*x8176)));
evalcond[5]=(((sj10*x8171))+(((-1.0)*r12*x8175))+(((-1.0)*x8168*x8172))+((r10*x8176))+(((-1.0)*x8173*x8174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8177=((1.0)*sj10);
IkReal x8178=((1.0)*gconst142);
CheckValue<IkReal> x8179=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8178))+(((-1.0)*gconst143*r21)))),-1);
if(!x8179.valid){
continue;
}
CheckValue<IkReal> x8180 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8177))+(((-1.0)*cj10*r02)))),IkReal((((cj10*gconst143*r00))+((gconst143*r10*sj10))+(((-1.0)*cj10*r01*x8178))+(((-1.0)*gconst142*r11*x8177)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8180.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8179.value)))+(x8180.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8181=IKsin(j14);
IkReal x8182=IKcos(j14);
IkReal x8183=((1.0)*sj10);
IkReal x8184=(gconst142*r21);
IkReal x8185=(gconst142*r01);
IkReal x8186=(sj11*sj12);
IkReal x8187=(cj11*cj12);
IkReal x8188=(gconst142*r11);
IkReal x8189=((1.0)*x8182);
IkReal x8190=((1.0)*x8181);
IkReal x8191=(gconst143*x8182);
evalcond[0]=((((-1.0)*r22*x8189))+(((-1.0)*gconst143*r20*x8190))+((x8181*x8184)));
evalcond[1]=(cj10+(((-1.0)*r12*x8189))+(((-1.0)*gconst143*r10*x8190))+((x8181*x8188)));
evalcond[2]=((((-1.0)*r02*x8189))+(((-1.0)*gconst143*r00*x8190))+(((-1.0)*x8183))+((x8181*x8185)));
evalcond[3]=(((r20*x8191))+(((-1.0)*r22*x8190))+((cj12*sj11))+(((-1.0)*x8184*x8189))+((cj11*sj12)));
evalcond[4]=((((-1.0)*r02*x8190))+((r00*x8191))+((cj10*x8186))+(((-1.0)*cj10*x8187))+(((-1.0)*x8185*x8189)));
evalcond[5]=(((r10*x8191))+(((-1.0)*x8188*x8189))+((sj10*x8186))+(((-1.0)*x8183*x8187))+(((-1.0)*r12*x8190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8192=((1.0)*gconst143);
CheckValue<IkReal> x8193 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst142*r21))+(((-1.0)*cj10*r20*x8192)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8193.valid){
continue;
}
CheckValue<IkReal> x8194=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8192))+(((-1.0)*gconst142*r00)))),-1);
if(!x8194.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8193.value)+(((1.5707963267949)*(x8194.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8195=IKsin(j14);
IkReal x8196=IKcos(j14);
IkReal x8197=((1.0)*sj10);
IkReal x8198=(gconst142*r21);
IkReal x8199=(gconst142*r01);
IkReal x8200=(sj11*sj12);
IkReal x8201=(cj11*cj12);
IkReal x8202=(gconst142*r11);
IkReal x8203=((1.0)*x8196);
IkReal x8204=((1.0)*x8195);
IkReal x8205=(gconst143*x8196);
evalcond[0]=((((-1.0)*gconst143*r20*x8204))+((x8195*x8198))+(((-1.0)*r22*x8203)));
evalcond[1]=((((-1.0)*gconst143*r10*x8204))+((x8195*x8202))+(((-1.0)*r12*x8203))+cj10);
evalcond[2]=(((x8195*x8199))+(((-1.0)*r02*x8203))+(((-1.0)*gconst143*r00*x8204))+(((-1.0)*x8197)));
evalcond[3]=((((-1.0)*x8198*x8203))+(((-1.0)*r22*x8204))+((cj12*sj11))+((cj11*sj12))+((r20*x8205)));
evalcond[4]=((((-1.0)*r02*x8204))+(((-1.0)*cj10*x8201))+((r00*x8205))+((cj10*x8200))+(((-1.0)*x8199*x8203)));
evalcond[5]=((((-1.0)*x8202*x8203))+((sj10*x8200))+(((-1.0)*r12*x8204))+((r10*x8205))+(((-1.0)*x8197*x8201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=1.0;
j10=0;
IkReal x8206=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x8206;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj15*r00))+((r01*sj15))))));
j14eval[2]=IKsign(x8206);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=1.0;
j10=0;
IkReal x8207=((1.0)*cj15);
IkReal x8208=((((-1.0)*r01*x8207))+(((-1.0)*r00*sj15)));
j14eval[0]=x8208;
j14eval[1]=((IKabs(r22))+(IKabs((((r21*sj15))+(((-1.0)*r20*x8207))))));
j14eval[2]=IKsign(x8208);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=1.0;
j10=0;
IkReal x8209=cj15*cj15;
IkReal x8210=r11*r11;
IkReal x8211=(r11*sj15);
IkReal x8212=(cj15*r10);
IkReal x8213=((((-2.0)*x8211*x8212))+(r12*r12)+((x8209*(r10*r10)))+(((-1.0)*x8209*x8210))+x8210);
j14eval[0]=x8213;
j14eval[1]=IKsign(x8213);
j14eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x8211))+x8212))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8214=cj15*cj15;
IkReal x8215=r11*r11;
IkReal x8216=(r11*sj15);
IkReal x8217=(cj15*r10);
CheckValue<IkReal> x8218=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x8214*(r10*r10)))+(((-2.0)*x8216*x8217))+(((-1.0)*x8214*x8215))+x8215)),-1);
if(!x8218.valid){
continue;
}
CheckValue<IkReal> x8219 = IKatan2WithCheck(IkReal(((((-1.0)*x8216))+x8217)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8219.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8218.value)))+(x8219.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8220=IKsin(j14);
IkReal x8221=IKcos(j14);
IkReal x8222=(r11*sj15);
IkReal x8223=(cj15*r10);
IkReal x8224=(cj15*r00);
IkReal x8225=(r21*sj15);
IkReal x8226=(r01*sj15);
IkReal x8227=(cj15*r20);
IkReal x8228=((1.0)*x8221);
IkReal x8229=((1.0)*x8220);
evalcond[0]=(((x8220*x8225))+(((-1.0)*r22*x8228))+(((-1.0)*x8227*x8229)));
evalcond[1]=((((-1.0)*r02*x8228))+(((-1.0)*x8224*x8229))+((x8220*x8226)));
evalcond[2]=((((-1.0)*r12*x8229))+((x8221*x8223))+(((-1.0)*x8222*x8228)));
evalcond[3]=((1.0)+(((-1.0)*x8223*x8229))+((x8220*x8222))+(((-1.0)*r12*x8228)));
evalcond[4]=(((x8221*x8227))+((cj12*sj11))+(((-1.0)*x8225*x8228))+(((-1.0)*r22*x8229))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r02*x8229))+((x8221*x8224))+(((-1.0)*x8226*x8228))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8230=((1.0)*cj15);
CheckValue<IkReal> x8231 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj15))+(((-1.0)*r20*x8230)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8231.valid){
continue;
}
CheckValue<IkReal> x8232=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x8230)))),-1);
if(!x8232.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8231.value)+(((1.5707963267949)*(x8232.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8233=IKsin(j14);
IkReal x8234=IKcos(j14);
IkReal x8235=(r11*sj15);
IkReal x8236=(cj15*r10);
IkReal x8237=(cj15*r00);
IkReal x8238=(r21*sj15);
IkReal x8239=(r01*sj15);
IkReal x8240=(cj15*r20);
IkReal x8241=((1.0)*x8234);
IkReal x8242=((1.0)*x8233);
evalcond[0]=((((-1.0)*x8240*x8242))+(((-1.0)*r22*x8241))+((x8233*x8238)));
evalcond[1]=((((-1.0)*x8237*x8242))+(((-1.0)*r02*x8241))+((x8233*x8239)));
evalcond[2]=(((x8234*x8236))+(((-1.0)*r12*x8242))+(((-1.0)*x8235*x8241)));
evalcond[3]=((1.0)+(((-1.0)*x8236*x8242))+(((-1.0)*r12*x8241))+((x8233*x8235)));
evalcond[4]=((((-1.0)*r22*x8242))+((x8234*x8240))+(((-1.0)*x8238*x8241))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x8239*x8241))+((x8234*x8237))+(((-1.0)*r02*x8242))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x8243 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj15*r00))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8243.valid){
continue;
}
CheckValue<IkReal> x8244=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x8244.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8243.value)+(((1.5707963267949)*(x8244.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8245=IKsin(j14);
IkReal x8246=IKcos(j14);
IkReal x8247=(r11*sj15);
IkReal x8248=(cj15*r10);
IkReal x8249=(cj15*r00);
IkReal x8250=(r21*sj15);
IkReal x8251=(r01*sj15);
IkReal x8252=(cj15*r20);
IkReal x8253=((1.0)*x8246);
IkReal x8254=((1.0)*x8245);
evalcond[0]=(((x8245*x8250))+(((-1.0)*r22*x8253))+(((-1.0)*x8252*x8254)));
evalcond[1]=((((-1.0)*x8249*x8254))+((x8245*x8251))+(((-1.0)*r02*x8253)));
evalcond[2]=(((x8246*x8248))+(((-1.0)*r12*x8254))+(((-1.0)*x8247*x8253)));
evalcond[3]=((1.0)+(((-1.0)*x8248*x8254))+(((-1.0)*r12*x8253))+((x8245*x8247)));
evalcond[4]=((((-1.0)*r22*x8254))+((cj12*sj11))+(((-1.0)*x8250*x8253))+((cj11*sj12))+((x8246*x8252)));
evalcond[5]=(((sj11*sj12))+((x8246*x8249))+(((-1.0)*x8251*x8253))+(((-1.0)*cj11*cj12))+(((-1.0)*r02*x8254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x8255=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x8255;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x8255);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x8256=((1.0)*cj15);
IkReal x8257=((((-1.0)*r21*x8256))+(((-1.0)*r20*sj15)));
j14eval[0]=x8257;
j14eval[1]=IKsign(x8257);
j14eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x8256))+((r01*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x8258=r11*r11;
IkReal x8259=cj15*cj15;
IkReal x8260=(cj15*r10);
IkReal x8261=(r11*sj15);
IkReal x8262=((((-1.0)*x8258))+((x8258*x8259))+(((-1.0)*(r12*r12)))+(((2.0)*x8260*x8261))+(((-1.0)*x8259*(r10*r10))));
j14eval[0]=x8262;
j14eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x8261))+x8260))));
j14eval[2]=IKsign(x8262);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8263=r11*r11;
IkReal x8264=cj15*cj15;
IkReal x8265=(cj15*r10);
IkReal x8266=(r11*sj15);
CheckValue<IkReal> x8267 = IKatan2WithCheck(IkReal(((((-1.0)*x8266))+x8265)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8267.valid){
continue;
}
CheckValue<IkReal> x8268=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8264*(r10*r10)))+((x8263*x8264))+(((-1.0)*(r12*r12)))+(((-1.0)*x8263))+(((2.0)*x8265*x8266)))),-1);
if(!x8268.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8267.value)+(((1.5707963267949)*(x8268.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8269=IKsin(j14);
IkReal x8270=IKcos(j14);
IkReal x8271=(r11*sj15);
IkReal x8272=(cj15*r10);
IkReal x8273=(cj15*r00);
IkReal x8274=(r21*sj15);
IkReal x8275=(r01*sj15);
IkReal x8276=(cj15*r20);
IkReal x8277=((1.0)*x8270);
IkReal x8278=((1.0)*x8269);
evalcond[0]=(((x8269*x8274))+(((-1.0)*r22*x8277))+(((-1.0)*x8276*x8278)));
evalcond[1]=((((-1.0)*x8273*x8278))+((x8269*x8275))+(((-1.0)*r02*x8277)));
evalcond[2]=((((-1.0)*x8271*x8277))+(((-1.0)*r12*x8278))+((x8270*x8272)));
evalcond[3]=((-1.0)+(((-1.0)*x8272*x8278))+((x8269*x8271))+(((-1.0)*r12*x8277)));
evalcond[4]=((((-1.0)*x8274*x8277))+(((-1.0)*r22*x8278))+((cj12*sj11))+((x8270*x8276))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+(((-1.0)*x8275*x8277))+((cj11*cj12))+(((-1.0)*r02*x8278))+((x8270*x8273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8279=((1.0)*cj15);
CheckValue<IkReal> x8280 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj15))+(((-1.0)*r00*x8279)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8280.valid){
continue;
}
CheckValue<IkReal> x8281=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8279))+(((-1.0)*r20*sj15)))),-1);
if(!x8281.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8280.value)+(((1.5707963267949)*(x8281.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8282=IKsin(j14);
IkReal x8283=IKcos(j14);
IkReal x8284=(r11*sj15);
IkReal x8285=(cj15*r10);
IkReal x8286=(cj15*r00);
IkReal x8287=(r21*sj15);
IkReal x8288=(r01*sj15);
IkReal x8289=(cj15*r20);
IkReal x8290=((1.0)*x8283);
IkReal x8291=((1.0)*x8282);
evalcond[0]=(((x8282*x8287))+(((-1.0)*r22*x8290))+(((-1.0)*x8289*x8291)));
evalcond[1]=((((-1.0)*x8286*x8291))+((x8282*x8288))+(((-1.0)*r02*x8290)));
evalcond[2]=((((-1.0)*x8284*x8290))+(((-1.0)*r12*x8291))+((x8283*x8285)));
evalcond[3]=((-1.0)+(((-1.0)*x8285*x8291))+(((-1.0)*r12*x8290))+((x8282*x8284)));
evalcond[4]=((((-1.0)*r22*x8291))+(((-1.0)*x8287*x8290))+((cj12*sj11))+((cj11*sj12))+((x8283*x8289)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*x8288*x8290))+((x8283*x8286))+(((-1.0)*r02*x8291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x8292 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8292.valid){
continue;
}
CheckValue<IkReal> x8293=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x8293.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8292.value)+(((1.5707963267949)*(x8293.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8294=IKsin(j14);
IkReal x8295=IKcos(j14);
IkReal x8296=(r11*sj15);
IkReal x8297=(cj15*r10);
IkReal x8298=(cj15*r00);
IkReal x8299=(r21*sj15);
IkReal x8300=(r01*sj15);
IkReal x8301=(cj15*r20);
IkReal x8302=((1.0)*x8295);
IkReal x8303=((1.0)*x8294);
evalcond[0]=((((-1.0)*r22*x8302))+(((-1.0)*x8301*x8303))+((x8294*x8299)));
evalcond[1]=((((-1.0)*x8298*x8303))+(((-1.0)*r02*x8302))+((x8294*x8300)));
evalcond[2]=((((-1.0)*r12*x8303))+((x8295*x8297))+(((-1.0)*x8296*x8302)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8302))+(((-1.0)*x8297*x8303))+((x8294*x8296)));
evalcond[4]=((((-1.0)*r22*x8303))+((cj12*sj11))+((x8295*x8301))+((cj11*sj12))+(((-1.0)*x8299*x8302)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*x8300*x8302))+(((-1.0)*r02*x8303))+((x8295*x8298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8304=((-1.0)*r00);
IkReal x8306 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8306)==0){
continue;
}
IkReal x8305=pow(x8306,-0.5);
CheckValue<IkReal> x8307 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8304),IKFAST_ATAN2_MAGTHRESH);
if(!x8307.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8307.value));
IkReal gconst145=(r01*x8305);
IkReal gconst146=(x8304*x8305);
CheckValue<IkReal> x8308 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8308.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x8308.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x8309=((-1.0)*r00);
IkReal x8310=x8305;
CheckValue<IkReal> x8312 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8309),IKFAST_ATAN2_MAGTHRESH);
if(!x8312.valid){
continue;
}
IkReal x8311=((-1.0)*(x8312.value));
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst145;
cj15=gconst146;
j15=x8311;
IkReal gconst144=x8311;
IkReal gconst145=(r01*x8310);
IkReal gconst146=(x8309*x8310);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8313=((1.0)*gconst145);
CheckValue<IkReal> x8314=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8313))+(((-1.0)*gconst146*r21)))),-1);
if(!x8314.valid){
continue;
}
CheckValue<IkReal> x8315 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x8313))+((gconst146*r10*sj10))+(((-1.0)*cj10*r01*x8313))+((cj10*gconst146*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8315.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8314.value)))+(x8315.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8316=IKsin(j14);
IkReal x8317=IKcos(j14);
IkReal x8318=(gconst146*r10);
IkReal x8319=((1.0)*sj10);
IkReal x8320=(gconst146*r00);
IkReal x8321=(sj11*sj12);
IkReal x8322=(gconst145*r21);
IkReal x8323=(gconst146*r20);
IkReal x8324=(cj11*cj12);
IkReal x8325=((1.0)*x8317);
IkReal x8326=((1.0)*x8316);
IkReal x8327=(gconst145*x8316);
evalcond[0]=(((x8316*x8322))+(((-1.0)*r22*x8325))+(((-1.0)*x8323*x8326)));
evalcond[1]=((((-1.0)*x8318*x8326))+cj10+((r11*x8327))+(((-1.0)*r12*x8325)));
evalcond[2]=((((-1.0)*x8319))+((r01*x8327))+(((-1.0)*x8320*x8326))+(((-1.0)*r02*x8325)));
evalcond[3]=(((x8317*x8323))+(((-1.0)*r22*x8326))+(((-1.0)*x8322*x8325))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*gconst145*r01*x8325))+((x8317*x8320))+((cj10*x8321))+(((-1.0)*cj10*x8324))+(((-1.0)*r02*x8326)));
evalcond[5]=(((sj10*x8321))+(((-1.0)*gconst145*r11*x8325))+(((-1.0)*r12*x8326))+((x8317*x8318))+(((-1.0)*x8319*x8324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8328=((1.0)*gconst146);
CheckValue<IkReal> x8329=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r10))+(((-1.0)*r11*x8328)))),-1);
if(!x8329.valid){
continue;
}
CheckValue<IkReal> x8330 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x8328))+((gconst145*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8330.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8329.value)))+(x8330.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8331=IKsin(j14);
IkReal x8332=IKcos(j14);
IkReal x8333=(gconst146*r10);
IkReal x8334=((1.0)*sj10);
IkReal x8335=(gconst146*r00);
IkReal x8336=(sj11*sj12);
IkReal x8337=(gconst145*r21);
IkReal x8338=(gconst146*r20);
IkReal x8339=(cj11*cj12);
IkReal x8340=((1.0)*x8332);
IkReal x8341=((1.0)*x8331);
IkReal x8342=(gconst145*x8331);
evalcond[0]=((((-1.0)*x8338*x8341))+((x8331*x8337))+(((-1.0)*r22*x8340)));
evalcond[1]=((((-1.0)*x8333*x8341))+cj10+((r11*x8342))+(((-1.0)*r12*x8340)));
evalcond[2]=(((r01*x8342))+(((-1.0)*x8335*x8341))+(((-1.0)*r02*x8340))+(((-1.0)*x8334)));
evalcond[3]=(((x8332*x8338))+(((-1.0)*r22*x8341))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*x8337*x8340)));
evalcond[4]=((((-1.0)*cj10*x8339))+((cj10*x8336))+(((-1.0)*r02*x8341))+((x8332*x8335))+(((-1.0)*gconst145*r01*x8340)));
evalcond[5]=(((sj10*x8336))+((x8332*x8333))+(((-1.0)*gconst145*r11*x8340))+(((-1.0)*x8334*x8339))+(((-1.0)*r12*x8341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8343=((-1.0)*r01);
IkReal x8345 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8345)==0){
continue;
}
IkReal x8344=pow(x8345,-0.5);
CheckValue<IkReal> x8346 = IKatan2WithCheck(IkReal(x8343),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8346.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8346.value))));
IkReal gconst148=(x8343*x8344);
IkReal gconst149=((1.0)*r00*x8344);
CheckValue<IkReal> x8347 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8347.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x8347.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[5];
IkReal x8348=((-1.0)*r01);
CheckValue<IkReal> x8351 = IKatan2WithCheck(IkReal(x8348),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8351.valid){
continue;
}
IkReal x8349=((1.0)*(x8351.value));
IkReal x8350=x8344;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst148;
cj15=gconst149;
j15=((3.14159265)+(((-1.0)*x8349)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8349)));
IkReal gconst148=(x8348*x8350);
IkReal gconst149=((1.0)*r00*x8350);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=cj10;
j14eval[3]=r22;
j14eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  || IKabs(j14eval[4]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x8352=((-1.0)*r01);
CheckValue<IkReal> x8355 = IKatan2WithCheck(IkReal(x8352),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8355.valid){
continue;
}
IkReal x8353=((1.0)*(x8355.value));
IkReal x8354=x8344;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst148;
cj15=gconst149;
j15=((3.14159265)+(((-1.0)*x8353)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8353)));
IkReal gconst148=(x8352*x8354);
IkReal gconst149=((1.0)*r00*x8354);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8356=((-1.0)*r01);
CheckValue<IkReal> x8359 = IKatan2WithCheck(IkReal(x8356),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8359.valid){
continue;
}
IkReal x8357=((1.0)*(x8359.value));
IkReal x8358=x8344;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj15=gconst148;
cj15=gconst149;
j15=((3.14159265)+(((-1.0)*x8357)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8357)));
IkReal gconst148=(x8356*x8358);
IkReal gconst149=((1.0)*r00*x8358);
IkReal x8360=r02*r02;
IkReal x8361=(r12*sj10);
IkReal x8362=x8344;
IkReal x8363=(cj10*x8362);
j14eval[0]=((IKabs(((((-1.0)*x8361))+(((-1.0)*cj10*r02)))))+(IKabs(((((-1.0)*x8363))+((r02*x8361*x8362))+((x8360*x8363))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8364=((1.0)*gconst148);
CheckValue<IkReal> x8365 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x8364))+((gconst149*r10*sj10))+((cj10*gconst149*r00))+(((-1.0)*cj10*r01*x8364)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8365.valid){
continue;
}
CheckValue<IkReal> x8366=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8364))+(((-1.0)*gconst149*r21)))),-1);
if(!x8366.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8365.value)+(((1.5707963267949)*(x8366.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8367=IKsin(j14);
IkReal x8368=IKcos(j14);
IkReal x8369=(gconst148*r21);
IkReal x8370=(gconst148*r01);
IkReal x8371=(gconst149*r20);
IkReal x8372=((1.0)*sj10);
IkReal x8373=(gconst149*r10);
IkReal x8374=(sj11*sj12);
IkReal x8375=(cj11*cj12);
IkReal x8376=(gconst148*r11);
IkReal x8377=(gconst149*r00);
IkReal x8378=((1.0)*x8368);
IkReal x8379=((1.0)*x8367);
evalcond[0]=((((-1.0)*x8371*x8379))+(((-1.0)*r22*x8378))+((x8367*x8369)));
evalcond[1]=((((-1.0)*r12*x8378))+cj10+(((-1.0)*x8373*x8379))+((x8367*x8376)));
evalcond[2]=((((-1.0)*r02*x8378))+(((-1.0)*x8372))+(((-1.0)*x8377*x8379))+((x8367*x8370)));
evalcond[3]=((((-1.0)*r22*x8379))+(((-1.0)*x8369*x8378))+((cj12*sj11))+((x8368*x8371))+((cj11*sj12)));
evalcond[4]=((((-1.0)*r02*x8379))+(((-1.0)*cj10*x8375))+((x8368*x8377))+((cj10*x8374))+(((-1.0)*x8370*x8378)));
evalcond[5]=((((-1.0)*r12*x8379))+(((-1.0)*x8376*x8378))+(((-1.0)*x8372*x8375))+((x8368*x8373))+((sj10*x8374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8380=((1.0)*gconst149);
CheckValue<IkReal> x8381=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r10))+(((-1.0)*r11*x8380)))),-1);
if(!x8381.valid){
continue;
}
CheckValue<IkReal> x8382 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst148*r21*sj10))+(((-1.0)*r20*sj10*x8380)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8382.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8381.value)))+(x8382.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8383=IKsin(j14);
IkReal x8384=IKcos(j14);
IkReal x8385=(gconst148*r21);
IkReal x8386=(gconst148*r01);
IkReal x8387=(gconst149*r20);
IkReal x8388=((1.0)*sj10);
IkReal x8389=(gconst149*r10);
IkReal x8390=(sj11*sj12);
IkReal x8391=(cj11*cj12);
IkReal x8392=(gconst148*r11);
IkReal x8393=(gconst149*r00);
IkReal x8394=((1.0)*x8384);
IkReal x8395=((1.0)*x8383);
evalcond[0]=((((-1.0)*x8387*x8395))+(((-1.0)*r22*x8394))+((x8383*x8385)));
evalcond[1]=(cj10+((x8383*x8392))+(((-1.0)*x8389*x8395))+(((-1.0)*r12*x8394)));
evalcond[2]=((((-1.0)*x8393*x8395))+(((-1.0)*r02*x8394))+(((-1.0)*x8388))+((x8383*x8386)));
evalcond[3]=((((-1.0)*x8385*x8394))+((cj12*sj11))+(((-1.0)*r22*x8395))+((cj11*sj12))+((x8384*x8387)));
evalcond[4]=((((-1.0)*x8386*x8394))+(((-1.0)*r02*x8395))+((cj10*x8390))+(((-1.0)*cj10*x8391))+((x8384*x8393)));
evalcond[5]=((((-1.0)*x8388*x8391))+((sj10*x8390))+(((-1.0)*x8392*x8394))+(((-1.0)*r12*x8395))+((x8384*x8389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8396=((1.0)*gconst149);
CheckValue<IkReal> x8397=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8396)))),-1);
if(!x8397.valid){
continue;
}
CheckValue<IkReal> x8398 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x8396))+((cj10*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8398.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8397.value)))+(x8398.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8399=IKsin(j14);
IkReal x8400=IKcos(j14);
IkReal x8401=(gconst148*r21);
IkReal x8402=(gconst148*r01);
IkReal x8403=(gconst149*r20);
IkReal x8404=((1.0)*sj10);
IkReal x8405=(gconst149*r10);
IkReal x8406=(sj11*sj12);
IkReal x8407=(cj11*cj12);
IkReal x8408=(gconst148*r11);
IkReal x8409=(gconst149*r00);
IkReal x8410=((1.0)*x8400);
IkReal x8411=((1.0)*x8399);
evalcond[0]=(((x8399*x8401))+(((-1.0)*r22*x8410))+(((-1.0)*x8403*x8411)));
evalcond[1]=((((-1.0)*r12*x8410))+((x8399*x8408))+(((-1.0)*x8405*x8411))+cj10);
evalcond[2]=((((-1.0)*x8404))+(((-1.0)*x8409*x8411))+((x8399*x8402))+(((-1.0)*r02*x8410)));
evalcond[3]=(((cj12*sj11))+((x8400*x8403))+(((-1.0)*x8401*x8410))+((cj11*sj12))+(((-1.0)*r22*x8411)));
evalcond[4]=((((-1.0)*cj10*x8407))+((cj10*x8406))+(((-1.0)*r02*x8411))+((x8400*x8409))+(((-1.0)*x8402*x8410)));
evalcond[5]=(((sj10*x8406))+(((-1.0)*r12*x8411))+(((-1.0)*x8408*x8410))+(((-1.0)*x8404*x8407))+((x8400*x8405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x8412=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x8412;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x8412);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x8413=((1.0)*cj15);
IkReal x8414=((((-1.0)*r11*x8413))+(((-1.0)*r10*sj15)));
j14eval[0]=x8414;
j14eval[1]=IKsign(x8414);
j14eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x8413))+((r21*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x8415=r01*r01;
IkReal x8416=cj15*cj15;
IkReal x8417=(r01*sj15);
IkReal x8418=(cj15*r00);
IkReal x8419=((((-1.0)*x8415))+(((2.0)*x8417*x8418))+(((-1.0)*(r02*r02)))+(((-1.0)*x8416*(r00*r00)))+((x8415*x8416)));
j14eval[0]=x8419;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x8417))+x8418))));
j14eval[2]=IKsign(x8419);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8420=r01*r01;
IkReal x8421=cj15*cj15;
IkReal x8422=(r01*sj15);
IkReal x8423=(cj15*r00);
CheckValue<IkReal> x8424 = IKatan2WithCheck(IkReal((x8423+(((-1.0)*x8422)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8424.valid){
continue;
}
CheckValue<IkReal> x8425=IKPowWithIntegerCheck(IKsign(((((2.0)*x8422*x8423))+(((-1.0)*(r02*r02)))+((x8420*x8421))+(((-1.0)*x8420))+(((-1.0)*x8421*(r00*r00))))),-1);
if(!x8425.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8424.value)+(((1.5707963267949)*(x8425.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8426=IKsin(j14);
IkReal x8427=IKcos(j14);
IkReal x8428=(r11*sj15);
IkReal x8429=(cj15*r10);
IkReal x8430=(cj15*r00);
IkReal x8431=(r21*sj15);
IkReal x8432=(r01*sj15);
IkReal x8433=(cj15*r20);
IkReal x8434=((1.0)*x8427);
IkReal x8435=((1.0)*x8426);
evalcond[0]=(((x8426*x8431))+(((-1.0)*r22*x8434))+(((-1.0)*x8433*x8435)));
evalcond[1]=((((-1.0)*x8429*x8435))+(((-1.0)*r12*x8434))+((x8426*x8428)));
evalcond[2]=((((-1.0)*x8432*x8434))+((x8427*x8430))+(((-1.0)*r02*x8435)));
evalcond[3]=((-1.0)+((x8426*x8432))+(((-1.0)*x8430*x8435))+(((-1.0)*r02*x8434)));
evalcond[4]=(((x8427*x8433))+(((-1.0)*x8431*x8434))+((cj12*sj11))+(((-1.0)*r22*x8435))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r12*x8435))+((x8427*x8429))+(((-1.0)*x8428*x8434))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8436=((1.0)*cj15);
CheckValue<IkReal> x8437 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8436))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8437.valid){
continue;
}
CheckValue<IkReal> x8438=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8436))+(((-1.0)*r10*sj15)))),-1);
if(!x8438.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8437.value)+(((1.5707963267949)*(x8438.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8439=IKsin(j14);
IkReal x8440=IKcos(j14);
IkReal x8441=(r11*sj15);
IkReal x8442=(cj15*r10);
IkReal x8443=(cj15*r00);
IkReal x8444=(r21*sj15);
IkReal x8445=(r01*sj15);
IkReal x8446=(cj15*r20);
IkReal x8447=((1.0)*x8440);
IkReal x8448=((1.0)*x8439);
evalcond[0]=((((-1.0)*r22*x8447))+(((-1.0)*x8446*x8448))+((x8439*x8444)));
evalcond[1]=((((-1.0)*r12*x8447))+(((-1.0)*x8442*x8448))+((x8439*x8441)));
evalcond[2]=((((-1.0)*x8445*x8447))+(((-1.0)*r02*x8448))+((x8440*x8443)));
evalcond[3]=((-1.0)+(((-1.0)*x8443*x8448))+((x8439*x8445))+(((-1.0)*r02*x8447)));
evalcond[4]=((((-1.0)*x8444*x8447))+(((-1.0)*r22*x8448))+((cj12*sj11))+((cj11*sj12))+((x8440*x8446)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r12*x8448))+(((-1.0)*cj11*cj12))+(((-1.0)*x8441*x8447))+((x8440*x8442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x8449=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x8449.valid){
continue;
}
CheckValue<IkReal> x8450 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8450.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8449.value)))+(x8450.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8451=IKsin(j14);
IkReal x8452=IKcos(j14);
IkReal x8453=(r11*sj15);
IkReal x8454=(cj15*r10);
IkReal x8455=(cj15*r00);
IkReal x8456=(r21*sj15);
IkReal x8457=(r01*sj15);
IkReal x8458=(cj15*r20);
IkReal x8459=((1.0)*x8452);
IkReal x8460=((1.0)*x8451);
evalcond[0]=(((x8451*x8456))+(((-1.0)*r22*x8459))+(((-1.0)*x8458*x8460)));
evalcond[1]=(((x8451*x8453))+(((-1.0)*x8454*x8460))+(((-1.0)*r12*x8459)));
evalcond[2]=((((-1.0)*r02*x8460))+(((-1.0)*x8457*x8459))+((x8452*x8455)));
evalcond[3]=((-1.0)+((x8451*x8457))+(((-1.0)*x8455*x8460))+(((-1.0)*r02*x8459)));
evalcond[4]=(((cj12*sj11))+(((-1.0)*x8456*x8459))+((x8452*x8458))+(((-1.0)*r22*x8460))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x8453*x8459))+((x8452*x8454))+(((-1.0)*r12*x8460))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x8461=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x8461;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x8461);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x8462=((1.0)*cj15);
IkReal x8463=((((-1.0)*r20*sj15))+(((-1.0)*r21*x8462)));
j14eval[0]=x8463;
j14eval[1]=IKsign(x8463);
j14eval[2]=((IKabs((((r11*sj15))+(((-1.0)*r10*x8462)))))+(IKabs(r12)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x8464=cj15*cj15;
IkReal x8465=r01*r01;
IkReal x8466=(cj15*r00);
IkReal x8467=(r01*sj15);
IkReal x8468=(x8465+(((-2.0)*x8466*x8467))+((x8464*(r00*r00)))+(r02*r02)+(((-1.0)*x8464*x8465)));
j14eval[0]=x8468;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x8467))+x8466))));
j14eval[2]=IKsign(x8468);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8469=cj15*cj15;
IkReal x8470=r01*r01;
IkReal x8471=(r01*sj15);
IkReal x8472=(cj15*r00);
CheckValue<IkReal> x8473 = IKatan2WithCheck(IkReal((x8472+(((-1.0)*x8471)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8473.valid){
continue;
}
CheckValue<IkReal> x8474=IKPowWithIntegerCheck(IKsign((x8470+((x8469*(r00*r00)))+(((-2.0)*x8471*x8472))+(r02*r02)+(((-1.0)*x8469*x8470)))),-1);
if(!x8474.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8473.value)+(((1.5707963267949)*(x8474.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8475=IKsin(j14);
IkReal x8476=IKcos(j14);
IkReal x8477=(r11*sj15);
IkReal x8478=(cj15*r10);
IkReal x8479=(cj15*r00);
IkReal x8480=(r21*sj15);
IkReal x8481=(r01*sj15);
IkReal x8482=(cj15*r20);
IkReal x8483=((1.0)*x8476);
IkReal x8484=((1.0)*x8475);
evalcond[0]=((((-1.0)*x8482*x8484))+(((-1.0)*r22*x8483))+((x8475*x8480)));
evalcond[1]=(((x8475*x8477))+(((-1.0)*r12*x8483))+(((-1.0)*x8478*x8484)));
evalcond[2]=(((x8476*x8479))+(((-1.0)*r02*x8484))+(((-1.0)*x8481*x8483)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8483))+(((-1.0)*x8479*x8484))+((x8475*x8481)));
evalcond[4]=((((-1.0)*x8480*x8483))+(((-1.0)*r22*x8484))+((cj12*sj11))+((cj11*sj12))+((x8476*x8482)));
evalcond[5]=(((x8476*x8478))+(((-1.0)*x8477*x8483))+(((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*r12*x8484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8485=((1.0)*cj15);
CheckValue<IkReal> x8486=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8485))+(((-1.0)*r20*sj15)))),-1);
if(!x8486.valid){
continue;
}
CheckValue<IkReal> x8487 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*r10*x8485)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8487.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8486.value)))+(x8487.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8488=IKsin(j14);
IkReal x8489=IKcos(j14);
IkReal x8490=(r11*sj15);
IkReal x8491=(cj15*r10);
IkReal x8492=(cj15*r00);
IkReal x8493=(r21*sj15);
IkReal x8494=(r01*sj15);
IkReal x8495=(cj15*r20);
IkReal x8496=((1.0)*x8489);
IkReal x8497=((1.0)*x8488);
evalcond[0]=(((x8488*x8493))+(((-1.0)*r22*x8496))+(((-1.0)*x8495*x8497)));
evalcond[1]=(((x8488*x8490))+(((-1.0)*x8491*x8497))+(((-1.0)*r12*x8496)));
evalcond[2]=((((-1.0)*r02*x8497))+((x8489*x8492))+(((-1.0)*x8494*x8496)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8496))+((x8488*x8494))+(((-1.0)*x8492*x8497)));
evalcond[4]=(((x8489*x8495))+(((-1.0)*r22*x8497))+(((-1.0)*x8493*x8496))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+((x8489*x8491))+(((-1.0)*x8490*x8496))+(((-1.0)*r12*x8497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x8498=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x8498.valid){
continue;
}
CheckValue<IkReal> x8499 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8499.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8498.value)))+(x8499.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8500=IKsin(j14);
IkReal x8501=IKcos(j14);
IkReal x8502=(r11*sj15);
IkReal x8503=(cj15*r10);
IkReal x8504=(cj15*r00);
IkReal x8505=(r21*sj15);
IkReal x8506=(r01*sj15);
IkReal x8507=(cj15*r20);
IkReal x8508=((1.0)*x8501);
IkReal x8509=((1.0)*x8500);
evalcond[0]=(((x8500*x8505))+(((-1.0)*r22*x8508))+(((-1.0)*x8507*x8509)));
evalcond[1]=(((x8500*x8502))+(((-1.0)*x8503*x8509))+(((-1.0)*r12*x8508)));
evalcond[2]=((((-1.0)*x8506*x8508))+(((-1.0)*r02*x8509))+((x8501*x8504)));
evalcond[3]=((1.0)+((x8500*x8506))+(((-1.0)*x8504*x8509))+(((-1.0)*r02*x8508)));
evalcond[4]=((((-1.0)*x8505*x8508))+(((-1.0)*r22*x8509))+((cj12*sj11))+((x8501*x8507))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*r12*x8509))+((x8501*x8503))+(((-1.0)*x8502*x8508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x8510=((-1.0)*px);
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8510);
rxp1_1=(px*r21);
rxp1_2=(r11*x8510);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8511=((-1.0)*px);
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8511);
rxp1_1=(px*r21);
rxp1_2=(r11*x8511);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=((((-1.0)*r21*sj15))+((cj15*r20)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8512=((-1.0)*px);
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8512);
rxp1_1=(px*r21);
rxp1_2=(r11*x8512);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=(((cj15*r10))+(((-1.0)*r11*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x8515=IKPowWithIntegerCheck((((cj15*r10))+(((-1.0)*r11*sj15))),-1);
if(!x8515.valid){
continue;
}
IkReal x8513=x8515.value;
IkReal x8514=(sj10*x8513);
cj14array[0]=(((cj11*cj12*x8514))+(((-1.0)*sj11*sj12*x8514)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x8516=IKsin(j14);
IkReal x8517=IKcos(j14);
IkReal x8518=(sj15*x8516);
IkReal x8519=((1.0)*x8517);
IkReal x8520=((1.0)*cj15*x8516);
evalcond[0]=((-1.0)*r02*x8516);
evalcond[1]=((((-1.0)*sj10))+(((-1.0)*r02*x8519)));
evalcond[2]=((((-1.0)*r20*x8520))+((r21*x8518)));
evalcond[3]=(((r11*x8518))+(((-1.0)*r10*x8520)));
evalcond[4]=(((cj15*r20*x8517))+((cj12*sj11))+(((-1.0)*r21*sj15*x8519))+((cj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x8523=IKPowWithIntegerCheck(((((-1.0)*r21*sj15))+((cj15*r20))),-1);
if(!x8523.valid){
continue;
}
IkReal x8521=x8523.value;
IkReal x8522=((1.0)*x8521);
cj14array[0]=((((-1.0)*cj11*sj12*x8522))+(((-1.0)*cj12*sj11*x8522)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x8524=IKsin(j14);
IkReal x8525=IKcos(j14);
IkReal x8526=(cj15*r10);
IkReal x8527=((1.0)*sj10);
IkReal x8528=(sj15*x8524);
IkReal x8529=((1.0)*x8525);
IkReal x8530=((1.0)*x8524);
evalcond[0]=((-1.0)*r02*x8524);
evalcond[1]=((((-1.0)*r02*x8529))+(((-1.0)*x8527)));
evalcond[2]=(((r21*x8528))+(((-1.0)*cj15*r20*x8530)));
evalcond[3]=((((-1.0)*x8526*x8530))+((r11*x8528)));
evalcond[4]=((((-1.0)*r11*sj15*x8529))+(((-1.0)*cj11*cj12*x8527))+((x8525*x8526))+((sj10*sj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x8531=IKPowWithIntegerCheck(r02,-1);
if(!x8531.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x8531.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x8532=IKsin(j14);
IkReal x8533=IKcos(j14);
IkReal x8534=(cj15*r10);
IkReal x8535=(cj15*r20);
IkReal x8536=(sj15*x8532);
IkReal x8537=((1.0)*x8532);
IkReal x8538=((1.0)*sj15*x8533);
evalcond[0]=((-1.0)*r02*x8532);
evalcond[1]=(((r21*x8536))+(((-1.0)*x8535*x8537)));
evalcond[2]=(((r11*x8536))+(((-1.0)*x8534*x8537)));
evalcond[3]=(((x8533*x8535))+((cj12*sj11))+(((-1.0)*r21*x8538))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj11*cj12*sj10))+(((-1.0)*r11*x8538))+((x8533*x8534))+((sj10*sj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8539=((1.0)*sj15);
CheckValue<IkReal> x8540 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*r11*sj10*x8539))+((cj15*r10*sj10))+(((-1.0)*cj10*r01*x8539))+((cj10*cj15*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8540.valid){
continue;
}
CheckValue<IkReal> x8541=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj15*r21))+(((-1.0)*r20*x8539)))),-1);
if(!x8541.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8540.value)+(((1.5707963267949)*(x8541.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8542=IKsin(j14);
IkReal x8543=IKcos(j14);
IkReal x8544=(r11*sj15);
IkReal x8545=((1.0)*sj10);
IkReal x8546=(sj11*sj12);
IkReal x8547=(cj15*r10);
IkReal x8548=(r21*sj15);
IkReal x8549=(r01*sj15);
IkReal x8550=(cj11*cj12);
IkReal x8551=((1.0)*x8543);
IkReal x8552=((1.0)*x8542);
IkReal x8553=(cj15*x8543);
evalcond[0]=((((-1.0)*r22*x8551))+((x8542*x8548))+(((-1.0)*cj15*r20*x8552)));
evalcond[1]=((((-1.0)*x8547*x8552))+(((-1.0)*r12*x8551))+((x8542*x8544))+cj10);
evalcond[2]=((((-1.0)*x8545))+((x8542*x8549))+(((-1.0)*cj15*r00*x8552))+(((-1.0)*r02*x8551)));
evalcond[3]=(((r20*x8553))+(((-1.0)*r22*x8552))+(((-1.0)*x8548*x8551))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((r00*x8553))+(((-1.0)*cj10*x8550))+((cj10*x8546))+(((-1.0)*x8549*x8551))+(((-1.0)*r02*x8552)));
evalcond[5]=((((-1.0)*r12*x8552))+(((-1.0)*x8544*x8551))+((x8543*x8547))+(((-1.0)*x8545*x8550))+((sj10*x8546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8554=((1.0)*cj15);
CheckValue<IkReal> x8555=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj15))+(((-1.0)*r11*x8554)))),-1);
if(!x8555.valid){
continue;
}
CheckValue<IkReal> x8556 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x8554))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8556.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8555.value)))+(x8556.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8557=IKsin(j14);
IkReal x8558=IKcos(j14);
IkReal x8559=(r11*sj15);
IkReal x8560=((1.0)*sj10);
IkReal x8561=(sj11*sj12);
IkReal x8562=(cj15*r10);
IkReal x8563=(r21*sj15);
IkReal x8564=(r01*sj15);
IkReal x8565=(cj11*cj12);
IkReal x8566=((1.0)*x8558);
IkReal x8567=((1.0)*x8557);
IkReal x8568=(cj15*x8558);
evalcond[0]=(((x8557*x8563))+(((-1.0)*cj15*r20*x8567))+(((-1.0)*r22*x8566)));
evalcond[1]=((((-1.0)*r12*x8566))+cj10+(((-1.0)*x8562*x8567))+((x8557*x8559)));
evalcond[2]=(((x8557*x8564))+(((-1.0)*cj15*r00*x8567))+(((-1.0)*r02*x8566))+(((-1.0)*x8560)));
evalcond[3]=(((r20*x8568))+(((-1.0)*r22*x8567))+(((-1.0)*x8563*x8566))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((r00*x8568))+(((-1.0)*cj10*x8565))+(((-1.0)*x8564*x8566))+((cj10*x8561))+(((-1.0)*r02*x8567)));
evalcond[5]=((((-1.0)*r12*x8567))+(((-1.0)*x8559*x8566))+(((-1.0)*x8560*x8565))+((sj10*x8561))+((x8558*x8562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8569=((1.0)*cj15);
CheckValue<IkReal> x8570=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8569))+(((-1.0)*r00*sj15)))),-1);
if(!x8570.valid){
continue;
}
CheckValue<IkReal> x8571 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x8569))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8571.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8570.value)))+(x8571.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8572=IKsin(j14);
IkReal x8573=IKcos(j14);
IkReal x8574=(r11*sj15);
IkReal x8575=((1.0)*sj10);
IkReal x8576=(sj11*sj12);
IkReal x8577=(cj15*r10);
IkReal x8578=(r21*sj15);
IkReal x8579=(r01*sj15);
IkReal x8580=(cj11*cj12);
IkReal x8581=((1.0)*x8573);
IkReal x8582=((1.0)*x8572);
IkReal x8583=(cj15*x8573);
evalcond[0]=((((-1.0)*r22*x8581))+(((-1.0)*cj15*r20*x8582))+((x8572*x8578)));
evalcond[1]=((((-1.0)*x8577*x8582))+cj10+(((-1.0)*r12*x8581))+((x8572*x8574)));
evalcond[2]=((((-1.0)*cj15*r00*x8582))+(((-1.0)*x8575))+(((-1.0)*r02*x8581))+((x8572*x8579)));
evalcond[3]=((((-1.0)*r22*x8582))+((cj12*sj11))+(((-1.0)*x8578*x8581))+((r20*x8583))+((cj11*sj12)));
evalcond[4]=((((-1.0)*r02*x8582))+((r00*x8583))+(((-1.0)*x8579*x8581))+((cj10*x8576))+(((-1.0)*cj10*x8580)));
evalcond[5]=(((sj10*x8576))+((x8573*x8577))+(((-1.0)*r12*x8582))+(((-1.0)*x8574*x8581))+(((-1.0)*x8575*x8580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j10, j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x8584=cj11*cj11;
IkReal x8585=cj12*cj12;
IkReal x8586=(cj15*r01);
IkReal x8587=((8318211.0)*cj11);
IkReal x8588=(sj11*sj12);
IkReal x8589=((85300000.0)*px);
IkReal x8590=(cj15*r11);
IkReal x8591=((7280355.0)*sj15);
IkReal x8592=(cj11*cj12);
IkReal x8593=((85300000.0)*py);
IkReal x8594=((97460000.0)*cj11);
IkReal x8595=(r00*sj15);
IkReal x8596=(r10*sj15);
CheckValue<IkReal> x8597=IKPowWithIntegerCheck(IKsign(((23239234.0)+(((-36380450.0)*x8588*x8592))+(((5555904.0)*x8584))+(((36380450.0)*x8584*x8585))+(((-18190225.0)*x8585))+(((41566690.0)*cj12*x8584))+(((-41566690.0)*cj11*x8588)))),-1);
if(!x8597.valid){
continue;
}
CheckValue<IkReal> x8598 = IKatan2WithCheck(IkReal(((((-3835629.0)*x8595))+(((-7280355.0)*x8588*x8590))+((x8587*x8596))+((x8587*x8590))+(((7280355.0)*x8590*x8592))+(((-1.0)*x8588*x8593))+((x8592*x8593))+((r10*x8591*x8592))+((py*x8594))+(((-1.0)*r10*x8588*x8591))+(((-3835629.0)*x8586))+(((-44940000.0)*px)))),IkReal(((((7280355.0)*x8586*x8592))+((x8586*x8587))+(((3835629.0)*x8590))+(((3835629.0)*x8596))+((x8587*x8595))+((x8589*x8592))+(((-7280355.0)*x8586*x8588))+((r00*x8591*x8592))+(((44940000.0)*py))+((px*x8594))+(((-1.0)*r00*x8588*x8591))+(((-1.0)*x8588*x8589)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8598.valid){
continue;
}
j10array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8597.value)))+(x8598.value));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[2];
IkReal x8599=IKcos(j10);
IkReal x8600=IKsin(j10);
IkReal x8601=((0.08535)*sj15);
IkReal x8602=((0.21325)*cj12);
IkReal x8603=((0.08535)*cj15);
IkReal x8604=(cj11*x8600);
IkReal x8605=((0.21325)*sj11*sj12);
IkReal x8606=(cj11*x8599);
evalcond[0]=((((-1.0)*r00*x8601))+(((-1.0)*r01*x8603))+((x8602*x8606))+(((0.24365)*x8606))+(((-1.0)*px))+(((-0.11235)*x8600))+(((-1.0)*x8599*x8605)));
evalcond[1]=((((0.11235)*x8599))+((x8602*x8604))+(((0.24365)*x8604))+(((-1.0)*r11*x8603))+(((-1.0)*py))+(((-1.0)*r10*x8601))+(((-1.0)*x8600*x8605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
IkReal x8607=((1.0)*cj15);
IkReal x8608=((((-1.0)*r01*x8607))+(((-1.0)*r00*sj15)));
j14eval[0]=x8608;
j14eval[1]=((IKabs(((((-1.0)*cj10*r20*x8607))+((cj10*r21*sj15)))))+(IKabs((cj10*r22))));
j14eval[2]=IKsign(x8608);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x8609=((1.0)*cj15);
IkReal x8610=((((-1.0)*r11*x8609))+(((-1.0)*r10*sj15)));
j14eval[0]=x8610;
j14eval[1]=((IKabs(((((-1.0)*r20*sj10*x8609))+((r21*sj10*sj15)))))+(IKabs((r22*sj10))));
j14eval[2]=IKsign(x8610);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x8611=((1.0)*sj15);
IkReal x8612=((((-1.0)*cj15*r21))+(((-1.0)*r20*x8611)));
j14eval[0]=x8612;
j14eval[1]=((IKabs(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))))+(IKabs(((((-1.0)*r11*sj10*x8611))+((cj15*r10*sj10))+(((-1.0)*cj10*r01*x8611))+((cj10*cj15*r00))))));
j14eval[2]=IKsign(x8612);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8613=((-1.0)*r20);
IkReal x8615 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8615)==0){
continue;
}
IkReal x8614=pow(x8615,-0.5);
CheckValue<IkReal> x8616 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8613),IKFAST_ATAN2_MAGTHRESH);
if(!x8616.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8616.value));
IkReal gconst1=(r21*x8614);
IkReal gconst2=(x8613*x8614);
CheckValue<IkReal> x8617 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8617.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x8617.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x8618=((-1.0)*r20);
IkReal x8619=x8614;
CheckValue<IkReal> x8621 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8618),IKFAST_ATAN2_MAGTHRESH);
if(!x8621.valid){
continue;
}
IkReal x8620=((-1.0)*(x8621.value));
sj15=gconst1;
cj15=gconst2;
j15=x8620;
IkReal gconst0=x8620;
IkReal gconst1=(r21*x8619);
IkReal gconst2=(x8618*x8619);
j14eval[0]=cj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8622=((-1.0)*r20);
IkReal x8623=x8614;
CheckValue<IkReal> x8625 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8622),IKFAST_ATAN2_MAGTHRESH);
if(!x8625.valid){
continue;
}
IkReal x8624=((-1.0)*(x8625.value));
sj15=gconst1;
cj15=gconst2;
j15=x8624;
IkReal gconst0=x8624;
IkReal gconst1=(r21*x8623);
IkReal gconst2=(x8622*x8623);
j14eval[0]=sj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x8626=((-1.0)*r20);
IkReal x8627=x8614;
CheckValue<IkReal> x8629 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8626),IKFAST_ATAN2_MAGTHRESH);
if(!x8629.valid){
continue;
}
IkReal x8628=((-1.0)*(x8629.value));
sj15=gconst1;
cj15=gconst2;
j15=x8628;
IkReal gconst0=x8628;
IkReal gconst1=(r21*x8627);
IkReal gconst2=(x8626*x8627);
IkReal x8630=r22*r22;
CheckValue<IkReal> x8634=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8630))),-1);
if(!x8634.valid){
continue;
}
IkReal x8631=x8634.value;
IkReal x8632=(sj13*x8631);
IkReal x8633=((((2.0)*x8632*(r20*r20)*(r21*r21)))+((x8632*(r21*r21*r21*r21)))+((sj13*x8630))+((x8632*(r20*r20*r20*r20))));
j14eval[0]=x8633;
j14eval[1]=IKsign(x8633);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x8635=((-1.0)*r20);
IkReal x8636=x8614;
CheckValue<IkReal> x8638 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8635),IKFAST_ATAN2_MAGTHRESH);
if(!x8638.valid){
continue;
}
IkReal x8637=((-1.0)*(x8638.value));
sj15=gconst1;
cj15=gconst2;
j15=x8637;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst0=x8637;
IkReal gconst1=(r21*x8636);
IkReal gconst2=(x8635*x8636);
j14eval[0]=cj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8639=((-1.0)*r20);
IkReal x8640=x8614;
CheckValue<IkReal> x8642 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8639),IKFAST_ATAN2_MAGTHRESH);
if(!x8642.valid){
continue;
}
IkReal x8641=((-1.0)*(x8642.value));
sj15=gconst1;
cj15=gconst2;
j15=x8641;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst0=x8641;
IkReal gconst1=(r21*x8640);
IkReal gconst2=(x8639*x8640);
j14eval[0]=sj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x8643=((-1.0)*r20);
IkReal x8644=x8614;
CheckValue<IkReal> x8646 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8643),IKFAST_ATAN2_MAGTHRESH);
if(!x8646.valid){
continue;
}
IkReal x8645=((-1.0)*(x8646.value));
sj15=gconst1;
cj15=gconst2;
j15=x8645;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst0=x8645;
IkReal gconst1=(r21*x8644);
IkReal gconst2=(x8643*x8644);
IkReal x8647=((1.0)*(r22*r22));
CheckValue<IkReal> x8651=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8647))),-1);
if(!x8651.valid){
continue;
}
IkReal x8648=x8651.value;
IkReal x8649=((1.0)*x8648);
IkReal x8650=((((-1.0)*x8649*(r20*r20*r20*r20)))+(((-1.0)*x8647))+(((-2.0)*x8648*(r20*r20)*(r21*r21)))+(((-1.0)*x8649*(r21*r21*r21*r21))));
j14eval[0]=x8650;
j14eval[1]=IKsign(x8650);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x8652=((-1.0)*r20);
IkReal x8653=x8614;
CheckValue<IkReal> x8655 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8652),IKFAST_ATAN2_MAGTHRESH);
if(!x8655.valid){
continue;
}
IkReal x8654=((-1.0)*(x8655.value));
sj15=gconst1;
cj15=gconst2;
j15=x8654;
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst0=x8654;
IkReal gconst1=(r21*x8653);
IkReal gconst2=(x8652*x8653);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x8656=((-1.0)*r20);
IkReal x8657=x8614;
CheckValue<IkReal> x8659 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8656),IKFAST_ATAN2_MAGTHRESH);
if(!x8659.valid){
continue;
}
IkReal x8658=((-1.0)*(x8659.value));
sj15=gconst1;
cj15=gconst2;
j15=x8658;
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst0=x8658;
IkReal gconst1=(r21*x8657);
IkReal gconst2=(x8656*x8657);
IkReal x8660=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8664=IKPowWithIntegerCheck(x8660,-1);
if(!x8664.valid){
continue;
}
IkReal x8661=x8664.value;
IkReal x8662=((1.0)*x8661);
IkReal x8663=((((-1.0)*x8662*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x8661))+(((-1.0)*(r12*r12)))+(((-1.0)*x8662*(r11*r11)*(r21*r21))));
j14eval[0]=x8663;
j14eval[1]=r12;
j14eval[2]=x8660;
j14eval[3]=IKsign(x8663);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8665=((-1.0)*r20);
IkReal x8666=x8614;
CheckValue<IkReal> x8668 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8665),IKFAST_ATAN2_MAGTHRESH);
if(!x8668.valid){
continue;
}
IkReal x8667=((-1.0)*(x8668.value));
sj15=gconst1;
cj15=gconst2;
j15=x8667;
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst0=x8667;
IkReal gconst1=(r21*x8666);
IkReal gconst2=(x8665*x8666);
IkReal x8669=r22*r22;
IkReal x8670=((1.0)*r12);
IkReal x8671=(cj12*sj11);
IkReal x8672=(cj11*sj12);
CheckValue<IkReal> x8676=IKPowWithIntegerCheck(((-1.0)+x8669),-1);
if(!x8676.valid){
continue;
}
IkReal x8673=x8676.value;
if((((1.0)+(((-1.0)*x8669)))) < -0.00001)
continue;
IkReal x8674=IKsqrt(((1.0)+(((-1.0)*x8669))));
IkReal x8675=(r12*r22*x8673*x8674);
j14eval[0]=((IKabs(((((-1.0)*x8670*x8672))+(((-1.0)*x8670*x8671)))))+(IKabs((((x8671*x8675))+((x8672*x8675))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8677=(cj12*sj11);
IkReal x8678=(gconst1*r11);
IkReal x8679=(cj11*sj12);
IkReal x8680=((1.0)*r12);
IkReal x8681=((1.0)*gconst2*r10);
CheckValue<IkReal> x8682=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8682.valid){
continue;
}
CheckValue<IkReal> x8683 = IKatan2WithCheck(IkReal((((x8677*x8678))+(((-1.0)*x8677*x8681))+((x8678*x8679))+(((-1.0)*x8679*x8681)))),IkReal(((((-1.0)*x8677*x8680))+(((-1.0)*x8679*x8680)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8683.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8682.value)))+(x8683.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8684=IKcos(j14);
IkReal x8685=IKsin(j14);
IkReal x8686=(gconst1*r21);
IkReal x8687=((1.0)*x8684);
IkReal x8688=(gconst1*x8685);
IkReal x8689=(gconst1*x8684);
IkReal x8690=((1.0)*gconst2*x8685);
evalcond[0]=(((r12*x8685))+((r11*x8689))+(((-1.0)*gconst2*r10*x8687)));
evalcond[1]=((((-1.0)*r22*x8687))+((x8685*x8686))+(((-1.0)*r20*x8690)));
evalcond[2]=((((-1.0)*r02*x8687))+((r01*x8688))+(((-1.0)*r00*x8690)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8687))+((r11*x8688))+(((-1.0)*r10*x8690)));
evalcond[4]=(((r22*x8685))+((cj12*sj11))+((x8684*x8686))+((cj11*sj12))+(((-1.0)*gconst2*r20*x8687)));
evalcond[5]=(((sj11*sj12))+((r01*x8689))+(((-1.0)*gconst2*r00*x8687))+((r02*x8685))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8691=(gconst2*r10);
IkReal x8692=(gconst1*r11);
CheckValue<IkReal> x8693=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8692*x8692)))+(((2.0)*x8691*x8692))+(((-1.0)*(r12*r12)))+(((-1.0)*(x8691*x8691))))),-1);
if(!x8693.valid){
continue;
}
CheckValue<IkReal> x8694 = IKatan2WithCheck(IkReal((x8692+(((-1.0)*x8691)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8694.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8693.value)))+(x8694.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8695=IKcos(j14);
IkReal x8696=IKsin(j14);
IkReal x8697=(gconst1*r21);
IkReal x8698=((1.0)*x8695);
IkReal x8699=(gconst1*x8696);
IkReal x8700=(gconst1*x8695);
IkReal x8701=((1.0)*gconst2*x8696);
evalcond[0]=(((r11*x8700))+(((-1.0)*gconst2*r10*x8698))+((r12*x8696)));
evalcond[1]=((((-1.0)*r20*x8701))+((x8696*x8697))+(((-1.0)*r22*x8698)));
evalcond[2]=((((-1.0)*r02*x8698))+((r01*x8699))+(((-1.0)*r00*x8701)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8701))+(((-1.0)*r12*x8698))+((r11*x8699)));
evalcond[4]=((((-1.0)*gconst2*r20*x8698))+((r22*x8696))+((x8695*x8697))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*gconst2*r00*x8698))+((r02*x8696))+((r01*x8700))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8702=((1.0)*gconst2);
CheckValue<IkReal> x8703=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x8702)))),-1);
if(!x8703.valid){
continue;
}
CheckValue<IkReal> x8704 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8702))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8704.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8703.value)))+(x8704.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8705=IKcos(j14);
IkReal x8706=IKsin(j14);
IkReal x8707=(gconst1*r21);
IkReal x8708=((1.0)*x8705);
IkReal x8709=(gconst1*x8706);
IkReal x8710=(gconst1*x8705);
IkReal x8711=((1.0)*gconst2*x8706);
evalcond[0]=(((r12*x8706))+((r11*x8710))+(((-1.0)*gconst2*r10*x8708)));
evalcond[1]=((((-1.0)*r20*x8711))+((x8706*x8707))+(((-1.0)*r22*x8708)));
evalcond[2]=((((-1.0)*r02*x8708))+((r01*x8709))+(((-1.0)*r00*x8711)));
evalcond[3]=((1.0)+((r11*x8709))+(((-1.0)*r10*x8711))+(((-1.0)*r12*x8708)));
evalcond[4]=(((r22*x8706))+((cj12*sj11))+((x8705*x8707))+((cj11*sj12))+(((-1.0)*gconst2*r20*x8708)));
evalcond[5]=(((sj11*sj12))+((r02*x8706))+((r01*x8710))+(((-1.0)*gconst2*r00*x8708))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x8712=((-1.0)*r20);
IkReal x8713=x8614;
CheckValue<IkReal> x8715 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8712),IKFAST_ATAN2_MAGTHRESH);
if(!x8715.valid){
continue;
}
IkReal x8714=((-1.0)*(x8715.value));
sj15=gconst1;
cj15=gconst2;
j15=x8714;
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst0=x8714;
IkReal gconst1=(r21*x8713);
IkReal gconst2=(x8712*x8713);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x8716=((-1.0)*r20);
IkReal x8717=x8614;
CheckValue<IkReal> x8719 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8716),IKFAST_ATAN2_MAGTHRESH);
if(!x8719.valid){
continue;
}
IkReal x8718=((-1.0)*(x8719.value));
sj15=gconst1;
cj15=gconst2;
j15=x8718;
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst0=x8718;
IkReal gconst1=(r21*x8717);
IkReal gconst2=(x8716*x8717);
j14eval[0]=r12;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8720=((-1.0)*r20);
IkReal x8721=x8614;
CheckValue<IkReal> x8723 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8720),IKFAST_ATAN2_MAGTHRESH);
if(!x8723.valid){
continue;
}
IkReal x8722=((-1.0)*(x8723.value));
sj15=gconst1;
cj15=gconst2;
j15=x8722;
sj13=0;
cj13=1.0;
j13=0;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst0=x8722;
IkReal gconst1=(r21*x8721);
IkReal gconst2=(x8720*x8721);
IkReal x8724=r22*r22;
IkReal x8725=((1.0)*r12);
IkReal x8726=(cj12*sj11);
IkReal x8727=(cj11*sj12);
CheckValue<IkReal> x8731=IKPowWithIntegerCheck(((-1.0)+x8724),-1);
if(!x8731.valid){
continue;
}
IkReal x8728=x8731.value;
if((((1.0)+(((-1.0)*x8724)))) < -0.00001)
continue;
IkReal x8729=IKsqrt(((1.0)+(((-1.0)*x8724))));
IkReal x8730=(r12*r22*x8728*x8729);
j14eval[0]=((IKabs((((x8726*x8730))+((x8727*x8730)))))+(IKabs(((((-1.0)*x8725*x8726))+(((-1.0)*x8725*x8727))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8732=(cj12*sj11);
IkReal x8733=(gconst1*r11);
IkReal x8734=(cj11*sj12);
IkReal x8735=((1.0)*r12);
IkReal x8736=((1.0)*gconst2*r10);
CheckValue<IkReal> x8737=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8737.valid){
continue;
}
CheckValue<IkReal> x8738 = IKatan2WithCheck(IkReal((((x8732*x8733))+(((-1.0)*x8732*x8736))+((x8733*x8734))+(((-1.0)*x8734*x8736)))),IkReal(((((-1.0)*x8732*x8735))+(((-1.0)*x8734*x8735)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8738.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8737.value)))+(x8738.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8739=IKcos(j14);
IkReal x8740=IKsin(j14);
IkReal x8741=(gconst1*r21);
IkReal x8742=((1.0)*x8739);
IkReal x8743=(gconst1*x8740);
IkReal x8744=(gconst1*x8739);
IkReal x8745=((1.0)*gconst2*x8740);
evalcond[0]=(((r12*x8740))+(((-1.0)*gconst2*r10*x8742))+((r11*x8744)));
evalcond[1]=(((x8740*x8741))+(((-1.0)*r22*x8742))+(((-1.0)*r20*x8745)));
evalcond[2]=(((r01*x8743))+(((-1.0)*r00*x8745))+(((-1.0)*r02*x8742)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8742))+(((-1.0)*r10*x8745))+((r11*x8743)));
evalcond[4]=((((-1.0)*gconst2*r20*x8742))+((cj12*sj11))+((x8739*x8741))+((r22*x8740))+((cj11*sj12)));
evalcond[5]=(((r01*x8744))+(((-1.0)*sj11*sj12))+(((-1.0)*gconst2*r00*x8742))+((cj11*cj12))+((r02*x8740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8746=(gconst1*r11);
IkReal x8747=(gconst2*r10);
CheckValue<IkReal> x8748 = IKatan2WithCheck(IkReal((x8746+(((-1.0)*x8747)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8748.valid){
continue;
}
CheckValue<IkReal> x8749=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x8746*x8747))+(x8746*x8746)+(x8747*x8747))),-1);
if(!x8749.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8748.value)+(((1.5707963267949)*(x8749.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8750=IKcos(j14);
IkReal x8751=IKsin(j14);
IkReal x8752=(gconst1*r21);
IkReal x8753=((1.0)*x8750);
IkReal x8754=(gconst1*x8751);
IkReal x8755=(gconst1*x8750);
IkReal x8756=((1.0)*gconst2*x8751);
evalcond[0]=((((-1.0)*gconst2*r10*x8753))+((r11*x8755))+((r12*x8751)));
evalcond[1]=((((-1.0)*r22*x8753))+(((-1.0)*r20*x8756))+((x8751*x8752)));
evalcond[2]=((((-1.0)*r02*x8753))+(((-1.0)*r00*x8756))+((r01*x8754)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x8756))+((r11*x8754))+(((-1.0)*r12*x8753)));
evalcond[4]=(((r22*x8751))+((x8750*x8752))+(((-1.0)*gconst2*r20*x8753))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((r02*x8751))+(((-1.0)*gconst2*r00*x8753))+(((-1.0)*sj11*sj12))+((cj11*cj12))+((r01*x8755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x8757 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8757.valid){
continue;
}
CheckValue<IkReal> x8758=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8758.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8757.value)+(((1.5707963267949)*(x8758.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8759=IKcos(j14);
IkReal x8760=IKsin(j14);
IkReal x8761=(gconst1*r21);
IkReal x8762=((1.0)*x8759);
IkReal x8763=(gconst1*x8760);
IkReal x8764=(gconst1*x8759);
IkReal x8765=((1.0)*gconst2*x8760);
evalcond[0]=((((-1.0)*gconst2*r10*x8762))+((r12*x8760))+((r11*x8764)));
evalcond[1]=((((-1.0)*r20*x8765))+((x8760*x8761))+(((-1.0)*r22*x8762)));
evalcond[2]=((((-1.0)*r02*x8762))+((r01*x8763))+(((-1.0)*r00*x8765)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x8765))+(((-1.0)*r12*x8762))+((r11*x8763)));
evalcond[4]=(((cj12*sj11))+((x8759*x8761))+((cj11*sj12))+(((-1.0)*gconst2*r20*x8762))+((r22*x8760)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+((r01*x8764))+(((-1.0)*gconst2*r00*x8762))+((r02*x8760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x8766=((-1.0)*r20);
IkReal x8767=x8614;
CheckValue<IkReal> x8769 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8766),IKFAST_ATAN2_MAGTHRESH);
if(!x8769.valid){
continue;
}
IkReal x8768=((-1.0)*(x8769.value));
sj15=gconst1;
cj15=gconst2;
j15=x8768;
sj13=0;
cj13=1.0;
j13=0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst0=x8768;
IkReal gconst1=(r21*x8767);
IkReal gconst2=(x8766*x8767);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x8770=((-1.0)*r20);
IkReal x8771=x8614;
CheckValue<IkReal> x8773 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8770),IKFAST_ATAN2_MAGTHRESH);
if(!x8773.valid){
continue;
}
IkReal x8772=((-1.0)*(x8773.value));
sj15=gconst1;
cj15=gconst2;
j15=x8772;
sj13=0;
cj13=1.0;
j13=0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst0=x8772;
IkReal gconst1=(r21*x8771);
IkReal gconst2=(x8770*x8771);
j14eval[0]=r02;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8774=((-1.0)*r20);
IkReal x8775=x8614;
CheckValue<IkReal> x8777 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8774),IKFAST_ATAN2_MAGTHRESH);
if(!x8777.valid){
continue;
}
IkReal x8776=((-1.0)*(x8777.value));
sj15=gconst1;
cj15=gconst2;
j15=x8776;
sj13=0;
cj13=1.0;
j13=0;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst0=x8776;
IkReal gconst1=(r21*x8775);
IkReal gconst2=(x8774*x8775);
IkReal x8778=r22*r22;
IkReal x8779=(cj12*r02*sj11);
IkReal x8780=(cj11*r02*sj12);
CheckValue<IkReal> x8784=IKPowWithIntegerCheck(((-1.0)+x8778),-1);
if(!x8784.valid){
continue;
}
IkReal x8781=x8784.value;
if((((1.0)+(((-1.0)*x8778)))) < -0.00001)
continue;
IkReal x8782=IKsqrt(((1.0)+(((-1.0)*x8778))));
IkReal x8783=(r22*x8781*x8782);
j14eval[0]=((IKabs((((x8780*x8783))+((x8779*x8783)))))+(IKabs(((((-1.0)*x8780))+(((-1.0)*x8779))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8785=((1.0)*r02);
IkReal x8786=(cj12*sj11);
IkReal x8787=(cj11*sj12);
IkReal x8788=(gconst1*r01);
IkReal x8789=((1.0)*gconst2*r00);
CheckValue<IkReal> x8790=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8790.valid){
continue;
}
CheckValue<IkReal> x8791 = IKatan2WithCheck(IkReal((((x8786*x8788))+((x8787*x8788))+(((-1.0)*x8786*x8789))+(((-1.0)*x8787*x8789)))),IkReal(((((-1.0)*x8785*x8787))+(((-1.0)*x8785*x8786)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8791.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8790.value)))+(x8791.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8792=IKcos(j14);
IkReal x8793=IKsin(j14);
IkReal x8794=(gconst1*r21);
IkReal x8795=((1.0)*x8792);
IkReal x8796=(gconst1*x8793);
IkReal x8797=(gconst1*x8792);
IkReal x8798=((1.0)*gconst2*x8793);
evalcond[0]=(((r02*x8793))+(((-1.0)*gconst2*r00*x8795))+((r01*x8797)));
evalcond[1]=(((x8793*x8794))+(((-1.0)*r20*x8798))+(((-1.0)*r22*x8795)));
evalcond[2]=((((-1.0)*r12*x8795))+((r11*x8796))+(((-1.0)*r10*x8798)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x8798))+(((-1.0)*r02*x8795))+((r01*x8796)));
evalcond[4]=((((-1.0)*gconst2*r20*x8795))+((x8792*x8794))+((r22*x8793))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r12*x8793))+((r11*x8797))+(((-1.0)*gconst2*r10*x8795))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8799=(gconst1*r01);
IkReal x8800=(gconst2*r00);
CheckValue<IkReal> x8801=IKPowWithIntegerCheck(IKsign(((x8800*x8800)+(((-2.0)*x8799*x8800))+(x8799*x8799)+(r02*r02))),-1);
if(!x8801.valid){
continue;
}
CheckValue<IkReal> x8802 = IKatan2WithCheck(IkReal(((((-1.0)*x8800))+x8799)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8802.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8801.value)))+(x8802.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8803=IKcos(j14);
IkReal x8804=IKsin(j14);
IkReal x8805=(gconst1*r21);
IkReal x8806=((1.0)*x8803);
IkReal x8807=(gconst1*x8804);
IkReal x8808=(gconst1*x8803);
IkReal x8809=((1.0)*gconst2*x8804);
evalcond[0]=(((r02*x8804))+(((-1.0)*gconst2*r00*x8806))+((r01*x8808)));
evalcond[1]=((((-1.0)*r22*x8806))+(((-1.0)*r20*x8809))+((x8804*x8805)));
evalcond[2]=((((-1.0)*r12*x8806))+(((-1.0)*r10*x8809))+((r11*x8807)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8806))+(((-1.0)*r00*x8809))+((r01*x8807)));
evalcond[4]=(((r22*x8804))+(((-1.0)*gconst2*r20*x8806))+((x8803*x8805))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r12*x8804))+((r11*x8808))+(((-1.0)*gconst2*r10*x8806))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8810=((1.0)*gconst2);
CheckValue<IkReal> x8811 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8810))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8811.valid){
continue;
}
CheckValue<IkReal> x8812=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8810))+(((-1.0)*gconst1*r10)))),-1);
if(!x8812.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8811.value)+(((1.5707963267949)*(x8812.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8813=IKcos(j14);
IkReal x8814=IKsin(j14);
IkReal x8815=(gconst1*r21);
IkReal x8816=((1.0)*x8813);
IkReal x8817=(gconst1*x8814);
IkReal x8818=(gconst1*x8813);
IkReal x8819=((1.0)*gconst2*x8814);
evalcond[0]=(((r02*x8814))+((r01*x8818))+(((-1.0)*gconst2*r00*x8816)));
evalcond[1]=((((-1.0)*r22*x8816))+(((-1.0)*r20*x8819))+((x8814*x8815)));
evalcond[2]=((((-1.0)*r10*x8819))+(((-1.0)*r12*x8816))+((r11*x8817)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8816))+((r01*x8817))+(((-1.0)*r00*x8819)));
evalcond[4]=((((-1.0)*gconst2*r20*x8816))+((r22*x8814))+((x8813*x8815))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r12*x8814))+((r11*x8818))+(((-1.0)*gconst2*r10*x8816))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x8820=((-1.0)*r20);
IkReal x8821=x8614;
CheckValue<IkReal> x8823 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8820),IKFAST_ATAN2_MAGTHRESH);
if(!x8823.valid){
continue;
}
IkReal x8822=((-1.0)*(x8823.value));
sj15=gconst1;
cj15=gconst2;
j15=x8822;
sj13=0;
cj13=1.0;
j13=0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst0=x8822;
IkReal gconst1=(r21*x8821);
IkReal gconst2=(x8820*x8821);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x8824=((-1.0)*r20);
IkReal x8825=x8614;
CheckValue<IkReal> x8827 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8824),IKFAST_ATAN2_MAGTHRESH);
if(!x8827.valid){
continue;
}
IkReal x8826=((-1.0)*(x8827.value));
sj15=gconst1;
cj15=gconst2;
j15=x8826;
sj13=0;
cj13=1.0;
j13=0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst0=x8826;
IkReal gconst1=(r21*x8825);
IkReal gconst2=(x8824*x8825);
IkReal x8828=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8832=IKPowWithIntegerCheck(x8828,-1);
if(!x8832.valid){
continue;
}
IkReal x8829=x8832.value;
IkReal x8830=((1.0)*x8829);
IkReal x8831=((((-1.0)*(r02*r02)))+(((-1.0)*x8830*(r00*r00)*(r20*r20)))+(((-1.0)*x8830*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x8829)));
j14eval[0]=x8831;
j14eval[1]=IKsign(x8831);
j14eval[2]=r02;
j14eval[3]=x8828;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8833=((-1.0)*r20);
IkReal x8834=x8614;
CheckValue<IkReal> x8836 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8833),IKFAST_ATAN2_MAGTHRESH);
if(!x8836.valid){
continue;
}
IkReal x8835=((-1.0)*(x8836.value));
sj15=gconst1;
cj15=gconst2;
j15=x8835;
sj13=0;
cj13=1.0;
j13=0;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst0=x8835;
IkReal gconst1=(r21*x8834);
IkReal gconst2=(x8833*x8834);
IkReal x8837=r22*r22;
IkReal x8838=(cj12*r02*sj11);
IkReal x8839=(cj11*r02*sj12);
CheckValue<IkReal> x8843=IKPowWithIntegerCheck(((-1.0)+x8837),-1);
if(!x8843.valid){
continue;
}
IkReal x8840=x8843.value;
if((((1.0)+(((-1.0)*x8837)))) < -0.00001)
continue;
IkReal x8841=IKsqrt(((1.0)+(((-1.0)*x8837))));
IkReal x8842=(r22*x8840*x8841);
j14eval[0]=((IKabs((((x8838*x8842))+((x8839*x8842)))))+(IKabs(((((-1.0)*x8839))+(((-1.0)*x8838))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8844=((1.0)*r02);
IkReal x8845=(cj12*sj11);
IkReal x8846=(cj11*sj12);
IkReal x8847=(gconst1*r01);
IkReal x8848=((1.0)*gconst2*r00);
CheckValue<IkReal> x8849 = IKatan2WithCheck(IkReal((((x8846*x8847))+(((-1.0)*x8845*x8848))+((x8845*x8847))+(((-1.0)*x8846*x8848)))),IkReal(((((-1.0)*x8844*x8846))+(((-1.0)*x8844*x8845)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8849.valid){
continue;
}
CheckValue<IkReal> x8850=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8850.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8849.value)+(((1.5707963267949)*(x8850.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8851=IKcos(j14);
IkReal x8852=IKsin(j14);
IkReal x8853=(gconst1*r21);
IkReal x8854=((1.0)*x8851);
IkReal x8855=(gconst1*x8852);
IkReal x8856=(gconst1*x8851);
IkReal x8857=((1.0)*gconst2*x8852);
evalcond[0]=((((-1.0)*gconst2*r00*x8854))+((r01*x8856))+((r02*x8852)));
evalcond[1]=((((-1.0)*r22*x8854))+((x8852*x8853))+(((-1.0)*r20*x8857)));
evalcond[2]=((((-1.0)*r12*x8854))+(((-1.0)*r10*x8857))+((r11*x8855)));
evalcond[3]=((1.0)+(((-1.0)*r00*x8857))+((r01*x8855))+(((-1.0)*r02*x8854)));
evalcond[4]=(((r22*x8852))+(((-1.0)*gconst2*r20*x8854))+((cj12*sj11))+((x8851*x8853))+((cj11*sj12)));
evalcond[5]=((((-1.0)*gconst2*r10*x8854))+(((-1.0)*sj11*sj12))+((cj11*cj12))+((r11*x8856))+((r12*x8852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8858=(gconst1*r01);
IkReal x8859=(gconst2*r00);
CheckValue<IkReal> x8860=IKPowWithIntegerCheck(IKsign(((((2.0)*x8858*x8859))+(((-1.0)*(x8859*x8859)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8858*x8858))))),-1);
if(!x8860.valid){
continue;
}
CheckValue<IkReal> x8861 = IKatan2WithCheck(IkReal((x8858+(((-1.0)*x8859)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8861.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8860.value)))+(x8861.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8862=IKcos(j14);
IkReal x8863=IKsin(j14);
IkReal x8864=(gconst1*r21);
IkReal x8865=((1.0)*x8862);
IkReal x8866=(gconst1*x8863);
IkReal x8867=(gconst1*x8862);
IkReal x8868=((1.0)*gconst2*x8863);
evalcond[0]=(((r02*x8863))+((r01*x8867))+(((-1.0)*gconst2*r00*x8865)));
evalcond[1]=((((-1.0)*r22*x8865))+((x8863*x8864))+(((-1.0)*r20*x8868)));
evalcond[2]=((((-1.0)*r10*x8868))+((r11*x8866))+(((-1.0)*r12*x8865)));
evalcond[3]=((1.0)+((r01*x8866))+(((-1.0)*r00*x8868))+(((-1.0)*r02*x8865)));
evalcond[4]=(((x8862*x8864))+(((-1.0)*gconst2*r20*x8865))+((cj12*sj11))+((cj11*sj12))+((r22*x8863)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+((r12*x8863))+((r11*x8867))+(((-1.0)*gconst2*r10*x8865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x8869 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8869.valid){
continue;
}
CheckValue<IkReal> x8870=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8870.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8869.value)+(((1.5707963267949)*(x8870.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8871=IKcos(j14);
IkReal x8872=IKsin(j14);
IkReal x8873=(gconst1*r21);
IkReal x8874=((1.0)*x8871);
IkReal x8875=(gconst1*x8872);
IkReal x8876=(gconst1*x8871);
IkReal x8877=((1.0)*gconst2*x8872);
evalcond[0]=(((r02*x8872))+((r01*x8876))+(((-1.0)*gconst2*r00*x8874)));
evalcond[1]=((((-1.0)*r22*x8874))+((x8872*x8873))+(((-1.0)*r20*x8877)));
evalcond[2]=(((r11*x8875))+(((-1.0)*r10*x8877))+(((-1.0)*r12*x8874)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8874))+((r01*x8875))+(((-1.0)*r00*x8877)));
evalcond[4]=((((-1.0)*gconst2*r20*x8874))+((cj12*sj11))+((x8871*x8873))+((r22*x8872))+((cj11*sj12)));
evalcond[5]=((((-1.0)*gconst2*r10*x8874))+(((-1.0)*sj11*sj12))+((cj11*cj12))+((r11*x8876))+((r12*x8872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x8878=((-1.0)*r20);
IkReal x8879=((-1.0)*px);
CheckValue<IkReal> x8881 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8878),IKFAST_ATAN2_MAGTHRESH);
if(!x8881.valid){
continue;
}
IkReal x8880=((-1.0)*(x8881.value));
sj15=gconst1;
cj15=gconst2;
j15=x8880;
sj13=0;
cj13=1.0;
j13=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8879);
rxp1_1=(px*r21);
rxp1_2=(r11*x8879);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8880;
IkReal gconst1=r21;
IkReal gconst2=x8878;
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8882=((-1.0)*r20);
IkReal x8883=((-1.0)*px);
CheckValue<IkReal> x8885 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8882),IKFAST_ATAN2_MAGTHRESH);
if(!x8885.valid){
continue;
}
IkReal x8884=((-1.0)*(x8885.value));
sj15=gconst1;
cj15=gconst2;
j15=x8884;
sj13=0;
cj13=1.0;
j13=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8883);
rxp1_1=(px*r21);
rxp1_2=(r11*x8883);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8884;
IkReal gconst1=r21;
IkReal gconst2=x8882;
j14eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8886=((-1.0)*r20);
IkReal x8887=((-1.0)*px);
CheckValue<IkReal> x8889 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8886),IKFAST_ATAN2_MAGTHRESH);
if(!x8889.valid){
continue;
}
IkReal x8888=((-1.0)*(x8889.value));
sj15=gconst1;
cj15=gconst2;
j15=x8888;
sj13=0;
cj13=1.0;
j13=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8887);
rxp1_1=(px*r21);
rxp1_2=(r11*x8887);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8888;
IkReal gconst1=r21;
IkReal gconst2=x8886;
j14eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x8892=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x8892.valid){
continue;
}
IkReal x8890=x8892.value;
IkReal x8891=(sj10*x8890);
cj14array[0]=((((-1.0)*sj11*sj12*x8891))+((cj11*cj12*x8891)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x8893=IKsin(j14);
IkReal x8894=IKcos(j14);
IkReal x8895=(gconst1*r21);
IkReal x8896=((1.0)*x8894);
IkReal x8897=((1.0)*gconst2*x8893);
evalcond[0]=(r02*x8893);
evalcond[1]=((((-1.0)*sj10))+(((-1.0)*r02*x8896)));
evalcond[2]=((((-1.0)*r20*x8897))+((x8893*x8895)));
evalcond[3]=(((gconst1*r11*x8893))+(((-1.0)*r10*x8897)));
evalcond[4]=(((x8894*x8895))+((cj12*sj11))+(((-1.0)*gconst2*r20*x8896))+((cj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x8900=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x8900.valid){
continue;
}
IkReal x8898=x8900.value;
IkReal x8899=((1.0)*x8898);
cj14array[0]=((((-1.0)*cj11*sj12*x8899))+(((-1.0)*cj12*sj11*x8899)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x8901=IKsin(j14);
IkReal x8902=IKcos(j14);
IkReal x8903=(gconst2*r10);
IkReal x8904=((1.0)*sj10);
IkReal x8905=((1.0)*x8902);
IkReal x8906=(gconst1*x8901);
IkReal x8907=((1.0)*x8901);
evalcond[0]=(r02*x8901);
evalcond[1]=((((-1.0)*x8904))+(((-1.0)*r02*x8905)));
evalcond[2]=(((r21*x8906))+(((-1.0)*gconst2*r20*x8907)));
evalcond[3]=((((-1.0)*x8903*x8907))+((r11*x8906)));
evalcond[4]=((((-1.0)*x8903*x8905))+((gconst1*r11*x8902))+(((-1.0)*cj11*cj12*x8904))+((sj10*sj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x8908=IKPowWithIntegerCheck(r02,-1);
if(!x8908.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x8908.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x8909=IKsin(j14);
IkReal x8910=IKcos(j14);
IkReal x8911=(gconst1*r21);
IkReal x8912=(gconst1*r11);
IkReal x8913=((1.0)*gconst2*r10);
IkReal x8914=((1.0)*gconst2*r20);
evalcond[0]=(r02*x8909);
evalcond[1]=((((-1.0)*x8909*x8914))+((x8909*x8911)));
evalcond[2]=((((-1.0)*x8909*x8913))+((x8909*x8912)));
evalcond[3]=(((x8910*x8911))+(((-1.0)*x8910*x8914))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj11*cj12*sj10))+((x8910*x8912))+(((-1.0)*x8910*x8913))+((sj10*sj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8915=(gconst1*r21);
IkReal x8916=(cj11*sj12);
IkReal x8917=(cj12*sj11);
IkReal x8918=(gconst2*r20);
CheckValue<IkReal> x8919 = IKatan2WithCheck(IkReal((((r22*x8916))+((r22*x8917)))),IkReal(((((-1.0)*x8917*x8918))+((x8915*x8917))+((x8915*x8916))+(((-1.0)*x8916*x8918)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8919.valid){
continue;
}
CheckValue<IkReal> x8920=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8915*x8915)))+(((2.0)*x8915*x8918))+(((-1.0)*(r22*r22)))+(((-1.0)*(x8918*x8918))))),-1);
if(!x8920.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8919.value)+(((1.5707963267949)*(x8920.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8921=IKsin(j14);
IkReal x8922=IKcos(j14);
IkReal x8923=(gconst1*r21);
IkReal x8924=((1.0)*sj10);
IkReal x8925=(sj11*sj12);
IkReal x8926=(cj11*cj12);
IkReal x8927=((1.0)*x8922);
IkReal x8928=(gconst1*x8921);
IkReal x8929=(gconst1*x8922);
IkReal x8930=((1.0)*gconst2*x8921);
evalcond[0]=((((-1.0)*r22*x8927))+(((-1.0)*r20*x8930))+((x8921*x8923)));
evalcond[1]=((((-1.0)*r10*x8930))+cj10+(((-1.0)*r12*x8927))+((r11*x8928)));
evalcond[2]=((((-1.0)*r02*x8927))+(((-1.0)*x8924))+(((-1.0)*r00*x8930))+((r01*x8928)));
evalcond[3]=(((x8922*x8923))+(((-1.0)*gconst2*r20*x8927))+((r22*x8921))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((cj10*x8925))+(((-1.0)*cj10*x8926))+((r02*x8921))+(((-1.0)*gconst2*r00*x8927))+((r01*x8929)));
evalcond[5]=((((-1.0)*gconst2*r10*x8927))+((sj10*x8925))+((r12*x8921))+((r11*x8929))+(((-1.0)*x8924*x8926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8931=((1.0)*gconst2);
CheckValue<IkReal> x8932=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8931))+(((-1.0)*gconst1*r10)))),-1);
if(!x8932.valid){
continue;
}
CheckValue<IkReal> x8933 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst1*r21*sj10))+(((-1.0)*r20*sj10*x8931)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8933.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8932.value)))+(x8933.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8934=IKsin(j14);
IkReal x8935=IKcos(j14);
IkReal x8936=(gconst1*r21);
IkReal x8937=((1.0)*sj10);
IkReal x8938=(sj11*sj12);
IkReal x8939=(cj11*cj12);
IkReal x8940=((1.0)*x8935);
IkReal x8941=(gconst1*x8934);
IkReal x8942=(gconst1*x8935);
IkReal x8943=((1.0)*gconst2*x8934);
evalcond[0]=((((-1.0)*r22*x8940))+((x8934*x8936))+(((-1.0)*r20*x8943)));
evalcond[1]=(((r11*x8941))+(((-1.0)*r12*x8940))+cj10+(((-1.0)*r10*x8943)));
evalcond[2]=((((-1.0)*r00*x8943))+((r01*x8941))+(((-1.0)*r02*x8940))+(((-1.0)*x8937)));
evalcond[3]=(((x8935*x8936))+(((-1.0)*gconst2*r20*x8940))+((cj12*sj11))+((cj11*sj12))+((r22*x8934)));
evalcond[4]=(((r01*x8942))+(((-1.0)*gconst2*r00*x8940))+(((-1.0)*cj10*x8939))+((r02*x8934))+((cj10*x8938)));
evalcond[5]=(((r12*x8934))+((r11*x8942))+(((-1.0)*gconst2*r10*x8940))+((sj10*x8938))+(((-1.0)*x8937*x8939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8944=((1.0)*gconst2);
CheckValue<IkReal> x8945 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst1*r21))+(((-1.0)*cj10*r20*x8944)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8945.valid){
continue;
}
CheckValue<IkReal> x8946=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8944))+(((-1.0)*gconst1*r00)))),-1);
if(!x8946.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8945.value)+(((1.5707963267949)*(x8946.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8947=IKsin(j14);
IkReal x8948=IKcos(j14);
IkReal x8949=(gconst1*r21);
IkReal x8950=((1.0)*sj10);
IkReal x8951=(sj11*sj12);
IkReal x8952=(cj11*cj12);
IkReal x8953=((1.0)*x8948);
IkReal x8954=(gconst1*x8947);
IkReal x8955=(gconst1*x8948);
IkReal x8956=((1.0)*gconst2*x8947);
evalcond[0]=(((x8947*x8949))+(((-1.0)*r22*x8953))+(((-1.0)*r20*x8956)));
evalcond[1]=((((-1.0)*r10*x8956))+(((-1.0)*r12*x8953))+cj10+((r11*x8954)));
evalcond[2]=((((-1.0)*r00*x8956))+((r01*x8954))+(((-1.0)*r02*x8953))+(((-1.0)*x8950)));
evalcond[3]=(((x8948*x8949))+((r22*x8947))+(((-1.0)*gconst2*r20*x8953))+((cj12*sj11))+((cj11*sj12)));
evalcond[4]=(((r02*x8947))+((r01*x8955))+((cj10*x8951))+(((-1.0)*cj10*x8952))+(((-1.0)*gconst2*r00*x8953)));
evalcond[5]=(((sj10*x8951))+(((-1.0)*gconst2*r10*x8953))+(((-1.0)*x8950*x8952))+((r12*x8947))+((r11*x8955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x8957=((-1.0)*r20);
IkReal x8958=x8614;
CheckValue<IkReal> x8960 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8957),IKFAST_ATAN2_MAGTHRESH);
if(!x8960.valid){
continue;
}
IkReal x8959=((-1.0)*(x8960.value));
sj15=gconst1;
cj15=gconst2;
j15=x8959;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst0=x8959;
IkReal gconst1=(r21*x8958);
IkReal gconst2=(x8957*x8958);
j14eval[0]=cj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8961=((-1.0)*r20);
IkReal x8962=x8614;
CheckValue<IkReal> x8964 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8961),IKFAST_ATAN2_MAGTHRESH);
if(!x8964.valid){
continue;
}
IkReal x8963=((-1.0)*(x8964.value));
sj15=gconst1;
cj15=gconst2;
j15=x8963;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst0=x8963;
IkReal gconst1=(r21*x8962);
IkReal gconst2=(x8961*x8962);
j14eval[0]=sj10;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x8965=((-1.0)*r20);
IkReal x8966=x8614;
CheckValue<IkReal> x8968 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8965),IKFAST_ATAN2_MAGTHRESH);
if(!x8968.valid){
continue;
}
IkReal x8967=((-1.0)*(x8968.value));
sj15=gconst1;
cj15=gconst2;
j15=x8967;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst0=x8967;
IkReal gconst1=(r21*x8966);
IkReal gconst2=(x8965*x8966);
IkReal x8969=r22*r22;
CheckValue<IkReal> x8972=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8969))),-1);
if(!x8972.valid){
continue;
}
IkReal x8970=x8972.value;
IkReal x8971=((((2.0)*x8970*(r20*r20)*(r21*r21)))+((x8970*(r20*r20*r20*r20)))+((x8970*(r21*r21*r21*r21)))+x8969);
j14eval[0]=x8971;
j14eval[1]=IKsign(x8971);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x8973=((-1.0)*r20);
IkReal x8974=x8614;
CheckValue<IkReal> x8976 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8973),IKFAST_ATAN2_MAGTHRESH);
if(!x8976.valid){
continue;
}
IkReal x8975=((-1.0)*(x8976.value));
sj15=gconst1;
cj15=gconst2;
j15=x8975;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst0=x8975;
IkReal gconst1=(r21*x8974);
IkReal gconst2=(x8973*x8974);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x8977=((-1.0)*r20);
IkReal x8978=x8614;
CheckValue<IkReal> x8980 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8977),IKFAST_ATAN2_MAGTHRESH);
if(!x8980.valid){
continue;
}
IkReal x8979=((-1.0)*(x8980.value));
sj15=gconst1;
cj15=gconst2;
j15=x8979;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst0=x8979;
IkReal gconst1=(r21*x8978);
IkReal gconst2=(x8977*x8978);
j14eval[0]=r12;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x8981=((-1.0)*r20);
IkReal x8982=x8614;
CheckValue<IkReal> x8984 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8981),IKFAST_ATAN2_MAGTHRESH);
if(!x8984.valid){
continue;
}
IkReal x8983=((-1.0)*(x8984.value));
sj15=gconst1;
cj15=gconst2;
j15=x8983;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst0=x8983;
IkReal gconst1=(r21*x8982);
IkReal gconst2=(x8981*x8982);
IkReal x8985=r22*r22;
IkReal x8986=(cj12*r12*sj11);
IkReal x8987=(cj11*r12*sj12);
CheckValue<IkReal> x8991=IKPowWithIntegerCheck(((-1.0)+x8985),-1);
if(!x8991.valid){
continue;
}
IkReal x8988=x8991.value;
if((((1.0)+(((-1.0)*x8985)))) < -0.00001)
continue;
IkReal x8989=IKsqrt(((1.0)+(((-1.0)*x8985))));
IkReal x8990=((1.0)*r22*x8988*x8989);
j14eval[0]=((IKabs(((((-1.0)*x8986*x8990))+(((-1.0)*x8987*x8990)))))+(IKabs((x8987+x8986))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x8992=(cj12*sj11);
IkReal x8993=((1.0)*gconst1);
IkReal x8994=(cj11*sj12);
IkReal x8995=(gconst2*r10);
CheckValue<IkReal> x8996 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x8993*x8994))+((x8994*x8995))+(((-1.0)*r11*x8992*x8993))+((x8992*x8995)))),IkReal((((r12*x8992))+((r12*x8994)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8996.valid){
continue;
}
CheckValue<IkReal> x8997=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x8993)))),-1);
if(!x8997.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x8996.value)+(((1.5707963267949)*(x8997.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x8998=IKsin(j14);
IkReal x8999=IKcos(j14);
IkReal x9000=(gconst1*r21);
IkReal x9001=(gconst1*r11);
IkReal x9002=(gconst1*r01);
IkReal x9003=(gconst2*r10);
IkReal x9004=(gconst2*r20);
IkReal x9005=(gconst2*r00);
IkReal x9006=((1.0)*x8999);
IkReal x9007=((1.0)*x8998);
evalcond[0]=((((-1.0)*r22*x9006))+(((-1.0)*x9004*x9007))+((x8998*x9000)));
evalcond[1]=((((-1.0)*r02*x9006))+((x8998*x9002))+(((-1.0)*x9005*x9007)));
evalcond[2]=((((-1.0)*r12*x9007))+(((-1.0)*x9001*x9006))+((x8999*x9003)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9006))+(((-1.0)*x9003*x9007))+((x8998*x9001)));
evalcond[4]=((((-1.0)*r22*x9007))+(((-1.0)*x9000*x9006))+((cj12*sj11))+((x8999*x9004))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r02*x9007))+((x8999*x9005))+(((-1.0)*x9002*x9006))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9008=(gconst1*r11);
IkReal x9009=(gconst2*r10);
CheckValue<IkReal> x9010=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9008*x9008)+(((-2.0)*x9008*x9009))+(x9009*x9009))),-1);
if(!x9010.valid){
continue;
}
CheckValue<IkReal> x9011 = IKatan2WithCheck(IkReal(((((-1.0)*x9008))+x9009)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9011.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9010.value)))+(x9011.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9012=IKsin(j14);
IkReal x9013=IKcos(j14);
IkReal x9014=(gconst1*r21);
IkReal x9015=(gconst1*r11);
IkReal x9016=(gconst1*r01);
IkReal x9017=(gconst2*r10);
IkReal x9018=(gconst2*r20);
IkReal x9019=(gconst2*r00);
IkReal x9020=((1.0)*x9013);
IkReal x9021=((1.0)*x9012);
evalcond[0]=((((-1.0)*x9018*x9021))+((x9012*x9014))+(((-1.0)*r22*x9020)));
evalcond[1]=(((x9012*x9016))+(((-1.0)*r02*x9020))+(((-1.0)*x9019*x9021)));
evalcond[2]=((((-1.0)*r12*x9021))+(((-1.0)*x9015*x9020))+((x9013*x9017)));
evalcond[3]=((1.0)+(((-1.0)*x9017*x9021))+(((-1.0)*r12*x9020))+((x9012*x9015)));
evalcond[4]=(((cj12*sj11))+(((-1.0)*r22*x9021))+(((-1.0)*x9014*x9020))+((x9013*x9018))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x9016*x9020))+((x9013*x9019))+(((-1.0)*r02*x9021))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9022=((1.0)*gconst2);
CheckValue<IkReal> x9023 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9022))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9023.valid){
continue;
}
CheckValue<IkReal> x9024=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9022)))),-1);
if(!x9024.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9023.value)+(((1.5707963267949)*(x9024.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9025=IKsin(j14);
IkReal x9026=IKcos(j14);
IkReal x9027=(gconst1*r21);
IkReal x9028=(gconst1*r11);
IkReal x9029=(gconst1*r01);
IkReal x9030=(gconst2*r10);
IkReal x9031=(gconst2*r20);
IkReal x9032=(gconst2*r00);
IkReal x9033=((1.0)*x9026);
IkReal x9034=((1.0)*x9025);
evalcond[0]=((((-1.0)*x9031*x9034))+(((-1.0)*r22*x9033))+((x9025*x9027)));
evalcond[1]=((((-1.0)*x9032*x9034))+((x9025*x9029))+(((-1.0)*r02*x9033)));
evalcond[2]=((((-1.0)*r12*x9034))+((x9026*x9030))+(((-1.0)*x9028*x9033)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9033))+(((-1.0)*x9030*x9034))+((x9025*x9028)));
evalcond[4]=(((x9026*x9031))+(((-1.0)*x9027*x9033))+((cj12*sj11))+(((-1.0)*r22*x9034))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x9026*x9032))+(((-1.0)*x9029*x9033))+(((-1.0)*cj11*cj12))+(((-1.0)*r02*x9034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x9035=((-1.0)*r20);
IkReal x9036=x8614;
CheckValue<IkReal> x9038 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9035),IKFAST_ATAN2_MAGTHRESH);
if(!x9038.valid){
continue;
}
IkReal x9037=((-1.0)*(x9038.value));
sj15=gconst1;
cj15=gconst2;
j15=x9037;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst0=x9037;
IkReal gconst1=(r21*x9036);
IkReal gconst2=(x9035*x9036);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x9039=((-1.0)*r20);
IkReal x9040=x8614;
CheckValue<IkReal> x9042 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9039),IKFAST_ATAN2_MAGTHRESH);
if(!x9042.valid){
continue;
}
IkReal x9041=((-1.0)*(x9042.value));
sj15=gconst1;
cj15=gconst2;
j15=x9041;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst0=x9041;
IkReal gconst1=(r21*x9040);
IkReal gconst2=(x9039*x9040);
IkReal x9043=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9047=IKPowWithIntegerCheck(x9043,-1);
if(!x9047.valid){
continue;
}
IkReal x9044=x9047.value;
IkReal x9045=((1.0)*x9044);
IkReal x9046=((((-1.0)*x9045*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x9044))+(((-1.0)*(r12*r12)))+(((-1.0)*x9045*(r10*r10)*(r20*r20))));
j14eval[0]=x9046;
j14eval[1]=r12;
j14eval[2]=x9043;
j14eval[3]=IKsign(x9046);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9048=((-1.0)*r20);
IkReal x9049=x8614;
CheckValue<IkReal> x9051 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9048),IKFAST_ATAN2_MAGTHRESH);
if(!x9051.valid){
continue;
}
IkReal x9050=((-1.0)*(x9051.value));
sj15=gconst1;
cj15=gconst2;
j15=x9050;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst0=x9050;
IkReal gconst1=(r21*x9049);
IkReal gconst2=(x9048*x9049);
IkReal x9052=r22*r22;
IkReal x9053=(cj12*r12*sj11);
IkReal x9054=(cj11*r12*sj12);
CheckValue<IkReal> x9058=IKPowWithIntegerCheck(((-1.0)+x9052),-1);
if(!x9058.valid){
continue;
}
IkReal x9055=x9058.value;
if((((1.0)+(((-1.0)*x9052)))) < -0.00001)
continue;
IkReal x9056=IKsqrt(((1.0)+(((-1.0)*x9052))));
IkReal x9057=((1.0)*r22*x9055*x9056);
j14eval[0]=((IKabs((x9053+x9054)))+(IKabs(((((-1.0)*x9053*x9057))+(((-1.0)*x9054*x9057))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9059=(cj12*sj11);
IkReal x9060=((1.0)*gconst1);
IkReal x9061=(cj11*sj12);
IkReal x9062=(gconst2*r10);
CheckValue<IkReal> x9063 = IKatan2WithCheck(IkReal((((x9061*x9062))+(((-1.0)*r11*x9059*x9060))+(((-1.0)*r11*x9060*x9061))+((x9059*x9062)))),IkReal((((r12*x9061))+((r12*x9059)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9063.valid){
continue;
}
CheckValue<IkReal> x9064=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9060)))),-1);
if(!x9064.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9063.value)+(((1.5707963267949)*(x9064.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9065=IKsin(j14);
IkReal x9066=IKcos(j14);
IkReal x9067=(gconst1*r21);
IkReal x9068=(gconst1*r11);
IkReal x9069=(gconst1*r01);
IkReal x9070=(gconst2*r10);
IkReal x9071=(gconst2*r20);
IkReal x9072=(gconst2*r00);
IkReal x9073=((1.0)*x9066);
IkReal x9074=((1.0)*x9065);
evalcond[0]=((((-1.0)*x9071*x9074))+(((-1.0)*r22*x9073))+((x9065*x9067)));
evalcond[1]=((((-1.0)*x9072*x9074))+(((-1.0)*r02*x9073))+((x9065*x9069)));
evalcond[2]=(((x9066*x9070))+(((-1.0)*r12*x9074))+(((-1.0)*x9068*x9073)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9073))+((x9065*x9068))+(((-1.0)*x9070*x9074)));
evalcond[4]=(((x9066*x9071))+(((-1.0)*r22*x9074))+((cj12*sj11))+(((-1.0)*x9067*x9073))+((cj11*sj12)));
evalcond[5]=(((x9066*x9072))+(((-1.0)*sj11*sj12))+(((-1.0)*r02*x9074))+((cj11*cj12))+(((-1.0)*x9069*x9073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9075=(gconst1*r11);
IkReal x9076=(gconst2*r10);
CheckValue<IkReal> x9077 = IKatan2WithCheck(IkReal(((((-1.0)*x9075))+x9076)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9077.valid){
continue;
}
CheckValue<IkReal> x9078=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9075*x9075)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9076*x9076)))+(((2.0)*x9075*x9076)))),-1);
if(!x9078.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9077.value)+(((1.5707963267949)*(x9078.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9079=IKsin(j14);
IkReal x9080=IKcos(j14);
IkReal x9081=(gconst1*r21);
IkReal x9082=(gconst1*r11);
IkReal x9083=(gconst1*r01);
IkReal x9084=(gconst2*r10);
IkReal x9085=(gconst2*r20);
IkReal x9086=(gconst2*r00);
IkReal x9087=((1.0)*x9080);
IkReal x9088=((1.0)*x9079);
evalcond[0]=((((-1.0)*x9085*x9088))+(((-1.0)*r22*x9087))+((x9079*x9081)));
evalcond[1]=((((-1.0)*x9086*x9088))+(((-1.0)*r02*x9087))+((x9079*x9083)));
evalcond[2]=(((x9080*x9084))+(((-1.0)*x9082*x9087))+(((-1.0)*r12*x9088)));
evalcond[3]=((-1.0)+(((-1.0)*x9084*x9088))+((x9079*x9082))+(((-1.0)*r12*x9087)));
evalcond[4]=(((x9080*x9085))+(((-1.0)*x9081*x9087))+(((-1.0)*r22*x9088))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+((x9080*x9086))+(((-1.0)*r02*x9088))+(((-1.0)*x9083*x9087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x9089 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9089.valid){
continue;
}
CheckValue<IkReal> x9090=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9090.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9089.value)+(((1.5707963267949)*(x9090.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9091=IKsin(j14);
IkReal x9092=IKcos(j14);
IkReal x9093=(gconst1*r21);
IkReal x9094=(gconst1*r11);
IkReal x9095=(gconst1*r01);
IkReal x9096=(gconst2*r10);
IkReal x9097=(gconst2*r20);
IkReal x9098=(gconst2*r00);
IkReal x9099=((1.0)*x9092);
IkReal x9100=((1.0)*x9091);
evalcond[0]=(((x9091*x9093))+(((-1.0)*r22*x9099))+(((-1.0)*x9097*x9100)));
evalcond[1]=(((x9091*x9095))+(((-1.0)*r02*x9099))+(((-1.0)*x9098*x9100)));
evalcond[2]=(((x9092*x9096))+(((-1.0)*r12*x9100))+(((-1.0)*x9094*x9099)));
evalcond[3]=((-1.0)+((x9091*x9094))+(((-1.0)*x9096*x9100))+(((-1.0)*r12*x9099)));
evalcond[4]=(((x9092*x9097))+(((-1.0)*r22*x9100))+(((-1.0)*x9093*x9099))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*r02*x9100))+((x9092*x9098))+(((-1.0)*x9095*x9099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x9101=((-1.0)*r20);
IkReal x9102=x8614;
CheckValue<IkReal> x9104 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9101),IKFAST_ATAN2_MAGTHRESH);
if(!x9104.valid){
continue;
}
IkReal x9103=((-1.0)*(x9104.value));
sj15=gconst1;
cj15=gconst2;
j15=x9103;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst0=x9103;
IkReal gconst1=(r21*x9102);
IkReal gconst2=(x9101*x9102);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x9105=((-1.0)*r20);
IkReal x9106=x8614;
CheckValue<IkReal> x9108 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9105),IKFAST_ATAN2_MAGTHRESH);
if(!x9108.valid){
continue;
}
IkReal x9107=((-1.0)*(x9108.value));
sj15=gconst1;
cj15=gconst2;
j15=x9107;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst0=x9107;
IkReal gconst1=(r21*x9106);
IkReal gconst2=(x9105*x9106);
IkReal x9109=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9113=IKPowWithIntegerCheck(x9109,-1);
if(!x9113.valid){
continue;
}
IkReal x9110=x9113.value;
IkReal x9111=((1.0)*x9110);
IkReal x9112=((((-1.0)*x9111*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x9110))+(((-1.0)*(r02*r02)))+(((-1.0)*x9111*(r00*r00)*(r20*r20))));
j14eval[0]=x9112;
j14eval[1]=IKsign(x9112);
j14eval[2]=r02;
j14eval[3]=x9109;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9114=((-1.0)*r20);
IkReal x9115=x8614;
CheckValue<IkReal> x9117 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9114),IKFAST_ATAN2_MAGTHRESH);
if(!x9117.valid){
continue;
}
IkReal x9116=((-1.0)*(x9117.value));
sj15=gconst1;
cj15=gconst2;
j15=x9116;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst0=x9116;
IkReal gconst1=(r21*x9115);
IkReal gconst2=(x9114*x9115);
IkReal x9118=r22*r22;
IkReal x9119=(cj12*r02*sj11);
IkReal x9120=(cj11*r02*sj12);
CheckValue<IkReal> x9124=IKPowWithIntegerCheck(((-1.0)+x9118),-1);
if(!x9124.valid){
continue;
}
IkReal x9121=x9124.value;
if((((1.0)+(((-1.0)*x9118)))) < -0.00001)
continue;
IkReal x9122=IKsqrt(((1.0)+(((-1.0)*x9118))));
IkReal x9123=((1.0)*r22*x9121*x9122);
j14eval[0]=((IKabs((x9119+x9120)))+(IKabs(((((-1.0)*x9119*x9123))+(((-1.0)*x9120*x9123))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9125=(cj12*sj11);
IkReal x9126=(cj11*sj12);
IkReal x9127=(gconst2*r00);
IkReal x9128=((1.0)*gconst1*r01);
CheckValue<IkReal> x9129=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9129.valid){
continue;
}
CheckValue<IkReal> x9130 = IKatan2WithCheck(IkReal((((x9125*x9127))+((x9126*x9127))+(((-1.0)*x9125*x9128))+(((-1.0)*x9126*x9128)))),IkReal((((r02*x9125))+((r02*x9126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9130.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9129.value)))+(x9130.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9131=IKsin(j14);
IkReal x9132=IKcos(j14);
IkReal x9133=(gconst1*r21);
IkReal x9134=(gconst1*r11);
IkReal x9135=(gconst1*r01);
IkReal x9136=(gconst2*r10);
IkReal x9137=(gconst2*r20);
IkReal x9138=(gconst2*r00);
IkReal x9139=((1.0)*x9132);
IkReal x9140=((1.0)*x9131);
evalcond[0]=(((x9131*x9133))+(((-1.0)*r22*x9139))+(((-1.0)*x9137*x9140)));
evalcond[1]=(((x9131*x9134))+(((-1.0)*r12*x9139))+(((-1.0)*x9136*x9140)));
evalcond[2]=(((x9132*x9138))+(((-1.0)*x9135*x9139))+(((-1.0)*r02*x9140)));
evalcond[3]=((-1.0)+((x9131*x9135))+(((-1.0)*r02*x9139))+(((-1.0)*x9138*x9140)));
evalcond[4]=(((x9132*x9137))+(((-1.0)*x9133*x9139))+(((-1.0)*r22*x9140))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x9132*x9136))+(((-1.0)*x9134*x9139))+(((-1.0)*r12*x9140))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9141=(gconst2*r00);
IkReal x9142=(gconst1*r01);
CheckValue<IkReal> x9143=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9142*x9142)))+(((-1.0)*(x9141*x9141)))+(((-1.0)*(r02*r02)))+(((2.0)*x9141*x9142)))),-1);
if(!x9143.valid){
continue;
}
CheckValue<IkReal> x9144 = IKatan2WithCheck(IkReal(((((-1.0)*x9142))+x9141)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9144.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9143.value)))+(x9144.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9145=IKsin(j14);
IkReal x9146=IKcos(j14);
IkReal x9147=(gconst1*r21);
IkReal x9148=(gconst1*r11);
IkReal x9149=(gconst1*r01);
IkReal x9150=(gconst2*r10);
IkReal x9151=(gconst2*r20);
IkReal x9152=(gconst2*r00);
IkReal x9153=((1.0)*x9146);
IkReal x9154=((1.0)*x9145);
evalcond[0]=(((x9145*x9147))+(((-1.0)*x9151*x9154))+(((-1.0)*r22*x9153)));
evalcond[1]=((((-1.0)*r12*x9153))+((x9145*x9148))+(((-1.0)*x9150*x9154)));
evalcond[2]=((((-1.0)*r02*x9154))+(((-1.0)*x9149*x9153))+((x9146*x9152)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9153))+(((-1.0)*x9152*x9154))+((x9145*x9149)));
evalcond[4]=((((-1.0)*x9147*x9153))+(((-1.0)*r22*x9154))+((cj12*sj11))+((x9146*x9151))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r12*x9154))+(((-1.0)*x9148*x9153))+((x9146*x9150))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9155=((1.0)*gconst2);
CheckValue<IkReal> x9156=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9155))+(((-1.0)*gconst1*r10)))),-1);
if(!x9156.valid){
continue;
}
CheckValue<IkReal> x9157 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9155))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9157.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9156.value)))+(x9157.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9158=IKsin(j14);
IkReal x9159=IKcos(j14);
IkReal x9160=(gconst1*r21);
IkReal x9161=(gconst1*r11);
IkReal x9162=(gconst1*r01);
IkReal x9163=(gconst2*r10);
IkReal x9164=(gconst2*r20);
IkReal x9165=(gconst2*r00);
IkReal x9166=((1.0)*x9159);
IkReal x9167=((1.0)*x9158);
evalcond[0]=((((-1.0)*r22*x9166))+(((-1.0)*x9164*x9167))+((x9158*x9160)));
evalcond[1]=((((-1.0)*x9163*x9167))+(((-1.0)*r12*x9166))+((x9158*x9161)));
evalcond[2]=(((x9159*x9165))+(((-1.0)*x9162*x9166))+(((-1.0)*r02*x9167)));
evalcond[3]=((-1.0)+(((-1.0)*x9165*x9167))+(((-1.0)*r02*x9166))+((x9158*x9162)));
evalcond[4]=(((x9159*x9164))+(((-1.0)*r22*x9167))+(((-1.0)*x9160*x9166))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x9159*x9163))+(((-1.0)*r12*x9167))+(((-1.0)*x9161*x9166))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x9168=((-1.0)*r20);
IkReal x9169=x8614;
CheckValue<IkReal> x9171 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9168),IKFAST_ATAN2_MAGTHRESH);
if(!x9171.valid){
continue;
}
IkReal x9170=((-1.0)*(x9171.value));
sj15=gconst1;
cj15=gconst2;
j15=x9170;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst0=x9170;
IkReal gconst1=(r21*x9169);
IkReal gconst2=(x9168*x9169);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x9172=((-1.0)*r20);
IkReal x9173=x8614;
CheckValue<IkReal> x9175 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9172),IKFAST_ATAN2_MAGTHRESH);
if(!x9175.valid){
continue;
}
IkReal x9174=((-1.0)*(x9175.value));
sj15=gconst1;
cj15=gconst2;
j15=x9174;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst0=x9174;
IkReal gconst1=(r21*x9173);
IkReal gconst2=(x9172*x9173);
j14eval[0]=r02;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9176=((-1.0)*r20);
IkReal x9177=x8614;
CheckValue<IkReal> x9179 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9176),IKFAST_ATAN2_MAGTHRESH);
if(!x9179.valid){
continue;
}
IkReal x9178=((-1.0)*(x9179.value));
sj15=gconst1;
cj15=gconst2;
j15=x9178;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst0=x9178;
IkReal gconst1=(r21*x9177);
IkReal gconst2=(x9176*x9177);
IkReal x9180=r22*r22;
IkReal x9181=(cj12*r02*sj11);
IkReal x9182=(cj11*r02*sj12);
CheckValue<IkReal> x9186=IKPowWithIntegerCheck(((-1.0)+x9180),-1);
if(!x9186.valid){
continue;
}
IkReal x9183=x9186.value;
if((((1.0)+(((-1.0)*x9180)))) < -0.00001)
continue;
IkReal x9184=IKsqrt(((1.0)+(((-1.0)*x9180))));
IkReal x9185=((1.0)*r22*x9183*x9184);
j14eval[0]=((IKabs((x9182+x9181)))+(IKabs(((((-1.0)*x9182*x9185))+(((-1.0)*x9181*x9185))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9187=(cj12*sj11);
IkReal x9188=(cj11*sj12);
IkReal x9189=(gconst2*r00);
IkReal x9190=((1.0)*gconst1*r01);
CheckValue<IkReal> x9191 = IKatan2WithCheck(IkReal(((((-1.0)*x9188*x9190))+((x9187*x9189))+((x9188*x9189))+(((-1.0)*x9187*x9190)))),IkReal((((r02*x9187))+((r02*x9188)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9191.valid){
continue;
}
CheckValue<IkReal> x9192=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9192.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9191.value)+(((1.5707963267949)*(x9192.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9193=IKsin(j14);
IkReal x9194=IKcos(j14);
IkReal x9195=(gconst1*r21);
IkReal x9196=(gconst1*r11);
IkReal x9197=(gconst1*r01);
IkReal x9198=(gconst2*r10);
IkReal x9199=(gconst2*r20);
IkReal x9200=(gconst2*r00);
IkReal x9201=((1.0)*x9194);
IkReal x9202=((1.0)*x9193);
evalcond[0]=((((-1.0)*x9199*x9202))+((x9193*x9195))+(((-1.0)*r22*x9201)));
evalcond[1]=((((-1.0)*x9198*x9202))+(((-1.0)*r12*x9201))+((x9193*x9196)));
evalcond[2]=((((-1.0)*x9197*x9201))+(((-1.0)*r02*x9202))+((x9194*x9200)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9201))+(((-1.0)*x9200*x9202))+((x9193*x9197)));
evalcond[4]=(((cj12*sj11))+((x9194*x9199))+(((-1.0)*x9195*x9201))+(((-1.0)*r22*x9202))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*r12*x9202))+((x9194*x9198))+(((-1.0)*x9196*x9201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9203=(gconst1*r01);
IkReal x9204=(gconst2*r00);
CheckValue<IkReal> x9205=IKPowWithIntegerCheck(IKsign(((x9203*x9203)+(((-2.0)*x9203*x9204))+(x9204*x9204)+(r02*r02))),-1);
if(!x9205.valid){
continue;
}
CheckValue<IkReal> x9206 = IKatan2WithCheck(IkReal((x9204+(((-1.0)*x9203)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9206.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9205.value)))+(x9206.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9207=IKsin(j14);
IkReal x9208=IKcos(j14);
IkReal x9209=(gconst1*r21);
IkReal x9210=(gconst1*r11);
IkReal x9211=(gconst1*r01);
IkReal x9212=(gconst2*r10);
IkReal x9213=(gconst2*r20);
IkReal x9214=(gconst2*r00);
IkReal x9215=((1.0)*x9208);
IkReal x9216=((1.0)*x9207);
evalcond[0]=((((-1.0)*x9213*x9216))+((x9207*x9209))+(((-1.0)*r22*x9215)));
evalcond[1]=((((-1.0)*x9212*x9216))+((x9207*x9210))+(((-1.0)*r12*x9215)));
evalcond[2]=((((-1.0)*r02*x9216))+(((-1.0)*x9211*x9215))+((x9208*x9214)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9215))+((x9207*x9211))+(((-1.0)*x9214*x9216)));
evalcond[4]=(((x9208*x9213))+((cj12*sj11))+(((-1.0)*x9209*x9215))+((cj11*sj12))+(((-1.0)*r22*x9216)));
evalcond[5]=((((-1.0)*sj11*sj12))+(((-1.0)*x9210*x9215))+((cj11*cj12))+((x9208*x9212))+(((-1.0)*r12*x9216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x9217 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9217.valid){
continue;
}
CheckValue<IkReal> x9218=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9218.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9217.value)+(((1.5707963267949)*(x9218.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9219=IKsin(j14);
IkReal x9220=IKcos(j14);
IkReal x9221=(gconst1*r21);
IkReal x9222=(gconst1*r11);
IkReal x9223=(gconst1*r01);
IkReal x9224=(gconst2*r10);
IkReal x9225=(gconst2*r20);
IkReal x9226=(gconst2*r00);
IkReal x9227=((1.0)*x9220);
IkReal x9228=((1.0)*x9219);
evalcond[0]=((((-1.0)*x9225*x9228))+((x9219*x9221))+(((-1.0)*r22*x9227)));
evalcond[1]=((((-1.0)*x9224*x9228))+(((-1.0)*r12*x9227))+((x9219*x9222)));
evalcond[2]=((((-1.0)*r02*x9228))+((x9220*x9226))+(((-1.0)*x9223*x9227)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9227))+(((-1.0)*x9226*x9228))+((x9219*x9223)));
evalcond[4]=((((-1.0)*x9221*x9227))+((x9220*x9225))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*r22*x9228)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+((x9220*x9224))+(((-1.0)*r12*x9228))+(((-1.0)*x9222*x9227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x9229=((-1.0)*r20);
IkReal x9230=((-1.0)*px);
CheckValue<IkReal> x9232 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9229),IKFAST_ATAN2_MAGTHRESH);
if(!x9232.valid){
continue;
}
IkReal x9231=((-1.0)*(x9232.value));
sj15=gconst1;
cj15=gconst2;
j15=x9231;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9230);
rxp1_1=(px*r21);
rxp1_2=(r11*x9230);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9231;
IkReal gconst1=r21;
IkReal gconst2=x9229;
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9233=((-1.0)*r20);
IkReal x9234=((-1.0)*px);
CheckValue<IkReal> x9236 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9233),IKFAST_ATAN2_MAGTHRESH);
if(!x9236.valid){
continue;
}
IkReal x9235=((-1.0)*(x9236.value));
sj15=gconst1;
cj15=gconst2;
j15=x9235;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9234);
rxp1_1=(px*r21);
rxp1_2=(r11*x9234);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9235;
IkReal gconst1=r21;
IkReal gconst2=x9233;
j14eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9237=((-1.0)*r20);
IkReal x9238=((-1.0)*px);
CheckValue<IkReal> x9240 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9237),IKFAST_ATAN2_MAGTHRESH);
if(!x9240.valid){
continue;
}
IkReal x9239=((-1.0)*(x9240.value));
sj15=gconst1;
cj15=gconst2;
j15=x9239;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9238);
rxp1_1=(px*r21);
rxp1_2=(r11*x9238);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9239;
IkReal gconst1=r21;
IkReal gconst2=x9237;
j14eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x9243=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9243.valid){
continue;
}
IkReal x9241=x9243.value;
IkReal x9242=(sj10*x9241);
cj14array[0]=((((-1.0)*sj11*sj12*x9242))+((cj11*cj12*x9242)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x9244=IKsin(j14);
IkReal x9245=IKcos(j14);
IkReal x9246=(gconst1*r21);
IkReal x9247=((1.0)*x9245);
IkReal x9248=((1.0)*gconst2*x9244);
evalcond[0]=((-1.0)*r02*x9244);
evalcond[1]=((((-1.0)*sj10))+(((-1.0)*r02*x9247)));
evalcond[2]=(((x9244*x9246))+(((-1.0)*r20*x9248)));
evalcond[3]=((((-1.0)*r10*x9248))+((gconst1*r11*x9244)));
evalcond[4]=((((-1.0)*x9246*x9247))+((cj12*sj11))+((gconst2*r20*x9245))+((cj11*sj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x9251=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9251.valid){
continue;
}
IkReal x9249=x9251.value;
IkReal x9250=((1.0)*x9249);
cj14array[0]=((((-1.0)*cj12*sj11*x9250))+(((-1.0)*cj11*sj12*x9250)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x9252=IKsin(j14);
IkReal x9253=IKcos(j14);
IkReal x9254=(gconst2*r10);
IkReal x9255=((1.0)*sj10);
IkReal x9256=((1.0)*x9253);
IkReal x9257=(gconst1*x9252);
IkReal x9258=((1.0)*x9252);
evalcond[0]=((-1.0)*r02*x9252);
evalcond[1]=((((-1.0)*x9255))+(((-1.0)*r02*x9256)));
evalcond[2]=(((r21*x9257))+(((-1.0)*gconst2*r20*x9258)));
evalcond[3]=(((r11*x9257))+(((-1.0)*x9254*x9258)));
evalcond[4]=((((-1.0)*cj11*cj12*x9255))+((x9253*x9254))+((sj10*sj11*sj12))+(((-1.0)*gconst1*r11*x9256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x9259=IKPowWithIntegerCheck(r02,-1);
if(!x9259.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x9259.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x9260=IKsin(j14);
IkReal x9261=IKcos(j14);
IkReal x9262=(gconst2*r10);
IkReal x9263=(gconst2*r20);
IkReal x9264=(gconst1*x9260);
IkReal x9265=((1.0)*x9260);
IkReal x9266=((1.0)*gconst1*x9261);
evalcond[0]=((-1.0)*r02*x9260);
evalcond[1]=((((-1.0)*x9263*x9265))+((r21*x9264)));
evalcond[2]=((((-1.0)*x9262*x9265))+((r11*x9264)));
evalcond[3]=((((-1.0)*r21*x9266))+((cj12*sj11))+((x9261*x9263))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj11*cj12*sj10))+((sj10*sj11*sj12))+((x9261*x9262))+(((-1.0)*r11*x9266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9267=(gconst1*r21);
IkReal x9268=(cj11*sj12);
IkReal x9269=(cj12*sj11);
IkReal x9270=(gconst2*r20);
CheckValue<IkReal> x9271=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x9270*x9270)+(((-2.0)*x9267*x9270))+(x9267*x9267))),-1);
if(!x9271.valid){
continue;
}
CheckValue<IkReal> x9272 = IKatan2WithCheck(IkReal((((r22*x9269))+((r22*x9268)))),IkReal((((x9267*x9269))+((x9267*x9268))+(((-1.0)*x9269*x9270))+(((-1.0)*x9268*x9270)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9272.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9271.value)))+(x9272.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9273=IKsin(j14);
IkReal x9274=IKcos(j14);
IkReal x9275=(gconst1*r21);
IkReal x9276=(gconst2*r20);
IkReal x9277=((1.0)*sj10);
IkReal x9278=(gconst1*r11);
IkReal x9279=(gconst1*r01);
IkReal x9280=(gconst2*r10);
IkReal x9281=(sj11*sj12);
IkReal x9282=(cj11*cj12);
IkReal x9283=(gconst2*r00);
IkReal x9284=((1.0)*x9274);
IkReal x9285=((1.0)*x9273);
evalcond[0]=((((-1.0)*x9276*x9285))+(((-1.0)*r22*x9284))+((x9273*x9275)));
evalcond[1]=((((-1.0)*r12*x9284))+((x9273*x9278))+cj10+(((-1.0)*x9280*x9285)));
evalcond[2]=((((-1.0)*x9277))+((x9273*x9279))+(((-1.0)*r02*x9284))+(((-1.0)*x9283*x9285)));
evalcond[3]=((((-1.0)*x9275*x9284))+(((-1.0)*r22*x9285))+((cj12*sj11))+((x9274*x9276))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj10*x9282))+(((-1.0)*r02*x9285))+(((-1.0)*x9279*x9284))+((cj10*x9281))+((x9274*x9283)));
evalcond[5]=((((-1.0)*r12*x9285))+((sj10*x9281))+(((-1.0)*x9278*x9284))+(((-1.0)*x9277*x9282))+((x9274*x9280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9286=((1.0)*gconst2);
CheckValue<IkReal> x9287=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9286))+(((-1.0)*gconst1*r10)))),-1);
if(!x9287.valid){
continue;
}
CheckValue<IkReal> x9288 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x9286))+((gconst1*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9288.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9287.value)))+(x9288.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9289=IKsin(j14);
IkReal x9290=IKcos(j14);
IkReal x9291=(gconst1*r21);
IkReal x9292=(gconst2*r20);
IkReal x9293=((1.0)*sj10);
IkReal x9294=(gconst1*r11);
IkReal x9295=(gconst1*r01);
IkReal x9296=(gconst2*r10);
IkReal x9297=(sj11*sj12);
IkReal x9298=(cj11*cj12);
IkReal x9299=(gconst2*r00);
IkReal x9300=((1.0)*x9290);
IkReal x9301=((1.0)*x9289);
evalcond[0]=(((x9289*x9291))+(((-1.0)*x9292*x9301))+(((-1.0)*r22*x9300)));
evalcond[1]=((((-1.0)*x9296*x9301))+cj10+((x9289*x9294))+(((-1.0)*r12*x9300)));
evalcond[2]=((((-1.0)*x9293))+(((-1.0)*r02*x9300))+(((-1.0)*x9299*x9301))+((x9289*x9295)));
evalcond[3]=(((x9290*x9292))+((cj12*sj11))+(((-1.0)*r22*x9301))+((cj11*sj12))+(((-1.0)*x9291*x9300)));
evalcond[4]=((((-1.0)*x9295*x9300))+(((-1.0)*cj10*x9298))+(((-1.0)*r02*x9301))+((cj10*x9297))+((x9290*x9299)));
evalcond[5]=((((-1.0)*x9293*x9298))+(((-1.0)*x9294*x9300))+((x9290*x9296))+(((-1.0)*r12*x9301))+((sj10*x9297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9302=((1.0)*gconst2);
CheckValue<IkReal> x9303 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x9302))+((cj10*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9303.valid){
continue;
}
CheckValue<IkReal> x9304=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9302)))),-1);
if(!x9304.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9303.value)+(((1.5707963267949)*(x9304.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9305=IKsin(j14);
IkReal x9306=IKcos(j14);
IkReal x9307=(gconst1*r21);
IkReal x9308=(gconst2*r20);
IkReal x9309=((1.0)*sj10);
IkReal x9310=(gconst1*r11);
IkReal x9311=(gconst1*r01);
IkReal x9312=(gconst2*r10);
IkReal x9313=(sj11*sj12);
IkReal x9314=(cj11*cj12);
IkReal x9315=(gconst2*r00);
IkReal x9316=((1.0)*x9306);
IkReal x9317=((1.0)*x9305);
evalcond[0]=(((x9305*x9307))+(((-1.0)*x9308*x9317))+(((-1.0)*r22*x9316)));
evalcond[1]=(((x9305*x9310))+(((-1.0)*x9312*x9317))+cj10+(((-1.0)*r12*x9316)));
evalcond[2]=(((x9305*x9311))+(((-1.0)*x9309))+(((-1.0)*r02*x9316))+(((-1.0)*x9315*x9317)));
evalcond[3]=((((-1.0)*x9307*x9316))+((cj12*sj11))+((x9306*x9308))+(((-1.0)*r22*x9317))+((cj11*sj12)));
evalcond[4]=(((cj10*x9313))+(((-1.0)*x9311*x9316))+(((-1.0)*r02*x9317))+((x9306*x9315))+(((-1.0)*cj10*x9314)));
evalcond[5]=(((sj10*x9313))+(((-1.0)*x9310*x9316))+(((-1.0)*x9309*x9314))+((x9306*x9312))+(((-1.0)*r12*x9317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x9318=((-1.0)*r20);
IkReal x9319=x8614;
CheckValue<IkReal> x9321 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9318),IKFAST_ATAN2_MAGTHRESH);
if(!x9321.valid){
continue;
}
IkReal x9320=((-1.0)*(x9321.value));
sj15=gconst1;
cj15=gconst2;
j15=x9320;
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst0=x9320;
IkReal gconst1=(r21*x9319);
IkReal gconst2=(x9318*x9319);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9322=((-1.0)*r20);
IkReal x9323=x8614;
CheckValue<IkReal> x9325 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9322),IKFAST_ATAN2_MAGTHRESH);
if(!x9325.valid){
continue;
}
IkReal x9324=((-1.0)*(x9325.value));
sj15=gconst1;
cj15=gconst2;
j15=x9324;
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst0=x9324;
IkReal gconst1=(r21*x9323);
IkReal gconst2=(x9322*x9323);
CheckValue<IkReal> x9333=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9333.valid){
continue;
}
IkReal x9326=x9333.value;
IkReal x9327=(sj13*x9326);
IkReal x9328=(r01*x9327);
IkReal x9329=(r11*x9327);
IkReal x9330=(r10*x9327);
IkReal x9331=(r00*x9327);
IkReal x9332=(r20*r21*x9327);
j14eval[0]=IKsign((((r00*r20*r21*x9329))+((r00*x9330*(r20*r20)))+((r02*r12*sj13))+((r10*r20*r21*x9328))+((r11*x9328*(r21*r21)))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9334=gconst1*gconst1;
IkReal x9335=gconst2*gconst2;
IkReal x9336=(cj13*r10);
IkReal x9337=(r10*sj13);
IkReal x9338=(r11*sj13);
IkReal x9339=(gconst1*gconst2);
IkReal x9340=(cj13*r11);
IkReal x9341=(r01*x9334);
IkReal x9342=((1.0)*r00*x9335);
CheckValue<IkReal> x9343 = IKatan2WithCheck(IkReal((((gconst2*r02*x9338))+((gconst1*r02*x9337)))),IkReal(((((-1.0)*r00*x9337*x9339))+((r01*x9338*x9339))+((x9337*x9341))+(((-1.0)*x9338*x9342)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9343.valid){
continue;
}
CheckValue<IkReal> x9344=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9340*x9341))+((r01*x9336*x9339))+(((-1.0)*x9336*x9342))+((r00*x9339*x9340))+(((-1.0)*cj13*r02*r12)))),-1);
if(!x9344.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9343.value)+(((1.5707963267949)*(x9344.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9345=IKsin(j14);
IkReal x9346=IKcos(j14);
IkReal x9347=(sj11*sj12);
IkReal x9348=(gconst2*sj13);
IkReal x9349=(gconst1*sj13);
IkReal x9350=(cj11*sj12);
IkReal x9351=((1.0)*cj12);
IkReal x9352=(cj13*gconst2);
IkReal x9353=(cj13*gconst1);
IkReal x9354=(cj11*x9351);
IkReal x9355=((1.0)*x9346);
IkReal x9356=(gconst1*x9345);
IkReal x9357=(cj13*x9345);
IkReal x9358=((1.0)*sj13*x9345);
IkReal x9359=((1.0)*gconst2*x9345);
evalcond[0]=((((-1.0)*r22*x9355))+((r21*x9356))+(((-1.0)*r20*x9359)));
evalcond[1]=((((-1.0)*r02*x9355))+((r01*x9356))+(((-1.0)*r00*x9359)));
evalcond[2]=((1.0)+(((-1.0)*r10*x9359))+((r11*x9356))+(((-1.0)*r12*x9355)));
evalcond[3]=(((r11*x9348))+((r11*x9346*x9353))+((r10*x9349))+(((-1.0)*r10*x9352*x9355))+((r12*x9357)));
evalcond[4]=(((r11*x9352))+(((-1.0)*r11*x9349*x9355))+(((-1.0)*r12*x9358))+((r10*x9353))+((r10*x9346*x9348)));
evalcond[5]=((((-1.0)*r20*x9352*x9355))+x9350+((r21*x9346*x9353))+((r20*x9349))+((r21*x9348))+((cj12*sj11))+((r22*x9357)));
evalcond[6]=(x9347+((r01*x9346*x9353))+((r00*x9349))+(((-1.0)*x9354))+((r01*x9348))+((r02*x9357))+(((-1.0)*r00*x9352*x9355)));
evalcond[7]=((((-1.0)*r22*x9358))+x9347+(((-1.0)*r21*x9349*x9355))+(((-1.0)*x9354))+((r20*x9353))+((r20*x9346*x9348))+((r21*x9352)));
evalcond[8]=((((-1.0)*r02*x9358))+((r01*x9352))+((r00*x9353))+(((-1.0)*x9350))+(((-1.0)*sj11*x9351))+((r00*x9346*x9348))+(((-1.0)*r01*x9349*x9355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9360=gconst1*gconst1;
IkReal x9361=gconst2*gconst2;
IkReal x9362=(r01*r10);
IkReal x9363=(gconst1*gconst2);
IkReal x9364=((1.0)*sj13);
IkReal x9365=(r01*r11);
IkReal x9366=(r00*r10);
IkReal x9367=((1.0)*cj13);
IkReal x9368=(r00*r11);
IkReal x9369=(cj13*r02);
CheckValue<IkReal> x9370=IKPowWithIntegerCheck(IKsign((((sj13*x9360*x9365))+((r02*r12*sj13))+(((-1.0)*x9362*x9363*x9364))+((sj13*x9361*x9366))+(((-1.0)*x9363*x9364*x9368)))),-1);
if(!x9370.valid){
continue;
}
CheckValue<IkReal> x9371 = IKatan2WithCheck(IkReal((((gconst2*r11*x9369))+((gconst1*r10*x9369)))),IkReal(((((-1.0)*x9361*x9367*x9368))+((cj13*x9360*x9362))+((cj13*x9363*x9365))+(((-1.0)*x9363*x9366*x9367)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9371.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9370.value)))+(x9371.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9372=IKsin(j14);
IkReal x9373=IKcos(j14);
IkReal x9374=(sj11*sj12);
IkReal x9375=(gconst2*sj13);
IkReal x9376=(gconst1*sj13);
IkReal x9377=(cj11*sj12);
IkReal x9378=((1.0)*cj12);
IkReal x9379=(cj13*gconst2);
IkReal x9380=(cj13*gconst1);
IkReal x9381=(cj11*x9378);
IkReal x9382=((1.0)*x9373);
IkReal x9383=(gconst1*x9372);
IkReal x9384=(cj13*x9372);
IkReal x9385=((1.0)*sj13*x9372);
IkReal x9386=((1.0)*gconst2*x9372);
evalcond[0]=(((r21*x9383))+(((-1.0)*r20*x9386))+(((-1.0)*r22*x9382)));
evalcond[1]=((((-1.0)*r02*x9382))+(((-1.0)*r00*x9386))+((r01*x9383)));
evalcond[2]=((1.0)+((r11*x9383))+(((-1.0)*r10*x9386))+(((-1.0)*r12*x9382)));
evalcond[3]=((((-1.0)*r10*x9379*x9382))+((r11*x9375))+((r12*x9384))+((r11*x9373*x9380))+((r10*x9376)));
evalcond[4]=(((r10*x9380))+((r11*x9379))+(((-1.0)*r11*x9376*x9382))+(((-1.0)*r12*x9385))+((r10*x9373*x9375)));
evalcond[5]=(x9377+((r21*x9375))+((r22*x9384))+(((-1.0)*r20*x9379*x9382))+((cj12*sj11))+((r21*x9373*x9380))+((r20*x9376)));
evalcond[6]=((((-1.0)*r00*x9379*x9382))+((r02*x9384))+x9374+(((-1.0)*x9381))+((r01*x9373*x9380))+((r00*x9376))+((r01*x9375)));
evalcond[7]=(((r20*x9373*x9375))+x9374+(((-1.0)*x9381))+((r21*x9379))+(((-1.0)*r21*x9376*x9382))+(((-1.0)*r22*x9385))+((r20*x9380)));
evalcond[8]=((((-1.0)*r01*x9376*x9382))+((r00*x9373*x9375))+(((-1.0)*x9377))+(((-1.0)*r02*x9385))+((r00*x9380))+(((-1.0)*sj11*x9378))+((r01*x9379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9387=((1.0)*gconst2);
CheckValue<IkReal> x9388 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9387))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9388.valid){
continue;
}
CheckValue<IkReal> x9389=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9387)))),-1);
if(!x9389.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9388.value)+(((1.5707963267949)*(x9389.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9390=IKsin(j14);
IkReal x9391=IKcos(j14);
IkReal x9392=(sj11*sj12);
IkReal x9393=(gconst2*sj13);
IkReal x9394=(gconst1*sj13);
IkReal x9395=(cj11*sj12);
IkReal x9396=((1.0)*cj12);
IkReal x9397=(cj13*gconst2);
IkReal x9398=(cj13*gconst1);
IkReal x9399=(cj11*x9396);
IkReal x9400=((1.0)*x9391);
IkReal x9401=(gconst1*x9390);
IkReal x9402=(cj13*x9390);
IkReal x9403=((1.0)*sj13*x9390);
IkReal x9404=((1.0)*gconst2*x9390);
evalcond[0]=((((-1.0)*r22*x9400))+(((-1.0)*r20*x9404))+((r21*x9401)));
evalcond[1]=(((r01*x9401))+(((-1.0)*r02*x9400))+(((-1.0)*r00*x9404)));
evalcond[2]=((1.0)+((r11*x9401))+(((-1.0)*r10*x9404))+(((-1.0)*r12*x9400)));
evalcond[3]=(((r12*x9402))+((r11*x9391*x9398))+((r10*x9394))+((r11*x9393))+(((-1.0)*r10*x9397*x9400)));
evalcond[4]=(((r10*x9398))+((r11*x9397))+((r10*x9391*x9393))+(((-1.0)*r12*x9403))+(((-1.0)*r11*x9394*x9400)));
evalcond[5]=(((r22*x9402))+x9395+((r20*x9394))+((r21*x9391*x9398))+(((-1.0)*r20*x9397*x9400))+((cj12*sj11))+((r21*x9393)));
evalcond[6]=(((r01*x9393))+(((-1.0)*r00*x9397*x9400))+x9392+((r01*x9391*x9398))+((r02*x9402))+(((-1.0)*x9399))+((r00*x9394)));
evalcond[7]=((((-1.0)*r22*x9403))+((r20*x9391*x9393))+x9392+((r20*x9398))+(((-1.0)*x9399))+(((-1.0)*r21*x9394*x9400))+((r21*x9397)));
evalcond[8]=((((-1.0)*sj11*x9396))+((r01*x9397))+(((-1.0)*r02*x9403))+(((-1.0)*x9395))+(((-1.0)*r01*x9394*x9400))+((r00*x9398))+((r00*x9391*x9393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x9405=((-1.0)*r20);
IkReal x9406=x8614;
CheckValue<IkReal> x9408 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9405),IKFAST_ATAN2_MAGTHRESH);
if(!x9408.valid){
continue;
}
IkReal x9407=((-1.0)*(x9408.value));
sj15=gconst1;
cj15=gconst2;
j15=x9407;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst0=x9407;
IkReal gconst1=(r21*x9406);
IkReal gconst2=(x9405*x9406);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9409=((-1.0)*r20);
IkReal x9410=x8614;
CheckValue<IkReal> x9412 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9409),IKFAST_ATAN2_MAGTHRESH);
if(!x9412.valid){
continue;
}
IkReal x9411=((-1.0)*(x9412.value));
sj15=gconst1;
cj15=gconst2;
j15=x9411;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst0=x9411;
IkReal gconst1=(r21*x9410);
IkReal gconst2=(x9409*x9410);
CheckValue<IkReal> x9420=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9420.valid){
continue;
}
IkReal x9413=x9420.value;
IkReal x9414=(sj13*x9413);
IkReal x9415=(r01*x9414);
IkReal x9416=(r11*x9414);
IkReal x9417=(r10*x9414);
IkReal x9418=(r00*x9414);
IkReal x9419=(r20*r21*x9414);
j14eval[0]=IKsign((((r11*x9415*(r21*r21)))+((r02*r12*sj13))+((r00*r20*r21*x9416))+((r00*x9417*(r20*r20)))+((r10*r20*r21*x9415))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9421=gconst1*gconst1;
IkReal x9422=gconst2*gconst2;
IkReal x9423=(cj13*r10);
IkReal x9424=(r10*sj13);
IkReal x9425=(r11*sj13);
IkReal x9426=(gconst1*gconst2);
IkReal x9427=(cj13*r11);
IkReal x9428=(r01*x9421);
IkReal x9429=((1.0)*r00*x9422);
CheckValue<IkReal> x9430 = IKatan2WithCheck(IkReal((((gconst2*r02*x9425))+((gconst1*r02*x9424)))),IkReal(((((-1.0)*x9425*x9429))+((x9424*x9428))+((r01*x9425*x9426))+(((-1.0)*r00*x9424*x9426)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9430.valid){
continue;
}
CheckValue<IkReal> x9431=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9423*x9429))+((r01*x9423*x9426))+((r00*x9426*x9427))+(((-1.0)*cj13*r02*r12))+(((-1.0)*x9427*x9428)))),-1);
if(!x9431.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9430.value)+(((1.5707963267949)*(x9431.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9432=IKsin(j14);
IkReal x9433=IKcos(j14);
IkReal x9434=(cj12*sj11);
IkReal x9435=(cj11*sj12);
IkReal x9436=(gconst2*sj13);
IkReal x9437=(gconst1*sj13);
IkReal x9438=(sj11*sj12);
IkReal x9439=(cj11*cj12);
IkReal x9440=(cj13*gconst2);
IkReal x9441=(cj13*gconst1);
IkReal x9442=((1.0)*x9433);
IkReal x9443=(gconst1*x9432);
IkReal x9444=(cj13*x9432);
IkReal x9445=(x9434+x9435);
IkReal x9446=((1.0)*sj13*x9432);
IkReal x9447=((1.0)*gconst2*x9432);
evalcond[0]=(((r21*x9443))+(((-1.0)*r22*x9442))+(((-1.0)*r20*x9447)));
evalcond[1]=(((r01*x9443))+(((-1.0)*r00*x9447))+(((-1.0)*r02*x9442)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x9447))+((r11*x9443))+(((-1.0)*r12*x9442)));
evalcond[3]=(((r11*x9436))+((r12*x9444))+((r11*x9433*x9441))+(((-1.0)*r10*x9440*x9442))+((r10*x9437)));
evalcond[4]=(((r10*x9441))+((r10*x9433*x9436))+(((-1.0)*r11*x9437*x9442))+((r11*x9440))+(((-1.0)*r12*x9446)));
evalcond[5]=(((r21*x9433*x9441))+((r22*x9444))+((r20*x9437))+(((-1.0)*r20*x9440*x9442))+((r21*x9436))+x9445);
evalcond[6]=((((-1.0)*x9438))+(((-1.0)*r00*x9440*x9442))+((r01*x9433*x9441))+x9439+((r01*x9436))+((r02*x9444))+((r00*x9437)));
evalcond[7]=((((-1.0)*r01*x9437*x9442))+((r00*x9441))+((r01*x9440))+x9445+((r00*x9433*x9436))+(((-1.0)*r02*x9446)));
evalcond[8]=(((r20*x9433*x9436))+(((-1.0)*x9439))+((r21*x9440))+(((-1.0)*r21*x9437*x9442))+(((-1.0)*r22*x9446))+x9438+((r20*x9441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9448=gconst1*gconst1;
IkReal x9449=gconst2*gconst2;
IkReal x9450=(r01*r10);
IkReal x9451=(gconst1*gconst2);
IkReal x9452=((1.0)*sj13);
IkReal x9453=(r01*r11);
IkReal x9454=(r00*r10);
IkReal x9455=((1.0)*cj13);
IkReal x9456=(r00*r11);
IkReal x9457=(cj13*r02);
CheckValue<IkReal> x9458 = IKatan2WithCheck(IkReal((((gconst2*r11*x9457))+((gconst1*r10*x9457)))),IkReal(((((-1.0)*x9451*x9454*x9455))+(((-1.0)*x9449*x9455*x9456))+((cj13*x9448*x9450))+((cj13*x9451*x9453)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9458.valid){
continue;
}
CheckValue<IkReal> x9459=IKPowWithIntegerCheck(IKsign((((sj13*x9449*x9454))+((sj13*x9448*x9453))+((r02*r12*sj13))+(((-1.0)*x9451*x9452*x9456))+(((-1.0)*x9450*x9451*x9452)))),-1);
if(!x9459.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9458.value)+(((1.5707963267949)*(x9459.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9460=IKsin(j14);
IkReal x9461=IKcos(j14);
IkReal x9462=(cj12*sj11);
IkReal x9463=(cj11*sj12);
IkReal x9464=(gconst2*sj13);
IkReal x9465=(gconst1*sj13);
IkReal x9466=(sj11*sj12);
IkReal x9467=(cj11*cj12);
IkReal x9468=(cj13*gconst2);
IkReal x9469=(cj13*gconst1);
IkReal x9470=((1.0)*x9461);
IkReal x9471=(gconst1*x9460);
IkReal x9472=(cj13*x9460);
IkReal x9473=(x9463+x9462);
IkReal x9474=((1.0)*sj13*x9460);
IkReal x9475=((1.0)*gconst2*x9460);
evalcond[0]=(((r21*x9471))+(((-1.0)*r22*x9470))+(((-1.0)*r20*x9475)));
evalcond[1]=((((-1.0)*r02*x9470))+((r01*x9471))+(((-1.0)*r00*x9475)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x9475))+((r11*x9471))+(((-1.0)*r12*x9470)));
evalcond[3]=(((r10*x9465))+((r11*x9461*x9469))+((r11*x9464))+(((-1.0)*r10*x9468*x9470))+((r12*x9472)));
evalcond[4]=(((r10*x9461*x9464))+((r10*x9469))+(((-1.0)*r12*x9474))+(((-1.0)*r11*x9465*x9470))+((r11*x9468)));
evalcond[5]=(((r22*x9472))+((r21*x9464))+((r20*x9465))+((r21*x9461*x9469))+x9473+(((-1.0)*r20*x9468*x9470)));
evalcond[6]=(((r01*x9464))+((r00*x9465))+((r01*x9461*x9469))+x9467+(((-1.0)*x9466))+((r02*x9472))+(((-1.0)*r00*x9468*x9470)));
evalcond[7]=((((-1.0)*r02*x9474))+((r00*x9461*x9464))+((r01*x9468))+((r00*x9469))+x9473+(((-1.0)*r01*x9465*x9470)));
evalcond[8]=((((-1.0)*r21*x9465*x9470))+((r21*x9468))+(((-1.0)*r22*x9474))+((r20*x9469))+((r20*x9461*x9464))+x9466+(((-1.0)*x9467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x9476 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9476.valid){
continue;
}
CheckValue<IkReal> x9477=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9477.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9476.value)+(((1.5707963267949)*(x9477.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9478=IKsin(j14);
IkReal x9479=IKcos(j14);
IkReal x9480=(cj12*sj11);
IkReal x9481=(cj11*sj12);
IkReal x9482=(gconst2*sj13);
IkReal x9483=(gconst1*sj13);
IkReal x9484=(sj11*sj12);
IkReal x9485=(cj11*cj12);
IkReal x9486=(cj13*gconst2);
IkReal x9487=(cj13*gconst1);
IkReal x9488=((1.0)*x9479);
IkReal x9489=(gconst1*x9478);
IkReal x9490=(cj13*x9478);
IkReal x9491=(x9481+x9480);
IkReal x9492=((1.0)*sj13*x9478);
IkReal x9493=((1.0)*gconst2*x9478);
evalcond[0]=(((r21*x9489))+(((-1.0)*r22*x9488))+(((-1.0)*r20*x9493)));
evalcond[1]=(((r01*x9489))+(((-1.0)*r02*x9488))+(((-1.0)*r00*x9493)));
evalcond[2]=((-1.0)+((r11*x9489))+(((-1.0)*r10*x9493))+(((-1.0)*r12*x9488)));
evalcond[3]=(((r12*x9490))+((r11*x9479*x9487))+(((-1.0)*r10*x9486*x9488))+((r11*x9482))+((r10*x9483)));
evalcond[4]=((((-1.0)*r11*x9483*x9488))+((r11*x9486))+(((-1.0)*r12*x9492))+((r10*x9479*x9482))+((r10*x9487)));
evalcond[5]=(((r21*x9482))+((r22*x9490))+((r20*x9483))+(((-1.0)*r20*x9486*x9488))+((r21*x9479*x9487))+x9491);
evalcond[6]=(((r02*x9490))+((r01*x9482))+((r01*x9479*x9487))+(((-1.0)*x9484))+((r00*x9483))+x9485+(((-1.0)*r00*x9486*x9488)));
evalcond[7]=((((-1.0)*r02*x9492))+(((-1.0)*r01*x9483*x9488))+((r01*x9486))+((r00*x9487))+((r00*x9479*x9482))+x9491);
evalcond[8]=(((r21*x9486))+(((-1.0)*r22*x9492))+(((-1.0)*x9485))+(((-1.0)*r21*x9483*x9488))+((r20*x9487))+((r20*x9479*x9482))+x9484);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x9494=((-1.0)*r20);
IkReal x9495=x8614;
CheckValue<IkReal> x9497 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9494),IKFAST_ATAN2_MAGTHRESH);
if(!x9497.valid){
continue;
}
IkReal x9496=((-1.0)*(x9497.value));
sj15=gconst1;
cj15=gconst2;
j15=x9496;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst0=x9496;
IkReal gconst1=(r21*x9495);
IkReal gconst2=(x9494*x9495);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9498=((-1.0)*r20);
IkReal x9499=x8614;
CheckValue<IkReal> x9501 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9498),IKFAST_ATAN2_MAGTHRESH);
if(!x9501.valid){
continue;
}
IkReal x9500=((-1.0)*(x9501.value));
sj15=gconst1;
cj15=gconst2;
j15=x9500;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst0=x9500;
IkReal gconst1=(r21*x9499);
IkReal gconst2=(x9498*x9499);
CheckValue<IkReal> x9509=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9509.valid){
continue;
}
IkReal x9502=x9509.value;
IkReal x9503=(sj13*x9502);
IkReal x9504=(r01*x9503);
IkReal x9505=(r11*x9503);
IkReal x9506=(r10*x9503);
IkReal x9507=(r00*x9503);
IkReal x9508=(r20*r21*x9503);
j14eval[0]=IKsign((((r00*r20*r21*x9505))+((r11*x9504*(r21*r21)))+((r02*r12*sj13))+((r10*r20*r21*x9504))+((r00*x9506*(r20*r20)))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9510=gconst1*gconst1;
IkReal x9511=gconst2*gconst2;
IkReal x9512=(cj13*r00);
IkReal x9513=((1.0)*r10);
IkReal x9514=(gconst2*r01);
IkReal x9515=(r12*sj13);
IkReal x9516=(gconst1*r11);
IkReal x9517=((1.0)*cj13);
IkReal x9518=(r00*sj13);
IkReal x9519=(r11*x9510);
CheckValue<IkReal> x9520 = IKatan2WithCheck(IkReal((((x9514*x9515))+((gconst1*r00*x9515)))),IkReal(((((-1.0)*gconst1*gconst2*x9513*x9518))+(((-1.0)*r01*sj13*x9511*x9513))+((sj13*x9514*x9516))+((x9518*x9519)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9520.valid){
continue;
}
CheckValue<IkReal> x9521=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9511*x9512*x9513))+((cj13*gconst1*r10*x9514))+((gconst2*x9512*x9516))+(((-1.0)*r01*x9517*x9519))+(((-1.0)*r02*r12*x9517)))),-1);
if(!x9521.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9520.value)+(((1.5707963267949)*(x9521.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9522=IKsin(j14);
IkReal x9523=IKcos(j14);
IkReal x9524=(sj11*sj12);
IkReal x9525=(gconst2*sj13);
IkReal x9526=(cj11*sj12);
IkReal x9527=(gconst1*sj13);
IkReal x9528=((1.0)*cj12);
IkReal x9529=(cj13*gconst2);
IkReal x9530=(cj13*gconst1);
IkReal x9531=(cj11*x9528);
IkReal x9532=((1.0)*x9523);
IkReal x9533=(gconst1*x9522);
IkReal x9534=(cj13*x9522);
IkReal x9535=((1.0)*sj13*x9522);
IkReal x9536=((1.0)*gconst2*x9522);
evalcond[0]=((((-1.0)*r22*x9532))+(((-1.0)*r20*x9536))+((r21*x9533)));
evalcond[1]=(((r11*x9533))+(((-1.0)*r10*x9536))+(((-1.0)*r12*x9532)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x9536))+(((-1.0)*r02*x9532))+((r01*x9533)));
evalcond[3]=(((r02*x9534))+((r01*x9523*x9530))+((r01*x9525))+((r00*x9527))+(((-1.0)*r00*x9529*x9532)));
evalcond[4]=((((-1.0)*r01*x9527*x9532))+((r01*x9529))+(((-1.0)*r02*x9535))+((r00*x9530))+((r00*x9523*x9525)));
evalcond[5]=((((-1.0)*r20*x9529*x9532))+((r20*x9527))+((r22*x9534))+x9526+((cj12*sj11))+((r21*x9525))+((r21*x9523*x9530)));
evalcond[6]=(((r10*x9527))+((r12*x9534))+((r11*x9525))+((r11*x9523*x9530))+(((-1.0)*x9531))+x9524+(((-1.0)*r10*x9529*x9532)));
evalcond[7]=(((r20*x9530))+(((-1.0)*r22*x9535))+(((-1.0)*x9531))+x9524+((r20*x9523*x9525))+((r21*x9529))+(((-1.0)*r21*x9527*x9532)));
evalcond[8]=((((-1.0)*r11*x9527*x9532))+((r10*x9523*x9525))+((r10*x9530))+((r11*x9529))+(((-1.0)*x9526))+(((-1.0)*r12*x9535))+(((-1.0)*sj11*x9528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9537=gconst1*gconst1;
IkReal x9538=gconst2*gconst2;
IkReal x9539=((1.0)*r10);
IkReal x9540=(cj13*r11);
IkReal x9541=(cj13*gconst2);
IkReal x9542=(gconst1*r00);
IkReal x9543=(r11*sj13);
IkReal x9544=(gconst1*gconst2*r01);
CheckValue<IkReal> x9545 = IKatan2WithCheck(IkReal((((r01*r12*x9541))+((cj13*r12*x9542)))),IkReal((((r00*x9537*x9540))+(((-1.0)*cj13*r01*x9538*x9539))+((x9540*x9544))+(((-1.0)*x9539*x9541*x9542)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9545.valid){
continue;
}
CheckValue<IkReal> x9546=IKPowWithIntegerCheck(IKsign((((r01*x9537*x9543))+((r02*r12*sj13))+((r00*r10*sj13*x9538))+(((-1.0)*gconst2*x9542*x9543))+(((-1.0)*sj13*x9539*x9544)))),-1);
if(!x9546.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9545.value)+(((1.5707963267949)*(x9546.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9547=IKsin(j14);
IkReal x9548=IKcos(j14);
IkReal x9549=(sj11*sj12);
IkReal x9550=(gconst2*sj13);
IkReal x9551=(cj11*sj12);
IkReal x9552=(gconst1*sj13);
IkReal x9553=((1.0)*cj12);
IkReal x9554=(cj13*gconst2);
IkReal x9555=(cj13*gconst1);
IkReal x9556=(cj11*x9553);
IkReal x9557=((1.0)*x9548);
IkReal x9558=(gconst1*x9547);
IkReal x9559=(cj13*x9547);
IkReal x9560=((1.0)*sj13*x9547);
IkReal x9561=((1.0)*gconst2*x9547);
evalcond[0]=((((-1.0)*r20*x9561))+(((-1.0)*r22*x9557))+((r21*x9558)));
evalcond[1]=(((r11*x9558))+(((-1.0)*r10*x9561))+(((-1.0)*r12*x9557)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x9561))+(((-1.0)*r02*x9557))+((r01*x9558)));
evalcond[3]=((((-1.0)*r00*x9554*x9557))+((r02*x9559))+((r01*x9548*x9555))+((r00*x9552))+((r01*x9550)));
evalcond[4]=(((r00*x9548*x9550))+(((-1.0)*r01*x9552*x9557))+((r00*x9555))+((r01*x9554))+(((-1.0)*r02*x9560)));
evalcond[5]=(((r20*x9552))+((r21*x9548*x9555))+x9551+(((-1.0)*r20*x9554*x9557))+((cj12*sj11))+((r21*x9550))+((r22*x9559)));
evalcond[6]=(((r11*x9550))+((r12*x9559))+(((-1.0)*r10*x9554*x9557))+((r10*x9552))+x9549+((r11*x9548*x9555))+(((-1.0)*x9556)));
evalcond[7]=((((-1.0)*r21*x9552*x9557))+((r20*x9555))+(((-1.0)*r22*x9560))+x9549+((r20*x9548*x9550))+((r21*x9554))+(((-1.0)*x9556)));
evalcond[8]=(((r11*x9554))+(((-1.0)*sj11*x9553))+(((-1.0)*r11*x9552*x9557))+((r10*x9555))+(((-1.0)*r12*x9560))+(((-1.0)*x9551))+((r10*x9548*x9550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9562=((1.0)*gconst2);
CheckValue<IkReal> x9563 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9562))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9563.valid){
continue;
}
CheckValue<IkReal> x9564=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9562)))),-1);
if(!x9564.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9563.value)+(((1.5707963267949)*(x9564.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9565=IKsin(j14);
IkReal x9566=IKcos(j14);
IkReal x9567=(sj11*sj12);
IkReal x9568=(gconst2*sj13);
IkReal x9569=(cj11*sj12);
IkReal x9570=(gconst1*sj13);
IkReal x9571=((1.0)*cj12);
IkReal x9572=(cj13*gconst2);
IkReal x9573=(cj13*gconst1);
IkReal x9574=(cj11*x9571);
IkReal x9575=((1.0)*x9566);
IkReal x9576=(gconst1*x9565);
IkReal x9577=(cj13*x9565);
IkReal x9578=((1.0)*sj13*x9565);
IkReal x9579=((1.0)*gconst2*x9565);
evalcond[0]=(((r21*x9576))+(((-1.0)*r20*x9579))+(((-1.0)*r22*x9575)));
evalcond[1]=(((r11*x9576))+(((-1.0)*r12*x9575))+(((-1.0)*r10*x9579)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x9575))+((r01*x9576))+(((-1.0)*r00*x9579)));
evalcond[3]=(((r01*x9568))+((r00*x9570))+((r01*x9566*x9573))+(((-1.0)*r00*x9572*x9575))+((r02*x9577)));
evalcond[4]=(((r00*x9566*x9568))+(((-1.0)*r02*x9578))+((r00*x9573))+((r01*x9572))+(((-1.0)*r01*x9570*x9575)));
evalcond[5]=(((r21*x9568))+((r22*x9577))+x9569+((cj12*sj11))+((r20*x9570))+((r21*x9566*x9573))+(((-1.0)*r20*x9572*x9575)));
evalcond[6]=(((r11*x9566*x9573))+(((-1.0)*x9574))+(((-1.0)*r10*x9572*x9575))+x9567+((r11*x9568))+((r12*x9577))+((r10*x9570)));
evalcond[7]=(((r21*x9572))+(((-1.0)*x9574))+(((-1.0)*r22*x9578))+x9567+((r20*x9573))+(((-1.0)*r21*x9570*x9575))+((r20*x9566*x9568)));
evalcond[8]=(((r10*x9566*x9568))+(((-1.0)*x9569))+((r11*x9572))+(((-1.0)*r12*x9578))+(((-1.0)*r11*x9570*x9575))+(((-1.0)*sj11*x9571))+((r10*x9573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x9580=((-1.0)*r20);
IkReal x9581=x8614;
CheckValue<IkReal> x9583 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9580),IKFAST_ATAN2_MAGTHRESH);
if(!x9583.valid){
continue;
}
IkReal x9582=((-1.0)*(x9583.value));
sj15=gconst1;
cj15=gconst2;
j15=x9582;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst0=x9582;
IkReal gconst1=(r21*x9581);
IkReal gconst2=(x9580*x9581);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9584=((-1.0)*r20);
IkReal x9585=x8614;
CheckValue<IkReal> x9587 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9584),IKFAST_ATAN2_MAGTHRESH);
if(!x9587.valid){
continue;
}
IkReal x9586=((-1.0)*(x9587.value));
sj15=gconst1;
cj15=gconst2;
j15=x9586;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst0=x9586;
IkReal gconst1=(r21*x9585);
IkReal gconst2=(x9584*x9585);
CheckValue<IkReal> x9595=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9595.valid){
continue;
}
IkReal x9588=x9595.value;
IkReal x9589=(sj13*x9588);
IkReal x9590=(r01*x9589);
IkReal x9591=(r11*x9589);
IkReal x9592=(r10*x9589);
IkReal x9593=(r00*x9589);
IkReal x9594=(r20*r21*x9589);
j14eval[0]=IKsign((((r11*x9590*(r21*r21)))+((r02*r12*sj13))+((r10*r20*r21*x9590))+((r00*x9592*(r20*r20)))+((r00*r20*r21*x9591))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9596=gconst1*gconst1;
IkReal x9597=gconst2*gconst2;
IkReal x9598=(cj13*r00);
IkReal x9599=((1.0)*r10);
IkReal x9600=(gconst2*r01);
IkReal x9601=(r12*sj13);
IkReal x9602=(gconst1*r11);
IkReal x9603=((1.0)*cj13);
IkReal x9604=(r00*sj13);
IkReal x9605=(r11*x9596);
CheckValue<IkReal> x9606=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9597*x9598*x9599))+(((-1.0)*r02*r12*x9603))+((cj13*gconst1*r10*x9600))+(((-1.0)*r01*x9603*x9605))+((gconst2*x9598*x9602)))),-1);
if(!x9606.valid){
continue;
}
CheckValue<IkReal> x9607 = IKatan2WithCheck(IkReal((((gconst1*r00*x9601))+((x9600*x9601)))),IkReal((((sj13*x9600*x9602))+((x9604*x9605))+(((-1.0)*gconst1*gconst2*x9599*x9604))+(((-1.0)*r01*sj13*x9597*x9599)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9607.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9606.value)))+(x9607.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9608=IKsin(j14);
IkReal x9609=IKcos(j14);
IkReal x9610=(cj12*sj11);
IkReal x9611=(cj11*sj12);
IkReal x9612=(gconst2*sj13);
IkReal x9613=(gconst1*sj13);
IkReal x9614=(sj11*sj12);
IkReal x9615=(cj11*cj12);
IkReal x9616=(cj13*gconst2);
IkReal x9617=(cj13*gconst1);
IkReal x9618=((1.0)*x9609);
IkReal x9619=(gconst1*x9608);
IkReal x9620=(cj13*x9608);
IkReal x9621=(x9610+x9611);
IkReal x9622=((1.0)*sj13*x9608);
IkReal x9623=((1.0)*gconst2*x9608);
evalcond[0]=((((-1.0)*r22*x9618))+((r21*x9619))+(((-1.0)*r20*x9623)));
evalcond[1]=((((-1.0)*r10*x9623))+(((-1.0)*r12*x9618))+((r11*x9619)));
evalcond[2]=((1.0)+((r01*x9619))+(((-1.0)*r00*x9623))+(((-1.0)*r02*x9618)));
evalcond[3]=(((r00*x9613))+((r01*x9612))+(((-1.0)*r00*x9616*x9618))+((r02*x9620))+((r01*x9609*x9617)));
evalcond[4]=(((r00*x9617))+((r01*x9616))+(((-1.0)*r02*x9622))+(((-1.0)*r01*x9613*x9618))+((r00*x9609*x9612)));
evalcond[5]=(((r20*x9613))+(((-1.0)*r20*x9616*x9618))+((r21*x9609*x9617))+((r21*x9612))+((r22*x9620))+x9621);
evalcond[6]=(((r11*x9609*x9617))+((r10*x9613))+(((-1.0)*x9614))+((r12*x9620))+((r11*x9612))+(((-1.0)*r10*x9616*x9618))+x9615);
evalcond[7]=(((r10*x9609*x9612))+(((-1.0)*r11*x9613*x9618))+((r10*x9617))+((r11*x9616))+(((-1.0)*r12*x9622))+x9621);
evalcond[8]=(((r20*x9617))+(((-1.0)*r21*x9613*x9618))+(((-1.0)*r22*x9622))+(((-1.0)*x9615))+((r21*x9616))+x9614+((r20*x9609*x9612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9624=gconst1*gconst1;
IkReal x9625=gconst2*gconst2;
IkReal x9626=((1.0)*r10);
IkReal x9627=(cj13*r11);
IkReal x9628=(cj13*gconst2);
IkReal x9629=(gconst1*r00);
IkReal x9630=(r11*sj13);
IkReal x9631=(gconst1*gconst2*r01);
CheckValue<IkReal> x9632=IKPowWithIntegerCheck(IKsign((((r01*x9624*x9630))+(((-1.0)*gconst2*x9629*x9630))+((r00*r10*sj13*x9625))+((r02*r12*sj13))+(((-1.0)*sj13*x9626*x9631)))),-1);
if(!x9632.valid){
continue;
}
CheckValue<IkReal> x9633 = IKatan2WithCheck(IkReal((((cj13*r12*x9629))+((r01*r12*x9628)))),IkReal((((r00*x9624*x9627))+(((-1.0)*cj13*r01*x9625*x9626))+((x9627*x9631))+(((-1.0)*x9626*x9628*x9629)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9633.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9632.value)))+(x9633.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9634=IKsin(j14);
IkReal x9635=IKcos(j14);
IkReal x9636=(cj12*sj11);
IkReal x9637=(cj11*sj12);
IkReal x9638=(gconst2*sj13);
IkReal x9639=(gconst1*sj13);
IkReal x9640=(sj11*sj12);
IkReal x9641=(cj11*cj12);
IkReal x9642=(cj13*gconst2);
IkReal x9643=(cj13*gconst1);
IkReal x9644=((1.0)*x9635);
IkReal x9645=(gconst1*x9634);
IkReal x9646=(cj13*x9634);
IkReal x9647=(x9636+x9637);
IkReal x9648=((1.0)*sj13*x9634);
IkReal x9649=((1.0)*gconst2*x9634);
evalcond[0]=((((-1.0)*r20*x9649))+((r21*x9645))+(((-1.0)*r22*x9644)));
evalcond[1]=((((-1.0)*r12*x9644))+((r11*x9645))+(((-1.0)*r10*x9649)));
evalcond[2]=((1.0)+((r01*x9645))+(((-1.0)*r00*x9649))+(((-1.0)*r02*x9644)));
evalcond[3]=(((r00*x9639))+((r01*x9638))+((r02*x9646))+((r01*x9635*x9643))+(((-1.0)*r00*x9642*x9644)));
evalcond[4]=(((r00*x9635*x9638))+((r00*x9643))+((r01*x9642))+(((-1.0)*r01*x9639*x9644))+(((-1.0)*r02*x9648)));
evalcond[5]=(((r22*x9646))+((r20*x9639))+((r21*x9638))+(((-1.0)*r20*x9642*x9644))+x9647+((r21*x9635*x9643)));
evalcond[6]=(((r10*x9639))+((r11*x9635*x9643))+x9641+((r11*x9638))+(((-1.0)*x9640))+(((-1.0)*r10*x9642*x9644))+((r12*x9646)));
evalcond[7]=((((-1.0)*r12*x9648))+((r11*x9642))+((r10*x9635*x9638))+(((-1.0)*r11*x9639*x9644))+x9647+((r10*x9643)));
evalcond[8]=(x9640+((r20*x9643))+(((-1.0)*x9641))+((r21*x9642))+(((-1.0)*r21*x9639*x9644))+(((-1.0)*r22*x9648))+((r20*x9635*x9638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x9650 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9650.valid){
continue;
}
CheckValue<IkReal> x9651=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9651.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9650.value)+(((1.5707963267949)*(x9651.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9652=IKsin(j14);
IkReal x9653=IKcos(j14);
IkReal x9654=(cj12*sj11);
IkReal x9655=(cj11*sj12);
IkReal x9656=(gconst2*sj13);
IkReal x9657=(gconst1*sj13);
IkReal x9658=(sj11*sj12);
IkReal x9659=(cj11*cj12);
IkReal x9660=(cj13*gconst2);
IkReal x9661=(cj13*gconst1);
IkReal x9662=((1.0)*x9653);
IkReal x9663=(gconst1*x9652);
IkReal x9664=(cj13*x9652);
IkReal x9665=(x9654+x9655);
IkReal x9666=((1.0)*sj13*x9652);
IkReal x9667=((1.0)*gconst2*x9652);
evalcond[0]=(((r21*x9663))+(((-1.0)*r20*x9667))+(((-1.0)*r22*x9662)));
evalcond[1]=((((-1.0)*r10*x9667))+((r11*x9663))+(((-1.0)*r12*x9662)));
evalcond[2]=((1.0)+(((-1.0)*r00*x9667))+((r01*x9663))+(((-1.0)*r02*x9662)));
evalcond[3]=((((-1.0)*r00*x9660*x9662))+((r01*x9656))+((r00*x9657))+((r01*x9653*x9661))+((r02*x9664)));
evalcond[4]=((((-1.0)*r01*x9657*x9662))+((r00*x9661))+((r01*x9660))+((r00*x9653*x9656))+(((-1.0)*r02*x9666)));
evalcond[5]=(((r21*x9653*x9661))+((r21*x9656))+((r20*x9657))+x9665+((r22*x9664))+(((-1.0)*r20*x9660*x9662)));
evalcond[6]=((((-1.0)*r10*x9660*x9662))+((r11*x9656))+((r12*x9664))+x9659+((r10*x9657))+(((-1.0)*x9658))+((r11*x9653*x9661)));
evalcond[7]=((((-1.0)*r11*x9657*x9662))+((r11*x9660))+((r10*x9653*x9656))+((r10*x9661))+(((-1.0)*r12*x9666))+x9665);
evalcond[8]=(((r21*x9660))+(((-1.0)*r21*x9657*x9662))+((r20*x9661))+x9658+((r20*x9653*x9656))+(((-1.0)*x9659))+(((-1.0)*r22*x9666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x9668=((-1.0)*r20);
IkReal x9669=((-1.0)*px);
CheckValue<IkReal> x9671 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9668),IKFAST_ATAN2_MAGTHRESH);
if(!x9671.valid){
continue;
}
IkReal x9670=((-1.0)*(x9671.value));
sj15=gconst1;
cj15=gconst2;
j15=x9670;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9669);
rxp1_1=(px*r21);
rxp1_2=(r11*x9669);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9670;
IkReal gconst1=r21;
IkReal gconst2=x9668;
j14eval[0]=(((r11*r21))+((r10*r20)));
j14eval[1]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x9672=((-1.0)*r20);
IkReal x9673=((-1.0)*px);
CheckValue<IkReal> x9675 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9672),IKFAST_ATAN2_MAGTHRESH);
if(!x9675.valid){
continue;
}
IkReal x9674=((-1.0)*(x9675.value));
sj15=gconst1;
cj15=gconst2;
j15=x9674;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9673);
rxp1_1=(px*r21);
rxp1_2=(r11*x9673);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9674;
IkReal gconst1=r21;
IkReal gconst2=x9672;
j14eval[0]=(((r11*r21))+((r10*r20)));
j14eval[1]=((((-1.0)*cj13*(r10*r10)))+((cj13*(r21*r21)))+cj13);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x9676=((-1.0)*r20);
IkReal x9677=((-1.0)*px);
CheckValue<IkReal> x9679 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9676),IKFAST_ATAN2_MAGTHRESH);
if(!x9679.valid){
continue;
}
IkReal x9678=((-1.0)*(x9679.value));
sj15=gconst1;
cj15=gconst2;
j15=x9678;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9677);
rxp1_1=(px*r21);
rxp1_2=(r11*x9677);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9678;
IkReal gconst1=r21;
IkReal gconst2=x9676;
j14eval[0]=cj13;
j14eval[1]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x9680=((-1.0)*r20);
IkReal x9681=((-1.0)*px);
CheckValue<IkReal> x9683 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9680),IKFAST_ATAN2_MAGTHRESH);
if(!x9683.valid){
continue;
}
IkReal x9682=((-1.0)*(x9683.value));
sj15=gconst1;
cj15=gconst2;
j15=x9682;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9681);
rxp1_1=(px*r21);
rxp1_2=(r11*x9681);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst0=x9682;
IkReal gconst1=r21;
IkReal gconst2=x9680;
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9684=((-1.0)*r20);
IkReal x9685=((-1.0)*px);
CheckValue<IkReal> x9687 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9684),IKFAST_ATAN2_MAGTHRESH);
if(!x9687.valid){
continue;
}
IkReal x9686=((-1.0)*(x9687.value));
sj15=gconst1;
cj15=gconst2;
j15=x9686;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9685);
rxp1_1=(px*r21);
rxp1_2=(r11*x9685);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst0=x9686;
IkReal gconst1=r21;
IkReal gconst2=x9684;
j14eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9688=((-1.0)*r20);
IkReal x9689=((-1.0)*px);
CheckValue<IkReal> x9691 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9688),IKFAST_ATAN2_MAGTHRESH);
if(!x9691.valid){
continue;
}
IkReal x9690=((-1.0)*(x9691.value));
sj15=gconst1;
cj15=gconst2;
j15=x9690;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9689);
rxp1_1=(px*r21);
rxp1_2=(r11*x9689);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst0=x9690;
IkReal gconst1=r21;
IkReal gconst2=x9688;
j14eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x9694=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9694.valid){
continue;
}
IkReal x9692=x9694.value;
IkReal x9693=(sj10*x9692);
cj14array[0]=(((cj12*sj11*x9693))+((cj11*sj12*x9693)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x9695=IKsin(j14);
IkReal x9696=IKcos(j14);
IkReal x9697=(gconst1*r21);
IkReal x9698=((1.0)*x9696);
IkReal x9699=((1.0)*gconst2*x9695);
evalcond[0]=((-1.0)*r02*x9695);
evalcond[1]=((((-1.0)*r02*x9698))+(((-1.0)*sj10)));
evalcond[2]=(((x9695*x9697))+(((-1.0)*r20*x9699)));
evalcond[3]=(((gconst1*r11*x9695))+(((-1.0)*r10*x9699)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x9697*x9698))+((gconst2*r20*x9696))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x9701=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9701.valid){
continue;
}
IkReal x9700=x9701.value;
cj14array[0]=((((-1.0)*sj11*sj12*x9700))+((cj11*cj12*x9700)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x9702=IKsin(j14);
IkReal x9703=IKcos(j14);
IkReal x9704=((1.0)*sj10);
IkReal x9705=(gconst2*r10);
IkReal x9706=((1.0)*x9703);
IkReal x9707=(gconst1*x9702);
IkReal x9708=((1.0)*x9702);
evalcond[0]=((-1.0)*r02*x9702);
evalcond[1]=((((-1.0)*r02*x9706))+(((-1.0)*x9704)));
evalcond[2]=(((r21*x9707))+(((-1.0)*gconst2*r20*x9708)));
evalcond[3]=(((r11*x9707))+(((-1.0)*x9705*x9708)));
evalcond[4]=(((x9703*x9705))+(((-1.0)*gconst1*r11*x9706))+(((-1.0)*cj11*sj12*x9704))+(((-1.0)*cj12*sj11*x9704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x9709=IKPowWithIntegerCheck(r02,-1);
if(!x9709.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x9709.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x9710=IKsin(j14);
IkReal x9711=IKcos(j14);
IkReal x9712=((1.0)*cj12);
IkReal x9713=(gconst2*r10);
IkReal x9714=(gconst2*r20);
IkReal x9715=(gconst1*x9710);
IkReal x9716=((1.0)*x9710);
IkReal x9717=((1.0)*gconst1*x9711);
evalcond[0]=((-1.0)*r02*x9710);
evalcond[1]=((((-1.0)*x9714*x9716))+((r21*x9715)));
evalcond[2]=(((r11*x9715))+(((-1.0)*x9713*x9716)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r21*x9717))+((x9711*x9714))+(((-1.0)*cj11*x9712)));
evalcond[4]=((((-1.0)*cj11*sj10*sj12))+((x9711*x9713))+(((-1.0)*r11*x9717))+(((-1.0)*sj10*sj11*x9712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x9718=((-1.0)*r20);
IkReal x9719=((-1.0)*px);
CheckValue<IkReal> x9721 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9718),IKFAST_ATAN2_MAGTHRESH);
if(!x9721.valid){
continue;
}
IkReal x9720=((-1.0)*(x9721.value));
sj15=gconst1;
cj15=gconst2;
j15=x9720;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9719);
rxp1_1=(px*r21);
rxp1_2=(r11*x9719);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst0=x9720;
IkReal gconst1=r21;
IkReal gconst2=x9718;
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9722=((-1.0)*r20);
IkReal x9723=((-1.0)*px);
CheckValue<IkReal> x9725 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9722),IKFAST_ATAN2_MAGTHRESH);
if(!x9725.valid){
continue;
}
IkReal x9724=((-1.0)*(x9725.value));
sj15=gconst1;
cj15=gconst2;
j15=x9724;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9723);
rxp1_1=(px*r21);
rxp1_2=(r11*x9723);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst0=x9724;
IkReal gconst1=r21;
IkReal gconst2=x9722;
j14eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9726=((-1.0)*r20);
IkReal x9727=((-1.0)*px);
CheckValue<IkReal> x9729 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9726),IKFAST_ATAN2_MAGTHRESH);
if(!x9729.valid){
continue;
}
IkReal x9728=((-1.0)*(x9729.value));
sj15=gconst1;
cj15=gconst2;
j15=x9728;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9727);
rxp1_1=(px*r21);
rxp1_2=(r11*x9727);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst0=x9728;
IkReal gconst1=r21;
IkReal gconst2=x9726;
j14eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x9732=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9732.valid){
continue;
}
IkReal x9730=x9732.value;
IkReal x9731=(sj10*x9730);
cj14array[0]=(((cj12*sj11*x9731))+((cj11*sj12*x9731)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x9733=IKsin(j14);
IkReal x9734=IKcos(j14);
IkReal x9735=(gconst1*r21);
IkReal x9736=((1.0)*x9734);
IkReal x9737=((1.0)*gconst2*x9733);
evalcond[0]=(r02*x9733);
evalcond[1]=((((-1.0)*r02*x9736))+(((-1.0)*sj10)));
evalcond[2]=((((-1.0)*r20*x9737))+((x9733*x9735)));
evalcond[3]=((((-1.0)*r10*x9737))+((gconst1*r11*x9733)));
evalcond[4]=(((sj11*sj12))+((x9734*x9735))+(((-1.0)*cj11*cj12))+(((-1.0)*gconst2*r20*x9736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x9739=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9739.valid){
continue;
}
IkReal x9738=x9739.value;
cj14array[0]=((((-1.0)*sj11*sj12*x9738))+((cj11*cj12*x9738)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x9740=IKsin(j14);
IkReal x9741=IKcos(j14);
IkReal x9742=((1.0)*sj10);
IkReal x9743=(gconst2*r10);
IkReal x9744=((1.0)*x9741);
IkReal x9745=(gconst1*x9740);
IkReal x9746=((1.0)*x9740);
evalcond[0]=(r02*x9740);
evalcond[1]=((((-1.0)*r02*x9744))+(((-1.0)*x9742)));
evalcond[2]=(((r21*x9745))+(((-1.0)*gconst2*r20*x9746)));
evalcond[3]=(((r11*x9745))+(((-1.0)*x9743*x9746)));
evalcond[4]=((((-1.0)*cj11*sj12*x9742))+(((-1.0)*cj12*sj11*x9742))+((gconst1*r11*x9741))+(((-1.0)*x9743*x9744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x9747=IKPowWithIntegerCheck(r02,-1);
if(!x9747.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x9747.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x9748=IKsin(j14);
IkReal x9749=IKcos(j14);
IkReal x9750=((1.0)*cj12);
IkReal x9751=(gconst1*r21);
IkReal x9752=(gconst1*r11);
IkReal x9753=((1.0)*gconst2*r10);
IkReal x9754=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9748);
evalcond[1]=(((x9748*x9751))+(((-1.0)*x9748*x9754)));
evalcond[2]=(((x9748*x9752))+(((-1.0)*x9748*x9753)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*x9749*x9754))+(((-1.0)*cj11*x9750))+((x9749*x9751)));
evalcond[4]=((((-1.0)*x9749*x9753))+(((-1.0)*cj11*sj10*sj12))+(((-1.0)*sj10*sj11*x9750))+((x9749*x9752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x9756=IKPowWithIntegerCheck(r02,-1);
if(!x9756.valid){
continue;
}
IkReal x9755=x9756.value;
CheckValue<IkReal> x9757=IKPowWithIntegerCheck(cj13,-1);
if(!x9757.valid){
continue;
}
if( IKabs((x9755*(x9757.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj10*x9755)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9755*(x9757.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12))))))+IKsqr(((-1.0)*sj10*x9755))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((x9755*(x9757.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12))))), ((-1.0)*sj10*x9755));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9758=IKsin(j14);
IkReal x9759=IKcos(j14);
IkReal x9760=((1.0)*cj11);
IkReal x9761=(cj10*sj12);
IkReal x9762=(gconst1*r21);
IkReal x9763=(cj13*gconst2);
IkReal x9764=(gconst2*sj13);
IkReal x9765=((1.0)*sj10);
IkReal x9766=(gconst1*r11);
IkReal x9767=(sj11*sj12);
IkReal x9768=(cj12*sj11);
IkReal x9769=(cj13*gconst1);
IkReal x9770=(gconst1*sj13);
IkReal x9771=((1.0)*x9759);
IkReal x9772=((1.0)*x9758);
IkReal x9773=(cj13*x9759);
evalcond[0]=((((-1.0)*r02*x9771))+(((-1.0)*x9765)));
evalcond[1]=(((x9758*x9762))+(((-1.0)*gconst2*r20*x9772)));
evalcond[2]=((((-1.0)*gconst2*r10*x9772))+cj10+((x9758*x9766)));
evalcond[3]=((((-1.0)*cj10*cj12*x9760))+((cj13*r02*x9758))+((sj11*x9761)));
evalcond[4]=((((-1.0)*cj10*x9768))+(((-1.0)*r02*sj13*x9772))+(((-1.0)*x9760*x9761)));
evalcond[5]=((((-1.0)*r20*x9763*x9771))+((x9762*x9773))+x9768+((r21*x9764))+((r20*x9770))+((cj11*sj12)));
evalcond[6]=(((r20*x9759*x9764))+(((-1.0)*sj13*x9762*x9771))+x9767+((r21*x9763))+((r20*x9769))+(((-1.0)*cj12*x9760)));
evalcond[7]=(((r10*x9770))+((sj10*x9767))+(((-1.0)*cj12*sj10*x9760))+(((-1.0)*r10*x9763*x9771))+((x9766*x9773))+((r11*x9764)));
evalcond[8]=((((-1.0)*x9765*x9768))+((r10*x9769))+(((-1.0)*sj10*sj12*x9760))+(((-1.0)*sj13*x9766*x9771))+((r10*x9759*x9764))+((r11*x9763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9774=((1.0)*gconst2);
CheckValue<IkReal> x9775=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x9774))),-1);
if(!x9775.valid){
continue;
}
CheckValue<IkReal> x9776=IKPowWithIntegerCheck(((((-1.0)*cj13*r20*x9774))+((cj13*gconst1*r21))),-1);
if(!x9776.valid){
continue;
}
if( IKabs(((-1.0)*cj10*(x9775.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9776.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*sj11))+(((-1.0)*r21*sj13*x9774))+(((-1.0)*gconst1*r20*sj13)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj10*(x9775.value)))+IKsqr(((x9776.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*sj11))+(((-1.0)*r21*sj13*x9774))+(((-1.0)*gconst1*r20*sj13))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*cj10*(x9775.value)), ((x9776.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*sj11))+(((-1.0)*r21*sj13*x9774))+(((-1.0)*gconst1*r20*sj13))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9777=IKsin(j14);
IkReal x9778=IKcos(j14);
IkReal x9779=((1.0)*cj11);
IkReal x9780=(cj10*sj12);
IkReal x9781=(gconst1*r21);
IkReal x9782=(cj13*gconst2);
IkReal x9783=(gconst2*sj13);
IkReal x9784=((1.0)*sj10);
IkReal x9785=(gconst1*r11);
IkReal x9786=(sj11*sj12);
IkReal x9787=(cj12*sj11);
IkReal x9788=(cj13*gconst1);
IkReal x9789=(gconst1*sj13);
IkReal x9790=((1.0)*x9778);
IkReal x9791=((1.0)*x9777);
IkReal x9792=(cj13*x9778);
evalcond[0]=((((-1.0)*r02*x9790))+(((-1.0)*x9784)));
evalcond[1]=((((-1.0)*gconst2*r20*x9791))+((x9777*x9781)));
evalcond[2]=((((-1.0)*gconst2*r10*x9791))+cj10+((x9777*x9785)));
evalcond[3]=((((-1.0)*cj10*cj12*x9779))+((cj13*r02*x9777))+((sj11*x9780)));
evalcond[4]=((((-1.0)*r02*sj13*x9791))+(((-1.0)*cj10*x9787))+(((-1.0)*x9779*x9780)));
evalcond[5]=(((r21*x9783))+x9787+((r20*x9789))+((cj11*sj12))+((x9781*x9792))+(((-1.0)*r20*x9782*x9790)));
evalcond[6]=(((r21*x9782))+(((-1.0)*sj13*x9781*x9790))+((r20*x9778*x9783))+x9786+((r20*x9788))+(((-1.0)*cj12*x9779)));
evalcond[7]=(((sj10*x9786))+(((-1.0)*r10*x9782*x9790))+((r10*x9789))+((r11*x9783))+(((-1.0)*cj12*sj10*x9779))+((x9785*x9792)));
evalcond[8]=((((-1.0)*sj10*sj12*x9779))+((r10*x9788))+(((-1.0)*x9784*x9787))+((r11*x9782))+(((-1.0)*sj13*x9785*x9790))+((r10*x9778*x9783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x9793=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9793.valid){
continue;
}
CheckValue<IkReal> x9794=IKPowWithIntegerCheck(r02,-1);
if(!x9794.valid){
continue;
}
if( IKabs(((-1.0)*cj10*(x9793.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj10*(x9794.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj10*(x9793.value)))+IKsqr(((-1.0)*sj10*(x9794.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*cj10*(x9793.value)), ((-1.0)*sj10*(x9794.value)));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9795=IKsin(j14);
IkReal x9796=IKcos(j14);
IkReal x9797=((1.0)*cj11);
IkReal x9798=(cj10*sj12);
IkReal x9799=(gconst1*r21);
IkReal x9800=(cj13*gconst2);
IkReal x9801=(gconst2*sj13);
IkReal x9802=((1.0)*sj10);
IkReal x9803=(gconst1*r11);
IkReal x9804=(sj11*sj12);
IkReal x9805=(cj12*sj11);
IkReal x9806=(cj13*gconst1);
IkReal x9807=(gconst1*sj13);
IkReal x9808=((1.0)*x9796);
IkReal x9809=((1.0)*x9795);
IkReal x9810=(cj13*x9796);
evalcond[0]=((((-1.0)*r02*x9808))+(((-1.0)*x9802)));
evalcond[1]=((((-1.0)*gconst2*r20*x9809))+((x9795*x9799)));
evalcond[2]=((((-1.0)*gconst2*r10*x9809))+cj10+((x9795*x9803)));
evalcond[3]=(((sj11*x9798))+((cj13*r02*x9795))+(((-1.0)*cj10*cj12*x9797)));
evalcond[4]=((((-1.0)*r02*sj13*x9809))+(((-1.0)*x9797*x9798))+(((-1.0)*cj10*x9805)));
evalcond[5]=(((r21*x9801))+(((-1.0)*r20*x9800*x9808))+((x9799*x9810))+((r20*x9807))+x9805+((cj11*sj12)));
evalcond[6]=(((r21*x9800))+(((-1.0)*sj13*x9799*x9808))+(((-1.0)*cj12*x9797))+((r20*x9796*x9801))+((r20*x9806))+x9804);
evalcond[7]=((((-1.0)*r10*x9800*x9808))+((r10*x9807))+((sj10*x9804))+((r11*x9801))+((x9803*x9810))+(((-1.0)*cj12*sj10*x9797)));
evalcond[8]=(((r10*x9806))+(((-1.0)*sj13*x9803*x9808))+(((-1.0)*sj10*sj12*x9797))+((r11*x9800))+((r10*x9796*x9801))+(((-1.0)*x9802*x9805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9811=r21*r21;
IkReal x9812=gconst1*gconst1;
IkReal x9813=r20*r20;
IkReal x9814=gconst2*gconst2;
IkReal x9815=(gconst2*r20);
IkReal x9816=(gconst1*r21);
IkReal x9817=(cj11*cj12);
IkReal x9818=(sj11*sj12);
IkReal x9819=(cj13*r20);
IkReal x9820=(cj13*gconst1*gconst2);
CheckValue<IkReal> x9821=IKPowWithIntegerCheck(IKsign((((sj13*x9813*x9814))+((sj13*(r22*r22)))+((sj13*x9811*x9812))+(((-2.0)*sj13*x9815*x9816)))),-1);
if(!x9821.valid){
continue;
}
CheckValue<IkReal> x9822 = IKatan2WithCheck(IkReal((((r22*x9818))+((cj13*gconst2*r21*r22))+(((-1.0)*r22*x9817))+((gconst1*r22*x9819)))),IkReal((((x9815*x9817))+((x9816*x9818))+((r21*x9812*x9819))+(((-1.0)*x9813*x9820))+(((-1.0)*x9815*x9818))+(((-1.0)*r21*x9814*x9819))+(((-1.0)*x9816*x9817))+((x9811*x9820)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9822.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9821.value)))+(x9822.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9823=IKsin(j14);
IkReal x9824=IKcos(j14);
IkReal x9825=((1.0)*cj11);
IkReal x9826=(cj10*sj12);
IkReal x9827=(cj13*gconst2);
IkReal x9828=(cj13*gconst1);
IkReal x9829=(gconst2*sj13);
IkReal x9830=((1.0)*sj10);
IkReal x9831=(sj10*sj12);
IkReal x9832=(gconst1*sj13);
IkReal x9833=(cj12*sj11);
IkReal x9834=((1.0)*x9824);
IkReal x9835=(gconst1*x9823);
IkReal x9836=((1.0)*x9823);
IkReal x9837=(cj13*x9823);
evalcond[0]=(((r21*x9835))+(((-1.0)*r22*x9834))+(((-1.0)*gconst2*r20*x9836)));
evalcond[1]=(((r11*x9835))+(((-1.0)*gconst2*r10*x9836))+cj10+(((-1.0)*r12*x9834)));
evalcond[2]=((((-1.0)*x9830))+((r01*x9835))+(((-1.0)*r02*x9834))+(((-1.0)*gconst2*r00*x9836)));
evalcond[3]=((((-1.0)*r20*x9827*x9834))+((r22*x9837))+((r21*x9829))+((r21*x9824*x9828))+((r20*x9832))+x9833+((cj11*sj12)));
evalcond[4]=(((sj11*sj12))+((r20*x9828))+(((-1.0)*r21*x9832*x9834))+(((-1.0)*cj12*x9825))+((r21*x9827))+(((-1.0)*r22*sj13*x9836))+((r20*x9824*x9829)));
evalcond[5]=(((r00*x9832))+((r01*x9824*x9828))+((r01*x9829))+((sj11*x9826))+((r02*x9837))+(((-1.0)*r00*x9827*x9834))+(((-1.0)*cj10*cj12*x9825)));
evalcond[6]=(((r11*x9824*x9828))+((r10*x9832))+((r11*x9829))+(((-1.0)*cj12*sj10*x9825))+((r12*x9837))+((sj11*x9831))+(((-1.0)*r10*x9827*x9834)));
evalcond[7]=((((-1.0)*r01*x9832*x9834))+((r00*x9828))+((r01*x9827))+((r00*x9824*x9829))+(((-1.0)*x9825*x9826))+(((-1.0)*cj10*x9833))+(((-1.0)*r02*sj13*x9836)));
evalcond[8]=(((r11*x9827))+(((-1.0)*r12*sj13*x9836))+(((-1.0)*x9830*x9833))+((r10*x9824*x9829))+(((-1.0)*x9825*x9831))+(((-1.0)*r11*x9832*x9834))+((r10*x9828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9838=((1.0)*gconst2);
CheckValue<IkReal> x9839 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst1*r21*sj10))+(((-1.0)*r20*sj10*x9838)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9839.valid){
continue;
}
CheckValue<IkReal> x9840=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9838)))),-1);
if(!x9840.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9839.value)+(((1.5707963267949)*(x9840.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9841=IKsin(j14);
IkReal x9842=IKcos(j14);
IkReal x9843=((1.0)*cj11);
IkReal x9844=(cj10*sj12);
IkReal x9845=(cj13*gconst2);
IkReal x9846=(cj13*gconst1);
IkReal x9847=(gconst2*sj13);
IkReal x9848=((1.0)*sj10);
IkReal x9849=(sj10*sj12);
IkReal x9850=(gconst1*sj13);
IkReal x9851=(cj12*sj11);
IkReal x9852=((1.0)*x9842);
IkReal x9853=(gconst1*x9841);
IkReal x9854=((1.0)*x9841);
IkReal x9855=(cj13*x9841);
evalcond[0]=(((r21*x9853))+(((-1.0)*gconst2*r20*x9854))+(((-1.0)*r22*x9852)));
evalcond[1]=(((r11*x9853))+(((-1.0)*gconst2*r10*x9854))+cj10+(((-1.0)*r12*x9852)));
evalcond[2]=((((-1.0)*r02*x9852))+(((-1.0)*x9848))+((r01*x9853))+(((-1.0)*gconst2*r00*x9854)));
evalcond[3]=((((-1.0)*r20*x9845*x9852))+((r20*x9850))+((r21*x9842*x9846))+((r22*x9855))+x9851+((cj11*sj12))+((r21*x9847)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r22*sj13*x9854))+((r20*x9846))+(((-1.0)*cj12*x9843))+(((-1.0)*r21*x9850*x9852))+((r20*x9842*x9847))+((r21*x9845)));
evalcond[5]=(((r02*x9855))+((sj11*x9844))+(((-1.0)*r00*x9845*x9852))+(((-1.0)*cj10*cj12*x9843))+((r01*x9842*x9846))+((r01*x9847))+((r00*x9850)));
evalcond[6]=(((r10*x9850))+((r11*x9847))+((sj11*x9849))+(((-1.0)*r10*x9845*x9852))+(((-1.0)*cj12*sj10*x9843))+((r11*x9842*x9846))+((r12*x9855)));
evalcond[7]=((((-1.0)*x9843*x9844))+(((-1.0)*r02*sj13*x9854))+((r01*x9845))+(((-1.0)*r01*x9850*x9852))+((r00*x9846))+((r00*x9842*x9847))+(((-1.0)*cj10*x9851)));
evalcond[8]=((((-1.0)*x9848*x9851))+(((-1.0)*r12*sj13*x9854))+((r11*x9845))+(((-1.0)*x9843*x9849))+((r10*x9846))+((r10*x9842*x9847))+(((-1.0)*r11*x9850*x9852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9856=((1.0)*gconst2);
CheckValue<IkReal> x9857 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst1*r21))+(((-1.0)*cj10*r20*x9856)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9857.valid){
continue;
}
CheckValue<IkReal> x9858=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9856)))),-1);
if(!x9858.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9857.value)+(((1.5707963267949)*(x9858.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x9859=IKsin(j14);
IkReal x9860=IKcos(j14);
IkReal x9861=((1.0)*cj11);
IkReal x9862=(cj10*sj12);
IkReal x9863=(cj13*gconst2);
IkReal x9864=(cj13*gconst1);
IkReal x9865=(gconst2*sj13);
IkReal x9866=((1.0)*sj10);
IkReal x9867=(sj10*sj12);
IkReal x9868=(gconst1*sj13);
IkReal x9869=(cj12*sj11);
IkReal x9870=((1.0)*x9860);
IkReal x9871=(gconst1*x9859);
IkReal x9872=((1.0)*x9859);
IkReal x9873=(cj13*x9859);
evalcond[0]=((((-1.0)*gconst2*r20*x9872))+((r21*x9871))+(((-1.0)*r22*x9870)));
evalcond[1]=((((-1.0)*gconst2*r10*x9872))+cj10+((r11*x9871))+(((-1.0)*r12*x9870)));
evalcond[2]=((((-1.0)*x9866))+(((-1.0)*r02*x9870))+(((-1.0)*gconst2*r00*x9872))+((r01*x9871)));
evalcond[3]=(((r21*x9860*x9864))+((r22*x9873))+(((-1.0)*r20*x9863*x9870))+((r21*x9865))+((r20*x9868))+x9869+((cj11*sj12)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r22*sj13*x9872))+(((-1.0)*cj12*x9861))+((r21*x9863))+((r20*x9864))+((r20*x9860*x9865))+(((-1.0)*r21*x9868*x9870)));
evalcond[5]=((((-1.0)*cj10*cj12*x9861))+((r02*x9873))+((r01*x9860*x9864))+((r00*x9868))+((r01*x9865))+((sj11*x9862))+(((-1.0)*r00*x9863*x9870)));
evalcond[6]=(((r12*x9873))+(((-1.0)*cj12*sj10*x9861))+((r11*x9865))+(((-1.0)*r10*x9863*x9870))+((r10*x9868))+((r11*x9860*x9864))+((sj11*x9867)));
evalcond[7]=((((-1.0)*r02*sj13*x9872))+((r00*x9864))+(((-1.0)*cj10*x9869))+((r01*x9863))+((r00*x9860*x9865))+(((-1.0)*x9861*x9862))+(((-1.0)*r01*x9868*x9870)));
evalcond[8]=((((-1.0)*x9866*x9869))+((r11*x9863))+(((-1.0)*x9861*x9867))+((r10*x9864))+(((-1.0)*r11*x9868*x9870))+((r10*x9860*x9865))+(((-1.0)*r12*sj13*x9872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9874=((-1.0)*r21);
IkReal x9876 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x9876)==0){
continue;
}
IkReal x9875=pow(x9876,-0.5);
CheckValue<IkReal> x9877 = IKatan2WithCheck(IkReal(x9874),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9877.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x9877.value))));
IkReal gconst4=(x9874*x9875);
IkReal gconst5=((1.0)*r20*x9875);
CheckValue<IkReal> x9878 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9878.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x9878.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x9879=((-1.0)*r21);
CheckValue<IkReal> x9882 = IKatan2WithCheck(IkReal(x9879),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9882.valid){
continue;
}
IkReal x9880=((1.0)*(x9882.value));
IkReal x9881=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x9880)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9880)));
IkReal gconst4=(x9879*x9881);
IkReal gconst5=((1.0)*r20*x9881);
IkReal x9883=r22*r22;
IkReal x9884=((1.0)*x9883);
CheckValue<IkReal> x9888=IKPowWithIntegerCheck(((-1.0)+x9883),-1);
if(!x9888.valid){
continue;
}
IkReal x9885=x9888.value;
if((((1.0)+(((-1.0)*x9884)))) < -0.00001)
continue;
IkReal x9886=IKsqrt(((1.0)+(((-1.0)*x9884))));
IkReal x9887=(cj10*x9885*x9886);
j14eval[0]=((IKabs(((((-1.0)*x9884*x9887))+x9887)))+(IKabs((cj10*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9889=((-1.0)*r21);
CheckValue<IkReal> x9892 = IKatan2WithCheck(IkReal(x9889),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9892.valid){
continue;
}
IkReal x9890=((1.0)*(x9892.value));
IkReal x9891=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x9890)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9890)));
IkReal gconst4=(x9889*x9891);
IkReal gconst5=((1.0)*r20*x9891);
IkReal x9893=r22*r22;
IkReal x9894=((1.0)*x9893);
CheckValue<IkReal> x9898=IKPowWithIntegerCheck(((-1.0)+x9893),-1);
if(!x9898.valid){
continue;
}
IkReal x9895=x9898.value;
if((((1.0)+(((-1.0)*x9894)))) < -0.00001)
continue;
IkReal x9896=IKsqrt(((1.0)+(((-1.0)*x9894))));
IkReal x9897=(sj10*x9895*x9896);
j14eval[0]=((IKabs(((((-1.0)*x9894*x9897))+x9897)))+(IKabs((r22*sj10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x9899=((-1.0)*r21);
CheckValue<IkReal> x9902 = IKatan2WithCheck(IkReal(x9899),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9902.valid){
continue;
}
IkReal x9900=((1.0)*(x9902.value));
IkReal x9901=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x9900)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9900)));
IkReal gconst4=(x9899*x9901);
IkReal gconst5=((1.0)*r20*x9901);
IkReal x9903=r22*r22;
IkReal x9904=(cj10*r02);
IkReal x9905=(r12*sj10);
CheckValue<IkReal> x9909=IKPowWithIntegerCheck(((-1.0)+x9903),-1);
if(!x9909.valid){
continue;
}
IkReal x9906=x9909.value;
if((((1.0)+(((-1.0)*x9903)))) < -0.00001)
continue;
IkReal x9907=IKsqrt(((1.0)+(((-1.0)*x9903))));
IkReal x9908=(r22*x9906*x9907);
j14eval[0]=0;
j14eval[1]=((IKabs(((((-1.0)*x9904))+(((-1.0)*x9905)))))+(IKabs((((x9904*x9908))+((x9905*x9908))))));
j14eval[2]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
IkReal x9910=((-1.0)*r21);
CheckValue<IkReal> x9913 = IKatan2WithCheck(IkReal(x9910),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9913.valid){
continue;
}
IkReal x9911=((1.0)*(x9913.value));
IkReal x9912=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x9911)));
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9911)));
IkReal gconst4=(x9910*x9912);
IkReal gconst5=((1.0)*r20*x9912);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=r02;
j14eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9914=((-1.0)*r21);
CheckValue<IkReal> x9917 = IKatan2WithCheck(IkReal(x9914),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9917.valid){
continue;
}
IkReal x9915=((1.0)*(x9917.value));
IkReal x9916=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x9915)));
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9915)));
IkReal gconst4=(x9914*x9916);
IkReal gconst5=((1.0)*r20*x9916);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x9918=((-1.0)*r21);
CheckValue<IkReal> x9921 = IKatan2WithCheck(IkReal(x9918),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9921.valid){
continue;
}
IkReal x9919=((1.0)*(x9921.value));
IkReal x9920=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x9919)));
sj10=0;
cj10=1.0;
j10=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9919)));
IkReal gconst4=(x9918*x9920);
IkReal gconst5=((1.0)*r20*x9920);
j14eval[0]=r02;
j14eval[1]=sj13;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
IkReal x9922=((-1.0)*r21);
CheckValue<IkReal> x9925 = IKatan2WithCheck(IkReal(x9922),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9925.valid){
continue;
}
IkReal x9923=((1.0)*(x9925.value));
IkReal x9924=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x9923)));
sj10=0;
cj10=1.0;
j10=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9923)));
IkReal gconst4=(x9922*x9924);
IkReal gconst5=((1.0)*r20*x9924);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=r02;
j14eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9926=((-1.0)*r21);
CheckValue<IkReal> x9929 = IKatan2WithCheck(IkReal(x9926),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9929.valid){
continue;
}
IkReal x9927=((1.0)*(x9929.value));
IkReal x9928=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x9927)));
sj10=0;
cj10=1.0;
j10=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9927)));
IkReal gconst4=(x9926*x9928);
IkReal gconst5=((1.0)*r20*x9928);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x9930=((-1.0)*r21);
CheckValue<IkReal> x9933 = IKatan2WithCheck(IkReal(x9930),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9933.valid){
continue;
}
IkReal x9931=((1.0)*(x9933.value));
IkReal x9932=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x9931)));
sj10=0;
cj10=1.0;
j10=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9931)));
IkReal gconst4=(x9930*x9932);
IkReal gconst5=((1.0)*r20*x9932);
j14eval[0]=r12;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9934=(gconst5*r10);
IkReal x9935=(gconst4*r11);
CheckValue<IkReal> x9936=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9934*x9935))+(x9934*x9934)+(x9935*x9935))),-1);
if(!x9936.valid){
continue;
}
CheckValue<IkReal> x9937 = IKatan2WithCheck(IkReal(((((-1.0)*x9935))+x9934)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9937.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9936.value)))+(x9937.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9938=IKsin(j14);
IkReal x9939=IKcos(j14);
IkReal x9940=((1.0)*cj11);
IkReal x9941=(gconst4*r21);
IkReal x9942=(gconst5*r00);
IkReal x9943=(gconst4*r01);
IkReal x9944=(gconst5*r10);
IkReal x9945=(gconst5*r20);
IkReal x9946=(gconst4*r11);
IkReal x9947=((1.0)*x9939);
IkReal x9948=((1.0)*x9938);
evalcond[0]=((((-1.0)*x9945*x9948))+(((-1.0)*r22*x9947))+((x9938*x9941)));
evalcond[1]=(((x9938*x9943))+(((-1.0)*r02*x9947))+(((-1.0)*x9942*x9948)));
evalcond[2]=((((-1.0)*r12*x9948))+((x9939*x9944))+(((-1.0)*x9946*x9947)));
evalcond[3]=((1.0)+(((-1.0)*x9944*x9948))+(((-1.0)*r12*x9947))+((x9938*x9946)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x9941*x9947))+(((-1.0)*r22*x9948))+(((-1.0)*cj12*x9940))+((x9939*x9945)));
evalcond[5]=((((-1.0)*sj12*x9940))+(((-1.0)*cj12*sj11))+(((-1.0)*x9943*x9947))+(((-1.0)*r02*x9948))+((x9939*x9942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9949=((1.0)*gconst5);
CheckValue<IkReal> x9950=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x9949)))),-1);
if(!x9950.valid){
continue;
}
CheckValue<IkReal> x9951 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9949))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9951.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9950.value)))+(x9951.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9952=IKsin(j14);
IkReal x9953=IKcos(j14);
IkReal x9954=((1.0)*cj11);
IkReal x9955=(gconst4*r21);
IkReal x9956=(gconst5*r00);
IkReal x9957=(gconst4*r01);
IkReal x9958=(gconst5*r10);
IkReal x9959=(gconst5*r20);
IkReal x9960=(gconst4*r11);
IkReal x9961=((1.0)*x9953);
IkReal x9962=((1.0)*x9952);
evalcond[0]=((((-1.0)*r22*x9961))+((x9952*x9955))+(((-1.0)*x9959*x9962)));
evalcond[1]=((((-1.0)*x9956*x9962))+((x9952*x9957))+(((-1.0)*r02*x9961)));
evalcond[2]=((((-1.0)*x9960*x9961))+((x9953*x9958))+(((-1.0)*r12*x9962)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9961))+(((-1.0)*x9958*x9962))+((x9952*x9960)));
evalcond[4]=(((sj11*sj12))+((x9953*x9959))+(((-1.0)*r22*x9962))+(((-1.0)*x9955*x9961))+(((-1.0)*cj12*x9954)));
evalcond[5]=((((-1.0)*x9957*x9961))+((x9953*x9956))+(((-1.0)*sj12*x9954))+(((-1.0)*cj12*sj11))+(((-1.0)*r02*x9962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x9963 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9963.valid){
continue;
}
CheckValue<IkReal> x9964=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x9964.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9963.value)+(((1.5707963267949)*(x9964.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9965=IKsin(j14);
IkReal x9966=IKcos(j14);
IkReal x9967=((1.0)*cj11);
IkReal x9968=(gconst4*r21);
IkReal x9969=(gconst5*r00);
IkReal x9970=(gconst4*r01);
IkReal x9971=(gconst5*r10);
IkReal x9972=(gconst5*r20);
IkReal x9973=(gconst4*r11);
IkReal x9974=((1.0)*x9966);
IkReal x9975=((1.0)*x9965);
evalcond[0]=(((x9965*x9968))+(((-1.0)*r22*x9974))+(((-1.0)*x9972*x9975)));
evalcond[1]=((((-1.0)*r02*x9974))+(((-1.0)*x9969*x9975))+((x9965*x9970)));
evalcond[2]=((((-1.0)*r12*x9975))+(((-1.0)*x9973*x9974))+((x9966*x9971)));
evalcond[3]=((1.0)+(((-1.0)*x9971*x9975))+(((-1.0)*r12*x9974))+((x9965*x9973)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x9968*x9974))+(((-1.0)*cj12*x9967))+(((-1.0)*r22*x9975))+((x9966*x9972)));
evalcond[5]=((((-1.0)*r02*x9975))+((x9966*x9969))+(((-1.0)*cj12*sj11))+(((-1.0)*x9970*x9974))+(((-1.0)*sj12*x9967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
IkReal x9976=((-1.0)*r21);
CheckValue<IkReal> x9979 = IKatan2WithCheck(IkReal(x9976),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9979.valid){
continue;
}
IkReal x9977=((1.0)*(x9979.value));
IkReal x9978=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x9977)));
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9977)));
IkReal gconst4=(x9976*x9978);
IkReal gconst5=((1.0)*r20*x9978);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=r02;
j14eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x9980=((-1.0)*r21);
CheckValue<IkReal> x9983 = IKatan2WithCheck(IkReal(x9980),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9983.valid){
continue;
}
IkReal x9981=((1.0)*(x9983.value));
IkReal x9982=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x9981)));
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9981)));
IkReal gconst4=(x9980*x9982);
IkReal gconst5=((1.0)*r20*x9982);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x9984=((-1.0)*r21);
CheckValue<IkReal> x9987 = IKatan2WithCheck(IkReal(x9984),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x9987.valid){
continue;
}
IkReal x9985=((1.0)*(x9987.value));
IkReal x9986=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x9985)));
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x9985)));
IkReal gconst4=(x9984*x9986);
IkReal gconst5=((1.0)*r20*x9986);
IkReal x9988=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9992=IKPowWithIntegerCheck(x9988,-1);
if(!x9992.valid){
continue;
}
IkReal x9989=x9992.value;
IkReal x9990=((1.0)*x9989);
IkReal x9991=((((-1.0)*x9990*(r10*r10)*(r20*r20)))+(((-1.0)*x9990*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x9989))+(((-1.0)*(r12*r12))));
j14eval[0]=x9991;
j14eval[1]=r12;
j14eval[2]=x9988;
j14eval[3]=IKsign(x9991);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x9993=(gconst5*r10);
IkReal x9994=(gconst4*r11);
CheckValue<IkReal> x9995 = IKatan2WithCheck(IkReal(((((-1.0)*x9993))+x9994)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9995.valid){
continue;
}
CheckValue<IkReal> x9996=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9993*x9993)))+(((-1.0)*(x9994*x9994)))+(((-1.0)*(r12*r12)))+(((2.0)*x9993*x9994)))),-1);
if(!x9996.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x9995.value)+(((1.5707963267949)*(x9996.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x9997=IKcos(j14);
IkReal x9998=IKsin(j14);
IkReal x9999=((1.0)*cj11);
IkReal x10000=((1.0)*x9997);
IkReal x10001=(gconst4*x9997);
IkReal x10002=(gconst4*x9998);
IkReal x10003=((1.0)*gconst5*x9998);
evalcond[0]=(((r12*x9998))+((r11*x10001))+(((-1.0)*gconst5*r10*x10000)));
evalcond[1]=((((-1.0)*r20*x10003))+(((-1.0)*r22*x10000))+((r21*x10002)));
evalcond[2]=((((-1.0)*r00*x10003))+(((-1.0)*r02*x10000))+((r01*x10002)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10000))+((r11*x10002))+(((-1.0)*r10*x10003)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*gconst5*r20*x10000))+(((-1.0)*cj12*x9999))+((r22*x9998))+((r21*x10001)));
evalcond[5]=((((-1.0)*cj12*sj11))+((r01*x10001))+((r02*x9998))+(((-1.0)*sj12*x9999))+(((-1.0)*gconst5*r00*x10000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10004=((1.0)*gconst5);
CheckValue<IkReal> x10005 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10004))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10005.valid){
continue;
}
CheckValue<IkReal> x10006=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10004)))),-1);
if(!x10006.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10005.value)+(((1.5707963267949)*(x10006.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10007=IKcos(j14);
IkReal x10008=IKsin(j14);
IkReal x10009=((1.0)*cj11);
IkReal x10010=((1.0)*x10007);
IkReal x10011=(gconst4*x10007);
IkReal x10012=(gconst4*x10008);
IkReal x10013=((1.0)*gconst5*x10008);
evalcond[0]=(((r12*x10008))+((r11*x10011))+(((-1.0)*gconst5*r10*x10010)));
evalcond[1]=(((r21*x10012))+(((-1.0)*r20*x10013))+(((-1.0)*r22*x10010)));
evalcond[2]=((((-1.0)*r02*x10010))+((r01*x10012))+(((-1.0)*r00*x10013)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10010))+((r11*x10012))+(((-1.0)*r10*x10013)));
evalcond[4]=(((sj11*sj12))+((r21*x10011))+(((-1.0)*cj12*x10009))+(((-1.0)*gconst5*r20*x10010))+((r22*x10008)));
evalcond[5]=(((r02*x10008))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x10009))+((r01*x10011))+(((-1.0)*gconst5*r00*x10010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10014 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10014.valid){
continue;
}
CheckValue<IkReal> x10015=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10015.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10014.value)+(((1.5707963267949)*(x10015.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10016=IKcos(j14);
IkReal x10017=IKsin(j14);
IkReal x10018=((1.0)*cj11);
IkReal x10019=((1.0)*x10016);
IkReal x10020=(gconst4*x10016);
IkReal x10021=(gconst4*x10017);
IkReal x10022=((1.0)*gconst5*x10017);
evalcond[0]=(((r12*x10017))+((r11*x10020))+(((-1.0)*gconst5*r10*x10019)));
evalcond[1]=(((r21*x10021))+(((-1.0)*r22*x10019))+(((-1.0)*r20*x10022)));
evalcond[2]=((((-1.0)*r00*x10022))+(((-1.0)*r02*x10019))+((r01*x10021)));
evalcond[3]=((1.0)+(((-1.0)*r10*x10022))+(((-1.0)*r12*x10019))+((r11*x10021)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*gconst5*r20*x10019))+(((-1.0)*cj12*x10018))+((r22*x10017))+((r21*x10020)));
evalcond[5]=(((r02*x10017))+(((-1.0)*cj12*sj11))+((r01*x10020))+(((-1.0)*sj12*x10018))+(((-1.0)*gconst5*r00*x10019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
IkReal x10023=((-1.0)*r21);
CheckValue<IkReal> x10026 = IKatan2WithCheck(IkReal(x10023),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10026.valid){
continue;
}
IkReal x10024=((1.0)*(x10026.value));
IkReal x10025=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10024)));
sj10=0;
cj10=1.0;
j10=0;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10024)));
IkReal gconst4=(x10023*x10025);
IkReal gconst5=((1.0)*r20*x10025);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=r02;
j14eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x10027=((-1.0)*r21);
CheckValue<IkReal> x10030 = IKatan2WithCheck(IkReal(x10027),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10030.valid){
continue;
}
IkReal x10028=((1.0)*(x10030.value));
IkReal x10029=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10028)));
sj10=0;
cj10=1.0;
j10=0;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10028)));
IkReal gconst4=(x10027*x10029);
IkReal gconst5=((1.0)*r20*x10029);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10031=((-1.0)*r21);
CheckValue<IkReal> x10034 = IKatan2WithCheck(IkReal(x10031),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10034.valid){
continue;
}
IkReal x10032=((1.0)*(x10034.value));
IkReal x10033=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10032)));
sj10=0;
cj10=1.0;
j10=0;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10032)));
IkReal gconst4=(x10031*x10033);
IkReal gconst5=((1.0)*r20*x10033);
IkReal x10035=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10039=IKPowWithIntegerCheck(x10035,-1);
if(!x10039.valid){
continue;
}
IkReal x10036=x10039.value;
IkReal x10037=((1.0)*x10036);
IkReal x10038=((((-1.0)*x10037*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10037*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10036)));
j14eval[0]=x10038;
j14eval[1]=r12;
j14eval[2]=x10035;
j14eval[3]=IKsign(x10038);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10040=(gconst5*r10);
IkReal x10041=(gconst4*r11);
CheckValue<IkReal> x10042=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10041*x10041)))+(((2.0)*x10040*x10041))+(((-1.0)*(x10040*x10040)))+(((-1.0)*(r12*r12))))),-1);
if(!x10042.valid){
continue;
}
CheckValue<IkReal> x10043 = IKatan2WithCheck(IkReal(((((-1.0)*x10040))+x10041)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10043.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10042.value)))+(x10043.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10044=IKcos(j14);
IkReal x10045=IKsin(j14);
IkReal x10046=((1.0)*x10044);
IkReal x10047=(gconst4*x10044);
IkReal x10048=(gconst4*x10045);
IkReal x10049=((1.0)*gconst5*x10045);
evalcond[0]=(((r12*x10045))+((r11*x10047))+(((-1.0)*gconst5*r10*x10046)));
evalcond[1]=(((r21*x10048))+(((-1.0)*r22*x10046))+(((-1.0)*r20*x10049)));
evalcond[2]=((((-1.0)*r02*x10046))+(((-1.0)*r00*x10049))+((r01*x10048)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10046))+(((-1.0)*r10*x10049))+((r11*x10048)));
evalcond[4]=((((-1.0)*gconst5*r20*x10046))+((r21*x10047))+((cj12*sj11))+((cj11*sj12))+((r22*x10045)));
evalcond[5]=(((sj11*sj12))+((r01*x10047))+(((-1.0)*gconst5*r00*x10046))+(((-1.0)*cj11*cj12))+((r02*x10045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10050=((1.0)*gconst5);
CheckValue<IkReal> x10051=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10050)))),-1);
if(!x10051.valid){
continue;
}
CheckValue<IkReal> x10052 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10050)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10052.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10051.value)))+(x10052.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10053=IKcos(j14);
IkReal x10054=IKsin(j14);
IkReal x10055=((1.0)*x10053);
IkReal x10056=(gconst4*x10053);
IkReal x10057=(gconst4*x10054);
IkReal x10058=((1.0)*gconst5*x10054);
evalcond[0]=(((r11*x10056))+(((-1.0)*gconst5*r10*x10055))+((r12*x10054)));
evalcond[1]=(((r21*x10057))+(((-1.0)*r20*x10058))+(((-1.0)*r22*x10055)));
evalcond[2]=(((r01*x10057))+(((-1.0)*r00*x10058))+(((-1.0)*r02*x10055)));
evalcond[3]=((1.0)+(((-1.0)*r10*x10058))+(((-1.0)*r12*x10055))+((r11*x10057)));
evalcond[4]=((((-1.0)*gconst5*r20*x10055))+((r22*x10054))+((r21*x10056))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r01*x10056))+(((-1.0)*gconst5*r00*x10055))+((r02*x10054))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10059 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10059.valid){
continue;
}
CheckValue<IkReal> x10060=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10060.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10059.value)+(((1.5707963267949)*(x10060.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10061=IKcos(j14);
IkReal x10062=IKsin(j14);
IkReal x10063=((1.0)*x10061);
IkReal x10064=(gconst4*x10061);
IkReal x10065=(gconst4*x10062);
IkReal x10066=((1.0)*gconst5*x10062);
evalcond[0]=(((r12*x10062))+((r11*x10064))+(((-1.0)*gconst5*r10*x10063)));
evalcond[1]=((((-1.0)*r20*x10066))+((r21*x10065))+(((-1.0)*r22*x10063)));
evalcond[2]=(((r01*x10065))+(((-1.0)*r00*x10066))+(((-1.0)*r02*x10063)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10063))+(((-1.0)*r10*x10066))+((r11*x10065)));
evalcond[4]=((((-1.0)*gconst5*r20*x10063))+((r22*x10062))+((cj12*sj11))+((r21*x10064))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*gconst5*r00*x10063))+((r01*x10064))+((r02*x10062))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
IkReal x10067=((-1.0)*r21);
CheckValue<IkReal> x10070 = IKatan2WithCheck(IkReal(x10067),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10070.valid){
continue;
}
IkReal x10068=((1.0)*(x10070.value));
IkReal x10069=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10068)));
sj10=0;
cj10=1.0;
j10=0;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10068)));
IkReal gconst4=(x10067*x10069);
IkReal gconst5=((1.0)*r20*x10069);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=r02;
j14eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x10071=((-1.0)*r21);
CheckValue<IkReal> x10074 = IKatan2WithCheck(IkReal(x10071),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10074.valid){
continue;
}
IkReal x10072=((1.0)*(x10074.value));
IkReal x10073=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10072)));
sj10=0;
cj10=1.0;
j10=0;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10072)));
IkReal gconst4=(x10071*x10073);
IkReal gconst5=((1.0)*r20*x10073);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x10075=((-1.0)*r21);
CheckValue<IkReal> x10078 = IKatan2WithCheck(IkReal(x10075),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10078.valid){
continue;
}
IkReal x10076=((1.0)*(x10078.value));
IkReal x10077=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10076)));
sj10=0;
cj10=1.0;
j10=0;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10076)));
IkReal gconst4=(x10075*x10077);
IkReal gconst5=((1.0)*r20*x10077);
j14eval[0]=r12;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10079=(gconst5*r10);
IkReal x10080=(gconst4*r11);
CheckValue<IkReal> x10081 = IKatan2WithCheck(IkReal((x10079+(((-1.0)*x10080)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10081.valid){
continue;
}
CheckValue<IkReal> x10082=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10079*x10080))+(x10079*x10079)+(x10080*x10080))),-1);
if(!x10082.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10081.value)+(((1.5707963267949)*(x10082.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10083=IKsin(j14);
IkReal x10084=IKcos(j14);
IkReal x10085=(gconst4*r21);
IkReal x10086=(gconst5*r00);
IkReal x10087=(gconst4*r01);
IkReal x10088=(gconst5*r10);
IkReal x10089=(gconst5*r20);
IkReal x10090=(gconst4*r11);
IkReal x10091=((1.0)*x10084);
IkReal x10092=((1.0)*x10083);
evalcond[0]=(((x10083*x10085))+(((-1.0)*x10089*x10092))+(((-1.0)*r22*x10091)));
evalcond[1]=((((-1.0)*x10086*x10092))+(((-1.0)*r02*x10091))+((x10083*x10087)));
evalcond[2]=(((x10084*x10088))+(((-1.0)*r12*x10092))+(((-1.0)*x10090*x10091)));
evalcond[3]=((1.0)+(((-1.0)*x10088*x10092))+(((-1.0)*r12*x10091))+((x10083*x10090)));
evalcond[4]=(((x10084*x10089))+(((-1.0)*x10085*x10091))+((cj12*sj11))+(((-1.0)*r22*x10092))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x10084*x10086))+(((-1.0)*x10087*x10091))+(((-1.0)*r02*x10092))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10093=((1.0)*gconst5);
CheckValue<IkReal> x10094 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10093))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10094.valid){
continue;
}
CheckValue<IkReal> x10095=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10093)))),-1);
if(!x10095.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10094.value)+(((1.5707963267949)*(x10095.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10096=IKsin(j14);
IkReal x10097=IKcos(j14);
IkReal x10098=(gconst4*r21);
IkReal x10099=(gconst5*r00);
IkReal x10100=(gconst4*r01);
IkReal x10101=(gconst5*r10);
IkReal x10102=(gconst5*r20);
IkReal x10103=(gconst4*r11);
IkReal x10104=((1.0)*x10097);
IkReal x10105=((1.0)*x10096);
evalcond[0]=((((-1.0)*r22*x10104))+(((-1.0)*x10102*x10105))+((x10096*x10098)));
evalcond[1]=(((x10096*x10100))+(((-1.0)*r02*x10104))+(((-1.0)*x10099*x10105)));
evalcond[2]=((((-1.0)*r12*x10105))+(((-1.0)*x10103*x10104))+((x10097*x10101)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10104))+((x10096*x10103))+(((-1.0)*x10101*x10105)));
evalcond[4]=((((-1.0)*r22*x10105))+((x10097*x10102))+((cj12*sj11))+(((-1.0)*x10098*x10104))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x10100*x10104))+(((-1.0)*r02*x10105))+((x10097*x10099))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10106 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10106.valid){
continue;
}
CheckValue<IkReal> x10107=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10107.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10106.value)+(((1.5707963267949)*(x10107.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10108=IKsin(j14);
IkReal x10109=IKcos(j14);
IkReal x10110=(gconst4*r21);
IkReal x10111=(gconst5*r00);
IkReal x10112=(gconst4*r01);
IkReal x10113=(gconst5*r10);
IkReal x10114=(gconst5*r20);
IkReal x10115=(gconst4*r11);
IkReal x10116=((1.0)*x10109);
IkReal x10117=((1.0)*x10108);
evalcond[0]=(((x10108*x10110))+(((-1.0)*r22*x10116))+(((-1.0)*x10114*x10117)));
evalcond[1]=(((x10108*x10112))+(((-1.0)*r02*x10116))+(((-1.0)*x10111*x10117)));
evalcond[2]=((((-1.0)*r12*x10117))+((x10109*x10113))+(((-1.0)*x10115*x10116)));
evalcond[3]=((1.0)+(((-1.0)*x10113*x10117))+(((-1.0)*r12*x10116))+((x10108*x10115)));
evalcond[4]=((((-1.0)*x10110*x10116))+((x10109*x10114))+(((-1.0)*r22*x10117))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x10112*x10116))+((x10109*x10111))+(((-1.0)*r02*x10117))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j14array[2], cj14array[2], sj14array[2], tempj14array[1];
int numsolutions = 0;
for(int ij14 = 0; ij14 < numroots; ++ij14)
{
IkReal htj14 = zeror[ij14];
tempj14array[0]=((2.0)*(atan(htj14)));
for(int kj14 = 0; kj14 < 1; ++kj14)
{
j14array[numsolutions] = tempj14array[kj14];
if( j14array[numsolutions] > IKPI )
{
    j14array[numsolutions]-=IK2PI;
}
else if( j14array[numsolutions] < -IKPI )
{
    j14array[numsolutions]+=IK2PI;
}
sj14array[numsolutions] = IKsin(j14array[numsolutions]);
cj14array[numsolutions] = IKcos(j14array[numsolutions]);
numsolutions++;
}
}
bool j14valid[2]={true,true};
_nj14 = 2;
for(int ij14 = 0; ij14 < numsolutions; ++ij14)
    {
if( !j14valid[ij14] )
{
    continue;
}
    j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
htj14 = IKtan(j14/2);

_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < numsolutions; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10118=gconst4*gconst4;
IkReal x10119=gconst5*gconst5;
IkReal x10120=(gconst4*r10);
IkReal x10121=(cj13*gconst5);
IkReal x10122=(r22*sj13);
IkReal x10123=(r11*r20);
IkReal x10124=(gconst5*r11);
IkReal x10125=((1.0)*cj13);
IkReal x10126=((1.0)*sj13);
IkReal x10127=(r21*x10118);
CheckValue<IkReal> x10128 = IKatan2WithCheck(IkReal((((x10122*x10124))+((x10120*x10122)))),IkReal((((r10*sj13*x10127))+(((-1.0)*x10119*x10123*x10126))+((gconst4*r21*sj13*x10124))+(((-1.0)*gconst5*r20*x10120*x10126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10128.valid){
continue;
}
CheckValue<IkReal> x10129=IKPowWithIntegerCheck(IKsign((((gconst4*x10121*x10123))+(((-1.0)*r10*r20*x10119*x10125))+((r21*x10120*x10121))+(((-1.0)*r11*x10125*x10127))+(((-1.0)*r12*r22*x10125)))),-1);
if(!x10129.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10128.value)+(((1.5707963267949)*(x10129.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x10130=IKsin(j14);
IkReal x10131=IKcos(j14);
IkReal x10132=(sj11*sj12);
IkReal x10133=(r21*sj13);
IkReal x10134=(gconst5*sj13);
IkReal x10135=((1.0)*cj11);
IkReal x10136=(gconst5*r00);
IkReal x10137=(cj13*gconst5);
IkReal x10138=(gconst4*sj13);
IkReal x10139=(cj12*sj11);
IkReal x10140=(cj13*gconst4);
IkReal x10141=(cj12*x10135);
IkReal x10142=((1.0)*x10131);
IkReal x10143=((1.0)*x10130);
IkReal x10144=(gconst4*x10130);
IkReal x10145=(cj13*x10130);
evalcond[0]=(((r21*x10144))+(((-1.0)*r22*x10142))+(((-1.0)*gconst5*r20*x10143)));
evalcond[1]=((((-1.0)*r02*x10142))+(((-1.0)*x10136*x10143))+((r01*x10144)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10143))+(((-1.0)*r12*x10142))+((r11*x10144)));
evalcond[3]=(((r11*x10134))+((r12*x10145))+((r10*x10138))+((r11*x10131*x10140))+(((-1.0)*r10*x10137*x10142)));
evalcond[4]=(((r11*x10137))+(((-1.0)*r11*x10138*x10142))+((r10*x10140))+(((-1.0)*r12*sj13*x10143))+((r10*x10131*x10134)));
evalcond[5]=(((r20*x10138))+((gconst5*x10133))+x10139+((r22*x10145))+((r21*x10131*x10140))+((cj11*sj12))+(((-1.0)*r20*x10137*x10142)));
evalcond[6]=((((-1.0)*cj13*x10136*x10142))+((r01*x10131*x10140))+((r02*x10145))+x10132+((r01*x10134))+(((-1.0)*x10141))+((r00*x10138)));
evalcond[7]=(((r21*x10137))+(((-1.0)*gconst4*x10133*x10142))+x10132+((r20*x10131*x10134))+(((-1.0)*x10141))+(((-1.0)*r22*sj13*x10143))+((r20*x10140)));
evalcond[8]=(((r00*x10131*x10134))+(((-1.0)*sj12*x10135))+(((-1.0)*r02*sj13*x10143))+(((-1.0)*r01*x10138*x10142))+(((-1.0)*x10139))+((r01*x10137))+((r00*x10140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10146=((1.0)*gconst5);
CheckValue<IkReal> x10147=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10146)))),-1);
if(!x10147.valid){
continue;
}
CheckValue<IkReal> x10148 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10146))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10148.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10147.value)))+(x10148.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x10149=IKsin(j14);
IkReal x10150=IKcos(j14);
IkReal x10151=(sj11*sj12);
IkReal x10152=(r21*sj13);
IkReal x10153=(gconst5*sj13);
IkReal x10154=((1.0)*cj11);
IkReal x10155=(gconst5*r00);
IkReal x10156=(cj13*gconst5);
IkReal x10157=(gconst4*sj13);
IkReal x10158=(cj12*sj11);
IkReal x10159=(cj13*gconst4);
IkReal x10160=(cj12*x10154);
IkReal x10161=((1.0)*x10150);
IkReal x10162=((1.0)*x10149);
IkReal x10163=(gconst4*x10149);
IkReal x10164=(cj13*x10149);
evalcond[0]=((((-1.0)*r22*x10161))+(((-1.0)*gconst5*r20*x10162))+((r21*x10163)));
evalcond[1]=((((-1.0)*x10155*x10162))+((r01*x10163))+(((-1.0)*r02*x10161)));
evalcond[2]=((1.0)+(((-1.0)*r12*x10161))+((r11*x10163))+(((-1.0)*gconst5*r10*x10162)));
evalcond[3]=((((-1.0)*r10*x10156*x10161))+((r10*x10157))+((r11*x10150*x10159))+((r12*x10164))+((r11*x10153)));
evalcond[4]=((((-1.0)*r12*sj13*x10162))+(((-1.0)*r11*x10157*x10161))+((r10*x10159))+((r10*x10150*x10153))+((r11*x10156)));
evalcond[5]=(((gconst5*x10152))+((r22*x10164))+((r21*x10150*x10159))+x10158+(((-1.0)*r20*x10156*x10161))+((r20*x10157))+((cj11*sj12)));
evalcond[6]=((((-1.0)*x10160))+((r01*x10150*x10159))+x10151+((r02*x10164))+((r01*x10153))+((r00*x10157))+(((-1.0)*cj13*x10155*x10161)));
evalcond[7]=((((-1.0)*x10160))+((r21*x10156))+(((-1.0)*r22*sj13*x10162))+(((-1.0)*gconst4*x10152*x10161))+x10151+((r20*x10150*x10153))+((r20*x10159)));
evalcond[8]=((((-1.0)*r02*sj13*x10162))+(((-1.0)*r01*x10157*x10161))+(((-1.0)*sj12*x10154))+((r00*x10150*x10153))+(((-1.0)*x10158))+((r01*x10156))+((r00*x10159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10165 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10165.valid){
continue;
}
CheckValue<IkReal> x10166=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10166.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10165.value)+(((1.5707963267949)*(x10166.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x10167=IKsin(j14);
IkReal x10168=IKcos(j14);
IkReal x10169=(sj11*sj12);
IkReal x10170=(r21*sj13);
IkReal x10171=(gconst5*sj13);
IkReal x10172=((1.0)*cj11);
IkReal x10173=(gconst5*r00);
IkReal x10174=(cj13*gconst5);
IkReal x10175=(gconst4*sj13);
IkReal x10176=(cj12*sj11);
IkReal x10177=(cj13*gconst4);
IkReal x10178=(cj12*x10172);
IkReal x10179=((1.0)*x10168);
IkReal x10180=((1.0)*x10167);
IkReal x10181=(gconst4*x10167);
IkReal x10182=(cj13*x10167);
evalcond[0]=((((-1.0)*r22*x10179))+((r21*x10181))+(((-1.0)*gconst5*r20*x10180)));
evalcond[1]=(((r01*x10181))+(((-1.0)*x10173*x10180))+(((-1.0)*r02*x10179)));
evalcond[2]=((1.0)+((r11*x10181))+(((-1.0)*gconst5*r10*x10180))+(((-1.0)*r12*x10179)));
evalcond[3]=(((r10*x10175))+((r11*x10171))+((r12*x10182))+((r11*x10168*x10177))+(((-1.0)*r10*x10174*x10179)));
evalcond[4]=(((r10*x10177))+(((-1.0)*r11*x10175*x10179))+((r11*x10174))+((r10*x10168*x10171))+(((-1.0)*r12*sj13*x10180)));
evalcond[5]=(((r21*x10168*x10177))+((r22*x10182))+(((-1.0)*r20*x10174*x10179))+x10176+((r20*x10175))+((cj11*sj12))+((gconst5*x10170)));
evalcond[6]=(((r02*x10182))+((r01*x10168*x10177))+(((-1.0)*cj13*x10173*x10179))+((r00*x10175))+x10169+((r01*x10171))+(((-1.0)*x10178)));
evalcond[7]=((((-1.0)*gconst4*x10170*x10179))+((r20*x10168*x10171))+x10169+((r21*x10174))+(((-1.0)*x10178))+(((-1.0)*r22*sj13*x10180))+((r20*x10177)));
evalcond[8]=((((-1.0)*x10176))+((r00*x10168*x10171))+((r00*x10177))+(((-1.0)*sj12*x10172))+((r01*x10174))+(((-1.0)*r01*x10175*x10179))+(((-1.0)*r02*sj13*x10180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x10183=((-1.0)*r21);
CheckValue<IkReal> x10186 = IKatan2WithCheck(IkReal(x10183),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10186.valid){
continue;
}
IkReal x10184=((1.0)*(x10186.value));
IkReal x10185=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10184)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10184)));
IkReal gconst4=(x10183*x10185);
IkReal gconst5=((1.0)*r20*x10185);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10187=((-1.0)*r21);
CheckValue<IkReal> x10190 = IKatan2WithCheck(IkReal(x10187),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10190.valid){
continue;
}
IkReal x10188=((1.0)*(x10190.value));
IkReal x10189=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10188)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10188)));
IkReal gconst4=(x10187*x10189);
IkReal gconst5=((1.0)*r20*x10189);
j14eval[0]=0;
j14eval[1]=r02;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x10191=((-1.0)*r21);
CheckValue<IkReal> x10194 = IKatan2WithCheck(IkReal(x10191),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10194.valid){
continue;
}
IkReal x10192=((1.0)*(x10194.value));
IkReal x10193=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10192)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10192)));
IkReal gconst4=(x10191*x10193);
IkReal gconst5=((1.0)*r20*x10193);
j14eval[0]=r02;
j14eval[1]=sj13;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x10195=((-1.0)*r21);
CheckValue<IkReal> x10198 = IKatan2WithCheck(IkReal(x10195),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10198.valid){
continue;
}
IkReal x10196=((1.0)*(x10198.value));
IkReal x10197=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10196)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10196)));
IkReal gconst4=(x10195*x10197);
IkReal gconst5=((1.0)*r20*x10197);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10199=((-1.0)*r21);
CheckValue<IkReal> x10202 = IKatan2WithCheck(IkReal(x10199),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10202.valid){
continue;
}
IkReal x10200=((1.0)*(x10202.value));
IkReal x10201=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10200)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10200)));
IkReal gconst4=(x10199*x10201);
IkReal gconst5=((1.0)*r20*x10201);
j14eval[0]=0;
j14eval[1]=r02;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10203=((-1.0)*r21);
CheckValue<IkReal> x10206 = IKatan2WithCheck(IkReal(x10203),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10206.valid){
continue;
}
IkReal x10204=((1.0)*(x10206.value));
IkReal x10205=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10204)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10204)));
IkReal gconst4=(x10203*x10205);
IkReal gconst5=((1.0)*r20*x10205);
IkReal x10207=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10211=IKPowWithIntegerCheck(x10207,-1);
if(!x10211.valid){
continue;
}
IkReal x10208=x10211.value;
IkReal x10209=((1.0)*x10208);
IkReal x10210=((((-1.0)*x10209*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10208))+(((-1.0)*(r12*r12)))+(((-1.0)*x10209*(r11*r11)*(r21*r21))));
j14eval[0]=x10210;
j14eval[1]=r12;
j14eval[2]=x10207;
j14eval[3]=IKsign(x10210);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10212=(gconst5*r10);
IkReal x10213=(gconst4*r11);
CheckValue<IkReal> x10214=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10212*x10212)))+(((2.0)*x10212*x10213))+(((-1.0)*(x10213*x10213)))+(((-1.0)*(r12*r12))))),-1);
if(!x10214.valid){
continue;
}
CheckValue<IkReal> x10215 = IKatan2WithCheck(IkReal((x10212+(((-1.0)*x10213)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10215.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10214.value)))+(x10215.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10216=IKsin(j14);
IkReal x10217=IKcos(j14);
IkReal x10218=(gconst4*r21);
IkReal x10219=(gconst5*r00);
IkReal x10220=(gconst4*r01);
IkReal x10221=(gconst5*r10);
IkReal x10222=(gconst5*r20);
IkReal x10223=(gconst4*r11);
IkReal x10224=((1.0)*x10217);
IkReal x10225=((1.0)*x10216);
evalcond[0]=(((x10216*x10218))+(((-1.0)*x10222*x10225))+(((-1.0)*r22*x10224)));
evalcond[1]=((((-1.0)*r02*x10224))+(((-1.0)*x10219*x10225))+((x10216*x10220)));
evalcond[2]=((((-1.0)*r12*x10225))+((x10217*x10221))+(((-1.0)*x10223*x10224)));
evalcond[3]=((-1.0)+(((-1.0)*x10221*x10225))+(((-1.0)*r12*x10224))+((x10216*x10223)));
evalcond[4]=((((-1.0)*x10220*x10224))+(((-1.0)*r02*x10225))+((x10217*x10219))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r22*x10225))+((x10217*x10222))+(((-1.0)*x10218*x10224))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10226=((1.0)*gconst5);
CheckValue<IkReal> x10227=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10226))+(((-1.0)*gconst4*r20)))),-1);
if(!x10227.valid){
continue;
}
CheckValue<IkReal> x10228 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10226)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10228.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10227.value)))+(x10228.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10229=IKsin(j14);
IkReal x10230=IKcos(j14);
IkReal x10231=(gconst4*r21);
IkReal x10232=(gconst5*r00);
IkReal x10233=(gconst4*r01);
IkReal x10234=(gconst5*r10);
IkReal x10235=(gconst5*r20);
IkReal x10236=(gconst4*r11);
IkReal x10237=((1.0)*x10230);
IkReal x10238=((1.0)*x10229);
evalcond[0]=((((-1.0)*x10235*x10238))+((x10229*x10231))+(((-1.0)*r22*x10237)));
evalcond[1]=((((-1.0)*x10232*x10238))+((x10229*x10233))+(((-1.0)*r02*x10237)));
evalcond[2]=(((x10230*x10234))+(((-1.0)*x10236*x10237))+(((-1.0)*r12*x10238)));
evalcond[3]=((-1.0)+(((-1.0)*x10234*x10238))+((x10229*x10236))+(((-1.0)*r12*x10237)));
evalcond[4]=((((-1.0)*x10233*x10237))+((x10230*x10232))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*r02*x10238)));
evalcond[5]=(((sj11*sj12))+((x10230*x10235))+(((-1.0)*r22*x10238))+(((-1.0)*cj11*cj12))+(((-1.0)*x10231*x10237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10239=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10239.valid){
continue;
}
CheckValue<IkReal> x10240 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10240.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10239.value)))+(x10240.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10241=IKsin(j14);
IkReal x10242=IKcos(j14);
IkReal x10243=(gconst4*r21);
IkReal x10244=(gconst5*r00);
IkReal x10245=(gconst4*r01);
IkReal x10246=(gconst5*r10);
IkReal x10247=(gconst5*r20);
IkReal x10248=(gconst4*r11);
IkReal x10249=((1.0)*x10242);
IkReal x10250=((1.0)*x10241);
evalcond[0]=((((-1.0)*x10247*x10250))+((x10241*x10243))+(((-1.0)*r22*x10249)));
evalcond[1]=(((x10241*x10245))+(((-1.0)*x10244*x10250))+(((-1.0)*r02*x10249)));
evalcond[2]=(((x10242*x10246))+(((-1.0)*x10248*x10249))+(((-1.0)*r12*x10250)));
evalcond[3]=((-1.0)+((x10241*x10248))+(((-1.0)*x10246*x10250))+(((-1.0)*r12*x10249)));
evalcond[4]=((((-1.0)*r02*x10250))+((x10242*x10244))+(((-1.0)*x10245*x10249))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x10242*x10247))+(((-1.0)*r22*x10250))+(((-1.0)*cj11*cj12))+(((-1.0)*x10243*x10249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x10251=((-1.0)*r21);
CheckValue<IkReal> x10254 = IKatan2WithCheck(IkReal(x10251),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10254.valid){
continue;
}
IkReal x10252=((1.0)*(x10254.value));
IkReal x10253=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10252)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10252)));
IkReal gconst4=(x10251*x10253);
IkReal gconst5=((1.0)*r20*x10253);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10255=((-1.0)*r21);
CheckValue<IkReal> x10258 = IKatan2WithCheck(IkReal(x10255),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10258.valid){
continue;
}
IkReal x10256=((1.0)*(x10258.value));
IkReal x10257=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10256)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10256)));
IkReal gconst4=(x10255*x10257);
IkReal gconst5=((1.0)*r20*x10257);
j14eval[0]=0;
j14eval[1]=r02;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x10259=((-1.0)*r21);
CheckValue<IkReal> x10262 = IKatan2WithCheck(IkReal(x10259),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10262.valid){
continue;
}
IkReal x10260=((1.0)*(x10262.value));
IkReal x10261=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10260)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10260)));
IkReal gconst4=(x10259*x10261);
IkReal gconst5=((1.0)*r20*x10261);
j14eval[0]=r12;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10263=(gconst5*r10);
IkReal x10264=(gconst4*r11);
CheckValue<IkReal> x10265=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10264*x10264)+(((-2.0)*x10263*x10264))+(x10263*x10263))),-1);
if(!x10265.valid){
continue;
}
CheckValue<IkReal> x10266 = IKatan2WithCheck(IkReal(((((-1.0)*x10263))+x10264)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10266.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10265.value)))+(x10266.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10267=IKcos(j14);
IkReal x10268=IKsin(j14);
IkReal x10269=((1.0)*x10267);
IkReal x10270=(gconst4*x10267);
IkReal x10271=(gconst4*x10268);
IkReal x10272=((1.0)*gconst5*x10268);
evalcond[0]=(((r12*x10268))+((r11*x10270))+(((-1.0)*gconst5*r10*x10269)));
evalcond[1]=((((-1.0)*r22*x10269))+((r21*x10271))+(((-1.0)*r20*x10272)));
evalcond[2]=(((r01*x10271))+(((-1.0)*r00*x10272))+(((-1.0)*r02*x10269)));
evalcond[3]=((-1.0)+((r11*x10271))+(((-1.0)*r10*x10272))+(((-1.0)*r12*x10269)));
evalcond[4]=(((r02*x10268))+((r01*x10270))+((cj12*sj11))+(((-1.0)*gconst5*r00*x10269))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r22*x10268))+((r21*x10270))+(((-1.0)*gconst5*r20*x10269))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10273=((1.0)*gconst5);
CheckValue<IkReal> x10274 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10273))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10274.valid){
continue;
}
CheckValue<IkReal> x10275=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10273))+(((-1.0)*gconst4*r20)))),-1);
if(!x10275.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10274.value)+(((1.5707963267949)*(x10275.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10276=IKcos(j14);
IkReal x10277=IKsin(j14);
IkReal x10278=((1.0)*x10276);
IkReal x10279=(gconst4*x10276);
IkReal x10280=(gconst4*x10277);
IkReal x10281=((1.0)*gconst5*x10277);
evalcond[0]=((((-1.0)*gconst5*r10*x10278))+((r12*x10277))+((r11*x10279)));
evalcond[1]=((((-1.0)*r22*x10278))+((r21*x10280))+(((-1.0)*r20*x10281)));
evalcond[2]=(((r01*x10280))+(((-1.0)*r02*x10278))+(((-1.0)*r00*x10281)));
evalcond[3]=((-1.0)+((r11*x10280))+(((-1.0)*r12*x10278))+(((-1.0)*r10*x10281)));
evalcond[4]=((((-1.0)*gconst5*r00*x10278))+((r01*x10279))+((cj12*sj11))+((r02*x10277))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*gconst5*r20*x10278))+((r21*x10279))+(((-1.0)*cj11*cj12))+((r22*x10277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10282=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10282.valid){
continue;
}
CheckValue<IkReal> x10283 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10283.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10282.value)))+(x10283.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10284=IKcos(j14);
IkReal x10285=IKsin(j14);
IkReal x10286=((1.0)*x10284);
IkReal x10287=(gconst4*x10284);
IkReal x10288=(gconst4*x10285);
IkReal x10289=((1.0)*gconst5*x10285);
evalcond[0]=((((-1.0)*gconst5*r10*x10286))+((r11*x10287))+((r12*x10285)));
evalcond[1]=((((-1.0)*r22*x10286))+((r21*x10288))+(((-1.0)*r20*x10289)));
evalcond[2]=(((r01*x10288))+(((-1.0)*r00*x10289))+(((-1.0)*r02*x10286)));
evalcond[3]=((-1.0)+((r11*x10288))+(((-1.0)*r12*x10286))+(((-1.0)*r10*x10289)));
evalcond[4]=(((r01*x10287))+(((-1.0)*gconst5*r00*x10286))+((r02*x10285))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*gconst5*r20*x10286))+((r22*x10285))+((r21*x10287))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x10290=((-1.0)*r21);
CheckValue<IkReal> x10293 = IKatan2WithCheck(IkReal(x10290),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10293.valid){
continue;
}
IkReal x10291=((1.0)*(x10293.value));
IkReal x10292=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10291)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10291)));
IkReal gconst4=(x10290*x10292);
IkReal gconst5=((1.0)*r20*x10292);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10294=((-1.0)*r21);
CheckValue<IkReal> x10297 = IKatan2WithCheck(IkReal(x10294),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10297.valid){
continue;
}
IkReal x10295=((1.0)*(x10297.value));
IkReal x10296=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10295)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10295)));
IkReal gconst4=(x10294*x10296);
IkReal gconst5=((1.0)*r20*x10296);
j14eval[0]=0;
j14eval[1]=r02;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x10298=((-1.0)*r21);
CheckValue<IkReal> x10301 = IKatan2WithCheck(IkReal(x10298),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10301.valid){
continue;
}
IkReal x10299=((1.0)*(x10301.value));
IkReal x10300=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10299)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10299)));
IkReal gconst4=(x10298*x10300);
IkReal gconst5=((1.0)*r20*x10300);
j14eval[0]=r12;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10302=(gconst5*r10);
IkReal x10303=(gconst4*r11);
CheckValue<IkReal> x10304 = IKatan2WithCheck(IkReal(((((-1.0)*x10302))+x10303)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10304.valid){
continue;
}
CheckValue<IkReal> x10305=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10303*x10303)+(x10302*x10302)+(((-2.0)*x10302*x10303)))),-1);
if(!x10305.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10304.value)+(((1.5707963267949)*(x10305.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10306=IKcos(j14);
IkReal x10307=IKsin(j14);
IkReal x10308=((1.0)*x10306);
IkReal x10309=(gconst4*x10306);
IkReal x10310=(gconst4*x10307);
IkReal x10311=((1.0)*gconst5*x10307);
evalcond[0]=((((-1.0)*gconst5*r10*x10308))+((r11*x10309))+((r12*x10307)));
evalcond[1]=((((-1.0)*r22*x10308))+((r21*x10310))+(((-1.0)*r20*x10311)));
evalcond[2]=(((r01*x10310))+(((-1.0)*r02*x10308))+(((-1.0)*r00*x10311)));
evalcond[3]=((-1.0)+((r11*x10310))+(((-1.0)*r12*x10308))+(((-1.0)*r10*x10311)));
evalcond[4]=((((-1.0)*gconst5*r20*x10308))+((cj12*sj11))+((r21*x10309))+((cj11*sj12))+((r22*x10307)));
evalcond[5]=(((r02*x10307))+(((-1.0)*gconst5*r00*x10308))+(((-1.0)*sj11*sj12))+((cj11*cj12))+((r01*x10309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10312=((1.0)*gconst5);
CheckValue<IkReal> x10313=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10312))+(((-1.0)*gconst4*r20)))),-1);
if(!x10313.valid){
continue;
}
CheckValue<IkReal> x10314 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10312)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10314.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10313.value)))+(x10314.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10315=IKcos(j14);
IkReal x10316=IKsin(j14);
IkReal x10317=((1.0)*x10315);
IkReal x10318=(gconst4*x10315);
IkReal x10319=(gconst4*x10316);
IkReal x10320=((1.0)*gconst5*x10316);
evalcond[0]=(((r11*x10318))+((r12*x10316))+(((-1.0)*gconst5*r10*x10317)));
evalcond[1]=(((r21*x10319))+(((-1.0)*r22*x10317))+(((-1.0)*r20*x10320)));
evalcond[2]=(((r01*x10319))+(((-1.0)*r00*x10320))+(((-1.0)*r02*x10317)));
evalcond[3]=((-1.0)+((r11*x10319))+(((-1.0)*r12*x10317))+(((-1.0)*r10*x10320)));
evalcond[4]=(((r21*x10318))+((r22*x10316))+(((-1.0)*gconst5*r20*x10317))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((r01*x10318))+(((-1.0)*sj11*sj12))+((cj11*cj12))+((r02*x10316))+(((-1.0)*gconst5*r00*x10317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10321=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10321.valid){
continue;
}
CheckValue<IkReal> x10322 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10322.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10321.value)))+(x10322.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10323=IKcos(j14);
IkReal x10324=IKsin(j14);
IkReal x10325=((1.0)*x10323);
IkReal x10326=(gconst4*x10323);
IkReal x10327=(gconst4*x10324);
IkReal x10328=((1.0)*gconst5*x10324);
evalcond[0]=((((-1.0)*gconst5*r10*x10325))+((r12*x10324))+((r11*x10326)));
evalcond[1]=((((-1.0)*r22*x10325))+((r21*x10327))+(((-1.0)*r20*x10328)));
evalcond[2]=((((-1.0)*r02*x10325))+(((-1.0)*r00*x10328))+((r01*x10327)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10325))+((r11*x10327))+(((-1.0)*r10*x10328)));
evalcond[4]=(((r22*x10324))+(((-1.0)*gconst5*r20*x10325))+((r21*x10326))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((r02*x10324))+(((-1.0)*gconst5*r00*x10325))+((cj11*cj12))+((r01*x10326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x10329=((-1.0)*r21);
CheckValue<IkReal> x10332 = IKatan2WithCheck(IkReal(x10329),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10332.valid){
continue;
}
IkReal x10330=((1.0)*(x10332.value));
IkReal x10331=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10330)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10330)));
IkReal gconst4=(x10329*x10331);
IkReal gconst5=((1.0)*r20*x10331);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10333=((-1.0)*r21);
CheckValue<IkReal> x10336 = IKatan2WithCheck(IkReal(x10333),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10336.valid){
continue;
}
IkReal x10334=((1.0)*(x10336.value));
IkReal x10335=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10334)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10334)));
IkReal gconst4=(x10333*x10335);
IkReal gconst5=((1.0)*r20*x10335);
j14eval[0]=0;
j14eval[1]=r02;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10337=((-1.0)*r21);
CheckValue<IkReal> x10340 = IKatan2WithCheck(IkReal(x10337),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10340.valid){
continue;
}
IkReal x10338=((1.0)*(x10340.value));
IkReal x10339=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10338)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10338)));
IkReal gconst4=(x10337*x10339);
IkReal gconst5=((1.0)*r20*x10339);
IkReal x10341=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10345=IKPowWithIntegerCheck(x10341,-1);
if(!x10345.valid){
continue;
}
IkReal x10342=x10345.value;
IkReal x10343=((1.0)*x10342);
IkReal x10344=((((-2.0)*r10*r11*r20*r21*x10342))+(((-1.0)*x10343*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10343*(r11*r11)*(r21*r21))));
j14eval[0]=x10344;
j14eval[1]=r12;
j14eval[2]=x10341;
j14eval[3]=IKsign(x10344);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10346=(gconst5*r10);
IkReal x10347=(gconst4*r11);
CheckValue<IkReal> x10348=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10347*x10347)))+(((-1.0)*(x10346*x10346)))+(((-1.0)*(r12*r12)))+(((2.0)*x10346*x10347)))),-1);
if(!x10348.valid){
continue;
}
CheckValue<IkReal> x10349 = IKatan2WithCheck(IkReal((x10346+(((-1.0)*x10347)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10349.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10348.value)))+(x10349.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10350=IKsin(j14);
IkReal x10351=IKcos(j14);
IkReal x10352=(gconst4*r21);
IkReal x10353=(gconst5*r00);
IkReal x10354=(gconst4*r01);
IkReal x10355=(gconst5*r10);
IkReal x10356=(gconst5*r20);
IkReal x10357=(gconst4*r11);
IkReal x10358=((1.0)*x10351);
IkReal x10359=((1.0)*x10350);
evalcond[0]=((((-1.0)*x10356*x10359))+((x10350*x10352))+(((-1.0)*r22*x10358)));
evalcond[1]=(((x10350*x10354))+(((-1.0)*x10353*x10359))+(((-1.0)*r02*x10358)));
evalcond[2]=((((-1.0)*x10357*x10358))+((x10351*x10355))+(((-1.0)*r12*x10359)));
evalcond[3]=((-1.0)+((x10350*x10357))+(((-1.0)*x10355*x10359))+(((-1.0)*r12*x10358)));
evalcond[4]=(((x10351*x10356))+(((-1.0)*r22*x10359))+(((-1.0)*x10352*x10358))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((x10351*x10353))+((cj11*cj12))+(((-1.0)*x10354*x10358))+(((-1.0)*r02*x10359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10360=((1.0)*gconst5);
CheckValue<IkReal> x10361 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10360)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10361.valid){
continue;
}
CheckValue<IkReal> x10362=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10360))+(((-1.0)*gconst4*r20)))),-1);
if(!x10362.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10361.value)+(((1.5707963267949)*(x10362.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10363=IKsin(j14);
IkReal x10364=IKcos(j14);
IkReal x10365=(gconst4*r21);
IkReal x10366=(gconst5*r00);
IkReal x10367=(gconst4*r01);
IkReal x10368=(gconst5*r10);
IkReal x10369=(gconst5*r20);
IkReal x10370=(gconst4*r11);
IkReal x10371=((1.0)*x10364);
IkReal x10372=((1.0)*x10363);
evalcond[0]=(((x10363*x10365))+(((-1.0)*x10369*x10372))+(((-1.0)*r22*x10371)));
evalcond[1]=(((x10363*x10367))+(((-1.0)*r02*x10371))+(((-1.0)*x10366*x10372)));
evalcond[2]=(((x10364*x10368))+(((-1.0)*r12*x10372))+(((-1.0)*x10370*x10371)));
evalcond[3]=((-1.0)+((x10363*x10370))+(((-1.0)*x10368*x10372))+(((-1.0)*r12*x10371)));
evalcond[4]=(((x10364*x10369))+((cj12*sj11))+(((-1.0)*x10365*x10371))+(((-1.0)*r22*x10372))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+((x10364*x10366))+(((-1.0)*r02*x10372))+(((-1.0)*x10367*x10371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10373=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10373.valid){
continue;
}
CheckValue<IkReal> x10374 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10374.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10373.value)))+(x10374.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10375=IKsin(j14);
IkReal x10376=IKcos(j14);
IkReal x10377=(gconst4*r21);
IkReal x10378=(gconst5*r00);
IkReal x10379=(gconst4*r01);
IkReal x10380=(gconst5*r10);
IkReal x10381=(gconst5*r20);
IkReal x10382=(gconst4*r11);
IkReal x10383=((1.0)*x10376);
IkReal x10384=((1.0)*x10375);
evalcond[0]=((((-1.0)*x10381*x10384))+((x10375*x10377))+(((-1.0)*r22*x10383)));
evalcond[1]=((((-1.0)*r02*x10383))+(((-1.0)*x10378*x10384))+((x10375*x10379)));
evalcond[2]=(((x10376*x10380))+(((-1.0)*r12*x10384))+(((-1.0)*x10382*x10383)));
evalcond[3]=((-1.0)+((x10375*x10382))+(((-1.0)*x10380*x10384))+(((-1.0)*r12*x10383)));
evalcond[4]=(((x10376*x10381))+(((-1.0)*x10377*x10383))+((cj12*sj11))+(((-1.0)*r22*x10384))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*x10379*x10383))+(((-1.0)*r02*x10384))+((x10376*x10378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x10385=((-1.0)*r21);
IkReal x10386=((-1.0)*px);
CheckValue<IkReal> x10388 = IKatan2WithCheck(IkReal(x10385),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10388.valid){
continue;
}
IkReal x10387=((1.0)*(x10388.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10387)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10386);
rxp1_1=(px*r21);
rxp1_2=(r11*x10386);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10387)));
IkReal gconst4=x10385;
IkReal gconst5=((1.0)*r20);
IkReal x10389=((1.0)*r11*r21);
IkReal x10390=((1.0)*r10*r20);
j14eval[0]=((((-1.0)*x10390))+(((-1.0)*x10389)));
j14eval[1]=((((-1.0)*cj13*x10389))+(((-1.0)*cj13*x10390)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x10391=((-1.0)*r21);
IkReal x10392=((-1.0)*px);
CheckValue<IkReal> x10394 = IKatan2WithCheck(IkReal(x10391),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10394.valid){
continue;
}
IkReal x10393=((1.0)*(x10394.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10393)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10392);
rxp1_1=(px*r21);
rxp1_2=(r11*x10392);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10393)));
IkReal gconst4=x10391;
IkReal gconst5=((1.0)*r20);
IkReal x10395=((1.0)*r11*r21);
IkReal x10396=((1.0)*r10*r20);
j14eval[0]=((((-1.0)*x10395))+(((-1.0)*x10396)));
j14eval[1]=(((sj13*x10395))+((sj13*x10396)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x10397=((-1.0)*r21);
IkReal x10398=((-1.0)*px);
CheckValue<IkReal> x10400 = IKatan2WithCheck(IkReal(x10397),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10400.valid){
continue;
}
IkReal x10399=((1.0)*(x10400.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10399)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10398);
rxp1_1=(px*r21);
rxp1_2=(r11*x10398);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10399)));
IkReal gconst4=x10397;
IkReal gconst5=((1.0)*r20);
IkReal x10401=((1.0)*cj13);
j14eval[0]=cj13;
j14eval[1]=r02;
j14eval[2]=((((-1.0)*r11*r21*x10401))+(((-1.0)*r10*r20*x10401)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10402=((1.0)*gconst5);
CheckValue<IkReal> x10403=IKPowWithIntegerCheck(cj13,-1);
if(!x10403.valid){
continue;
}
CheckValue<IkReal> x10404=IKPowWithIntegerCheck(r02,-1);
if(!x10404.valid){
continue;
}
CheckValue<IkReal> x10405=IKPowWithIntegerCheck((((cj13*gconst4*r11))+(((-1.0)*cj13*r10*x10402))),-1);
if(!x10405.valid){
continue;
}
if( IKabs(((x10403.value)*(x10404.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10405.value)*(((((-1.0)*gconst4*r10*sj13))+(((-1.0)*r11*sj13*x10402)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10403.value)*(x10404.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12))))))+IKsqr(((x10405.value)*(((((-1.0)*gconst4*r10*sj13))+(((-1.0)*r11*sj13*x10402))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x10403.value)*(x10404.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12))))), ((x10405.value)*(((((-1.0)*gconst4*r10*sj13))+(((-1.0)*r11*sj13*x10402))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x10406=IKsin(j14);
IkReal x10407=IKcos(j14);
IkReal x10408=(cj12*sj11);
IkReal x10409=(cj11*sj12);
IkReal x10410=(r21*sj13);
IkReal x10411=(cj11*cj12);
IkReal x10412=(gconst5*r10);
IkReal x10413=(sj11*sj12);
IkReal x10414=(cj13*gconst5);
IkReal x10415=(gconst4*r21);
IkReal x10416=(gconst4*sj13);
IkReal x10417=(gconst5*r20);
IkReal x10418=(cj13*gconst4);
IkReal x10419=((1.0)*x10407);
IkReal x10420=(sj13*x10407);
IkReal x10421=(r02*x10406);
IkReal x10422=((1.0)*x10406);
IkReal x10423=(x10408+x10409);
evalcond[0]=((-1.0)*r02*x10407);
evalcond[1]=(((x10406*x10415))+(((-1.0)*x10417*x10422)));
evalcond[2]=(((cj13*x10421))+x10411+(((-1.0)*x10413)));
evalcond[3]=((((-1.0)*sj13*x10421))+x10423);
evalcond[4]=((-1.0)+((gconst4*r11*x10406))+(((-1.0)*x10412*x10422)));
evalcond[5]=(((r11*x10407*x10418))+(((-1.0)*cj13*x10412*x10419))+((r10*x10416))+((gconst5*r11*sj13)));
evalcond[6]=((((-1.0)*r11*x10416*x10419))+((x10412*x10420))+((r11*x10414))+((r10*x10418)));
evalcond[7]=(((gconst5*x10410))+((cj13*x10407*x10415))+(((-1.0)*r20*x10414*x10419))+x10423+((r20*x10416)));
evalcond[8]=(((r21*x10414))+((x10417*x10420))+x10413+((r20*x10418))+(((-1.0)*x10411))+(((-1.0)*gconst4*x10410*x10419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10424=((1.0)*gconst5);
IkReal x10425=(gconst4*r11);
CheckValue<IkReal> x10426=IKPowWithIntegerCheck(((((-1.0)*r10*x10424))+x10425),-1);
if(!x10426.valid){
continue;
}
CheckValue<IkReal> x10427=IKPowWithIntegerCheck((((gconst5*r10*sj13))+(((-1.0)*sj13*x10425))),-1);
if(!x10427.valid){
continue;
}
if( IKabs(x10426.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10427.value)*(((((-1.0)*cj13*r11*x10424))+(((-1.0)*cj13*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10426.value)+IKsqr(((x10427.value)*(((((-1.0)*cj13*r11*x10424))+(((-1.0)*cj13*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(x10426.value, ((x10427.value)*(((((-1.0)*cj13*r11*x10424))+(((-1.0)*cj13*gconst4*r10))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x10428=IKsin(j14);
IkReal x10429=IKcos(j14);
IkReal x10430=(cj12*sj11);
IkReal x10431=(cj11*sj12);
IkReal x10432=(r21*sj13);
IkReal x10433=(cj11*cj12);
IkReal x10434=(gconst5*r10);
IkReal x10435=(sj11*sj12);
IkReal x10436=(cj13*gconst5);
IkReal x10437=(gconst4*r21);
IkReal x10438=(gconst4*sj13);
IkReal x10439=(gconst5*r20);
IkReal x10440=(cj13*gconst4);
IkReal x10441=((1.0)*x10429);
IkReal x10442=(sj13*x10429);
IkReal x10443=(r02*x10428);
IkReal x10444=((1.0)*x10428);
IkReal x10445=(x10431+x10430);
evalcond[0]=((-1.0)*r02*x10429);
evalcond[1]=(((x10428*x10437))+(((-1.0)*x10439*x10444)));
evalcond[2]=(((cj13*x10443))+(((-1.0)*x10435))+x10433);
evalcond[3]=(x10445+(((-1.0)*sj13*x10443)));
evalcond[4]=((-1.0)+(((-1.0)*x10434*x10444))+((gconst4*r11*x10428)));
evalcond[5]=(((r10*x10438))+((gconst5*r11*sj13))+(((-1.0)*cj13*x10434*x10441))+((r11*x10429*x10440)));
evalcond[6]=(((x10434*x10442))+((r11*x10436))+((r10*x10440))+(((-1.0)*r11*x10438*x10441)));
evalcond[7]=(((gconst5*x10432))+((cj13*x10429*x10437))+x10445+((r20*x10438))+(((-1.0)*r20*x10436*x10441)));
evalcond[8]=(((r20*x10440))+(((-1.0)*x10433))+x10435+(((-1.0)*gconst4*x10432*x10441))+((x10439*x10442))+((r21*x10436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10446=((1.0)*r10);
IkReal x10447=(gconst4*r11);
CheckValue<IkReal> x10448=IKPowWithIntegerCheck((x10447+(((-1.0)*gconst5*x10446))),-1);
if(!x10448.valid){
continue;
}
CheckValue<IkReal> x10449=IKPowWithIntegerCheck((((cj13*x10447))+(((-1.0)*cj13*gconst5*x10446))),-1);
if(!x10449.valid){
continue;
}
if( IKabs(x10448.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10449.value)*(((((-1.0)*gconst5*r11*sj13))+(((-1.0)*gconst4*sj13*x10446)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10448.value)+IKsqr(((x10449.value)*(((((-1.0)*gconst5*r11*sj13))+(((-1.0)*gconst4*sj13*x10446))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(x10448.value, ((x10449.value)*(((((-1.0)*gconst5*r11*sj13))+(((-1.0)*gconst4*sj13*x10446))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x10450=IKsin(j14);
IkReal x10451=IKcos(j14);
IkReal x10452=(cj12*sj11);
IkReal x10453=(cj11*sj12);
IkReal x10454=(r21*sj13);
IkReal x10455=(cj11*cj12);
IkReal x10456=(gconst5*r10);
IkReal x10457=(sj11*sj12);
IkReal x10458=(cj13*gconst5);
IkReal x10459=(gconst4*r21);
IkReal x10460=(gconst4*sj13);
IkReal x10461=(gconst5*r20);
IkReal x10462=(cj13*gconst4);
IkReal x10463=((1.0)*x10451);
IkReal x10464=(sj13*x10451);
IkReal x10465=(r02*x10450);
IkReal x10466=((1.0)*x10450);
IkReal x10467=(x10453+x10452);
evalcond[0]=((-1.0)*r02*x10451);
evalcond[1]=((((-1.0)*x10461*x10466))+((x10450*x10459)));
evalcond[2]=((((-1.0)*x10457))+((cj13*x10465))+x10455);
evalcond[3]=((((-1.0)*sj13*x10465))+x10467);
evalcond[4]=((-1.0)+(((-1.0)*x10456*x10466))+((gconst4*r11*x10450)));
evalcond[5]=((((-1.0)*cj13*x10456*x10463))+((r11*x10451*x10462))+((gconst5*r11*sj13))+((r10*x10460)));
evalcond[6]=(((r11*x10458))+(((-1.0)*r11*x10460*x10463))+((x10456*x10464))+((r10*x10462)));
evalcond[7]=(((r20*x10460))+((cj13*x10451*x10459))+(((-1.0)*r20*x10458*x10463))+((gconst5*x10454))+x10467);
evalcond[8]=(((r20*x10462))+(((-1.0)*x10455))+(((-1.0)*gconst4*x10454*x10463))+((x10461*x10464))+x10457+((r21*x10458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10468=gconst4*gconst4;
IkReal x10469=gconst5*gconst5;
IkReal x10470=(gconst4*r10);
IkReal x10471=(cj13*gconst5);
IkReal x10472=(r22*sj13);
IkReal x10473=(r11*r20);
IkReal x10474=(gconst5*r11);
IkReal x10475=((1.0)*cj13);
IkReal x10476=((1.0)*sj13);
IkReal x10477=(r21*x10468);
CheckValue<IkReal> x10478 = IKatan2WithCheck(IkReal((((x10470*x10472))+((x10472*x10474)))),IkReal((((gconst4*r21*sj13*x10474))+((r10*sj13*x10477))+(((-1.0)*x10469*x10473*x10476))+(((-1.0)*gconst5*r20*x10470*x10476)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10478.valid){
continue;
}
CheckValue<IkReal> x10479=IKPowWithIntegerCheck(IKsign((((r21*x10470*x10471))+(((-1.0)*r12*r22*x10475))+(((-1.0)*r11*x10475*x10477))+((gconst4*x10471*x10473))+(((-1.0)*r10*r20*x10469*x10475)))),-1);
if(!x10479.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10478.value)+(((1.5707963267949)*(x10479.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x10480=IKsin(j14);
IkReal x10481=IKcos(j14);
IkReal x10482=(cj12*sj11);
IkReal x10483=(cj11*sj12);
IkReal x10484=(r21*sj13);
IkReal x10485=(gconst5*sj13);
IkReal x10486=(cj11*cj12);
IkReal x10487=(gconst5*r00);
IkReal x10488=(cj13*gconst5);
IkReal x10489=(sj11*sj12);
IkReal x10490=(gconst4*sj13);
IkReal x10491=(cj13*gconst4);
IkReal x10492=((1.0)*x10481);
IkReal x10493=((1.0)*x10480);
IkReal x10494=(gconst4*x10480);
IkReal x10495=(cj13*x10480);
IkReal x10496=(x10482+x10483);
evalcond[0]=((((-1.0)*gconst5*r20*x10493))+((r21*x10494))+(((-1.0)*r22*x10492)));
evalcond[1]=(((r01*x10494))+(((-1.0)*r02*x10492))+(((-1.0)*x10487*x10493)));
evalcond[2]=((-1.0)+((r11*x10494))+(((-1.0)*r12*x10492))+(((-1.0)*gconst5*r10*x10493)));
evalcond[3]=(((r11*x10481*x10491))+((r10*x10490))+(((-1.0)*r10*x10488*x10492))+((r12*x10495))+((r11*x10485)));
evalcond[4]=(((r10*x10481*x10485))+((r10*x10491))+((r11*x10488))+(((-1.0)*r12*sj13*x10493))+(((-1.0)*r11*x10490*x10492)));
evalcond[5]=((((-1.0)*r20*x10488*x10492))+((r22*x10495))+x10496+((r20*x10490))+((gconst5*x10484))+((r21*x10481*x10491)));
evalcond[6]=(((r01*x10481*x10491))+(((-1.0)*x10489))+(((-1.0)*cj13*x10487*x10492))+x10486+((r02*x10495))+((r00*x10490))+((r01*x10485)));
evalcond[7]=((((-1.0)*r01*x10490*x10492))+((r00*x10481*x10485))+x10496+(((-1.0)*r02*sj13*x10493))+((r00*x10491))+((r01*x10488)));
evalcond[8]=((((-1.0)*r22*sj13*x10493))+((r21*x10488))+(((-1.0)*x10486))+((r20*x10481*x10485))+(((-1.0)*gconst4*x10484*x10492))+x10489+((r20*x10491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10497=((1.0)*gconst5);
CheckValue<IkReal> x10498 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10497)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10498.valid){
continue;
}
CheckValue<IkReal> x10499=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10497))+(((-1.0)*gconst4*r20)))),-1);
if(!x10499.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10498.value)+(((1.5707963267949)*(x10499.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x10500=IKsin(j14);
IkReal x10501=IKcos(j14);
IkReal x10502=(cj12*sj11);
IkReal x10503=(cj11*sj12);
IkReal x10504=(r21*sj13);
IkReal x10505=(gconst5*sj13);
IkReal x10506=(cj11*cj12);
IkReal x10507=(gconst5*r00);
IkReal x10508=(cj13*gconst5);
IkReal x10509=(sj11*sj12);
IkReal x10510=(gconst4*sj13);
IkReal x10511=(cj13*gconst4);
IkReal x10512=((1.0)*x10501);
IkReal x10513=((1.0)*x10500);
IkReal x10514=(gconst4*x10500);
IkReal x10515=(cj13*x10500);
IkReal x10516=(x10503+x10502);
evalcond[0]=((((-1.0)*r22*x10512))+((r21*x10514))+(((-1.0)*gconst5*r20*x10513)));
evalcond[1]=((((-1.0)*r02*x10512))+((r01*x10514))+(((-1.0)*x10507*x10513)));
evalcond[2]=((-1.0)+(((-1.0)*gconst5*r10*x10513))+(((-1.0)*r12*x10512))+((r11*x10514)));
evalcond[3]=(((r12*x10515))+((r10*x10510))+((r11*x10501*x10511))+(((-1.0)*r10*x10508*x10512))+((r11*x10505)));
evalcond[4]=(((r10*x10511))+((r10*x10501*x10505))+(((-1.0)*r12*sj13*x10513))+(((-1.0)*r11*x10510*x10512))+((r11*x10508)));
evalcond[5]=((((-1.0)*r20*x10508*x10512))+((r20*x10510))+((r21*x10501*x10511))+x10516+((gconst5*x10504))+((r22*x10515)));
evalcond[6]=(((r01*x10505))+((r01*x10501*x10511))+((r00*x10510))+(((-1.0)*cj13*x10507*x10512))+x10506+(((-1.0)*x10509))+((r02*x10515)));
evalcond[7]=((((-1.0)*r01*x10510*x10512))+((r01*x10508))+((r00*x10511))+((r00*x10501*x10505))+x10516+(((-1.0)*r02*sj13*x10513)));
evalcond[8]=((((-1.0)*gconst4*x10504*x10512))+((r20*x10511))+((r20*x10501*x10505))+((r21*x10508))+(((-1.0)*r22*sj13*x10513))+x10509+(((-1.0)*x10506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10517=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10517.valid){
continue;
}
CheckValue<IkReal> x10518 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10518.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10517.value)))+(x10518.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x10519=IKsin(j14);
IkReal x10520=IKcos(j14);
IkReal x10521=(cj12*sj11);
IkReal x10522=(cj11*sj12);
IkReal x10523=(r21*sj13);
IkReal x10524=(gconst5*sj13);
IkReal x10525=(cj11*cj12);
IkReal x10526=(gconst5*r00);
IkReal x10527=(cj13*gconst5);
IkReal x10528=(sj11*sj12);
IkReal x10529=(gconst4*sj13);
IkReal x10530=(cj13*gconst4);
IkReal x10531=((1.0)*x10520);
IkReal x10532=((1.0)*x10519);
IkReal x10533=(gconst4*x10519);
IkReal x10534=(cj13*x10519);
IkReal x10535=(x10521+x10522);
evalcond[0]=((((-1.0)*r22*x10531))+((r21*x10533))+(((-1.0)*gconst5*r20*x10532)));
evalcond[1]=((((-1.0)*r02*x10531))+((r01*x10533))+(((-1.0)*x10526*x10532)));
evalcond[2]=((-1.0)+(((-1.0)*gconst5*r10*x10532))+(((-1.0)*r12*x10531))+((r11*x10533)));
evalcond[3]=(((r10*x10529))+((r11*x10520*x10530))+((r12*x10534))+(((-1.0)*r10*x10527*x10531))+((r11*x10524)));
evalcond[4]=((((-1.0)*r11*x10529*x10531))+((r10*x10530))+(((-1.0)*r12*sj13*x10532))+((r11*x10527))+((r10*x10520*x10524)));
evalcond[5]=(((gconst5*x10523))+((r22*x10534))+x10535+(((-1.0)*r20*x10527*x10531))+((r20*x10529))+((r21*x10520*x10530)));
evalcond[6]=(((r02*x10534))+(((-1.0)*x10528))+((r00*x10529))+x10525+((r01*x10524))+((r01*x10520*x10530))+(((-1.0)*cj13*x10526*x10531)));
evalcond[7]=(x10535+((r00*x10530))+((r01*x10527))+((r00*x10520*x10524))+(((-1.0)*r02*sj13*x10532))+(((-1.0)*r01*x10529*x10531)));
evalcond[8]=((((-1.0)*gconst4*x10523*x10531))+((r21*x10527))+(((-1.0)*x10525))+x10528+((r20*x10520*x10524))+(((-1.0)*r22*sj13*x10532))+((r20*x10530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
IkReal x10536=((-1.0)*r21);
CheckValue<IkReal> x10539 = IKatan2WithCheck(IkReal(x10536),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10539.valid){
continue;
}
IkReal x10537=((1.0)*(x10539.value));
IkReal x10538=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10537)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10537)));
IkReal gconst4=(x10536*x10538);
IkReal gconst5=((1.0)*r20*x10538);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=r12;
j14eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x10540=((-1.0)*r21);
CheckValue<IkReal> x10543 = IKatan2WithCheck(IkReal(x10540),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10543.valid){
continue;
}
IkReal x10541=((1.0)*(x10543.value));
IkReal x10542=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10541)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10541)));
IkReal gconst4=(x10540*x10542);
IkReal gconst5=((1.0)*r20*x10542);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x10544=((-1.0)*r21);
CheckValue<IkReal> x10547 = IKatan2WithCheck(IkReal(x10544),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10547.valid){
continue;
}
IkReal x10545=((1.0)*(x10547.value));
IkReal x10546=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10545)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10545)));
IkReal gconst4=(x10544*x10546);
IkReal gconst5=((1.0)*r20*x10546);
j14eval[0]=r12;
j14eval[1]=sj13;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
IkReal x10548=((-1.0)*r21);
CheckValue<IkReal> x10551 = IKatan2WithCheck(IkReal(x10548),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10551.valid){
continue;
}
IkReal x10549=((1.0)*(x10551.value));
IkReal x10550=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10549)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10549)));
IkReal gconst4=(x10548*x10550);
IkReal gconst5=((1.0)*r20*x10550);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=r12;
j14eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x10552=((-1.0)*r21);
CheckValue<IkReal> x10555 = IKatan2WithCheck(IkReal(x10552),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10555.valid){
continue;
}
IkReal x10553=((1.0)*(x10555.value));
IkReal x10554=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10553)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10553)));
IkReal gconst4=(x10552*x10554);
IkReal gconst5=((1.0)*r20*x10554);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10556=((-1.0)*r21);
CheckValue<IkReal> x10559 = IKatan2WithCheck(IkReal(x10556),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10559.valid){
continue;
}
IkReal x10557=((1.0)*(x10559.value));
IkReal x10558=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10557)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10557)));
IkReal gconst4=(x10556*x10558);
IkReal gconst5=((1.0)*r20*x10558);
IkReal x10560=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10564=IKPowWithIntegerCheck(x10560,-1);
if(!x10564.valid){
continue;
}
IkReal x10561=x10564.value;
IkReal x10562=((1.0)*x10561);
IkReal x10563=((((-1.0)*(r02*r02)))+(((-1.0)*x10562*(r00*r00)*(r20*r20)))+(((-1.0)*x10562*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x10561)));
j14eval[0]=x10563;
j14eval[1]=r02;
j14eval[2]=x10560;
j14eval[3]=IKsign(x10563);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10565=(gconst5*r00);
IkReal x10566=(gconst4*r01);
CheckValue<IkReal> x10567=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10566*x10566)))+(((-1.0)*(x10565*x10565)))+(((-1.0)*(r02*r02)))+(((2.0)*x10565*x10566)))),-1);
if(!x10567.valid){
continue;
}
CheckValue<IkReal> x10568 = IKatan2WithCheck(IkReal(((((-1.0)*x10566))+x10565)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10568.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10567.value)))+(x10568.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10569=IKsin(j14);
IkReal x10570=IKcos(j14);
IkReal x10571=((1.0)*cj11);
IkReal x10572=(gconst4*r21);
IkReal x10573=(gconst5*r00);
IkReal x10574=(gconst4*r01);
IkReal x10575=(gconst5*r10);
IkReal x10576=(gconst5*r20);
IkReal x10577=(gconst4*r11);
IkReal x10578=((1.0)*x10570);
IkReal x10579=((1.0)*x10569);
evalcond[0]=((((-1.0)*r22*x10578))+(((-1.0)*x10576*x10579))+((x10569*x10572)));
evalcond[1]=((((-1.0)*r12*x10578))+(((-1.0)*x10575*x10579))+((x10569*x10577)));
evalcond[2]=(((x10570*x10573))+(((-1.0)*x10574*x10578))+(((-1.0)*r02*x10579)));
evalcond[3]=((-1.0)+(((-1.0)*x10573*x10579))+((x10569*x10574))+(((-1.0)*r02*x10578)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r22*x10579))+((x10570*x10576))+(((-1.0)*x10572*x10578))+(((-1.0)*cj12*x10571)));
evalcond[5]=((((-1.0)*r12*x10579))+((x10570*x10575))+(((-1.0)*cj12*sj11))+(((-1.0)*x10577*x10578))+(((-1.0)*sj12*x10571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10580=((1.0)*gconst5);
CheckValue<IkReal> x10581=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10580))+(((-1.0)*gconst4*r10)))),-1);
if(!x10581.valid){
continue;
}
CheckValue<IkReal> x10582 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10580))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10582.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10581.value)))+(x10582.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10583=IKsin(j14);
IkReal x10584=IKcos(j14);
IkReal x10585=((1.0)*cj11);
IkReal x10586=(gconst4*r21);
IkReal x10587=(gconst5*r00);
IkReal x10588=(gconst4*r01);
IkReal x10589=(gconst5*r10);
IkReal x10590=(gconst5*r20);
IkReal x10591=(gconst4*r11);
IkReal x10592=((1.0)*x10584);
IkReal x10593=((1.0)*x10583);
evalcond[0]=(((x10583*x10586))+(((-1.0)*r22*x10592))+(((-1.0)*x10590*x10593)));
evalcond[1]=((((-1.0)*r12*x10592))+(((-1.0)*x10589*x10593))+((x10583*x10591)));
evalcond[2]=((((-1.0)*r02*x10593))+((x10584*x10587))+(((-1.0)*x10588*x10592)));
evalcond[3]=((-1.0)+((x10583*x10588))+(((-1.0)*x10587*x10593))+(((-1.0)*r02*x10592)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r22*x10593))+((x10584*x10590))+(((-1.0)*cj12*x10585))+(((-1.0)*x10586*x10592)));
evalcond[5]=((((-1.0)*r12*x10593))+(((-1.0)*sj12*x10585))+(((-1.0)*cj12*sj11))+(((-1.0)*x10591*x10592))+((x10584*x10589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10594 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10594.valid){
continue;
}
CheckValue<IkReal> x10595=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10595.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10594.value)+(((1.5707963267949)*(x10595.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10596=IKsin(j14);
IkReal x10597=IKcos(j14);
IkReal x10598=((1.0)*cj11);
IkReal x10599=(gconst4*r21);
IkReal x10600=(gconst5*r00);
IkReal x10601=(gconst4*r01);
IkReal x10602=(gconst5*r10);
IkReal x10603=(gconst5*r20);
IkReal x10604=(gconst4*r11);
IkReal x10605=((1.0)*x10597);
IkReal x10606=((1.0)*x10596);
evalcond[0]=(((x10596*x10599))+(((-1.0)*r22*x10605))+(((-1.0)*x10603*x10606)));
evalcond[1]=((((-1.0)*r12*x10605))+((x10596*x10604))+(((-1.0)*x10602*x10606)));
evalcond[2]=((((-1.0)*r02*x10606))+((x10597*x10600))+(((-1.0)*x10601*x10605)));
evalcond[3]=((-1.0)+(((-1.0)*x10600*x10606))+(((-1.0)*r02*x10605))+((x10596*x10601)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x10598))+(((-1.0)*r22*x10606))+((x10597*x10603))+(((-1.0)*x10599*x10605)));
evalcond[5]=((((-1.0)*sj12*x10598))+(((-1.0)*r12*x10606))+(((-1.0)*cj12*sj11))+(((-1.0)*x10604*x10605))+((x10597*x10602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
IkReal x10607=((-1.0)*r21);
CheckValue<IkReal> x10610 = IKatan2WithCheck(IkReal(x10607),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10610.valid){
continue;
}
IkReal x10608=((1.0)*(x10610.value));
IkReal x10609=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10608)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10608)));
IkReal gconst4=(x10607*x10609);
IkReal gconst5=((1.0)*r20*x10609);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=r12;
j14eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x10611=((-1.0)*r21);
CheckValue<IkReal> x10614 = IKatan2WithCheck(IkReal(x10611),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10614.valid){
continue;
}
IkReal x10612=((1.0)*(x10614.value));
IkReal x10613=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10612)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10612)));
IkReal gconst4=(x10611*x10613);
IkReal gconst5=((1.0)*r20*x10613);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x10615=((-1.0)*r21);
CheckValue<IkReal> x10618 = IKatan2WithCheck(IkReal(x10615),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10618.valid){
continue;
}
IkReal x10616=((1.0)*(x10618.value));
IkReal x10617=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10616)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10616)));
IkReal gconst4=(x10615*x10617);
IkReal gconst5=((1.0)*r20*x10617);
j14eval[0]=r02;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10619=(gconst4*r01);
IkReal x10620=(gconst5*r00);
CheckValue<IkReal> x10621 = IKatan2WithCheck(IkReal(((((-1.0)*x10620))+x10619)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10621.valid){
continue;
}
CheckValue<IkReal> x10622=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10619*x10620))+(x10619*x10619)+(x10620*x10620)+(r02*r02))),-1);
if(!x10622.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10621.value)+(((1.5707963267949)*(x10622.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10623=IKcos(j14);
IkReal x10624=IKsin(j14);
IkReal x10625=((1.0)*cj11);
IkReal x10626=((1.0)*x10623);
IkReal x10627=(gconst4*x10624);
IkReal x10628=(gconst4*x10623);
IkReal x10629=((1.0)*gconst5*x10624);
evalcond[0]=((((-1.0)*gconst5*r00*x10626))+((r01*x10628))+((r02*x10624)));
evalcond[1]=(((r21*x10627))+(((-1.0)*r22*x10626))+(((-1.0)*r20*x10629)));
evalcond[2]=((((-1.0)*r12*x10626))+((r11*x10627))+(((-1.0)*r10*x10629)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10626))+(((-1.0)*r00*x10629))+((r01*x10627)));
evalcond[4]=(((sj11*sj12))+((r21*x10628))+(((-1.0)*gconst5*r20*x10626))+(((-1.0)*cj12*x10625))+((r22*x10624)));
evalcond[5]=((((-1.0)*gconst5*r10*x10626))+(((-1.0)*cj12*sj11))+((r11*x10628))+(((-1.0)*sj12*x10625))+((r12*x10624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10630=((1.0)*gconst5);
CheckValue<IkReal> x10631 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10630)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10631.valid){
continue;
}
CheckValue<IkReal> x10632=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10630))+(((-1.0)*gconst4*r10)))),-1);
if(!x10632.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10631.value)+(((1.5707963267949)*(x10632.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10633=IKcos(j14);
IkReal x10634=IKsin(j14);
IkReal x10635=((1.0)*cj11);
IkReal x10636=((1.0)*x10633);
IkReal x10637=(gconst4*x10634);
IkReal x10638=(gconst4*x10633);
IkReal x10639=((1.0)*gconst5*x10634);
evalcond[0]=(((r01*x10638))+(((-1.0)*gconst5*r00*x10636))+((r02*x10634)));
evalcond[1]=((((-1.0)*r22*x10636))+(((-1.0)*r20*x10639))+((r21*x10637)));
evalcond[2]=((((-1.0)*r10*x10639))+(((-1.0)*r12*x10636))+((r11*x10637)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10636))+(((-1.0)*r00*x10639))+((r01*x10637)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x10635))+(((-1.0)*gconst5*r20*x10636))+((r22*x10634))+((r21*x10638)));
evalcond[5]=((((-1.0)*gconst5*r10*x10636))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x10635))+((r12*x10634))+((r11*x10638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10640 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10640.valid){
continue;
}
CheckValue<IkReal> x10641=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10641.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10640.value)+(((1.5707963267949)*(x10641.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10642=IKcos(j14);
IkReal x10643=IKsin(j14);
IkReal x10644=((1.0)*cj11);
IkReal x10645=((1.0)*x10642);
IkReal x10646=(gconst4*x10643);
IkReal x10647=(gconst4*x10642);
IkReal x10648=((1.0)*gconst5*x10643);
evalcond[0]=((((-1.0)*gconst5*r00*x10645))+((r01*x10647))+((r02*x10643)));
evalcond[1]=(((r21*x10646))+(((-1.0)*r22*x10645))+(((-1.0)*r20*x10648)));
evalcond[2]=((((-1.0)*r12*x10645))+(((-1.0)*r10*x10648))+((r11*x10646)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10645))+((r01*x10646))+(((-1.0)*r00*x10648)));
evalcond[4]=(((sj11*sj12))+((r21*x10647))+(((-1.0)*gconst5*r20*x10645))+(((-1.0)*cj12*x10644))+((r22*x10643)));
evalcond[5]=((((-1.0)*gconst5*r10*x10645))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x10644))+((r11*x10647))+((r12*x10643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
IkReal x10649=((-1.0)*r21);
CheckValue<IkReal> x10652 = IKatan2WithCheck(IkReal(x10649),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10652.valid){
continue;
}
IkReal x10650=((1.0)*(x10652.value));
IkReal x10651=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10650)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10650)));
IkReal gconst4=(x10649*x10651);
IkReal gconst5=((1.0)*r20*x10651);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=r12;
j14eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x10653=((-1.0)*r21);
CheckValue<IkReal> x10656 = IKatan2WithCheck(IkReal(x10653),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10656.valid){
continue;
}
IkReal x10654=((1.0)*(x10656.value));
IkReal x10655=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10654)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10654)));
IkReal gconst4=(x10653*x10655);
IkReal gconst5=((1.0)*r20*x10655);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x10657=((-1.0)*r21);
CheckValue<IkReal> x10660 = IKatan2WithCheck(IkReal(x10657),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10660.valid){
continue;
}
IkReal x10658=((1.0)*(x10660.value));
IkReal x10659=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10658)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10658)));
IkReal gconst4=(x10657*x10659);
IkReal gconst5=((1.0)*r20*x10659);
j14eval[0]=r02;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10661=(gconst4*r01);
IkReal x10662=(gconst5*r00);
CheckValue<IkReal> x10663 = IKatan2WithCheck(IkReal(((((-1.0)*x10662))+x10661)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10663.valid){
continue;
}
CheckValue<IkReal> x10664=IKPowWithIntegerCheck(IKsign(((x10662*x10662)+(x10661*x10661)+(((-2.0)*x10661*x10662))+(r02*r02))),-1);
if(!x10664.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10663.value)+(((1.5707963267949)*(x10664.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10665=IKcos(j14);
IkReal x10666=IKsin(j14);
IkReal x10667=((1.0)*x10665);
IkReal x10668=(gconst4*x10665);
IkReal x10669=(gconst4*x10666);
IkReal x10670=((1.0)*gconst5*x10666);
evalcond[0]=(((r02*x10666))+(((-1.0)*gconst5*r00*x10667))+((r01*x10668)));
evalcond[1]=((((-1.0)*r20*x10670))+(((-1.0)*r22*x10667))+((r21*x10669)));
evalcond[2]=((((-1.0)*r10*x10670))+(((-1.0)*r12*x10667))+((r11*x10669)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10667))+(((-1.0)*r00*x10670))+((r01*x10669)));
evalcond[4]=(((r22*x10666))+(((-1.0)*gconst5*r20*x10667))+((cj12*sj11))+((cj11*sj12))+((r21*x10668)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*gconst5*r10*x10667))+((r12*x10666))+((r11*x10668))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10671=((1.0)*gconst5);
CheckValue<IkReal> x10672 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10671))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10672.valid){
continue;
}
CheckValue<IkReal> x10673=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10671))+(((-1.0)*gconst4*r10)))),-1);
if(!x10673.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10672.value)+(((1.5707963267949)*(x10673.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10674=IKcos(j14);
IkReal x10675=IKsin(j14);
IkReal x10676=((1.0)*x10674);
IkReal x10677=(gconst4*x10674);
IkReal x10678=(gconst4*x10675);
IkReal x10679=((1.0)*gconst5*x10675);
evalcond[0]=(((r02*x10675))+(((-1.0)*gconst5*r00*x10676))+((r01*x10677)));
evalcond[1]=((((-1.0)*r20*x10679))+(((-1.0)*r22*x10676))+((r21*x10678)));
evalcond[2]=(((r11*x10678))+(((-1.0)*r10*x10679))+(((-1.0)*r12*x10676)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10676))+((r01*x10678))+(((-1.0)*r00*x10679)));
evalcond[4]=(((r22*x10675))+(((-1.0)*gconst5*r20*x10676))+((cj12*sj11))+((r21*x10677))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*gconst5*r10*x10676))+((r11*x10677))+((r12*x10675))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10680 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10680.valid){
continue;
}
CheckValue<IkReal> x10681=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10681.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10680.value)+(((1.5707963267949)*(x10681.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10682=IKcos(j14);
IkReal x10683=IKsin(j14);
IkReal x10684=((1.0)*x10682);
IkReal x10685=(gconst4*x10682);
IkReal x10686=(gconst4*x10683);
IkReal x10687=((1.0)*gconst5*x10683);
evalcond[0]=((((-1.0)*gconst5*r00*x10684))+((r01*x10685))+((r02*x10683)));
evalcond[1]=((((-1.0)*r22*x10684))+((r21*x10686))+(((-1.0)*r20*x10687)));
evalcond[2]=((((-1.0)*r12*x10684))+((r11*x10686))+(((-1.0)*r10*x10687)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10684))+((r01*x10686))+(((-1.0)*r00*x10687)));
evalcond[4]=((((-1.0)*gconst5*r20*x10684))+((cj12*sj11))+((r22*x10683))+((r21*x10685))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r11*x10685))+((r12*x10683))+(((-1.0)*gconst5*r10*x10684))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
IkReal x10688=((-1.0)*r21);
CheckValue<IkReal> x10691 = IKatan2WithCheck(IkReal(x10688),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10691.valid){
continue;
}
IkReal x10689=((1.0)*(x10691.value));
IkReal x10690=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10689)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10689)));
IkReal gconst4=(x10688*x10690);
IkReal gconst5=((1.0)*r20*x10690);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=r12;
j14eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x10692=((-1.0)*r21);
CheckValue<IkReal> x10695 = IKatan2WithCheck(IkReal(x10692),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10695.valid){
continue;
}
IkReal x10693=((1.0)*(x10695.value));
IkReal x10694=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10693)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10693)));
IkReal gconst4=(x10692*x10694);
IkReal gconst5=((1.0)*r20*x10694);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10696=((-1.0)*r21);
CheckValue<IkReal> x10699 = IKatan2WithCheck(IkReal(x10696),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10699.valid){
continue;
}
IkReal x10697=((1.0)*(x10699.value));
IkReal x10698=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10697)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10697)));
IkReal gconst4=(x10696*x10698);
IkReal gconst5=((1.0)*r20*x10698);
IkReal x10700=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10704=IKPowWithIntegerCheck(x10700,-1);
if(!x10704.valid){
continue;
}
IkReal x10701=x10704.value;
IkReal x10702=((1.0)*x10701);
IkReal x10703=((((-1.0)*(r02*r02)))+(((-1.0)*x10702*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x10701))+(((-1.0)*x10702*(r00*r00)*(r20*r20))));
j14eval[0]=x10703;
j14eval[1]=r02;
j14eval[2]=x10700;
j14eval[3]=IKsign(x10703);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10705=(gconst5*r00);
IkReal x10706=(gconst4*r01);
CheckValue<IkReal> x10707 = IKatan2WithCheck(IkReal(((((-1.0)*x10706))+x10705)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10707.valid){
continue;
}
CheckValue<IkReal> x10708=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x10705*x10705)))+(((-1.0)*(x10706*x10706)))+(((2.0)*x10705*x10706)))),-1);
if(!x10708.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10707.value)+(((1.5707963267949)*(x10708.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10709=IKsin(j14);
IkReal x10710=IKcos(j14);
IkReal x10711=(gconst4*r21);
IkReal x10712=(gconst5*r00);
IkReal x10713=(gconst4*r01);
IkReal x10714=(gconst5*r10);
IkReal x10715=(gconst5*r20);
IkReal x10716=(gconst4*r11);
IkReal x10717=((1.0)*x10710);
IkReal x10718=((1.0)*x10709);
evalcond[0]=((((-1.0)*x10715*x10718))+(((-1.0)*r22*x10717))+((x10709*x10711)));
evalcond[1]=((((-1.0)*x10714*x10718))+(((-1.0)*r12*x10717))+((x10709*x10716)));
evalcond[2]=((((-1.0)*x10713*x10717))+((x10710*x10712))+(((-1.0)*r02*x10718)));
evalcond[3]=((-1.0)+(((-1.0)*x10712*x10718))+((x10709*x10713))+(((-1.0)*r02*x10717)));
evalcond[4]=((((-1.0)*x10711*x10717))+(((-1.0)*r22*x10718))+((cj12*sj11))+((x10710*x10715))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r12*x10718))+(((-1.0)*x10716*x10717))+((x10710*x10714))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10719=((1.0)*gconst5);
CheckValue<IkReal> x10720 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10719))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10720.valid){
continue;
}
CheckValue<IkReal> x10721=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10719))+(((-1.0)*gconst4*r10)))),-1);
if(!x10721.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10720.value)+(((1.5707963267949)*(x10721.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10722=IKsin(j14);
IkReal x10723=IKcos(j14);
IkReal x10724=(gconst4*r21);
IkReal x10725=(gconst5*r00);
IkReal x10726=(gconst4*r01);
IkReal x10727=(gconst5*r10);
IkReal x10728=(gconst5*r20);
IkReal x10729=(gconst4*r11);
IkReal x10730=((1.0)*x10723);
IkReal x10731=((1.0)*x10722);
evalcond[0]=((((-1.0)*r22*x10730))+(((-1.0)*x10728*x10731))+((x10722*x10724)));
evalcond[1]=((((-1.0)*r12*x10730))+(((-1.0)*x10727*x10731))+((x10722*x10729)));
evalcond[2]=(((x10723*x10725))+(((-1.0)*r02*x10731))+(((-1.0)*x10726*x10730)));
evalcond[3]=((-1.0)+(((-1.0)*x10725*x10731))+(((-1.0)*r02*x10730))+((x10722*x10726)));
evalcond[4]=((((-1.0)*x10724*x10730))+(((-1.0)*r22*x10731))+((x10723*x10728))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x10723*x10727))+(((-1.0)*r12*x10731))+(((-1.0)*x10729*x10730))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10732 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10732.valid){
continue;
}
CheckValue<IkReal> x10733=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10733.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10732.value)+(((1.5707963267949)*(x10733.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10734=IKsin(j14);
IkReal x10735=IKcos(j14);
IkReal x10736=(gconst4*r21);
IkReal x10737=(gconst5*r00);
IkReal x10738=(gconst4*r01);
IkReal x10739=(gconst5*r10);
IkReal x10740=(gconst5*r20);
IkReal x10741=(gconst4*r11);
IkReal x10742=((1.0)*x10735);
IkReal x10743=((1.0)*x10734);
evalcond[0]=((((-1.0)*r22*x10742))+((x10734*x10736))+(((-1.0)*x10740*x10743)));
evalcond[1]=(((x10734*x10741))+(((-1.0)*x10739*x10743))+(((-1.0)*r12*x10742)));
evalcond[2]=((((-1.0)*x10738*x10742))+(((-1.0)*r02*x10743))+((x10735*x10737)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10742))+(((-1.0)*x10737*x10743))+((x10734*x10738)));
evalcond[4]=(((x10735*x10740))+((cj12*sj11))+(((-1.0)*r22*x10743))+(((-1.0)*x10736*x10742))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x10741*x10742))+(((-1.0)*r12*x10743))+((x10735*x10739))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
j14array[0]=0;
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10744=gconst4*gconst4;
IkReal x10745=gconst5*gconst5;
IkReal x10746=(r00*sj13);
IkReal x10747=(cj13*r00);
IkReal x10748=(r01*sj13);
IkReal x10749=(cj13*r01);
IkReal x10750=(r21*x10744);
IkReal x10751=(gconst4*gconst5*r21);
IkReal x10752=(gconst4*gconst5*r20);
IkReal x10753=((1.0)*r20*x10745);
CheckValue<IkReal> x10754=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj13*r02*r22))+(((-1.0)*x10747*x10753))+(((-1.0)*x10749*x10750))+((x10749*x10752))+((x10747*x10751)))),-1);
if(!x10754.valid){
continue;
}
CheckValue<IkReal> x10755 = IKatan2WithCheck(IkReal((((gconst4*r22*x10746))+((gconst5*r22*x10748)))),IkReal(((((-1.0)*x10746*x10752))+((x10746*x10750))+((x10748*x10751))+(((-1.0)*x10748*x10753)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10755.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10754.value)))+(x10755.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x10756=IKsin(j14);
IkReal x10757=IKcos(j14);
IkReal x10758=(sj11*sj12);
IkReal x10759=(gconst4*r21);
IkReal x10760=(gconst5*sj13);
IkReal x10761=((1.0)*cj11);
IkReal x10762=(gconst5*r00);
IkReal x10763=(cj13*gconst5);
IkReal x10764=(gconst4*r20);
IkReal x10765=(cj12*sj11);
IkReal x10766=(gconst4*r00);
IkReal x10767=(gconst4*r10);
IkReal x10768=(gconst4*r01);
IkReal x10769=(gconst4*r11);
IkReal x10770=(cj12*x10761);
IkReal x10771=((1.0)*x10757);
IkReal x10772=((1.0)*x10756);
IkReal x10773=(cj13*x10756);
IkReal x10774=(cj13*x10757);
evalcond[0]=((((-1.0)*gconst5*r20*x10772))+((x10756*x10759))+(((-1.0)*r22*x10771)));
evalcond[1]=((((-1.0)*gconst5*r10*x10772))+(((-1.0)*r12*x10771))+((x10756*x10769)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x10771))+(((-1.0)*x10762*x10772))+((x10756*x10768)));
evalcond[3]=(((sj13*x10766))+((r01*x10760))+(((-1.0)*cj13*x10762*x10771))+((r02*x10773))+((x10768*x10774)));
evalcond[4]=(((r00*x10757*x10760))+((r01*x10763))+(((-1.0)*r02*sj13*x10772))+((cj13*x10766))+(((-1.0)*sj13*x10768*x10771)));
evalcond[5]=(((x10759*x10774))+((sj13*x10764))+((r21*x10760))+((r22*x10773))+x10765+(((-1.0)*r20*x10763*x10771))+((cj11*sj12)));
evalcond[6]=(((sj13*x10767))+((r12*x10773))+((r11*x10760))+(((-1.0)*x10770))+(((-1.0)*r10*x10763*x10771))+x10758+((x10769*x10774)));
evalcond[7]=((((-1.0)*x10770))+(((-1.0)*sj13*x10759*x10771))+((r20*x10757*x10760))+((r21*x10763))+((cj13*x10764))+x10758+(((-1.0)*r22*sj13*x10772)));
evalcond[8]=((((-1.0)*r12*sj13*x10772))+(((-1.0)*x10765))+(((-1.0)*sj13*x10769*x10771))+((r11*x10763))+((r10*x10757*x10760))+(((-1.0)*sj12*x10761))+((cj13*x10767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10775=((1.0)*gconst5);
CheckValue<IkReal> x10776=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10775))+(((-1.0)*gconst4*r10)))),-1);
if(!x10776.valid){
continue;
}
CheckValue<IkReal> x10777 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10775))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10777.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10776.value)))+(x10777.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x10778=IKsin(j14);
IkReal x10779=IKcos(j14);
IkReal x10780=(sj11*sj12);
IkReal x10781=(gconst4*r21);
IkReal x10782=(gconst5*sj13);
IkReal x10783=((1.0)*cj11);
IkReal x10784=(gconst5*r00);
IkReal x10785=(cj13*gconst5);
IkReal x10786=(gconst4*r20);
IkReal x10787=(cj12*sj11);
IkReal x10788=(gconst4*r00);
IkReal x10789=(gconst4*r10);
IkReal x10790=(gconst4*r01);
IkReal x10791=(gconst4*r11);
IkReal x10792=(cj12*x10783);
IkReal x10793=((1.0)*x10779);
IkReal x10794=((1.0)*x10778);
IkReal x10795=(cj13*x10778);
IkReal x10796=(cj13*x10779);
evalcond[0]=(((x10778*x10781))+(((-1.0)*gconst5*r20*x10794))+(((-1.0)*r22*x10793)));
evalcond[1]=(((x10778*x10791))+(((-1.0)*r12*x10793))+(((-1.0)*gconst5*r10*x10794)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x10793))+((x10778*x10790))+(((-1.0)*x10784*x10794)));
evalcond[3]=(((r02*x10795))+((sj13*x10788))+((r01*x10782))+((x10790*x10796))+(((-1.0)*cj13*x10784*x10793)));
evalcond[4]=(((cj13*x10788))+(((-1.0)*r02*sj13*x10794))+((r01*x10785))+((r00*x10779*x10782))+(((-1.0)*sj13*x10790*x10793)));
evalcond[5]=(((r21*x10782))+((sj13*x10786))+((x10781*x10796))+(((-1.0)*r20*x10785*x10793))+x10787+((cj11*sj12))+((r22*x10795)));
evalcond[6]=(((r11*x10782))+((r12*x10795))+(((-1.0)*r10*x10785*x10793))+((sj13*x10789))+(((-1.0)*x10792))+((x10791*x10796))+x10780);
evalcond[7]=(((cj13*x10786))+((r21*x10785))+(((-1.0)*sj13*x10781*x10793))+(((-1.0)*x10792))+x10780+((r20*x10779*x10782))+(((-1.0)*r22*sj13*x10794)));
evalcond[8]=(((cj13*x10789))+(((-1.0)*sj13*x10791*x10793))+((r11*x10785))+(((-1.0)*sj12*x10783))+(((-1.0)*r12*sj13*x10794))+(((-1.0)*x10787))+((r10*x10779*x10782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10797 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10797.valid){
continue;
}
CheckValue<IkReal> x10798=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10798.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10797.value)+(((1.5707963267949)*(x10798.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x10799=IKsin(j14);
IkReal x10800=IKcos(j14);
IkReal x10801=(sj11*sj12);
IkReal x10802=(gconst4*r21);
IkReal x10803=(gconst5*sj13);
IkReal x10804=((1.0)*cj11);
IkReal x10805=(gconst5*r00);
IkReal x10806=(cj13*gconst5);
IkReal x10807=(gconst4*r20);
IkReal x10808=(cj12*sj11);
IkReal x10809=(gconst4*r00);
IkReal x10810=(gconst4*r10);
IkReal x10811=(gconst4*r01);
IkReal x10812=(gconst4*r11);
IkReal x10813=(cj12*x10804);
IkReal x10814=((1.0)*x10800);
IkReal x10815=((1.0)*x10799);
IkReal x10816=(cj13*x10799);
IkReal x10817=(cj13*x10800);
evalcond[0]=((((-1.0)*gconst5*r20*x10815))+((x10799*x10802))+(((-1.0)*r22*x10814)));
evalcond[1]=((((-1.0)*r12*x10814))+(((-1.0)*gconst5*r10*x10815))+((x10799*x10812)));
evalcond[2]=((-1.0)+(((-1.0)*x10805*x10815))+(((-1.0)*r02*x10814))+((x10799*x10811)));
evalcond[3]=(((r02*x10816))+(((-1.0)*cj13*x10805*x10814))+((r01*x10803))+((x10811*x10817))+((sj13*x10809)));
evalcond[4]=(((r00*x10800*x10803))+(((-1.0)*sj13*x10811*x10814))+((r01*x10806))+((cj13*x10809))+(((-1.0)*r02*sj13*x10815)));
evalcond[5]=(((r22*x10816))+((x10802*x10817))+((r21*x10803))+(((-1.0)*r20*x10806*x10814))+((cj11*sj12))+((sj13*x10807))+x10808);
evalcond[6]=(((sj13*x10810))+((x10812*x10817))+((r11*x10803))+(((-1.0)*r10*x10806*x10814))+(((-1.0)*x10813))+((r12*x10816))+x10801);
evalcond[7]=((((-1.0)*r22*sj13*x10815))+((cj13*x10807))+((r21*x10806))+(((-1.0)*sj13*x10802*x10814))+(((-1.0)*x10813))+((r20*x10800*x10803))+x10801);
evalcond[8]=(((cj13*x10810))+(((-1.0)*r12*sj13*x10815))+((r11*x10806))+(((-1.0)*x10808))+(((-1.0)*sj12*x10804))+(((-1.0)*sj13*x10812*x10814))+((r10*x10800*x10803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x10818=((-1.0)*r21);
CheckValue<IkReal> x10821 = IKatan2WithCheck(IkReal(x10818),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10821.valid){
continue;
}
IkReal x10819=((1.0)*(x10821.value));
IkReal x10820=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10819)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10819)));
IkReal gconst4=(x10818*x10820);
IkReal gconst5=((1.0)*r20*x10820);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10822=((-1.0)*r21);
CheckValue<IkReal> x10825 = IKatan2WithCheck(IkReal(x10822),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10825.valid){
continue;
}
IkReal x10823=((1.0)*(x10825.value));
IkReal x10824=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10823)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10823)));
IkReal gconst4=(x10822*x10824);
IkReal gconst5=((1.0)*r20*x10824);
j14eval[0]=0;
j14eval[1]=r12;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x10826=((-1.0)*r21);
CheckValue<IkReal> x10829 = IKatan2WithCheck(IkReal(x10826),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10829.valid){
continue;
}
IkReal x10827=((1.0)*(x10829.value));
IkReal x10828=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10827)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10827)));
IkReal gconst4=(x10826*x10828);
IkReal gconst5=((1.0)*r20*x10828);
j14eval[0]=r12;
j14eval[1]=sj13;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x10830=((-1.0)*r21);
CheckValue<IkReal> x10833 = IKatan2WithCheck(IkReal(x10830),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10833.valid){
continue;
}
IkReal x10831=((1.0)*(x10833.value));
IkReal x10832=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10831)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10831)));
IkReal gconst4=(x10830*x10832);
IkReal gconst5=((1.0)*r20*x10832);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10834=((-1.0)*r21);
CheckValue<IkReal> x10837 = IKatan2WithCheck(IkReal(x10834),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10837.valid){
continue;
}
IkReal x10835=((1.0)*(x10837.value));
IkReal x10836=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10835)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10835)));
IkReal gconst4=(x10834*x10836);
IkReal gconst5=((1.0)*r20*x10836);
j14eval[0]=0;
j14eval[1]=r12;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x10838=((-1.0)*r21);
CheckValue<IkReal> x10841 = IKatan2WithCheck(IkReal(x10838),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10841.valid){
continue;
}
IkReal x10839=((1.0)*(x10841.value));
IkReal x10840=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10839)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10839)));
IkReal gconst4=(x10838*x10840);
IkReal gconst5=((1.0)*r20*x10840);
j14eval[0]=r02;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10842=(gconst5*r00);
IkReal x10843=(gconst4*r01);
CheckValue<IkReal> x10844=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10842*x10843))+(r02*r02)+(x10843*x10843)+(x10842*x10842))),-1);
if(!x10844.valid){
continue;
}
CheckValue<IkReal> x10845 = IKatan2WithCheck(IkReal(((((-1.0)*x10843))+x10842)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10845.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10844.value)))+(x10845.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10846=IKsin(j14);
IkReal x10847=IKcos(j14);
IkReal x10848=(gconst4*r21);
IkReal x10849=(gconst5*r00);
IkReal x10850=(gconst4*r01);
IkReal x10851=(gconst5*r10);
IkReal x10852=(gconst5*r20);
IkReal x10853=(gconst4*r11);
IkReal x10854=((1.0)*x10847);
IkReal x10855=((1.0)*x10846);
evalcond[0]=((((-1.0)*x10852*x10855))+(((-1.0)*r22*x10854))+((x10846*x10848)));
evalcond[1]=((((-1.0)*r12*x10854))+((x10846*x10853))+(((-1.0)*x10851*x10855)));
evalcond[2]=(((x10847*x10849))+(((-1.0)*r02*x10855))+(((-1.0)*x10850*x10854)));
evalcond[3]=((1.0)+(((-1.0)*x10849*x10855))+((x10846*x10850))+(((-1.0)*r02*x10854)));
evalcond[4]=((((-1.0)*r12*x10855))+((x10847*x10851))+(((-1.0)*x10853*x10854))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x10848*x10854))+((x10847*x10852))+(((-1.0)*r22*x10855))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10856=((1.0)*gconst5);
CheckValue<IkReal> x10857=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10856))+(((-1.0)*gconst4*r20)))),-1);
if(!x10857.valid){
continue;
}
CheckValue<IkReal> x10858 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x10856)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10858.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10857.value)))+(x10858.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10859=IKsin(j14);
IkReal x10860=IKcos(j14);
IkReal x10861=(gconst4*r21);
IkReal x10862=(gconst5*r00);
IkReal x10863=(gconst4*r01);
IkReal x10864=(gconst5*r10);
IkReal x10865=(gconst5*r20);
IkReal x10866=(gconst4*r11);
IkReal x10867=((1.0)*x10860);
IkReal x10868=((1.0)*x10859);
evalcond[0]=((((-1.0)*r22*x10867))+((x10859*x10861))+(((-1.0)*x10865*x10868)));
evalcond[1]=((((-1.0)*r12*x10867))+((x10859*x10866))+(((-1.0)*x10864*x10868)));
evalcond[2]=((((-1.0)*x10863*x10867))+((x10860*x10862))+(((-1.0)*r02*x10868)));
evalcond[3]=((1.0)+((x10859*x10863))+(((-1.0)*x10862*x10868))+(((-1.0)*r02*x10867)));
evalcond[4]=((((-1.0)*r12*x10868))+(((-1.0)*x10866*x10867))+((x10860*x10864))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r22*x10868))+((x10860*x10865))+(((-1.0)*x10861*x10867))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10869=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10869.valid){
continue;
}
CheckValue<IkReal> x10870 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10870.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10869.value)))+(x10870.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10871=IKsin(j14);
IkReal x10872=IKcos(j14);
IkReal x10873=(gconst4*r21);
IkReal x10874=(gconst5*r00);
IkReal x10875=(gconst4*r01);
IkReal x10876=(gconst5*r10);
IkReal x10877=(gconst5*r20);
IkReal x10878=(gconst4*r11);
IkReal x10879=((1.0)*x10872);
IkReal x10880=((1.0)*x10871);
evalcond[0]=((((-1.0)*r22*x10879))+(((-1.0)*x10877*x10880))+((x10871*x10873)));
evalcond[1]=((((-1.0)*r12*x10879))+(((-1.0)*x10876*x10880))+((x10871*x10878)));
evalcond[2]=((((-1.0)*r02*x10880))+(((-1.0)*x10875*x10879))+((x10872*x10874)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10879))+(((-1.0)*x10874*x10880))+((x10871*x10875)));
evalcond[4]=(((cj12*sj11))+(((-1.0)*x10878*x10879))+(((-1.0)*r12*x10880))+((x10872*x10876))+((cj11*sj12)));
evalcond[5]=((((-1.0)*x10873*x10879))+((sj11*sj12))+(((-1.0)*r22*x10880))+((x10872*x10877))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x10881=((-1.0)*r21);
CheckValue<IkReal> x10884 = IKatan2WithCheck(IkReal(x10881),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10884.valid){
continue;
}
IkReal x10882=((1.0)*(x10884.value));
IkReal x10883=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10882)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10882)));
IkReal gconst4=(x10881*x10883);
IkReal gconst5=((1.0)*r20*x10883);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10885=((-1.0)*r21);
CheckValue<IkReal> x10888 = IKatan2WithCheck(IkReal(x10885),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10888.valid){
continue;
}
IkReal x10886=((1.0)*(x10888.value));
IkReal x10887=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10886)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10886)));
IkReal gconst4=(x10885*x10887);
IkReal gconst5=((1.0)*r20*x10887);
j14eval[0]=0;
j14eval[1]=r12;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10889=((-1.0)*r21);
CheckValue<IkReal> x10892 = IKatan2WithCheck(IkReal(x10889),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10892.valid){
continue;
}
IkReal x10890=((1.0)*(x10892.value));
IkReal x10891=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10890)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10890)));
IkReal gconst4=(x10889*x10891);
IkReal gconst5=((1.0)*r20*x10891);
IkReal x10893=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10897=IKPowWithIntegerCheck(x10893,-1);
if(!x10897.valid){
continue;
}
IkReal x10894=x10897.value;
IkReal x10895=((1.0)*x10894);
IkReal x10896=((((-1.0)*x10895*(r00*r00)*(r20*r20)))+(((-1.0)*x10895*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x10894)));
j14eval[0]=x10896;
j14eval[1]=IKsign(x10896);
j14eval[2]=r02;
j14eval[3]=x10893;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10898=(gconst4*r01);
IkReal x10899=(gconst5*r00);
CheckValue<IkReal> x10900 = IKatan2WithCheck(IkReal(((((-1.0)*x10899))+x10898)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10900.valid){
continue;
}
CheckValue<IkReal> x10901=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10898*x10898)))+(((2.0)*x10898*x10899))+(((-1.0)*(x10899*x10899)))+(((-1.0)*(r02*r02))))),-1);
if(!x10901.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10900.value)+(((1.5707963267949)*(x10901.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10902=IKcos(j14);
IkReal x10903=IKsin(j14);
IkReal x10904=((1.0)*x10902);
IkReal x10905=(gconst4*x10902);
IkReal x10906=(gconst4*x10903);
IkReal x10907=((1.0)*gconst5*x10903);
evalcond[0]=(((r01*x10905))+(((-1.0)*gconst5*r00*x10904))+((r02*x10903)));
evalcond[1]=((((-1.0)*r20*x10907))+(((-1.0)*r22*x10904))+((r21*x10906)));
evalcond[2]=((((-1.0)*r10*x10907))+(((-1.0)*r12*x10904))+((r11*x10906)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10907))+((r01*x10906))+(((-1.0)*r02*x10904)));
evalcond[4]=(((r12*x10903))+(((-1.0)*gconst5*r10*x10904))+((cj12*sj11))+((cj11*sj12))+((r11*x10905)));
evalcond[5]=(((sj11*sj12))+((r22*x10903))+(((-1.0)*gconst5*r20*x10904))+((r21*x10905))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10908=((1.0)*gconst5);
CheckValue<IkReal> x10909=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10908))+(((-1.0)*gconst4*r20)))),-1);
if(!x10909.valid){
continue;
}
CheckValue<IkReal> x10910 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x10908)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10910.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10909.value)))+(x10910.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10911=IKcos(j14);
IkReal x10912=IKsin(j14);
IkReal x10913=((1.0)*x10911);
IkReal x10914=(gconst4*x10911);
IkReal x10915=(gconst4*x10912);
IkReal x10916=((1.0)*gconst5*x10912);
evalcond[0]=(((r02*x10912))+((r01*x10914))+(((-1.0)*gconst5*r00*x10913)));
evalcond[1]=((((-1.0)*r22*x10913))+(((-1.0)*r20*x10916))+((r21*x10915)));
evalcond[2]=((((-1.0)*r12*x10913))+(((-1.0)*r10*x10916))+((r11*x10915)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10913))+((r01*x10915))+(((-1.0)*r00*x10916)));
evalcond[4]=((((-1.0)*gconst5*r10*x10913))+((r12*x10912))+((cj12*sj11))+((r11*x10914))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r21*x10914))+((r22*x10912))+(((-1.0)*gconst5*r20*x10913))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10917=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10917.valid){
continue;
}
CheckValue<IkReal> x10918 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10918.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10917.value)))+(x10918.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10919=IKcos(j14);
IkReal x10920=IKsin(j14);
IkReal x10921=((1.0)*x10919);
IkReal x10922=(gconst4*x10919);
IkReal x10923=(gconst4*x10920);
IkReal x10924=((1.0)*gconst5*x10920);
evalcond[0]=((((-1.0)*gconst5*r00*x10921))+((r02*x10920))+((r01*x10922)));
evalcond[1]=((((-1.0)*r22*x10921))+((r21*x10923))+(((-1.0)*r20*x10924)));
evalcond[2]=((((-1.0)*r10*x10924))+(((-1.0)*r12*x10921))+((r11*x10923)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10921))+((r01*x10923))+(((-1.0)*r00*x10924)));
evalcond[4]=((((-1.0)*gconst5*r10*x10921))+((r12*x10920))+((cj12*sj11))+((r11*x10922))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*gconst5*r20*x10921))+((r21*x10922))+((r22*x10920))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x10925=((-1.0)*r21);
CheckValue<IkReal> x10928 = IKatan2WithCheck(IkReal(x10925),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10928.valid){
continue;
}
IkReal x10926=((1.0)*(x10928.value));
IkReal x10927=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10926)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10926)));
IkReal gconst4=(x10925*x10927);
IkReal gconst5=((1.0)*r20*x10927);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10929=((-1.0)*r21);
CheckValue<IkReal> x10932 = IKatan2WithCheck(IkReal(x10929),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10932.valid){
continue;
}
IkReal x10930=((1.0)*(x10932.value));
IkReal x10931=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10930)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10930)));
IkReal gconst4=(x10929*x10931);
IkReal gconst5=((1.0)*r20*x10931);
j14eval[0]=0;
j14eval[1]=r12;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10933=((-1.0)*r21);
CheckValue<IkReal> x10936 = IKatan2WithCheck(IkReal(x10933),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10936.valid){
continue;
}
IkReal x10934=((1.0)*(x10936.value));
IkReal x10935=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10934)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10934)));
IkReal gconst4=(x10933*x10935);
IkReal gconst5=((1.0)*r20*x10935);
IkReal x10937=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10941=IKPowWithIntegerCheck(x10937,-1);
if(!x10941.valid){
continue;
}
IkReal x10938=x10941.value;
IkReal x10939=((1.0)*x10938);
IkReal x10940=((((-1.0)*(r02*r02)))+(((-1.0)*x10939*(r01*r01)*(r21*r21)))+(((-1.0)*x10939*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x10938)));
j14eval[0]=x10940;
j14eval[1]=IKsign(x10940);
j14eval[2]=r02;
j14eval[3]=x10937;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10942=(gconst4*r01);
IkReal x10943=(gconst5*r00);
CheckValue<IkReal> x10944=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10943*x10943)))+(((-1.0)*(x10942*x10942)))+(((-1.0)*(r02*r02)))+(((2.0)*x10942*x10943)))),-1);
if(!x10944.valid){
continue;
}
CheckValue<IkReal> x10945 = IKatan2WithCheck(IkReal(((((-1.0)*x10943))+x10942)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10945.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10944.value)))+(x10945.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10946=IKcos(j14);
IkReal x10947=IKsin(j14);
IkReal x10948=((1.0)*x10946);
IkReal x10949=(gconst4*x10946);
IkReal x10950=(gconst4*x10947);
IkReal x10951=((1.0)*gconst5*x10947);
evalcond[0]=(((r01*x10949))+(((-1.0)*gconst5*r00*x10948))+((r02*x10947)));
evalcond[1]=((((-1.0)*r20*x10951))+(((-1.0)*r22*x10948))+((r21*x10950)));
evalcond[2]=((((-1.0)*r12*x10948))+(((-1.0)*r10*x10951))+((r11*x10950)));
evalcond[3]=((1.0)+((r01*x10950))+(((-1.0)*r02*x10948))+(((-1.0)*r00*x10951)));
evalcond[4]=(((r21*x10949))+((cj12*sj11))+(((-1.0)*gconst5*r20*x10948))+((cj11*sj12))+((r22*x10947)));
evalcond[5]=((((-1.0)*sj11*sj12))+((r11*x10949))+(((-1.0)*gconst5*r10*x10948))+((r12*x10947))+((cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10952=((1.0)*gconst5);
CheckValue<IkReal> x10953 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x10952)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10953.valid){
continue;
}
CheckValue<IkReal> x10954=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10952))+(((-1.0)*gconst4*r20)))),-1);
if(!x10954.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10953.value)+(((1.5707963267949)*(x10954.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10955=IKcos(j14);
IkReal x10956=IKsin(j14);
IkReal x10957=((1.0)*x10955);
IkReal x10958=(gconst4*x10955);
IkReal x10959=(gconst4*x10956);
IkReal x10960=((1.0)*gconst5*x10956);
evalcond[0]=(((r02*x10956))+((r01*x10958))+(((-1.0)*gconst5*r00*x10957)));
evalcond[1]=((((-1.0)*r20*x10960))+(((-1.0)*r22*x10957))+((r21*x10959)));
evalcond[2]=((((-1.0)*r10*x10960))+(((-1.0)*r12*x10957))+((r11*x10959)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10960))+((r01*x10959))+(((-1.0)*r02*x10957)));
evalcond[4]=(((r22*x10956))+((cj12*sj11))+((r21*x10958))+(((-1.0)*gconst5*r20*x10957))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*gconst5*r10*x10957))+((r12*x10956))+((r11*x10958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x10961=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x10961.valid){
continue;
}
CheckValue<IkReal> x10962 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10962.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10961.value)))+(x10962.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10963=IKcos(j14);
IkReal x10964=IKsin(j14);
IkReal x10965=((1.0)*x10963);
IkReal x10966=(gconst4*x10963);
IkReal x10967=(gconst4*x10964);
IkReal x10968=((1.0)*gconst5*x10964);
evalcond[0]=(((r02*x10964))+((r01*x10966))+(((-1.0)*gconst5*r00*x10965)));
evalcond[1]=((((-1.0)*r20*x10968))+(((-1.0)*r22*x10965))+((r21*x10967)));
evalcond[2]=(((r11*x10967))+(((-1.0)*r10*x10968))+(((-1.0)*r12*x10965)));
evalcond[3]=((1.0)+(((-1.0)*r00*x10968))+((r01*x10967))+(((-1.0)*r02*x10965)));
evalcond[4]=(((r22*x10964))+((cj12*sj11))+((r21*x10966))+(((-1.0)*gconst5*r20*x10965))+((cj11*sj12)));
evalcond[5]=(((r11*x10966))+(((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*gconst5*r10*x10965))+((r12*x10964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x10969=((-1.0)*r21);
CheckValue<IkReal> x10972 = IKatan2WithCheck(IkReal(x10969),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10972.valid){
continue;
}
IkReal x10970=((1.0)*(x10972.value));
IkReal x10971=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10970)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10970)));
IkReal gconst4=(x10969*x10971);
IkReal gconst5=((1.0)*r20*x10971);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x10973=((-1.0)*r21);
CheckValue<IkReal> x10976 = IKatan2WithCheck(IkReal(x10973),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10976.valid){
continue;
}
IkReal x10974=((1.0)*(x10976.value));
IkReal x10975=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10974)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10974)));
IkReal gconst4=(x10973*x10975);
IkReal gconst5=((1.0)*r20*x10975);
j14eval[0]=0;
j14eval[1]=r12;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x10977=((-1.0)*r21);
CheckValue<IkReal> x10980 = IKatan2WithCheck(IkReal(x10977),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10980.valid){
continue;
}
IkReal x10978=((1.0)*(x10980.value));
IkReal x10979=x9875;
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x10978)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10978)));
IkReal gconst4=(x10977*x10979);
IkReal gconst5=((1.0)*r20*x10979);
j14eval[0]=r02;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10981=(gconst5*r00);
IkReal x10982=(gconst4*r01);
CheckValue<IkReal> x10983=IKPowWithIntegerCheck(IKsign(((x10982*x10982)+(((-2.0)*x10981*x10982))+(x10981*x10981)+(r02*r02))),-1);
if(!x10983.valid){
continue;
}
CheckValue<IkReal> x10984 = IKatan2WithCheck(IkReal(((((-1.0)*x10982))+x10981)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10984.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10983.value)))+(x10984.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10985=IKsin(j14);
IkReal x10986=IKcos(j14);
IkReal x10987=(gconst4*r21);
IkReal x10988=(gconst5*r00);
IkReal x10989=(gconst4*r01);
IkReal x10990=(gconst5*r10);
IkReal x10991=(gconst5*r20);
IkReal x10992=(gconst4*r11);
IkReal x10993=((1.0)*x10986);
IkReal x10994=((1.0)*x10985);
evalcond[0]=((((-1.0)*x10991*x10994))+(((-1.0)*r22*x10993))+((x10985*x10987)));
evalcond[1]=(((x10985*x10992))+(((-1.0)*x10990*x10994))+(((-1.0)*r12*x10993)));
evalcond[2]=((((-1.0)*x10989*x10993))+((x10986*x10988))+(((-1.0)*r02*x10994)));
evalcond[3]=((1.0)+((x10985*x10989))+(((-1.0)*x10988*x10994))+(((-1.0)*r02*x10993)));
evalcond[4]=((((-1.0)*r22*x10994))+((x10986*x10991))+((cj12*sj11))+(((-1.0)*x10987*x10993))+((cj11*sj12)));
evalcond[5]=((((-1.0)*x10992*x10993))+(((-1.0)*sj11*sj12))+((x10986*x10990))+((cj11*cj12))+(((-1.0)*r12*x10994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x10995=((1.0)*gconst5);
CheckValue<IkReal> x10996 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x10995)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10996.valid){
continue;
}
CheckValue<IkReal> x10997=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10995))+(((-1.0)*gconst4*r20)))),-1);
if(!x10997.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x10996.value)+(((1.5707963267949)*(x10997.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x10998=IKsin(j14);
IkReal x10999=IKcos(j14);
IkReal x11000=(gconst4*r21);
IkReal x11001=(gconst5*r00);
IkReal x11002=(gconst4*r01);
IkReal x11003=(gconst5*r10);
IkReal x11004=(gconst5*r20);
IkReal x11005=(gconst4*r11);
IkReal x11006=((1.0)*x10999);
IkReal x11007=((1.0)*x10998);
evalcond[0]=((((-1.0)*r22*x11006))+(((-1.0)*x11004*x11007))+((x10998*x11000)));
evalcond[1]=(((x10998*x11005))+(((-1.0)*x11003*x11007))+(((-1.0)*r12*x11006)));
evalcond[2]=((((-1.0)*r02*x11007))+(((-1.0)*x11002*x11006))+((x10999*x11001)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11006))+((x10998*x11002))+(((-1.0)*x11001*x11007)));
evalcond[4]=((((-1.0)*r22*x11007))+(((-1.0)*x11000*x11006))+((cj12*sj11))+((cj11*sj12))+((x10999*x11004)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*x11005*x11006))+(((-1.0)*r12*x11007))+((x10999*x11003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x11008=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11008.valid){
continue;
}
CheckValue<IkReal> x11009 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11009.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11008.value)))+(x11009.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11010=IKsin(j14);
IkReal x11011=IKcos(j14);
IkReal x11012=(gconst4*r21);
IkReal x11013=(gconst5*r00);
IkReal x11014=(gconst4*r01);
IkReal x11015=(gconst5*r10);
IkReal x11016=(gconst5*r20);
IkReal x11017=(gconst4*r11);
IkReal x11018=((1.0)*x11011);
IkReal x11019=((1.0)*x11010);
evalcond[0]=((((-1.0)*r22*x11018))+((x11010*x11012))+(((-1.0)*x11016*x11019)));
evalcond[1]=((((-1.0)*x11015*x11019))+((x11010*x11017))+(((-1.0)*r12*x11018)));
evalcond[2]=((((-1.0)*r02*x11019))+(((-1.0)*x11014*x11018))+((x11011*x11013)));
evalcond[3]=((1.0)+(((-1.0)*x11013*x11019))+(((-1.0)*r02*x11018))+((x11010*x11014)));
evalcond[4]=((((-1.0)*r22*x11019))+(((-1.0)*x11012*x11018))+((x11011*x11016))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=((((-1.0)*sj11*sj12))+((cj11*cj12))+(((-1.0)*r12*x11019))+((x11011*x11015))+(((-1.0)*x11017*x11018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x11020=((-1.0)*r21);
IkReal x11021=((-1.0)*r20);
CheckValue<IkReal> x11023 = IKatan2WithCheck(IkReal(x11020),IkReal(x11021),IKFAST_ATAN2_MAGTHRESH);
if(!x11023.valid){
continue;
}
IkReal x11022=((1.0)*(x11023.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x11022)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11021);
rxp0_2=(py*r00);
rxp1_0=(py*x11020);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11022)));
IkReal gconst4=x11020;
IkReal gconst5=((1.0)*r20);
IkReal x11024=((1.0)*r01*r21);
IkReal x11025=((1.0)*r00*r20);
j14eval[0]=((((-1.0)*x11024))+(((-1.0)*x11025)));
j14eval[1]=((((-1.0)*cj13*x11024))+(((-1.0)*cj13*x11025)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x11026=((-1.0)*r21);
IkReal x11027=((-1.0)*r20);
CheckValue<IkReal> x11029 = IKatan2WithCheck(IkReal(x11026),IkReal(x11027),IKFAST_ATAN2_MAGTHRESH);
if(!x11029.valid){
continue;
}
IkReal x11028=((1.0)*(x11029.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x11028)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11027);
rxp0_2=(py*r00);
rxp1_0=(py*x11026);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11028)));
IkReal gconst4=x11026;
IkReal gconst5=((1.0)*r20);
IkReal x11030=((1.0)*r01*r21);
IkReal x11031=((1.0)*r00*r20);
j14eval[0]=((((-1.0)*x11030))+(((-1.0)*x11031)));
j14eval[1]=(((sj13*x11030))+((sj13*x11031)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x11032=((-1.0)*r21);
IkReal x11033=((-1.0)*r20);
CheckValue<IkReal> x11035 = IKatan2WithCheck(IkReal(x11032),IkReal(x11033),IKFAST_ATAN2_MAGTHRESH);
if(!x11035.valid){
continue;
}
IkReal x11034=((1.0)*(x11035.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x11034)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11033);
rxp0_2=(py*r00);
rxp1_0=(py*x11032);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11034)));
IkReal gconst4=x11032;
IkReal gconst5=((1.0)*r20);
IkReal x11036=((1.0)*cj13);
j14eval[0]=cj13;
j14eval[1]=r12;
j14eval[2]=((((-1.0)*r00*r20*x11036))+(((-1.0)*r01*r21*x11036)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11037=((1.0)*gconst5);
CheckValue<IkReal> x11038=IKPowWithIntegerCheck(cj13,-1);
if(!x11038.valid){
continue;
}
CheckValue<IkReal> x11039=IKPowWithIntegerCheck(r12,-1);
if(!x11039.valid){
continue;
}
CheckValue<IkReal> x11040=IKPowWithIntegerCheck((((cj13*gconst4*r01))+(((-1.0)*cj13*r00*x11037))),-1);
if(!x11040.valid){
continue;
}
if( IKabs(((x11038.value)*(x11039.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11040.value)*(((((-1.0)*r01*sj13*x11037))+(((-1.0)*gconst4*r00*sj13)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11038.value)*(x11039.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12))))))+IKsqr(((x11040.value)*(((((-1.0)*r01*sj13*x11037))+(((-1.0)*gconst4*r00*sj13))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x11038.value)*(x11039.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12))))), ((x11040.value)*(((((-1.0)*r01*sj13*x11037))+(((-1.0)*gconst4*r00*sj13))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11041=IKsin(j14);
IkReal x11042=IKcos(j14);
IkReal x11043=(cj12*sj11);
IkReal x11044=(cj11*sj12);
IkReal x11045=(gconst4*r21);
IkReal x11046=(gconst5*r01);
IkReal x11047=(cj11*cj12);
IkReal x11048=(gconst5*r00);
IkReal x11049=(gconst4*r20);
IkReal x11050=(sj11*sj12);
IkReal x11051=(gconst5*r20);
IkReal x11052=(gconst4*r01);
IkReal x11053=(gconst4*r00);
IkReal x11054=(gconst5*r21);
IkReal x11055=(sj13*x11042);
IkReal x11056=(cj13*x11042);
IkReal x11057=(r12*x11041);
IkReal x11058=(x11044+x11043);
IkReal x11059=((1.0)*gconst5*x11041);
evalcond[0]=((-1.0)*r12*x11042);
evalcond[1]=(((x11041*x11045))+(((-1.0)*x11041*x11051)));
evalcond[2]=(x11047+(((-1.0)*x11050))+((cj13*x11057)));
evalcond[3]=(x11058+(((-1.0)*sj13*x11057)));
evalcond[4]=((1.0)+(((-1.0)*x11041*x11048))+((x11041*x11052)));
evalcond[5]=(((sj13*x11046))+(((-1.0)*x11048*x11056))+((x11052*x11056))+((sj13*x11053)));
evalcond[6]=((((-1.0)*x11052*x11055))+((cj13*x11046))+((cj13*x11053))+((x11048*x11055)));
evalcond[7]=(((sj13*x11049))+(((-1.0)*x11051*x11056))+x11058+((x11045*x11056))+((sj13*x11054)));
evalcond[8]=(x11050+(((-1.0)*x11047))+((cj13*x11049))+((x11051*x11055))+((cj13*x11054))+(((-1.0)*x11045*x11055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11060=((1.0)*cj13);
IkReal x11061=(gconst4*r01);
IkReal x11062=(gconst5*r00);
CheckValue<IkReal> x11063=IKPowWithIntegerCheck((x11061+(((-1.0)*x11062))),-1);
if(!x11063.valid){
continue;
}
CheckValue<IkReal> x11064=IKPowWithIntegerCheck((((sj13*x11062))+(((-1.0)*sj13*x11061))),-1);
if(!x11064.valid){
continue;
}
if( IKabs(((-1.0)*(x11063.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11064.value)*(((((-1.0)*gconst5*r01*x11060))+(((-1.0)*gconst4*r00*x11060)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11063.value)))+IKsqr(((x11064.value)*(((((-1.0)*gconst5*r01*x11060))+(((-1.0)*gconst4*r00*x11060))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*(x11063.value)), ((x11064.value)*(((((-1.0)*gconst5*r01*x11060))+(((-1.0)*gconst4*r00*x11060))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11065=IKsin(j14);
IkReal x11066=IKcos(j14);
IkReal x11067=(cj12*sj11);
IkReal x11068=(cj11*sj12);
IkReal x11069=(gconst4*r21);
IkReal x11070=(gconst5*r01);
IkReal x11071=(cj11*cj12);
IkReal x11072=(gconst5*r00);
IkReal x11073=(gconst4*r20);
IkReal x11074=(sj11*sj12);
IkReal x11075=(gconst5*r20);
IkReal x11076=(gconst4*r01);
IkReal x11077=(gconst4*r00);
IkReal x11078=(gconst5*r21);
IkReal x11079=(sj13*x11066);
IkReal x11080=(cj13*x11066);
IkReal x11081=(r12*x11065);
IkReal x11082=(x11068+x11067);
IkReal x11083=((1.0)*gconst5*x11065);
evalcond[0]=((-1.0)*r12*x11066);
evalcond[1]=(((x11065*x11069))+(((-1.0)*x11065*x11075)));
evalcond[2]=(x11071+((cj13*x11081))+(((-1.0)*x11074)));
evalcond[3]=((((-1.0)*sj13*x11081))+x11082);
evalcond[4]=((1.0)+((x11065*x11076))+(((-1.0)*x11065*x11072)));
evalcond[5]=(((sj13*x11070))+((sj13*x11077))+((x11076*x11080))+(((-1.0)*x11072*x11080)));
evalcond[6]=(((x11072*x11079))+((cj13*x11070))+((cj13*x11077))+(((-1.0)*x11076*x11079)));
evalcond[7]=((((-1.0)*x11075*x11080))+x11082+((x11069*x11080))+((sj13*x11078))+((sj13*x11073)));
evalcond[8]=(((cj13*x11073))+((cj13*x11078))+x11074+(((-1.0)*x11069*x11079))+((x11075*x11079))+(((-1.0)*x11071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11084=(gconst4*r01);
IkReal x11085=((1.0)*r00);
CheckValue<IkReal> x11086=IKPowWithIntegerCheck((x11084+(((-1.0)*gconst5*x11085))),-1);
if(!x11086.valid){
continue;
}
CheckValue<IkReal> x11087=IKPowWithIntegerCheck(((((-1.0)*cj13*gconst5*x11085))+((cj13*x11084))),-1);
if(!x11087.valid){
continue;
}
if( IKabs(((-1.0)*(x11086.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11087.value)*(((((-1.0)*gconst5*r01*sj13))+(((-1.0)*gconst4*sj13*x11085)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11086.value)))+IKsqr(((x11087.value)*(((((-1.0)*gconst5*r01*sj13))+(((-1.0)*gconst4*sj13*x11085))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*(x11086.value)), ((x11087.value)*(((((-1.0)*gconst5*r01*sj13))+(((-1.0)*gconst4*sj13*x11085))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11088=IKsin(j14);
IkReal x11089=IKcos(j14);
IkReal x11090=(cj12*sj11);
IkReal x11091=(cj11*sj12);
IkReal x11092=(gconst4*r21);
IkReal x11093=(gconst5*r01);
IkReal x11094=(cj11*cj12);
IkReal x11095=(gconst5*r00);
IkReal x11096=(gconst4*r20);
IkReal x11097=(sj11*sj12);
IkReal x11098=(gconst5*r20);
IkReal x11099=(gconst4*r01);
IkReal x11100=(gconst4*r00);
IkReal x11101=(gconst5*r21);
IkReal x11102=(sj13*x11089);
IkReal x11103=(cj13*x11089);
IkReal x11104=(r12*x11088);
IkReal x11105=(x11090+x11091);
IkReal x11106=((1.0)*gconst5*x11088);
evalcond[0]=((-1.0)*r12*x11089);
evalcond[1]=((((-1.0)*x11088*x11098))+((x11088*x11092)));
evalcond[2]=(((cj13*x11104))+(((-1.0)*x11097))+x11094);
evalcond[3]=((((-1.0)*sj13*x11104))+x11105);
evalcond[4]=((1.0)+(((-1.0)*x11088*x11095))+((x11088*x11099)));
evalcond[5]=(((sj13*x11093))+((x11099*x11103))+((sj13*x11100))+(((-1.0)*x11095*x11103)));
evalcond[6]=(((cj13*x11093))+((x11095*x11102))+((cj13*x11100))+(((-1.0)*x11099*x11102)));
evalcond[7]=(((x11092*x11103))+((sj13*x11096))+x11105+((sj13*x11101))+(((-1.0)*x11098*x11103)));
evalcond[8]=(((cj13*x11096))+((cj13*x11101))+(((-1.0)*x11094))+x11097+((x11098*x11102))+(((-1.0)*x11092*x11102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11107=gconst4*gconst4;
IkReal x11108=gconst5*gconst5;
IkReal x11109=(r00*sj13);
IkReal x11110=(cj13*r00);
IkReal x11111=(r01*sj13);
IkReal x11112=(cj13*r01);
IkReal x11113=(r21*x11107);
IkReal x11114=(gconst4*gconst5*r21);
IkReal x11115=(gconst4*gconst5*r20);
IkReal x11116=((1.0)*r20*x11108);
CheckValue<IkReal> x11117 = IKatan2WithCheck(IkReal((((gconst4*r22*x11109))+((gconst5*r22*x11111)))),IkReal((((x11111*x11114))+(((-1.0)*x11109*x11115))+(((-1.0)*x11111*x11116))+((x11109*x11113)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11117.valid){
continue;
}
CheckValue<IkReal> x11118=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj13*r02*r22))+((x11112*x11115))+(((-1.0)*x11110*x11116))+((x11110*x11114))+(((-1.0)*x11112*x11113)))),-1);
if(!x11118.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11117.value)+(((1.5707963267949)*(x11118.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11119=IKsin(j14);
IkReal x11120=IKcos(j14);
IkReal x11121=(cj12*sj11);
IkReal x11122=(cj11*sj12);
IkReal x11123=(gconst4*r21);
IkReal x11124=(gconst5*sj13);
IkReal x11125=(cj11*cj12);
IkReal x11126=(gconst5*r00);
IkReal x11127=(cj13*gconst5);
IkReal x11128=(gconst4*r20);
IkReal x11129=(sj11*sj12);
IkReal x11130=(gconst4*r00);
IkReal x11131=(gconst4*r10);
IkReal x11132=(gconst4*r01);
IkReal x11133=(gconst4*r11);
IkReal x11134=((1.0)*x11120);
IkReal x11135=((1.0)*x11119);
IkReal x11136=(cj13*x11119);
IkReal x11137=(cj13*x11120);
IkReal x11138=(x11122+x11121);
evalcond[0]=((((-1.0)*r22*x11134))+((x11119*x11123))+(((-1.0)*gconst5*r20*x11135)));
evalcond[1]=((((-1.0)*gconst5*r10*x11135))+((x11119*x11133))+(((-1.0)*r12*x11134)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11134))+(((-1.0)*x11126*x11135))+((x11119*x11132)));
evalcond[3]=(((r02*x11136))+(((-1.0)*cj13*x11126*x11134))+((sj13*x11130))+((x11132*x11137))+((r01*x11124)));
evalcond[4]=(((cj13*x11130))+(((-1.0)*sj13*x11132*x11134))+((r00*x11120*x11124))+(((-1.0)*r02*sj13*x11135))+((r01*x11127)));
evalcond[5]=(((r22*x11136))+((r21*x11124))+((x11123*x11137))+(((-1.0)*r20*x11127*x11134))+x11138+((sj13*x11128)));
evalcond[6]=((((-1.0)*x11129))+x11125+((r11*x11124))+((sj13*x11131))+((r12*x11136))+(((-1.0)*r10*x11127*x11134))+((x11133*x11137)));
evalcond[7]=(((cj13*x11131))+(((-1.0)*sj13*x11133*x11134))+((r10*x11120*x11124))+x11138+((r11*x11127))+(((-1.0)*r12*sj13*x11135)));
evalcond[8]=(((r20*x11120*x11124))+((r21*x11127))+(((-1.0)*x11125))+(((-1.0)*r22*sj13*x11135))+(((-1.0)*sj13*x11123*x11134))+((cj13*x11128))+x11129);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11139=((1.0)*gconst5);
CheckValue<IkReal> x11140=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11139))+(((-1.0)*gconst4*r20)))),-1);
if(!x11140.valid){
continue;
}
CheckValue<IkReal> x11141 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11139))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11141.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11140.value)))+(x11141.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11142=IKsin(j14);
IkReal x11143=IKcos(j14);
IkReal x11144=(cj12*sj11);
IkReal x11145=(cj11*sj12);
IkReal x11146=(gconst4*r21);
IkReal x11147=(gconst5*sj13);
IkReal x11148=(cj11*cj12);
IkReal x11149=(gconst5*r00);
IkReal x11150=(cj13*gconst5);
IkReal x11151=(gconst4*r20);
IkReal x11152=(sj11*sj12);
IkReal x11153=(gconst4*r00);
IkReal x11154=(gconst4*r10);
IkReal x11155=(gconst4*r01);
IkReal x11156=(gconst4*r11);
IkReal x11157=((1.0)*x11143);
IkReal x11158=((1.0)*x11142);
IkReal x11159=(cj13*x11142);
IkReal x11160=(cj13*x11143);
IkReal x11161=(x11144+x11145);
evalcond[0]=((((-1.0)*gconst5*r20*x11158))+(((-1.0)*r22*x11157))+((x11142*x11146)));
evalcond[1]=((((-1.0)*gconst5*r10*x11158))+((x11142*x11156))+(((-1.0)*r12*x11157)));
evalcond[2]=((1.0)+(((-1.0)*x11149*x11158))+((x11142*x11155))+(((-1.0)*r02*x11157)));
evalcond[3]=(((r01*x11147))+((r02*x11159))+((x11155*x11160))+((sj13*x11153))+(((-1.0)*cj13*x11149*x11157)));
evalcond[4]=(((r01*x11150))+(((-1.0)*r02*sj13*x11158))+(((-1.0)*sj13*x11155*x11157))+((r00*x11143*x11147))+((cj13*x11153)));
evalcond[5]=(((r22*x11159))+((r21*x11147))+((x11146*x11160))+x11161+(((-1.0)*r20*x11150*x11157))+((sj13*x11151)));
evalcond[6]=((((-1.0)*x11152))+((r11*x11147))+x11148+((r12*x11159))+((x11156*x11160))+(((-1.0)*r10*x11150*x11157))+((sj13*x11154)));
evalcond[7]=((((-1.0)*sj13*x11156*x11157))+((r10*x11143*x11147))+((r11*x11150))+x11161+(((-1.0)*r12*sj13*x11158))+((cj13*x11154)));
evalcond[8]=(((r20*x11143*x11147))+((r21*x11150))+(((-1.0)*sj13*x11146*x11157))+(((-1.0)*r22*sj13*x11158))+(((-1.0)*x11148))+x11152+((cj13*x11151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x11162=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11162.valid){
continue;
}
CheckValue<IkReal> x11163 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11163.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11162.value)))+(x11163.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11164=IKsin(j14);
IkReal x11165=IKcos(j14);
IkReal x11166=(cj12*sj11);
IkReal x11167=(cj11*sj12);
IkReal x11168=(gconst4*r21);
IkReal x11169=(gconst5*sj13);
IkReal x11170=(cj11*cj12);
IkReal x11171=(gconst5*r00);
IkReal x11172=(cj13*gconst5);
IkReal x11173=(gconst4*r20);
IkReal x11174=(sj11*sj12);
IkReal x11175=(gconst4*r00);
IkReal x11176=(gconst4*r10);
IkReal x11177=(gconst4*r01);
IkReal x11178=(gconst4*r11);
IkReal x11179=((1.0)*x11165);
IkReal x11180=((1.0)*x11164);
IkReal x11181=(cj13*x11164);
IkReal x11182=(cj13*x11165);
IkReal x11183=(x11166+x11167);
evalcond[0]=((((-1.0)*r22*x11179))+(((-1.0)*gconst5*r20*x11180))+((x11164*x11168)));
evalcond[1]=((((-1.0)*r12*x11179))+(((-1.0)*gconst5*r10*x11180))+((x11164*x11178)));
evalcond[2]=((1.0)+(((-1.0)*x11171*x11180))+((x11164*x11177))+(((-1.0)*r02*x11179)));
evalcond[3]=(((r01*x11169))+((sj13*x11175))+((x11177*x11182))+((r02*x11181))+(((-1.0)*cj13*x11171*x11179)));
evalcond[4]=((((-1.0)*sj13*x11177*x11179))+((r01*x11172))+((r00*x11165*x11169))+((cj13*x11175))+(((-1.0)*r02*sj13*x11180)));
evalcond[5]=(((x11168*x11182))+((sj13*x11173))+x11183+((r22*x11181))+((r21*x11169))+(((-1.0)*r20*x11172*x11179)));
evalcond[6]=(((r12*x11181))+((sj13*x11176))+((r11*x11169))+(((-1.0)*r10*x11172*x11179))+((x11178*x11182))+(((-1.0)*x11174))+x11170);
evalcond[7]=((((-1.0)*sj13*x11178*x11179))+(((-1.0)*r12*sj13*x11180))+((r11*x11172))+x11183+((r10*x11165*x11169))+((cj13*x11176)));
evalcond[8]=(((r20*x11165*x11169))+(((-1.0)*x11170))+x11174+(((-1.0)*r22*sj13*x11180))+((cj13*x11173))+(((-1.0)*sj13*x11168*x11179))+((r21*x11172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x11184=((-1.0)*r21);
IkReal x11185=((-1.0)*px);
CheckValue<IkReal> x11187 = IKatan2WithCheck(IkReal(x11184),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11187.valid){
continue;
}
IkReal x11186=((1.0)*(x11187.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x11186)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11185);
rxp1_1=(px*r21);
rxp1_2=(r11*x11185);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11186)));
IkReal gconst4=x11184;
IkReal gconst5=((1.0)*r20);
j14eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j14eval[1]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x11188=((-1.0)*r21);
IkReal x11189=((-1.0)*px);
CheckValue<IkReal> x11191 = IKatan2WithCheck(IkReal(x11188),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11191.valid){
continue;
}
IkReal x11190=((1.0)*(x11191.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x11190)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11189);
rxp1_1=(px*r21);
rxp1_2=(r11*x11189);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11190)));
IkReal gconst4=x11188;
IkReal gconst5=((1.0)*r20);
IkReal x11192=((1.0)*cj13);
j14eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j14eval[1]=((((-1.0)*x11192*(r21*r21)))+(((-1.0)*x11192))+((x11192*(r10*r10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x11193=((-1.0)*r21);
IkReal x11194=((-1.0)*px);
CheckValue<IkReal> x11196 = IKatan2WithCheck(IkReal(x11193),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11196.valid){
continue;
}
IkReal x11195=((1.0)*(x11196.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x11195)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11194);
rxp1_1=(px*r21);
rxp1_2=(r11*x11194);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11195)));
IkReal gconst4=x11193;
IkReal gconst5=((1.0)*r20);
j14eval[0]=cj13;
j14eval[1]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x11197=((-1.0)*r21);
IkReal x11198=((-1.0)*px);
CheckValue<IkReal> x11200 = IKatan2WithCheck(IkReal(x11197),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11200.valid){
continue;
}
IkReal x11199=((1.0)*(x11200.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x11199)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11198);
rxp1_1=(px*r21);
rxp1_2=(r11*x11198);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11199)));
IkReal gconst4=x11197;
IkReal gconst5=((1.0)*r20);
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11201=((-1.0)*r21);
IkReal x11202=((-1.0)*px);
CheckValue<IkReal> x11204 = IKatan2WithCheck(IkReal(x11201),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11204.valid){
continue;
}
IkReal x11203=((1.0)*(x11204.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x11203)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11202);
rxp1_1=(px*r21);
rxp1_2=(r11*x11202);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11203)));
IkReal gconst4=x11201;
IkReal gconst5=((1.0)*r20);
j14eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11205=((-1.0)*r21);
IkReal x11206=((-1.0)*px);
CheckValue<IkReal> x11208 = IKatan2WithCheck(IkReal(x11205),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11208.valid){
continue;
}
IkReal x11207=((1.0)*(x11208.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x11207)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11206);
rxp1_1=(px*r21);
rxp1_2=(r11*x11206);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11207)));
IkReal gconst4=x11205;
IkReal gconst5=((1.0)*r20);
j14eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x11211=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11211.valid){
continue;
}
IkReal x11209=x11211.value;
IkReal x11210=(sj10*x11209);
cj14array[0]=(((cj11*sj12*x11210))+((cj12*sj11*x11210)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x11212=IKsin(j14);
IkReal x11213=IKcos(j14);
IkReal x11214=(gconst4*r21);
IkReal x11215=(gconst5*r20);
IkReal x11216=((1.0)*x11213);
IkReal x11217=((1.0)*x11212);
evalcond[0]=((-1.0)*r02*x11212);
evalcond[1]=((((-1.0)*sj10))+(((-1.0)*r02*x11216)));
evalcond[2]=(((x11212*x11214))+(((-1.0)*x11215*x11217)));
evalcond[3]=(((gconst4*r11*x11212))+(((-1.0)*gconst5*r10*x11217)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x11214*x11216))+((x11213*x11215))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x11219=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11219.valid){
continue;
}
IkReal x11218=x11219.value;
cj14array[0]=((((-1.0)*sj11*sj12*x11218))+((cj11*cj12*x11218)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x11220=IKsin(j14);
IkReal x11221=IKcos(j14);
IkReal x11222=((1.0)*sj10);
IkReal x11223=(gconst5*r10);
IkReal x11224=(gconst4*r11);
IkReal x11225=((1.0)*x11221);
IkReal x11226=((1.0)*x11220);
evalcond[0]=((-1.0)*r02*x11220);
evalcond[1]=((((-1.0)*x11222))+(((-1.0)*r02*x11225)));
evalcond[2]=(((gconst4*r21*x11220))+(((-1.0)*gconst5*r20*x11226)));
evalcond[3]=(((x11220*x11224))+(((-1.0)*x11223*x11226)));
evalcond[4]=((((-1.0)*cj12*sj11*x11222))+(((-1.0)*cj11*sj12*x11222))+((x11221*x11223))+(((-1.0)*x11224*x11225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x11227=IKPowWithIntegerCheck(r02,-1);
if(!x11227.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x11227.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x11228=IKsin(j14);
IkReal x11229=IKcos(j14);
IkReal x11230=((1.0)*cj12);
IkReal x11231=(gconst5*x11229);
IkReal x11232=(gconst4*x11228);
IkReal x11233=((1.0)*gconst4*x11229);
IkReal x11234=((1.0)*gconst5*x11228);
evalcond[0]=((-1.0)*r02*x11228);
evalcond[1]=((((-1.0)*r20*x11234))+((r21*x11232)));
evalcond[2]=(((r11*x11232))+(((-1.0)*r10*x11234)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj11*x11230))+((r20*x11231))+(((-1.0)*r21*x11233)));
evalcond[4]=((((-1.0)*cj11*sj10*sj12))+(((-1.0)*sj10*sj11*x11230))+((r10*x11231))+(((-1.0)*r11*x11233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x11235=((-1.0)*r21);
IkReal x11236=((-1.0)*px);
CheckValue<IkReal> x11238 = IKatan2WithCheck(IkReal(x11235),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11238.valid){
continue;
}
IkReal x11237=((1.0)*(x11238.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x11237)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11236);
rxp1_1=(px*r21);
rxp1_2=(r11*x11236);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11237)));
IkReal gconst4=x11235;
IkReal gconst5=((1.0)*r20);
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11239=((-1.0)*r21);
IkReal x11240=((-1.0)*px);
CheckValue<IkReal> x11242 = IKatan2WithCheck(IkReal(x11239),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11242.valid){
continue;
}
IkReal x11241=((1.0)*(x11242.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x11241)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11240);
rxp1_1=(px*r21);
rxp1_2=(r11*x11240);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11241)));
IkReal gconst4=x11239;
IkReal gconst5=((1.0)*r20);
j14eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11243=((-1.0)*r21);
IkReal x11244=((-1.0)*px);
CheckValue<IkReal> x11246 = IKatan2WithCheck(IkReal(x11243),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11246.valid){
continue;
}
IkReal x11245=((1.0)*(x11246.value));
sj15=gconst4;
cj15=gconst5;
j15=((3.14159265)+(((-1.0)*x11245)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11244);
rxp1_1=(px*r21);
rxp1_2=(r11*x11244);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11245)));
IkReal gconst4=x11243;
IkReal gconst5=((1.0)*r20);
j14eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x11249=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11249.valid){
continue;
}
IkReal x11247=x11249.value;
IkReal x11248=(sj10*x11247);
cj14array[0]=(((cj11*sj12*x11248))+((cj12*sj11*x11248)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x11250=IKsin(j14);
IkReal x11251=IKcos(j14);
IkReal x11252=(gconst4*r21);
IkReal x11253=((1.0)*x11251);
IkReal x11254=((1.0)*gconst5*x11250);
evalcond[0]=(r02*x11250);
evalcond[1]=((((-1.0)*r02*x11253))+(((-1.0)*sj10)));
evalcond[2]=(((x11250*x11252))+(((-1.0)*r20*x11254)));
evalcond[3]=(((gconst4*r11*x11250))+(((-1.0)*r10*x11254)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*gconst5*r20*x11253))+((x11251*x11252))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x11256=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11256.valid){
continue;
}
IkReal x11255=x11256.value;
cj14array[0]=(((cj11*cj12*x11255))+(((-1.0)*sj11*sj12*x11255)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x11257=IKsin(j14);
IkReal x11258=IKcos(j14);
IkReal x11259=((1.0)*sj10);
IkReal x11260=(gconst4*r11);
IkReal x11261=(gconst5*r10);
IkReal x11262=((1.0)*x11258);
IkReal x11263=((1.0)*x11257);
evalcond[0]=(r02*x11257);
evalcond[1]=((((-1.0)*r02*x11262))+(((-1.0)*x11259)));
evalcond[2]=((((-1.0)*gconst5*r20*x11263))+((gconst4*r21*x11257)));
evalcond[3]=((((-1.0)*x11261*x11263))+((x11257*x11260)));
evalcond[4]=((((-1.0)*cj12*sj11*x11259))+(((-1.0)*cj11*sj12*x11259))+((x11258*x11260))+(((-1.0)*x11261*x11262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x11264=IKPowWithIntegerCheck(r02,-1);
if(!x11264.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x11264.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x11265=IKsin(j14);
IkReal x11266=IKcos(j14);
IkReal x11267=((1.0)*cj12);
IkReal x11268=((1.0)*gconst5);
IkReal x11269=(gconst4*x11266);
IkReal x11270=(gconst4*x11265);
evalcond[0]=(r02*x11265);
evalcond[1]=((((-1.0)*r20*x11265*x11268))+((r21*x11270)));
evalcond[2]=((((-1.0)*r10*x11265*x11268))+((r11*x11270)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj11*x11267))+((r21*x11269))+(((-1.0)*r20*x11266*x11268)));
evalcond[4]=(((r11*x11269))+(((-1.0)*cj11*sj10*sj12))+(((-1.0)*sj10*sj11*x11267))+(((-1.0)*r10*x11266*x11268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x11272=IKPowWithIntegerCheck(r02,-1);
if(!x11272.valid){
continue;
}
IkReal x11271=x11272.value;
CheckValue<IkReal> x11273=IKPowWithIntegerCheck(cj13,-1);
if(!x11273.valid){
continue;
}
if( IKabs((x11271*(x11273.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj10*x11271)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11271*(x11273.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12))))))+IKsqr(((-1.0)*sj10*x11271))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((x11271*(x11273.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12))))), ((-1.0)*sj10*x11271));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11274=IKsin(j14);
IkReal x11275=IKcos(j14);
IkReal x11276=(r21*sj13);
IkReal x11277=((1.0)*cj11);
IkReal x11278=(cj10*sj12);
IkReal x11279=(gconst5*r10);
IkReal x11280=((1.0)*sj10);
IkReal x11281=(sj11*sj12);
IkReal x11282=(cj13*gconst5);
IkReal x11283=(gconst4*r21);
IkReal x11284=(gconst4*sj13);
IkReal x11285=(cj12*sj11);
IkReal x11286=(gconst5*r20);
IkReal x11287=(cj13*gconst4);
IkReal x11288=((1.0)*x11275);
IkReal x11289=(sj13*x11275);
IkReal x11290=(r02*x11274);
IkReal x11291=((1.0)*x11274);
evalcond[0]=((((-1.0)*r02*x11288))+(((-1.0)*x11280)));
evalcond[1]=((((-1.0)*x11286*x11291))+((x11274*x11283)));
evalcond[2]=(((gconst4*r11*x11274))+cj10+(((-1.0)*x11279*x11291)));
evalcond[3]=(((cj13*x11290))+(((-1.0)*cj10*cj12*x11277))+((sj11*x11278)));
evalcond[4]=((((-1.0)*sj13*x11290))+(((-1.0)*x11277*x11278))+(((-1.0)*cj10*x11285)));
evalcond[5]=(x11285+((r20*x11284))+((cj11*sj12))+((gconst5*x11276))+((cj13*x11275*x11283))+(((-1.0)*r20*x11282*x11288)));
evalcond[6]=((((-1.0)*gconst4*x11276*x11288))+x11281+((r21*x11282))+(((-1.0)*cj12*x11277))+((r20*x11287))+((x11286*x11289)));
evalcond[7]=(((r10*x11284))+(((-1.0)*cj12*sj10*x11277))+(((-1.0)*cj13*x11279*x11288))+((sj10*x11281))+((gconst5*r11*sj13))+((r11*x11275*x11287)));
evalcond[8]=(((r10*x11287))+(((-1.0)*r11*x11284*x11288))+((x11279*x11289))+((r11*x11282))+(((-1.0)*x11280*x11285))+(((-1.0)*sj10*sj12*x11277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11292=((1.0)*gconst5);
CheckValue<IkReal> x11293=IKPowWithIntegerCheck(((((-1.0)*r10*x11292))+((gconst4*r11))),-1);
if(!x11293.valid){
continue;
}
CheckValue<IkReal> x11294=IKPowWithIntegerCheck((((cj13*gconst4*r21))+(((-1.0)*cj13*r20*x11292))),-1);
if(!x11294.valid){
continue;
}
if( IKabs(((-1.0)*cj10*(x11293.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11294.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*r21*sj13*x11292))+(((-1.0)*gconst4*r20*sj13))+(((-1.0)*cj12*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj10*(x11293.value)))+IKsqr(((x11294.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*r21*sj13*x11292))+(((-1.0)*gconst4*r20*sj13))+(((-1.0)*cj12*sj11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*cj10*(x11293.value)), ((x11294.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*r21*sj13*x11292))+(((-1.0)*gconst4*r20*sj13))+(((-1.0)*cj12*sj11))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11295=IKsin(j14);
IkReal x11296=IKcos(j14);
IkReal x11297=(r21*sj13);
IkReal x11298=((1.0)*cj11);
IkReal x11299=(cj10*sj12);
IkReal x11300=(gconst5*r10);
IkReal x11301=((1.0)*sj10);
IkReal x11302=(sj11*sj12);
IkReal x11303=(cj13*gconst5);
IkReal x11304=(gconst4*r21);
IkReal x11305=(gconst4*sj13);
IkReal x11306=(cj12*sj11);
IkReal x11307=(gconst5*r20);
IkReal x11308=(cj13*gconst4);
IkReal x11309=((1.0)*x11296);
IkReal x11310=(sj13*x11296);
IkReal x11311=(r02*x11295);
IkReal x11312=((1.0)*x11295);
evalcond[0]=((((-1.0)*x11301))+(((-1.0)*r02*x11309)));
evalcond[1]=(((x11295*x11304))+(((-1.0)*x11307*x11312)));
evalcond[2]=(cj10+((gconst4*r11*x11295))+(((-1.0)*x11300*x11312)));
evalcond[3]=(((cj13*x11311))+((sj11*x11299))+(((-1.0)*cj10*cj12*x11298)));
evalcond[4]=((((-1.0)*x11298*x11299))+(((-1.0)*cj10*x11306))+(((-1.0)*sj13*x11311)));
evalcond[5]=(((gconst5*x11297))+((r20*x11305))+((cj13*x11296*x11304))+x11306+(((-1.0)*r20*x11303*x11309))+((cj11*sj12)));
evalcond[6]=(((r20*x11308))+x11302+((x11307*x11310))+(((-1.0)*gconst4*x11297*x11309))+((r21*x11303))+(((-1.0)*cj12*x11298)));
evalcond[7]=((((-1.0)*cj13*x11300*x11309))+((sj10*x11302))+(((-1.0)*cj12*sj10*x11298))+((r11*x11296*x11308))+((gconst5*r11*sj13))+((r10*x11305)));
evalcond[8]=(((x11300*x11310))+(((-1.0)*r11*x11305*x11309))+(((-1.0)*sj10*sj12*x11298))+((r11*x11303))+(((-1.0)*x11301*x11306))+((r10*x11308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x11313=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11313.valid){
continue;
}
CheckValue<IkReal> x11314=IKPowWithIntegerCheck(r02,-1);
if(!x11314.valid){
continue;
}
if( IKabs(((-1.0)*cj10*(x11313.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj10*(x11314.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj10*(x11313.value)))+IKsqr(((-1.0)*sj10*(x11314.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*cj10*(x11313.value)), ((-1.0)*sj10*(x11314.value)));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11315=IKsin(j14);
IkReal x11316=IKcos(j14);
IkReal x11317=(r21*sj13);
IkReal x11318=((1.0)*cj11);
IkReal x11319=(cj10*sj12);
IkReal x11320=(gconst5*r10);
IkReal x11321=((1.0)*sj10);
IkReal x11322=(sj11*sj12);
IkReal x11323=(cj13*gconst5);
IkReal x11324=(gconst4*r21);
IkReal x11325=(gconst4*sj13);
IkReal x11326=(cj12*sj11);
IkReal x11327=(gconst5*r20);
IkReal x11328=(cj13*gconst4);
IkReal x11329=((1.0)*x11316);
IkReal x11330=(sj13*x11316);
IkReal x11331=(r02*x11315);
IkReal x11332=((1.0)*x11315);
evalcond[0]=((((-1.0)*r02*x11329))+(((-1.0)*x11321)));
evalcond[1]=(((x11315*x11324))+(((-1.0)*x11327*x11332)));
evalcond[2]=(cj10+(((-1.0)*x11320*x11332))+((gconst4*r11*x11315)));
evalcond[3]=(((cj13*x11331))+((sj11*x11319))+(((-1.0)*cj10*cj12*x11318)));
evalcond[4]=((((-1.0)*cj10*x11326))+(((-1.0)*sj13*x11331))+(((-1.0)*x11318*x11319)));
evalcond[5]=(x11326+((gconst5*x11317))+((cj13*x11316*x11324))+((r20*x11325))+((cj11*sj12))+(((-1.0)*r20*x11323*x11329)));
evalcond[6]=(((x11327*x11330))+(((-1.0)*cj12*x11318))+x11322+((r21*x11323))+(((-1.0)*gconst4*x11317*x11329))+((r20*x11328)));
evalcond[7]=(((r10*x11325))+(((-1.0)*cj12*sj10*x11318))+((r11*x11316*x11328))+((gconst5*r11*sj13))+(((-1.0)*cj13*x11320*x11329))+((sj10*x11322)));
evalcond[8]=((((-1.0)*r11*x11325*x11329))+((r10*x11328))+(((-1.0)*sj10*sj12*x11318))+((x11320*x11330))+(((-1.0)*x11321*x11326))+((r11*x11323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11333=((1.0)*gconst4);
CheckValue<IkReal> x11334=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11333))+(((-1.0)*gconst5*r21)))),-1);
if(!x11334.valid){
continue;
}
CheckValue<IkReal> x11335 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x11333))+((gconst5*r10*sj10))+((cj10*gconst5*r00))+(((-1.0)*r11*sj10*x11333)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11335.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11334.value)))+(x11335.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11336=IKsin(j14);
IkReal x11337=IKcos(j14);
IkReal x11338=(r21*sj13);
IkReal x11339=(gconst5*sj13);
IkReal x11340=((1.0)*cj11);
IkReal x11341=(cj10*sj12);
IkReal x11342=(gconst5*r00);
IkReal x11343=(cj13*gconst5);
IkReal x11344=((1.0)*sj10);
IkReal x11345=(sj10*sj12);
IkReal x11346=(gconst4*sj13);
IkReal x11347=(cj13*gconst4);
IkReal x11348=(cj12*sj11);
IkReal x11349=((1.0)*x11337);
IkReal x11350=((1.0)*x11336);
IkReal x11351=(gconst4*x11336);
IkReal x11352=(cj13*x11336);
evalcond[0]=((((-1.0)*gconst5*r20*x11350))+(((-1.0)*r22*x11349))+((r21*x11351)));
evalcond[1]=((((-1.0)*gconst5*r10*x11350))+((r11*x11351))+cj10+(((-1.0)*r12*x11349)));
evalcond[2]=((((-1.0)*x11342*x11350))+(((-1.0)*x11344))+((r01*x11351))+(((-1.0)*r02*x11349)));
evalcond[3]=(x11348+((r20*x11346))+((r21*x11337*x11347))+(((-1.0)*r20*x11343*x11349))+((r22*x11352))+((cj11*sj12))+((gconst5*x11338)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r22*sj13*x11350))+(((-1.0)*cj12*x11340))+((r20*x11347))+(((-1.0)*gconst4*x11338*x11349))+((r20*x11337*x11339))+((r21*x11343)));
evalcond[5]=(((r02*x11352))+((r01*x11337*x11347))+(((-1.0)*cj10*cj12*x11340))+((r00*x11346))+((r01*x11339))+(((-1.0)*cj13*x11342*x11349))+((sj11*x11341)));
evalcond[6]=((((-1.0)*cj12*sj10*x11340))+((r12*x11352))+((r11*x11339))+(((-1.0)*r10*x11343*x11349))+((r10*x11346))+((r11*x11337*x11347))+((sj11*x11345)));
evalcond[7]=((((-1.0)*r01*x11346*x11349))+(((-1.0)*x11340*x11341))+((r00*x11347))+(((-1.0)*r02*sj13*x11350))+((r01*x11343))+(((-1.0)*cj10*x11348))+((r00*x11337*x11339)));
evalcond[8]=(((r11*x11343))+(((-1.0)*r11*x11346*x11349))+((r10*x11347))+((r10*x11337*x11339))+(((-1.0)*x11340*x11345))+(((-1.0)*x11344*x11348))+(((-1.0)*r12*sj13*x11350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11353=((1.0)*gconst5);
CheckValue<IkReal> x11354=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11353))+(((-1.0)*gconst4*r10)))),-1);
if(!x11354.valid){
continue;
}
CheckValue<IkReal> x11355 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x11353))+((gconst4*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11355.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11354.value)))+(x11355.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11356=IKsin(j14);
IkReal x11357=IKcos(j14);
IkReal x11358=(r21*sj13);
IkReal x11359=(gconst5*sj13);
IkReal x11360=((1.0)*cj11);
IkReal x11361=(cj10*sj12);
IkReal x11362=(gconst5*r00);
IkReal x11363=(cj13*gconst5);
IkReal x11364=((1.0)*sj10);
IkReal x11365=(sj10*sj12);
IkReal x11366=(gconst4*sj13);
IkReal x11367=(cj13*gconst4);
IkReal x11368=(cj12*sj11);
IkReal x11369=((1.0)*x11357);
IkReal x11370=((1.0)*x11356);
IkReal x11371=(gconst4*x11356);
IkReal x11372=(cj13*x11356);
evalcond[0]=(((r21*x11371))+(((-1.0)*r22*x11369))+(((-1.0)*gconst5*r20*x11370)));
evalcond[1]=(cj10+((r11*x11371))+(((-1.0)*r12*x11369))+(((-1.0)*gconst5*r10*x11370)));
evalcond[2]=((((-1.0)*x11364))+(((-1.0)*x11362*x11370))+((r01*x11371))+(((-1.0)*r02*x11369)));
evalcond[3]=(((gconst5*x11358))+x11368+((r22*x11372))+((cj11*sj12))+((r20*x11366))+(((-1.0)*r20*x11363*x11369))+((r21*x11357*x11367)));
evalcond[4]=(((sj11*sj12))+((r21*x11363))+(((-1.0)*gconst4*x11358*x11369))+(((-1.0)*cj12*x11360))+((r20*x11357*x11359))+(((-1.0)*r22*sj13*x11370))+((r20*x11367)));
evalcond[5]=(((r01*x11357*x11367))+(((-1.0)*cj13*x11362*x11369))+((r00*x11366))+((sj11*x11361))+((r01*x11359))+((r02*x11372))+(((-1.0)*cj10*cj12*x11360)));
evalcond[6]=((((-1.0)*r10*x11363*x11369))+((r11*x11359))+((r11*x11357*x11367))+((sj11*x11365))+((r12*x11372))+((r10*x11366))+(((-1.0)*cj12*sj10*x11360)));
evalcond[7]=(((r01*x11363))+((r00*x11367))+((r00*x11357*x11359))+(((-1.0)*r01*x11366*x11369))+(((-1.0)*cj10*x11368))+(((-1.0)*x11360*x11361))+(((-1.0)*r02*sj13*x11370)));
evalcond[8]=((((-1.0)*r12*sj13*x11370))+(((-1.0)*x11360*x11365))+((r10*x11367))+((r11*x11363))+((r10*x11357*x11359))+(((-1.0)*r11*x11366*x11369))+(((-1.0)*x11364*x11368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11373=((1.0)*gconst5);
CheckValue<IkReal> x11374 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x11373))+((cj10*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11374.valid){
continue;
}
CheckValue<IkReal> x11375=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11373)))),-1);
if(!x11375.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11374.value)+(((1.5707963267949)*(x11375.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11376=IKsin(j14);
IkReal x11377=IKcos(j14);
IkReal x11378=(r21*sj13);
IkReal x11379=(gconst5*sj13);
IkReal x11380=((1.0)*cj11);
IkReal x11381=(cj10*sj12);
IkReal x11382=(gconst5*r00);
IkReal x11383=(cj13*gconst5);
IkReal x11384=((1.0)*sj10);
IkReal x11385=(sj10*sj12);
IkReal x11386=(gconst4*sj13);
IkReal x11387=(cj13*gconst4);
IkReal x11388=(cj12*sj11);
IkReal x11389=((1.0)*x11377);
IkReal x11390=((1.0)*x11376);
IkReal x11391=(gconst4*x11376);
IkReal x11392=(cj13*x11376);
evalcond[0]=((((-1.0)*gconst5*r20*x11390))+(((-1.0)*r22*x11389))+((r21*x11391)));
evalcond[1]=((((-1.0)*gconst5*r10*x11390))+((r11*x11391))+cj10+(((-1.0)*r12*x11389)));
evalcond[2]=((((-1.0)*x11382*x11390))+((r01*x11391))+(((-1.0)*x11384))+(((-1.0)*r02*x11389)));
evalcond[3]=(((r20*x11386))+x11388+((r21*x11377*x11387))+((gconst5*x11378))+((r22*x11392))+((cj11*sj12))+(((-1.0)*r20*x11383*x11389)));
evalcond[4]=(((sj11*sj12))+((r20*x11387))+(((-1.0)*gconst4*x11378*x11389))+(((-1.0)*cj12*x11380))+(((-1.0)*r22*sj13*x11390))+((r21*x11383))+((r20*x11377*x11379)));
evalcond[5]=((((-1.0)*cj13*x11382*x11389))+((r02*x11392))+((sj11*x11381))+((r01*x11379))+((r01*x11377*x11387))+(((-1.0)*cj10*cj12*x11380))+((r00*x11386)));
evalcond[6]=(((r10*x11386))+((sj11*x11385))+((r12*x11392))+(((-1.0)*cj12*sj10*x11380))+((r11*x11379))+(((-1.0)*r10*x11383*x11389))+((r11*x11377*x11387)));
evalcond[7]=((((-1.0)*x11380*x11381))+(((-1.0)*r01*x11386*x11389))+((r01*x11383))+((r00*x11377*x11379))+((r00*x11387))+(((-1.0)*cj10*x11388))+(((-1.0)*r02*sj13*x11390)));
evalcond[8]=(((r11*x11383))+((r10*x11387))+((r10*x11377*x11379))+(((-1.0)*x11380*x11385))+(((-1.0)*x11384*x11388))+(((-1.0)*r12*sj13*x11390))+(((-1.0)*r11*x11386*x11389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11393=((-1.0)*r10);
IkReal x11395 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11395)==0){
continue;
}
IkReal x11394=pow(x11395,-0.5);
CheckValue<IkReal> x11396 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11393),IKFAST_ATAN2_MAGTHRESH);
if(!x11396.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11396.value));
IkReal gconst7=(r11*x11394);
IkReal gconst8=(x11393*x11394);
CheckValue<IkReal> x11397 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11397.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x11397.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x11398=((-1.0)*r10);
IkReal x11399=x11394;
CheckValue<IkReal> x11401 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11398),IKFAST_ATAN2_MAGTHRESH);
if(!x11401.valid){
continue;
}
IkReal x11400=((-1.0)*(x11401.value));
sj15=gconst7;
cj15=gconst8;
j15=x11400;
IkReal gconst6=x11400;
IkReal gconst7=(r11*x11399);
IkReal gconst8=(x11398*x11399);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11402=((1.0)*sj10);
IkReal x11403=((1.0)*gconst7);
CheckValue<IkReal> x11404 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11402))+(((-1.0)*cj10*r02)))),IkReal((((cj10*gconst8*r00))+(((-1.0)*gconst7*r11*x11402))+((gconst8*r10*sj10))+(((-1.0)*cj10*r01*x11403)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11404.valid){
continue;
}
CheckValue<IkReal> x11405=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst8*r21))+(((-1.0)*r20*x11403)))),-1);
if(!x11405.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11404.value)+(((1.5707963267949)*(x11405.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11406=IKsin(j14);
IkReal x11407=IKcos(j14);
IkReal x11408=(cj13*gconst7);
IkReal x11409=((1.0)*cj11);
IkReal x11410=(cj10*sj12);
IkReal x11411=(gconst7*sj13);
IkReal x11412=((1.0)*sj10);
IkReal x11413=(gconst8*r00);
IkReal x11414=(sj10*sj12);
IkReal x11415=(gconst8*sj13);
IkReal x11416=(gconst8*r20);
IkReal x11417=(cj12*sj11);
IkReal x11418=(gconst8*r10);
IkReal x11419=(cj13*gconst8);
IkReal x11420=((1.0)*x11407);
IkReal x11421=(gconst7*x11406);
IkReal x11422=((1.0)*x11406);
IkReal x11423=(cj13*x11406);
evalcond[0]=((((-1.0)*x11416*x11422))+((r21*x11421))+(((-1.0)*r22*x11420)));
evalcond[1]=((((-1.0)*r12*x11420))+cj10+((r11*x11421))+(((-1.0)*x11418*x11422)));
evalcond[2]=((((-1.0)*r02*x11420))+(((-1.0)*x11412))+(((-1.0)*x11413*x11422))+((r01*x11421)));
evalcond[3]=(x11417+((r21*x11415))+((r22*x11423))+((r20*x11411))+(((-1.0)*cj13*x11416*x11420))+((cj11*sj12))+((r21*x11407*x11408)));
evalcond[4]=(((sj11*sj12))+((r20*x11407*x11415))+(((-1.0)*r21*x11411*x11420))+((r21*x11419))+((r20*x11408))+(((-1.0)*r22*sj13*x11422))+(((-1.0)*cj12*x11409)));
evalcond[5]=(((r02*x11423))+((r01*x11415))+((r00*x11411))+(((-1.0)*cj13*x11413*x11420))+((sj11*x11410))+((r01*x11407*x11408))+(((-1.0)*cj10*cj12*x11409)));
evalcond[6]=(((r10*x11411))+(((-1.0)*cj12*sj10*x11409))+((sj11*x11414))+((r11*x11407*x11408))+((r11*x11415))+((r12*x11423))+(((-1.0)*cj13*x11418*x11420)));
evalcond[7]=((((-1.0)*r02*sj13*x11422))+((r01*x11419))+(((-1.0)*cj10*x11417))+((sj13*x11407*x11413))+(((-1.0)*r01*x11411*x11420))+(((-1.0)*x11409*x11410))+((r00*x11408)));
evalcond[8]=((((-1.0)*x11412*x11417))+(((-1.0)*r12*sj13*x11422))+((r10*x11408))+((r10*x11407*x11415))+(((-1.0)*r11*x11411*x11420))+((r11*x11419))+(((-1.0)*x11409*x11414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11424=((1.0)*gconst8);
CheckValue<IkReal> x11425=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x11424))+(((-1.0)*gconst7*r00)))),-1);
if(!x11425.valid){
continue;
}
CheckValue<IkReal> x11426 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst7*r21))+(((-1.0)*cj10*r20*x11424)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11426.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11425.value)))+(x11426.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11427=IKsin(j14);
IkReal x11428=IKcos(j14);
IkReal x11429=(cj13*gconst7);
IkReal x11430=((1.0)*cj11);
IkReal x11431=(cj10*sj12);
IkReal x11432=(gconst7*sj13);
IkReal x11433=((1.0)*sj10);
IkReal x11434=(gconst8*r00);
IkReal x11435=(sj10*sj12);
IkReal x11436=(gconst8*sj13);
IkReal x11437=(gconst8*r20);
IkReal x11438=(cj12*sj11);
IkReal x11439=(gconst8*r10);
IkReal x11440=(cj13*gconst8);
IkReal x11441=((1.0)*x11428);
IkReal x11442=(gconst7*x11427);
IkReal x11443=((1.0)*x11427);
IkReal x11444=(cj13*x11427);
evalcond[0]=((((-1.0)*r22*x11441))+(((-1.0)*x11437*x11443))+((r21*x11442)));
evalcond[1]=((((-1.0)*r12*x11441))+((r11*x11442))+(((-1.0)*x11439*x11443))+cj10);
evalcond[2]=((((-1.0)*r02*x11441))+(((-1.0)*x11434*x11443))+(((-1.0)*x11433))+((r01*x11442)));
evalcond[3]=(((r21*x11428*x11429))+((r20*x11432))+x11438+((r22*x11444))+((r21*x11436))+(((-1.0)*cj13*x11437*x11441))+((cj11*sj12)));
evalcond[4]=(((sj11*sj12))+((r20*x11428*x11436))+((r20*x11429))+(((-1.0)*r21*x11432*x11441))+(((-1.0)*cj12*x11430))+((r21*x11440))+(((-1.0)*r22*sj13*x11443)));
evalcond[5]=((((-1.0)*cj10*cj12*x11430))+((sj11*x11431))+((r01*x11428*x11429))+((r01*x11436))+((r00*x11432))+((r02*x11444))+(((-1.0)*cj13*x11434*x11441)));
evalcond[6]=(((r12*x11444))+((r10*x11432))+((sj11*x11435))+((r11*x11436))+(((-1.0)*cj13*x11439*x11441))+((r11*x11428*x11429))+(((-1.0)*cj12*sj10*x11430)));
evalcond[7]=((((-1.0)*cj10*x11438))+(((-1.0)*r01*x11432*x11441))+(((-1.0)*r02*sj13*x11443))+((r00*x11429))+(((-1.0)*x11430*x11431))+((sj13*x11428*x11434))+((r01*x11440)));
evalcond[8]=(((r10*x11429))+((r11*x11440))+(((-1.0)*r11*x11432*x11441))+(((-1.0)*x11433*x11438))+(((-1.0)*r12*sj13*x11443))+((r10*x11428*x11436))+(((-1.0)*x11430*x11435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11445=((-1.0)*r11);
IkReal x11447 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11447)==0){
continue;
}
IkReal x11446=pow(x11447,-0.5);
CheckValue<IkReal> x11448 = IKatan2WithCheck(IkReal(x11445),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11448.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11448.value))));
IkReal gconst10=(x11445*x11446);
IkReal gconst11=((1.0)*r10*x11446);
CheckValue<IkReal> x11449 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11449.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x11449.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x11450=((-1.0)*r11);
CheckValue<IkReal> x11453 = IKatan2WithCheck(IkReal(x11450),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11453.valid){
continue;
}
IkReal x11451=((1.0)*(x11453.value));
IkReal x11452=x11446;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11451)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11451)));
IkReal gconst10=(x11450*x11452);
IkReal gconst11=((1.0)*r10*x11452);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11454=((-1.0)*r11);
CheckValue<IkReal> x11457 = IKatan2WithCheck(IkReal(x11454),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11457.valid){
continue;
}
IkReal x11455=((1.0)*(x11457.value));
IkReal x11456=x11446;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11455)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11455)));
IkReal gconst10=(x11454*x11456);
IkReal gconst11=((1.0)*r10*x11456);
IkReal x11458=r12*r12;
IkReal x11459=(cj10*r02);
IkReal x11460=x11446;
IkReal x11461=(sj10*x11460);
j14eval[0]=((IKabs((((x11458*x11461))+((r12*x11459*x11460))+(((-1.0)*x11461)))))+(IKabs(((((-1.0)*x11459))+(((-1.0)*r12*sj10))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x11462=((-1.0)*r11);
CheckValue<IkReal> x11465 = IKatan2WithCheck(IkReal(x11462),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11465.valid){
continue;
}
IkReal x11463=((1.0)*(x11465.value));
IkReal x11464=x11446;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11463)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11463)));
IkReal gconst10=(x11462*x11464);
IkReal gconst11=((1.0)*r10*x11464);
IkReal x11466=((1.0)*cj13);
CheckValue<IkReal> x11470=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11470.valid){
continue;
}
IkReal x11467=x11470.value;
IkReal x11468=(cj13*x11467);
IkReal x11469=((((-2.0)*r10*r11*r20*r21*x11468))+(((-1.0)*x11466*x11467*(r10*r10)*(r20*r20)))+(((-1.0)*x11466*x11467*(r11*r11)*(r21*r21)))+(((-1.0)*x11466*(r22*r22))));
j14eval[0]=x11469;
j14eval[1]=IKsign(x11469);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x11471=((-1.0)*r11);
CheckValue<IkReal> x11474 = IKatan2WithCheck(IkReal(x11471),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11474.valid){
continue;
}
IkReal x11472=((1.0)*(x11474.value));
IkReal x11473=x11446;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11472)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11472)));
IkReal gconst10=(x11471*x11473);
IkReal gconst11=((1.0)*r10*x11473);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11475=((-1.0)*r11);
CheckValue<IkReal> x11478 = IKatan2WithCheck(IkReal(x11475),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11478.valid){
continue;
}
IkReal x11476=((1.0)*(x11478.value));
IkReal x11477=x11446;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11476)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11476)));
IkReal gconst10=(x11475*x11477);
IkReal gconst11=((1.0)*r10*x11477);
IkReal x11479=r12*r12;
IkReal x11480=(cj10*r02);
IkReal x11481=x11446;
IkReal x11482=(sj10*x11481);
j14eval[0]=((IKabs(((((-1.0)*x11480))+(((-1.0)*r12*sj10)))))+(IKabs((((r12*x11480*x11481))+(((-1.0)*x11482))+((x11479*x11482))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11483=((-1.0)*r11);
CheckValue<IkReal> x11486 = IKatan2WithCheck(IkReal(x11483),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11486.valid){
continue;
}
IkReal x11484=((1.0)*(x11486.value));
IkReal x11485=x11446;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11484)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11484)));
IkReal gconst10=(x11483*x11485);
IkReal gconst11=((1.0)*r10*x11485);
IkReal x11487=r12*r12;
IkReal x11488=(cj11*cj12*r22);
IkReal x11489=(r22*sj11*sj12);
CheckValue<IkReal> x11493=IKPowWithIntegerCheck(((-1.0)+x11487),-1);
if(!x11493.valid){
continue;
}
IkReal x11490=x11493.value;
if((((1.0)+(((-1.0)*x11487)))) < -0.00001)
continue;
IkReal x11491=IKsqrt(((1.0)+(((-1.0)*x11487))));
IkReal x11492=(r12*x11490*x11491);
j14eval[0]=((IKabs(((((-1.0)*x11489*x11492))+((x11488*x11492)))))+(IKabs((x11489+(((-1.0)*x11488))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x11494=((-1.0)*r11);
CheckValue<IkReal> x11497 = IKatan2WithCheck(IkReal(x11494),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11497.valid){
continue;
}
IkReal x11495=((1.0)*(x11497.value));
IkReal x11496=x11446;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11495)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11495)));
IkReal gconst10=(x11494*x11496);
IkReal gconst11=((1.0)*r10*x11496);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x11498=((-1.0)*r11);
CheckValue<IkReal> x11501 = IKatan2WithCheck(IkReal(x11498),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11501.valid){
continue;
}
IkReal x11499=((1.0)*(x11501.value));
IkReal x11500=x11446;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11499)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11499)));
IkReal gconst10=(x11498*x11500);
IkReal gconst11=((1.0)*r10*x11500);
IkReal x11502=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11506=IKPowWithIntegerCheck(x11502,-1);
if(!x11506.valid){
continue;
}
IkReal x11503=x11506.value;
IkReal x11504=((1.0)*x11503);
IkReal x11505=((((-1.0)*(r02*r02)))+(((-1.0)*x11504*(r01*r01)*(r11*r11)))+(((-1.0)*x11504*(r00*r00)*(r10*r10)))+(((-2.0)*r00*r01*r10*r11*x11503)));
j14eval[0]=x11505;
j14eval[1]=IKsign(x11505);
j14eval[2]=r02;
j14eval[3]=x11502;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11507=((-1.0)*r11);
CheckValue<IkReal> x11510 = IKatan2WithCheck(IkReal(x11507),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11510.valid){
continue;
}
IkReal x11508=((1.0)*(x11510.value));
IkReal x11509=x11446;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11508)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11508)));
IkReal gconst10=(x11507*x11509);
IkReal gconst11=((1.0)*r10*x11509);
IkReal x11511=r12*r12;
IkReal x11512=(cj11*cj12*r22);
IkReal x11513=(r22*sj11*sj12);
CheckValue<IkReal> x11517=IKPowWithIntegerCheck(((-1.0)+x11511),-1);
if(!x11517.valid){
continue;
}
IkReal x11514=x11517.value;
if((((1.0)+(((-1.0)*x11511)))) < -0.00001)
continue;
IkReal x11515=IKsqrt(((1.0)+(((-1.0)*x11511))));
IkReal x11516=(r12*x11514*x11515);
j14eval[0]=((IKabs(((((-1.0)*x11512))+x11513)))+(IKabs(((((-1.0)*x11513*x11516))+((x11512*x11516))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11518=(gconst10*r21);
IkReal x11519=(cj11*cj12);
IkReal x11520=(sj11*sj12);
IkReal x11521=(gconst11*r20);
CheckValue<IkReal> x11522=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11518*x11521))+(r22*r22)+(x11521*x11521)+(x11518*x11518))),-1);
if(!x11522.valid){
continue;
}
CheckValue<IkReal> x11523 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11519))+((r22*x11520)))),IkReal((((x11518*x11520))+((x11519*x11521))+(((-1.0)*x11518*x11519))+(((-1.0)*x11520*x11521)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11523.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11522.value)))+(x11523.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11524=IKsin(j14);
IkReal x11525=IKcos(j14);
IkReal x11526=(gconst11*r10);
IkReal x11527=((1.0)*cj11);
IkReal x11528=(gconst11*r20);
IkReal x11529=(gconst10*r21);
IkReal x11530=(gconst11*r00);
IkReal x11531=((1.0)*x11524);
IkReal x11532=((1.0)*x11525);
IkReal x11533=(gconst10*x11524);
evalcond[0]=(((x11524*x11529))+(((-1.0)*r22*x11532))+(((-1.0)*x11528*x11531)));
evalcond[1]=((((-1.0)*r12*x11532))+((r11*x11533))+(((-1.0)*x11526*x11531)));
evalcond[2]=((((-1.0)*gconst10*r01*x11532))+(((-1.0)*r02*x11531))+((x11525*x11530)));
evalcond[3]=((-1.0)+(((-1.0)*x11530*x11531))+((r01*x11533))+(((-1.0)*r02*x11532)));
evalcond[4]=(((sj11*sj12))+((x11525*x11528))+(((-1.0)*r22*x11531))+(((-1.0)*cj12*x11527))+(((-1.0)*x11529*x11532)));
evalcond[5]=(((x11525*x11526))+(((-1.0)*r12*x11531))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x11527))+(((-1.0)*gconst10*r11*x11532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11534=(gconst11*r00);
IkReal x11535=(gconst10*r01);
CheckValue<IkReal> x11536 = IKatan2WithCheck(IkReal((x11534+(((-1.0)*x11535)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11536.valid){
continue;
}
CheckValue<IkReal> x11537=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x11534*x11535))+(((-1.0)*(x11534*x11534)))+(((-1.0)*(x11535*x11535))))),-1);
if(!x11537.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11536.value)+(((1.5707963267949)*(x11537.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11538=IKsin(j14);
IkReal x11539=IKcos(j14);
IkReal x11540=(gconst11*r10);
IkReal x11541=((1.0)*cj11);
IkReal x11542=(gconst11*r20);
IkReal x11543=(gconst10*r21);
IkReal x11544=(gconst11*r00);
IkReal x11545=((1.0)*x11538);
IkReal x11546=((1.0)*x11539);
IkReal x11547=(gconst10*x11538);
evalcond[0]=(((x11538*x11543))+(((-1.0)*x11542*x11545))+(((-1.0)*r22*x11546)));
evalcond[1]=((((-1.0)*x11540*x11545))+((r11*x11547))+(((-1.0)*r12*x11546)));
evalcond[2]=((((-1.0)*gconst10*r01*x11546))+((x11539*x11544))+(((-1.0)*r02*x11545)));
evalcond[3]=((-1.0)+((r01*x11547))+(((-1.0)*r02*x11546))+(((-1.0)*x11544*x11545)));
evalcond[4]=(((sj11*sj12))+((x11539*x11542))+(((-1.0)*cj12*x11541))+(((-1.0)*x11543*x11546))+(((-1.0)*r22*x11545)));
evalcond[5]=(((x11539*x11540))+(((-1.0)*gconst10*r11*x11546))+(((-1.0)*cj12*sj11))+(((-1.0)*r12*x11545))+(((-1.0)*sj12*x11541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x11548 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11548.valid){
continue;
}
CheckValue<IkReal> x11549=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11549.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11548.value)+(((1.5707963267949)*(x11549.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11550=IKsin(j14);
IkReal x11551=IKcos(j14);
IkReal x11552=(gconst11*r10);
IkReal x11553=((1.0)*cj11);
IkReal x11554=(gconst11*r20);
IkReal x11555=(gconst10*r21);
IkReal x11556=(gconst11*r00);
IkReal x11557=((1.0)*x11550);
IkReal x11558=((1.0)*x11551);
IkReal x11559=(gconst10*x11550);
evalcond[0]=((((-1.0)*x11554*x11557))+((x11550*x11555))+(((-1.0)*r22*x11558)));
evalcond[1]=(((r11*x11559))+(((-1.0)*r12*x11558))+(((-1.0)*x11552*x11557)));
evalcond[2]=(((x11551*x11556))+(((-1.0)*r02*x11557))+(((-1.0)*gconst10*r01*x11558)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11558))+((r01*x11559))+(((-1.0)*x11556*x11557)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x11555*x11558))+((x11551*x11554))+(((-1.0)*r22*x11557))+(((-1.0)*cj12*x11553)));
evalcond[5]=(((x11551*x11552))+(((-1.0)*r12*x11557))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x11553))+(((-1.0)*gconst10*r11*x11558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x11560=((-1.0)*r11);
CheckValue<IkReal> x11563 = IKatan2WithCheck(IkReal(x11560),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11563.valid){
continue;
}
IkReal x11561=((1.0)*(x11563.value));
IkReal x11562=x11446;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11561)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11561)));
IkReal gconst10=(x11560*x11562);
IkReal gconst11=((1.0)*r10*x11562);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x11564=((-1.0)*r11);
CheckValue<IkReal> x11567 = IKatan2WithCheck(IkReal(x11564),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11567.valid){
continue;
}
IkReal x11565=((1.0)*(x11567.value));
IkReal x11566=x11446;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11565)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11565)));
IkReal gconst10=(x11564*x11566);
IkReal gconst11=((1.0)*r10*x11566);
j14eval[0]=r02;
j14eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11568=((-1.0)*r11);
CheckValue<IkReal> x11571 = IKatan2WithCheck(IkReal(x11568),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11571.valid){
continue;
}
IkReal x11569=((1.0)*(x11571.value));
IkReal x11570=x11446;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11569)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11569)));
IkReal gconst10=(x11568*x11570);
IkReal gconst11=((1.0)*r10*x11570);
IkReal x11572=r12*r12;
CheckValue<IkReal> x11575=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11572))),-1);
if(!x11575.valid){
continue;
}
IkReal x11573=x11575.value;
IkReal x11574=((1.0)*x11573);
j14eval[0]=IKsign((x11572+(((2.0)*x11573*(r10*r10)*(r11*r11)))+((x11574*(r11*r11*r11*r11)))+((x11574*(r10*r10*r10*r10)))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11576=(cj12*sj11);
IkReal x11577=(cj11*sj12);
IkReal x11578=(gconst10*r11);
IkReal x11579=((1.0)*gconst11*r10);
CheckValue<IkReal> x11580 = IKatan2WithCheck(IkReal((((r12*x11576))+((r12*x11577)))),IkReal(((((-1.0)*x11577*x11579))+((x11576*x11578))+(((-1.0)*x11576*x11579))+((x11577*x11578)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11580.valid){
continue;
}
CheckValue<IkReal> x11581=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*gconst11*r10*x11578))+(x11578*x11578)+(((gconst11*gconst11)*(r10*r10))))),-1);
if(!x11581.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11580.value)+(((1.5707963267949)*(x11581.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11582=IKsin(j14);
IkReal x11583=IKcos(j14);
IkReal x11584=(gconst11*r10);
IkReal x11585=(gconst11*r20);
IkReal x11586=(gconst10*r21);
IkReal x11587=(gconst11*r00);
IkReal x11588=((1.0)*x11582);
IkReal x11589=((1.0)*x11583);
IkReal x11590=(gconst10*x11582);
evalcond[0]=(((x11582*x11586))+(((-1.0)*x11585*x11588))+(((-1.0)*r22*x11589)));
evalcond[1]=((((-1.0)*x11584*x11588))+((r11*x11590))+(((-1.0)*r12*x11589)));
evalcond[2]=((((-1.0)*gconst10*r01*x11589))+((x11583*x11587))+(((-1.0)*r02*x11588)));
evalcond[3]=((1.0)+(((-1.0)*x11587*x11588))+((r01*x11590))+(((-1.0)*r02*x11589)));
evalcond[4]=(((x11583*x11584))+(((-1.0)*gconst10*r11*x11589))+(((-1.0)*r12*x11588))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x11583*x11585))+(((-1.0)*x11586*x11589))+(((-1.0)*r22*x11588))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11591=(gconst11*r00);
IkReal x11592=(gconst10*r01);
CheckValue<IkReal> x11593=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11591*x11592))+(x11591*x11591)+(x11592*x11592)+(r02*r02))),-1);
if(!x11593.valid){
continue;
}
CheckValue<IkReal> x11594 = IKatan2WithCheck(IkReal((x11591+(((-1.0)*x11592)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11594.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11593.value)))+(x11594.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11595=IKsin(j14);
IkReal x11596=IKcos(j14);
IkReal x11597=(gconst11*r10);
IkReal x11598=(gconst11*r20);
IkReal x11599=(gconst10*r21);
IkReal x11600=(gconst11*r00);
IkReal x11601=((1.0)*x11595);
IkReal x11602=((1.0)*x11596);
IkReal x11603=(gconst10*x11595);
evalcond[0]=((((-1.0)*r22*x11602))+(((-1.0)*x11598*x11601))+((x11595*x11599)));
evalcond[1]=((((-1.0)*r12*x11602))+(((-1.0)*x11597*x11601))+((r11*x11603)));
evalcond[2]=((((-1.0)*gconst10*r01*x11602))+(((-1.0)*r02*x11601))+((x11596*x11600)));
evalcond[3]=((1.0)+((r01*x11603))+(((-1.0)*r02*x11602))+(((-1.0)*x11600*x11601)));
evalcond[4]=((((-1.0)*gconst10*r11*x11602))+(((-1.0)*r12*x11601))+((cj12*sj11))+((x11596*x11597))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r22*x11601))+(((-1.0)*x11599*x11602))+((x11596*x11598))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11604=((1.0)*gconst11);
CheckValue<IkReal> x11605=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11604))+(((-1.0)*gconst10*r20)))),-1);
if(!x11605.valid){
continue;
}
CheckValue<IkReal> x11606 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11604)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11606.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11605.value)))+(x11606.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11607=IKsin(j14);
IkReal x11608=IKcos(j14);
IkReal x11609=(gconst11*r10);
IkReal x11610=(gconst11*r20);
IkReal x11611=(gconst10*r21);
IkReal x11612=(gconst11*r00);
IkReal x11613=((1.0)*x11607);
IkReal x11614=((1.0)*x11608);
IkReal x11615=(gconst10*x11607);
evalcond[0]=((((-1.0)*r22*x11614))+(((-1.0)*x11610*x11613))+((x11607*x11611)));
evalcond[1]=((((-1.0)*r12*x11614))+((r11*x11615))+(((-1.0)*x11609*x11613)));
evalcond[2]=((((-1.0)*gconst10*r01*x11614))+((x11608*x11612))+(((-1.0)*r02*x11613)));
evalcond[3]=((1.0)+(((-1.0)*x11612*x11613))+((r01*x11615))+(((-1.0)*r02*x11614)));
evalcond[4]=((((-1.0)*r12*x11613))+(((-1.0)*gconst10*r11*x11614))+((x11608*x11609))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r22*x11613))+(((-1.0)*x11611*x11614))+((x11608*x11610))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x11616=((-1.0)*r11);
IkReal x11617=((-1.0)*r10);
CheckValue<IkReal> x11619 = IKatan2WithCheck(IkReal(x11616),IkReal(x11617),IKFAST_ATAN2_MAGTHRESH);
if(!x11619.valid){
continue;
}
IkReal x11618=((1.0)*(x11619.value));
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11618)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11617);
rxp1_1=(px*r21);
rxp1_2=(px*x11616);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11618)));
IkReal gconst10=x11616;
IkReal gconst11=((1.0)*r10);
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11620=((-1.0)*r11);
IkReal x11621=((-1.0)*r10);
CheckValue<IkReal> x11623 = IKatan2WithCheck(IkReal(x11620),IkReal(x11621),IKFAST_ATAN2_MAGTHRESH);
if(!x11623.valid){
continue;
}
IkReal x11622=((1.0)*(x11623.value));
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11622)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11621);
rxp1_1=(px*r21);
rxp1_2=(px*x11620);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11622)));
IkReal gconst10=x11620;
IkReal gconst11=((1.0)*r10);
j14eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11624=((-1.0)*r11);
IkReal x11625=((-1.0)*r10);
CheckValue<IkReal> x11627 = IKatan2WithCheck(IkReal(x11624),IkReal(x11625),IKFAST_ATAN2_MAGTHRESH);
if(!x11627.valid){
continue;
}
IkReal x11626=((1.0)*(x11627.value));
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11626)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11625);
rxp1_1=(px*r21);
rxp1_2=(px*x11624);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11626)));
IkReal gconst10=x11624;
IkReal gconst11=((1.0)*r10);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x11630=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x11630.valid){
continue;
}
IkReal x11628=x11630.value;
IkReal x11629=(sj10*x11628);
cj14array[0]=(((cj11*sj12*x11629))+((cj12*sj11*x11629)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x11631=IKsin(j14);
IkReal x11632=IKcos(j14);
IkReal x11633=(gconst11*r20);
IkReal x11634=(gconst10*r21);
IkReal x11635=((1.0)*x11631);
IkReal x11636=((1.0)*x11632);
evalcond[0]=((-1.0)*r02*x11631);
evalcond[1]=((((-1.0)*r02*x11636))+(((-1.0)*sj10)));
evalcond[2]=((((-1.0)*x11633*x11635))+((x11631*x11634)));
evalcond[3]=(((gconst10*r11*x11631))+(((-1.0)*gconst11*r10*x11635)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x11634*x11636))+((x11632*x11633))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x11638=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11638.valid){
continue;
}
IkReal x11637=x11638.value;
cj14array[0]=((((-1.0)*sj11*sj12*x11637))+((cj11*cj12*x11637)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x11639=IKsin(j14);
IkReal x11640=IKcos(j14);
IkReal x11641=((1.0)*sj10);
IkReal x11642=((1.0)*x11640);
IkReal x11643=(gconst10*x11639);
IkReal x11644=((1.0)*gconst11*x11639);
evalcond[0]=((-1.0)*r02*x11639);
evalcond[1]=((((-1.0)*r02*x11642))+(((-1.0)*x11641)));
evalcond[2]=(((r21*x11643))+(((-1.0)*r20*x11644)));
evalcond[3]=(((r11*x11643))+(((-1.0)*r10*x11644)));
evalcond[4]=((((-1.0)*cj11*sj12*x11641))+(((-1.0)*cj12*sj11*x11641))+((gconst11*r10*x11640))+(((-1.0)*gconst10*r11*x11642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x11645=IKPowWithIntegerCheck(r02,-1);
if(!x11645.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x11645.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x11646=IKsin(j14);
IkReal x11647=IKcos(j14);
IkReal x11648=(gconst11*r20);
IkReal x11649=((1.0)*cj12);
IkReal x11650=(gconst11*r10);
IkReal x11651=(gconst10*r21);
IkReal x11652=(gconst10*r11);
IkReal x11653=((1.0)*x11646);
IkReal x11654=((1.0)*x11647);
evalcond[0]=((-1.0)*r02*x11646);
evalcond[1]=(((x11646*x11651))+(((-1.0)*x11648*x11653)));
evalcond[2]=((((-1.0)*x11650*x11653))+((x11646*x11652)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj11*x11649))+((x11647*x11648))+(((-1.0)*x11651*x11654)));
evalcond[4]=((((-1.0)*cj11*sj10*sj12))+(((-1.0)*sj10*sj11*x11649))+((x11647*x11650))+(((-1.0)*x11652*x11654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11655=((1.0)*gconst11);
CheckValue<IkReal> x11656 = IKatan2WithCheck(IkReal((((r12*sj10))+((cj10*r02)))),IkReal((((gconst10*r11*sj10))+(((-1.0)*cj10*r00*x11655))+((cj10*gconst10*r01))+(((-1.0)*r10*sj10*x11655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11656.valid){
continue;
}
CheckValue<IkReal> x11657=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11657.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11656.value)+(((1.5707963267949)*(x11657.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11658=IKsin(j14);
IkReal x11659=IKcos(j14);
IkReal x11660=((1.0)*cj11);
IkReal x11661=((1.0)*sj10);
IkReal x11662=(gconst10*r21);
IkReal x11663=(cj12*sj11);
IkReal x11664=((1.0)*x11659);
IkReal x11665=(gconst11*x11659);
IkReal x11666=(gconst10*x11658);
IkReal x11667=((1.0)*x11658);
IkReal x11668=(gconst11*x11667);
evalcond[0]=((((-1.0)*r20*x11668))+((x11658*x11662)));
evalcond[1]=((((-1.0)*r12*x11664))+cj10+((r11*x11666))+(((-1.0)*r10*x11668)));
evalcond[2]=(((sj11*sj12))+(((-1.0)*cj12*x11660))+((r20*x11665))+(((-1.0)*x11662*x11664)));
evalcond[3]=((((-1.0)*r00*x11668))+((r01*x11666))+(((-1.0)*r02*x11664))+(((-1.0)*x11661)));
evalcond[4]=((((-1.0)*gconst10*r01*x11664))+(((-1.0)*r02*x11667))+(((-1.0)*cj10*x11663))+((r00*x11665))+(((-1.0)*cj10*sj12*x11660)));
evalcond[5]=((((-1.0)*gconst10*r11*x11664))+(((-1.0)*sj10*sj12*x11660))+(((-1.0)*r12*x11667))+((r10*x11665))+(((-1.0)*x11661*x11663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11669=(gconst10*r21);
IkReal x11670=(cj11*cj12);
IkReal x11671=(sj11*sj12);
IkReal x11672=(gconst11*r20);
CheckValue<IkReal> x11673=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x11669*x11669)+(x11672*x11672)+(((-2.0)*x11669*x11672)))),-1);
if(!x11673.valid){
continue;
}
CheckValue<IkReal> x11674 = IKatan2WithCheck(IkReal((((r22*x11671))+(((-1.0)*r22*x11670)))),IkReal(((((-1.0)*x11669*x11670))+((x11670*x11672))+((x11669*x11671))+(((-1.0)*x11671*x11672)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11674.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11673.value)))+(x11674.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11675=IKsin(j14);
IkReal x11676=IKcos(j14);
IkReal x11677=(gconst11*r10);
IkReal x11678=((1.0)*cj11);
IkReal x11679=((1.0)*sj10);
IkReal x11680=(gconst11*r20);
IkReal x11681=(gconst10*r21);
IkReal x11682=(cj12*sj11);
IkReal x11683=(gconst11*r00);
IkReal x11684=((1.0)*x11675);
IkReal x11685=((1.0)*x11676);
IkReal x11686=(gconst10*x11675);
evalcond[0]=((((-1.0)*x11680*x11684))+((x11675*x11681))+(((-1.0)*r22*x11685)));
evalcond[1]=(((r11*x11686))+cj10+(((-1.0)*r12*x11685))+(((-1.0)*x11677*x11684)));
evalcond[2]=((((-1.0)*r02*x11685))+(((-1.0)*x11683*x11684))+((r01*x11686))+(((-1.0)*x11679)));
evalcond[3]=(((sj11*sj12))+((x11676*x11680))+(((-1.0)*cj12*x11678))+(((-1.0)*r22*x11684))+(((-1.0)*x11681*x11685)));
evalcond[4]=(((x11676*x11683))+(((-1.0)*cj10*sj12*x11678))+(((-1.0)*r02*x11684))+(((-1.0)*gconst10*r01*x11685))+(((-1.0)*cj10*x11682)));
evalcond[5]=(((x11676*x11677))+(((-1.0)*r12*x11684))+(((-1.0)*gconst10*r11*x11685))+(((-1.0)*x11679*x11682))+(((-1.0)*sj10*sj12*x11678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11687=((1.0)*gconst10);
CheckValue<IkReal> x11688 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((gconst11*r10*sj10))+(((-1.0)*r11*sj10*x11687))+((cj10*gconst11*r00))+(((-1.0)*cj10*r01*x11687)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11688.valid){
continue;
}
CheckValue<IkReal> x11689=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11687))+(((-1.0)*gconst11*r21)))),-1);
if(!x11689.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11688.value)+(((1.5707963267949)*(x11689.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11690=IKsin(j14);
IkReal x11691=IKcos(j14);
IkReal x11692=(gconst11*r10);
IkReal x11693=((1.0)*cj11);
IkReal x11694=((1.0)*sj10);
IkReal x11695=(gconst11*r20);
IkReal x11696=(gconst10*r21);
IkReal x11697=(cj12*sj11);
IkReal x11698=(gconst11*r00);
IkReal x11699=((1.0)*x11690);
IkReal x11700=((1.0)*x11691);
IkReal x11701=(gconst10*x11690);
evalcond[0]=((((-1.0)*r22*x11700))+(((-1.0)*x11695*x11699))+((x11690*x11696)));
evalcond[1]=(cj10+(((-1.0)*x11692*x11699))+((r11*x11701))+(((-1.0)*r12*x11700)));
evalcond[2]=(((r01*x11701))+(((-1.0)*x11694))+(((-1.0)*x11698*x11699))+(((-1.0)*r02*x11700)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r22*x11699))+((x11691*x11695))+(((-1.0)*cj12*x11693))+(((-1.0)*x11696*x11700)));
evalcond[4]=((((-1.0)*cj10*sj12*x11693))+(((-1.0)*cj10*x11697))+((x11691*x11698))+(((-1.0)*r02*x11699))+(((-1.0)*gconst10*r01*x11700)));
evalcond[5]=(((x11691*x11692))+(((-1.0)*sj10*sj12*x11693))+(((-1.0)*gconst10*r11*x11700))+(((-1.0)*x11694*x11697))+(((-1.0)*r12*x11699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11702=((1.0)*gconst11);
CheckValue<IkReal> x11703=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x11702)))),-1);
if(!x11703.valid){
continue;
}
CheckValue<IkReal> x11704 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x11702))+((cj10*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11704.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11703.value)))+(x11704.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11705=IKsin(j14);
IkReal x11706=IKcos(j14);
IkReal x11707=(gconst11*r10);
IkReal x11708=((1.0)*cj11);
IkReal x11709=((1.0)*sj10);
IkReal x11710=(gconst11*r20);
IkReal x11711=(gconst10*r21);
IkReal x11712=(cj12*sj11);
IkReal x11713=(gconst11*r00);
IkReal x11714=((1.0)*x11705);
IkReal x11715=((1.0)*x11706);
IkReal x11716=(gconst10*x11705);
evalcond[0]=(((x11705*x11711))+(((-1.0)*r22*x11715))+(((-1.0)*x11710*x11714)));
evalcond[1]=((((-1.0)*x11707*x11714))+(((-1.0)*r12*x11715))+cj10+((r11*x11716)));
evalcond[2]=(((r01*x11716))+(((-1.0)*x11713*x11714))+(((-1.0)*x11709))+(((-1.0)*r02*x11715)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r22*x11714))+(((-1.0)*cj12*x11708))+((x11706*x11710))+(((-1.0)*x11711*x11715)));
evalcond[4]=((((-1.0)*cj10*x11712))+(((-1.0)*cj10*sj12*x11708))+(((-1.0)*gconst10*r01*x11715))+((x11706*x11713))+(((-1.0)*r02*x11714)));
evalcond[5]=((((-1.0)*x11709*x11712))+(((-1.0)*r12*x11714))+(((-1.0)*gconst10*r11*x11715))+((x11706*x11707))+(((-1.0)*sj10*sj12*x11708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x11717=((-1.0)*r11);
CheckValue<IkReal> x11720 = IKatan2WithCheck(IkReal(x11717),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11720.valid){
continue;
}
IkReal x11718=((1.0)*(x11720.value));
IkReal x11719=x11446;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11718)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11718)));
IkReal gconst10=(x11717*x11719);
IkReal gconst11=((1.0)*r10*x11719);
j14eval[0]=cj10;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11721=((-1.0)*r11);
CheckValue<IkReal> x11724 = IKatan2WithCheck(IkReal(x11721),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11724.valid){
continue;
}
IkReal x11722=((1.0)*(x11724.value));
IkReal x11723=x11446;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11722)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11722)));
IkReal gconst10=(x11721*x11723);
IkReal gconst11=((1.0)*r10*x11723);
IkReal x11725=r12*r12;
IkReal x11726=(cj10*r02);
IkReal x11727=x11446;
IkReal x11728=(sj10*x11727);
j14eval[0]=((IKabs((((r12*x11726*x11727))+(((-1.0)*x11728))+((x11725*x11728)))))+(IKabs(((((-1.0)*x11726))+(((-1.0)*r12*sj10))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x11729=((-1.0)*r11);
CheckValue<IkReal> x11732 = IKatan2WithCheck(IkReal(x11729),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11732.valid){
continue;
}
IkReal x11730=((1.0)*(x11732.value));
IkReal x11731=x11446;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11730)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11730)));
IkReal gconst10=(x11729*x11731);
IkReal gconst11=((1.0)*r10*x11731);
IkReal x11733=r12*r12;
IkReal x11734=(cj11*cj12);
IkReal x11735=(sj11*sj12);
IkReal x11736=((1.0)+(((-1.0)*x11733)));
CheckValue<IkReal> x11743=IKPowWithIntegerCheck(x11736,-1);
if(!x11743.valid){
continue;
}
IkReal x11737=x11743.value;
CheckValue<IkReal> x11744=IKPowWithIntegerCheck(((-1.0)+x11733),-1);
if(!x11744.valid){
continue;
}
IkReal x11738=x11744.value;
IkReal x11739=((1.0)*x11737);
if((x11736) < -0.00001)
continue;
IkReal x11740=IKsqrt(x11736);
IkReal x11741=(r12*r22*x11738*x11740);
IkReal x11742=((((-1.0)*x11739*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-1.0)*x11739*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x11737)));
j14eval[0]=x11742;
j14eval[1]=((IKabs(((((-1.0)*x11735*x11741))+((x11734*x11741)))))+(IKabs(((((-1.0)*r22*x11734))+((r22*x11735))))));
j14eval[2]=IKsign(x11742);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x11745=((-1.0)*r11);
CheckValue<IkReal> x11748 = IKatan2WithCheck(IkReal(x11745),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11748.valid){
continue;
}
IkReal x11746=((1.0)*(x11748.value));
IkReal x11747=x11446;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11746)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11746)));
IkReal gconst10=(x11745*x11747);
IkReal gconst11=((1.0)*r10*x11747);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x11749=((-1.0)*r11);
CheckValue<IkReal> x11752 = IKatan2WithCheck(IkReal(x11749),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11752.valid){
continue;
}
IkReal x11750=((1.0)*(x11752.value));
IkReal x11751=x11446;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11750)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11750)));
IkReal gconst10=(x11749*x11751);
IkReal gconst11=((1.0)*r10*x11751);
j14eval[0]=r02;
j14eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11753=((-1.0)*r11);
CheckValue<IkReal> x11756 = IKatan2WithCheck(IkReal(x11753),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11756.valid){
continue;
}
IkReal x11754=((1.0)*(x11756.value));
IkReal x11755=x11446;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11754)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11754)));
IkReal gconst10=(x11753*x11755);
IkReal gconst11=((1.0)*r10*x11755);
IkReal x11757=(cj12*r02*sj11);
IkReal x11758=(cj11*r02*sj12);
IkReal x11759=x11446;
IkReal x11760=(r12*x11759);
j14eval[0]=((IKabs((x11757+x11758)))+(IKabs((((x11757*x11760))+((x11758*x11760))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11761=(cj12*sj11);
IkReal x11762=((1.0)*gconst10);
IkReal x11763=(cj11*sj12);
IkReal x11764=(gconst11*r00);
CheckValue<IkReal> x11765=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x11762)))),-1);
if(!x11765.valid){
continue;
}
CheckValue<IkReal> x11766 = IKatan2WithCheck(IkReal((((x11763*x11764))+(((-1.0)*r01*x11761*x11762))+(((-1.0)*r01*x11762*x11763))+((x11761*x11764)))),IkReal((((r02*x11761))+((r02*x11763)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11766.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11765.value)))+(x11766.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11767=IKcos(j14);
IkReal x11768=IKsin(j14);
IkReal x11769=((1.0)*gconst11);
IkReal x11770=((1.0)*cj11);
IkReal x11771=(gconst10*r21);
IkReal x11772=(gconst10*r11);
IkReal x11773=(gconst10*r01);
IkReal x11774=((1.0)*x11767);
evalcond[0]=((((-1.0)*r00*x11767*x11769))+((r02*x11768))+((x11767*x11773)));
evalcond[1]=(((x11768*x11771))+(((-1.0)*r22*x11774))+(((-1.0)*r20*x11768*x11769)));
evalcond[2]=(((x11768*x11772))+(((-1.0)*r12*x11774))+(((-1.0)*r10*x11768*x11769)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x11768*x11769))+((x11768*x11773))+(((-1.0)*r02*x11774)));
evalcond[4]=(((sj11*sj12))+((r22*x11768))+(((-1.0)*r20*x11767*x11769))+((x11767*x11771))+(((-1.0)*cj12*x11770)));
evalcond[5]=((((-1.0)*sj12*x11770))+((r12*x11768))+(((-1.0)*cj12*sj11))+(((-1.0)*r10*x11767*x11769))+((x11767*x11772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11775=(gconst10*r01);
IkReal x11776=(gconst11*r00);
CheckValue<IkReal> x11777=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11775*x11776))+(x11776*x11776)+(r02*r02)+(x11775*x11775))),-1);
if(!x11777.valid){
continue;
}
CheckValue<IkReal> x11778 = IKatan2WithCheck(IkReal((x11775+(((-1.0)*x11776)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11778.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11777.value)))+(x11778.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11779=IKcos(j14);
IkReal x11780=IKsin(j14);
IkReal x11781=((1.0)*gconst11);
IkReal x11782=((1.0)*cj11);
IkReal x11783=(gconst10*r21);
IkReal x11784=(gconst10*r11);
IkReal x11785=(gconst10*r01);
IkReal x11786=((1.0)*x11779);
evalcond[0]=(((r02*x11780))+(((-1.0)*r00*x11779*x11781))+((x11779*x11785)));
evalcond[1]=(((x11780*x11783))+(((-1.0)*r20*x11780*x11781))+(((-1.0)*r22*x11786)));
evalcond[2]=(((x11780*x11784))+(((-1.0)*r12*x11786))+(((-1.0)*r10*x11780*x11781)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x11780*x11781))+((x11780*x11785))+(((-1.0)*r02*x11786)));
evalcond[4]=(((sj11*sj12))+((r22*x11780))+(((-1.0)*r20*x11779*x11781))+((x11779*x11783))+(((-1.0)*cj12*x11782)));
evalcond[5]=(((r12*x11780))+(((-1.0)*sj12*x11782))+(((-1.0)*cj12*sj11))+((x11779*x11784))+(((-1.0)*r10*x11779*x11781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x11787 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11787.valid){
continue;
}
CheckValue<IkReal> x11788=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11788.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11787.value)+(((1.5707963267949)*(x11788.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11789=IKcos(j14);
IkReal x11790=IKsin(j14);
IkReal x11791=((1.0)*gconst11);
IkReal x11792=((1.0)*cj11);
IkReal x11793=(gconst10*r21);
IkReal x11794=(gconst10*r11);
IkReal x11795=(gconst10*r01);
IkReal x11796=((1.0)*x11789);
evalcond[0]=((((-1.0)*r00*x11789*x11791))+((r02*x11790))+((x11789*x11795)));
evalcond[1]=((((-1.0)*r20*x11790*x11791))+((x11790*x11793))+(((-1.0)*r22*x11796)));
evalcond[2]=((((-1.0)*r12*x11796))+((x11790*x11794))+(((-1.0)*r10*x11790*x11791)));
evalcond[3]=((-1.0)+((x11790*x11795))+(((-1.0)*r02*x11796))+(((-1.0)*r00*x11790*x11791)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x11792))+((r22*x11790))+(((-1.0)*r20*x11789*x11791))+((x11789*x11793)));
evalcond[5]=(((r12*x11790))+(((-1.0)*sj12*x11792))+(((-1.0)*r10*x11789*x11791))+(((-1.0)*cj12*sj11))+((x11789*x11794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x11797=((-1.0)*r11);
CheckValue<IkReal> x11800 = IKatan2WithCheck(IkReal(x11797),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11800.valid){
continue;
}
IkReal x11798=((1.0)*(x11800.value));
IkReal x11799=x11446;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11798)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11798)));
IkReal gconst10=(x11797*x11799);
IkReal gconst11=((1.0)*r10*x11799);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x11801=((-1.0)*r11);
CheckValue<IkReal> x11804 = IKatan2WithCheck(IkReal(x11801),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11804.valid){
continue;
}
IkReal x11802=((1.0)*(x11804.value));
IkReal x11803=x11446;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11802)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11802)));
IkReal gconst10=(x11801*x11803);
IkReal gconst11=((1.0)*r10*x11803);
IkReal x11805=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11809=IKPowWithIntegerCheck(x11805,-1);
if(!x11809.valid){
continue;
}
IkReal x11806=x11809.value;
IkReal x11807=((1.0)*x11806);
IkReal x11808=((((-1.0)*x11807*(r00*r00)*(r10*r10)))+(((-1.0)*x11807*(r01*r01)*(r11*r11)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r10*r11*x11806)));
j14eval[0]=x11808;
j14eval[1]=r02;
j14eval[2]=x11805;
j14eval[3]=IKsign(x11808);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11810=((-1.0)*r11);
CheckValue<IkReal> x11813 = IKatan2WithCheck(IkReal(x11810),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11813.valid){
continue;
}
IkReal x11811=((1.0)*(x11813.value));
IkReal x11812=x11446;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11811)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11811)));
IkReal gconst10=(x11810*x11812);
IkReal gconst11=((1.0)*r10*x11812);
IkReal x11814=r12*r12;
CheckValue<IkReal> x11820=IKPowWithIntegerCheck(((-1.0)+x11814),-1);
if(!x11820.valid){
continue;
}
IkReal x11815=x11820.value;
IkReal x11816=((1.0)*cj12*r02*sj11);
IkReal x11817=((1.0)*cj11*r02*sj12);
if((((1.0)+(((-1.0)*x11814)))) < -0.00001)
continue;
IkReal x11818=IKsqrt(((1.0)+(((-1.0)*x11814))));
IkReal x11819=(r12*x11815*x11818);
j14eval[0]=((IKabs(((((-1.0)*x11817*x11819))+(((-1.0)*x11816*x11819)))))+(IKabs(((((-1.0)*x11817))+(((-1.0)*x11816))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11821=(cj11*sj12);
IkReal x11822=(cj12*sj11);
IkReal x11823=((1.0)*r02);
IkReal x11824=(gconst10*r01);
IkReal x11825=((1.0)*gconst11*r00);
CheckValue<IkReal> x11826=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x11826.valid){
continue;
}
CheckValue<IkReal> x11827 = IKatan2WithCheck(IkReal(((((-1.0)*x11821*x11825))+(((-1.0)*x11822*x11825))+((x11822*x11824))+((x11821*x11824)))),IkReal(((((-1.0)*x11821*x11823))+(((-1.0)*x11822*x11823)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11827.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11826.value)))+(x11827.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11828=IKcos(j14);
IkReal x11829=IKsin(j14);
IkReal x11830=((1.0)*gconst11);
IkReal x11831=(gconst10*r21);
IkReal x11832=(gconst10*r11);
IkReal x11833=(gconst10*r01);
IkReal x11834=((1.0)*x11828);
evalcond[0]=(((r02*x11829))+(((-1.0)*r00*x11828*x11830))+((x11828*x11833)));
evalcond[1]=(((x11829*x11831))+(((-1.0)*r22*x11834))+(((-1.0)*r20*x11829*x11830)));
evalcond[2]=(((x11829*x11832))+(((-1.0)*r12*x11834))+(((-1.0)*r10*x11829*x11830)));
evalcond[3]=((1.0)+(((-1.0)*r00*x11829*x11830))+((x11829*x11833))+(((-1.0)*r02*x11834)));
evalcond[4]=((((-1.0)*r10*x11828*x11830))+((r12*x11829))+((cj12*sj11))+((x11828*x11832))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r22*x11829))+(((-1.0)*r20*x11828*x11830))+((x11828*x11831))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11835=(gconst10*r01);
IkReal x11836=(gconst11*r00);
CheckValue<IkReal> x11837 = IKatan2WithCheck(IkReal(((((-1.0)*x11836))+x11835)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11837.valid){
continue;
}
CheckValue<IkReal> x11838=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11836*x11836)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11835*x11835)))+(((2.0)*x11835*x11836)))),-1);
if(!x11838.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11837.value)+(((1.5707963267949)*(x11838.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11839=IKcos(j14);
IkReal x11840=IKsin(j14);
IkReal x11841=((1.0)*gconst11);
IkReal x11842=(gconst10*r21);
IkReal x11843=(gconst10*r11);
IkReal x11844=(gconst10*r01);
IkReal x11845=((1.0)*x11839);
evalcond[0]=(((x11839*x11844))+(((-1.0)*r00*x11839*x11841))+((r02*x11840)));
evalcond[1]=(((x11840*x11842))+(((-1.0)*r20*x11840*x11841))+(((-1.0)*r22*x11845)));
evalcond[2]=((((-1.0)*r10*x11840*x11841))+((x11840*x11843))+(((-1.0)*r12*x11845)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11845))+((x11840*x11844))+(((-1.0)*r00*x11840*x11841)));
evalcond[4]=(((x11839*x11843))+(((-1.0)*r10*x11839*x11841))+((cj12*sj11))+((r12*x11840))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x11839*x11842))+((r22*x11840))+(((-1.0)*r20*x11839*x11841))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11846=((1.0)*gconst11);
CheckValue<IkReal> x11847 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11846)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11847.valid){
continue;
}
CheckValue<IkReal> x11848=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11846))+(((-1.0)*gconst10*r20)))),-1);
if(!x11848.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11847.value)+(((1.5707963267949)*(x11848.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11849=IKcos(j14);
IkReal x11850=IKsin(j14);
IkReal x11851=((1.0)*gconst11);
IkReal x11852=(gconst10*r21);
IkReal x11853=(gconst10*r11);
IkReal x11854=(gconst10*r01);
IkReal x11855=((1.0)*x11849);
evalcond[0]=((((-1.0)*r00*x11849*x11851))+((x11849*x11854))+((r02*x11850)));
evalcond[1]=((((-1.0)*r20*x11850*x11851))+(((-1.0)*r22*x11855))+((x11850*x11852)));
evalcond[2]=((((-1.0)*r10*x11850*x11851))+(((-1.0)*r12*x11855))+((x11850*x11853)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11855))+(((-1.0)*r00*x11850*x11851))+((x11850*x11854)));
evalcond[4]=(((r12*x11850))+((cj12*sj11))+((x11849*x11853))+((cj11*sj12))+(((-1.0)*r10*x11849*x11851)));
evalcond[5]=(((sj11*sj12))+((r22*x11850))+((x11849*x11852))+(((-1.0)*r20*x11849*x11851))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x11856=((-1.0)*r11);
IkReal x11857=((-1.0)*r10);
CheckValue<IkReal> x11859 = IKatan2WithCheck(IkReal(x11856),IkReal(x11857),IKFAST_ATAN2_MAGTHRESH);
if(!x11859.valid){
continue;
}
IkReal x11858=((1.0)*(x11859.value));
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11858)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11857);
rxp1_1=(px*r21);
rxp1_2=(px*x11856);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11858)));
IkReal gconst10=x11856;
IkReal gconst11=((1.0)*r10);
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11860=((-1.0)*r11);
IkReal x11861=((-1.0)*r10);
CheckValue<IkReal> x11863 = IKatan2WithCheck(IkReal(x11860),IkReal(x11861),IKFAST_ATAN2_MAGTHRESH);
if(!x11863.valid){
continue;
}
IkReal x11862=((1.0)*(x11863.value));
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11862)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11861);
rxp1_1=(px*r21);
rxp1_2=(px*x11860);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11862)));
IkReal gconst10=x11860;
IkReal gconst11=((1.0)*r10);
j14eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x11864=((-1.0)*r11);
IkReal x11865=((-1.0)*r10);
CheckValue<IkReal> x11867 = IKatan2WithCheck(IkReal(x11864),IkReal(x11865),IKFAST_ATAN2_MAGTHRESH);
if(!x11867.valid){
continue;
}
IkReal x11866=((1.0)*(x11867.value));
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11866)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11865);
rxp1_1=(px*r21);
rxp1_2=(px*x11864);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11866)));
IkReal gconst10=x11864;
IkReal gconst11=((1.0)*r10);
j14eval[0]=-1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x11870=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x11870.valid){
continue;
}
IkReal x11868=x11870.value;
IkReal x11869=(sj10*x11868);
cj14array[0]=(((cj12*sj11*x11869))+((cj11*sj12*x11869)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x11871=IKsin(j14);
IkReal x11872=IKcos(j14);
IkReal x11873=(gconst10*r21);
IkReal x11874=((1.0)*gconst11*r20);
evalcond[0]=(r02*x11871);
evalcond[1]=((((-1.0)*sj10))+(((-1.0)*r02*x11872)));
evalcond[2]=((((-1.0)*x11871*x11874))+((x11871*x11873)));
evalcond[3]=(((gconst10*r11*x11871))+(((-1.0)*gconst11*r10*x11871)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x11872*x11874))+((x11872*x11873))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x11876=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x11876.valid){
continue;
}
IkReal x11875=x11876.value;
cj14array[0]=((((-1.0)*sj11*sj12*x11875))+((cj11*cj12*x11875)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x11877=IKsin(j14);
IkReal x11878=IKcos(j14);
IkReal x11879=((1.0)*sj10);
IkReal x11880=((1.0)*x11878);
IkReal x11881=(gconst10*x11877);
IkReal x11882=((1.0)*gconst11*x11877);
evalcond[0]=(r02*x11877);
evalcond[1]=((((-1.0)*x11879))+(((-1.0)*r02*x11880)));
evalcond[2]=(((r21*x11881))+(((-1.0)*r20*x11882)));
evalcond[3]=(((r11*x11881))+(((-1.0)*r10*x11882)));
evalcond[4]=(((gconst10*r11*x11878))+(((-1.0)*gconst11*r10*x11880))+(((-1.0)*cj11*sj12*x11879))+(((-1.0)*cj12*sj11*x11879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x11883=IKPowWithIntegerCheck(r02,-1);
if(!x11883.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x11883.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x11884=IKsin(j14);
IkReal x11885=IKcos(j14);
IkReal x11886=((1.0)*cj12);
IkReal x11887=(gconst10*r21);
IkReal x11888=(gconst10*r11);
IkReal x11889=((1.0)*gconst11*x11884);
IkReal x11890=((1.0)*gconst11*x11885);
evalcond[0]=(r02*x11884);
evalcond[1]=(((x11884*x11887))+(((-1.0)*r20*x11889)));
evalcond[2]=(((x11884*x11888))+(((-1.0)*r10*x11889)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r20*x11890))+(((-1.0)*cj11*x11886))+((x11885*x11887)));
evalcond[4]=((((-1.0)*r10*x11890))+(((-1.0)*cj11*sj10*sj12))+((x11885*x11888))+(((-1.0)*sj10*sj11*x11886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11891=((1.0)*gconst11);
CheckValue<IkReal> x11892 = IKatan2WithCheck(IkReal((((r12*sj10))+((cj10*r02)))),IkReal((((gconst10*r11*sj10))+(((-1.0)*cj10*r00*x11891))+((cj10*gconst10*r01))+(((-1.0)*r10*sj10*x11891)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11892.valid){
continue;
}
CheckValue<IkReal> x11893=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11893.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11892.value)+(((1.5707963267949)*(x11893.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11894=IKsin(j14);
IkReal x11895=IKcos(j14);
IkReal x11896=((1.0)*gconst11);
IkReal x11897=((1.0)*cj11);
IkReal x11898=(gconst10*r21);
IkReal x11899=((1.0)*sj10);
IkReal x11900=(gconst10*r11);
IkReal x11901=(cj12*sj11);
IkReal x11902=(gconst10*r01);
IkReal x11903=((1.0)*x11895);
evalcond[0]=(((x11894*x11898))+(((-1.0)*r20*x11894*x11896)));
evalcond[1]=(((x11894*x11900))+(((-1.0)*r12*x11903))+cj10+(((-1.0)*r10*x11894*x11896)));
evalcond[2]=(((sj11*sj12))+((x11895*x11898))+(((-1.0)*cj12*x11897))+(((-1.0)*r20*x11895*x11896)));
evalcond[3]=((((-1.0)*r02*x11903))+((x11894*x11902))+(((-1.0)*r00*x11894*x11896))+(((-1.0)*x11899)));
evalcond[4]=((((-1.0)*r00*x11895*x11896))+(((-1.0)*cj10*sj12*x11897))+((r02*x11894))+(((-1.0)*cj10*x11901))+((x11895*x11902)));
evalcond[5]=((((-1.0)*x11899*x11901))+(((-1.0)*r10*x11895*x11896))+(((-1.0)*sj10*sj12*x11897))+((x11895*x11900))+((r12*x11894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11904=(gconst10*r21);
IkReal x11905=(cj11*cj12);
IkReal x11906=(sj11*sj12);
IkReal x11907=(gconst11*r20);
CheckValue<IkReal> x11908 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11905))+((r22*x11906)))),IkReal(((((-1.0)*x11906*x11907))+((x11905*x11907))+((x11904*x11906))+(((-1.0)*x11904*x11905)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11908.valid){
continue;
}
CheckValue<IkReal> x11909=IKPowWithIntegerCheck(IKsign(((((2.0)*x11904*x11907))+(((-1.0)*(x11907*x11907)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x11904*x11904))))),-1);
if(!x11909.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11908.value)+(((1.5707963267949)*(x11909.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11910=IKsin(j14);
IkReal x11911=IKcos(j14);
IkReal x11912=((1.0)*gconst11);
IkReal x11913=((1.0)*cj11);
IkReal x11914=(gconst10*r21);
IkReal x11915=((1.0)*sj10);
IkReal x11916=(gconst10*r11);
IkReal x11917=(cj12*sj11);
IkReal x11918=(gconst10*r01);
IkReal x11919=((1.0)*x11911);
evalcond[0]=((((-1.0)*r22*x11919))+(((-1.0)*r20*x11910*x11912))+((x11910*x11914)));
evalcond[1]=((((-1.0)*r10*x11910*x11912))+cj10+(((-1.0)*r12*x11919))+((x11910*x11916)));
evalcond[2]=((((-1.0)*r00*x11910*x11912))+((x11910*x11918))+(((-1.0)*r02*x11919))+(((-1.0)*x11915)));
evalcond[3]=(((sj11*sj12))+((r22*x11910))+(((-1.0)*cj12*x11913))+(((-1.0)*r20*x11911*x11912))+((x11911*x11914)));
evalcond[4]=((((-1.0)*r00*x11911*x11912))+(((-1.0)*cj10*x11917))+(((-1.0)*cj10*sj12*x11913))+((r02*x11910))+((x11911*x11918)));
evalcond[5]=((((-1.0)*r10*x11911*x11912))+(((-1.0)*x11915*x11917))+(((-1.0)*sj10*sj12*x11913))+((x11911*x11916))+((r12*x11910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11920=((1.0)*gconst10);
CheckValue<IkReal> x11921=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11920))+(((-1.0)*gconst11*r21)))),-1);
if(!x11921.valid){
continue;
}
CheckValue<IkReal> x11922 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((gconst11*r10*sj10))+(((-1.0)*cj10*r01*x11920))+((cj10*gconst11*r00))+(((-1.0)*r11*sj10*x11920)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11922.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11921.value)))+(x11922.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11923=IKsin(j14);
IkReal x11924=IKcos(j14);
IkReal x11925=((1.0)*gconst11);
IkReal x11926=((1.0)*cj11);
IkReal x11927=(gconst10*r21);
IkReal x11928=((1.0)*sj10);
IkReal x11929=(gconst10*r11);
IkReal x11930=(cj12*sj11);
IkReal x11931=(gconst10*r01);
IkReal x11932=((1.0)*x11924);
evalcond[0]=((((-1.0)*r22*x11932))+(((-1.0)*r20*x11923*x11925))+((x11923*x11927)));
evalcond[1]=((((-1.0)*r10*x11923*x11925))+cj10+(((-1.0)*r12*x11932))+((x11923*x11929)));
evalcond[2]=((((-1.0)*x11928))+(((-1.0)*r02*x11932))+(((-1.0)*r00*x11923*x11925))+((x11923*x11931)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x11926))+((x11924*x11927))+(((-1.0)*r20*x11924*x11925))+((r22*x11923)));
evalcond[4]=(((r02*x11923))+(((-1.0)*cj10*x11930))+((x11924*x11931))+(((-1.0)*r00*x11924*x11925))+(((-1.0)*cj10*sj12*x11926)));
evalcond[5]=((((-1.0)*r10*x11924*x11925))+((x11924*x11929))+((r12*x11923))+(((-1.0)*x11928*x11930))+(((-1.0)*sj10*sj12*x11926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11933=((1.0)*gconst11);
CheckValue<IkReal> x11934 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x11933))+((cj10*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11934.valid){
continue;
}
CheckValue<IkReal> x11935=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x11933)))),-1);
if(!x11935.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11934.value)+(((1.5707963267949)*(x11935.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x11936=IKsin(j14);
IkReal x11937=IKcos(j14);
IkReal x11938=((1.0)*gconst11);
IkReal x11939=((1.0)*cj11);
IkReal x11940=(gconst10*r21);
IkReal x11941=((1.0)*sj10);
IkReal x11942=(gconst10*r11);
IkReal x11943=(cj12*sj11);
IkReal x11944=(gconst10*r01);
IkReal x11945=((1.0)*x11937);
evalcond[0]=(((x11936*x11940))+(((-1.0)*r22*x11945))+(((-1.0)*r20*x11936*x11938)));
evalcond[1]=(((x11936*x11942))+cj10+(((-1.0)*r10*x11936*x11938))+(((-1.0)*r12*x11945)));
evalcond[2]=((((-1.0)*x11941))+((x11936*x11944))+(((-1.0)*r00*x11936*x11938))+(((-1.0)*r02*x11945)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x11939))+(((-1.0)*r20*x11937*x11938))+((r22*x11936))+((x11937*x11940)));
evalcond[4]=(((r02*x11936))+(((-1.0)*cj10*x11943))+(((-1.0)*r00*x11937*x11938))+((x11937*x11944))+(((-1.0)*cj10*sj12*x11939)));
evalcond[5]=((((-1.0)*sj10*sj12*x11939))+(((-1.0)*r10*x11937*x11938))+((r12*x11936))+((x11937*x11942))+(((-1.0)*x11941*x11943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x11946=((-1.0)*r11);
CheckValue<IkReal> x11949 = IKatan2WithCheck(IkReal(x11946),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11949.valid){
continue;
}
IkReal x11947=((1.0)*(x11949.value));
IkReal x11948=x11446;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x11947)));
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11947)));
IkReal gconst10=(x11946*x11948);
IkReal gconst11=((1.0)*r10*x11948);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x11950=gconst10*gconst10;
IkReal x11951=gconst11*gconst11;
IkReal x11952=(cj13*gconst10);
IkReal x11953=(gconst11*r21);
IkReal x11954=((1.0)*r20);
IkReal x11955=(cj13*r01);
IkReal x11956=(r00*sj13);
IkReal x11957=(r01*sj13);
IkReal x11958=(r21*x11950);
CheckValue<IkReal> x11959 = IKatan2WithCheck(IkReal((((r00*r22*x11952))+((gconst11*r22*x11955)))),IkReal(((((-1.0)*x11951*x11954*x11955))+((r01*x11952*x11953))+((cj13*r00*x11958))+(((-1.0)*gconst11*r00*x11952*x11954)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11959.valid){
continue;
}
CheckValue<IkReal> x11960=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*gconst11*x11954*x11957))+(((-1.0)*gconst10*x11953*x11956))+((r20*x11951*x11956))+((x11957*x11958))+((r02*r22*sj13)))),-1);
if(!x11960.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11959.value)+(((1.5707963267949)*(x11960.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11961=IKsin(j14);
IkReal x11962=IKcos(j14);
IkReal x11963=(sj11*sj12);
IkReal x11964=(gconst11*r10);
IkReal x11965=((1.0)*cj11);
IkReal x11966=(cj13*r21);
IkReal x11967=((1.0)*sj13);
IkReal x11968=(gconst11*sj13);
IkReal x11969=(gconst10*r00);
IkReal x11970=(cj13*gconst11);
IkReal x11971=(cj12*sj11);
IkReal x11972=(gconst10*r20);
IkReal x11973=(gconst10*r10);
IkReal x11974=(cj12*x11965);
IkReal x11975=((1.0)*x11961);
IkReal x11976=(gconst10*x11962);
IkReal x11977=((1.0)*x11962);
IkReal x11978=(cj13*x11961);
IkReal x11979=(gconst10*x11961);
evalcond[0]=((((-1.0)*r22*x11977))+((r21*x11979))+(((-1.0)*gconst11*r20*x11975)));
evalcond[1]=((((-1.0)*r12*x11977))+((r11*x11979))+(((-1.0)*x11964*x11975)));
evalcond[2]=((-1.0)+((r01*x11979))+(((-1.0)*gconst11*r00*x11975))+(((-1.0)*r02*x11977)));
evalcond[3]=(((r01*x11968))+(((-1.0)*r00*x11970*x11977))+((sj13*x11969))+((r02*x11978))+((cj13*r01*x11976)));
evalcond[4]=(((r00*x11962*x11968))+(((-1.0)*r01*x11967*x11976))+((cj13*x11969))+((r01*x11970))+(((-1.0)*r02*x11961*x11967)));
evalcond[5]=(x11971+(((-1.0)*r20*x11970*x11977))+((sj13*x11972))+((x11966*x11976))+((r21*x11968))+((r22*x11978))+((cj11*sj12)));
evalcond[6]=(x11963+((sj13*x11973))+((r11*x11968))+((r12*x11978))+(((-1.0)*x11974))+(((-1.0)*cj13*x11964*x11977))+((cj13*r11*x11976)));
evalcond[7]=(x11963+((r20*x11962*x11968))+((cj13*x11972))+(((-1.0)*r21*x11967*x11976))+(((-1.0)*x11974))+(((-1.0)*r22*x11961*x11967))+((gconst11*x11966)));
evalcond[8]=((((-1.0)*x11971))+((cj13*x11973))+((r11*x11970))+(((-1.0)*sj12*x11965))+((sj13*x11962*x11964))+(((-1.0)*r11*x11967*x11976))+(((-1.0)*r12*x11961*x11967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x11980 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11980.valid){
continue;
}
CheckValue<IkReal> x11981=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11981.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x11980.value)+(((1.5707963267949)*(x11981.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x11982=IKsin(j14);
IkReal x11983=IKcos(j14);
IkReal x11984=(sj11*sj12);
IkReal x11985=(gconst11*r10);
IkReal x11986=((1.0)*cj11);
IkReal x11987=(cj13*r21);
IkReal x11988=((1.0)*sj13);
IkReal x11989=(gconst11*sj13);
IkReal x11990=(gconst10*r00);
IkReal x11991=(cj13*gconst11);
IkReal x11992=(cj12*sj11);
IkReal x11993=(gconst10*r20);
IkReal x11994=(gconst10*r10);
IkReal x11995=(cj12*x11986);
IkReal x11996=((1.0)*x11982);
IkReal x11997=(gconst10*x11983);
IkReal x11998=((1.0)*x11983);
IkReal x11999=(cj13*x11982);
IkReal x12000=(gconst10*x11982);
evalcond[0]=((((-1.0)*gconst11*r20*x11996))+((r21*x12000))+(((-1.0)*r22*x11998)));
evalcond[1]=((((-1.0)*r12*x11998))+(((-1.0)*x11985*x11996))+((r11*x12000)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x11998))+(((-1.0)*gconst11*r00*x11996))+((r01*x12000)));
evalcond[3]=((((-1.0)*r00*x11991*x11998))+((sj13*x11990))+((r02*x11999))+((r01*x11989))+((cj13*r01*x11997)));
evalcond[4]=(((r00*x11983*x11989))+(((-1.0)*r01*x11988*x11997))+((cj13*x11990))+((r01*x11991))+(((-1.0)*r02*x11982*x11988)));
evalcond[5]=(x11992+((r21*x11989))+((r22*x11999))+(((-1.0)*r20*x11991*x11998))+((x11987*x11997))+((sj13*x11993))+((cj11*sj12)));
evalcond[6]=(x11984+((cj13*r11*x11997))+((r11*x11989))+((sj13*x11994))+((r12*x11999))+(((-1.0)*x11995))+(((-1.0)*cj13*x11985*x11998)));
evalcond[7]=((((-1.0)*r22*x11982*x11988))+x11984+((gconst11*x11987))+(((-1.0)*r21*x11988*x11997))+((cj13*x11993))+((r20*x11983*x11989))+(((-1.0)*x11995)));
evalcond[8]=((((-1.0)*sj12*x11986))+(((-1.0)*r11*x11988*x11997))+((cj13*x11994))+(((-1.0)*x11992))+((sj13*x11983*x11985))+((r11*x11991))+(((-1.0)*r12*x11982*x11988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x12001=((-1.0)*r11);
CheckValue<IkReal> x12004 = IKatan2WithCheck(IkReal(x12001),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12004.valid){
continue;
}
IkReal x12002=((1.0)*(x12004.value));
IkReal x12003=x11446;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x12002)));
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12002)));
IkReal gconst10=(x12001*x12003);
IkReal gconst11=((1.0)*r10*x12003);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12005=gconst10*gconst10;
IkReal x12006=gconst11*gconst11;
IkReal x12007=(cj13*gconst10);
IkReal x12008=(gconst11*r21);
IkReal x12009=((1.0)*r20);
IkReal x12010=(cj13*r01);
IkReal x12011=(r00*sj13);
IkReal x12012=(r01*sj13);
IkReal x12013=(r21*x12005);
CheckValue<IkReal> x12014=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*x12008*x12011))+((r20*x12006*x12011))+(((-1.0)*gconst10*gconst11*x12009*x12012))+((x12012*x12013))+((r02*r22*sj13)))),-1);
if(!x12014.valid){
continue;
}
CheckValue<IkReal> x12015 = IKatan2WithCheck(IkReal((((gconst11*r22*x12010))+((r00*r22*x12007)))),IkReal((((r01*x12007*x12008))+((cj13*r00*x12013))+(((-1.0)*gconst11*r00*x12007*x12009))+(((-1.0)*x12006*x12009*x12010)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12015.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12014.value)))+(x12015.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12016=IKsin(j14);
IkReal x12017=IKcos(j14);
IkReal x12018=(cj12*sj11);
IkReal x12019=(cj11*sj12);
IkReal x12020=(gconst11*r10);
IkReal x12021=(cj11*cj12);
IkReal x12022=(cj13*r21);
IkReal x12023=((1.0)*sj13);
IkReal x12024=(gconst11*sj13);
IkReal x12025=(gconst10*r00);
IkReal x12026=(cj13*gconst11);
IkReal x12027=(sj11*sj12);
IkReal x12028=(gconst10*r20);
IkReal x12029=(gconst10*r10);
IkReal x12030=((1.0)*x12016);
IkReal x12031=(gconst10*x12017);
IkReal x12032=((1.0)*x12017);
IkReal x12033=(cj13*x12016);
IkReal x12034=(gconst10*x12016);
IkReal x12035=(x12019+x12018);
evalcond[0]=(((r21*x12034))+(((-1.0)*gconst11*r20*x12030))+(((-1.0)*r22*x12032)));
evalcond[1]=((((-1.0)*x12020*x12030))+(((-1.0)*r12*x12032))+((r11*x12034)));
evalcond[2]=((1.0)+((r01*x12034))+(((-1.0)*r02*x12032))+(((-1.0)*gconst11*r00*x12030)));
evalcond[3]=(((sj13*x12025))+((r01*x12024))+((cj13*r01*x12031))+(((-1.0)*r00*x12026*x12032))+((r02*x12033)));
evalcond[4]=(((cj13*x12025))+((r00*x12017*x12024))+((r01*x12026))+(((-1.0)*r01*x12023*x12031))+(((-1.0)*r02*x12016*x12023)));
evalcond[5]=(((sj13*x12028))+((x12022*x12031))+x12035+((r22*x12033))+(((-1.0)*r20*x12026*x12032))+((r21*x12024)));
evalcond[6]=(((cj13*r11*x12031))+(((-1.0)*x12027))+((sj13*x12029))+x12021+(((-1.0)*cj13*x12020*x12032))+((r12*x12033))+((r11*x12024)));
evalcond[7]=(((cj13*x12029))+x12035+(((-1.0)*r11*x12023*x12031))+(((-1.0)*r12*x12016*x12023))+((r11*x12026))+((sj13*x12017*x12020)));
evalcond[8]=((((-1.0)*r22*x12016*x12023))+((cj13*x12028))+(((-1.0)*x12021))+((r20*x12017*x12024))+x12027+(((-1.0)*r21*x12023*x12031))+((gconst11*x12022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12036=((1.0)*gconst11);
CheckValue<IkReal> x12037 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12036)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12037.valid){
continue;
}
CheckValue<IkReal> x12038=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12036)))),-1);
if(!x12038.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12037.value)+(((1.5707963267949)*(x12038.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12039=IKsin(j14);
IkReal x12040=IKcos(j14);
IkReal x12041=(cj12*sj11);
IkReal x12042=(cj11*sj12);
IkReal x12043=(gconst11*r10);
IkReal x12044=(cj11*cj12);
IkReal x12045=(cj13*r21);
IkReal x12046=((1.0)*sj13);
IkReal x12047=(gconst11*sj13);
IkReal x12048=(gconst10*r00);
IkReal x12049=(cj13*gconst11);
IkReal x12050=(sj11*sj12);
IkReal x12051=(gconst10*r20);
IkReal x12052=(gconst10*r10);
IkReal x12053=((1.0)*x12039);
IkReal x12054=(gconst10*x12040);
IkReal x12055=((1.0)*x12040);
IkReal x12056=(cj13*x12039);
IkReal x12057=(gconst10*x12039);
IkReal x12058=(x12041+x12042);
evalcond[0]=((((-1.0)*gconst11*r20*x12053))+(((-1.0)*r22*x12055))+((r21*x12057)));
evalcond[1]=((((-1.0)*x12043*x12053))+(((-1.0)*r12*x12055))+((r11*x12057)));
evalcond[2]=((1.0)+((r01*x12057))+(((-1.0)*r02*x12055))+(((-1.0)*gconst11*r00*x12053)));
evalcond[3]=((((-1.0)*r00*x12049*x12055))+((cj13*r01*x12054))+((sj13*x12048))+((r01*x12047))+((r02*x12056)));
evalcond[4]=((((-1.0)*r01*x12046*x12054))+(((-1.0)*r02*x12039*x12046))+((r00*x12040*x12047))+((cj13*x12048))+((r01*x12049)));
evalcond[5]=(((sj13*x12051))+((r22*x12056))+x12058+((r21*x12047))+((x12045*x12054))+(((-1.0)*r20*x12049*x12055)));
evalcond[6]=(((sj13*x12052))+(((-1.0)*x12050))+(((-1.0)*cj13*x12043*x12055))+x12044+((r11*x12047))+((r12*x12056))+((cj13*r11*x12054)));
evalcond[7]=((((-1.0)*r11*x12046*x12054))+((cj13*x12052))+x12058+((r11*x12049))+(((-1.0)*r12*x12039*x12046))+((sj13*x12040*x12043)));
evalcond[8]=(((cj13*x12051))+(((-1.0)*x12044))+x12050+(((-1.0)*r21*x12046*x12054))+(((-1.0)*r22*x12039*x12046))+((r20*x12040*x12047))+((gconst11*x12045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x12059=((-1.0)*r11);
IkReal x12060=((-1.0)*r10);
CheckValue<IkReal> x12062 = IKatan2WithCheck(IkReal(x12059),IkReal(x12060),IKFAST_ATAN2_MAGTHRESH);
if(!x12062.valid){
continue;
}
IkReal x12061=((1.0)*(x12062.value));
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x12061)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12060);
rxp1_1=(px*r21);
rxp1_2=(px*x12059);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12061)));
IkReal gconst10=x12059;
IkReal gconst11=((1.0)*r10);
j14eval[0]=-1.0;
j14eval[1]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x12063=((-1.0)*r11);
IkReal x12064=((-1.0)*r10);
CheckValue<IkReal> x12066 = IKatan2WithCheck(IkReal(x12063),IkReal(x12064),IKFAST_ATAN2_MAGTHRESH);
if(!x12066.valid){
continue;
}
IkReal x12065=((1.0)*(x12066.value));
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x12065)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12064);
rxp1_1=(px*r21);
rxp1_2=(px*x12063);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12065)));
IkReal gconst10=x12063;
IkReal gconst11=((1.0)*r10);
IkReal x12067=((1.0)*cj13);
j14eval[0]=-1.0;
j14eval[1]=((((-1.0)*r10*r20*x12067))+(((-1.0)*r11*r21*x12067)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x12068=((-1.0)*r11);
IkReal x12069=((-1.0)*r10);
CheckValue<IkReal> x12071 = IKatan2WithCheck(IkReal(x12068),IkReal(x12069),IKFAST_ATAN2_MAGTHRESH);
if(!x12071.valid){
continue;
}
IkReal x12070=((1.0)*(x12071.value));
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x12070)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12069);
rxp1_1=(px*r21);
rxp1_2=(px*x12068);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12070)));
IkReal gconst10=x12068;
IkReal gconst11=((1.0)*r10);
j14eval[0]=cj13;
j14eval[1]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j14]

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12073=IKPowWithIntegerCheck(r02,-1);
if(!x12073.valid){
continue;
}
IkReal x12072=x12073.value;
CheckValue<IkReal> x12074=IKPowWithIntegerCheck(cj13,-1);
if(!x12074.valid){
continue;
}
if( IKabs((x12072*(x12074.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj10*x12072)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12072*(x12074.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12))))))+IKsqr(((-1.0)*sj10*x12072))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((x12072*(x12074.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12))))), ((-1.0)*sj10*x12072));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12075=IKsin(j14);
IkReal x12076=IKcos(j14);
IkReal x12077=((1.0)*cj11);
IkReal x12078=(cj10*sj12);
IkReal x12079=(gconst10*r21);
IkReal x12080=((1.0)*sj10);
IkReal x12081=(gconst11*r10);
IkReal x12082=(sj11*sj12);
IkReal x12083=(gconst11*sj13);
IkReal x12084=(cj12*sj11);
IkReal x12085=(gconst10*r11);
IkReal x12086=(gconst11*r20);
IkReal x12087=(cj13*gconst11);
IkReal x12088=(gconst10*r20);
IkReal x12089=(gconst10*r10);
IkReal x12090=((1.0)*x12076);
IkReal x12091=(cj13*x12076);
IkReal x12092=((1.0)*x12075);
evalcond[0]=((((-1.0)*x12080))+(((-1.0)*r02*x12090)));
evalcond[1]=((((-1.0)*x12086*x12092))+((x12075*x12079)));
evalcond[2]=(((x12075*x12085))+cj10+(((-1.0)*x12081*x12092)));
evalcond[3]=(((sj11*x12078))+(((-1.0)*cj10*cj12*x12077))+((cj13*r02*x12075)));
evalcond[4]=((((-1.0)*cj10*x12084))+(((-1.0)*r02*sj13*x12092))+(((-1.0)*x12077*x12078)));
evalcond[5]=((((-1.0)*cj13*x12086*x12090))+((sj13*x12088))+x12084+((r21*x12083))+((x12079*x12091))+((cj11*sj12)));
evalcond[6]=((((-1.0)*sj13*x12079*x12090))+(((-1.0)*cj12*x12077))+((cj13*x12088))+((r20*x12076*x12083))+x12082+((r21*x12087)));
evalcond[7]=(((x12085*x12091))+((sj10*x12082))+((sj13*x12089))+(((-1.0)*cj13*x12081*x12090))+((r11*x12083))+(((-1.0)*cj12*sj10*x12077)));
evalcond[8]=((((-1.0)*sj13*x12085*x12090))+((sj13*x12076*x12081))+((cj13*x12089))+(((-1.0)*x12080*x12084))+((r11*x12087))+(((-1.0)*sj10*sj12*x12077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12093=((1.0)*r20);
IkReal x12094=((1.0)*gconst11);
CheckValue<IkReal> x12095=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12094))),-1);
if(!x12095.valid){
continue;
}
CheckValue<IkReal> x12096=IKPowWithIntegerCheck((((cj13*gconst10*r21))+(((-1.0)*cj13*gconst11*x12093))),-1);
if(!x12096.valid){
continue;
}
if( IKabs(((-1.0)*cj10*(x12095.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12096.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*r21*sj13*x12094))+(((-1.0)*cj12*sj11))+(((-1.0)*gconst10*sj13*x12093)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj10*(x12095.value)))+IKsqr(((x12096.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*r21*sj13*x12094))+(((-1.0)*cj12*sj11))+(((-1.0)*gconst10*sj13*x12093))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*cj10*(x12095.value)), ((x12096.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*r21*sj13*x12094))+(((-1.0)*cj12*sj11))+(((-1.0)*gconst10*sj13*x12093))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12097=IKsin(j14);
IkReal x12098=IKcos(j14);
IkReal x12099=((1.0)*cj11);
IkReal x12100=(cj10*sj12);
IkReal x12101=(gconst10*r21);
IkReal x12102=((1.0)*sj10);
IkReal x12103=(gconst11*r10);
IkReal x12104=(sj11*sj12);
IkReal x12105=(gconst11*sj13);
IkReal x12106=(cj12*sj11);
IkReal x12107=(gconst10*r11);
IkReal x12108=(gconst11*r20);
IkReal x12109=(cj13*gconst11);
IkReal x12110=(gconst10*r20);
IkReal x12111=(gconst10*r10);
IkReal x12112=((1.0)*x12098);
IkReal x12113=(cj13*x12098);
IkReal x12114=((1.0)*x12097);
evalcond[0]=((((-1.0)*x12102))+(((-1.0)*r02*x12112)));
evalcond[1]=((((-1.0)*x12108*x12114))+((x12097*x12101)));
evalcond[2]=((((-1.0)*x12103*x12114))+cj10+((x12097*x12107)));
evalcond[3]=(((sj11*x12100))+(((-1.0)*cj10*cj12*x12099))+((cj13*r02*x12097)));
evalcond[4]=((((-1.0)*cj10*x12106))+(((-1.0)*x12099*x12100))+(((-1.0)*r02*sj13*x12114)));
evalcond[5]=((((-1.0)*cj13*x12108*x12112))+((x12101*x12113))+x12106+((sj13*x12110))+((cj11*sj12))+((r21*x12105)));
evalcond[6]=(((r20*x12098*x12105))+(((-1.0)*cj12*x12099))+x12104+(((-1.0)*sj13*x12101*x12112))+((cj13*x12110))+((r21*x12109)));
evalcond[7]=(((x12107*x12113))+(((-1.0)*cj13*x12103*x12112))+((sj10*x12104))+((sj13*x12111))+((r11*x12105))+(((-1.0)*cj12*sj10*x12099)));
evalcond[8]=((((-1.0)*sj13*x12107*x12112))+(((-1.0)*x12102*x12106))+(((-1.0)*sj10*sj12*x12099))+((sj13*x12098*x12103))+((cj13*x12111))+((r11*x12109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12115=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12115.valid){
continue;
}
CheckValue<IkReal> x12116=IKPowWithIntegerCheck(r02,-1);
if(!x12116.valid){
continue;
}
if( IKabs(((-1.0)*cj10*(x12115.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj10*(x12116.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj10*(x12115.value)))+IKsqr(((-1.0)*sj10*(x12116.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*cj10*(x12115.value)), ((-1.0)*sj10*(x12116.value)));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12117=IKsin(j14);
IkReal x12118=IKcos(j14);
IkReal x12119=((1.0)*cj11);
IkReal x12120=(cj10*sj12);
IkReal x12121=(gconst10*r21);
IkReal x12122=((1.0)*sj10);
IkReal x12123=(gconst11*r10);
IkReal x12124=(sj11*sj12);
IkReal x12125=(gconst11*sj13);
IkReal x12126=(cj12*sj11);
IkReal x12127=(gconst10*r11);
IkReal x12128=(gconst11*r20);
IkReal x12129=(cj13*gconst11);
IkReal x12130=(gconst10*r20);
IkReal x12131=(gconst10*r10);
IkReal x12132=((1.0)*x12118);
IkReal x12133=(cj13*x12118);
IkReal x12134=((1.0)*x12117);
evalcond[0]=((((-1.0)*x12122))+(((-1.0)*r02*x12132)));
evalcond[1]=((((-1.0)*x12128*x12134))+((x12117*x12121)));
evalcond[2]=(cj10+((x12117*x12127))+(((-1.0)*x12123*x12134)));
evalcond[3]=(((sj11*x12120))+(((-1.0)*cj10*cj12*x12119))+((cj13*r02*x12117)));
evalcond[4]=((((-1.0)*cj10*x12126))+(((-1.0)*x12119*x12120))+(((-1.0)*r02*sj13*x12134)));
evalcond[5]=(((sj13*x12130))+((r21*x12125))+x12126+(((-1.0)*cj13*x12128*x12132))+((cj11*sj12))+((x12121*x12133)));
evalcond[6]=(((r21*x12129))+x12124+(((-1.0)*cj12*x12119))+(((-1.0)*sj13*x12121*x12132))+((cj13*x12130))+((r20*x12118*x12125)));
evalcond[7]=(((sj13*x12131))+(((-1.0)*cj12*sj10*x12119))+((sj10*x12124))+(((-1.0)*cj13*x12123*x12132))+((x12127*x12133))+((r11*x12125)));
evalcond[8]=(((sj13*x12118*x12123))+(((-1.0)*sj13*x12127*x12132))+(((-1.0)*sj10*sj12*x12119))+((cj13*x12131))+(((-1.0)*x12122*x12126))+((r11*x12129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x12135=((-1.0)*r11);
CheckValue<IkReal> x12138 = IKatan2WithCheck(IkReal(x12135),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12138.valid){
continue;
}
IkReal x12136=((1.0)*(x12138.value));
IkReal x12137=x11446;
sj15=gconst10;
cj15=gconst11;
j15=((3.14159265)+(((-1.0)*x12136)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12136)));
IkReal gconst10=(x12135*x12137);
IkReal gconst11=((1.0)*r10*x12137);
IkReal x12139=r12*r12;
IkReal x12140=(cj10*r02);
IkReal x12141=x11446;
IkReal x12142=(sj10*x12141);
j14eval[0]=((IKabs(((((-1.0)*x12140))+(((-1.0)*r12*sj10)))))+(IKabs(((((-1.0)*x12142))+((r12*x12140*x12141))+((x12139*x12142))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12143=((1.0)*gconst11);
IkReal x12144=(r20*sj13);
IkReal x12145=(cj13*r12);
IkReal x12146=(cj11*cj12);
IkReal x12147=(gconst10*r21*sj13);
IkReal x12148=((1.0)*gconst10*r20);
IkReal x12149=((1.0)*sj11*sj12);
CheckValue<IkReal> x12150=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11*x12147))+(((-1.0)*gconst11*r10*x12143*x12144))+((gconst11*r10*x12147))+((gconst10*gconst11*r11*x12144))),-1);
if(!x12150.valid){
continue;
}
CheckValue<IkReal> x12151=IKPowWithIntegerCheck(((((-1.0)*x12147))+((gconst11*x12144))),-1);
if(!x12151.valid){
continue;
}
if( IKabs(((x12150.value)*((((cj10*x12147))+(((-1.0)*x12145*x12148))+(((-1.0)*r12*x12149))+((r12*x12146))+(((-1.0)*cj10*x12143*x12144))+(((-1.0)*r21*x12143*x12145)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12151.value)*(((((-1.0)*cj13*r21*x12143))+x12146+(((-1.0)*cj13*x12148))+(((-1.0)*x12149)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12150.value)*((((cj10*x12147))+(((-1.0)*x12145*x12148))+(((-1.0)*r12*x12149))+((r12*x12146))+(((-1.0)*cj10*x12143*x12144))+(((-1.0)*r21*x12143*x12145))))))+IKsqr(((x12151.value)*(((((-1.0)*cj13*r21*x12143))+x12146+(((-1.0)*cj13*x12148))+(((-1.0)*x12149))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x12150.value)*((((cj10*x12147))+(((-1.0)*x12145*x12148))+(((-1.0)*r12*x12149))+((r12*x12146))+(((-1.0)*cj10*x12143*x12144))+(((-1.0)*r21*x12143*x12145))))), ((x12151.value)*(((((-1.0)*cj13*r21*x12143))+x12146+(((-1.0)*cj13*x12148))+(((-1.0)*x12149))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12152=IKsin(j14);
IkReal x12153=IKcos(j14);
IkReal x12154=(gconst11*r10);
IkReal x12155=((1.0)*cj11);
IkReal x12156=(cj10*sj12);
IkReal x12157=(cj13*r21);
IkReal x12158=((1.0)*sj13);
IkReal x12159=((1.0)*sj10);
IkReal x12160=(gconst11*sj13);
IkReal x12161=(gconst10*r00);
IkReal x12162=(sj11*sj12);
IkReal x12163=(cj12*sj11);
IkReal x12164=(cj13*r11);
IkReal x12165=(gconst10*r20);
IkReal x12166=(cj13*r01);
IkReal x12167=(gconst10*r10);
IkReal x12168=((1.0)*x12152);
IkReal x12169=(gconst10*x12153);
IkReal x12170=(r00*x12153);
IkReal x12171=(gconst10*x12152);
IkReal x12172=(r20*x12153);
IkReal x12173=(cj13*x12152);
IkReal x12174=((1.0)*x12153);
IkReal x12175=((1.0)*cj13*gconst11);
evalcond[0]=(((r21*x12171))+(((-1.0)*gconst11*r20*x12168)));
evalcond[1]=(cj10+(((-1.0)*x12154*x12168))+((r11*x12171))+(((-1.0)*r12*x12174)));
evalcond[2]=((((-1.0)*gconst11*r00*x12168))+((r01*x12171))+(((-1.0)*x12159))+(((-1.0)*r02*x12174)));
evalcond[3]=(((r21*x12160))+((sj13*x12165))+x12163+((x12157*x12169))+((cj11*sj12))+(((-1.0)*x12172*x12175)));
evalcond[4]=(((cj13*x12165))+(((-1.0)*r21*x12158*x12169))+x12162+((x12160*x12172))+(((-1.0)*cj12*x12155))+((gconst11*x12157)));
evalcond[5]=(((x12166*x12169))+(((-1.0)*x12170*x12175))+((sj13*x12161))+((r01*x12160))+(((-1.0)*cj10*cj12*x12155))+((sj11*x12156))+((r02*x12173)));
evalcond[6]=((((-1.0)*cj12*sj10*x12155))+((sj13*x12167))+((x12164*x12169))+((sj10*x12162))+((r11*x12160))+((r12*x12173))+(((-1.0)*cj13*x12154*x12174)));
evalcond[7]=(((cj13*x12161))+(((-1.0)*cj10*x12163))+((gconst11*x12166))+((x12160*x12170))+(((-1.0)*r02*x12152*x12158))+(((-1.0)*x12155*x12156))+(((-1.0)*r01*x12158*x12169)));
evalcond[8]=(((cj13*x12167))+(((-1.0)*r12*x12152*x12158))+((sj13*x12153*x12154))+((gconst11*x12164))+(((-1.0)*sj10*sj12*x12155))+(((-1.0)*x12159*x12163))+(((-1.0)*r11*x12158*x12169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12176=((1.0)*gconst10);
CheckValue<IkReal> x12177 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((gconst11*r10*sj10))+((cj10*gconst11*r00))+(((-1.0)*r11*sj10*x12176))+(((-1.0)*cj10*r01*x12176)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12177.valid){
continue;
}
CheckValue<IkReal> x12178=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12176))+(((-1.0)*gconst11*r21)))),-1);
if(!x12178.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12177.value)+(((1.5707963267949)*(x12178.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12179=IKsin(j14);
IkReal x12180=IKcos(j14);
IkReal x12181=(gconst11*r10);
IkReal x12182=((1.0)*cj11);
IkReal x12183=(cj10*sj12);
IkReal x12184=(cj13*r21);
IkReal x12185=((1.0)*sj13);
IkReal x12186=((1.0)*sj10);
IkReal x12187=(gconst11*sj13);
IkReal x12188=(gconst10*r00);
IkReal x12189=(sj11*sj12);
IkReal x12190=(cj12*sj11);
IkReal x12191=(cj13*r11);
IkReal x12192=(gconst10*r20);
IkReal x12193=(cj13*r01);
IkReal x12194=(gconst10*r10);
IkReal x12195=((1.0)*x12179);
IkReal x12196=(gconst10*x12180);
IkReal x12197=(r00*x12180);
IkReal x12198=(gconst10*x12179);
IkReal x12199=(r20*x12180);
IkReal x12200=(cj13*x12179);
IkReal x12201=((1.0)*x12180);
IkReal x12202=((1.0)*cj13*gconst11);
evalcond[0]=(((r21*x12198))+(((-1.0)*gconst11*r20*x12195)));
evalcond[1]=(((r11*x12198))+(((-1.0)*r12*x12201))+cj10+(((-1.0)*x12181*x12195)));
evalcond[2]=((((-1.0)*r02*x12201))+(((-1.0)*x12186))+(((-1.0)*gconst11*r00*x12195))+((r01*x12198)));
evalcond[3]=(((sj13*x12192))+((r21*x12187))+x12190+((x12184*x12196))+(((-1.0)*x12199*x12202))+((cj11*sj12)));
evalcond[4]=((((-1.0)*cj12*x12182))+((x12187*x12199))+((cj13*x12192))+x12189+(((-1.0)*r21*x12185*x12196))+((gconst11*x12184)));
evalcond[5]=(((r02*x12200))+(((-1.0)*x12197*x12202))+(((-1.0)*cj10*cj12*x12182))+((x12193*x12196))+((sj11*x12183))+((r01*x12187))+((sj13*x12188)));
evalcond[6]=(((sj13*x12194))+((x12191*x12196))+((r12*x12200))+((r11*x12187))+(((-1.0)*cj12*sj10*x12182))+(((-1.0)*cj13*x12181*x12201))+((sj10*x12189)));
evalcond[7]=(((gconst11*x12193))+((x12187*x12197))+(((-1.0)*x12182*x12183))+((cj13*x12188))+(((-1.0)*r01*x12185*x12196))+(((-1.0)*r02*x12179*x12185))+(((-1.0)*cj10*x12190)));
evalcond[8]=(((gconst11*x12191))+((sj13*x12180*x12181))+((cj13*x12194))+(((-1.0)*r11*x12185*x12196))+(((-1.0)*x12186*x12190))+(((-1.0)*r12*x12179*x12185))+(((-1.0)*sj10*sj12*x12182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12203=gconst11*gconst11;
IkReal x12204=r20*r20;
IkReal x12205=gconst10*gconst10;
IkReal x12206=r21*r21;
IkReal x12207=((1.0)*cj13);
IkReal x12208=(r22*sj13);
IkReal x12209=(gconst10*r20);
IkReal x12210=(gconst11*r21);
IkReal x12211=(gconst10*r21);
IkReal x12212=(cj12*sj11);
IkReal x12213=(cj11*sj12);
IkReal x12214=(r20*r21*sj13);
IkReal x12215=(gconst10*gconst11*sj13);
IkReal x12216=((1.0)*gconst11*r20);
CheckValue<IkReal> x12217 = IKatan2WithCheck(IkReal((((r22*x12213))+((r22*x12212))+((x12208*x12210))+((x12208*x12209)))),IkReal((((x12211*x12212))+((x12211*x12213))+(((-1.0)*x12203*x12214))+(((-1.0)*x12212*x12216))+((x12205*x12214))+(((-1.0)*x12204*x12215))+(((-1.0)*x12213*x12216))+((x12206*x12215)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12217.valid){
continue;
}
CheckValue<IkReal> x12218=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12207*(r22*r22)))+(((-1.0)*x12203*x12204*x12207))+(((-1.0)*x12205*x12206*x12207))+(((2.0)*cj13*x12209*x12210)))),-1);
if(!x12218.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12217.value)+(((1.5707963267949)*(x12218.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12219=IKsin(j14);
IkReal x12220=IKcos(j14);
IkReal x12221=(gconst11*r10);
IkReal x12222=((1.0)*cj11);
IkReal x12223=(cj10*sj12);
IkReal x12224=(cj13*r21);
IkReal x12225=((1.0)*sj13);
IkReal x12226=((1.0)*sj10);
IkReal x12227=(gconst11*sj13);
IkReal x12228=(gconst10*r00);
IkReal x12229=(sj11*sj12);
IkReal x12230=(cj12*sj11);
IkReal x12231=(cj13*r11);
IkReal x12232=(gconst10*r20);
IkReal x12233=(cj13*r01);
IkReal x12234=(gconst10*r10);
IkReal x12235=((1.0)*x12219);
IkReal x12236=(gconst10*x12220);
IkReal x12237=(r00*x12220);
IkReal x12238=(cj13*x12219);
IkReal x12239=(gconst10*x12219);
IkReal x12240=(r20*x12220);
IkReal x12241=((1.0)*x12220);
IkReal x12242=((1.0)*cj13*gconst11);
evalcond[0]=((((-1.0)*gconst11*r20*x12235))+(((-1.0)*r22*x12241))+((r21*x12239)));
evalcond[1]=((((-1.0)*r12*x12241))+(((-1.0)*x12221*x12235))+cj10+((r11*x12239)));
evalcond[2]=((((-1.0)*x12226))+((r01*x12239))+(((-1.0)*gconst11*r00*x12235))+(((-1.0)*r02*x12241)));
evalcond[3]=(((x12224*x12236))+((sj13*x12232))+x12230+((r21*x12227))+((r22*x12238))+((cj11*sj12))+(((-1.0)*x12240*x12242)));
evalcond[4]=(((cj13*x12232))+(((-1.0)*cj12*x12222))+x12229+((x12227*x12240))+(((-1.0)*r21*x12225*x12236))+((gconst11*x12224))+(((-1.0)*r22*x12219*x12225)));
evalcond[5]=(((x12233*x12236))+((sj11*x12223))+((r01*x12227))+((r02*x12238))+(((-1.0)*cj10*cj12*x12222))+((sj13*x12228))+(((-1.0)*x12237*x12242)));
evalcond[6]=((((-1.0)*cj13*x12221*x12241))+((r11*x12227))+((x12231*x12236))+((sj13*x12234))+((r12*x12238))+((sj10*x12229))+(((-1.0)*cj12*sj10*x12222)));
evalcond[7]=((((-1.0)*r01*x12225*x12236))+(((-1.0)*r02*x12219*x12225))+((gconst11*x12233))+((x12227*x12237))+(((-1.0)*cj10*x12230))+((cj13*x12228))+(((-1.0)*x12222*x12223)));
evalcond[8]=(((cj13*x12234))+(((-1.0)*r11*x12225*x12236))+((gconst11*x12231))+(((-1.0)*sj10*sj12*x12222))+((sj13*x12220*x12221))+(((-1.0)*r12*x12219*x12225))+(((-1.0)*x12226*x12230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12243=((1.0)*gconst10);
CheckValue<IkReal> x12244 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x12243))+(((-1.0)*r11*sj10*x12243))+((gconst11*r10*sj10))+((cj10*gconst11*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12244.valid){
continue;
}
CheckValue<IkReal> x12245=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12243))+(((-1.0)*gconst11*r21)))),-1);
if(!x12245.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12244.value)+(((1.5707963267949)*(x12245.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12246=IKsin(j14);
IkReal x12247=IKcos(j14);
IkReal x12248=(gconst11*r10);
IkReal x12249=((1.0)*cj11);
IkReal x12250=(cj10*sj12);
IkReal x12251=(cj13*r21);
IkReal x12252=((1.0)*sj13);
IkReal x12253=((1.0)*sj10);
IkReal x12254=(gconst11*sj13);
IkReal x12255=(gconst10*r00);
IkReal x12256=(sj11*sj12);
IkReal x12257=(cj12*sj11);
IkReal x12258=(cj13*r11);
IkReal x12259=(gconst10*r20);
IkReal x12260=(cj13*r01);
IkReal x12261=(gconst10*r10);
IkReal x12262=((1.0)*x12246);
IkReal x12263=(gconst10*x12247);
IkReal x12264=(r00*x12247);
IkReal x12265=(cj13*x12246);
IkReal x12266=(gconst10*x12246);
IkReal x12267=(r20*x12247);
IkReal x12268=((1.0)*x12247);
IkReal x12269=((1.0)*cj13*gconst11);
evalcond[0]=((((-1.0)*gconst11*r20*x12262))+((r21*x12266))+(((-1.0)*r22*x12268)));
evalcond[1]=((((-1.0)*r12*x12268))+(((-1.0)*x12248*x12262))+((r11*x12266))+cj10);
evalcond[2]=((((-1.0)*gconst11*r00*x12262))+((r01*x12266))+(((-1.0)*r02*x12268))+(((-1.0)*x12253)));
evalcond[3]=((((-1.0)*x12267*x12269))+x12257+((x12251*x12263))+((sj13*x12259))+((r21*x12254))+((cj11*sj12))+((r22*x12265)));
evalcond[4]=((((-1.0)*cj12*x12249))+((cj13*x12259))+x12256+((gconst11*x12251))+((x12254*x12267))+(((-1.0)*r22*x12246*x12252))+(((-1.0)*r21*x12252*x12263)));
evalcond[5]=((((-1.0)*x12264*x12269))+((r01*x12254))+(((-1.0)*cj10*cj12*x12249))+((x12260*x12263))+((sj13*x12255))+((sj11*x12250))+((r02*x12265)));
evalcond[6]=((((-1.0)*cj12*sj10*x12249))+((r12*x12265))+((r11*x12254))+((sj10*x12256))+((sj13*x12261))+(((-1.0)*cj13*x12248*x12268))+((x12258*x12263)));
evalcond[7]=((((-1.0)*x12249*x12250))+((cj13*x12255))+((gconst11*x12260))+(((-1.0)*r01*x12252*x12263))+((x12254*x12264))+(((-1.0)*cj10*x12257))+(((-1.0)*r02*x12246*x12252)));
evalcond[8]=((((-1.0)*sj10*sj12*x12249))+(((-1.0)*r12*x12246*x12252))+((cj13*x12261))+(((-1.0)*r11*x12252*x12263))+(((-1.0)*x12253*x12257))+((gconst11*x12258))+((sj13*x12247*x12248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12270=((1.0)*gconst11);
CheckValue<IkReal> x12271 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x12270))+((cj10*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12271.valid){
continue;
}
CheckValue<IkReal> x12272=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12270)))),-1);
if(!x12272.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12271.value)+(((1.5707963267949)*(x12272.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12273=IKsin(j14);
IkReal x12274=IKcos(j14);
IkReal x12275=(gconst11*r10);
IkReal x12276=((1.0)*cj11);
IkReal x12277=(cj10*sj12);
IkReal x12278=(cj13*r21);
IkReal x12279=((1.0)*sj13);
IkReal x12280=((1.0)*sj10);
IkReal x12281=(gconst11*sj13);
IkReal x12282=(gconst10*r00);
IkReal x12283=(sj11*sj12);
IkReal x12284=(cj12*sj11);
IkReal x12285=(cj13*r11);
IkReal x12286=(gconst10*r20);
IkReal x12287=(cj13*r01);
IkReal x12288=(gconst10*r10);
IkReal x12289=((1.0)*x12273);
IkReal x12290=(gconst10*x12274);
IkReal x12291=(r00*x12274);
IkReal x12292=(cj13*x12273);
IkReal x12293=(gconst10*x12273);
IkReal x12294=(r20*x12274);
IkReal x12295=((1.0)*x12274);
IkReal x12296=((1.0)*cj13*gconst11);
evalcond[0]=(((r21*x12293))+(((-1.0)*gconst11*r20*x12289))+(((-1.0)*r22*x12295)));
evalcond[1]=(((r11*x12293))+(((-1.0)*x12275*x12289))+cj10+(((-1.0)*r12*x12295)));
evalcond[2]=(((r01*x12293))+(((-1.0)*gconst11*r00*x12289))+(((-1.0)*r02*x12295))+(((-1.0)*x12280)));
evalcond[3]=((((-1.0)*x12294*x12296))+((x12278*x12290))+x12284+((r22*x12292))+((sj13*x12286))+((cj11*sj12))+((r21*x12281)));
evalcond[4]=(((gconst11*x12278))+x12283+(((-1.0)*cj12*x12276))+(((-1.0)*r21*x12279*x12290))+(((-1.0)*r22*x12273*x12279))+((cj13*x12286))+((x12281*x12294)));
evalcond[5]=((((-1.0)*x12291*x12296))+((sj11*x12277))+((r01*x12281))+((r02*x12292))+((x12287*x12290))+((sj13*x12282))+(((-1.0)*cj10*cj12*x12276)));
evalcond[6]=(((r12*x12292))+((x12285*x12290))+((r11*x12281))+((sj10*x12283))+(((-1.0)*cj12*sj10*x12276))+((sj13*x12288))+(((-1.0)*cj13*x12275*x12295)));
evalcond[7]=(((gconst11*x12287))+(((-1.0)*r02*x12273*x12279))+(((-1.0)*cj10*x12284))+(((-1.0)*x12276*x12277))+(((-1.0)*r01*x12279*x12290))+((cj13*x12282))+((x12281*x12291)));
evalcond[8]=((((-1.0)*x12280*x12284))+((gconst11*x12285))+(((-1.0)*r12*x12273*x12279))+(((-1.0)*r11*x12279*x12290))+(((-1.0)*sj10*sj12*x12276))+((cj13*x12288))+((sj13*x12274*x12275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
IkReal x12297=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x12297;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj15*r00))+((r01*sj15))))));
j14eval[2]=IKsign(x12297);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
IkReal x12298=((1.0)*cj15);
IkReal x12299=((((-1.0)*r01*x12298))+(((-1.0)*r00*sj15)));
j14eval[0]=x12299;
j14eval[1]=((IKabs(((((-1.0)*r20*x12298))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x12299);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj10=0;
cj10=1.0;
j10=0;
IkReal x12300=cj15*cj15;
IkReal x12301=(cj13*r21);
IkReal x12302=(cj15*sj15);
IkReal x12303=(cj13*r20);
IkReal x12304=((((-1.0)*cj13*r12*r22))+((r11*x12302*x12303))+((r10*x12301*x12302))+((r11*x12300*x12301))+(((-1.0)*r11*x12301))+(((-1.0)*r10*x12300*x12303)));
j14eval[0]=x12304;
j14eval[1]=IKsign(x12304);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x12305=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x12305;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj15*r00))+((r01*sj15))))));
j14eval[2]=IKsign(x12305);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x12306=((1.0)*cj15);
IkReal x12307=((((-1.0)*r01*x12306))+(((-1.0)*r00*sj15)));
j14eval[0]=x12307;
j14eval[1]=((IKabs(((((-1.0)*r20*x12306))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x12307);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x12308=cj15*cj15;
IkReal x12309=r11*r11;
IkReal x12310=(r11*sj15);
IkReal x12311=(cj15*r10);
IkReal x12312=((r12*r12)+x12309+(((-2.0)*x12310*x12311))+(((-1.0)*x12308*x12309))+((x12308*(r10*r10))));
j14eval[0]=x12312;
j14eval[1]=IKsign(x12312);
j14eval[2]=((IKabs(r12))+(IKabs((x12311+(((-1.0)*x12310))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x12313=((-1.0)*px);
sj10=0;
cj10=1.0;
j10=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12313);
rxp1_1=(px*r21);
rxp1_2=(r11*x12313);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=(((r11*sj15))+(((-1.0)*cj15*r10)));
j14eval[1]=((((-1.0)*r21*sj15))+((cj15*r20)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x12314=((-1.0)*px);
sj10=0;
cj10=1.0;
j10=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12314);
rxp1_1=(px*r21);
rxp1_2=(r11*x12314);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=r02;
j14eval[1]=((((-1.0)*r21*sj15))+((cj15*r20)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12315=((1.0)*sj11);
CheckValue<IkReal> x12316=IKPowWithIntegerCheck(r02,-1);
if(!x12316.valid){
continue;
}
CheckValue<IkReal> x12317=IKPowWithIntegerCheck(((((-1.0)*r21*sj15))+((cj15*r20))),-1);
if(!x12317.valid){
continue;
}
if( IKabs(((x12316.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*x12315)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12317.value)*(((((-1.0)*sj12*x12315))+((cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12316.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*x12315))))))+IKsqr(((x12317.value)*(((((-1.0)*sj12*x12315))+((cj11*cj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x12316.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*x12315))))), ((x12317.value)*(((((-1.0)*sj12*x12315))+((cj11*cj12))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12318=IKsin(j14);
IkReal x12319=IKcos(j14);
IkReal x12320=((1.0)*cj12);
IkReal x12321=(cj15*r10);
IkReal x12322=(cj15*r20);
IkReal x12323=(sj15*x12318);
IkReal x12324=((1.0)*x12318);
IkReal x12325=((1.0)*sj15*x12319);
evalcond[0]=((-1.0)*r02*x12319);
evalcond[1]=(((r21*x12323))+(((-1.0)*x12322*x12324)));
evalcond[2]=(((x12319*x12321))+(((-1.0)*r11*x12325)));
evalcond[3]=((1.0)+(((-1.0)*x12321*x12324))+((r11*x12323)));
evalcond[4]=((((-1.0)*cj11*sj12))+(((-1.0)*sj11*x12320))+(((-1.0)*r02*x12324)));
evalcond[5]=(((sj11*sj12))+((x12319*x12322))+(((-1.0)*r21*x12325))+(((-1.0)*cj11*x12320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12326=IKPowWithIntegerCheck((((r11*sj15))+(((-1.0)*cj15*r10))),-1);
if(!x12326.valid){
continue;
}
CheckValue<IkReal> x12327=IKPowWithIntegerCheck(((((-1.0)*r21*sj15))+((cj15*r20))),-1);
if(!x12327.valid){
continue;
}
if( IKabs(((-1.0)*(x12326.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12327.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12326.value)))+IKsqr(((x12327.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*(x12326.value)), ((x12327.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12328=IKsin(j14);
IkReal x12329=IKcos(j14);
IkReal x12330=((1.0)*cj12);
IkReal x12331=(cj15*r10);
IkReal x12332=(cj15*r20);
IkReal x12333=(sj15*x12328);
IkReal x12334=((1.0)*x12328);
IkReal x12335=((1.0)*sj15*x12329);
evalcond[0]=((-1.0)*r02*x12329);
evalcond[1]=(((r21*x12333))+(((-1.0)*x12332*x12334)));
evalcond[2]=(((x12329*x12331))+(((-1.0)*r11*x12335)));
evalcond[3]=((1.0)+(((-1.0)*x12331*x12334))+((r11*x12333)));
evalcond[4]=((((-1.0)*cj11*sj12))+(((-1.0)*sj11*x12330))+(((-1.0)*r02*x12334)));
evalcond[5]=(((sj11*sj12))+((x12329*x12332))+(((-1.0)*r21*x12335))+(((-1.0)*cj11*x12330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x12336=((-1.0)*pz);
sj10=0;
cj10=1.0;
j10=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12336);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12336);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j14eval[0]=(((r11*sj15))+(((-1.0)*cj15*r10)));
j14eval[1]=(((cj15*r00))+(((-1.0)*r01*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x12337=((-1.0)*pz);
sj10=0;
cj10=1.0;
j10=0;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12337);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12337);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j14eval[0]=r22;
j14eval[1]=(((cj15*r00))+(((-1.0)*r01*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12338=IKPowWithIntegerCheck(r22,-1);
if(!x12338.valid){
continue;
}
CheckValue<IkReal> x12339=IKPowWithIntegerCheck((((cj15*r00))+(((-1.0)*r01*sj15))),-1);
if(!x12339.valid){
continue;
}
if( IKabs(((x12338.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12339.value)*((((cj12*sj11))+((cj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12338.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12))))))+IKsqr(((x12339.value)*((((cj12*sj11))+((cj11*sj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x12338.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12))))), ((x12339.value)*((((cj12*sj11))+((cj11*sj12))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12340=IKsin(j14);
IkReal x12341=IKcos(j14);
IkReal x12342=((1.0)*cj12);
IkReal x12343=(sj15*x12340);
IkReal x12344=(cj15*x12341);
IkReal x12345=((1.0)*cj15*x12340);
IkReal x12346=((1.0)*sj15*x12341);
evalcond[0]=((-1.0)*r22*x12341);
evalcond[1]=(((r01*x12343))+(((-1.0)*r00*x12345)));
evalcond[2]=(((sj11*sj12))+(((-1.0)*cj11*x12342))+(((-1.0)*r22*x12340)));
evalcond[3]=((((-1.0)*r11*x12346))+((r10*x12344)));
evalcond[4]=((1.0)+((r11*x12343))+(((-1.0)*r10*x12345)));
evalcond[5]=((((-1.0)*cj11*sj12))+((r00*x12344))+(((-1.0)*r01*x12346))+(((-1.0)*sj11*x12342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12347=IKPowWithIntegerCheck((((r11*sj15))+(((-1.0)*cj15*r10))),-1);
if(!x12347.valid){
continue;
}
CheckValue<IkReal> x12348=IKPowWithIntegerCheck((((cj15*r00))+(((-1.0)*r01*sj15))),-1);
if(!x12348.valid){
continue;
}
if( IKabs(((-1.0)*(x12347.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12348.value)*((((cj12*sj11))+((cj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12347.value)))+IKsqr(((x12348.value)*((((cj12*sj11))+((cj11*sj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*(x12347.value)), ((x12348.value)*((((cj12*sj11))+((cj11*sj12))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12349=IKsin(j14);
IkReal x12350=IKcos(j14);
IkReal x12351=((1.0)*cj12);
IkReal x12352=(sj15*x12349);
IkReal x12353=(cj15*x12350);
IkReal x12354=((1.0)*cj15*x12349);
IkReal x12355=((1.0)*sj15*x12350);
evalcond[0]=((-1.0)*r22*x12350);
evalcond[1]=(((r01*x12352))+(((-1.0)*r00*x12354)));
evalcond[2]=(((sj11*sj12))+(((-1.0)*cj11*x12351))+(((-1.0)*r22*x12349)));
evalcond[3]=((((-1.0)*r11*x12355))+((r10*x12353)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12354))+((r11*x12352)));
evalcond[5]=((((-1.0)*cj11*sj12))+((r00*x12353))+(((-1.0)*r01*x12355))+(((-1.0)*sj11*x12351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12356=cj15*cj15;
IkReal x12357=r11*r11;
IkReal x12358=(r11*sj15);
IkReal x12359=(cj15*r10);
CheckValue<IkReal> x12360 = IKatan2WithCheck(IkReal(((((-1.0)*x12358))+x12359)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12360.valid){
continue;
}
CheckValue<IkReal> x12361=IKPowWithIntegerCheck(IKsign(((r12*r12)+x12357+((x12356*(r10*r10)))+(((-2.0)*x12358*x12359))+(((-1.0)*x12356*x12357)))),-1);
if(!x12361.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12360.value)+(((1.5707963267949)*(x12361.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12362=IKsin(j14);
IkReal x12363=IKcos(j14);
IkReal x12364=(r11*sj15);
IkReal x12365=((1.0)*cj11);
IkReal x12366=(cj15*r10);
IkReal x12367=(cj15*r00);
IkReal x12368=(r21*sj15);
IkReal x12369=(r01*sj15);
IkReal x12370=(cj15*r20);
IkReal x12371=((1.0)*x12363);
IkReal x12372=((1.0)*x12362);
evalcond[0]=((((-1.0)*r22*x12371))+((x12362*x12368))+(((-1.0)*x12370*x12372)));
evalcond[1]=(((x12362*x12369))+(((-1.0)*r02*x12371))+(((-1.0)*x12367*x12372)));
evalcond[2]=((((-1.0)*r12*x12372))+(((-1.0)*x12364*x12371))+((x12363*x12366)));
evalcond[3]=((1.0)+((x12362*x12364))+(((-1.0)*x12366*x12372))+(((-1.0)*r12*x12371)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r22*x12372))+(((-1.0)*cj12*x12365))+(((-1.0)*x12368*x12371))+((x12363*x12370)));
evalcond[5]=((((-1.0)*sj12*x12365))+(((-1.0)*x12369*x12371))+(((-1.0)*cj12*sj11))+(((-1.0)*r02*x12372))+((x12363*x12367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12373=((1.0)*cj15);
CheckValue<IkReal> x12374 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12373))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12374.valid){
continue;
}
CheckValue<IkReal> x12375=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12373))+(((-1.0)*r00*sj15)))),-1);
if(!x12375.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12374.value)+(((1.5707963267949)*(x12375.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12376=IKsin(j14);
IkReal x12377=IKcos(j14);
IkReal x12378=(r11*sj15);
IkReal x12379=((1.0)*cj11);
IkReal x12380=(cj15*r10);
IkReal x12381=(cj15*r00);
IkReal x12382=(r21*sj15);
IkReal x12383=(r01*sj15);
IkReal x12384=(cj15*r20);
IkReal x12385=((1.0)*x12377);
IkReal x12386=((1.0)*x12376);
evalcond[0]=((((-1.0)*x12384*x12386))+((x12376*x12382))+(((-1.0)*r22*x12385)));
evalcond[1]=((((-1.0)*r02*x12385))+((x12376*x12383))+(((-1.0)*x12381*x12386)));
evalcond[2]=(((x12377*x12380))+(((-1.0)*x12378*x12385))+(((-1.0)*r12*x12386)));
evalcond[3]=((1.0)+(((-1.0)*x12380*x12386))+((x12376*x12378))+(((-1.0)*r12*x12385)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x12379))+(((-1.0)*x12382*x12385))+(((-1.0)*r22*x12386))+((x12377*x12384)));
evalcond[5]=((((-1.0)*x12383*x12385))+(((-1.0)*r02*x12386))+(((-1.0)*cj12*sj11))+((x12377*x12381))+(((-1.0)*sj12*x12379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12387 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj15*r00))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12387.valid){
continue;
}
CheckValue<IkReal> x12388=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x12388.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12387.value)+(((1.5707963267949)*(x12388.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12389=IKsin(j14);
IkReal x12390=IKcos(j14);
IkReal x12391=(r11*sj15);
IkReal x12392=((1.0)*cj11);
IkReal x12393=(cj15*r10);
IkReal x12394=(cj15*r00);
IkReal x12395=(r21*sj15);
IkReal x12396=(r01*sj15);
IkReal x12397=(cj15*r20);
IkReal x12398=((1.0)*x12390);
IkReal x12399=((1.0)*x12389);
evalcond[0]=(((x12389*x12395))+(((-1.0)*x12397*x12399))+(((-1.0)*r22*x12398)));
evalcond[1]=(((x12389*x12396))+(((-1.0)*r02*x12398))+(((-1.0)*x12394*x12399)));
evalcond[2]=((((-1.0)*r12*x12399))+((x12390*x12393))+(((-1.0)*x12391*x12398)));
evalcond[3]=((1.0)+((x12389*x12391))+(((-1.0)*r12*x12398))+(((-1.0)*x12393*x12399)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x12392))+((x12390*x12397))+(((-1.0)*r22*x12399))+(((-1.0)*x12395*x12398)));
evalcond[5]=((((-1.0)*r02*x12399))+(((-1.0)*x12396*x12398))+(((-1.0)*sj12*x12392))+((x12390*x12394))+(((-1.0)*cj12*sj11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x12400=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x12400;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*cj15*r00))+((r01*sj15))))));
j14eval[2]=IKsign(x12400);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x12401=((1.0)*cj15);
IkReal x12402=((((-1.0)*r01*x12401))+(((-1.0)*r00*sj15)));
j14eval[0]=x12402;
j14eval[1]=((IKabs(r22))+(IKabs((((r21*sj15))+(((-1.0)*r20*x12401))))));
j14eval[2]=IKsign(x12402);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x12403=((1.0)*cj15);
IkReal x12404=(r11*sj15);
IkReal x12405=(sj11*sj12);
IkReal x12406=(cj11*cj12);
IkReal x12407=((((-1.0)*r01*x12403))+(((-1.0)*r00*sj15)));
j14eval[0]=x12407;
j14eval[1]=((IKabs(((((-1.0)*r12*x12405))+((r12*x12406)))))+(IKabs(((((-1.0)*x12404*x12406))+((x12404*x12405))+(((-1.0)*r10*x12403*x12405))+((cj15*r10*x12406))))));
j14eval[2]=IKsign(x12407);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x12408=((-1.0)*px);
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12408);
rxp1_1=(px*r21);
rxp1_2=(r11*x12408);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=r02;
j14eval[1]=((((-1.0)*cj15*r20))+((r21*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x12409=((-1.0)*px);
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12409);
rxp1_1=(px*r21);
rxp1_2=(r11*x12409);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12410=((1.0)*cj15);
j14eval[0]=((((-1.0)*r10*x12410))+((r11*sj15)));
j14eval[1]=((((-1.0)*r20*x12410))+((r21*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12411=((1.0)*cj15);
CheckValue<IkReal> x12412=IKPowWithIntegerCheck(((((-1.0)*r10*x12411))+((r11*sj15))),-1);
if(!x12412.valid){
continue;
}
CheckValue<IkReal> x12413=IKPowWithIntegerCheck(((((-1.0)*r20*x12411))+((r21*sj15))),-1);
if(!x12413.valid){
continue;
}
if( IKabs(((-1.0)*(x12412.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12413.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12412.value)))+IKsqr(((x12413.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*(x12412.value)), ((x12413.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12414=IKsin(j14);
IkReal x12415=IKcos(j14);
IkReal x12416=((1.0)*cj12);
IkReal x12417=(sj15*x12414);
IkReal x12418=((1.0)*cj15*r10);
IkReal x12419=(sj15*x12415);
IkReal x12420=((1.0)*cj15*r20);
evalcond[0]=((-1.0)*r02*x12415);
evalcond[1]=((((-1.0)*x12414*x12420))+((r21*x12417)));
evalcond[2]=((((-1.0)*cj11*sj12))+((r02*x12414))+(((-1.0)*sj11*x12416)));
evalcond[3]=((((-1.0)*x12415*x12418))+((r11*x12419)));
evalcond[4]=((1.0)+((r11*x12417))+(((-1.0)*x12414*x12418)));
evalcond[5]=(((sj11*sj12))+((r21*x12419))+(((-1.0)*cj11*x12416))+(((-1.0)*x12415*x12420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12421=IKPowWithIntegerCheck(r02,-1);
if(!x12421.valid){
continue;
}
CheckValue<IkReal> x12422=IKPowWithIntegerCheck(((((-1.0)*cj15*r20))+((r21*sj15))),-1);
if(!x12422.valid){
continue;
}
if( IKabs(((x12421.value)*((((cj12*sj11))+((cj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12422.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12421.value)*((((cj12*sj11))+((cj11*sj12))))))+IKsqr(((x12422.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x12421.value)*((((cj12*sj11))+((cj11*sj12))))), ((x12422.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12423=IKsin(j14);
IkReal x12424=IKcos(j14);
IkReal x12425=((1.0)*cj12);
IkReal x12426=(sj15*x12423);
IkReal x12427=((1.0)*cj15*r10);
IkReal x12428=(sj15*x12424);
IkReal x12429=((1.0)*cj15*r20);
evalcond[0]=((-1.0)*r02*x12424);
evalcond[1]=(((r21*x12426))+(((-1.0)*x12423*x12429)));
evalcond[2]=((((-1.0)*cj11*sj12))+(((-1.0)*sj11*x12425))+((r02*x12423)));
evalcond[3]=((((-1.0)*x12424*x12427))+((r11*x12428)));
evalcond[4]=((1.0)+(((-1.0)*x12423*x12427))+((r11*x12426)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x12424*x12429))+((r21*x12428))+(((-1.0)*cj11*x12425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x12430=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x12430;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x12430);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x12431=((1.0)*cj15);
IkReal x12432=((((-1.0)*r21*x12431))+(((-1.0)*r20*sj15)));
j14eval[0]=x12432;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*r10*x12431))))));
j14eval[2]=IKsign(x12432);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x12433=cj15*cj15;
IkReal x12434=(r11*r21);
IkReal x12435=(cj15*r20);
IkReal x12436=(r21*sj15);
IkReal x12437=((((-1.0)*r12*r22))+(((-1.0)*r10*r20*x12433))+((r11*sj15*x12435))+((x12433*x12434))+((cj15*r10*x12436))+(((-1.0)*x12434)));
j14eval[0]=x12437;
j14eval[1]=IKsign(x12437);
j14eval[2]=((IKabs((x12436+(((-1.0)*x12435)))))+(IKabs(r22)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12438=cj15*cj15;
IkReal x12439=(r11*r21);
IkReal x12440=(cj15*r20);
IkReal x12441=(r21*sj15);
CheckValue<IkReal> x12442 = IKatan2WithCheck(IkReal(((((-1.0)*x12440))+x12441)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12442.valid){
continue;
}
CheckValue<IkReal> x12443=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x12438*x12439))+(((-1.0)*r10*r20*x12438))+((r11*sj15*x12440))+((cj15*r10*x12441))+(((-1.0)*x12439)))),-1);
if(!x12443.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12442.value)+(((1.5707963267949)*(x12443.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12444=IKcos(j14);
IkReal x12445=IKsin(j14);
IkReal x12446=(sj15*x12445);
IkReal x12447=((1.0)*x12444);
IkReal x12448=(sj15*x12444);
IkReal x12449=((1.0)*cj15*x12445);
evalcond[0]=(((r21*x12448))+((r22*x12445))+(((-1.0)*cj15*r20*x12447)));
evalcond[1]=(((r11*x12448))+((r12*x12445))+(((-1.0)*cj15*r10*x12447)));
evalcond[2]=((((-1.0)*r20*x12449))+(((-1.0)*r22*x12447))+((r21*x12446)));
evalcond[3]=((((-1.0)*r02*x12447))+((r01*x12446))+(((-1.0)*r00*x12449)));
evalcond[4]=((-1.0)+((r01*x12448))+((r02*x12445))+(((-1.0)*cj15*r00*x12447)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12449))+(((-1.0)*r12*x12447))+((r11*x12446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12450=((1.0)*cj15);
CheckValue<IkReal> x12451 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12450))+((r11*sj15)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12451.valid){
continue;
}
CheckValue<IkReal> x12452=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15))+(((-1.0)*r21*x12450)))),-1);
if(!x12452.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12451.value)+(((1.5707963267949)*(x12452.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12453=IKcos(j14);
IkReal x12454=IKsin(j14);
IkReal x12455=(sj15*x12454);
IkReal x12456=((1.0)*x12453);
IkReal x12457=(sj15*x12453);
IkReal x12458=((1.0)*cj15*x12454);
evalcond[0]=(((r22*x12454))+(((-1.0)*cj15*r20*x12456))+((r21*x12457)));
evalcond[1]=((((-1.0)*cj15*r10*x12456))+((r11*x12457))+((r12*x12454)));
evalcond[2]=((((-1.0)*r22*x12456))+((r21*x12455))+(((-1.0)*r20*x12458)));
evalcond[3]=((((-1.0)*r00*x12458))+(((-1.0)*r02*x12456))+((r01*x12455)));
evalcond[4]=((-1.0)+((r02*x12454))+(((-1.0)*cj15*r00*x12456))+((r01*x12457)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12458))+(((-1.0)*r12*x12456))+((r11*x12455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12459=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x12459.valid){
continue;
}
CheckValue<IkReal> x12460 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12460.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12459.value)))+(x12460.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12461=IKcos(j14);
IkReal x12462=IKsin(j14);
IkReal x12463=(sj15*x12462);
IkReal x12464=((1.0)*x12461);
IkReal x12465=(sj15*x12461);
IkReal x12466=((1.0)*cj15*x12462);
evalcond[0]=((((-1.0)*cj15*r20*x12464))+((r22*x12462))+((r21*x12465)));
evalcond[1]=(((r12*x12462))+((r11*x12465))+(((-1.0)*cj15*r10*x12464)));
evalcond[2]=((((-1.0)*r22*x12464))+(((-1.0)*r20*x12466))+((r21*x12463)));
evalcond[3]=((((-1.0)*r02*x12464))+((r01*x12463))+(((-1.0)*r00*x12466)));
evalcond[4]=((-1.0)+((r01*x12465))+(((-1.0)*cj15*r00*x12464))+((r02*x12462)));
evalcond[5]=((1.0)+((r11*x12463))+(((-1.0)*r10*x12466))+(((-1.0)*r12*x12464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j12), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x12467=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x12467;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x12467);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x12468=((1.0)*cj15);
IkReal x12469=((((-1.0)*r10*sj15))+(((-1.0)*r11*x12468)));
j14eval[0]=x12469;
j14eval[1]=((IKabs(((((-1.0)*r20*x12468))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x12469);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=0;
sj11=0;
cj11=1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x12470=cj15*cj15;
IkReal x12471=(r11*r21);
IkReal x12472=(cj15*r20);
IkReal x12473=(r21*sj15);
IkReal x12474=((((-1.0)*r10*r20*x12470))+((r11*sj15*x12472))+(((-1.0)*r12*r22))+(((-1.0)*x12471))+((cj15*r10*x12473))+((x12470*x12471)));
j14eval[0]=x12474;
j14eval[1]=IKsign(x12474);
j14eval[2]=((IKabs(((((-1.0)*x12472))+x12473)))+(IKabs(r22)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12475=cj15*cj15;
IkReal x12476=(r11*r21);
IkReal x12477=(cj15*r20);
IkReal x12478=(r21*sj15);
CheckValue<IkReal> x12479 = IKatan2WithCheck(IkReal(((((-1.0)*x12477))+x12478)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12479.valid){
continue;
}
CheckValue<IkReal> x12480=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x12475))+((r11*sj15*x12477))+((x12475*x12476))+(((-1.0)*r12*r22))+(((-1.0)*x12476))+((cj15*r10*x12478)))),-1);
if(!x12480.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12479.value)+(((1.5707963267949)*(x12480.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12481=IKcos(j14);
IkReal x12482=IKsin(j14);
IkReal x12483=(sj15*x12482);
IkReal x12484=((1.0)*x12481);
IkReal x12485=(sj15*x12481);
IkReal x12486=((1.0)*cj15*x12482);
evalcond[0]=((((-1.0)*cj15*r20*x12484))+((r22*x12482))+((r21*x12485)));
evalcond[1]=((((-1.0)*cj15*r10*x12484))+((r12*x12482))+((r11*x12485)));
evalcond[2]=((((-1.0)*r22*x12484))+(((-1.0)*r20*x12486))+((r21*x12483)));
evalcond[3]=((((-1.0)*r00*x12486))+(((-1.0)*r02*x12484))+((r01*x12483)));
evalcond[4]=((1.0)+((r02*x12482))+((r01*x12485))+(((-1.0)*cj15*r00*x12484)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12486))+(((-1.0)*r12*x12484))+((r11*x12483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12487=((1.0)*cj15);
CheckValue<IkReal> x12488 = IKatan2WithCheck(IkReal((((r21*sj15))+(((-1.0)*r20*x12487)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12488.valid){
continue;
}
CheckValue<IkReal> x12489=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12487))+(((-1.0)*r10*sj15)))),-1);
if(!x12489.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12488.value)+(((1.5707963267949)*(x12489.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12490=IKcos(j14);
IkReal x12491=IKsin(j14);
IkReal x12492=(sj15*x12491);
IkReal x12493=((1.0)*x12490);
IkReal x12494=(sj15*x12490);
IkReal x12495=((1.0)*cj15*x12491);
evalcond[0]=(((r21*x12494))+(((-1.0)*cj15*r20*x12493))+((r22*x12491)));
evalcond[1]=((((-1.0)*cj15*r10*x12493))+((r12*x12491))+((r11*x12494)));
evalcond[2]=(((r21*x12492))+(((-1.0)*r20*x12495))+(((-1.0)*r22*x12493)));
evalcond[3]=(((r01*x12492))+(((-1.0)*r02*x12493))+(((-1.0)*r00*x12495)));
evalcond[4]=((1.0)+((r01*x12494))+(((-1.0)*cj15*r00*x12493))+((r02*x12491)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12495))+(((-1.0)*r12*x12493))+((r11*x12492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12496 = IKatan2WithCheck(IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12496.valid){
continue;
}
CheckValue<IkReal> x12497=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x12497.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12496.value)+(((1.5707963267949)*(x12497.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12498=IKcos(j14);
IkReal x12499=IKsin(j14);
IkReal x12500=(sj15*x12499);
IkReal x12501=((1.0)*x12498);
IkReal x12502=(sj15*x12498);
IkReal x12503=((1.0)*cj15*x12499);
evalcond[0]=((((-1.0)*cj15*r20*x12501))+((r21*x12502))+((r22*x12499)));
evalcond[1]=((((-1.0)*cj15*r10*x12501))+((r11*x12502))+((r12*x12499)));
evalcond[2]=((((-1.0)*r22*x12501))+((r21*x12500))+(((-1.0)*r20*x12503)));
evalcond[3]=((((-1.0)*r02*x12501))+(((-1.0)*r00*x12503))+((r01*x12500)));
evalcond[4]=((1.0)+((r01*x12502))+(((-1.0)*cj15*r00*x12501))+((r02*x12499)));
evalcond[5]=((1.0)+((r11*x12500))+(((-1.0)*r12*x12501))+(((-1.0)*r10*x12503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x12504=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x12504;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x12504);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x12505=((1.0)*cj15);
IkReal x12506=((((-1.0)*r20*sj15))+(((-1.0)*r21*x12505)));
j14eval[0]=x12506;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*r10*x12505))))));
j14eval[2]=IKsign(x12506);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x12507=cj15*cj15;
IkReal x12508=(r11*r21);
IkReal x12509=(cj15*r20);
IkReal x12510=(r21*sj15);
IkReal x12511=((((-1.0)*r12*r22))+(((-1.0)*x12508))+(((-1.0)*r10*r20*x12507))+((x12507*x12508))+((cj15*r10*x12510))+((r11*sj15*x12509)));
j14eval[0]=x12511;
j14eval[1]=IKsign(x12511);
j14eval[2]=((IKabs(((((-1.0)*x12509))+x12510)))+(IKabs(r22)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12512=cj15*cj15;
IkReal x12513=(r11*r21);
IkReal x12514=(cj15*r20);
IkReal x12515=(r21*sj15);
CheckValue<IkReal> x12516=IKPowWithIntegerCheck(IKsign((((r11*sj15*x12514))+(((-1.0)*r10*r20*x12512))+(((-1.0)*r12*r22))+(((-1.0)*x12513))+((cj15*r10*x12515))+((x12512*x12513)))),-1);
if(!x12516.valid){
continue;
}
CheckValue<IkReal> x12517 = IKatan2WithCheck(IkReal(((((-1.0)*x12514))+x12515)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12517.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12516.value)))+(x12517.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12518=IKcos(j14);
IkReal x12519=IKsin(j14);
IkReal x12520=(sj15*x12519);
IkReal x12521=((1.0)*x12518);
IkReal x12522=(sj15*x12518);
IkReal x12523=((1.0)*cj15*x12519);
evalcond[0]=(((r21*x12522))+(((-1.0)*cj15*r20*x12521))+((r22*x12519)));
evalcond[1]=(((r12*x12519))+(((-1.0)*cj15*r10*x12521))+((r11*x12522)));
evalcond[2]=((((-1.0)*r20*x12523))+((r21*x12520))+(((-1.0)*r22*x12521)));
evalcond[3]=((((-1.0)*r00*x12523))+(((-1.0)*r02*x12521))+((r01*x12520)));
evalcond[4]=((-1.0)+(((-1.0)*cj15*r00*x12521))+((r01*x12522))+((r02*x12519)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12521))+(((-1.0)*r10*x12523))+((r11*x12520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12524=((1.0)*cj15);
CheckValue<IkReal> x12525 = IKatan2WithCheck(IkReal((((r11*sj15))+(((-1.0)*r10*x12524)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12525.valid){
continue;
}
CheckValue<IkReal> x12526=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12524))+(((-1.0)*r20*sj15)))),-1);
if(!x12526.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12525.value)+(((1.5707963267949)*(x12526.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12527=IKcos(j14);
IkReal x12528=IKsin(j14);
IkReal x12529=(sj15*x12528);
IkReal x12530=((1.0)*x12527);
IkReal x12531=(sj15*x12527);
IkReal x12532=((1.0)*cj15*x12528);
evalcond[0]=(((r22*x12528))+((r21*x12531))+(((-1.0)*cj15*r20*x12530)));
evalcond[1]=(((r11*x12531))+(((-1.0)*cj15*r10*x12530))+((r12*x12528)));
evalcond[2]=((((-1.0)*r20*x12532))+((r21*x12529))+(((-1.0)*r22*x12530)));
evalcond[3]=((((-1.0)*r02*x12530))+((r01*x12529))+(((-1.0)*r00*x12532)));
evalcond[4]=((-1.0)+(((-1.0)*cj15*r00*x12530))+((r01*x12531))+((r02*x12528)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12532))+(((-1.0)*r12*x12530))+((r11*x12529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12533=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x12533.valid){
continue;
}
CheckValue<IkReal> x12534 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12534.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12533.value)))+(x12534.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12535=IKcos(j14);
IkReal x12536=IKsin(j14);
IkReal x12537=(sj15*x12536);
IkReal x12538=((1.0)*x12535);
IkReal x12539=(sj15*x12535);
IkReal x12540=((1.0)*cj15*x12536);
evalcond[0]=(((r21*x12539))+((r22*x12536))+(((-1.0)*cj15*r20*x12538)));
evalcond[1]=(((r11*x12539))+(((-1.0)*cj15*r10*x12538))+((r12*x12536)));
evalcond[2]=(((r21*x12537))+(((-1.0)*r20*x12540))+(((-1.0)*r22*x12538)));
evalcond[3]=((((-1.0)*r02*x12538))+(((-1.0)*r00*x12540))+((r01*x12537)));
evalcond[4]=((-1.0)+(((-1.0)*cj15*r00*x12538))+((r02*x12536))+((r01*x12539)));
evalcond[5]=((1.0)+((r11*x12537))+(((-1.0)*r10*x12540))+(((-1.0)*r12*x12538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x12541=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x12541;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x12541);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x12542=((1.0)*cj15);
IkReal x12543=((((-1.0)*r11*x12542))+(((-1.0)*r10*sj15)));
j14eval[0]=x12543;
j14eval[1]=((IKabs(((((-1.0)*r20*x12542))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x12543);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=1.5707963267949;
sj11=1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x12544=cj15*cj15;
IkReal x12545=(r11*r21);
IkReal x12546=(cj15*r20);
IkReal x12547=(r21*sj15);
IkReal x12548=((((-1.0)*x12545))+(((-1.0)*r10*r20*x12544))+(((-1.0)*r12*r22))+((cj15*r10*x12547))+((r11*sj15*x12546))+((x12544*x12545)));
j14eval[0]=x12548;
j14eval[1]=IKsign(x12548);
j14eval[2]=((IKabs(((((-1.0)*x12546))+x12547)))+(IKabs(r22)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12549=cj15*cj15;
IkReal x12550=(r11*r21);
IkReal x12551=(cj15*r20);
IkReal x12552=(r21*sj15);
CheckValue<IkReal> x12553=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12550))+(((-1.0)*r10*r20*x12549))+(((-1.0)*r12*r22))+((x12549*x12550))+((cj15*r10*x12552))+((r11*sj15*x12551)))),-1);
if(!x12553.valid){
continue;
}
CheckValue<IkReal> x12554 = IKatan2WithCheck(IkReal(((((-1.0)*x12551))+x12552)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12554.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12553.value)))+(x12554.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12555=IKcos(j14);
IkReal x12556=IKsin(j14);
IkReal x12557=(sj15*x12556);
IkReal x12558=((1.0)*x12555);
IkReal x12559=(sj15*x12555);
IkReal x12560=((1.0)*cj15*x12556);
evalcond[0]=((((-1.0)*cj15*r20*x12558))+((r22*x12556))+((r21*x12559)));
evalcond[1]=(((r12*x12556))+(((-1.0)*cj15*r10*x12558))+((r11*x12559)));
evalcond[2]=((((-1.0)*r22*x12558))+((r21*x12557))+(((-1.0)*r20*x12560)));
evalcond[3]=(((r01*x12557))+(((-1.0)*r00*x12560))+(((-1.0)*r02*x12558)));
evalcond[4]=((1.0)+(((-1.0)*cj15*r00*x12558))+((r01*x12559))+((r02*x12556)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12558))+((r11*x12557))+(((-1.0)*r10*x12560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12561=((1.0)*cj15);
CheckValue<IkReal> x12562=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12561))+(((-1.0)*r10*sj15)))),-1);
if(!x12562.valid){
continue;
}
CheckValue<IkReal> x12563 = IKatan2WithCheck(IkReal((((r21*sj15))+(((-1.0)*r20*x12561)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12563.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12562.value)))+(x12563.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12564=IKcos(j14);
IkReal x12565=IKsin(j14);
IkReal x12566=(sj15*x12565);
IkReal x12567=((1.0)*x12564);
IkReal x12568=(sj15*x12564);
IkReal x12569=((1.0)*cj15*x12565);
evalcond[0]=((((-1.0)*cj15*r20*x12567))+((r21*x12568))+((r22*x12565)));
evalcond[1]=(((r11*x12568))+((r12*x12565))+(((-1.0)*cj15*r10*x12567)));
evalcond[2]=((((-1.0)*r22*x12567))+((r21*x12566))+(((-1.0)*r20*x12569)));
evalcond[3]=((((-1.0)*r02*x12567))+(((-1.0)*r00*x12569))+((r01*x12566)));
evalcond[4]=((1.0)+((r01*x12568))+(((-1.0)*cj15*r00*x12567))+((r02*x12565)));
evalcond[5]=((1.0)+((r11*x12566))+(((-1.0)*r12*x12567))+(((-1.0)*r10*x12569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12570 = IKatan2WithCheck(IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12570.valid){
continue;
}
CheckValue<IkReal> x12571=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x12571.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12570.value)+(((1.5707963267949)*(x12571.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12572=IKcos(j14);
IkReal x12573=IKsin(j14);
IkReal x12574=(sj15*x12573);
IkReal x12575=((1.0)*x12572);
IkReal x12576=(sj15*x12572);
IkReal x12577=((1.0)*cj15*x12573);
evalcond[0]=(((r22*x12573))+(((-1.0)*cj15*r20*x12575))+((r21*x12576)));
evalcond[1]=((((-1.0)*cj15*r10*x12575))+((r12*x12573))+((r11*x12576)));
evalcond[2]=((((-1.0)*r20*x12577))+((r21*x12574))+(((-1.0)*r22*x12575)));
evalcond[3]=((((-1.0)*r02*x12575))+((r01*x12574))+(((-1.0)*r00*x12577)));
evalcond[4]=((1.0)+((r02*x12573))+(((-1.0)*cj15*r00*x12575))+((r01*x12576)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12575))+(((-1.0)*r10*x12577))+((r11*x12574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x12578=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x12578;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x12578);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x12579=((1.0)*cj15);
IkReal x12580=((((-1.0)*r11*x12579))+(((-1.0)*r10*sj15)));
j14eval[0]=x12580;
j14eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12579))+((r21*sj15))))));
j14eval[2]=IKsign(x12580);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=1.5707963267949;
sj12=1.0;
cj12=0;
IkReal x12581=cj15*cj15;
IkReal x12582=(r11*r21);
IkReal x12583=(cj15*r20);
IkReal x12584=(r21*sj15);
IkReal x12585=((((-1.0)*r12*r22))+(((-1.0)*r10*r20*x12581))+((cj15*r10*x12584))+((r11*sj15*x12583))+(((-1.0)*x12582))+((x12581*x12582)));
j14eval[0]=x12585;
j14eval[1]=IKsign(x12585);
j14eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x12583))+x12584))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12586=cj15*cj15;
IkReal x12587=(r11*r21);
IkReal x12588=(cj15*r20);
IkReal x12589=(r21*sj15);
CheckValue<IkReal> x12590=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*r20*x12586))+((cj15*r10*x12589))+((x12586*x12587))+((r11*sj15*x12588))+(((-1.0)*x12587)))),-1);
if(!x12590.valid){
continue;
}
CheckValue<IkReal> x12591 = IKatan2WithCheck(IkReal(((((-1.0)*x12588))+x12589)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12591.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12590.value)))+(x12591.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12592=IKcos(j14);
IkReal x12593=IKsin(j14);
IkReal x12594=(sj15*x12593);
IkReal x12595=((1.0)*x12592);
IkReal x12596=(sj15*x12592);
IkReal x12597=((1.0)*cj15*x12593);
evalcond[0]=((((-1.0)*cj15*r20*x12595))+((r21*x12596))+((r22*x12593)));
evalcond[1]=(((r12*x12593))+(((-1.0)*cj15*r10*x12595))+((r11*x12596)));
evalcond[2]=((((-1.0)*r20*x12597))+(((-1.0)*r22*x12595))+((r21*x12594)));
evalcond[3]=(((r01*x12594))+(((-1.0)*r00*x12597))+(((-1.0)*r02*x12595)));
evalcond[4]=((1.0)+((r01*x12596))+(((-1.0)*cj15*r00*x12595))+((r02*x12593)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12597))+(((-1.0)*r12*x12595))+((r11*x12594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12598=((1.0)*cj15);
CheckValue<IkReal> x12599=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12598))+(((-1.0)*r10*sj15)))),-1);
if(!x12599.valid){
continue;
}
CheckValue<IkReal> x12600 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x12598))+((r21*sj15)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12600.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12599.value)))+(x12600.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12601=IKcos(j14);
IkReal x12602=IKsin(j14);
IkReal x12603=(sj15*x12602);
IkReal x12604=((1.0)*x12601);
IkReal x12605=(sj15*x12601);
IkReal x12606=((1.0)*cj15*x12602);
evalcond[0]=(((r22*x12602))+(((-1.0)*cj15*r20*x12604))+((r21*x12605)));
evalcond[1]=(((r11*x12605))+((r12*x12602))+(((-1.0)*cj15*r10*x12604)));
evalcond[2]=((((-1.0)*r22*x12604))+(((-1.0)*r20*x12606))+((r21*x12603)));
evalcond[3]=(((r01*x12603))+(((-1.0)*r00*x12606))+(((-1.0)*r02*x12604)));
evalcond[4]=((1.0)+((r01*x12605))+((r02*x12602))+(((-1.0)*cj15*r00*x12604)));
evalcond[5]=((1.0)+((r11*x12603))+(((-1.0)*r12*x12604))+(((-1.0)*r10*x12606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12607 = IKatan2WithCheck(IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12607.valid){
continue;
}
CheckValue<IkReal> x12608=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x12608.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12607.value)+(((1.5707963267949)*(x12608.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12609=IKcos(j14);
IkReal x12610=IKsin(j14);
IkReal x12611=(sj15*x12610);
IkReal x12612=((1.0)*x12609);
IkReal x12613=(sj15*x12609);
IkReal x12614=((1.0)*cj15*x12610);
evalcond[0]=(((r21*x12613))+(((-1.0)*cj15*r20*x12612))+((r22*x12610)));
evalcond[1]=((((-1.0)*cj15*r10*x12612))+((r11*x12613))+((r12*x12610)));
evalcond[2]=((((-1.0)*r22*x12612))+(((-1.0)*r20*x12614))+((r21*x12611)));
evalcond[3]=((((-1.0)*r02*x12612))+(((-1.0)*r00*x12614))+((r01*x12611)));
evalcond[4]=((1.0)+((r02*x12610))+(((-1.0)*cj15*r00*x12612))+((r01*x12613)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12612))+(((-1.0)*r10*x12614))+((r11*x12611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j11, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x12615=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x12615;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x12615);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x12616=((1.0)*cj15);
IkReal x12617=((((-1.0)*r21*x12616))+(((-1.0)*r20*sj15)));
j14eval[0]=x12617;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*r10*x12616))))));
j14eval[2]=IKsign(x12617);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=3.14159265358979;
sj11=0;
cj11=-1.0;
j12=-1.5707963267949;
sj12=-1.0;
cj12=0;
IkReal x12618=cj15*cj15;
IkReal x12619=(r11*r21);
IkReal x12620=(cj15*r20);
IkReal x12621=(r21*sj15);
IkReal x12622=(((x12618*x12619))+(((-1.0)*r10*r20*x12618))+(((-1.0)*r12*r22))+((cj15*r10*x12621))+(((-1.0)*x12619))+((r11*sj15*x12620)));
j14eval[0]=x12622;
j14eval[1]=IKsign(x12622);
j14eval[2]=((IKabs(((((-1.0)*x12620))+x12621)))+(IKabs(r22)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12623=cj15*cj15;
IkReal x12624=(r11*r21);
IkReal x12625=(cj15*r20);
IkReal x12626=(r21*sj15);
CheckValue<IkReal> x12627 = IKatan2WithCheck(IkReal(((((-1.0)*x12625))+x12626)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12627.valid){
continue;
}
CheckValue<IkReal> x12628=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*r20*x12623))+((cj15*r10*x12626))+(((-1.0)*x12624))+((r11*sj15*x12625))+((x12623*x12624)))),-1);
if(!x12628.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12627.value)+(((1.5707963267949)*(x12628.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12629=IKcos(j14);
IkReal x12630=IKsin(j14);
IkReal x12631=(sj15*x12630);
IkReal x12632=((1.0)*x12629);
IkReal x12633=(sj15*x12629);
IkReal x12634=((1.0)*cj15*x12630);
evalcond[0]=((((-1.0)*cj15*r20*x12632))+((r22*x12630))+((r21*x12633)));
evalcond[1]=(((r11*x12633))+((r12*x12630))+(((-1.0)*cj15*r10*x12632)));
evalcond[2]=((((-1.0)*r20*x12634))+(((-1.0)*r22*x12632))+((r21*x12631)));
evalcond[3]=(((r01*x12631))+(((-1.0)*r02*x12632))+(((-1.0)*r00*x12634)));
evalcond[4]=((-1.0)+(((-1.0)*cj15*r00*x12632))+((r01*x12633))+((r02*x12630)));
evalcond[5]=((1.0)+((r11*x12631))+(((-1.0)*r10*x12634))+(((-1.0)*r12*x12632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12635=((1.0)*cj15);
CheckValue<IkReal> x12636=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12635))+(((-1.0)*r20*sj15)))),-1);
if(!x12636.valid){
continue;
}
CheckValue<IkReal> x12637 = IKatan2WithCheck(IkReal((((r11*sj15))+(((-1.0)*r10*x12635)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12637.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12636.value)))+(x12637.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12638=IKcos(j14);
IkReal x12639=IKsin(j14);
IkReal x12640=(sj15*x12639);
IkReal x12641=((1.0)*x12638);
IkReal x12642=(sj15*x12638);
IkReal x12643=((1.0)*cj15*x12639);
evalcond[0]=((((-1.0)*cj15*r20*x12641))+((r22*x12639))+((r21*x12642)));
evalcond[1]=(((r12*x12639))+(((-1.0)*cj15*r10*x12641))+((r11*x12642)));
evalcond[2]=((((-1.0)*r20*x12643))+(((-1.0)*r22*x12641))+((r21*x12640)));
evalcond[3]=((((-1.0)*r02*x12641))+((r01*x12640))+(((-1.0)*r00*x12643)));
evalcond[4]=((-1.0)+(((-1.0)*cj15*r00*x12641))+((r01*x12642))+((r02*x12639)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12641))+((r11*x12640))+(((-1.0)*r10*x12643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12644=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x12644.valid){
continue;
}
CheckValue<IkReal> x12645 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12645.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12644.value)))+(x12645.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12646=IKcos(j14);
IkReal x12647=IKsin(j14);
IkReal x12648=(sj15*x12647);
IkReal x12649=((1.0)*x12646);
IkReal x12650=(sj15*x12646);
IkReal x12651=((1.0)*cj15*x12647);
evalcond[0]=((((-1.0)*cj15*r20*x12649))+((r21*x12650))+((r22*x12647)));
evalcond[1]=(((r12*x12647))+((r11*x12650))+(((-1.0)*cj15*r10*x12649)));
evalcond[2]=((((-1.0)*r22*x12649))+(((-1.0)*r20*x12651))+((r21*x12648)));
evalcond[3]=((((-1.0)*r02*x12649))+(((-1.0)*r00*x12651))+((r01*x12648)));
evalcond[4]=((-1.0)+(((-1.0)*cj15*r00*x12649))+((r02*x12647))+((r01*x12650)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12651))+(((-1.0)*r12*x12649))+((r11*x12648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j12), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x12652=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x12652;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x12652);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x12653=((1.0)*cj15);
IkReal x12654=((((-1.0)*r11*x12653))+(((-1.0)*r10*sj15)));
j14eval[0]=x12654;
j14eval[1]=((IKabs((((r21*sj15))+(((-1.0)*r20*x12653)))))+(IKabs(r22)));
j14eval[2]=IKsign(x12654);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=0;
sj12=0;
cj12=1.0;
IkReal x12655=cj15*cj15;
IkReal x12656=(r11*r21);
IkReal x12657=(cj15*r20);
IkReal x12658=(r21*sj15);
IkReal x12659=((((-1.0)*r10*r20*x12655))+(((-1.0)*r12*r22))+((cj15*r10*x12658))+(((-1.0)*x12656))+((x12655*x12656))+((r11*sj15*x12657)));
j14eval[0]=x12659;
j14eval[1]=IKsign(x12659);
j14eval[2]=((IKabs((x12658+(((-1.0)*x12657)))))+(IKabs(r22)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12660=cj15*cj15;
IkReal x12661=(r11*r21);
IkReal x12662=(cj15*r20);
IkReal x12663=(r21*sj15);
CheckValue<IkReal> x12664=IKPowWithIntegerCheck(IKsign((((cj15*r10*x12663))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x12660))+(((-1.0)*x12661))+((r11*sj15*x12662))+((x12660*x12661)))),-1);
if(!x12664.valid){
continue;
}
CheckValue<IkReal> x12665 = IKatan2WithCheck(IkReal(((((-1.0)*x12662))+x12663)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12665.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12664.value)))+(x12665.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12666=IKcos(j14);
IkReal x12667=IKsin(j14);
IkReal x12668=(sj15*x12667);
IkReal x12669=((1.0)*x12666);
IkReal x12670=(sj15*x12666);
IkReal x12671=((1.0)*cj15*x12667);
evalcond[0]=(((r21*x12670))+((r22*x12667))+(((-1.0)*cj15*r20*x12669)));
evalcond[1]=((((-1.0)*cj15*r10*x12669))+((r12*x12667))+((r11*x12670)));
evalcond[2]=((((-1.0)*r22*x12669))+((r21*x12668))+(((-1.0)*r20*x12671)));
evalcond[3]=((((-1.0)*r00*x12671))+(((-1.0)*r02*x12669))+((r01*x12668)));
evalcond[4]=((1.0)+((r02*x12667))+(((-1.0)*cj15*r00*x12669))+((r01*x12670)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12671))+((r11*x12668))+(((-1.0)*r12*x12669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12672=((1.0)*cj15);
CheckValue<IkReal> x12673=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12672))+(((-1.0)*r10*sj15)))),-1);
if(!x12673.valid){
continue;
}
CheckValue<IkReal> x12674 = IKatan2WithCheck(IkReal((((r21*sj15))+(((-1.0)*r20*x12672)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12674.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12673.value)))+(x12674.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12675=IKcos(j14);
IkReal x12676=IKsin(j14);
IkReal x12677=(sj15*x12676);
IkReal x12678=((1.0)*x12675);
IkReal x12679=(sj15*x12675);
IkReal x12680=((1.0)*cj15*x12676);
evalcond[0]=(((r21*x12679))+((r22*x12676))+(((-1.0)*cj15*r20*x12678)));
evalcond[1]=((((-1.0)*cj15*r10*x12678))+((r12*x12676))+((r11*x12679)));
evalcond[2]=((((-1.0)*r20*x12680))+((r21*x12677))+(((-1.0)*r22*x12678)));
evalcond[3]=((((-1.0)*r00*x12680))+(((-1.0)*r02*x12678))+((r01*x12677)));
evalcond[4]=((1.0)+((r02*x12676))+(((-1.0)*cj15*r00*x12678))+((r01*x12679)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12678))+((r11*x12677))+(((-1.0)*r10*x12680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12681 = IKatan2WithCheck(IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12681.valid){
continue;
}
CheckValue<IkReal> x12682=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x12682.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12681.value)+(((1.5707963267949)*(x12682.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12683=IKcos(j14);
IkReal x12684=IKsin(j14);
IkReal x12685=(sj15*x12684);
IkReal x12686=((1.0)*x12683);
IkReal x12687=(sj15*x12683);
IkReal x12688=((1.0)*cj15*x12684);
evalcond[0]=(((r21*x12687))+(((-1.0)*cj15*r20*x12686))+((r22*x12684)));
evalcond[1]=((((-1.0)*cj15*r10*x12686))+((r12*x12684))+((r11*x12687)));
evalcond[2]=(((r21*x12685))+(((-1.0)*r20*x12688))+(((-1.0)*r22*x12686)));
evalcond[3]=(((r01*x12685))+(((-1.0)*r00*x12688))+(((-1.0)*r02*x12686)));
evalcond[4]=((1.0)+((r01*x12687))+((r02*x12684))+(((-1.0)*cj15*r00*x12686)));
evalcond[5]=((1.0)+((r11*x12685))+(((-1.0)*r12*x12686))+(((-1.0)*r10*x12688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j12, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j11), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x12689=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x12689;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x12689);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x12690=((1.0)*cj15);
IkReal x12691=((((-1.0)*r20*sj15))+(((-1.0)*r21*x12690)));
j14eval[0]=x12691;
j14eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12690))+((r11*sj15))))));
j14eval[2]=IKsign(x12691);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j11=-1.5707963267949;
sj11=-1.0;
cj11=0;
j12=3.14159265358979;
sj12=0;
cj12=-1.0;
IkReal x12692=cj15*cj15;
IkReal x12693=(r11*r21);
IkReal x12694=(cj15*r20);
IkReal x12695=(r21*sj15);
IkReal x12696=(((cj15*r10*x12695))+((r11*sj15*x12694))+(((-1.0)*r12*r22))+((x12692*x12693))+(((-1.0)*r10*r20*x12692))+(((-1.0)*x12693)));
j14eval[0]=x12696;
j14eval[1]=IKsign(x12696);
j14eval[2]=((IKabs(r22))+(IKabs((x12695+(((-1.0)*x12694))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12697=cj15*cj15;
IkReal x12698=(r11*r21);
IkReal x12699=(cj15*r20);
IkReal x12700=(r21*sj15);
CheckValue<IkReal> x12701 = IKatan2WithCheck(IkReal((x12700+(((-1.0)*x12699)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12701.valid){
continue;
}
CheckValue<IkReal> x12702=IKPowWithIntegerCheck(IKsign((((x12697*x12698))+((r11*sj15*x12699))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x12697))+(((-1.0)*x12698))+((cj15*r10*x12700)))),-1);
if(!x12702.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12701.value)+(((1.5707963267949)*(x12702.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12703=IKcos(j14);
IkReal x12704=IKsin(j14);
IkReal x12705=(sj15*x12704);
IkReal x12706=((1.0)*x12703);
IkReal x12707=(sj15*x12703);
IkReal x12708=((1.0)*cj15*x12704);
evalcond[0]=(((r22*x12704))+((r21*x12707))+(((-1.0)*cj15*r20*x12706)));
evalcond[1]=(((r12*x12704))+((r11*x12707))+(((-1.0)*cj15*r10*x12706)));
evalcond[2]=(((r21*x12705))+(((-1.0)*r22*x12706))+(((-1.0)*r20*x12708)));
evalcond[3]=(((r01*x12705))+(((-1.0)*r00*x12708))+(((-1.0)*r02*x12706)));
evalcond[4]=((-1.0)+(((-1.0)*cj15*r00*x12706))+((r02*x12704))+((r01*x12707)));
evalcond[5]=((1.0)+(((-1.0)*r10*x12708))+((r11*x12705))+(((-1.0)*r12*x12706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12709=((1.0)*cj15);
CheckValue<IkReal> x12710=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15))+(((-1.0)*r21*x12709)))),-1);
if(!x12710.valid){
continue;
}
CheckValue<IkReal> x12711 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12709))+((r11*sj15)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12711.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12710.value)))+(x12711.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12712=IKcos(j14);
IkReal x12713=IKsin(j14);
IkReal x12714=(sj15*x12713);
IkReal x12715=((1.0)*x12712);
IkReal x12716=(sj15*x12712);
IkReal x12717=((1.0)*cj15*x12713);
evalcond[0]=(((r21*x12716))+((r22*x12713))+(((-1.0)*cj15*r20*x12715)));
evalcond[1]=(((r12*x12713))+((r11*x12716))+(((-1.0)*cj15*r10*x12715)));
evalcond[2]=(((r21*x12714))+(((-1.0)*r22*x12715))+(((-1.0)*r20*x12717)));
evalcond[3]=((((-1.0)*r00*x12717))+((r01*x12714))+(((-1.0)*r02*x12715)));
evalcond[4]=((-1.0)+((r02*x12713))+((r01*x12716))+(((-1.0)*cj15*r00*x12715)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12715))+(((-1.0)*r10*x12717))+((r11*x12714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12718=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x12718.valid){
continue;
}
CheckValue<IkReal> x12719 = IKatan2WithCheck(IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12719.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12718.value)))+(x12719.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12720=IKcos(j14);
IkReal x12721=IKsin(j14);
IkReal x12722=(sj15*x12721);
IkReal x12723=((1.0)*x12720);
IkReal x12724=(sj15*x12720);
IkReal x12725=((1.0)*cj15*x12721);
evalcond[0]=(((r21*x12724))+(((-1.0)*cj15*r20*x12723))+((r22*x12721)));
evalcond[1]=(((r11*x12724))+((r12*x12721))+(((-1.0)*cj15*r10*x12723)));
evalcond[2]=(((r21*x12722))+(((-1.0)*r22*x12723))+(((-1.0)*r20*x12725)));
evalcond[3]=((((-1.0)*r00*x12725))+(((-1.0)*r02*x12723))+((r01*x12722)));
evalcond[4]=((-1.0)+((r02*x12721))+((r01*x12724))+(((-1.0)*cj15*r00*x12723)));
evalcond[5]=((1.0)+((r11*x12722))+(((-1.0)*r10*x12725))+(((-1.0)*r12*x12723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x12726=((-1.0)*pz);
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12726);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12726);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j14eval[0]=r22;
j14eval[1]=((((-1.0)*cj15*r00))+((r01*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x12727=((-1.0)*pz);
sj10=0;
cj10=1.0;
j10=0;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12727);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12727);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x12728=((1.0)*cj15);
j14eval[0]=(((r11*sj15))+(((-1.0)*r10*x12728)));
j14eval[1]=((((-1.0)*r00*x12728))+((r01*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12729=((1.0)*cj15);
CheckValue<IkReal> x12730=IKPowWithIntegerCheck((((r11*sj15))+(((-1.0)*r10*x12729))),-1);
if(!x12730.valid){
continue;
}
CheckValue<IkReal> x12731=IKPowWithIntegerCheck(((((-1.0)*r00*x12729))+((r01*sj15))),-1);
if(!x12731.valid){
continue;
}
if( IKabs(((-1.0)*(x12730.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12731.value)*((((cj12*sj11))+((cj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12730.value)))+IKsqr(((x12731.value)*((((cj12*sj11))+((cj11*sj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*(x12730.value)), ((x12731.value)*((((cj12*sj11))+((cj11*sj12))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12732=IKsin(j14);
IkReal x12733=IKcos(j14);
IkReal x12734=((1.0)*cj12);
IkReal x12735=((1.0)*cj15*r10);
IkReal x12736=(sj15*x12732);
IkReal x12737=((1.0)*cj15*r00);
IkReal x12738=(sj15*x12733);
evalcond[0]=((-1.0)*r22*x12733);
evalcond[1]=(((sj11*sj12))+(((-1.0)*cj11*x12734))+((r22*x12732)));
evalcond[2]=(((r01*x12736))+(((-1.0)*x12732*x12737)));
evalcond[3]=(((r11*x12738))+(((-1.0)*x12733*x12735)));
evalcond[4]=((1.0)+((r11*x12736))+(((-1.0)*x12732*x12735)));
evalcond[5]=((((-1.0)*cj11*sj12))+(((-1.0)*sj11*x12734))+((r01*x12738))+(((-1.0)*x12733*x12737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12739=IKPowWithIntegerCheck(r22,-1);
if(!x12739.valid){
continue;
}
CheckValue<IkReal> x12740=IKPowWithIntegerCheck(((((-1.0)*cj15*r00))+((r01*sj15))),-1);
if(!x12740.valid){
continue;
}
if( IKabs(((x12739.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12740.value)*((((cj12*sj11))+((cj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12739.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))))+IKsqr(((x12740.value)*((((cj12*sj11))+((cj11*sj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x12739.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))), ((x12740.value)*((((cj12*sj11))+((cj11*sj12))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12741=IKsin(j14);
IkReal x12742=IKcos(j14);
IkReal x12743=((1.0)*cj12);
IkReal x12744=((1.0)*cj15*r10);
IkReal x12745=(sj15*x12741);
IkReal x12746=((1.0)*cj15*r00);
IkReal x12747=(sj15*x12742);
evalcond[0]=((-1.0)*r22*x12742);
evalcond[1]=(((sj11*sj12))+((r22*x12741))+(((-1.0)*cj11*x12743)));
evalcond[2]=((((-1.0)*x12741*x12746))+((r01*x12745)));
evalcond[3]=(((r11*x12747))+(((-1.0)*x12742*x12744)));
evalcond[4]=((1.0)+(((-1.0)*x12741*x12744))+((r11*x12745)));
evalcond[5]=((((-1.0)*cj11*sj12))+(((-1.0)*sj11*x12743))+(((-1.0)*x12742*x12746))+((r01*x12747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12748=((1.0)*cj15);
IkReal x12749=(r11*sj15);
IkReal x12750=(cj11*cj12);
IkReal x12751=(sj11*sj12);
CheckValue<IkReal> x12752=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x12748)))),-1);
if(!x12752.valid){
continue;
}
CheckValue<IkReal> x12753 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12748*x12751))+(((-1.0)*x12749*x12750))+((cj15*r10*x12750))+((x12749*x12751)))),IkReal(((((-1.0)*r12*x12751))+((r12*x12750)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12753.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12752.value)))+(x12753.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12754=IKcos(j14);
IkReal x12755=IKsin(j14);
IkReal x12756=((1.0)*cj11);
IkReal x12757=(cj15*r20);
IkReal x12758=(cj15*r10);
IkReal x12759=(cj15*r00);
IkReal x12760=((1.0)*x12754);
IkReal x12761=(sj15*x12754);
IkReal x12762=((1.0)*x12755);
IkReal x12763=(sj15*x12755);
evalcond[0]=((((-1.0)*x12758*x12760))+((r11*x12761))+((r12*x12755)));
evalcond[1]=(((r21*x12763))+(((-1.0)*r22*x12760))+(((-1.0)*x12757*x12762)));
evalcond[2]=((((-1.0)*x12759*x12762))+(((-1.0)*r02*x12760))+((r01*x12763)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12760))+(((-1.0)*x12758*x12762))+((r11*x12763)));
evalcond[4]=(((sj11*sj12))+((r21*x12761))+(((-1.0)*cj12*x12756))+(((-1.0)*x12757*x12760))+((r22*x12755)));
evalcond[5]=((((-1.0)*x12759*x12760))+(((-1.0)*sj12*x12756))+(((-1.0)*cj12*sj11))+((r02*x12755))+((r01*x12761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12764=((1.0)*cj15);
CheckValue<IkReal> x12765=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12764))+(((-1.0)*r00*sj15)))),-1);
if(!x12765.valid){
continue;
}
CheckValue<IkReal> x12766 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12764))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12766.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12765.value)))+(x12766.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12767=IKcos(j14);
IkReal x12768=IKsin(j14);
IkReal x12769=((1.0)*cj11);
IkReal x12770=(cj15*r20);
IkReal x12771=(cj15*r10);
IkReal x12772=(cj15*r00);
IkReal x12773=((1.0)*x12767);
IkReal x12774=(sj15*x12767);
IkReal x12775=((1.0)*x12768);
IkReal x12776=(sj15*x12768);
evalcond[0]=(((r12*x12768))+(((-1.0)*x12771*x12773))+((r11*x12774)));
evalcond[1]=((((-1.0)*r22*x12773))+((r21*x12776))+(((-1.0)*x12770*x12775)));
evalcond[2]=(((r01*x12776))+(((-1.0)*x12772*x12775))+(((-1.0)*r02*x12773)));
evalcond[3]=((1.0)+(((-1.0)*x12771*x12775))+(((-1.0)*r12*x12773))+((r11*x12776)));
evalcond[4]=(((sj11*sj12))+((r22*x12768))+(((-1.0)*cj12*x12769))+((r21*x12774))+(((-1.0)*x12770*x12773)));
evalcond[5]=(((r01*x12774))+((r02*x12768))+(((-1.0)*cj12*sj11))+(((-1.0)*x12772*x12773))+(((-1.0)*sj12*x12769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12777 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj15*r00))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12777.valid){
continue;
}
CheckValue<IkReal> x12778=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x12778.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12777.value)+(((1.5707963267949)*(x12778.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x12779=IKcos(j14);
IkReal x12780=IKsin(j14);
IkReal x12781=((1.0)*cj11);
IkReal x12782=(cj15*r20);
IkReal x12783=(cj15*r10);
IkReal x12784=(cj15*r00);
IkReal x12785=((1.0)*x12779);
IkReal x12786=(sj15*x12779);
IkReal x12787=((1.0)*x12780);
IkReal x12788=(sj15*x12780);
evalcond[0]=((((-1.0)*x12783*x12785))+((r11*x12786))+((r12*x12780)));
evalcond[1]=((((-1.0)*x12782*x12787))+((r21*x12788))+(((-1.0)*r22*x12785)));
evalcond[2]=(((r01*x12788))+(((-1.0)*x12784*x12787))+(((-1.0)*r02*x12785)));
evalcond[3]=((1.0)+(((-1.0)*x12783*x12787))+((r11*x12788))+(((-1.0)*r12*x12785)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x12782*x12785))+((r21*x12786))+((r22*x12780))+(((-1.0)*cj12*x12781)));
evalcond[5]=(((r01*x12786))+(((-1.0)*cj12*sj11))+(((-1.0)*x12784*x12785))+((r02*x12780))+(((-1.0)*sj12*x12781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12789=((-1.0)*r00);
IkReal x12791 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12791)==0){
continue;
}
IkReal x12790=pow(x12791,-0.5);
CheckValue<IkReal> x12792 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12789),IKFAST_ATAN2_MAGTHRESH);
if(!x12792.valid){
continue;
}
IkReal gconst18=((-1.0)*(x12792.value));
IkReal gconst19=(r01*x12790);
IkReal gconst20=(x12789*x12790);
CheckValue<IkReal> x12793 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12793.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x12793.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x12794=((-1.0)*r00);
IkReal x12795=x12790;
CheckValue<IkReal> x12797 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12794),IKFAST_ATAN2_MAGTHRESH);
if(!x12797.valid){
continue;
}
IkReal x12796=((-1.0)*(x12797.value));
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst19;
cj15=gconst20;
j15=x12796;
IkReal gconst18=x12796;
IkReal gconst19=(r01*x12795);
IkReal gconst20=(x12794*x12795);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x12798=((-1.0)*r00);
IkReal x12799=x12790;
CheckValue<IkReal> x12801 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x12798),IKFAST_ATAN2_MAGTHRESH);
if(!x12801.valid){
continue;
}
IkReal x12800=((-1.0)*(x12801.value));
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst19;
cj15=gconst20;
j15=x12800;
IkReal gconst18=x12800;
IkReal gconst19=(r01*x12799);
IkReal gconst20=(x12798*x12799);
CheckValue<IkReal> x12809=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x12809.valid){
continue;
}
IkReal x12802=x12809.value;
IkReal x12803=(sj13*x12802);
IkReal x12804=(r10*x12803);
IkReal x12805=(r20*x12803);
IkReal x12806=(r21*x12803);
IkReal x12807=(r11*x12803);
IkReal x12808=(r00*r01*x12803);
j14eval[0]=IKsign((((r20*x12804*(r00*r00)))+((r11*x12806*(r01*r01)))+((r12*r22*sj13))+((r00*r01*r21*x12804))+((r00*r01*r11*x12805))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12810=gconst20*gconst20;
IkReal x12811=gconst19*gconst19;
IkReal x12812=(r11*r21);
IkReal x12813=(r11*sj13);
IkReal x12814=(r10*r21);
IkReal x12815=((1.0)*cj13);
IkReal x12816=((1.0)*r10*r20);
IkReal x12817=(gconst19*gconst20*sj13);
IkReal x12818=(cj13*gconst19*gconst20);
CheckValue<IkReal> x12819 = IKatan2WithCheck(IkReal((((gconst20*r22*x12813))+((gconst19*r10*r22*sj13)))),IkReal((((x12812*x12817))+(((-1.0)*x12816*x12817))+((sj13*x12811*x12814))+(((-1.0)*r20*x12810*x12813)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12819.valid){
continue;
}
CheckValue<IkReal> x12820=IKPowWithIntegerCheck(IKsign((((x12814*x12818))+((r11*r20*x12818))+(((-1.0)*r10*r20*x12810*x12815))+(((-1.0)*r12*r22*x12815))+(((-1.0)*x12811*x12812*x12815)))),-1);
if(!x12820.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12819.value)+(((1.5707963267949)*(x12820.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12821=IKsin(j14);
IkReal x12822=IKcos(j14);
IkReal x12823=(sj11*sj12);
IkReal x12824=(gconst20*r01);
IkReal x12825=(cj11*sj12);
IkReal x12826=(cj13*gconst19);
IkReal x12827=(gconst20*r20);
IkReal x12828=((1.0)*cj12);
IkReal x12829=(gconst20*r00);
IkReal x12830=(r11*sj13);
IkReal x12831=(gconst19*sj13);
IkReal x12832=(cj13*gconst20);
IkReal x12833=(gconst20*r10);
IkReal x12834=(cj11*x12828);
IkReal x12835=(gconst19*x12821);
IkReal x12836=((1.0)*x12822);
IkReal x12837=((1.0)*x12821);
IkReal x12838=(cj13*x12821);
IkReal x12839=(sj13*x12822);
evalcond[0]=(((r21*x12835))+(((-1.0)*r22*x12836))+(((-1.0)*x12827*x12837)));
evalcond[1]=((((-1.0)*x12829*x12837))+(((-1.0)*r02*x12836))+((r01*x12835)));
evalcond[2]=((1.0)+(((-1.0)*x12833*x12837))+((r11*x12835))+(((-1.0)*r12*x12836)));
evalcond[3]=(((r10*x12831))+((gconst20*x12830))+((r12*x12838))+(((-1.0)*r10*x12832*x12836))+((r11*x12822*x12826)));
evalcond[4]=(((r10*x12826))+((r11*x12832))+(((-1.0)*r12*sj13*x12837))+((x12833*x12839))+(((-1.0)*gconst19*x12830*x12836)));
evalcond[5]=(((gconst20*r21*sj13))+x12825+((r22*x12838))+(((-1.0)*cj13*x12827*x12836))+((r20*x12831))+((cj12*sj11))+((r21*x12822*x12826)));
evalcond[6]=(x12823+((r01*x12822*x12826))+((r02*x12838))+(((-1.0)*x12834))+((r00*x12831))+((sj13*x12824))+(((-1.0)*cj13*x12829*x12836)));
evalcond[7]=(x12823+((r21*x12832))+(((-1.0)*x12834))+(((-1.0)*r22*sj13*x12837))+((x12827*x12839))+(((-1.0)*r21*x12831*x12836))+((r20*x12826)));
evalcond[8]=(((r00*x12826))+(((-1.0)*x12825))+(((-1.0)*r01*x12831*x12836))+((cj13*x12824))+(((-1.0)*r02*sj13*x12837))+(((-1.0)*sj11*x12828))+((x12829*x12839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12840=gconst20*gconst20;
IkReal x12841=gconst19*gconst19;
IkReal x12842=(gconst19*r21);
IkReal x12843=(r10*r20);
IkReal x12844=(cj13*gconst19);
IkReal x12845=((1.0)*gconst20);
IkReal x12846=(r11*r20);
IkReal x12847=(cj13*gconst20*r11);
IkReal x12848=(r21*x12841);
CheckValue<IkReal> x12849=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj13*x12842*x12845))+(((-1.0)*gconst19*sj13*x12845*x12846))+((r12*r22*sj13))+((r11*sj13*x12848))+((sj13*x12840*x12843)))),-1);
if(!x12849.valid){
continue;
}
CheckValue<IkReal> x12850 = IKatan2WithCheck(IkReal((((r10*r22*x12844))+((r22*x12847)))),IkReal((((x12842*x12847))+(((-1.0)*x12843*x12844*x12845))+((cj13*r10*x12848))+(((-1.0)*cj13*x12840*x12846)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12850.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12849.value)))+(x12850.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12851=IKsin(j14);
IkReal x12852=IKcos(j14);
IkReal x12853=(sj11*sj12);
IkReal x12854=(gconst20*r01);
IkReal x12855=(cj11*sj12);
IkReal x12856=(cj13*gconst19);
IkReal x12857=(gconst20*r20);
IkReal x12858=((1.0)*cj12);
IkReal x12859=(gconst20*r00);
IkReal x12860=(r11*sj13);
IkReal x12861=(gconst19*sj13);
IkReal x12862=(cj13*gconst20);
IkReal x12863=(gconst20*r10);
IkReal x12864=(cj11*x12858);
IkReal x12865=(gconst19*x12851);
IkReal x12866=((1.0)*x12852);
IkReal x12867=((1.0)*x12851);
IkReal x12868=(cj13*x12851);
IkReal x12869=(sj13*x12852);
evalcond[0]=(((r21*x12865))+(((-1.0)*r22*x12866))+(((-1.0)*x12857*x12867)));
evalcond[1]=((((-1.0)*x12859*x12867))+(((-1.0)*r02*x12866))+((r01*x12865)));
evalcond[2]=((1.0)+((r11*x12865))+(((-1.0)*x12863*x12867))+(((-1.0)*r12*x12866)));
evalcond[3]=(((gconst20*x12860))+(((-1.0)*r10*x12862*x12866))+((r12*x12868))+((r11*x12852*x12856))+((r10*x12861)));
evalcond[4]=(((r11*x12862))+((r10*x12856))+(((-1.0)*gconst19*x12860*x12866))+((x12863*x12869))+(((-1.0)*r12*sj13*x12867)));
evalcond[5]=(((gconst20*r21*sj13))+x12855+((r21*x12852*x12856))+((r20*x12861))+((r22*x12868))+((cj12*sj11))+(((-1.0)*cj13*x12857*x12866)));
evalcond[6]=(x12853+(((-1.0)*x12864))+((r01*x12852*x12856))+((sj13*x12854))+(((-1.0)*cj13*x12859*x12866))+((r00*x12861))+((r02*x12868)));
evalcond[7]=(x12853+((r21*x12862))+(((-1.0)*x12864))+(((-1.0)*r21*x12861*x12866))+((x12857*x12869))+((r20*x12856))+(((-1.0)*r22*sj13*x12867)));
evalcond[8]=((((-1.0)*sj11*x12858))+((r00*x12856))+((x12859*x12869))+(((-1.0)*x12855))+(((-1.0)*r02*sj13*x12867))+(((-1.0)*r01*x12861*x12866))+((cj13*x12854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12870 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12870.valid){
continue;
}
CheckValue<IkReal> x12871=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x12871.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12870.value)+(((1.5707963267949)*(x12871.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12872=IKsin(j14);
IkReal x12873=IKcos(j14);
IkReal x12874=(sj11*sj12);
IkReal x12875=(gconst20*r01);
IkReal x12876=(cj11*sj12);
IkReal x12877=(cj13*gconst19);
IkReal x12878=(gconst20*r20);
IkReal x12879=((1.0)*cj12);
IkReal x12880=(gconst20*r00);
IkReal x12881=(r11*sj13);
IkReal x12882=(gconst19*sj13);
IkReal x12883=(cj13*gconst20);
IkReal x12884=(gconst20*r10);
IkReal x12885=(cj11*x12879);
IkReal x12886=(gconst19*x12872);
IkReal x12887=((1.0)*x12873);
IkReal x12888=((1.0)*x12872);
IkReal x12889=(cj13*x12872);
IkReal x12890=(sj13*x12873);
evalcond[0]=((((-1.0)*r22*x12887))+(((-1.0)*x12878*x12888))+((r21*x12886)));
evalcond[1]=((((-1.0)*r02*x12887))+((r01*x12886))+(((-1.0)*x12880*x12888)));
evalcond[2]=((1.0)+(((-1.0)*r12*x12887))+(((-1.0)*x12884*x12888))+((r11*x12886)));
evalcond[3]=((((-1.0)*r10*x12883*x12887))+((gconst20*x12881))+((r12*x12889))+((r10*x12882))+((r11*x12873*x12877)));
evalcond[4]=(((r10*x12877))+(((-1.0)*r12*sj13*x12888))+(((-1.0)*gconst19*x12881*x12887))+((r11*x12883))+((x12884*x12890)));
evalcond[5]=(((gconst20*r21*sj13))+x12876+((r21*x12873*x12877))+((r20*x12882))+((r22*x12889))+(((-1.0)*cj13*x12878*x12887))+((cj12*sj11)));
evalcond[6]=(((r01*x12873*x12877))+x12874+(((-1.0)*x12885))+((r00*x12882))+(((-1.0)*cj13*x12880*x12887))+((sj13*x12875))+((r02*x12889)));
evalcond[7]=(x12874+(((-1.0)*x12885))+(((-1.0)*r22*sj13*x12888))+(((-1.0)*r21*x12882*x12887))+((x12878*x12890))+((r20*x12877))+((r21*x12883)));
evalcond[8]=((((-1.0)*sj11*x12879))+(((-1.0)*r02*sj13*x12888))+((r00*x12877))+(((-1.0)*r01*x12882*x12887))+(((-1.0)*x12876))+((cj13*x12875))+((x12880*x12890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12891=((-1.0)*r01);
IkReal x12893 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x12893)==0){
continue;
}
IkReal x12892=pow(x12893,-0.5);
CheckValue<IkReal> x12894 = IKatan2WithCheck(IkReal(x12891),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12894.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x12894.value))));
IkReal gconst22=(x12891*x12892);
IkReal gconst23=((1.0)*r00*x12892);
CheckValue<IkReal> x12895 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12895.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x12895.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x12896=((-1.0)*r01);
CheckValue<IkReal> x12899 = IKatan2WithCheck(IkReal(x12896),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12899.valid){
continue;
}
IkReal x12897=((1.0)*(x12899.value));
IkReal x12898=x12892;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst22;
cj15=gconst23;
j15=((3.14159265)+(((-1.0)*x12897)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12897)));
IkReal gconst22=(x12896*x12898);
IkReal gconst23=((1.0)*r00*x12898);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
IkReal x12900=((-1.0)*r01);
CheckValue<IkReal> x12903 = IKatan2WithCheck(IkReal(x12900),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x12903.valid){
continue;
}
IkReal x12901=((1.0)*(x12903.value));
IkReal x12902=x12892;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst22;
cj15=gconst23;
j15=((3.14159265)+(((-1.0)*x12901)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x12901)));
IkReal gconst22=(x12900*x12902);
IkReal gconst23=((1.0)*r00*x12902);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=r22;
j14eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12904=gconst22*gconst22;
IkReal x12905=gconst23*gconst23;
IkReal x12906=(r10*r21);
IkReal x12907=(r11*r20);
IkReal x12908=((1.0)*sj13);
IkReal x12909=(r11*r21);
IkReal x12910=(gconst22*gconst23);
IkReal x12911=((1.0)*cj13);
IkReal x12912=(r10*r20);
IkReal x12913=(r22*sj13);
IkReal x12914=(cj13*x12910);
CheckValue<IkReal> x12915 = IKatan2WithCheck(IkReal((((gconst23*r11*x12913))+((gconst22*r10*x12913)))),IkReal((((sj13*x12909*x12910))+(((-1.0)*x12908*x12910*x12912))+((sj13*x12904*x12906))+(((-1.0)*x12905*x12907*x12908)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12915.valid){
continue;
}
CheckValue<IkReal> x12916=IKPowWithIntegerCheck(IKsign((((x12907*x12914))+(((-1.0)*x12904*x12909*x12911))+(((-1.0)*r12*r22*x12911))+(((-1.0)*x12905*x12911*x12912))+((x12906*x12914)))),-1);
if(!x12916.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12915.value)+(((1.5707963267949)*(x12916.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12917=IKsin(j14);
IkReal x12918=IKcos(j14);
IkReal x12919=(sj11*sj12);
IkReal x12920=(gconst22*sj13);
IkReal x12921=((1.0)*cj11);
IkReal x12922=(cj13*r11);
IkReal x12923=((1.0)*sj13);
IkReal x12924=(cj13*gconst23);
IkReal x12925=(gconst23*sj13);
IkReal x12926=(cj12*sj11);
IkReal x12927=(cj13*gconst22);
IkReal x12928=(cj12*x12921);
IkReal x12929=((1.0)*x12918);
IkReal x12930=(gconst22*x12918);
IkReal x12931=(r22*x12917);
IkReal x12932=(r02*x12917);
IkReal x12933=(gconst22*x12917);
IkReal x12934=(r12*x12917);
IkReal x12935=((1.0)*gconst23*x12917);
evalcond[0]=((((-1.0)*r20*x12935))+((r21*x12933))+(((-1.0)*r22*x12929)));
evalcond[1]=((((-1.0)*r02*x12929))+(((-1.0)*r00*x12935))+((r01*x12933)));
evalcond[2]=((1.0)+((r11*x12933))+(((-1.0)*r12*x12929))+(((-1.0)*r10*x12935)));
evalcond[3]=(((r11*x12925))+((r10*x12920))+((cj13*x12934))+((x12922*x12930))+(((-1.0)*r10*x12924*x12929)));
evalcond[4]=(((gconst23*x12922))+((r10*x12927))+((r10*x12918*x12925))+(((-1.0)*r11*x12920*x12929))+(((-1.0)*x12923*x12934)));
evalcond[5]=(x12926+((r20*x12920))+(((-1.0)*r20*x12924*x12929))+((cj13*x12931))+((r21*x12918*x12927))+((r21*x12925))+((cj11*sj12)));
evalcond[6]=(x12919+(((-1.0)*r00*x12924*x12929))+((r01*x12918*x12927))+((cj13*x12932))+((r01*x12925))+((r00*x12920))+(((-1.0)*x12928)));
evalcond[7]=(x12919+((r20*x12927))+((r20*x12918*x12925))+(((-1.0)*r21*x12920*x12929))+(((-1.0)*x12923*x12931))+((r21*x12924))+(((-1.0)*x12928)));
evalcond[8]=((((-1.0)*r01*x12920*x12929))+(((-1.0)*sj12*x12921))+((r00*x12918*x12925))+(((-1.0)*x12926))+((r01*x12924))+((r00*x12927))+(((-1.0)*x12923*x12932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12936=((1.0)*gconst23);
CheckValue<IkReal> x12937 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x12936))+((gconst22*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12937.valid){
continue;
}
CheckValue<IkReal> x12938=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x12936)))),-1);
if(!x12938.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x12937.value)+(((1.5707963267949)*(x12938.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12939=IKsin(j14);
IkReal x12940=IKcos(j14);
IkReal x12941=(sj11*sj12);
IkReal x12942=(gconst22*sj13);
IkReal x12943=((1.0)*cj11);
IkReal x12944=(cj13*r11);
IkReal x12945=((1.0)*sj13);
IkReal x12946=(cj13*gconst23);
IkReal x12947=(gconst23*sj13);
IkReal x12948=(cj12*sj11);
IkReal x12949=(cj13*gconst22);
IkReal x12950=(cj12*x12943);
IkReal x12951=((1.0)*x12940);
IkReal x12952=(gconst22*x12940);
IkReal x12953=(r22*x12939);
IkReal x12954=(r02*x12939);
IkReal x12955=(gconst22*x12939);
IkReal x12956=(r12*x12939);
IkReal x12957=((1.0)*gconst23*x12939);
evalcond[0]=(((r21*x12955))+(((-1.0)*r22*x12951))+(((-1.0)*r20*x12957)));
evalcond[1]=(((r01*x12955))+(((-1.0)*r02*x12951))+(((-1.0)*r00*x12957)));
evalcond[2]=((1.0)+(((-1.0)*r12*x12951))+(((-1.0)*r10*x12957))+((r11*x12955)));
evalcond[3]=(((r10*x12942))+((x12944*x12952))+((r11*x12947))+((cj13*x12956))+(((-1.0)*r10*x12946*x12951)));
evalcond[4]=(((r10*x12949))+((r10*x12940*x12947))+((gconst23*x12944))+(((-1.0)*x12945*x12956))+(((-1.0)*r11*x12942*x12951)));
evalcond[5]=((((-1.0)*r20*x12946*x12951))+x12948+((r21*x12940*x12949))+((r21*x12947))+((cj13*x12953))+((r20*x12942))+((cj11*sj12)));
evalcond[6]=(x12941+(((-1.0)*r00*x12946*x12951))+((r00*x12942))+((r01*x12947))+(((-1.0)*x12950))+((cj13*x12954))+((r01*x12940*x12949)));
evalcond[7]=(x12941+(((-1.0)*r21*x12942*x12951))+((r20*x12940*x12947))+((r21*x12946))+(((-1.0)*x12950))+(((-1.0)*x12945*x12953))+((r20*x12949)));
evalcond[8]=(((r00*x12940*x12947))+((r00*x12949))+((r01*x12946))+(((-1.0)*sj12*x12943))+(((-1.0)*x12948))+(((-1.0)*x12945*x12954))+(((-1.0)*r01*x12942*x12951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x12958=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x12958.valid){
continue;
}
CheckValue<IkReal> x12959 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12959.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12958.value)))+(x12959.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x12960=IKsin(j14);
IkReal x12961=IKcos(j14);
IkReal x12962=(sj11*sj12);
IkReal x12963=(gconst22*sj13);
IkReal x12964=((1.0)*cj11);
IkReal x12965=(cj13*r11);
IkReal x12966=((1.0)*sj13);
IkReal x12967=(cj13*gconst23);
IkReal x12968=(gconst23*sj13);
IkReal x12969=(cj12*sj11);
IkReal x12970=(cj13*gconst22);
IkReal x12971=(cj12*x12964);
IkReal x12972=((1.0)*x12961);
IkReal x12973=(gconst22*x12961);
IkReal x12974=(r22*x12960);
IkReal x12975=(r02*x12960);
IkReal x12976=(gconst22*x12960);
IkReal x12977=(r12*x12960);
IkReal x12978=((1.0)*gconst23*x12960);
evalcond[0]=((((-1.0)*r20*x12978))+(((-1.0)*r22*x12972))+((r21*x12976)));
evalcond[1]=(((r01*x12976))+(((-1.0)*r00*x12978))+(((-1.0)*r02*x12972)));
evalcond[2]=((1.0)+(((-1.0)*r10*x12978))+(((-1.0)*r12*x12972))+((r11*x12976)));
evalcond[3]=(((cj13*x12977))+((r11*x12968))+((x12965*x12973))+((r10*x12963))+(((-1.0)*r10*x12967*x12972)));
evalcond[4]=((((-1.0)*x12966*x12977))+(((-1.0)*r11*x12963*x12972))+((r10*x12961*x12968))+((gconst23*x12965))+((r10*x12970)));
evalcond[5]=(x12969+(((-1.0)*r20*x12967*x12972))+((r20*x12963))+((cj13*x12974))+((r21*x12961*x12970))+((r21*x12968))+((cj11*sj12)));
evalcond[6]=(x12962+(((-1.0)*x12971))+((r00*x12963))+((r01*x12968))+((r01*x12961*x12970))+(((-1.0)*r00*x12967*x12972))+((cj13*x12975)));
evalcond[7]=(x12962+(((-1.0)*x12971))+(((-1.0)*x12966*x12974))+((r20*x12970))+(((-1.0)*r21*x12963*x12972))+((r21*x12967))+((r20*x12961*x12968)));
evalcond[8]=(((r01*x12967))+((r00*x12961*x12968))+(((-1.0)*x12966*x12975))+((r00*x12970))+(((-1.0)*r01*x12963*x12972))+(((-1.0)*x12969))+(((-1.0)*sj12*x12964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12980 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x12980)==0){
continue;
}
IkReal x12979=pow(x12980,-0.5);
CheckValue<IkReal> x12981 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12981.valid){
continue;
}
IkReal gconst24=((-1.0)*(x12981.value));
IkReal gconst25=((-1.0)*r21*x12979);
IkReal gconst26=(r20*x12979);
CheckValue<IkReal> x12982 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12982.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x12982.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
CheckValue<IkReal> x12985 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12985.valid){
continue;
}
IkReal x12983=((-1.0)*(x12985.value));
IkReal x12984=x12979;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst25;
cj15=gconst26;
j15=x12983;
IkReal gconst24=x12983;
IkReal gconst25=((-1.0)*r21*x12984);
IkReal gconst26=(r20*x12984);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
CheckValue<IkReal> x12988 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x12988.valid){
continue;
}
IkReal x12986=((-1.0)*(x12988.value));
IkReal x12987=x12979;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst25;
cj15=gconst26;
j15=x12986;
IkReal gconst24=x12986;
IkReal gconst25=((-1.0)*r21*x12987);
IkReal gconst26=(r20*x12987);
CheckValue<IkReal> x12996=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x12996.valid){
continue;
}
IkReal x12989=x12996.value;
IkReal x12990=(sj13*x12989);
IkReal x12991=(r01*x12990);
IkReal x12992=(r11*x12990);
IkReal x12993=(r10*x12990);
IkReal x12994=(r00*x12990);
IkReal x12995=(r20*r21*x12990);
j14eval[0]=IKsign((((r11*x12991*(r21*r21)))+((r02*r12*sj13))+((r00*r20*r21*x12992))+((r10*r20*r21*x12991))+((r00*x12993*(r20*r20)))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x12997=gconst26*gconst26;
IkReal x12998=gconst25*gconst25;
IkReal x12999=(gconst25*r10);
IkReal x13000=(r02*sj13);
IkReal x13001=(cj13*r01);
IkReal x13002=((1.0)*r11);
IkReal x13003=((1.0)*r00);
IkReal x13004=(gconst26*sj13);
IkReal x13005=(gconst26*r11);
CheckValue<IkReal> x13006=IKPowWithIntegerCheck(IKsign((((cj13*gconst25*r00*x13005))+(((-1.0)*cj13*r10*x12997*x13003))+(((-1.0)*cj13*r02*r12))+((gconst26*x12999*x13001))+(((-1.0)*x12998*x13001*x13002)))),-1);
if(!x13006.valid){
continue;
}
CheckValue<IkReal> x13007 = IKatan2WithCheck(IkReal((((x13000*x13005))+((x12999*x13000)))),IkReal((((gconst25*r01*r11*x13004))+(((-1.0)*r00*sj13*x12997*x13002))+(((-1.0)*x12999*x13003*x13004))+((r01*r10*sj13*x12998)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13007.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13006.value)))+(x13007.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13008=IKsin(j14);
IkReal x13009=IKcos(j14);
IkReal x13010=(sj11*sj12);
IkReal x13011=((1.0)*cj12);
IkReal x13012=(cj11*sj12);
IkReal x13013=(gconst26*r01);
IkReal x13014=(gconst25*r21);
IkReal x13015=(gconst26*r00);
IkReal x13016=(gconst25*r20);
IkReal x13017=(gconst26*r11);
IkReal x13018=(cj13*gconst26);
IkReal x13019=(gconst26*r10);
IkReal x13020=(cj13*gconst25);
IkReal x13021=(gconst25*sj13);
IkReal x13022=(gconst26*r20);
IkReal x13023=(cj11*x13011);
IkReal x13024=((1.0)*x13008);
IkReal x13025=((1.0)*x13009);
IkReal x13026=(cj13*x13008);
IkReal x13027=(cj13*x13009);
IkReal x13028=(gconst25*x13008);
IkReal x13029=(sj13*x13009);
IkReal x13030=(x13021*x13025);
evalcond[0]=((((-1.0)*r22*x13025))+((x13008*x13014))+(((-1.0)*x13022*x13024)));
evalcond[1]=(((r01*x13028))+(((-1.0)*x13015*x13024))+(((-1.0)*r02*x13025)));
evalcond[2]=((1.0)+(((-1.0)*x13019*x13024))+((r11*x13028))+(((-1.0)*r12*x13025)));
evalcond[3]=(((r11*x13009*x13020))+((sj13*x13017))+(((-1.0)*r10*x13018*x13025))+((r12*x13026))+((r10*x13021)));
evalcond[4]=((((-1.0)*r11*x13030))+(((-1.0)*r12*sj13*x13024))+((cj13*x13017))+((x13019*x13029))+((r10*x13020)));
evalcond[5]=(((sj13*x13016))+((gconst26*r21*sj13))+x13012+((cj12*sj11))+((r22*x13026))+((x13014*x13027))+(((-1.0)*r20*x13018*x13025)));
evalcond[6]=(((r00*x13021))+(((-1.0)*x13023))+(((-1.0)*cj13*x13015*x13025))+((r02*x13026))+((sj13*x13013))+((r01*x13009*x13020))+x13010);
evalcond[7]=((((-1.0)*r22*sj13*x13024))+((r21*x13018))+(((-1.0)*x13023))+((x13022*x13029))+(((-1.0)*sj13*x13014*x13025))+x13010+((cj13*x13016)));
evalcond[8]=((((-1.0)*r01*x13030))+((r00*x13020))+(((-1.0)*r02*sj13*x13024))+(((-1.0)*x13012))+((x13015*x13029))+((cj13*x13013))+(((-1.0)*sj11*x13011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13031=gconst26*gconst26;
IkReal x13032=gconst25*gconst25;
IkReal x13033=(cj13*r10);
IkReal x13034=(r00*sj13);
IkReal x13035=(cj13*r11);
IkReal x13036=(r01*x13032);
IkReal x13037=(gconst25*gconst26*r11);
IkReal x13038=((1.0)*gconst25*gconst26);
CheckValue<IkReal> x13039=IKPowWithIntegerCheck(IKsign((((r10*x13031*x13034))+((r02*r12*sj13))+(((-1.0)*r01*r10*sj13*x13038))+(((-1.0)*x13034*x13037))+((r11*sj13*x13036)))),-1);
if(!x13039.valid){
continue;
}
CheckValue<IkReal> x13040 = IKatan2WithCheck(IkReal((((gconst26*r02*x13035))+((gconst25*r02*x13033)))),IkReal(((((-1.0)*r00*x13033*x13038))+((x13033*x13036))+(((-1.0)*r00*x13031*x13035))+((gconst25*gconst26*r01*x13035)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13040.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13039.value)))+(x13040.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13041=IKsin(j14);
IkReal x13042=IKcos(j14);
IkReal x13043=(sj11*sj12);
IkReal x13044=((1.0)*cj12);
IkReal x13045=(cj11*sj12);
IkReal x13046=(gconst26*r01);
IkReal x13047=(gconst25*r21);
IkReal x13048=(gconst26*r00);
IkReal x13049=(gconst25*r20);
IkReal x13050=(gconst26*r11);
IkReal x13051=(cj13*gconst26);
IkReal x13052=(gconst26*r10);
IkReal x13053=(cj13*gconst25);
IkReal x13054=(gconst25*sj13);
IkReal x13055=(gconst26*r20);
IkReal x13056=(cj11*x13044);
IkReal x13057=((1.0)*x13041);
IkReal x13058=((1.0)*x13042);
IkReal x13059=(cj13*x13041);
IkReal x13060=(cj13*x13042);
IkReal x13061=(gconst25*x13041);
IkReal x13062=(sj13*x13042);
IkReal x13063=(x13054*x13058);
evalcond[0]=(((x13041*x13047))+(((-1.0)*r22*x13058))+(((-1.0)*x13055*x13057)));
evalcond[1]=((((-1.0)*x13048*x13057))+(((-1.0)*r02*x13058))+((r01*x13061)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13058))+(((-1.0)*x13052*x13057))+((r11*x13061)));
evalcond[3]=(((r12*x13059))+((sj13*x13050))+((r11*x13042*x13053))+((r10*x13054))+(((-1.0)*r10*x13051*x13058)));
evalcond[4]=(((cj13*x13050))+((r10*x13053))+(((-1.0)*r11*x13063))+((x13052*x13062))+(((-1.0)*r12*sj13*x13057)));
evalcond[5]=(((sj13*x13049))+(((-1.0)*r20*x13051*x13058))+((r22*x13059))+((x13047*x13060))+((gconst26*r21*sj13))+x13045+((cj12*sj11)));
evalcond[6]=(((r02*x13059))+((r01*x13042*x13053))+((sj13*x13046))+x13043+((r00*x13054))+(((-1.0)*cj13*x13048*x13058))+(((-1.0)*x13056)));
evalcond[7]=(((x13055*x13062))+((cj13*x13049))+((r21*x13051))+x13043+(((-1.0)*r22*sj13*x13057))+(((-1.0)*sj13*x13047*x13058))+(((-1.0)*x13056)));
evalcond[8]=(((x13048*x13062))+(((-1.0)*r01*x13063))+(((-1.0)*x13045))+((cj13*x13046))+(((-1.0)*sj11*x13044))+(((-1.0)*r02*sj13*x13057))+((r00*x13053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13064=((1.0)*gconst26);
CheckValue<IkReal> x13065=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13064))+(((-1.0)*gconst25*r00)))),-1);
if(!x13065.valid){
continue;
}
CheckValue<IkReal> x13066 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13064))+((gconst25*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13066.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13065.value)))+(x13066.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13067=IKsin(j14);
IkReal x13068=IKcos(j14);
IkReal x13069=(sj11*sj12);
IkReal x13070=((1.0)*cj12);
IkReal x13071=(cj11*sj12);
IkReal x13072=(gconst26*r01);
IkReal x13073=(gconst25*r21);
IkReal x13074=(gconst26*r00);
IkReal x13075=(gconst25*r20);
IkReal x13076=(gconst26*r11);
IkReal x13077=(cj13*gconst26);
IkReal x13078=(gconst26*r10);
IkReal x13079=(cj13*gconst25);
IkReal x13080=(gconst25*sj13);
IkReal x13081=(gconst26*r20);
IkReal x13082=(cj11*x13070);
IkReal x13083=((1.0)*x13067);
IkReal x13084=((1.0)*x13068);
IkReal x13085=(cj13*x13067);
IkReal x13086=(cj13*x13068);
IkReal x13087=(gconst25*x13067);
IkReal x13088=(sj13*x13068);
IkReal x13089=(x13080*x13084);
evalcond[0]=(((x13067*x13073))+(((-1.0)*x13081*x13083))+(((-1.0)*r22*x13084)));
evalcond[1]=((((-1.0)*r02*x13084))+(((-1.0)*x13074*x13083))+((r01*x13087)));
evalcond[2]=((1.0)+((r11*x13087))+(((-1.0)*x13078*x13083))+(((-1.0)*r12*x13084)));
evalcond[3]=((((-1.0)*r10*x13077*x13084))+((r12*x13085))+((sj13*x13076))+((r11*x13068*x13079))+((r10*x13080)));
evalcond[4]=((((-1.0)*r11*x13089))+((r10*x13079))+(((-1.0)*r12*sj13*x13083))+((x13078*x13088))+((cj13*x13076)));
evalcond[5]=(((x13073*x13086))+((r22*x13085))+((gconst26*r21*sj13))+((sj13*x13075))+(((-1.0)*r20*x13077*x13084))+x13071+((cj12*sj11)));
evalcond[6]=((((-1.0)*x13082))+((r02*x13085))+((r01*x13068*x13079))+((sj13*x13072))+x13069+(((-1.0)*cj13*x13074*x13084))+((r00*x13080)));
evalcond[7]=((((-1.0)*x13082))+((r21*x13077))+(((-1.0)*r22*sj13*x13083))+(((-1.0)*sj13*x13073*x13084))+x13069+((x13081*x13088))+((cj13*x13075)));
evalcond[8]=((((-1.0)*sj11*x13070))+(((-1.0)*r02*sj13*x13083))+((r00*x13079))+((x13074*x13088))+(((-1.0)*r01*x13089))+(((-1.0)*x13071))+((cj13*x13072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13091 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13091)==0){
continue;
}
IkReal x13090=pow(x13091,-0.5);
CheckValue<IkReal> x13092 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13092.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13092.value))));
IkReal gconst28=((1.0)*r21*x13090);
IkReal gconst29=((-1.0)*r20*x13090);
CheckValue<IkReal> x13093 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13093.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x13093.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
CheckValue<IkReal> x13096 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13096.valid){
continue;
}
IkReal x13094=((1.0)*(x13096.value));
IkReal x13095=x13090;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13094)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13094)));
IkReal gconst28=((1.0)*r21*x13095);
IkReal gconst29=((-1.0)*r20*x13095);
j14eval[0]=0;
j14eval[1]=r02;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
CheckValue<IkReal> x13099 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13099.valid){
continue;
}
IkReal x13097=((1.0)*(x13099.value));
IkReal x13098=x13090;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13097)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13097)));
IkReal gconst28=((1.0)*r21*x13098);
IkReal gconst29=((-1.0)*r20*x13098);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
CheckValue<IkReal> x13102 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13102.valid){
continue;
}
IkReal x13100=((1.0)*(x13102.value));
IkReal x13101=x13090;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13100)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13100)));
IkReal gconst28=((1.0)*r21*x13101);
IkReal gconst29=((-1.0)*r20*x13101);
j14eval[0]=r02;
j14eval[1]=sj13;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
CheckValue<IkReal> x13105 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13105.valid){
continue;
}
IkReal x13103=((1.0)*(x13105.value));
IkReal x13104=x13090;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13103)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13103)));
IkReal gconst28=((1.0)*r21*x13104);
IkReal gconst29=((-1.0)*r20*x13104);
j14eval[0]=0;
j14eval[1]=r02;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
CheckValue<IkReal> x13108 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13108.valid){
continue;
}
IkReal x13106=((1.0)*(x13108.value));
IkReal x13107=x13090;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13106)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13106)));
IkReal gconst28=((1.0)*r21*x13107);
IkReal gconst29=((-1.0)*r20*x13107);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
CheckValue<IkReal> x13111 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13111.valid){
continue;
}
IkReal x13109=((1.0)*(x13111.value));
IkReal x13110=x13090;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13109)));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13109)));
IkReal gconst28=((1.0)*r21*x13110);
IkReal gconst29=((-1.0)*r20*x13110);
j14eval[0]=r12;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13112=(gconst29*r10);
IkReal x13113=(gconst28*r11);
CheckValue<IkReal> x13114=IKPowWithIntegerCheck(IKsign(((((-2.0)*x13112*x13113))+(r12*r12)+(x13112*x13112)+(x13113*x13113))),-1);
if(!x13114.valid){
continue;
}
CheckValue<IkReal> x13115 = IKatan2WithCheck(IkReal(((((-1.0)*x13113))+x13112)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13115.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13114.value)))+(x13115.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13116=IKsin(j14);
IkReal x13117=IKcos(j14);
IkReal x13118=((1.0)*cj11);
IkReal x13119=(gconst29*r10);
IkReal x13120=(gconst28*r11);
IkReal x13121=(gconst29*r00);
IkReal x13122=(gconst29*r20);
IkReal x13123=(gconst28*r01);
IkReal x13124=(gconst28*r21);
IkReal x13125=((1.0)*x13117);
IkReal x13126=((1.0)*x13116);
evalcond[0]=(((x13116*x13124))+(((-1.0)*x13122*x13126))+(((-1.0)*r22*x13125)));
evalcond[1]=((((-1.0)*r02*x13125))+((x13116*x13123))+(((-1.0)*x13121*x13126)));
evalcond[2]=((((-1.0)*x13120*x13125))+(((-1.0)*r12*x13126))+((x13117*x13119)));
evalcond[3]=((1.0)+((x13116*x13120))+(((-1.0)*r12*x13125))+(((-1.0)*x13119*x13126)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x13124*x13125))+((x13117*x13122))+(((-1.0)*r22*x13126))+(((-1.0)*cj12*x13118)));
evalcond[5]=((((-1.0)*r02*x13126))+(((-1.0)*sj12*x13118))+(((-1.0)*x13123*x13125))+((x13117*x13121))+(((-1.0)*cj12*sj11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13127=((1.0)*gconst29);
CheckValue<IkReal> x13128 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13127))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13128.valid){
continue;
}
CheckValue<IkReal> x13129=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13127))+(((-1.0)*gconst28*r00)))),-1);
if(!x13129.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13128.value)+(((1.5707963267949)*(x13129.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13130=IKsin(j14);
IkReal x13131=IKcos(j14);
IkReal x13132=((1.0)*cj11);
IkReal x13133=(gconst29*r10);
IkReal x13134=(gconst28*r11);
IkReal x13135=(gconst29*r00);
IkReal x13136=(gconst29*r20);
IkReal x13137=(gconst28*r01);
IkReal x13138=(gconst28*r21);
IkReal x13139=((1.0)*x13131);
IkReal x13140=((1.0)*x13130);
evalcond[0]=(((x13130*x13138))+(((-1.0)*r22*x13139))+(((-1.0)*x13136*x13140)));
evalcond[1]=(((x13130*x13137))+(((-1.0)*x13135*x13140))+(((-1.0)*r02*x13139)));
evalcond[2]=(((x13131*x13133))+(((-1.0)*x13134*x13139))+(((-1.0)*r12*x13140)));
evalcond[3]=((1.0)+((x13130*x13134))+(((-1.0)*r12*x13139))+(((-1.0)*x13133*x13140)));
evalcond[4]=(((sj11*sj12))+((x13131*x13136))+(((-1.0)*x13138*x13139))+(((-1.0)*r22*x13140))+(((-1.0)*cj12*x13132)));
evalcond[5]=(((x13131*x13135))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x13132))+(((-1.0)*x13137*x13139))+(((-1.0)*r02*x13140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13141=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13141.valid){
continue;
}
CheckValue<IkReal> x13142 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13142.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13141.value)))+(x13142.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13143=IKsin(j14);
IkReal x13144=IKcos(j14);
IkReal x13145=((1.0)*cj11);
IkReal x13146=(gconst29*r10);
IkReal x13147=(gconst28*r11);
IkReal x13148=(gconst29*r00);
IkReal x13149=(gconst29*r20);
IkReal x13150=(gconst28*r01);
IkReal x13151=(gconst28*r21);
IkReal x13152=((1.0)*x13144);
IkReal x13153=((1.0)*x13143);
evalcond[0]=((((-1.0)*r22*x13152))+(((-1.0)*x13149*x13153))+((x13143*x13151)));
evalcond[1]=((((-1.0)*x13148*x13153))+(((-1.0)*r02*x13152))+((x13143*x13150)));
evalcond[2]=((((-1.0)*r12*x13153))+(((-1.0)*x13147*x13152))+((x13144*x13146)));
evalcond[3]=((1.0)+(((-1.0)*x13146*x13153))+(((-1.0)*r12*x13152))+((x13143*x13147)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x13151*x13152))+((x13144*x13149))+(((-1.0)*cj12*x13145))+(((-1.0)*r22*x13153)));
evalcond[5]=(((x13144*x13148))+(((-1.0)*r02*x13153))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x13145))+(((-1.0)*x13150*x13152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
CheckValue<IkReal> x13156 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13156.valid){
continue;
}
IkReal x13154=((1.0)*(x13156.value));
IkReal x13155=x13090;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13154)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13154)));
IkReal gconst28=((1.0)*r21*x13155);
IkReal gconst29=((-1.0)*r20*x13155);
j14eval[0]=0;
j14eval[1]=r02;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
CheckValue<IkReal> x13159 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13159.valid){
continue;
}
IkReal x13157=((1.0)*(x13159.value));
IkReal x13158=x13090;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13157)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13157)));
IkReal gconst28=((1.0)*r21*x13158);
IkReal gconst29=((-1.0)*r20*x13158);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
CheckValue<IkReal> x13162 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13162.valid){
continue;
}
IkReal x13160=((1.0)*(x13162.value));
IkReal x13161=x13090;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13160)));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13160)));
IkReal gconst28=((1.0)*r21*x13161);
IkReal gconst29=((-1.0)*r20*x13161);
IkReal x13163=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13167=IKPowWithIntegerCheck(x13163,-1);
if(!x13167.valid){
continue;
}
IkReal x13164=x13167.value;
IkReal x13165=((1.0)*x13164);
IkReal x13166=((((-2.0)*r10*r11*r20*r21*x13164))+(((-1.0)*x13165*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x13165*(r10*r10)*(r20*r20))));
j14eval[0]=x13166;
j14eval[1]=r12;
j14eval[2]=x13163;
j14eval[3]=IKsign(x13166);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13168=(gconst28*r11);
IkReal x13169=(gconst29*r10);
CheckValue<IkReal> x13170=IKPowWithIntegerCheck(IKsign(((((2.0)*x13168*x13169))+(((-1.0)*(x13169*x13169)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13168*x13168))))),-1);
if(!x13170.valid){
continue;
}
CheckValue<IkReal> x13171 = IKatan2WithCheck(IkReal(((((-1.0)*x13169))+x13168)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13171.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13170.value)))+(x13171.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13172=IKcos(j14);
IkReal x13173=IKsin(j14);
IkReal x13174=((1.0)*cj11);
IkReal x13175=(gconst29*r10);
IkReal x13176=(gconst29*r00);
IkReal x13177=(gconst29*r20);
IkReal x13178=((1.0)*x13172);
IkReal x13179=((1.0)*x13173);
IkReal x13180=(gconst28*x13173);
IkReal x13181=(gconst28*x13172);
evalcond[0]=(((r11*x13181))+((r12*x13173))+(((-1.0)*x13175*x13178)));
evalcond[1]=(((r21*x13180))+(((-1.0)*r22*x13178))+(((-1.0)*x13177*x13179)));
evalcond[2]=(((r01*x13180))+(((-1.0)*r02*x13178))+(((-1.0)*x13176*x13179)));
evalcond[3]=((1.0)+((r11*x13180))+(((-1.0)*r12*x13178))+(((-1.0)*x13175*x13179)));
evalcond[4]=(((sj11*sj12))+((r21*x13181))+((r22*x13173))+(((-1.0)*cj12*x13174))+(((-1.0)*x13177*x13178)));
evalcond[5]=((((-1.0)*cj12*sj11))+((r01*x13181))+((r02*x13173))+(((-1.0)*sj12*x13174))+(((-1.0)*x13176*x13178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13182=((1.0)*gconst29);
CheckValue<IkReal> x13183=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13182))+(((-1.0)*gconst28*r00)))),-1);
if(!x13183.valid){
continue;
}
CheckValue<IkReal> x13184 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13182))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13184.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13183.value)))+(x13184.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13185=IKcos(j14);
IkReal x13186=IKsin(j14);
IkReal x13187=((1.0)*cj11);
IkReal x13188=(gconst29*r10);
IkReal x13189=(gconst29*r00);
IkReal x13190=(gconst29*r20);
IkReal x13191=((1.0)*x13185);
IkReal x13192=((1.0)*x13186);
IkReal x13193=(gconst28*x13186);
IkReal x13194=(gconst28*x13185);
evalcond[0]=(((r12*x13186))+((r11*x13194))+(((-1.0)*x13188*x13191)));
evalcond[1]=(((r21*x13193))+(((-1.0)*r22*x13191))+(((-1.0)*x13190*x13192)));
evalcond[2]=((((-1.0)*r02*x13191))+((r01*x13193))+(((-1.0)*x13189*x13192)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13191))+((r11*x13193))+(((-1.0)*x13188*x13192)));
evalcond[4]=(((sj11*sj12))+((r22*x13186))+(((-1.0)*cj12*x13187))+((r21*x13194))+(((-1.0)*x13190*x13191)));
evalcond[5]=(((r02*x13186))+(((-1.0)*sj12*x13187))+(((-1.0)*cj12*sj11))+((r01*x13194))+(((-1.0)*x13189*x13191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13195=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13195.valid){
continue;
}
CheckValue<IkReal> x13196 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13196.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13195.value)))+(x13196.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13197=IKcos(j14);
IkReal x13198=IKsin(j14);
IkReal x13199=((1.0)*cj11);
IkReal x13200=(gconst29*r10);
IkReal x13201=(gconst29*r00);
IkReal x13202=(gconst29*r20);
IkReal x13203=((1.0)*x13197);
IkReal x13204=((1.0)*x13198);
IkReal x13205=(gconst28*x13198);
IkReal x13206=(gconst28*x13197);
evalcond[0]=(((r12*x13198))+((r11*x13206))+(((-1.0)*x13200*x13203)));
evalcond[1]=((((-1.0)*x13202*x13204))+((r21*x13205))+(((-1.0)*r22*x13203)));
evalcond[2]=(((r01*x13205))+(((-1.0)*r02*x13203))+(((-1.0)*x13201*x13204)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13203))+((r11*x13205))+(((-1.0)*x13200*x13204)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*x13202*x13203))+(((-1.0)*cj12*x13199))+((r21*x13206))+((r22*x13198)));
evalcond[5]=(((r01*x13206))+((r02*x13198))+(((-1.0)*sj12*x13199))+(((-1.0)*cj12*sj11))+(((-1.0)*x13201*x13203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
CheckValue<IkReal> x13209 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13209.valid){
continue;
}
IkReal x13207=((1.0)*(x13209.value));
IkReal x13208=x13090;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13207)));
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13207)));
IkReal gconst28=((1.0)*r21*x13208);
IkReal gconst29=((-1.0)*r20*x13208);
j14eval[0]=0;
j14eval[1]=r02;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
CheckValue<IkReal> x13212 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13212.valid){
continue;
}
IkReal x13210=((1.0)*(x13212.value));
IkReal x13211=x13090;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13210)));
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13210)));
IkReal gconst28=((1.0)*r21*x13211);
IkReal gconst29=((-1.0)*r20*x13211);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[4];
CheckValue<IkReal> x13215 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13215.valid){
continue;
}
IkReal x13213=((1.0)*(x13215.value));
IkReal x13214=x13090;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13213)));
sj13=0;
cj13=1.0;
j13=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13213)));
IkReal gconst28=((1.0)*r21*x13214);
IkReal gconst29=((-1.0)*r20*x13214);
IkReal x13216=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13220=IKPowWithIntegerCheck(x13216,-1);
if(!x13220.valid){
continue;
}
IkReal x13217=x13220.value;
IkReal x13218=((1.0)*x13217);
IkReal x13219=((((-1.0)*x13218*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x13217))+(((-1.0)*x13218*(r11*r11)*(r21*r21))));
j14eval[0]=x13219;
j14eval[1]=r12;
j14eval[2]=x13216;
j14eval[3]=IKsign(x13219);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13221=(gconst28*r11);
IkReal x13222=(gconst29*r10);
CheckValue<IkReal> x13223 = IKatan2WithCheck(IkReal(((((-1.0)*x13222))+x13221)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13223.valid){
continue;
}
CheckValue<IkReal> x13224=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13222*x13222)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13221*x13221)))+(((2.0)*x13221*x13222)))),-1);
if(!x13224.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13223.value)+(((1.5707963267949)*(x13224.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13225=IKcos(j14);
IkReal x13226=IKsin(j14);
IkReal x13227=(gconst29*r10);
IkReal x13228=(gconst29*r00);
IkReal x13229=(gconst29*r20);
IkReal x13230=((1.0)*x13225);
IkReal x13231=((1.0)*x13226);
IkReal x13232=(gconst28*x13226);
IkReal x13233=(gconst28*x13225);
evalcond[0]=(((r11*x13233))+(((-1.0)*x13227*x13230))+((r12*x13226)));
evalcond[1]=((((-1.0)*x13229*x13231))+((r21*x13232))+(((-1.0)*r22*x13230)));
evalcond[2]=(((r01*x13232))+(((-1.0)*x13228*x13231))+(((-1.0)*r02*x13230)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13230))+((r11*x13232))+(((-1.0)*x13227*x13231)));
evalcond[4]=((((-1.0)*x13229*x13230))+((r22*x13226))+((r21*x13233))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r01*x13233))+(((-1.0)*x13228*x13230))+((r02*x13226))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13234=((1.0)*gconst29);
CheckValue<IkReal> x13235=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13234))+(((-1.0)*gconst28*r00)))),-1);
if(!x13235.valid){
continue;
}
CheckValue<IkReal> x13236 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13234))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13236.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13235.value)))+(x13236.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13237=IKcos(j14);
IkReal x13238=IKsin(j14);
IkReal x13239=(gconst29*r10);
IkReal x13240=(gconst29*r00);
IkReal x13241=(gconst29*r20);
IkReal x13242=((1.0)*x13237);
IkReal x13243=((1.0)*x13238);
IkReal x13244=(gconst28*x13238);
IkReal x13245=(gconst28*x13237);
evalcond[0]=(((r11*x13245))+((r12*x13238))+(((-1.0)*x13239*x13242)));
evalcond[1]=(((r21*x13244))+(((-1.0)*r22*x13242))+(((-1.0)*x13241*x13243)));
evalcond[2]=((((-1.0)*r02*x13242))+((r01*x13244))+(((-1.0)*x13240*x13243)));
evalcond[3]=((1.0)+((r11*x13244))+(((-1.0)*r12*x13242))+(((-1.0)*x13239*x13243)));
evalcond[4]=(((r21*x13245))+((r22*x13238))+((cj12*sj11))+(((-1.0)*x13241*x13242))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r02*x13238))+((r01*x13245))+(((-1.0)*cj11*cj12))+(((-1.0)*x13240*x13242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13246=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13246.valid){
continue;
}
CheckValue<IkReal> x13247 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13247.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13246.value)))+(x13247.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13248=IKcos(j14);
IkReal x13249=IKsin(j14);
IkReal x13250=(gconst29*r10);
IkReal x13251=(gconst29*r00);
IkReal x13252=(gconst29*r20);
IkReal x13253=((1.0)*x13248);
IkReal x13254=((1.0)*x13249);
IkReal x13255=(gconst28*x13249);
IkReal x13256=(gconst28*x13248);
evalcond[0]=(((r12*x13249))+((r11*x13256))+(((-1.0)*x13250*x13253)));
evalcond[1]=(((r21*x13255))+(((-1.0)*r22*x13253))+(((-1.0)*x13252*x13254)));
evalcond[2]=((((-1.0)*r02*x13253))+((r01*x13255))+(((-1.0)*x13251*x13254)));
evalcond[3]=((1.0)+((r11*x13255))+(((-1.0)*r12*x13253))+(((-1.0)*x13250*x13254)));
evalcond[4]=(((r21*x13256))+((r22*x13249))+((cj12*sj11))+(((-1.0)*x13252*x13253))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r02*x13249))+((r01*x13256))+(((-1.0)*x13251*x13253))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
CheckValue<IkReal> x13259 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13259.valid){
continue;
}
IkReal x13257=((1.0)*(x13259.value));
IkReal x13258=x13090;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13257)));
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13257)));
IkReal gconst28=((1.0)*r21*x13258);
IkReal gconst29=((-1.0)*r20*x13258);
j14eval[0]=0;
j14eval[1]=r02;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
CheckValue<IkReal> x13262 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13262.valid){
continue;
}
IkReal x13260=((1.0)*(x13262.value));
IkReal x13261=x13090;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13260)));
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13260)));
IkReal gconst28=((1.0)*r21*x13261);
IkReal gconst29=((-1.0)*r20*x13261);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
CheckValue<IkReal> x13265 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13265.valid){
continue;
}
IkReal x13263=((1.0)*(x13265.value));
IkReal x13264=x13090;
sj10=0;
cj10=1.0;
j10=0;
sj15=gconst28;
cj15=gconst29;
j15=((3.14159265)+(((-1.0)*x13263)));
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13263)));
IkReal gconst28=((1.0)*r21*x13264);
IkReal gconst29=((-1.0)*r20*x13264);
j14eval[0]=r12;
j14eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13266=(gconst29*r10);
IkReal x13267=(gconst28*r11);
CheckValue<IkReal> x13268=IKPowWithIntegerCheck(IKsign(((x13267*x13267)+(r12*r12)+(x13266*x13266)+(((-2.0)*x13266*x13267)))),-1);
if(!x13268.valid){
continue;
}
CheckValue<IkReal> x13269 = IKatan2WithCheck(IkReal(((((-1.0)*x13267))+x13266)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13269.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13268.value)))+(x13269.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13270=IKsin(j14);
IkReal x13271=IKcos(j14);
IkReal x13272=(gconst29*r10);
IkReal x13273=(gconst28*r11);
IkReal x13274=(gconst29*r00);
IkReal x13275=(gconst29*r20);
IkReal x13276=(gconst28*r01);
IkReal x13277=(gconst28*r21);
IkReal x13278=((1.0)*x13271);
IkReal x13279=((1.0)*x13270);
evalcond[0]=((((-1.0)*x13275*x13279))+(((-1.0)*r22*x13278))+((x13270*x13277)));
evalcond[1]=((((-1.0)*x13274*x13279))+(((-1.0)*r02*x13278))+((x13270*x13276)));
evalcond[2]=(((x13271*x13272))+(((-1.0)*x13273*x13278))+(((-1.0)*r12*x13279)));
evalcond[3]=((1.0)+(((-1.0)*x13272*x13279))+(((-1.0)*r12*x13278))+((x13270*x13273)));
evalcond[4]=(((x13271*x13275))+(((-1.0)*r22*x13279))+(((-1.0)*x13277*x13278))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x13271*x13274))+(((-1.0)*r02*x13279))+(((-1.0)*x13276*x13278))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13280=((1.0)*gconst29);
CheckValue<IkReal> x13281 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13280))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13281.valid){
continue;
}
CheckValue<IkReal> x13282=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13280)))),-1);
if(!x13282.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13281.value)+(((1.5707963267949)*(x13282.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13283=IKsin(j14);
IkReal x13284=IKcos(j14);
IkReal x13285=(gconst29*r10);
IkReal x13286=(gconst28*r11);
IkReal x13287=(gconst29*r00);
IkReal x13288=(gconst29*r20);
IkReal x13289=(gconst28*r01);
IkReal x13290=(gconst28*r21);
IkReal x13291=((1.0)*x13284);
IkReal x13292=((1.0)*x13283);
evalcond[0]=(((x13283*x13290))+(((-1.0)*r22*x13291))+(((-1.0)*x13288*x13292)));
evalcond[1]=((((-1.0)*x13287*x13292))+((x13283*x13289))+(((-1.0)*r02*x13291)));
evalcond[2]=(((x13284*x13285))+(((-1.0)*x13286*x13291))+(((-1.0)*r12*x13292)));
evalcond[3]=((1.0)+(((-1.0)*x13285*x13292))+((x13283*x13286))+(((-1.0)*r12*x13291)));
evalcond[4]=(((x13284*x13288))+((cj12*sj11))+(((-1.0)*r22*x13292))+((cj11*sj12))+(((-1.0)*x13290*x13291)));
evalcond[5]=(((sj11*sj12))+((x13284*x13287))+(((-1.0)*r02*x13292))+(((-1.0)*cj11*cj12))+(((-1.0)*x13289*x13291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13293=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13293.valid){
continue;
}
CheckValue<IkReal> x13294 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13294.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13293.value)))+(x13294.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13295=IKsin(j14);
IkReal x13296=IKcos(j14);
IkReal x13297=(gconst29*r10);
IkReal x13298=(gconst28*r11);
IkReal x13299=(gconst29*r00);
IkReal x13300=(gconst29*r20);
IkReal x13301=(gconst28*r01);
IkReal x13302=(gconst28*r21);
IkReal x13303=((1.0)*x13296);
IkReal x13304=((1.0)*x13295);
evalcond[0]=((((-1.0)*x13300*x13304))+(((-1.0)*r22*x13303))+((x13295*x13302)));
evalcond[1]=((((-1.0)*x13299*x13304))+(((-1.0)*r02*x13303))+((x13295*x13301)));
evalcond[2]=(((x13296*x13297))+(((-1.0)*x13298*x13303))+(((-1.0)*r12*x13304)));
evalcond[3]=((1.0)+(((-1.0)*x13297*x13304))+((x13295*x13298))+(((-1.0)*r12*x13303)));
evalcond[4]=((((-1.0)*x13302*x13303))+((cj12*sj11))+(((-1.0)*r22*x13304))+((cj11*sj12))+((x13296*x13300)));
evalcond[5]=(((sj11*sj12))+((x13296*x13299))+(((-1.0)*r02*x13304))+(((-1.0)*cj11*cj12))+(((-1.0)*x13301*x13303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j14array[2], cj14array[2], sj14array[2], tempj14array[1];
int numsolutions = 0;
for(int ij14 = 0; ij14 < numroots; ++ij14)
{
IkReal htj14 = zeror[ij14];
tempj14array[0]=((2.0)*(atan(htj14)));
for(int kj14 = 0; kj14 < 1; ++kj14)
{
j14array[numsolutions] = tempj14array[kj14];
if( j14array[numsolutions] > IKPI )
{
    j14array[numsolutions]-=IK2PI;
}
else if( j14array[numsolutions] < -IKPI )
{
    j14array[numsolutions]+=IK2PI;
}
sj14array[numsolutions] = IKsin(j14array[numsolutions]);
cj14array[numsolutions] = IKcos(j14array[numsolutions]);
numsolutions++;
}
}
bool j14valid[2]={true,true};
_nj14 = 2;
for(int ij14 = 0; ij14 < numsolutions; ++ij14)
    {
if( !j14valid[ij14] )
{
    continue;
}
    j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
htj14 = IKtan(j14/2);

_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < numsolutions; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13305=gconst29*gconst29;
IkReal x13306=gconst28*gconst28;
IkReal x13307=(gconst28*gconst29);
IkReal x13308=(r10*r21);
IkReal x13309=(cj13*r11);
IkReal x13310=(r11*sj13);
IkReal x13311=((1.0)*r10*r20);
CheckValue<IkReal> x13312=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj13*x13305*x13311))+(((-1.0)*cj13*r12*r22))+(((-1.0)*r21*x13306*x13309))+((cj13*x13307*x13308))+((r20*x13307*x13309)))),-1);
if(!x13312.valid){
continue;
}
CheckValue<IkReal> x13313 = IKatan2WithCheck(IkReal((((gconst29*r22*x13310))+((gconst28*r10*r22*sj13)))),IkReal(((((-1.0)*r20*x13305*x13310))+((sj13*x13306*x13308))+(((-1.0)*sj13*x13307*x13311))+((r21*x13307*x13310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13313.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13312.value)))+(x13313.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13314=IKsin(j14);
IkReal x13315=IKcos(j14);
IkReal x13316=(sj11*sj12);
IkReal x13317=(cj13*gconst29);
IkReal x13318=((1.0)*cj11);
IkReal x13319=(gconst29*r10);
IkReal x13320=(gconst28*r11);
IkReal x13321=(gconst29*r00);
IkReal x13322=(cj12*sj11);
IkReal x13323=(gconst28*sj13);
IkReal x13324=(gconst29*r20);
IkReal x13325=(cj13*gconst28);
IkReal x13326=(gconst29*sj13);
IkReal x13327=(gconst28*r01);
IkReal x13328=(gconst28*r21);
IkReal x13329=(cj12*x13318);
IkReal x13330=((1.0)*x13315);
IkReal x13331=((1.0)*x13314);
IkReal x13332=(cj13*x13315);
IkReal x13333=(cj13*x13314);
IkReal x13334=(sj13*x13315);
evalcond[0]=(((x13314*x13328))+(((-1.0)*r22*x13330))+(((-1.0)*x13324*x13331)));
evalcond[1]=(((x13314*x13327))+(((-1.0)*x13321*x13331))+(((-1.0)*r02*x13330)));
evalcond[2]=((1.0)+((x13314*x13320))+(((-1.0)*r12*x13330))+(((-1.0)*x13319*x13331)));
evalcond[3]=(((x13320*x13332))+((r10*x13323))+(((-1.0)*r10*x13317*x13330))+((r11*x13326))+((r12*x13333)));
evalcond[4]=((((-1.0)*r12*sj13*x13331))+((r11*x13317))+((r10*x13325))+((x13319*x13334))+(((-1.0)*sj13*x13320*x13330)));
evalcond[5]=(((r22*x13333))+((r20*x13323))+(((-1.0)*r20*x13317*x13330))+((r21*x13326))+((r21*x13315*x13325))+((cj11*sj12))+x13322);
evalcond[6]=(((r02*x13333))+((r01*x13315*x13325))+((r00*x13323))+((r01*x13326))+(((-1.0)*r00*x13317*x13330))+(((-1.0)*x13329))+x13316);
evalcond[7]=((((-1.0)*r21*x13323*x13330))+((r20*x13325))+((x13324*x13334))+(((-1.0)*x13329))+((r21*x13317))+x13316+(((-1.0)*r22*sj13*x13331)));
evalcond[8]=((((-1.0)*sj12*x13318))+(((-1.0)*r02*sj13*x13331))+((x13321*x13334))+(((-1.0)*x13322))+((r01*x13317))+(((-1.0)*r01*x13323*x13330))+((r00*x13325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13335=((1.0)*gconst29);
CheckValue<IkReal> x13336 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13335))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13336.valid){
continue;
}
CheckValue<IkReal> x13337=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13335))+(((-1.0)*gconst28*r00)))),-1);
if(!x13337.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13336.value)+(((1.5707963267949)*(x13337.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13338=IKsin(j14);
IkReal x13339=IKcos(j14);
IkReal x13340=(sj11*sj12);
IkReal x13341=(cj13*gconst29);
IkReal x13342=((1.0)*cj11);
IkReal x13343=(gconst29*r10);
IkReal x13344=(gconst28*r11);
IkReal x13345=(gconst29*r00);
IkReal x13346=(cj12*sj11);
IkReal x13347=(gconst28*sj13);
IkReal x13348=(gconst29*r20);
IkReal x13349=(cj13*gconst28);
IkReal x13350=(gconst29*sj13);
IkReal x13351=(gconst28*r01);
IkReal x13352=(gconst28*r21);
IkReal x13353=(cj12*x13342);
IkReal x13354=((1.0)*x13339);
IkReal x13355=((1.0)*x13338);
IkReal x13356=(cj13*x13339);
IkReal x13357=(cj13*x13338);
IkReal x13358=(sj13*x13339);
evalcond[0]=((((-1.0)*r22*x13354))+((x13338*x13352))+(((-1.0)*x13348*x13355)));
evalcond[1]=((((-1.0)*x13345*x13355))+(((-1.0)*r02*x13354))+((x13338*x13351)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13354))+(((-1.0)*x13343*x13355))+((x13338*x13344)));
evalcond[3]=(((r10*x13347))+((x13344*x13356))+(((-1.0)*r10*x13341*x13354))+((r11*x13350))+((r12*x13357)));
evalcond[4]=(((x13343*x13358))+((r10*x13349))+((r11*x13341))+(((-1.0)*r12*sj13*x13355))+(((-1.0)*sj13*x13344*x13354)));
evalcond[5]=(((r22*x13357))+(((-1.0)*r20*x13341*x13354))+((r21*x13350))+((r20*x13347))+((r21*x13339*x13349))+((cj11*sj12))+x13346);
evalcond[6]=(((r02*x13357))+((r01*x13339*x13349))+(((-1.0)*r00*x13341*x13354))+((r01*x13350))+((r00*x13347))+(((-1.0)*x13353))+x13340);
evalcond[7]=((((-1.0)*r22*sj13*x13355))+(((-1.0)*r21*x13347*x13354))+((r21*x13341))+((x13348*x13358))+(((-1.0)*x13353))+((r20*x13349))+x13340);
evalcond[8]=((((-1.0)*r02*sj13*x13355))+((x13345*x13358))+(((-1.0)*sj12*x13342))+(((-1.0)*x13346))+(((-1.0)*r01*x13347*x13354))+((r00*x13349))+((r01*x13341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13359=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13359.valid){
continue;
}
CheckValue<IkReal> x13360 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13360.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13359.value)))+(x13360.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13361=IKsin(j14);
IkReal x13362=IKcos(j14);
IkReal x13363=(sj11*sj12);
IkReal x13364=(cj13*gconst29);
IkReal x13365=((1.0)*cj11);
IkReal x13366=(gconst29*r10);
IkReal x13367=(gconst28*r11);
IkReal x13368=(gconst29*r00);
IkReal x13369=(cj12*sj11);
IkReal x13370=(gconst28*sj13);
IkReal x13371=(gconst29*r20);
IkReal x13372=(cj13*gconst28);
IkReal x13373=(gconst29*sj13);
IkReal x13374=(gconst28*r01);
IkReal x13375=(gconst28*r21);
IkReal x13376=(cj12*x13365);
IkReal x13377=((1.0)*x13362);
IkReal x13378=((1.0)*x13361);
IkReal x13379=(cj13*x13362);
IkReal x13380=(cj13*x13361);
IkReal x13381=(sj13*x13362);
evalcond[0]=(((x13361*x13375))+(((-1.0)*r22*x13377))+(((-1.0)*x13371*x13378)));
evalcond[1]=(((x13361*x13374))+(((-1.0)*x13368*x13378))+(((-1.0)*r02*x13377)));
evalcond[2]=((1.0)+(((-1.0)*x13366*x13378))+((x13361*x13367))+(((-1.0)*r12*x13377)));
evalcond[3]=(((r10*x13370))+((r11*x13373))+((r12*x13380))+((x13367*x13379))+(((-1.0)*r10*x13364*x13377)));
evalcond[4]=(((r10*x13372))+(((-1.0)*sj13*x13367*x13377))+((r11*x13364))+(((-1.0)*r12*sj13*x13378))+((x13366*x13381)));
evalcond[5]=((((-1.0)*r20*x13364*x13377))+((r21*x13362*x13372))+((r20*x13370))+((r22*x13380))+((cj11*sj12))+((r21*x13373))+x13369);
evalcond[6]=(((r00*x13370))+((r01*x13373))+((r01*x13362*x13372))+(((-1.0)*r00*x13364*x13377))+(((-1.0)*x13376))+((r02*x13380))+x13363);
evalcond[7]=((((-1.0)*r21*x13370*x13377))+((r20*x13372))+(((-1.0)*x13376))+((r21*x13364))+((x13371*x13381))+x13363+(((-1.0)*r22*sj13*x13378)));
evalcond[8]=((((-1.0)*x13369))+((r01*x13364))+((r00*x13372))+((x13368*x13381))+(((-1.0)*r02*sj13*x13378))+(((-1.0)*r01*x13370*x13377))+(((-1.0)*sj12*x13365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x13382=((-1.0)*pz);
sj10=0;
cj10=1.0;
j10=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13382);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13382);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13383=(r11*sj15);
IkReal x13384=((1.0)*cj15*r10);
j14eval[0]=((((-1.0)*x13384))+x13383);
j14eval[1]=((((-1.0)*cj13*x13384))+((cj13*x13383)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x13385=((-1.0)*pz);
sj10=0;
cj10=1.0;
j10=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13385);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13385);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13386=(r11*sj15);
IkReal x13387=(cj15*r10);
j14eval[0]=((((-1.0)*x13387))+x13386);
j14eval[1]=((((-1.0)*sj13*x13386))+((sj13*x13387)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x13388=((-1.0)*pz);
sj10=0;
cj10=1.0;
j10=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13388);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13388);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j14eval[0]=cj13;
j14eval[1]=r22;
j14eval[2]=(((cj13*r11*sj15))+(((-1.0)*cj13*cj15*r10)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x13389=((-1.0)*pz);
sj10=0;
cj10=1.0;
j10=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13389);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13389);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj13=0;
cj13=1.0;
j13=0;
IkReal x13390=((1.0)*cj15);
j14eval[0]=(((r11*sj15))+(((-1.0)*r10*x13390)));
j14eval[1]=((((-1.0)*r00*x13390))+((r01*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x13391=((-1.0)*pz);
sj10=0;
cj10=1.0;
j10=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13391);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13391);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj13=0;
cj13=1.0;
j13=0;
j14eval[0]=r22;
j14eval[1]=((((-1.0)*cj15*r00))+((r01*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13392=((1.0)*sj11);
CheckValue<IkReal> x13393=IKPowWithIntegerCheck(r22,-1);
if(!x13393.valid){
continue;
}
CheckValue<IkReal> x13394=IKPowWithIntegerCheck(((((-1.0)*cj15*r00))+((r01*sj15))),-1);
if(!x13394.valid){
continue;
}
if( IKabs(((x13393.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*x13392)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13394.value)*((((cj11*cj12))+(((-1.0)*sj12*x13392)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13393.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*x13392))))))+IKsqr(((x13394.value)*((((cj11*cj12))+(((-1.0)*sj12*x13392))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x13393.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*x13392))))), ((x13394.value)*((((cj11*cj12))+(((-1.0)*sj12*x13392))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13395=IKsin(j14);
IkReal x13396=IKcos(j14);
IkReal x13397=((1.0)*cj15*r10);
IkReal x13398=(sj15*x13395);
IkReal x13399=((1.0)*cj15*r00);
IkReal x13400=(sj15*x13396);
evalcond[0]=((-1.0)*r22*x13396);
evalcond[1]=(((r22*x13395))+((cj12*sj11))+((cj11*sj12)));
evalcond[2]=((((-1.0)*x13395*x13399))+((r01*x13398)));
evalcond[3]=(((r11*x13400))+(((-1.0)*x13396*x13397)));
evalcond[4]=((1.0)+((r11*x13398))+(((-1.0)*x13395*x13397)));
evalcond[5]=(((sj11*sj12))+((r01*x13400))+(((-1.0)*x13396*x13399))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13401=((1.0)*cj15);
CheckValue<IkReal> x13402=IKPowWithIntegerCheck((((r11*sj15))+(((-1.0)*r10*x13401))),-1);
if(!x13402.valid){
continue;
}
CheckValue<IkReal> x13403=IKPowWithIntegerCheck((((r01*sj15))+(((-1.0)*r00*x13401))),-1);
if(!x13403.valid){
continue;
}
if( IKabs(((-1.0)*(x13402.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13403.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13402.value)))+IKsqr(((x13403.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*(x13402.value)), ((x13403.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13404=IKsin(j14);
IkReal x13405=IKcos(j14);
IkReal x13406=((1.0)*cj15*r10);
IkReal x13407=(sj15*x13404);
IkReal x13408=((1.0)*cj15*r00);
IkReal x13409=(sj15*x13405);
evalcond[0]=((-1.0)*r22*x13405);
evalcond[1]=(((r22*x13404))+((cj12*sj11))+((cj11*sj12)));
evalcond[2]=(((r01*x13407))+(((-1.0)*x13404*x13408)));
evalcond[3]=((((-1.0)*x13405*x13406))+((r11*x13409)));
evalcond[4]=((1.0)+((r11*x13407))+(((-1.0)*x13404*x13406)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x13405*x13408))+((r01*x13409))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x13410=((-1.0)*pz);
sj10=0;
cj10=1.0;
j10=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13410);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13410);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j14eval[0]=r22;
j14eval[1]=(((cj15*r00))+(((-1.0)*r01*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x13411=((-1.0)*pz);
sj10=0;
cj10=1.0;
j10=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13411);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13411);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj13=0;
cj13=-1.0;
j13=3.14159265358979;
j14eval[0]=(((r11*sj15))+(((-1.0)*cj15*r10)));
j14eval[1]=(((cj15*r00))+(((-1.0)*r01*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13412=IKPowWithIntegerCheck((((r11*sj15))+(((-1.0)*cj15*r10))),-1);
if(!x13412.valid){
continue;
}
CheckValue<IkReal> x13413=IKPowWithIntegerCheck((((cj15*r00))+(((-1.0)*r01*sj15))),-1);
if(!x13413.valid){
continue;
}
if( IKabs(((-1.0)*(x13412.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13413.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13412.value)))+IKsqr(((x13413.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*(x13412.value)), ((x13413.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13414=IKsin(j14);
IkReal x13415=IKcos(j14);
IkReal x13416=(sj15*x13414);
IkReal x13417=(cj15*x13415);
IkReal x13418=((1.0)*cj15*x13414);
IkReal x13419=((1.0)*sj15*x13415);
evalcond[0]=((-1.0)*r22*x13415);
evalcond[1]=((((-1.0)*r22*x13414))+((cj12*sj11))+((cj11*sj12)));
evalcond[2]=((((-1.0)*r00*x13418))+((r01*x13416)));
evalcond[3]=((((-1.0)*r11*x13419))+((r10*x13417)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13418))+((r11*x13416)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r01*x13419))+((r00*x13417))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13420=IKPowWithIntegerCheck(r22,-1);
if(!x13420.valid){
continue;
}
CheckValue<IkReal> x13421=IKPowWithIntegerCheck((((cj15*r00))+(((-1.0)*r01*sj15))),-1);
if(!x13421.valid){
continue;
}
if( IKabs(((x13420.value)*((((cj12*sj11))+((cj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13421.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13420.value)*((((cj12*sj11))+((cj11*sj12))))))+IKsqr(((x13421.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x13420.value)*((((cj12*sj11))+((cj11*sj12))))), ((x13421.value)*(((((-1.0)*sj11*sj12))+((cj11*cj12))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13422=IKsin(j14);
IkReal x13423=IKcos(j14);
IkReal x13424=(sj15*x13422);
IkReal x13425=(cj15*x13423);
IkReal x13426=((1.0)*cj15*x13422);
IkReal x13427=((1.0)*sj15*x13423);
evalcond[0]=((-1.0)*r22*x13423);
evalcond[1]=((((-1.0)*r22*x13422))+((cj12*sj11))+((cj11*sj12)));
evalcond[2]=((((-1.0)*r00*x13426))+((r01*x13424)));
evalcond[3]=((((-1.0)*r11*x13427))+((r10*x13425)));
evalcond[4]=((1.0)+((r11*x13424))+(((-1.0)*r10*x13426)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r01*x13427))+((r00*x13425))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13428=((1.0)*r10);
CheckValue<IkReal> x13429=IKPowWithIntegerCheck(cj13,-1);
if(!x13429.valid){
continue;
}
CheckValue<IkReal> x13430=IKPowWithIntegerCheck(r22,-1);
if(!x13430.valid){
continue;
}
CheckValue<IkReal> x13431=IKPowWithIntegerCheck(((((-1.0)*cj13*cj15*x13428))+((cj13*r11*sj15))),-1);
if(!x13431.valid){
continue;
}
if( IKabs(((x13429.value)*(x13430.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13431.value)*(((((-1.0)*sj13*sj15*x13428))+(((-1.0)*cj15*r11*sj13)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13429.value)*(x13430.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*sj11))))))+IKsqr(((x13431.value)*(((((-1.0)*sj13*sj15*x13428))+(((-1.0)*cj15*r11*sj13))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x13429.value)*(x13430.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*sj11))))), ((x13431.value)*(((((-1.0)*sj13*sj15*x13428))+(((-1.0)*cj15*r11*sj13))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13432=IKsin(j14);
IkReal x13433=IKcos(j14);
IkReal x13434=(sj11*sj12);
IkReal x13435=((1.0)*sj13);
IkReal x13436=((1.0)*cj11);
IkReal x13437=(r00*sj15);
IkReal x13438=(cj13*cj15);
IkReal x13439=(cj12*sj11);
IkReal x13440=((1.0)*r10);
IkReal x13441=(r10*sj13);
IkReal x13442=(cj15*sj13);
IkReal x13443=((1.0)*r00);
IkReal x13444=(cj12*x13436);
IkReal x13445=(sj15*x13433);
IkReal x13446=(r22*x13432);
IkReal x13447=(cj15*x13432);
IkReal x13448=(sj15*x13432);
evalcond[0]=((-1.0)*r22*x13433);
evalcond[1]=(x13439+((cj13*x13446))+((cj11*sj12)));
evalcond[2]=(((r01*x13448))+(((-1.0)*x13443*x13447)));
evalcond[3]=((1.0)+(((-1.0)*x13440*x13447))+((r11*x13448)));
evalcond[4]=((((-1.0)*x13435*x13446))+x13434+(((-1.0)*x13444)));
evalcond[5]=((((-1.0)*x13433*x13438*x13440))+((cj13*r11*x13445))+((sj15*x13441))+((r11*x13442)));
evalcond[6]=((((-1.0)*r11*x13435*x13445))+((r11*x13438))+((cj15*x13433*x13441))+((cj13*r10*sj15)));
evalcond[7]=(x13434+(((-1.0)*x13444))+(((-1.0)*x13433*x13438*x13443))+((sj13*x13437))+((r01*x13442))+((cj13*r01*x13445)));
evalcond[8]=(((r01*x13438))+(((-1.0)*sj12*x13436))+(((-1.0)*r01*x13435*x13445))+(((-1.0)*x13439))+((cj13*x13437))+((r00*x13433*x13442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13449=(cj15*r10);
IkReal x13450=((1.0)*cj13);
IkReal x13451=(r11*sj15);
CheckValue<IkReal> x13452=IKPowWithIntegerCheck((x13451+(((-1.0)*x13449))),-1);
if(!x13452.valid){
continue;
}
CheckValue<IkReal> x13453=IKPowWithIntegerCheck(((((-1.0)*sj13*x13451))+((sj13*x13449))),-1);
if(!x13453.valid){
continue;
}
if( IKabs(((-1.0)*(x13452.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13453.value)*(((((-1.0)*cj15*r11*x13450))+(((-1.0)*r10*sj15*x13450)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13452.value)))+IKsqr(((x13453.value)*(((((-1.0)*cj15*r11*x13450))+(((-1.0)*r10*sj15*x13450))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*(x13452.value)), ((x13453.value)*(((((-1.0)*cj15*r11*x13450))+(((-1.0)*r10*sj15*x13450))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13454=IKsin(j14);
IkReal x13455=IKcos(j14);
IkReal x13456=(sj11*sj12);
IkReal x13457=((1.0)*sj13);
IkReal x13458=((1.0)*cj11);
IkReal x13459=(r00*sj15);
IkReal x13460=(cj13*cj15);
IkReal x13461=(cj12*sj11);
IkReal x13462=((1.0)*r10);
IkReal x13463=(r10*sj13);
IkReal x13464=(cj15*sj13);
IkReal x13465=((1.0)*r00);
IkReal x13466=(cj12*x13458);
IkReal x13467=(sj15*x13455);
IkReal x13468=(r22*x13454);
IkReal x13469=(cj15*x13454);
IkReal x13470=(sj15*x13454);
evalcond[0]=((-1.0)*r22*x13455);
evalcond[1]=(x13461+((cj13*x13468))+((cj11*sj12)));
evalcond[2]=((((-1.0)*x13465*x13469))+((r01*x13470)));
evalcond[3]=((1.0)+((r11*x13470))+(((-1.0)*x13462*x13469)));
evalcond[4]=(x13456+(((-1.0)*x13466))+(((-1.0)*x13457*x13468)));
evalcond[5]=(((sj15*x13463))+((r11*x13464))+((cj13*r11*x13467))+(((-1.0)*x13455*x13460*x13462)));
evalcond[6]=(((cj15*x13455*x13463))+(((-1.0)*r11*x13457*x13467))+((r11*x13460))+((cj13*r10*sj15)));
evalcond[7]=(x13456+((cj13*r01*x13467))+(((-1.0)*x13466))+(((-1.0)*x13455*x13460*x13465))+((sj13*x13459))+((r01*x13464)));
evalcond[8]=(((r00*x13455*x13464))+(((-1.0)*x13461))+(((-1.0)*sj12*x13458))+((cj13*x13459))+(((-1.0)*r01*x13457*x13467))+((r01*x13460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13471=((1.0)*r10);
IkReal x13472=(r11*sj15);
CheckValue<IkReal> x13473=IKPowWithIntegerCheck((x13472+(((-1.0)*cj15*x13471))),-1);
if(!x13473.valid){
continue;
}
CheckValue<IkReal> x13474=IKPowWithIntegerCheck(((((-1.0)*cj13*cj15*x13471))+((cj13*x13472))),-1);
if(!x13474.valid){
continue;
}
if( IKabs(((-1.0)*(x13473.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13474.value)*(((((-1.0)*cj15*r11*sj13))+(((-1.0)*sj13*sj15*x13471)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13473.value)))+IKsqr(((x13474.value)*(((((-1.0)*cj15*r11*sj13))+(((-1.0)*sj13*sj15*x13471))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*(x13473.value)), ((x13474.value)*(((((-1.0)*cj15*r11*sj13))+(((-1.0)*sj13*sj15*x13471))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13475=IKsin(j14);
IkReal x13476=IKcos(j14);
IkReal x13477=(sj11*sj12);
IkReal x13478=((1.0)*sj13);
IkReal x13479=((1.0)*cj11);
IkReal x13480=(r00*sj15);
IkReal x13481=(cj13*cj15);
IkReal x13482=(cj12*sj11);
IkReal x13483=((1.0)*r10);
IkReal x13484=(r10*sj13);
IkReal x13485=(cj15*sj13);
IkReal x13486=((1.0)*r00);
IkReal x13487=(cj12*x13479);
IkReal x13488=(sj15*x13476);
IkReal x13489=(r22*x13475);
IkReal x13490=(cj15*x13475);
IkReal x13491=(sj15*x13475);
evalcond[0]=((-1.0)*r22*x13476);
evalcond[1]=(x13482+((cj13*x13489))+((cj11*sj12)));
evalcond[2]=((((-1.0)*x13486*x13490))+((r01*x13491)));
evalcond[3]=((1.0)+(((-1.0)*x13483*x13490))+((r11*x13491)));
evalcond[4]=(x13477+(((-1.0)*x13487))+(((-1.0)*x13478*x13489)));
evalcond[5]=(((cj13*r11*x13488))+((sj15*x13484))+((r11*x13485))+(((-1.0)*x13476*x13481*x13483)));
evalcond[6]=((((-1.0)*r11*x13478*x13488))+((cj15*x13476*x13484))+((cj13*r10*sj15))+((r11*x13481)));
evalcond[7]=(x13477+(((-1.0)*x13487))+((sj13*x13480))+((r01*x13485))+(((-1.0)*x13476*x13481*x13486))+((cj13*r01*x13488)));
evalcond[8]=((((-1.0)*x13482))+((cj13*x13480))+((r00*x13476*x13485))+((r01*x13481))+(((-1.0)*r01*x13478*x13488))+(((-1.0)*sj12*x13479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13492=cj15*cj15;
IkReal x13493=(r11*sj13);
IkReal x13494=(cj15*sj15);
IkReal x13495=(r10*sj13);
IkReal x13496=(cj13*r11);
IkReal x13497=(cj13*r10);
IkReal x13498=((1.0)*x13492);
CheckValue<IkReal> x13499=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj13*r12*r22))+((r21*x13492*x13496))+((r21*x13494*x13497))+(((-1.0)*r20*x13497*x13498))+((r20*x13494*x13496))+(((-1.0)*r21*x13496)))),-1);
if(!x13499.valid){
continue;
}
CheckValue<IkReal> x13500 = IKatan2WithCheck(IkReal((((r22*sj15*x13495))+((cj15*r22*x13493)))),IkReal(((((-1.0)*r20*x13493*x13498))+((r21*x13493*x13494))+(((-1.0)*r20*x13494*x13495))+((r21*x13495))+(((-1.0)*r21*x13495*x13498)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13500.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13499.value)))+(x13500.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13501=IKsin(j14);
IkReal x13502=IKcos(j14);
IkReal x13503=(sj11*sj12);
IkReal x13504=(cj13*r21);
IkReal x13505=((1.0)*sj13);
IkReal x13506=((1.0)*cj11);
IkReal x13507=(r00*sj15);
IkReal x13508=(cj13*cj15);
IkReal x13509=(cj12*sj11);
IkReal x13510=(sj13*sj15);
IkReal x13511=(cj15*sj13);
IkReal x13512=(cj13*sj15);
IkReal x13513=(cj12*x13506);
IkReal x13514=(sj15*x13502);
IkReal x13515=((1.0)*x13502);
IkReal x13516=(r22*x13501);
IkReal x13517=(r02*x13501);
IkReal x13518=(sj15*x13501);
IkReal x13519=(r12*x13501);
IkReal x13520=((1.0)*cj15*x13501);
evalcond[0]=(((r21*x13518))+(((-1.0)*r22*x13515))+(((-1.0)*r20*x13520)));
evalcond[1]=((((-1.0)*r00*x13520))+((r01*x13518))+(((-1.0)*r02*x13515)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13515))+(((-1.0)*r10*x13520))+((r11*x13518)));
evalcond[3]=(((r11*x13502*x13512))+((r11*x13511))+((cj13*x13519))+((r10*x13510))+(((-1.0)*r10*x13508*x13515)));
evalcond[4]=(((r10*x13502*x13511))+((r11*x13508))+(((-1.0)*r11*x13505*x13514))+(((-1.0)*x13505*x13519))+((r10*x13512)));
evalcond[5]=(((r21*x13511))+x13509+((r20*x13510))+(((-1.0)*r20*x13508*x13515))+((cj13*x13516))+((x13504*x13514))+((cj11*sj12)));
evalcond[6]=(x13503+((r01*x13502*x13512))+(((-1.0)*r00*x13508*x13515))+((sj13*x13507))+(((-1.0)*x13513))+((cj13*x13517))+((r01*x13511)));
evalcond[7]=(((cj15*x13504))+x13503+((r20*x13512))+(((-1.0)*r21*x13505*x13514))+((r20*x13502*x13511))+(((-1.0)*x13513))+(((-1.0)*x13505*x13516)));
evalcond[8]=((((-1.0)*r01*x13505*x13514))+((r00*x13502*x13511))+(((-1.0)*x13509))+(((-1.0)*sj12*x13506))+((cj13*x13507))+(((-1.0)*x13505*x13517))+((r01*x13508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13521=((1.0)*cj15);
CheckValue<IkReal> x13522 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13521))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13522.valid){
continue;
}
CheckValue<IkReal> x13523=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x13521)))),-1);
if(!x13523.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13522.value)+(((1.5707963267949)*(x13523.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13524=IKsin(j14);
IkReal x13525=IKcos(j14);
IkReal x13526=(sj11*sj12);
IkReal x13527=(cj13*r21);
IkReal x13528=((1.0)*sj13);
IkReal x13529=((1.0)*cj11);
IkReal x13530=(r00*sj15);
IkReal x13531=(cj13*cj15);
IkReal x13532=(cj12*sj11);
IkReal x13533=(sj13*sj15);
IkReal x13534=(cj15*sj13);
IkReal x13535=(cj13*sj15);
IkReal x13536=(cj12*x13529);
IkReal x13537=(sj15*x13525);
IkReal x13538=((1.0)*x13525);
IkReal x13539=(r22*x13524);
IkReal x13540=(r02*x13524);
IkReal x13541=(sj15*x13524);
IkReal x13542=(r12*x13524);
IkReal x13543=((1.0)*cj15*x13524);
evalcond[0]=((((-1.0)*r22*x13538))+((r21*x13541))+(((-1.0)*r20*x13543)));
evalcond[1]=(((r01*x13541))+(((-1.0)*r00*x13543))+(((-1.0)*r02*x13538)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13538))+((r11*x13541))+(((-1.0)*r10*x13543)));
evalcond[3]=(((cj13*x13542))+(((-1.0)*r10*x13531*x13538))+((r10*x13533))+((r11*x13534))+((r11*x13525*x13535)));
evalcond[4]=((((-1.0)*r11*x13528*x13537))+((r10*x13525*x13534))+(((-1.0)*x13528*x13542))+((r10*x13535))+((r11*x13531)));
evalcond[5]=(x13532+(((-1.0)*r20*x13531*x13538))+((r20*x13533))+((x13527*x13537))+((cj13*x13539))+((r21*x13534))+((cj11*sj12)));
evalcond[6]=(x13526+((cj13*x13540))+((r01*x13525*x13535))+(((-1.0)*r00*x13531*x13538))+(((-1.0)*x13536))+((r01*x13534))+((sj13*x13530)));
evalcond[7]=(x13526+((r20*x13535))+(((-1.0)*x13528*x13539))+(((-1.0)*x13536))+(((-1.0)*r21*x13528*x13537))+((r20*x13525*x13534))+((cj15*x13527)));
evalcond[8]=((((-1.0)*x13532))+((cj13*x13530))+((r00*x13525*x13534))+(((-1.0)*sj12*x13529))+(((-1.0)*r01*x13528*x13537))+((r01*x13531))+(((-1.0)*x13528*x13540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13544 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*cj15*r00))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13544.valid){
continue;
}
CheckValue<IkReal> x13545=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x13545.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13544.value)+(((1.5707963267949)*(x13545.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13546=IKsin(j14);
IkReal x13547=IKcos(j14);
IkReal x13548=(sj11*sj12);
IkReal x13549=(cj13*r21);
IkReal x13550=((1.0)*sj13);
IkReal x13551=((1.0)*cj11);
IkReal x13552=(r00*sj15);
IkReal x13553=(cj13*cj15);
IkReal x13554=(cj12*sj11);
IkReal x13555=(sj13*sj15);
IkReal x13556=(cj15*sj13);
IkReal x13557=(cj13*sj15);
IkReal x13558=(cj12*x13551);
IkReal x13559=(sj15*x13547);
IkReal x13560=((1.0)*x13547);
IkReal x13561=(r22*x13546);
IkReal x13562=(r02*x13546);
IkReal x13563=(sj15*x13546);
IkReal x13564=(r12*x13546);
IkReal x13565=((1.0)*cj15*x13546);
evalcond[0]=(((r21*x13563))+(((-1.0)*r20*x13565))+(((-1.0)*r22*x13560)));
evalcond[1]=(((r01*x13563))+(((-1.0)*r02*x13560))+(((-1.0)*r00*x13565)));
evalcond[2]=((1.0)+(((-1.0)*r10*x13565))+((r11*x13563))+(((-1.0)*r12*x13560)));
evalcond[3]=(((r10*x13555))+((r11*x13556))+(((-1.0)*r10*x13553*x13560))+((r11*x13547*x13557))+((cj13*x13564)));
evalcond[4]=(((r10*x13557))+((r11*x13553))+(((-1.0)*r11*x13550*x13559))+((r10*x13547*x13556))+(((-1.0)*x13550*x13564)));
evalcond[5]=(x13554+((r21*x13556))+(((-1.0)*r20*x13553*x13560))+((r20*x13555))+((x13549*x13559))+((cj11*sj12))+((cj13*x13561)));
evalcond[6]=(((r01*x13547*x13557))+x13548+((sj13*x13552))+(((-1.0)*r00*x13553*x13560))+(((-1.0)*x13558))+((r01*x13556))+((cj13*x13562)));
evalcond[7]=(x13548+(((-1.0)*x13558))+(((-1.0)*r21*x13550*x13559))+((r20*x13547*x13556))+(((-1.0)*x13550*x13561))+((cj15*x13549))+((r20*x13557)));
evalcond[8]=((((-1.0)*sj12*x13551))+((cj13*x13552))+((r01*x13553))+(((-1.0)*x13550*x13562))+(((-1.0)*x13554))+(((-1.0)*r01*x13550*x13559))+((r00*x13547*x13556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x13566=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x13566;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x13566);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x13567=((1.0)*cj15);
IkReal x13568=((((-1.0)*r20*sj15))+(((-1.0)*r21*x13567)));
j14eval[0]=x13568;
j14eval[1]=IKsign(x13568);
j14eval[2]=((IKabs(r02))+(IKabs((((r01*sj15))+(((-1.0)*r00*x13567))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x13569=cj15*cj15;
IkReal x13570=(cj13*r21);
IkReal x13571=(cj15*sj15);
IkReal x13572=(cj13*r20);
IkReal x13573=((((-1.0)*r11*x13570))+((r11*x13571*x13572))+((r11*x13569*x13570))+(((-1.0)*cj13*r12*r22))+(((-1.0)*r10*x13569*x13572))+((r10*x13570*x13571)));
j14eval[0]=x13573;
j14eval[1]=IKsign(x13573);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x13574=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x13574;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x13574);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x13575=((1.0)*cj15);
IkReal x13576=((((-1.0)*r21*x13575))+(((-1.0)*r20*sj15)));
j14eval[0]=x13576;
j14eval[1]=IKsign(x13576);
j14eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x13575))+((r01*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x13577=r11*r11;
IkReal x13578=cj15*cj15;
IkReal x13579=(cj15*r10);
IkReal x13580=(r11*sj15);
IkReal x13581=(((x13577*x13578))+(((2.0)*x13579*x13580))+(((-1.0)*x13578*(r10*r10)))+(((-1.0)*x13577))+(((-1.0)*(r12*r12))));
j14eval[0]=x13581;
j14eval[1]=((IKabs((x13579+(((-1.0)*x13580)))))+(IKabs(r12)));
j14eval[2]=IKsign(x13581);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13582=r11*r11;
IkReal x13583=cj15*cj15;
IkReal x13584=(cj15*r10);
IkReal x13585=(r11*sj15);
CheckValue<IkReal> x13586=IKPowWithIntegerCheck(IKsign((((x13582*x13583))+(((-1.0)*x13582))+(((-1.0)*(r12*r12)))+(((-1.0)*x13583*(r10*r10)))+(((2.0)*x13584*x13585)))),-1);
if(!x13586.valid){
continue;
}
CheckValue<IkReal> x13587 = IKatan2WithCheck(IkReal((x13584+(((-1.0)*x13585)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13587.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13586.value)))+(x13587.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13588=IKsin(j14);
IkReal x13589=IKcos(j14);
IkReal x13590=(r11*sj15);
IkReal x13591=(cj15*r10);
IkReal x13592=(cj15*r00);
IkReal x13593=(r21*sj15);
IkReal x13594=(r01*sj15);
IkReal x13595=(cj15*r20);
IkReal x13596=((1.0)*x13589);
IkReal x13597=((1.0)*x13588);
evalcond[0]=(((x13588*x13593))+(((-1.0)*r22*x13596))+(((-1.0)*x13595*x13597)));
evalcond[1]=((((-1.0)*x13592*x13597))+((x13588*x13594))+(((-1.0)*r02*x13596)));
evalcond[2]=(((x13589*x13591))+(((-1.0)*r12*x13597))+(((-1.0)*x13590*x13596)));
evalcond[3]=((-1.0)+((x13588*x13590))+(((-1.0)*r12*x13596))+(((-1.0)*x13591*x13597)));
evalcond[4]=(((x13589*x13592))+((cj12*sj11))+(((-1.0)*x13594*x13596))+((cj11*sj12))+(((-1.0)*r02*x13597)));
evalcond[5]=(((sj11*sj12))+((x13589*x13595))+(((-1.0)*x13593*x13596))+(((-1.0)*r22*x13597))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13598=((1.0)*cj15);
CheckValue<IkReal> x13599=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15))+(((-1.0)*r21*x13598)))),-1);
if(!x13599.valid){
continue;
}
CheckValue<IkReal> x13600 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x13598))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13600.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13599.value)))+(x13600.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13601=IKsin(j14);
IkReal x13602=IKcos(j14);
IkReal x13603=(r11*sj15);
IkReal x13604=(cj15*r10);
IkReal x13605=(cj15*r00);
IkReal x13606=(r21*sj15);
IkReal x13607=(r01*sj15);
IkReal x13608=(cj15*r20);
IkReal x13609=((1.0)*x13602);
IkReal x13610=((1.0)*x13601);
evalcond[0]=((((-1.0)*x13608*x13610))+((x13601*x13606))+(((-1.0)*r22*x13609)));
evalcond[1]=((((-1.0)*r02*x13609))+((x13601*x13607))+(((-1.0)*x13605*x13610)));
evalcond[2]=((((-1.0)*x13603*x13609))+((x13602*x13604))+(((-1.0)*r12*x13610)));
evalcond[3]=((-1.0)+((x13601*x13603))+(((-1.0)*r12*x13609))+(((-1.0)*x13604*x13610)));
evalcond[4]=((((-1.0)*r02*x13610))+((cj12*sj11))+(((-1.0)*x13607*x13609))+((cj11*sj12))+((x13602*x13605)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x13606*x13609))+(((-1.0)*cj11*cj12))+(((-1.0)*r22*x13610))+((x13602*x13608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13611 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13611.valid){
continue;
}
CheckValue<IkReal> x13612=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x13612.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13611.value)+(((1.5707963267949)*(x13612.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13613=IKsin(j14);
IkReal x13614=IKcos(j14);
IkReal x13615=(r11*sj15);
IkReal x13616=(cj15*r10);
IkReal x13617=(cj15*r00);
IkReal x13618=(r21*sj15);
IkReal x13619=(r01*sj15);
IkReal x13620=(cj15*r20);
IkReal x13621=((1.0)*x13614);
IkReal x13622=((1.0)*x13613);
evalcond[0]=((((-1.0)*x13620*x13622))+(((-1.0)*r22*x13621))+((x13613*x13618)));
evalcond[1]=((((-1.0)*x13617*x13622))+((x13613*x13619))+(((-1.0)*r02*x13621)));
evalcond[2]=((((-1.0)*x13615*x13621))+((x13614*x13616))+(((-1.0)*r12*x13622)));
evalcond[3]=((-1.0)+(((-1.0)*x13616*x13622))+(((-1.0)*r12*x13621))+((x13613*x13615)));
evalcond[4]=(((x13614*x13617))+((cj12*sj11))+(((-1.0)*x13619*x13621))+(((-1.0)*r02*x13622))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*r22*x13622))+(((-1.0)*x13618*x13621))+((x13614*x13620))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x13623=(((cj15*r01))+((r00*sj15)));
j14eval[0]=x13623;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x13623);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x13624=((1.0)*cj15);
IkReal x13625=((((-1.0)*r20*sj15))+(((-1.0)*r21*x13624)));
j14eval[0]=x13625;
j14eval[1]=IKsign(x13625);
j14eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x13624))+((r01*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x13626=cj15*cj15;
IkReal x13627=r11*r11;
IkReal x13628=(r11*sj15);
IkReal x13629=(cj15*r10);
IkReal x13630=((r12*r12)+(((-1.0)*x13626*x13627))+x13627+((x13626*(r10*r10)))+(((-2.0)*x13628*x13629)));
j14eval[0]=x13630;
j14eval[1]=((IKabs(r12))+(IKabs((x13628+(((-1.0)*x13629))))));
j14eval[2]=IKsign(x13630);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13631=cj15*cj15;
IkReal x13632=r11*r11;
IkReal x13633=(r11*sj15);
IkReal x13634=(cj15*r10);
CheckValue<IkReal> x13635=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x13631*(r10*r10)))+x13632+(((-2.0)*x13633*x13634))+(((-1.0)*x13631*x13632)))),-1);
if(!x13635.valid){
continue;
}
CheckValue<IkReal> x13636 = IKatan2WithCheck(IkReal(((((-1.0)*x13634))+x13633)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13636.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13635.value)))+(x13636.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13637=IKcos(j14);
IkReal x13638=IKsin(j14);
IkReal x13639=(cj15*r20);
IkReal x13640=(cj15*r10);
IkReal x13641=(cj15*r00);
IkReal x13642=((1.0)*x13637);
IkReal x13643=(sj15*x13637);
IkReal x13644=((1.0)*x13638);
IkReal x13645=(sj15*x13638);
evalcond[0]=(((r12*x13638))+((r11*x13643))+(((-1.0)*x13640*x13642)));
evalcond[1]=((((-1.0)*x13639*x13644))+(((-1.0)*r22*x13642))+((r21*x13645)));
evalcond[2]=((((-1.0)*x13641*x13644))+((r01*x13645))+(((-1.0)*r02*x13642)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13642))+((r11*x13645))+(((-1.0)*x13640*x13644)));
evalcond[4]=((((-1.0)*x13641*x13642))+((r02*x13638))+((r01*x13643))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r22*x13638))+(((-1.0)*x13639*x13642))+(((-1.0)*cj11*cj12))+((r21*x13643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13646=((1.0)*cj15);
CheckValue<IkReal> x13647=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15))+(((-1.0)*r21*x13646)))),-1);
if(!x13647.valid){
continue;
}
CheckValue<IkReal> x13648 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj15))+(((-1.0)*r00*x13646)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13648.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13647.value)))+(x13648.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13649=IKcos(j14);
IkReal x13650=IKsin(j14);
IkReal x13651=(cj15*r20);
IkReal x13652=(cj15*r10);
IkReal x13653=(cj15*r00);
IkReal x13654=((1.0)*x13649);
IkReal x13655=(sj15*x13649);
IkReal x13656=((1.0)*x13650);
IkReal x13657=(sj15*x13650);
evalcond[0]=(((r12*x13650))+(((-1.0)*x13652*x13654))+((r11*x13655)));
evalcond[1]=((((-1.0)*r22*x13654))+((r21*x13657))+(((-1.0)*x13651*x13656)));
evalcond[2]=(((r01*x13657))+(((-1.0)*r02*x13654))+(((-1.0)*x13653*x13656)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13654))+(((-1.0)*x13652*x13656))+((r11*x13657)));
evalcond[4]=(((r01*x13655))+((r02*x13650))+(((-1.0)*x13653*x13654))+((cj12*sj11))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r21*x13655))+((r22*x13650))+(((-1.0)*x13651*x13654))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13658 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13658.valid){
continue;
}
CheckValue<IkReal> x13659=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x13659.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13658.value)+(((1.5707963267949)*(x13659.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x13660=IKcos(j14);
IkReal x13661=IKsin(j14);
IkReal x13662=(cj15*r20);
IkReal x13663=(cj15*r10);
IkReal x13664=(cj15*r00);
IkReal x13665=((1.0)*x13660);
IkReal x13666=(sj15*x13660);
IkReal x13667=((1.0)*x13661);
IkReal x13668=(sj15*x13661);
evalcond[0]=(((r12*x13661))+((r11*x13666))+(((-1.0)*x13663*x13665)));
evalcond[1]=((((-1.0)*r22*x13665))+(((-1.0)*x13662*x13667))+((r21*x13668)));
evalcond[2]=(((r01*x13668))+(((-1.0)*r02*x13665))+(((-1.0)*x13664*x13667)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13665))+((r11*x13668))+(((-1.0)*x13663*x13667)));
evalcond[4]=(((r02*x13661))+((r01*x13666))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*x13664*x13665)));
evalcond[5]=(((sj11*sj12))+((r22*x13661))+(((-1.0)*x13662*x13665))+((r21*x13666))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13670 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13670)==0){
continue;
}
IkReal x13669=pow(x13670,-0.5);
CheckValue<IkReal> x13671 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13671.valid){
continue;
}
IkReal gconst36=((-1.0)*(x13671.value));
IkReal gconst37=((-1.0)*r01*x13669);
IkReal gconst38=(r00*x13669);
CheckValue<IkReal> x13672 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13672.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13672.value)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
CheckValue<IkReal> x13675 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13675.valid){
continue;
}
IkReal x13673=((-1.0)*(x13675.value));
IkReal x13674=x13669;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj15=gconst37;
cj15=gconst38;
j15=x13673;
IkReal gconst36=x13673;
IkReal gconst37=((-1.0)*r01*x13674);
IkReal gconst38=(r00*x13674);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
CheckValue<IkReal> x13678 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13678.valid){
continue;
}
IkReal x13676=((-1.0)*(x13678.value));
IkReal x13677=x13669;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj15=gconst37;
cj15=gconst38;
j15=x13676;
IkReal gconst36=x13676;
IkReal gconst37=((-1.0)*r01*x13677);
IkReal gconst38=(r00*x13677);
CheckValue<IkReal> x13686=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13686.valid){
continue;
}
IkReal x13679=x13686.value;
IkReal x13680=(sj13*x13679);
IkReal x13681=(r10*x13680);
IkReal x13682=(r20*x13680);
IkReal x13683=(r21*x13680);
IkReal x13684=(r11*x13680);
IkReal x13685=(r00*r01*x13680);
j14eval[0]=IKsign((((r12*r22*sj13))+((r20*x13681*(r00*r00)))+((r11*x13683*(r01*r01)))+((r00*r01*r21*x13681))+((r00*r01*r11*x13682))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13687=gconst37*gconst37;
IkReal x13688=gconst38*gconst38;
IkReal x13689=(cj13*r21);
IkReal x13690=((1.0)*r11);
IkReal x13691=((1.0)*r20);
IkReal x13692=(r21*sj13);
IkReal x13693=(r22*sj13);
IkReal x13694=(gconst37*gconst38*r10);
IkReal x13695=(gconst37*gconst38*r11);
CheckValue<IkReal> x13696=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13687*x13689*x13690))+(((-1.0)*cj13*r12*r22))+(((-1.0)*cj13*r10*x13688*x13691))+((cj13*r20*x13695))+((x13689*x13694)))),-1);
if(!x13696.valid){
continue;
}
CheckValue<IkReal> x13697 = IKatan2WithCheck(IkReal((((gconst37*r10*x13693))+((gconst38*r11*x13693)))),IkReal((((x13692*x13695))+(((-1.0)*r20*sj13*x13688*x13690))+((r10*x13687*x13692))+(((-1.0)*sj13*x13691*x13694)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13697.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13696.value)))+(x13697.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13698=IKsin(j14);
IkReal x13699=IKcos(j14);
IkReal x13700=(cj12*sj11);
IkReal x13701=(cj11*sj12);
IkReal x13702=(cj11*cj12);
IkReal x13703=(gconst38*r20);
IkReal x13704=(gconst38*sj13);
IkReal x13705=(cj13*gconst37);
IkReal x13706=(gconst37*sj13);
IkReal x13707=(sj11*sj12);
IkReal x13708=(gconst38*r00);
IkReal x13709=(cj13*gconst38);
IkReal x13710=((1.0)*x13699);
IkReal x13711=((1.0)*x13698);
IkReal x13712=(cj13*x13698);
IkReal x13713=(gconst37*x13698);
IkReal x13714=(x13700+x13701);
evalcond[0]=(((r21*x13713))+(((-1.0)*r22*x13710))+(((-1.0)*x13703*x13711)));
evalcond[1]=(((r01*x13713))+(((-1.0)*r02*x13710))+(((-1.0)*x13708*x13711)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13710))+(((-1.0)*gconst38*r10*x13711))+((r11*x13713)));
evalcond[3]=(((r12*x13712))+((r10*x13706))+((r11*x13704))+((r11*x13699*x13705))+(((-1.0)*r10*x13709*x13710)));
evalcond[4]=(((r10*x13699*x13704))+(((-1.0)*r12*sj13*x13711))+((r10*x13705))+(((-1.0)*r11*x13706*x13710))+((r11*x13709)));
evalcond[5]=(((r21*x13704))+((r20*x13706))+x13714+((r21*x13699*x13705))+((r22*x13712))+(((-1.0)*cj13*x13703*x13710)));
evalcond[6]=(x13702+(((-1.0)*x13707))+(((-1.0)*cj13*x13708*x13710))+((r00*x13706))+((r01*x13704))+((r02*x13712))+((r01*x13699*x13705)));
evalcond[7]=(((r00*x13699*x13704))+x13714+(((-1.0)*r02*sj13*x13711))+((r00*x13705))+((r01*x13709))+(((-1.0)*r01*x13706*x13710)));
evalcond[8]=(((r21*x13709))+((r20*x13705))+x13707+(((-1.0)*x13702))+((sj13*x13699*x13703))+(((-1.0)*r21*x13706*x13710))+(((-1.0)*r22*sj13*x13711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13715=gconst38*gconst38;
IkReal x13716=gconst37*gconst37;
IkReal x13717=(r20*sj13);
IkReal x13718=((1.0)*r11);
IkReal x13719=(gconst37*gconst38);
IkReal x13720=(cj13*r20);
IkReal x13721=((1.0)*r10);
IkReal x13722=(r11*r21);
IkReal x13723=(cj13*r10);
CheckValue<IkReal> x13724 = IKatan2WithCheck(IkReal((((cj13*gconst38*r11*r22))+((gconst37*r22*x13723)))),IkReal(((((-1.0)*x13719*x13720*x13721))+(((-1.0)*x13715*x13718*x13720))+((cj13*x13719*x13722))+((r21*x13716*x13723)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13724.valid){
continue;
}
CheckValue<IkReal> x13725=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13717*x13718*x13719))+((sj13*x13716*x13722))+(((-1.0)*r21*sj13*x13719*x13721))+((r12*r22*sj13))+((r10*x13715*x13717)))),-1);
if(!x13725.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13724.value)+(((1.5707963267949)*(x13725.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13726=IKsin(j14);
IkReal x13727=IKcos(j14);
IkReal x13728=(cj12*sj11);
IkReal x13729=(cj11*sj12);
IkReal x13730=(cj11*cj12);
IkReal x13731=(gconst38*r20);
IkReal x13732=(gconst38*sj13);
IkReal x13733=(cj13*gconst37);
IkReal x13734=(gconst37*sj13);
IkReal x13735=(sj11*sj12);
IkReal x13736=(gconst38*r00);
IkReal x13737=(cj13*gconst38);
IkReal x13738=((1.0)*x13727);
IkReal x13739=((1.0)*x13726);
IkReal x13740=(cj13*x13726);
IkReal x13741=(gconst37*x13726);
IkReal x13742=(x13728+x13729);
evalcond[0]=((((-1.0)*r22*x13738))+(((-1.0)*x13731*x13739))+((r21*x13741)));
evalcond[1]=(((r01*x13741))+(((-1.0)*r02*x13738))+(((-1.0)*x13736*x13739)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13738))+(((-1.0)*gconst38*r10*x13739))+((r11*x13741)));
evalcond[3]=(((r10*x13734))+(((-1.0)*r10*x13737*x13738))+((r11*x13732))+((r11*x13727*x13733))+((r12*x13740)));
evalcond[4]=(((r10*x13733))+(((-1.0)*r11*x13734*x13738))+((r10*x13727*x13732))+(((-1.0)*r12*sj13*x13739))+((r11*x13737)));
evalcond[5]=(x13742+((r21*x13732))+((r21*x13727*x13733))+((r20*x13734))+((r22*x13740))+(((-1.0)*cj13*x13731*x13738)));
evalcond[6]=(((r00*x13734))+x13730+((r01*x13727*x13733))+(((-1.0)*cj13*x13736*x13738))+((r02*x13740))+(((-1.0)*x13735))+((r01*x13732)));
evalcond[7]=(((r00*x13733))+x13742+(((-1.0)*r01*x13734*x13738))+((r00*x13727*x13732))+(((-1.0)*r02*sj13*x13739))+((r01*x13737)));
evalcond[8]=((((-1.0)*r21*x13734*x13738))+x13735+((sj13*x13727*x13731))+((r21*x13737))+((r20*x13733))+(((-1.0)*r22*sj13*x13739))+(((-1.0)*x13730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13743=((1.0)*gconst38);
CheckValue<IkReal> x13744 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x13743))+((gconst37*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13744.valid){
continue;
}
CheckValue<IkReal> x13745=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x13743)))),-1);
if(!x13745.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13744.value)+(((1.5707963267949)*(x13745.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13746=IKsin(j14);
IkReal x13747=IKcos(j14);
IkReal x13748=(cj12*sj11);
IkReal x13749=(cj11*sj12);
IkReal x13750=(cj11*cj12);
IkReal x13751=(gconst38*r20);
IkReal x13752=(gconst38*sj13);
IkReal x13753=(cj13*gconst37);
IkReal x13754=(gconst37*sj13);
IkReal x13755=(sj11*sj12);
IkReal x13756=(gconst38*r00);
IkReal x13757=(cj13*gconst38);
IkReal x13758=((1.0)*x13747);
IkReal x13759=((1.0)*x13746);
IkReal x13760=(cj13*x13746);
IkReal x13761=(gconst37*x13746);
IkReal x13762=(x13748+x13749);
evalcond[0]=((((-1.0)*r22*x13758))+(((-1.0)*x13751*x13759))+((r21*x13761)));
evalcond[1]=((((-1.0)*x13756*x13759))+((r01*x13761))+(((-1.0)*r02*x13758)));
evalcond[2]=((-1.0)+((r11*x13761))+(((-1.0)*gconst38*r10*x13759))+(((-1.0)*r12*x13758)));
evalcond[3]=(((r11*x13752))+(((-1.0)*r10*x13757*x13758))+((r11*x13747*x13753))+((r10*x13754))+((r12*x13760)));
evalcond[4]=(((r11*x13757))+((r10*x13747*x13752))+(((-1.0)*r11*x13754*x13758))+((r10*x13753))+(((-1.0)*r12*sj13*x13759)));
evalcond[5]=((((-1.0)*cj13*x13751*x13758))+((r21*x13752))+x13762+((r20*x13754))+((r22*x13760))+((r21*x13747*x13753)));
evalcond[6]=(x13750+(((-1.0)*x13755))+((r01*x13747*x13753))+(((-1.0)*cj13*x13756*x13758))+((r00*x13754))+((r01*x13752))+((r02*x13760)));
evalcond[7]=((((-1.0)*r02*sj13*x13759))+x13762+((r00*x13747*x13752))+(((-1.0)*r01*x13754*x13758))+((r00*x13753))+((r01*x13757)));
evalcond[8]=(((r21*x13757))+((sj13*x13747*x13751))+x13755+(((-1.0)*x13750))+(((-1.0)*r21*x13754*x13758))+(((-1.0)*r22*sj13*x13759))+((r20*x13753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13764 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13764)==0){
continue;
}
IkReal x13763=pow(x13764,-0.5);
CheckValue<IkReal> x13765 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13765.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x13765.value))));
IkReal gconst40=((1.0)*r01*x13763);
IkReal gconst41=((-1.0)*r00*x13763);
CheckValue<IkReal> x13766 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13766.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13766.value)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
CheckValue<IkReal> x13769 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13769.valid){
continue;
}
IkReal x13767=((1.0)*(x13769.value));
IkReal x13768=x13763;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj15=gconst40;
cj15=gconst41;
j15=((3.14159265)+(((-1.0)*x13767)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x13767)));
IkReal gconst40=((1.0)*r01*x13768);
IkReal gconst41=((-1.0)*r00*x13768);
j14eval[0]=0;
j14eval[1]=r22;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
CheckValue<IkReal> x13772 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x13772.valid){
continue;
}
IkReal x13770=((1.0)*(x13772.value));
IkReal x13771=x13763;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj15=gconst40;
cj15=gconst41;
j15=((3.14159265)+(((-1.0)*x13770)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x13770)));
IkReal gconst40=((1.0)*r01*x13771);
IkReal gconst41=((-1.0)*r00*x13771);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13773=gconst40*gconst40;
IkReal x13774=gconst41*gconst41;
IkReal x13775=(cj13*r20);
IkReal x13776=(gconst41*r11);
IkReal x13777=(r20*sj13);
IkReal x13778=(r22*sj13);
IkReal x13779=(gconst40*r10);
IkReal x13780=(r21*sj13);
IkReal x13781=((1.0)*cj13);
IkReal x13782=((1.0)*x13774);
CheckValue<IkReal> x13783=IKPowWithIntegerCheck(IKsign((((gconst40*x13775*x13776))+((cj13*gconst41*r21*x13779))+(((-1.0)*r12*r22*x13781))+(((-1.0)*r10*x13775*x13782))+(((-1.0)*r11*r21*x13773*x13781)))),-1);
if(!x13783.valid){
continue;
}
CheckValue<IkReal> x13784 = IKatan2WithCheck(IkReal((((x13776*x13778))+((x13778*x13779)))),IkReal((((gconst40*x13776*x13780))+((r10*x13773*x13780))+(((-1.0)*gconst41*x13777*x13779))+(((-1.0)*r11*x13777*x13782)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13784.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13783.value)))+(x13784.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13785=IKsin(j14);
IkReal x13786=IKcos(j14);
IkReal x13787=(cj12*sj11);
IkReal x13788=(cj11*sj12);
IkReal x13789=(cj11*cj12);
IkReal x13790=(cj13*gconst41);
IkReal x13791=(cj13*gconst40);
IkReal x13792=((1.0)*sj13);
IkReal x13793=(r21*sj13);
IkReal x13794=(sj11*sj12);
IkReal x13795=(gconst40*sj13);
IkReal x13796=(gconst41*sj13);
IkReal x13797=((1.0)*x13786);
IkReal x13798=(gconst40*x13785);
IkReal x13799=(r22*x13785);
IkReal x13800=(r02*x13785);
IkReal x13801=(r12*x13785);
IkReal x13802=(x13787+x13788);
IkReal x13803=((1.0)*gconst41*x13785);
IkReal x13804=(x13786*x13796);
evalcond[0]=(((r21*x13798))+(((-1.0)*r22*x13797))+(((-1.0)*r20*x13803)));
evalcond[1]=((((-1.0)*r02*x13797))+((r01*x13798))+(((-1.0)*r00*x13803)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x13803))+((r11*x13798))+(((-1.0)*r12*x13797)));
evalcond[3]=(((cj13*x13801))+(((-1.0)*r10*x13790*x13797))+((r11*x13786*x13791))+((r11*x13796))+((r10*x13795)));
evalcond[4]=((((-1.0)*gconst40*r11*x13786*x13792))+(((-1.0)*x13792*x13801))+((r11*x13790))+((r10*x13791))+((r10*x13804)));
evalcond[5]=((((-1.0)*r20*x13790*x13797))+((gconst41*x13793))+x13802+((cj13*x13799))+((r21*x13786*x13791))+((r20*x13795)));
evalcond[6]=(((r01*x13796))+((r00*x13795))+(((-1.0)*r00*x13790*x13797))+x13789+((cj13*x13800))+(((-1.0)*x13794))+((r01*x13786*x13791)));
evalcond[7]=(((r01*x13790))+((r00*x13791))+((r00*x13804))+x13802+(((-1.0)*x13792*x13800))+(((-1.0)*gconst40*r01*x13786*x13792)));
evalcond[8]=(x13794+(((-1.0)*gconst40*r21*x13786*x13792))+(((-1.0)*x13792*x13799))+(((-1.0)*x13789))+((r21*x13790))+((r20*x13791))+((r20*x13804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13805=((1.0)*gconst41);
CheckValue<IkReal> x13806 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst40*r01))+(((-1.0)*r00*x13805)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13806.valid){
continue;
}
CheckValue<IkReal> x13807=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst40*r20))+(((-1.0)*r21*x13805)))),-1);
if(!x13807.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13806.value)+(((1.5707963267949)*(x13807.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13808=IKsin(j14);
IkReal x13809=IKcos(j14);
IkReal x13810=(cj12*sj11);
IkReal x13811=(cj11*sj12);
IkReal x13812=(cj11*cj12);
IkReal x13813=(cj13*gconst41);
IkReal x13814=(cj13*gconst40);
IkReal x13815=((1.0)*sj13);
IkReal x13816=(r21*sj13);
IkReal x13817=(sj11*sj12);
IkReal x13818=(gconst40*sj13);
IkReal x13819=(gconst41*sj13);
IkReal x13820=((1.0)*x13809);
IkReal x13821=(gconst40*x13808);
IkReal x13822=(r22*x13808);
IkReal x13823=(r02*x13808);
IkReal x13824=(r12*x13808);
IkReal x13825=(x13810+x13811);
IkReal x13826=((1.0)*gconst41*x13808);
IkReal x13827=(x13809*x13819);
evalcond[0]=((((-1.0)*r20*x13826))+(((-1.0)*r22*x13820))+((r21*x13821)));
evalcond[1]=(((r01*x13821))+(((-1.0)*r02*x13820))+(((-1.0)*r00*x13826)));
evalcond[2]=((-1.0)+((r11*x13821))+(((-1.0)*r10*x13826))+(((-1.0)*r12*x13820)));
evalcond[3]=(((r11*x13819))+((r11*x13809*x13814))+((r10*x13818))+(((-1.0)*r10*x13813*x13820))+((cj13*x13824)));
evalcond[4]=(((r11*x13813))+((r10*x13814))+((r10*x13827))+(((-1.0)*x13815*x13824))+(((-1.0)*gconst40*r11*x13809*x13815)));
evalcond[5]=(((gconst41*x13816))+x13825+(((-1.0)*r20*x13813*x13820))+((cj13*x13822))+((r21*x13809*x13814))+((r20*x13818)));
evalcond[6]=(((r01*x13809*x13814))+(((-1.0)*r00*x13813*x13820))+x13812+((r00*x13818))+((r01*x13819))+(((-1.0)*x13817))+((cj13*x13823)));
evalcond[7]=((((-1.0)*gconst40*r01*x13809*x13815))+x13825+((r00*x13814))+((r01*x13813))+((r00*x13827))+(((-1.0)*x13815*x13823)));
evalcond[8]=(x13817+((r21*x13813))+(((-1.0)*x13812))+(((-1.0)*x13815*x13822))+((r20*x13827))+((r20*x13814))+(((-1.0)*gconst40*r21*x13809*x13815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13828 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13828.valid){
continue;
}
CheckValue<IkReal> x13829=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x13829.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13828.value)+(((1.5707963267949)*(x13829.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13830=IKsin(j14);
IkReal x13831=IKcos(j14);
IkReal x13832=(cj12*sj11);
IkReal x13833=(cj11*sj12);
IkReal x13834=(cj11*cj12);
IkReal x13835=(cj13*gconst41);
IkReal x13836=(cj13*gconst40);
IkReal x13837=((1.0)*sj13);
IkReal x13838=(r21*sj13);
IkReal x13839=(sj11*sj12);
IkReal x13840=(gconst40*sj13);
IkReal x13841=(gconst41*sj13);
IkReal x13842=((1.0)*x13831);
IkReal x13843=(gconst40*x13830);
IkReal x13844=(r22*x13830);
IkReal x13845=(r02*x13830);
IkReal x13846=(r12*x13830);
IkReal x13847=(x13832+x13833);
IkReal x13848=((1.0)*gconst41*x13830);
IkReal x13849=(x13831*x13841);
evalcond[0]=(((r21*x13843))+(((-1.0)*r22*x13842))+(((-1.0)*r20*x13848)));
evalcond[1]=((((-1.0)*r02*x13842))+(((-1.0)*r00*x13848))+((r01*x13843)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x13842))+(((-1.0)*r10*x13848))+((r11*x13843)));
evalcond[3]=(((cj13*x13846))+((r11*x13831*x13836))+((r11*x13841))+((r10*x13840))+(((-1.0)*r10*x13835*x13842)));
evalcond[4]=((((-1.0)*x13837*x13846))+((r11*x13835))+((r10*x13836))+((r10*x13849))+(((-1.0)*gconst40*r11*x13831*x13837)));
evalcond[5]=(((cj13*x13844))+((r21*x13831*x13836))+x13847+(((-1.0)*r20*x13835*x13842))+((gconst41*x13838))+((r20*x13840)));
evalcond[6]=(((cj13*x13845))+x13834+(((-1.0)*r00*x13835*x13842))+((r01*x13831*x13836))+(((-1.0)*x13839))+((r01*x13841))+((r00*x13840)));
evalcond[7]=(((r01*x13835))+(((-1.0)*gconst40*r01*x13831*x13837))+(((-1.0)*x13837*x13845))+x13847+((r00*x13836))+((r00*x13849)));
evalcond[8]=((((-1.0)*x13837*x13844))+x13839+((r21*x13835))+(((-1.0)*gconst40*r21*x13831*x13837))+((r20*x13849))+((r20*x13836))+(((-1.0)*x13834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x13850=((-1.0)*px);
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13850);
rxp1_1=(px*r21);
rxp1_2=(r11*x13850);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13851=(r11*sj15);
IkReal x13852=((1.0)*cj15*r10);
j14eval[0]=(x13851+(((-1.0)*x13852)));
j14eval[1]=(((cj13*x13851))+(((-1.0)*cj13*x13852)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x13853=((-1.0)*px);
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13853);
rxp1_1=(px*r21);
rxp1_2=(r11*x13853);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x13854=(r11*sj15);
IkReal x13855=(cj15*r10);
j14eval[0]=((((-1.0)*x13855))+x13854);
j14eval[1]=((((-1.0)*sj13*x13854))+((sj13*x13855)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x13856=((-1.0)*px);
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13856);
rxp1_1=(px*r21);
rxp1_2=(r11*x13856);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=cj13;
j14eval[1]=r02;
j14eval[2]=(((cj13*r11*sj15))+(((-1.0)*cj13*cj15*r10)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13857=((1.0)*r10);
CheckValue<IkReal> x13858=IKPowWithIntegerCheck(cj13,-1);
if(!x13858.valid){
continue;
}
CheckValue<IkReal> x13859=IKPowWithIntegerCheck(r02,-1);
if(!x13859.valid){
continue;
}
CheckValue<IkReal> x13860=IKPowWithIntegerCheck((((cj13*r11*sj15))+(((-1.0)*cj13*cj15*x13857))),-1);
if(!x13860.valid){
continue;
}
if( IKabs(((x13858.value)*(x13859.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13860.value)*(((((-1.0)*sj13*sj15*x13857))+(((-1.0)*cj15*r11*sj13)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13858.value)*(x13859.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12))))))+IKsqr(((x13860.value)*(((((-1.0)*sj13*sj15*x13857))+(((-1.0)*cj15*r11*sj13))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x13858.value)*(x13859.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12))))), ((x13860.value)*(((((-1.0)*sj13*sj15*x13857))+(((-1.0)*cj15*r11*sj13))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13861=IKsin(j14);
IkReal x13862=IKcos(j14);
IkReal x13863=(cj12*sj11);
IkReal x13864=(cj11*sj12);
IkReal x13865=(r21*sj15);
IkReal x13866=(cj11*cj12);
IkReal x13867=(sj11*sj12);
IkReal x13868=(sj13*sj15);
IkReal x13869=((1.0)*sj13);
IkReal x13870=(r11*sj15);
IkReal x13871=(cj15*r21);
IkReal x13872=(cj13*sj15);
IkReal x13873=(cj15*sj13);
IkReal x13874=(cj13*x13862);
IkReal x13875=((1.0)*cj15*r10);
IkReal x13876=(r02*x13861);
IkReal x13877=((1.0)*cj15*r20);
IkReal x13878=(x13864+x13863);
evalcond[0]=((-1.0)*r02*x13862);
evalcond[1]=(((x13861*x13865))+(((-1.0)*x13861*x13877)));
evalcond[2]=((((-1.0)*x13867))+x13866+((cj13*x13876)));
evalcond[3]=(x13878+(((-1.0)*x13869*x13876)));
evalcond[4]=((-1.0)+((x13861*x13870))+(((-1.0)*x13861*x13875)));
evalcond[5]=(((x13870*x13874))+((r11*x13873))+(((-1.0)*x13874*x13875))+((r10*x13868)));
evalcond[6]=(((r10*x13862*x13873))+(((-1.0)*r11*x13862*x13868))+((cj13*cj15*r11))+((r10*x13872)));
evalcond[7]=(((sj13*x13871))+x13878+((x13865*x13874))+((r20*x13868))+(((-1.0)*x13874*x13877)));
evalcond[8]=((((-1.0)*x13866))+x13867+(((-1.0)*x13862*x13865*x13869))+((cj13*x13871))+((r20*x13872))+((r20*x13862*x13873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13879=(cj15*r10);
IkReal x13880=((1.0)*cj13);
IkReal x13881=(r11*sj15);
CheckValue<IkReal> x13882=IKPowWithIntegerCheck((x13881+(((-1.0)*x13879))),-1);
if(!x13882.valid){
continue;
}
CheckValue<IkReal> x13883=IKPowWithIntegerCheck((((sj13*x13879))+(((-1.0)*sj13*x13881))),-1);
if(!x13883.valid){
continue;
}
if( IKabs(x13882.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13883.value)*(((((-1.0)*r10*sj15*x13880))+(((-1.0)*cj15*r11*x13880)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13882.value)+IKsqr(((x13883.value)*(((((-1.0)*r10*sj15*x13880))+(((-1.0)*cj15*r11*x13880))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(x13882.value, ((x13883.value)*(((((-1.0)*r10*sj15*x13880))+(((-1.0)*cj15*r11*x13880))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13884=IKsin(j14);
IkReal x13885=IKcos(j14);
IkReal x13886=(cj12*sj11);
IkReal x13887=(cj11*sj12);
IkReal x13888=(r21*sj15);
IkReal x13889=(cj11*cj12);
IkReal x13890=(sj11*sj12);
IkReal x13891=(sj13*sj15);
IkReal x13892=((1.0)*sj13);
IkReal x13893=(r11*sj15);
IkReal x13894=(cj15*r21);
IkReal x13895=(cj13*sj15);
IkReal x13896=(cj15*sj13);
IkReal x13897=(cj13*x13885);
IkReal x13898=((1.0)*cj15*r10);
IkReal x13899=(r02*x13884);
IkReal x13900=((1.0)*cj15*r20);
IkReal x13901=(x13887+x13886);
evalcond[0]=((-1.0)*r02*x13885);
evalcond[1]=((((-1.0)*x13884*x13900))+((x13884*x13888)));
evalcond[2]=(x13889+(((-1.0)*x13890))+((cj13*x13899)));
evalcond[3]=(x13901+(((-1.0)*x13892*x13899)));
evalcond[4]=((-1.0)+(((-1.0)*x13884*x13898))+((x13884*x13893)));
evalcond[5]=(((r10*x13891))+((r11*x13896))+(((-1.0)*x13897*x13898))+((x13893*x13897)));
evalcond[6]=((((-1.0)*r11*x13885*x13891))+((r10*x13895))+((r10*x13885*x13896))+((cj13*cj15*r11)));
evalcond[7]=(x13901+((sj13*x13894))+((r20*x13891))+(((-1.0)*x13897*x13900))+((x13888*x13897)));
evalcond[8]=(x13890+((r20*x13895))+(((-1.0)*x13889))+(((-1.0)*x13885*x13888*x13892))+((cj13*x13894))+((r20*x13885*x13896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13902=((1.0)*r10);
IkReal x13903=(r11*sj15);
CheckValue<IkReal> x13904=IKPowWithIntegerCheck((x13903+(((-1.0)*cj15*x13902))),-1);
if(!x13904.valid){
continue;
}
CheckValue<IkReal> x13905=IKPowWithIntegerCheck((((cj13*x13903))+(((-1.0)*cj13*cj15*x13902))),-1);
if(!x13905.valid){
continue;
}
if( IKabs(x13904.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13905.value)*(((((-1.0)*sj13*sj15*x13902))+(((-1.0)*cj15*r11*sj13)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x13904.value)+IKsqr(((x13905.value)*(((((-1.0)*sj13*sj15*x13902))+(((-1.0)*cj15*r11*sj13))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(x13904.value, ((x13905.value)*(((((-1.0)*sj13*sj15*x13902))+(((-1.0)*cj15*r11*sj13))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13906=IKsin(j14);
IkReal x13907=IKcos(j14);
IkReal x13908=(cj12*sj11);
IkReal x13909=(cj11*sj12);
IkReal x13910=(r21*sj15);
IkReal x13911=(cj11*cj12);
IkReal x13912=(sj11*sj12);
IkReal x13913=(sj13*sj15);
IkReal x13914=((1.0)*sj13);
IkReal x13915=(r11*sj15);
IkReal x13916=(cj15*r21);
IkReal x13917=(cj13*sj15);
IkReal x13918=(cj15*sj13);
IkReal x13919=(cj13*x13907);
IkReal x13920=((1.0)*cj15*r10);
IkReal x13921=(r02*x13906);
IkReal x13922=((1.0)*cj15*r20);
IkReal x13923=(x13908+x13909);
evalcond[0]=((-1.0)*r02*x13907);
evalcond[1]=(((x13906*x13910))+(((-1.0)*x13906*x13922)));
evalcond[2]=(((cj13*x13921))+(((-1.0)*x13912))+x13911);
evalcond[3]=(x13923+(((-1.0)*x13914*x13921)));
evalcond[4]=((-1.0)+((x13906*x13915))+(((-1.0)*x13906*x13920)));
evalcond[5]=((((-1.0)*x13919*x13920))+((r10*x13913))+((x13915*x13919))+((r11*x13918)));
evalcond[6]=(((r10*x13907*x13918))+((r10*x13917))+(((-1.0)*r11*x13907*x13913))+((cj13*cj15*r11)));
evalcond[7]=((((-1.0)*x13919*x13922))+((sj13*x13916))+x13923+((x13910*x13919))+((r20*x13913)));
evalcond[8]=((((-1.0)*x13907*x13910*x13914))+(((-1.0)*x13911))+x13912+((r20*x13907*x13918))+((cj13*x13916))+((r20*x13917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13924=cj15*cj15;
IkReal x13925=(r11*sj13);
IkReal x13926=(cj15*sj15);
IkReal x13927=(r10*sj13);
IkReal x13928=(cj13*r11);
IkReal x13929=(cj13*r10);
IkReal x13930=((1.0)*x13924);
CheckValue<IkReal> x13931 = IKatan2WithCheck(IkReal((((r22*sj15*x13927))+((cj15*r22*x13925)))),IkReal(((((-1.0)*r20*x13925*x13930))+(((-1.0)*r21*x13927*x13930))+((r21*x13927))+(((-1.0)*r20*x13926*x13927))+((r21*x13925*x13926)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13931.valid){
continue;
}
CheckValue<IkReal> x13932=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13929*x13930))+((r21*x13926*x13929))+(((-1.0)*r21*x13928))+(((-1.0)*cj13*r12*r22))+((r21*x13924*x13928))+((r20*x13926*x13928)))),-1);
if(!x13932.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13931.value)+(((1.5707963267949)*(x13932.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13933=IKsin(j14);
IkReal x13934=IKcos(j14);
IkReal x13935=(cj12*sj11);
IkReal x13936=(cj11*sj12);
IkReal x13937=(cj13*r21);
IkReal x13938=((1.0)*sj13);
IkReal x13939=(cj11*cj12);
IkReal x13940=(r00*sj15);
IkReal x13941=(sj11*sj12);
IkReal x13942=(cj13*cj15);
IkReal x13943=(sj13*sj15);
IkReal x13944=(cj15*sj13);
IkReal x13945=(cj13*sj15);
IkReal x13946=(sj15*x13934);
IkReal x13947=((1.0)*x13934);
IkReal x13948=(r22*x13933);
IkReal x13949=(r02*x13933);
IkReal x13950=(sj15*x13933);
IkReal x13951=(r12*x13933);
IkReal x13952=(x13936+x13935);
IkReal x13953=((1.0)*cj15*x13933);
evalcond[0]=(((r21*x13950))+(((-1.0)*r22*x13947))+(((-1.0)*r20*x13953)));
evalcond[1]=((((-1.0)*r00*x13953))+((r01*x13950))+(((-1.0)*r02*x13947)));
evalcond[2]=((-1.0)+((r11*x13950))+(((-1.0)*r12*x13947))+(((-1.0)*r10*x13953)));
evalcond[3]=((((-1.0)*r10*x13942*x13947))+((r11*x13934*x13945))+((r10*x13943))+((cj13*x13951))+((r11*x13944)));
evalcond[4]=((((-1.0)*r11*x13938*x13946))+((r10*x13934*x13944))+((r10*x13945))+(((-1.0)*x13938*x13951))+((r11*x13942)));
evalcond[5]=(((cj13*x13948))+x13952+((r20*x13943))+((x13937*x13946))+(((-1.0)*r20*x13942*x13947))+((r21*x13944)));
evalcond[6]=((((-1.0)*x13941))+((r01*x13934*x13945))+((cj13*x13949))+x13939+(((-1.0)*r00*x13942*x13947))+((r01*x13944))+((sj13*x13940)));
evalcond[7]=(((r00*x13934*x13944))+((cj13*x13940))+x13952+(((-1.0)*r01*x13938*x13946))+((r01*x13942))+(((-1.0)*x13938*x13949)));
evalcond[8]=(x13941+((cj15*x13937))+((r20*x13945))+(((-1.0)*r21*x13938*x13946))+(((-1.0)*x13938*x13948))+((r20*x13934*x13944))+(((-1.0)*x13939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x13954=((1.0)*cj15);
CheckValue<IkReal> x13955=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13954))+(((-1.0)*r20*sj15)))),-1);
if(!x13955.valid){
continue;
}
CheckValue<IkReal> x13956 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x13954))+((r01*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13956.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13955.value)))+(x13956.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13957=IKsin(j14);
IkReal x13958=IKcos(j14);
IkReal x13959=(cj12*sj11);
IkReal x13960=(cj11*sj12);
IkReal x13961=(cj13*r21);
IkReal x13962=((1.0)*sj13);
IkReal x13963=(cj11*cj12);
IkReal x13964=(r00*sj15);
IkReal x13965=(sj11*sj12);
IkReal x13966=(cj13*cj15);
IkReal x13967=(sj13*sj15);
IkReal x13968=(cj15*sj13);
IkReal x13969=(cj13*sj15);
IkReal x13970=(sj15*x13958);
IkReal x13971=((1.0)*x13958);
IkReal x13972=(r22*x13957);
IkReal x13973=(r02*x13957);
IkReal x13974=(sj15*x13957);
IkReal x13975=(r12*x13957);
IkReal x13976=(x13959+x13960);
IkReal x13977=((1.0)*cj15*x13957);
evalcond[0]=((((-1.0)*r20*x13977))+(((-1.0)*r22*x13971))+((r21*x13974)));
evalcond[1]=((((-1.0)*r02*x13971))+(((-1.0)*r00*x13977))+((r01*x13974)));
evalcond[2]=((-1.0)+(((-1.0)*r10*x13977))+(((-1.0)*r12*x13971))+((r11*x13974)));
evalcond[3]=(((r11*x13958*x13969))+((r10*x13967))+((r11*x13968))+((cj13*x13975))+(((-1.0)*r10*x13966*x13971)));
evalcond[4]=((((-1.0)*r11*x13962*x13970))+((r10*x13969))+((r10*x13958*x13968))+((r11*x13966))+(((-1.0)*x13962*x13975)));
evalcond[5]=(x13976+(((-1.0)*r20*x13966*x13971))+((r20*x13967))+((cj13*x13972))+((x13961*x13970))+((r21*x13968)));
evalcond[6]=(((r01*x13958*x13969))+x13963+(((-1.0)*x13965))+((cj13*x13973))+(((-1.0)*r00*x13966*x13971))+((r01*x13968))+((sj13*x13964)));
evalcond[7]=(x13976+((cj13*x13964))+((r01*x13966))+(((-1.0)*r01*x13962*x13970))+(((-1.0)*x13962*x13973))+((r00*x13958*x13968)));
evalcond[8]=(((r20*x13958*x13968))+x13965+(((-1.0)*r21*x13962*x13970))+((r20*x13969))+(((-1.0)*x13963))+((cj15*x13961))+(((-1.0)*x13962*x13972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x13978 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13978.valid){
continue;
}
CheckValue<IkReal> x13979=IKPowWithIntegerCheck(IKsign((((cj15*r01))+((r00*sj15)))),-1);
if(!x13979.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x13978.value)+(((1.5707963267949)*(x13979.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x13980=IKsin(j14);
IkReal x13981=IKcos(j14);
IkReal x13982=(cj12*sj11);
IkReal x13983=(cj11*sj12);
IkReal x13984=(cj13*r21);
IkReal x13985=((1.0)*sj13);
IkReal x13986=(cj11*cj12);
IkReal x13987=(r00*sj15);
IkReal x13988=(sj11*sj12);
IkReal x13989=(cj13*cj15);
IkReal x13990=(sj13*sj15);
IkReal x13991=(cj15*sj13);
IkReal x13992=(cj13*sj15);
IkReal x13993=(sj15*x13981);
IkReal x13994=((1.0)*x13981);
IkReal x13995=(r22*x13980);
IkReal x13996=(r02*x13980);
IkReal x13997=(sj15*x13980);
IkReal x13998=(r12*x13980);
IkReal x13999=(x13982+x13983);
IkReal x14000=((1.0)*cj15*x13980);
evalcond[0]=(((r21*x13997))+(((-1.0)*r22*x13994))+(((-1.0)*r20*x14000)));
evalcond[1]=((((-1.0)*r00*x14000))+(((-1.0)*r02*x13994))+((r01*x13997)));
evalcond[2]=((-1.0)+((r11*x13997))+(((-1.0)*r12*x13994))+(((-1.0)*r10*x14000)));
evalcond[3]=(((r11*x13981*x13992))+((r11*x13991))+((r10*x13990))+(((-1.0)*r10*x13989*x13994))+((cj13*x13998)));
evalcond[4]=(((r11*x13989))+((r10*x13981*x13991))+((r10*x13992))+(((-1.0)*x13985*x13998))+(((-1.0)*r11*x13985*x13993)));
evalcond[5]=(x13999+((r21*x13991))+((r20*x13990))+(((-1.0)*r20*x13989*x13994))+((cj13*x13995))+((x13984*x13993)));
evalcond[6]=(x13986+((sj13*x13987))+(((-1.0)*r00*x13989*x13994))+(((-1.0)*x13988))+((r01*x13981*x13992))+((r01*x13991))+((cj13*x13996)));
evalcond[7]=(((r01*x13989))+((r00*x13981*x13991))+x13999+(((-1.0)*r01*x13985*x13993))+(((-1.0)*x13985*x13996))+((cj13*x13987)));
evalcond[8]=(((r20*x13981*x13991))+x13988+((cj15*x13984))+((r20*x13992))+(((-1.0)*x13985*x13995))+(((-1.0)*r21*x13985*x13993))+(((-1.0)*x13986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14001=((-1.0)*r00);
IkReal x14003 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14003)==0){
continue;
}
IkReal x14002=pow(x14003,-0.5);
CheckValue<IkReal> x14004 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14001),IKFAST_ATAN2_MAGTHRESH);
if(!x14004.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14004.value));
IkReal gconst13=(r01*x14002);
IkReal gconst14=(x14001*x14002);
CheckValue<IkReal> x14005 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14005.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x14005.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
IkReal x14006=((-1.0)*r00);
IkReal x14007=x14002;
CheckValue<IkReal> x14009 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14006),IKFAST_ATAN2_MAGTHRESH);
if(!x14009.valid){
continue;
}
IkReal x14008=((-1.0)*(x14009.value));
sj15=gconst13;
cj15=gconst14;
j15=x14008;
IkReal gconst12=x14008;
IkReal gconst13=(r01*x14007);
IkReal gconst14=(x14006*x14007);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14010=((1.0)*gconst13);
CheckValue<IkReal> x14011 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((gconst14*r10*sj10))+(((-1.0)*r11*sj10*x14010))+(((-1.0)*cj10*r01*x14010))+((cj10*gconst14*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14011.valid){
continue;
}
CheckValue<IkReal> x14012=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14010))+(((-1.0)*gconst14*r21)))),-1);
if(!x14012.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14011.value)+(((1.5707963267949)*(x14012.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14013=IKsin(j14);
IkReal x14014=IKcos(j14);
IkReal x14015=(r00*sj13);
IkReal x14016=((1.0)*cj11);
IkReal x14017=((1.0)*r20);
IkReal x14018=(cj10*sj12);
IkReal x14019=((1.0)*sj10);
IkReal x14020=(sj10*sj12);
IkReal x14021=(gconst13*sj13);
IkReal x14022=(gconst14*sj13);
IkReal x14023=(cj13*gconst13);
IkReal x14024=(cj12*sj11);
IkReal x14025=(cj13*gconst14);
IkReal x14026=((1.0)*cj13);
IkReal x14027=(gconst14*x14014);
IkReal x14028=((1.0)*x14014);
IkReal x14029=(cj13*x14013);
IkReal x14030=(gconst13*x14013);
IkReal x14031=((1.0)*gconst14*x14013);
IkReal x14032=((1.0)*sj13*x14013);
evalcond[0]=((((-1.0)*gconst14*x14013*x14017))+((r21*x14030))+(((-1.0)*r22*x14028)));
evalcond[1]=(((r11*x14030))+(((-1.0)*r12*x14028))+cj10+(((-1.0)*r10*x14031)));
evalcond[2]=((((-1.0)*x14019))+((r01*x14030))+(((-1.0)*r00*x14031))+(((-1.0)*r02*x14028)));
evalcond[3]=(((r22*x14029))+((r20*x14021))+((r21*x14014*x14023))+((r21*x14022))+x14024+(((-1.0)*x14014*x14017*x14025))+((cj11*sj12)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r21*x14021*x14028))+((r20*x14023))+((r21*x14025))+((r20*x14014*x14022))+(((-1.0)*r22*x14032))+(((-1.0)*cj12*x14016)));
evalcond[5]=((((-1.0)*cj10*cj12*x14016))+((r01*x14022))+((gconst13*x14015))+((r01*x14014*x14023))+((sj11*x14018))+(((-1.0)*r00*x14025*x14028))+((r02*x14029)));
evalcond[6]=(((sj11*x14020))+((r11*x14022))+((r11*x14014*x14023))+(((-1.0)*cj12*sj10*x14016))+((r10*x14021))+(((-1.0)*r10*x14025*x14028))+((r12*x14029)));
evalcond[7]=(((r01*x14025))+((r00*x14023))+(((-1.0)*r01*x14021*x14028))+(((-1.0)*r02*x14032))+(((-1.0)*x14016*x14018))+((x14015*x14027))+(((-1.0)*cj10*x14024)));
evalcond[8]=(((r11*x14025))+(((-1.0)*x14016*x14020))+((r10*x14014*x14022))+(((-1.0)*x14019*x14024))+((r10*x14023))+(((-1.0)*r11*x14021*x14028))+(((-1.0)*r12*x14032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14033=((1.0)*gconst14);
CheckValue<IkReal> x14034=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x14033)))),-1);
if(!x14034.valid){
continue;
}
CheckValue<IkReal> x14035 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal((((gconst13*r21*sj10))+(((-1.0)*r20*sj10*x14033)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14035.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14034.value)))+(x14035.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14036=IKsin(j14);
IkReal x14037=IKcos(j14);
IkReal x14038=(r00*sj13);
IkReal x14039=((1.0)*cj11);
IkReal x14040=((1.0)*r20);
IkReal x14041=(cj10*sj12);
IkReal x14042=((1.0)*sj10);
IkReal x14043=(sj10*sj12);
IkReal x14044=(gconst13*sj13);
IkReal x14045=(gconst14*sj13);
IkReal x14046=(cj13*gconst13);
IkReal x14047=(cj12*sj11);
IkReal x14048=(cj13*gconst14);
IkReal x14049=((1.0)*cj13);
IkReal x14050=(gconst14*x14037);
IkReal x14051=((1.0)*x14037);
IkReal x14052=(cj13*x14036);
IkReal x14053=(gconst13*x14036);
IkReal x14054=((1.0)*gconst14*x14036);
IkReal x14055=((1.0)*sj13*x14036);
evalcond[0]=((((-1.0)*gconst14*x14036*x14040))+(((-1.0)*r22*x14051))+((r21*x14053)));
evalcond[1]=((((-1.0)*r12*x14051))+((r11*x14053))+(((-1.0)*r10*x14054))+cj10);
evalcond[2]=((((-1.0)*r02*x14051))+(((-1.0)*x14042))+(((-1.0)*r00*x14054))+((r01*x14053)));
evalcond[3]=(((r21*x14037*x14046))+((r20*x14044))+((r21*x14045))+((r22*x14052))+x14047+(((-1.0)*x14037*x14040*x14048))+((cj11*sj12)));
evalcond[4]=(((sj11*sj12))+((r20*x14037*x14045))+((r20*x14046))+(((-1.0)*r21*x14044*x14051))+(((-1.0)*r22*x14055))+((r21*x14048))+(((-1.0)*cj12*x14039)));
evalcond[5]=(((sj11*x14041))+((r01*x14045))+((gconst13*x14038))+(((-1.0)*cj10*cj12*x14039))+((r02*x14052))+((r01*x14037*x14046))+(((-1.0)*r00*x14048*x14051)));
evalcond[6]=(((r11*x14045))+((sj11*x14043))+((r10*x14044))+((r12*x14052))+((r11*x14037*x14046))+(((-1.0)*r10*x14048*x14051))+(((-1.0)*cj12*sj10*x14039)));
evalcond[7]=(((r00*x14046))+(((-1.0)*cj10*x14047))+((r01*x14048))+(((-1.0)*r01*x14044*x14051))+(((-1.0)*r02*x14055))+(((-1.0)*x14039*x14041))+((x14038*x14050)));
evalcond[8]=(((r11*x14048))+(((-1.0)*x14042*x14047))+(((-1.0)*r12*x14055))+((r10*x14046))+((r10*x14037*x14045))+(((-1.0)*r11*x14044*x14051))+(((-1.0)*x14039*x14043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14056=((-1.0)*r01);
IkReal x14058 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14058)==0){
continue;
}
IkReal x14057=pow(x14058,-0.5);
CheckValue<IkReal> x14059 = IKatan2WithCheck(IkReal(x14056),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14059.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14059.value))));
IkReal gconst16=(x14056*x14057);
IkReal gconst17=((1.0)*r00*x14057);
CheckValue<IkReal> x14060 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14060.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x14060.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[5];
IkReal x14061=((-1.0)*r01);
CheckValue<IkReal> x14064 = IKatan2WithCheck(IkReal(x14061),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14064.valid){
continue;
}
IkReal x14062=((1.0)*(x14064.value));
IkReal x14063=x14057;
sj15=gconst16;
cj15=gconst17;
j15=((3.14159265)+(((-1.0)*x14062)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14062)));
IkReal gconst16=(x14061*x14063);
IkReal gconst17=((1.0)*r00*x14063);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=cj10;
j14eval[3]=r22;
j14eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  || IKabs(j14eval[4]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x14065=((-1.0)*r01);
CheckValue<IkReal> x14068 = IKatan2WithCheck(IkReal(x14065),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14068.valid){
continue;
}
IkReal x14066=((1.0)*(x14068.value));
IkReal x14067=x14057;
sj15=gconst16;
cj15=gconst17;
j15=((3.14159265)+(((-1.0)*x14066)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14066)));
IkReal gconst16=(x14065*x14067);
IkReal gconst17=((1.0)*r00*x14067);
j14eval[0]=r22;
j14eval[1]=sj10;
j14eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x14069=((-1.0)*r01);
CheckValue<IkReal> x14072 = IKatan2WithCheck(IkReal(x14069),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14072.valid){
continue;
}
IkReal x14070=((1.0)*(x14072.value));
IkReal x14071=x14057;
sj15=gconst16;
cj15=gconst17;
j15=((3.14159265)+(((-1.0)*x14070)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14070)));
IkReal gconst16=(x14069*x14071);
IkReal gconst17=((1.0)*r00*x14071);
IkReal x14073=r02*r02;
IkReal x14074=(r12*sj10);
IkReal x14075=x14057;
IkReal x14076=(cj10*x14075);
j14eval[0]=((IKabs(((((-1.0)*x14074))+(((-1.0)*cj10*r02)))))+(IKabs((((r02*x14074*x14075))+((x14073*x14076))+(((-1.0)*x14076))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
IkReal x14077=((-1.0)*r01);
CheckValue<IkReal> x14080 = IKatan2WithCheck(IkReal(x14077),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14080.valid){
continue;
}
IkReal x14078=((1.0)*(x14080.value));
IkReal x14079=x14057;
sj15=gconst16;
cj15=gconst17;
j15=((3.14159265)+(((-1.0)*x14078)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14078)));
IkReal gconst16=(x14077*x14079);
IkReal gconst17=((1.0)*r00*x14079);
j14eval[0]=0;
j14eval[1]=0;
j14eval[2]=r22;
j14eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x14081=((-1.0)*r01);
CheckValue<IkReal> x14084 = IKatan2WithCheck(IkReal(x14081),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14084.valid){
continue;
}
IkReal x14082=((1.0)*(x14084.value));
IkReal x14083=x14057;
sj15=gconst16;
cj15=gconst17;
j15=((3.14159265)+(((-1.0)*x14082)));
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14082)));
IkReal gconst16=(x14081*x14083);
IkReal gconst17=((1.0)*r00*x14083);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14085=gconst16*gconst16;
IkReal x14086=gconst17*gconst17;
IkReal x14087=(r10*sj13);
IkReal x14088=((1.0)*r11);
IkReal x14089=((1.0)*cj13);
IkReal x14090=(gconst16*gconst17);
IkReal x14091=(r11*sj13);
IkReal x14092=(r20*x14086);
IkReal x14093=(r21*x14085);
CheckValue<IkReal> x14094=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj13*x14088*x14093))+((cj13*r10*r21*x14090))+((cj13*r11*r20*x14090))+(((-1.0)*r12*r22*x14089))+(((-1.0)*r10*x14089*x14092)))),-1);
if(!x14094.valid){
continue;
}
CheckValue<IkReal> x14095 = IKatan2WithCheck(IkReal((((gconst16*r22*x14087))+((gconst17*r22*x14091)))),IkReal((((x14087*x14093))+(((-1.0)*r20*x14087*x14090))+(((-1.0)*sj13*x14088*x14092))+((r21*x14090*x14091)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14095.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14094.value)))+(x14095.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14096=IKsin(j14);
IkReal x14097=IKcos(j14);
IkReal x14098=(cj12*sj11);
IkReal x14099=(cj11*sj12);
IkReal x14100=(gconst16*sj13);
IkReal x14101=(cj13*gconst17);
IkReal x14102=(gconst17*sj13);
IkReal x14103=(cj13*gconst16);
IkReal x14104=(sj11*sj12);
IkReal x14105=(cj11*cj12);
IkReal x14106=((1.0)*x14097);
IkReal x14107=(cj13*x14096);
IkReal x14108=((1.0)*x14096);
IkReal x14109=(gconst16*x14096);
IkReal x14110=(x14099+x14098);
evalcond[0]=((((-1.0)*r22*x14106))+((r21*x14109))+(((-1.0)*gconst17*r20*x14108)));
evalcond[1]=(((r01*x14109))+(((-1.0)*r02*x14106))+(((-1.0)*gconst17*r00*x14108)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14106))+(((-1.0)*gconst17*r10*x14108))+((r11*x14109)));
evalcond[3]=((((-1.0)*r10*x14101*x14106))+((r11*x14097*x14103))+((r10*x14100))+((r12*x14107))+((r11*x14102)));
evalcond[4]=((((-1.0)*r11*x14100*x14106))+((r10*x14097*x14102))+(((-1.0)*r12*sj13*x14108))+((r10*x14103))+((r11*x14101)));
evalcond[5]=(((r22*x14107))+((r21*x14097*x14103))+(((-1.0)*r20*x14101*x14106))+x14110+((r20*x14100))+((r21*x14102)));
evalcond[6]=((((-1.0)*r00*x14101*x14106))+((r02*x14107))+((r00*x14100))+((r01*x14102))+(((-1.0)*x14104))+((r01*x14097*x14103))+x14105);
evalcond[7]=((((-1.0)*r02*sj13*x14108))+((r00*x14103))+((r01*x14101))+((r00*x14097*x14102))+(((-1.0)*r01*x14100*x14106))+x14110);
evalcond[8]=((((-1.0)*r22*sj13*x14108))+(((-1.0)*r21*x14100*x14106))+(((-1.0)*x14105))+((r20*x14097*x14102))+x14104+((r20*x14103))+((r21*x14101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14111=((1.0)*gconst17);
CheckValue<IkReal> x14112=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x14111)))),-1);
if(!x14112.valid){
continue;
}
CheckValue<IkReal> x14113 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14111))+((gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14113.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14112.value)))+(x14113.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14114=IKsin(j14);
IkReal x14115=IKcos(j14);
IkReal x14116=(cj12*sj11);
IkReal x14117=(cj11*sj12);
IkReal x14118=(gconst16*sj13);
IkReal x14119=(cj13*gconst17);
IkReal x14120=(gconst17*sj13);
IkReal x14121=(cj13*gconst16);
IkReal x14122=(sj11*sj12);
IkReal x14123=(cj11*cj12);
IkReal x14124=((1.0)*x14115);
IkReal x14125=(cj13*x14114);
IkReal x14126=((1.0)*x14114);
IkReal x14127=(gconst16*x14114);
IkReal x14128=(x14116+x14117);
evalcond[0]=(((r21*x14127))+(((-1.0)*r22*x14124))+(((-1.0)*gconst17*r20*x14126)));
evalcond[1]=(((r01*x14127))+(((-1.0)*gconst17*r00*x14126))+(((-1.0)*r02*x14124)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14124))+(((-1.0)*gconst17*r10*x14126))+((r11*x14127)));
evalcond[3]=(((r12*x14125))+(((-1.0)*r10*x14119*x14124))+((r10*x14118))+((r11*x14115*x14121))+((r11*x14120)));
evalcond[4]=(((r11*x14119))+(((-1.0)*r12*sj13*x14126))+(((-1.0)*r11*x14118*x14124))+((r10*x14121))+((r10*x14115*x14120)));
evalcond[5]=(((r21*x14120))+((r21*x14115*x14121))+((r22*x14125))+(((-1.0)*r20*x14119*x14124))+((r20*x14118))+x14128);
evalcond[6]=(((r01*x14115*x14121))+((r00*x14118))+((r01*x14120))+(((-1.0)*x14122))+x14123+(((-1.0)*r00*x14119*x14124))+((r02*x14125)));
evalcond[7]=((((-1.0)*r02*sj13*x14126))+(((-1.0)*r01*x14118*x14124))+((r01*x14119))+((r00*x14121))+x14128+((r00*x14115*x14120)));
evalcond[8]=((((-1.0)*r22*sj13*x14126))+((r20*x14115*x14120))+(((-1.0)*r21*x14118*x14124))+((r20*x14121))+(((-1.0)*x14123))+x14122+((r21*x14119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x14129=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14129.valid){
continue;
}
CheckValue<IkReal> x14130 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14130.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14129.value)))+(x14130.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14131=IKsin(j14);
IkReal x14132=IKcos(j14);
IkReal x14133=(cj12*sj11);
IkReal x14134=(cj11*sj12);
IkReal x14135=(gconst16*sj13);
IkReal x14136=(cj13*gconst17);
IkReal x14137=(gconst17*sj13);
IkReal x14138=(cj13*gconst16);
IkReal x14139=(sj11*sj12);
IkReal x14140=(cj11*cj12);
IkReal x14141=((1.0)*x14132);
IkReal x14142=(cj13*x14131);
IkReal x14143=((1.0)*x14131);
IkReal x14144=(gconst16*x14131);
IkReal x14145=(x14133+x14134);
evalcond[0]=((((-1.0)*r22*x14141))+((r21*x14144))+(((-1.0)*gconst17*r20*x14143)));
evalcond[1]=((((-1.0)*gconst17*r00*x14143))+((r01*x14144))+(((-1.0)*r02*x14141)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14143))+(((-1.0)*r12*x14141))+((r11*x14144)));
evalcond[3]=(((r11*x14137))+((r10*x14135))+((r11*x14132*x14138))+((r12*x14142))+(((-1.0)*r10*x14136*x14141)));
evalcond[4]=(((r10*x14132*x14137))+(((-1.0)*r12*sj13*x14143))+((r11*x14136))+((r10*x14138))+(((-1.0)*r11*x14135*x14141)));
evalcond[5]=(((r20*x14135))+((r21*x14132*x14138))+(((-1.0)*r20*x14136*x14141))+((r21*x14137))+((r22*x14142))+x14145);
evalcond[6]=((((-1.0)*x14139))+((r02*x14142))+x14140+(((-1.0)*r00*x14136*x14141))+((r01*x14132*x14138))+((r00*x14135))+((r01*x14137)));
evalcond[7]=(((r00*x14132*x14137))+(((-1.0)*r01*x14135*x14141))+x14145+((r00*x14138))+(((-1.0)*r02*sj13*x14143))+((r01*x14136)));
evalcond[8]=(((r20*x14138))+(((-1.0)*r22*sj13*x14143))+((r20*x14132*x14137))+((r21*x14136))+x14139+(((-1.0)*x14140))+(((-1.0)*r21*x14135*x14141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
j14array[0]=0;
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
j14array[0]=0;
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x14146=((-1.0)*r01);
CheckValue<IkReal> x14149 = IKatan2WithCheck(IkReal(x14146),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14149.valid){
continue;
}
IkReal x14147=((1.0)*(x14149.value));
IkReal x14148=x14057;
sj15=gconst16;
cj15=gconst17;
j15=((3.14159265)+(((-1.0)*x14147)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14147)));
IkReal gconst16=(x14146*x14148);
IkReal gconst17=((1.0)*r00*x14148);
IkReal x14150=r02*r02;
IkReal x14151=(r12*sj10);
IkReal x14152=x14057;
IkReal x14153=(cj10*x14152);
j14eval[0]=((IKabs(((((-1.0)*cj10*r02))+(((-1.0)*x14151)))))+(IKabs((((x14150*x14153))+((r02*x14151*x14152))+(((-1.0)*x14153))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14154=(gconst17*r21);
IkReal x14155=(gconst16*sj13);
IkReal x14156=((1.0)*cj13);
IkReal x14157=((1.0)*sj13);
IkReal x14158=(gconst17*r20);
IkReal x14159=(cj11*cj12);
IkReal x14160=(gconst16*r20);
IkReal x14161=((1.0)*sj11*sj12);
CheckValue<IkReal> x14162=IKPowWithIntegerCheck(((((-1.0)*gconst16*r11*r21*x14155))+((r10*x14154*x14155))+((r11*x14155*x14158))+(((-1.0)*gconst17*r10*x14157*x14158))),-1);
if(!x14162.valid){
continue;
}
CheckValue<IkReal> x14163=IKPowWithIntegerCheck(((((-1.0)*r21*x14155))+((sj13*x14158))),-1);
if(!x14163.valid){
continue;
}
if( IKabs(((x14162.value)*(((((-1.0)*r12*x14156*x14160))+(((-1.0)*r12*x14161))+((r12*x14159))+(((-1.0)*r12*x14154*x14156))+((cj10*r21*x14155))+(((-1.0)*cj10*x14157*x14158)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14163.value)*(((((-1.0)*x14156*x14160))+(((-1.0)*x14154*x14156))+(((-1.0)*x14161))+x14159)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14162.value)*(((((-1.0)*r12*x14156*x14160))+(((-1.0)*r12*x14161))+((r12*x14159))+(((-1.0)*r12*x14154*x14156))+((cj10*r21*x14155))+(((-1.0)*cj10*x14157*x14158))))))+IKsqr(((x14163.value)*(((((-1.0)*x14156*x14160))+(((-1.0)*x14154*x14156))+(((-1.0)*x14161))+x14159))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x14162.value)*(((((-1.0)*r12*x14156*x14160))+(((-1.0)*r12*x14161))+((r12*x14159))+(((-1.0)*r12*x14154*x14156))+((cj10*r21*x14155))+(((-1.0)*cj10*x14157*x14158))))), ((x14163.value)*(((((-1.0)*x14156*x14160))+(((-1.0)*x14154*x14156))+(((-1.0)*x14161))+x14159))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14164=IKsin(j14);
IkReal x14165=IKcos(j14);
IkReal x14166=(gconst16*sj13);
IkReal x14167=(cj13*gconst17);
IkReal x14168=((1.0)*cj11);
IkReal x14169=(cj10*sj12);
IkReal x14170=(sj11*sj12);
IkReal x14171=((1.0)*sj10);
IkReal x14172=(cj13*gconst16);
IkReal x14173=(gconst17*sj13);
IkReal x14174=(cj12*sj11);
IkReal x14175=((1.0)*x14165);
IkReal x14176=((1.0)*x14164);
IkReal x14177=(cj13*x14164);
IkReal x14178=(gconst16*x14164);
IkReal x14179=(x14165*x14173);
evalcond[0]=(((r21*x14178))+(((-1.0)*gconst17*r20*x14176)));
evalcond[1]=(((r11*x14178))+cj10+(((-1.0)*gconst17*r10*x14176))+(((-1.0)*r12*x14175)));
evalcond[2]=((((-1.0)*x14171))+((r01*x14178))+(((-1.0)*gconst17*r00*x14176))+(((-1.0)*r02*x14175)));
evalcond[3]=(((r21*x14173))+(((-1.0)*r20*x14167*x14175))+x14174+((r21*x14165*x14172))+((r20*x14166))+((cj11*sj12)));
evalcond[4]=((((-1.0)*r21*x14166*x14175))+((r20*x14172))+((r20*x14179))+(((-1.0)*cj12*x14168))+x14170+((r21*x14167)));
evalcond[5]=(((r01*x14173))+((r01*x14165*x14172))+((sj11*x14169))+(((-1.0)*r00*x14167*x14175))+((r02*x14177))+((r00*x14166))+(((-1.0)*cj10*cj12*x14168)));
evalcond[6]=((((-1.0)*r10*x14167*x14175))+((r11*x14165*x14172))+((r10*x14166))+(((-1.0)*cj12*sj10*x14168))+((r11*x14173))+((r12*x14177))+((sj10*x14170)));
evalcond[7]=(((r00*x14179))+((r00*x14172))+(((-1.0)*r02*sj13*x14176))+(((-1.0)*x14168*x14169))+((r01*x14167))+(((-1.0)*r01*x14166*x14175))+(((-1.0)*cj10*x14174)));
evalcond[8]=((((-1.0)*sj10*sj12*x14168))+(((-1.0)*r11*x14166*x14175))+(((-1.0)*r12*sj13*x14176))+((r11*x14167))+((r10*x14179))+((r10*x14172))+(((-1.0)*x14171*x14174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14180=((1.0)*gconst16);
CheckValue<IkReal> x14181 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal(((((-1.0)*cj10*r01*x14180))+((cj10*gconst17*r00))+((gconst17*r10*sj10))+(((-1.0)*r11*sj10*x14180)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14181.valid){
continue;
}
CheckValue<IkReal> x14182=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r21))+(((-1.0)*r20*x14180)))),-1);
if(!x14182.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14181.value)+(((1.5707963267949)*(x14182.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14183=IKsin(j14);
IkReal x14184=IKcos(j14);
IkReal x14185=(gconst16*sj13);
IkReal x14186=(cj13*gconst17);
IkReal x14187=((1.0)*cj11);
IkReal x14188=(cj10*sj12);
IkReal x14189=(sj11*sj12);
IkReal x14190=((1.0)*sj10);
IkReal x14191=(cj13*gconst16);
IkReal x14192=(gconst17*sj13);
IkReal x14193=(cj12*sj11);
IkReal x14194=((1.0)*x14184);
IkReal x14195=((1.0)*x14183);
IkReal x14196=(cj13*x14183);
IkReal x14197=(gconst16*x14183);
IkReal x14198=(x14184*x14192);
evalcond[0]=((((-1.0)*gconst17*r20*x14195))+((r21*x14197)));
evalcond[1]=((((-1.0)*gconst17*r10*x14195))+(((-1.0)*r12*x14194))+cj10+((r11*x14197)));
evalcond[2]=((((-1.0)*gconst17*r00*x14195))+(((-1.0)*r02*x14194))+(((-1.0)*x14190))+((r01*x14197)));
evalcond[3]=(((r20*x14185))+(((-1.0)*r20*x14186*x14194))+((r21*x14184*x14191))+x14193+((r21*x14192))+((cj11*sj12)));
evalcond[4]=((((-1.0)*r21*x14185*x14194))+(((-1.0)*cj12*x14187))+((r21*x14186))+x14189+((r20*x14191))+((r20*x14198)));
evalcond[5]=(((r02*x14196))+(((-1.0)*cj10*cj12*x14187))+((r00*x14185))+((sj11*x14188))+((r01*x14192))+((r01*x14184*x14191))+(((-1.0)*r00*x14186*x14194)));
evalcond[6]=((((-1.0)*r10*x14186*x14194))+((r11*x14184*x14191))+((r11*x14192))+((r12*x14196))+(((-1.0)*cj12*sj10*x14187))+((sj10*x14189))+((r10*x14185)));
evalcond[7]=((((-1.0)*x14187*x14188))+(((-1.0)*r02*sj13*x14195))+(((-1.0)*r01*x14185*x14194))+(((-1.0)*cj10*x14193))+((r01*x14186))+((r00*x14191))+((r00*x14198)));
evalcond[8]=(((r10*x14191))+((r10*x14198))+(((-1.0)*sj10*sj12*x14187))+(((-1.0)*r12*sj13*x14195))+((r11*x14186))+(((-1.0)*r11*x14185*x14194))+(((-1.0)*x14190*x14193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14199=((1.0)*gconst16);
CheckValue<IkReal> x14200 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((cj10*gconst17*r00))+(((-1.0)*cj10*r01*x14199))+((gconst17*r10*sj10))+(((-1.0)*r11*sj10*x14199)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14200.valid){
continue;
}
CheckValue<IkReal> x14201=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r21))+(((-1.0)*r20*x14199)))),-1);
if(!x14201.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14200.value)+(((1.5707963267949)*(x14201.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14202=IKsin(j14);
IkReal x14203=IKcos(j14);
IkReal x14204=(gconst16*sj13);
IkReal x14205=(cj13*gconst17);
IkReal x14206=((1.0)*cj11);
IkReal x14207=(cj10*sj12);
IkReal x14208=(sj11*sj12);
IkReal x14209=((1.0)*sj10);
IkReal x14210=(cj13*gconst16);
IkReal x14211=(gconst17*sj13);
IkReal x14212=(cj12*sj11);
IkReal x14213=((1.0)*x14203);
IkReal x14214=((1.0)*x14202);
IkReal x14215=(cj13*x14202);
IkReal x14216=(gconst16*x14202);
IkReal x14217=(x14203*x14211);
evalcond[0]=((((-1.0)*gconst17*r20*x14214))+(((-1.0)*r22*x14213))+((r21*x14216)));
evalcond[1]=((((-1.0)*r12*x14213))+((r11*x14216))+(((-1.0)*gconst17*r10*x14214))+cj10);
evalcond[2]=((((-1.0)*x14209))+(((-1.0)*gconst17*r00*x14214))+(((-1.0)*r02*x14213))+((r01*x14216)));
evalcond[3]=(((r22*x14215))+((r20*x14204))+((r21*x14203*x14210))+(((-1.0)*r20*x14205*x14213))+((r21*x14211))+((cj11*sj12))+x14212);
evalcond[4]=(((r21*x14205))+(((-1.0)*cj12*x14206))+(((-1.0)*r22*sj13*x14214))+((r20*x14217))+((r20*x14210))+(((-1.0)*r21*x14204*x14213))+x14208);
evalcond[5]=((((-1.0)*r00*x14205*x14213))+((r01*x14211))+((r00*x14204))+((sj11*x14207))+((r01*x14203*x14210))+((r02*x14215))+(((-1.0)*cj10*cj12*x14206)));
evalcond[6]=(((r11*x14203*x14210))+(((-1.0)*r10*x14205*x14213))+((r11*x14211))+((sj10*x14208))+((r12*x14215))+((r10*x14204))+(((-1.0)*cj12*sj10*x14206)));
evalcond[7]=((((-1.0)*cj10*x14212))+(((-1.0)*x14206*x14207))+(((-1.0)*r02*sj13*x14214))+(((-1.0)*r01*x14204*x14213))+((r00*x14217))+((r00*x14210))+((r01*x14205)));
evalcond[8]=((((-1.0)*sj10*sj12*x14206))+((r10*x14217))+((r10*x14210))+(((-1.0)*r11*x14204*x14213))+(((-1.0)*x14209*x14212))+(((-1.0)*r12*sj13*x14214))+((r11*x14205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14218=((1.0)*gconst17);
CheckValue<IkReal> x14219 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x14218))+((gconst16*r21*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14219.valid){
continue;
}
CheckValue<IkReal> x14220=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14218)))),-1);
if(!x14220.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14219.value)+(((1.5707963267949)*(x14220.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14221=IKsin(j14);
IkReal x14222=IKcos(j14);
IkReal x14223=(gconst16*sj13);
IkReal x14224=(cj13*gconst17);
IkReal x14225=((1.0)*cj11);
IkReal x14226=(cj10*sj12);
IkReal x14227=(sj11*sj12);
IkReal x14228=((1.0)*sj10);
IkReal x14229=(cj13*gconst16);
IkReal x14230=(gconst17*sj13);
IkReal x14231=(cj12*sj11);
IkReal x14232=((1.0)*x14222);
IkReal x14233=((1.0)*x14221);
IkReal x14234=(cj13*x14221);
IkReal x14235=(gconst16*x14221);
IkReal x14236=(x14222*x14230);
evalcond[0]=(((r21*x14235))+(((-1.0)*gconst17*r20*x14233))+(((-1.0)*r22*x14232)));
evalcond[1]=((((-1.0)*gconst17*r10*x14233))+(((-1.0)*r12*x14232))+cj10+((r11*x14235)));
evalcond[2]=((((-1.0)*x14228))+(((-1.0)*r02*x14232))+((r01*x14235))+(((-1.0)*gconst17*r00*x14233)));
evalcond[3]=(((r20*x14223))+((r21*x14230))+(((-1.0)*r20*x14224*x14232))+((r22*x14234))+((cj11*sj12))+x14231+((r21*x14222*x14229)));
evalcond[4]=(((r20*x14229))+((r20*x14236))+((r21*x14224))+(((-1.0)*r22*sj13*x14233))+(((-1.0)*cj12*x14225))+(((-1.0)*r21*x14223*x14232))+x14227);
evalcond[5]=((((-1.0)*cj10*cj12*x14225))+((r01*x14222*x14229))+((r02*x14234))+(((-1.0)*r00*x14224*x14232))+((sj11*x14226))+((r01*x14230))+((r00*x14223)));
evalcond[6]=(((r11*x14222*x14229))+(((-1.0)*r10*x14224*x14232))+((sj10*x14227))+((r10*x14223))+(((-1.0)*cj12*sj10*x14225))+((r12*x14234))+((r11*x14230)));
evalcond[7]=((((-1.0)*r02*sj13*x14233))+(((-1.0)*cj10*x14231))+((r00*x14236))+((r00*x14229))+(((-1.0)*r01*x14223*x14232))+((r01*x14224))+(((-1.0)*x14225*x14226)));
evalcond[8]=((((-1.0)*sj10*sj12*x14225))+(((-1.0)*x14228*x14231))+((r10*x14236))+((r10*x14229))+(((-1.0)*r12*sj13*x14233))+(((-1.0)*r11*x14223*x14232))+((r11*x14224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14237=((1.0)*gconst17);
CheckValue<IkReal> x14238 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal((((cj10*gconst16*r21))+(((-1.0)*cj10*r20*x14237)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14238.valid){
continue;
}
CheckValue<IkReal> x14239=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14237)))),-1);
if(!x14239.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14238.value)+(((1.5707963267949)*(x14239.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14240=IKsin(j14);
IkReal x14241=IKcos(j14);
IkReal x14242=(gconst16*sj13);
IkReal x14243=(cj13*gconst17);
IkReal x14244=((1.0)*cj11);
IkReal x14245=(cj10*sj12);
IkReal x14246=(sj11*sj12);
IkReal x14247=((1.0)*sj10);
IkReal x14248=(cj13*gconst16);
IkReal x14249=(gconst17*sj13);
IkReal x14250=(cj12*sj11);
IkReal x14251=((1.0)*x14241);
IkReal x14252=((1.0)*x14240);
IkReal x14253=(cj13*x14240);
IkReal x14254=(gconst16*x14240);
IkReal x14255=(x14241*x14249);
evalcond[0]=(((r21*x14254))+(((-1.0)*gconst17*r20*x14252))+(((-1.0)*r22*x14251)));
evalcond[1]=(cj10+((r11*x14254))+(((-1.0)*r12*x14251))+(((-1.0)*gconst17*r10*x14252)));
evalcond[2]=((((-1.0)*gconst17*r00*x14252))+(((-1.0)*x14247))+(((-1.0)*r02*x14251))+((r01*x14254)));
evalcond[3]=(((r21*x14249))+((r21*x14241*x14248))+((r20*x14242))+(((-1.0)*r20*x14243*x14251))+((cj11*sj12))+x14250+((r22*x14253)));
evalcond[4]=(((r21*x14243))+((r20*x14248))+(((-1.0)*r21*x14242*x14251))+((r20*x14255))+(((-1.0)*cj12*x14244))+x14246+(((-1.0)*r22*sj13*x14252)));
evalcond[5]=(((r01*x14241*x14248))+((sj11*x14245))+(((-1.0)*cj10*cj12*x14244))+((r02*x14253))+((r01*x14249))+(((-1.0)*r00*x14243*x14251))+((r00*x14242)));
evalcond[6]=((((-1.0)*r10*x14243*x14251))+(((-1.0)*cj12*sj10*x14244))+((sj10*x14246))+((r12*x14253))+((r11*x14249))+((r10*x14242))+((r11*x14241*x14248)));
evalcond[7]=((((-1.0)*cj10*x14250))+(((-1.0)*x14244*x14245))+(((-1.0)*r02*sj13*x14252))+((r01*x14243))+((r00*x14255))+(((-1.0)*r01*x14242*x14251))+((r00*x14248)));
evalcond[8]=((((-1.0)*r12*sj13*x14252))+(((-1.0)*x14247*x14250))+(((-1.0)*sj10*sj12*x14244))+(((-1.0)*r11*x14242*x14251))+((r10*x14255))+((r11*x14243))+((r10*x14248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x14256=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x14256;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x14256);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x14257=((1.0)*cj15);
IkReal x14258=((((-1.0)*r11*x14257))+(((-1.0)*r10*sj15)));
j14eval[0]=x14258;
j14eval[1]=IKsign(x14258);
j14eval[2]=((IKabs(r22))+(IKabs((((r21*sj15))+(((-1.0)*r20*x14257))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x14259=cj15*cj15;
IkReal x14260=(cj13*r01);
IkReal x14261=(cj15*sj15);
IkReal x14262=(cj13*r00);
IkReal x14263=(((r20*x14260*x14261))+(((-1.0)*cj13*r02*r22))+(((-1.0)*r20*x14259*x14262))+(((-1.0)*r21*x14260))+((r21*x14261*x14262))+((r21*x14259*x14260)));
j14eval[0]=x14263;
j14eval[1]=IKsign(x14263);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x14264=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x14264;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x14264);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x14265=((1.0)*cj15);
IkReal x14266=((((-1.0)*r11*x14265))+(((-1.0)*r10*sj15)));
j14eval[0]=x14266;
j14eval[1]=IKsign(x14266);
j14eval[2]=((IKabs(r22))+(IKabs((((r21*sj15))+(((-1.0)*r20*x14265))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x14267=r01*r01;
IkReal x14268=cj15*cj15;
IkReal x14269=(r01*sj15);
IkReal x14270=(cj15*r00);
IkReal x14271=(((x14267*x14268))+(((-1.0)*x14267))+(((-1.0)*(r02*r02)))+(((-1.0)*x14268*(r00*r00)))+(((2.0)*x14269*x14270)));
j14eval[0]=x14271;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x14269))+x14270))));
j14eval[2]=IKsign(x14271);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14272=r01*r01;
IkReal x14273=cj15*cj15;
IkReal x14274=(r01*sj15);
IkReal x14275=(cj15*r00);
CheckValue<IkReal> x14276 = IKatan2WithCheck(IkReal(((((-1.0)*x14274))+x14275)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14276.valid){
continue;
}
CheckValue<IkReal> x14277=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14273*(r00*r00)))+(((-1.0)*x14272))+((x14272*x14273))+(((-1.0)*(r02*r02)))+(((2.0)*x14274*x14275)))),-1);
if(!x14277.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14276.value)+(((1.5707963267949)*(x14277.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14278=IKsin(j14);
IkReal x14279=IKcos(j14);
IkReal x14280=(r11*sj15);
IkReal x14281=((1.0)*cj11);
IkReal x14282=(cj15*r10);
IkReal x14283=(cj15*r00);
IkReal x14284=(r21*sj15);
IkReal x14285=(r01*sj15);
IkReal x14286=(cj15*r20);
IkReal x14287=((1.0)*x14279);
IkReal x14288=((1.0)*x14278);
evalcond[0]=((((-1.0)*r22*x14287))+((x14278*x14284))+(((-1.0)*x14286*x14288)));
evalcond[1]=((((-1.0)*x14282*x14288))+((x14278*x14280))+(((-1.0)*r12*x14287)));
evalcond[2]=(((x14279*x14283))+(((-1.0)*r02*x14288))+(((-1.0)*x14285*x14287)));
evalcond[3]=((-1.0)+(((-1.0)*x14283*x14288))+((x14278*x14285))+(((-1.0)*r02*x14287)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r22*x14288))+(((-1.0)*x14284*x14287))+(((-1.0)*cj12*x14281))+((x14279*x14286)));
evalcond[5]=((((-1.0)*x14280*x14287))+(((-1.0)*cj12*sj11))+((x14279*x14282))+(((-1.0)*r12*x14288))+(((-1.0)*sj12*x14281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14289=((1.0)*cj15);
CheckValue<IkReal> x14290 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj15))+(((-1.0)*r20*x14289)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14290.valid){
continue;
}
CheckValue<IkReal> x14291=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14289))+(((-1.0)*r10*sj15)))),-1);
if(!x14291.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14290.value)+(((1.5707963267949)*(x14291.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14292=IKsin(j14);
IkReal x14293=IKcos(j14);
IkReal x14294=(r11*sj15);
IkReal x14295=((1.0)*cj11);
IkReal x14296=(cj15*r10);
IkReal x14297=(cj15*r00);
IkReal x14298=(r21*sj15);
IkReal x14299=(r01*sj15);
IkReal x14300=(cj15*r20);
IkReal x14301=((1.0)*x14293);
IkReal x14302=((1.0)*x14292);
evalcond[0]=((((-1.0)*r22*x14301))+((x14292*x14298))+(((-1.0)*x14300*x14302)));
evalcond[1]=(((x14292*x14294))+(((-1.0)*x14296*x14302))+(((-1.0)*r12*x14301)));
evalcond[2]=((((-1.0)*r02*x14302))+(((-1.0)*x14299*x14301))+((x14293*x14297)));
evalcond[3]=((-1.0)+((x14292*x14299))+(((-1.0)*r02*x14301))+(((-1.0)*x14297*x14302)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r22*x14302))+(((-1.0)*x14298*x14301))+(((-1.0)*cj12*x14295))+((x14293*x14300)));
evalcond[5]=((((-1.0)*sj12*x14295))+(((-1.0)*x14294*x14301))+(((-1.0)*r12*x14302))+(((-1.0)*cj12*sj11))+((x14293*x14296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x14303=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x14303.valid){
continue;
}
CheckValue<IkReal> x14304 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14304.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14303.value)))+(x14304.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14305=IKsin(j14);
IkReal x14306=IKcos(j14);
IkReal x14307=(r11*sj15);
IkReal x14308=((1.0)*cj11);
IkReal x14309=(cj15*r10);
IkReal x14310=(cj15*r00);
IkReal x14311=(r21*sj15);
IkReal x14312=(r01*sj15);
IkReal x14313=(cj15*r20);
IkReal x14314=((1.0)*x14306);
IkReal x14315=((1.0)*x14305);
evalcond[0]=((((-1.0)*r22*x14314))+(((-1.0)*x14313*x14315))+((x14305*x14311)));
evalcond[1]=((((-1.0)*x14309*x14315))+(((-1.0)*r12*x14314))+((x14305*x14307)));
evalcond[2]=((((-1.0)*x14312*x14314))+(((-1.0)*r02*x14315))+((x14306*x14310)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14314))+(((-1.0)*x14310*x14315))+((x14305*x14312)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r22*x14315))+(((-1.0)*cj12*x14308))+((x14306*x14313))+(((-1.0)*x14311*x14314)));
evalcond[5]=((((-1.0)*cj12*sj11))+(((-1.0)*x14307*x14314))+(((-1.0)*sj12*x14308))+((x14306*x14309))+(((-1.0)*r12*x14315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x14316=(((r20*sj15))+((cj15*r21)));
j14eval[0]=x14316;
j14eval[1]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*cj15*r10))))));
j14eval[2]=IKsign(x14316);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x14317=((1.0)*cj15);
IkReal x14318=((((-1.0)*r11*x14317))+(((-1.0)*r10*sj15)));
j14eval[0]=x14318;
j14eval[1]=IKsign(x14318);
j14eval[2]=((IKabs((((r21*sj15))+(((-1.0)*r20*x14317)))))+(IKabs(r22)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x14319=cj15*cj15;
IkReal x14320=r01*r01;
IkReal x14321=(cj15*r00);
IkReal x14322=(r01*sj15);
IkReal x14323=((((-1.0)*x14319*x14320))+(r02*r02)+x14320+(((-2.0)*x14321*x14322))+((x14319*(r00*r00))));
j14eval[0]=x14323;
j14eval[1]=((IKabs(r02))+(IKabs((x14322+(((-1.0)*x14321))))));
j14eval[2]=IKsign(x14323);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14324=cj15*cj15;
IkReal x14325=r01*r01;
IkReal x14326=(r01*sj15);
IkReal x14327=(cj15*r00);
CheckValue<IkReal> x14328=IKPowWithIntegerCheck(IKsign(((((-2.0)*x14326*x14327))+(((-1.0)*x14324*x14325))+(r02*r02)+x14325+((x14324*(r00*r00))))),-1);
if(!x14328.valid){
continue;
}
CheckValue<IkReal> x14329 = IKatan2WithCheck(IkReal((x14326+(((-1.0)*x14327)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14329.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14328.value)))+(x14329.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14330=IKcos(j14);
IkReal x14331=IKsin(j14);
IkReal x14332=((1.0)*cj11);
IkReal x14333=(cj15*r20);
IkReal x14334=(cj15*r10);
IkReal x14335=(cj15*r00);
IkReal x14336=((1.0)*x14330);
IkReal x14337=(sj15*x14330);
IkReal x14338=((1.0)*x14331);
IkReal x14339=(sj15*x14331);
evalcond[0]=(((r02*x14331))+(((-1.0)*x14335*x14336))+((r01*x14337)));
evalcond[1]=((((-1.0)*r22*x14336))+(((-1.0)*x14333*x14338))+((r21*x14339)));
evalcond[2]=(((r11*x14339))+(((-1.0)*r12*x14336))+(((-1.0)*x14334*x14338)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14336))+(((-1.0)*x14335*x14338))+((r01*x14339)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x14332))+((r22*x14331))+(((-1.0)*x14333*x14336))+((r21*x14337)));
evalcond[5]=(((r11*x14337))+(((-1.0)*x14334*x14336))+((r12*x14331))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x14332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14340=((1.0)*cj15);
CheckValue<IkReal> x14341 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14340))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14341.valid){
continue;
}
CheckValue<IkReal> x14342=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14340))+(((-1.0)*r10*sj15)))),-1);
if(!x14342.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14341.value)+(((1.5707963267949)*(x14342.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14343=IKcos(j14);
IkReal x14344=IKsin(j14);
IkReal x14345=((1.0)*cj11);
IkReal x14346=(cj15*r20);
IkReal x14347=(cj15*r10);
IkReal x14348=(cj15*r00);
IkReal x14349=((1.0)*x14343);
IkReal x14350=(sj15*x14343);
IkReal x14351=((1.0)*x14344);
IkReal x14352=(sj15*x14344);
evalcond[0]=((((-1.0)*x14348*x14349))+((r01*x14350))+((r02*x14344)));
evalcond[1]=((((-1.0)*x14346*x14351))+(((-1.0)*r22*x14349))+((r21*x14352)));
evalcond[2]=((((-1.0)*r12*x14349))+(((-1.0)*x14347*x14351))+((r11*x14352)));
evalcond[3]=((-1.0)+(((-1.0)*x14348*x14351))+((r01*x14352))+(((-1.0)*r02*x14349)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x14345))+((r22*x14344))+(((-1.0)*x14346*x14349))+((r21*x14350)));
evalcond[5]=((((-1.0)*sj12*x14345))+((r11*x14350))+(((-1.0)*cj12*sj11))+((r12*x14344))+(((-1.0)*x14347*x14349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x14353=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x14353.valid){
continue;
}
CheckValue<IkReal> x14354 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14354.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14353.value)))+(x14354.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14355=IKcos(j14);
IkReal x14356=IKsin(j14);
IkReal x14357=((1.0)*cj11);
IkReal x14358=(cj15*r20);
IkReal x14359=(cj15*r10);
IkReal x14360=(cj15*r00);
IkReal x14361=((1.0)*x14355);
IkReal x14362=(sj15*x14355);
IkReal x14363=((1.0)*x14356);
IkReal x14364=(sj15*x14356);
evalcond[0]=(((r02*x14356))+(((-1.0)*x14360*x14361))+((r01*x14362)));
evalcond[1]=((((-1.0)*r22*x14361))+((r21*x14364))+(((-1.0)*x14358*x14363)));
evalcond[2]=(((r11*x14364))+(((-1.0)*r12*x14361))+(((-1.0)*x14359*x14363)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14361))+(((-1.0)*x14360*x14363))+((r01*x14364)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*cj12*x14357))+((r21*x14362))+((r22*x14356))+(((-1.0)*x14358*x14361)));
evalcond[5]=(((r11*x14362))+((r12*x14356))+(((-1.0)*cj12*sj11))+(((-1.0)*sj12*x14357))+(((-1.0)*x14359*x14361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14366 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14366)==0){
continue;
}
IkReal x14365=pow(x14366,-0.5);
CheckValue<IkReal> x14367 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14367.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14367.value));
IkReal gconst49=((-1.0)*r21*x14365);
IkReal gconst50=(r20*x14365);
CheckValue<IkReal> x14368 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14368.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x14368.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
CheckValue<IkReal> x14371 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14371.valid){
continue;
}
IkReal x14369=((-1.0)*(x14371.value));
IkReal x14370=x14365;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj15=gconst49;
cj15=gconst50;
j15=x14369;
IkReal gconst48=x14369;
IkReal gconst49=((-1.0)*r21*x14370);
IkReal gconst50=(r20*x14370);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
CheckValue<IkReal> x14374 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14374.valid){
continue;
}
IkReal x14372=((-1.0)*(x14374.value));
IkReal x14373=x14365;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj15=gconst49;
cj15=gconst50;
j15=x14372;
IkReal gconst48=x14372;
IkReal gconst49=((-1.0)*r21*x14373);
IkReal gconst50=(r20*x14373);
CheckValue<IkReal> x14382=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14382.valid){
continue;
}
IkReal x14375=x14382.value;
IkReal x14376=(sj13*x14375);
IkReal x14377=(r01*x14376);
IkReal x14378=(r11*x14376);
IkReal x14379=(r10*x14376);
IkReal x14380=(r00*x14376);
IkReal x14381=(r20*r21*x14376);
j14eval[0]=IKsign((((r10*r20*r21*x14377))+((r11*x14377*(r21*r21)))+((r00*r20*r21*x14378))+((r02*r12*sj13))+((r00*x14379*(r20*r20)))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14383=gconst49*gconst49;
IkReal x14384=gconst50*gconst50;
IkReal x14385=(cj13*r10);
IkReal x14386=(gconst49*gconst50);
IkReal x14387=((1.0)*r00);
IkReal x14388=(r10*sj13);
IkReal x14389=(r12*sj13);
IkReal x14390=(r01*r11);
IkReal x14391=((1.0)*cj13);
IkReal x14392=(r00*r11);
CheckValue<IkReal> x14393=IKPowWithIntegerCheck(IKsign((((cj13*x14386*x14392))+(((-1.0)*x14384*x14385*x14387))+(((-1.0)*x14383*x14390*x14391))+((r01*x14385*x14386))+(((-1.0)*r02*r12*x14391)))),-1);
if(!x14393.valid){
continue;
}
CheckValue<IkReal> x14394 = IKatan2WithCheck(IkReal((((gconst50*r01*x14389))+((gconst49*r00*x14389)))),IkReal((((sj13*x14383*x14392))+(((-1.0)*x14386*x14387*x14388))+((sj13*x14386*x14390))+(((-1.0)*r01*x14384*x14388)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14394.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14393.value)))+(x14394.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14395=IKsin(j14);
IkReal x14396=IKcos(j14);
IkReal x14397=(sj11*sj12);
IkReal x14398=(r11*sj13);
IkReal x14399=(gconst50*r00);
IkReal x14400=((1.0)*cj11);
IkReal x14401=(gconst49*r21);
IkReal x14402=(gconst49*r00);
IkReal x14403=(gconst49*r11);
IkReal x14404=(cj13*gconst50);
IkReal x14405=(gconst50*r20);
IkReal x14406=(gconst49*sj13);
IkReal x14407=(cj12*sj11);
IkReal x14408=(gconst50*sj13);
IkReal x14409=(gconst49*r01);
IkReal x14410=(cj13*gconst49);
IkReal x14411=(cj12*x14400);
IkReal x14412=((1.0)*x14395);
IkReal x14413=((1.0)*x14396);
IkReal x14414=(cj13*x14396);
IkReal x14415=(cj13*x14395);
IkReal x14416=(sj13*x14396);
evalcond[0]=(((x14395*x14401))+(((-1.0)*r22*x14413))+(((-1.0)*x14405*x14412)));
evalcond[1]=(((x14395*x14403))+(((-1.0)*gconst50*r10*x14412))+(((-1.0)*r12*x14413)));
evalcond[2]=((-1.0)+((x14395*x14409))+(((-1.0)*r02*x14413))+(((-1.0)*x14399*x14412)));
evalcond[3]=((((-1.0)*cj13*x14399*x14413))+((r02*x14415))+((x14409*x14414))+((r01*x14408))+((sj13*x14402)));
evalcond[4]=((((-1.0)*r02*sj13*x14412))+((x14399*x14416))+((r01*x14404))+((cj13*x14402))+(((-1.0)*r01*x14406*x14413)));
evalcond[5]=(((r21*x14408))+((x14401*x14414))+((r22*x14415))+x14407+(((-1.0)*r20*x14404*x14413))+((r20*x14406))+((cj11*sj12)));
evalcond[6]=(((r10*x14406))+(((-1.0)*x14411))+((r12*x14415))+((gconst50*x14398))+((x14403*x14414))+x14397+(((-1.0)*r10*x14404*x14413)));
evalcond[7]=(((r21*x14404))+(((-1.0)*r22*sj13*x14412))+((x14405*x14416))+(((-1.0)*x14411))+(((-1.0)*sj13*x14401*x14413))+x14397+((r20*x14410)));
evalcond[8]=((((-1.0)*sj12*x14400))+(((-1.0)*x14407))+((r10*x14396*x14408))+((r11*x14404))+(((-1.0)*gconst49*x14398*x14413))+((r10*x14410))+(((-1.0)*r12*sj13*x14412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14417=gconst50*gconst50;
IkReal x14418=gconst49*gconst49;
IkReal x14419=(r11*sj13);
IkReal x14420=(r10*sj13);
IkReal x14421=(cj13*r00);
IkReal x14422=((1.0)*cj13*r10);
IkReal x14423=(gconst49*gconst50*r00);
IkReal x14424=(cj13*gconst50*r01);
CheckValue<IkReal> x14425 = IKatan2WithCheck(IkReal((((r12*x14424))+((gconst49*r12*x14421)))),IkReal((((r11*x14418*x14421))+(((-1.0)*gconst49*gconst50*r10*x14421))+((gconst49*r11*x14424))+(((-1.0)*r01*x14417*x14422)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14425.valid){
continue;
}
CheckValue<IkReal> x14426=IKPowWithIntegerCheck(IKsign((((r00*x14417*x14420))+((r02*r12*sj13))+((r01*x14418*x14419))+(((-1.0)*x14419*x14423))+(((-1.0)*gconst49*gconst50*r01*x14420)))),-1);
if(!x14426.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14425.value)+(((1.5707963267949)*(x14426.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14427=IKsin(j14);
IkReal x14428=IKcos(j14);
IkReal x14429=(sj11*sj12);
IkReal x14430=(r11*sj13);
IkReal x14431=(gconst50*r00);
IkReal x14432=((1.0)*cj11);
IkReal x14433=(gconst49*r21);
IkReal x14434=(gconst49*r00);
IkReal x14435=(gconst49*r11);
IkReal x14436=(cj13*gconst50);
IkReal x14437=(gconst50*r20);
IkReal x14438=(gconst49*sj13);
IkReal x14439=(cj12*sj11);
IkReal x14440=(gconst50*sj13);
IkReal x14441=(gconst49*r01);
IkReal x14442=(cj13*gconst49);
IkReal x14443=(cj12*x14432);
IkReal x14444=((1.0)*x14427);
IkReal x14445=((1.0)*x14428);
IkReal x14446=(cj13*x14428);
IkReal x14447=(cj13*x14427);
IkReal x14448=(sj13*x14428);
evalcond[0]=((((-1.0)*r22*x14445))+(((-1.0)*x14437*x14444))+((x14427*x14433)));
evalcond[1]=((((-1.0)*r12*x14445))+(((-1.0)*gconst50*r10*x14444))+((x14427*x14435)));
evalcond[2]=((-1.0)+((x14427*x14441))+(((-1.0)*r02*x14445))+(((-1.0)*x14431*x14444)));
evalcond[3]=(((r01*x14440))+(((-1.0)*cj13*x14431*x14445))+((x14441*x14446))+((sj13*x14434))+((r02*x14447)));
evalcond[4]=(((x14431*x14448))+(((-1.0)*r01*x14438*x14445))+((r01*x14436))+((cj13*x14434))+(((-1.0)*r02*sj13*x14444)));
evalcond[5]=(((r20*x14438))+(((-1.0)*r20*x14436*x14445))+x14439+((r22*x14447))+((r21*x14440))+((cj11*sj12))+((x14433*x14446)));
evalcond[6]=((((-1.0)*x14443))+((r12*x14447))+((gconst50*x14430))+((r10*x14438))+x14429+(((-1.0)*r10*x14436*x14445))+((x14435*x14446)));
evalcond[7]=(((r21*x14436))+(((-1.0)*x14443))+((x14437*x14448))+((r20*x14442))+(((-1.0)*r22*sj13*x14444))+x14429+(((-1.0)*sj13*x14433*x14445)));
evalcond[8]=(((r11*x14436))+(((-1.0)*r12*sj13*x14444))+((r10*x14442))+(((-1.0)*x14439))+(((-1.0)*sj12*x14432))+((r10*x14428*x14440))+(((-1.0)*gconst49*x14430*x14445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14449=((1.0)*gconst50);
CheckValue<IkReal> x14450=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14449)))),-1);
if(!x14450.valid){
continue;
}
CheckValue<IkReal> x14451 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14449)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14451.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14450.value)))+(x14451.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14452=IKsin(j14);
IkReal x14453=IKcos(j14);
IkReal x14454=(sj11*sj12);
IkReal x14455=(r11*sj13);
IkReal x14456=(gconst50*r00);
IkReal x14457=((1.0)*cj11);
IkReal x14458=(gconst49*r21);
IkReal x14459=(gconst49*r00);
IkReal x14460=(gconst49*r11);
IkReal x14461=(cj13*gconst50);
IkReal x14462=(gconst50*r20);
IkReal x14463=(gconst49*sj13);
IkReal x14464=(cj12*sj11);
IkReal x14465=(gconst50*sj13);
IkReal x14466=(gconst49*r01);
IkReal x14467=(cj13*gconst49);
IkReal x14468=(cj12*x14457);
IkReal x14469=((1.0)*x14452);
IkReal x14470=((1.0)*x14453);
IkReal x14471=(cj13*x14453);
IkReal x14472=(cj13*x14452);
IkReal x14473=(sj13*x14453);
evalcond[0]=((((-1.0)*x14462*x14469))+((x14452*x14458))+(((-1.0)*r22*x14470)));
evalcond[1]=(((x14452*x14460))+(((-1.0)*r12*x14470))+(((-1.0)*gconst50*r10*x14469)));
evalcond[2]=((-1.0)+((x14452*x14466))+(((-1.0)*x14456*x14469))+(((-1.0)*r02*x14470)));
evalcond[3]=(((r01*x14465))+((r02*x14472))+((sj13*x14459))+((x14466*x14471))+(((-1.0)*cj13*x14456*x14470)));
evalcond[4]=((((-1.0)*r02*sj13*x14469))+((x14456*x14473))+((r01*x14461))+(((-1.0)*r01*x14463*x14470))+((cj13*x14459)));
evalcond[5]=(((r21*x14465))+((r22*x14472))+(((-1.0)*r20*x14461*x14470))+x14464+((x14458*x14471))+((r20*x14463))+((cj11*sj12)));
evalcond[6]=(((x14460*x14471))+((r10*x14463))+((gconst50*x14455))+(((-1.0)*r10*x14461*x14470))+x14454+(((-1.0)*x14468))+((r12*x14472)));
evalcond[7]=(((x14462*x14473))+((r21*x14461))+(((-1.0)*r22*sj13*x14469))+x14454+(((-1.0)*x14468))+((r20*x14467))+(((-1.0)*sj13*x14458*x14470)));
evalcond[8]=((((-1.0)*gconst49*x14455*x14470))+((r10*x14467))+(((-1.0)*x14464))+(((-1.0)*r12*sj13*x14469))+((r11*x14461))+(((-1.0)*sj12*x14457))+((r10*x14453*x14465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14475 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14475)==0){
continue;
}
IkReal x14474=pow(x14475,-0.5);
CheckValue<IkReal> x14476 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14476.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14476.value))));
IkReal gconst52=((1.0)*r21*x14474);
IkReal gconst53=((-1.0)*r20*x14474);
CheckValue<IkReal> x14477 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14477.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x14477.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[4];
CheckValue<IkReal> x14480 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14480.valid){
continue;
}
IkReal x14478=((1.0)*(x14480.value));
IkReal x14479=x14474;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj15=gconst52;
cj15=gconst53;
j15=((3.14159265)+(((-1.0)*x14478)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14478)));
IkReal gconst52=((1.0)*r21*x14479);
IkReal gconst53=((-1.0)*r20*x14479);
j14eval[0]=0;
j14eval[1]=r12;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j14eval[3]=0;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  || IKabs(j14eval[3]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
CheckValue<IkReal> x14483 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14483.valid){
continue;
}
IkReal x14481=((1.0)*(x14483.value));
IkReal x14482=x14474;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj15=gconst52;
cj15=gconst53;
j15=((3.14159265)+(((-1.0)*x14481)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14481)));
IkReal gconst52=((1.0)*r21*x14482);
IkReal gconst53=((-1.0)*r20*x14482);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
CheckValue<IkReal> x14486 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14486.valid){
continue;
}
IkReal x14484=((1.0)*(x14486.value));
IkReal x14485=x14474;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj15=gconst52;
cj15=gconst53;
j15=((3.14159265)+(((-1.0)*x14484)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14484)));
IkReal gconst52=((1.0)*r21*x14485);
IkReal gconst53=((-1.0)*r20*x14485);
j14eval[0]=r12;
j14eval[1]=sj13;
j14eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14487=gconst52*gconst52;
IkReal x14488=gconst53*gconst53;
IkReal x14489=((1.0)*r20);
IkReal x14490=(cj13*r21);
IkReal x14491=(r00*sj13);
IkReal x14492=(r01*sj13);
IkReal x14493=(gconst52*gconst53);
IkReal x14494=(r00*x14493);
CheckValue<IkReal> x14495 = IKatan2WithCheck(IkReal((((gconst52*r22*x14491))+((gconst53*r22*x14492)))),IkReal(((((-1.0)*x14489*x14491*x14493))+((r21*x14492*x14493))+((r21*x14487*x14491))+(((-1.0)*x14488*x14489*x14492)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14495.valid){
continue;
}
CheckValue<IkReal> x14496=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj13*r02*r22))+(((-1.0)*r01*x14487*x14490))+(((-1.0)*cj13*r00*x14488*x14489))+((x14490*x14494))+((cj13*r01*r20*x14493)))),-1);
if(!x14496.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14495.value)+(((1.5707963267949)*(x14496.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14497=IKsin(j14);
IkReal x14498=IKcos(j14);
IkReal x14499=(sj11*sj12);
IkReal x14500=(r10*sj13);
IkReal x14501=((1.0)*cj12);
IkReal x14502=(cj11*sj12);
IkReal x14503=(cj13*gconst53);
IkReal x14504=(gconst52*sj13);
IkReal x14505=((1.0)*sj13);
IkReal x14506=(gconst52*r11);
IkReal x14507=(cj13*gconst52);
IkReal x14508=(gconst53*sj13);
IkReal x14509=(cj11*x14501);
IkReal x14510=((1.0)*x14498);
IkReal x14511=(gconst53*x14498);
IkReal x14512=(r22*x14497);
IkReal x14513=(cj13*x14498);
IkReal x14514=(gconst52*x14497);
IkReal x14515=(r02*x14497);
IkReal x14516=(r12*x14497);
IkReal x14517=((1.0)*gconst53*x14497);
evalcond[0]=((((-1.0)*r22*x14510))+((r21*x14514))+(((-1.0)*r20*x14517)));
evalcond[1]=(((x14497*x14506))+(((-1.0)*r10*x14517))+(((-1.0)*r12*x14510)));
evalcond[2]=((-1.0)+((r01*x14514))+(((-1.0)*r00*x14517))+(((-1.0)*r02*x14510)));
evalcond[3]=((((-1.0)*r00*x14503*x14510))+((cj13*x14515))+((r01*x14498*x14507))+((r00*x14504))+((r01*x14508)));
evalcond[4]=((((-1.0)*r01*x14504*x14510))+((r00*x14498*x14508))+(((-1.0)*x14505*x14515))+((r00*x14507))+((r01*x14503)));
evalcond[5]=(((r20*x14504))+((cj13*x14512))+((r21*x14508))+(((-1.0)*r20*x14503*x14510))+x14502+((cj12*sj11))+((r21*x14498*x14507)));
evalcond[6]=(((cj13*x14516))+(((-1.0)*x14509))+((gconst52*x14500))+x14499+(((-1.0)*r10*x14503*x14510))+((x14506*x14513))+((r11*x14508)));
evalcond[7]=(((r20*x14507))+(((-1.0)*x14509))+((r21*x14503))+x14499+(((-1.0)*r21*x14504*x14510))+(((-1.0)*x14505*x14512))+((r20*x14498*x14508)));
evalcond[8]=((((-1.0)*sj11*x14501))+(((-1.0)*x14502))+((r10*x14507))+(((-1.0)*r11*x14504*x14510))+(((-1.0)*x14505*x14516))+((r11*x14503))+((x14500*x14511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14518=((1.0)*gconst53);
CheckValue<IkReal> x14519=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst52*r10))+(((-1.0)*r11*x14518)))),-1);
if(!x14519.valid){
continue;
}
CheckValue<IkReal> x14520 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst52*r21))+(((-1.0)*r20*x14518)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14520.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14519.value)))+(x14520.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14521=IKsin(j14);
IkReal x14522=IKcos(j14);
IkReal x14523=(sj11*sj12);
IkReal x14524=(r10*sj13);
IkReal x14525=((1.0)*cj12);
IkReal x14526=(cj11*sj12);
IkReal x14527=(cj13*gconst53);
IkReal x14528=(gconst52*sj13);
IkReal x14529=((1.0)*sj13);
IkReal x14530=(gconst52*r11);
IkReal x14531=(cj13*gconst52);
IkReal x14532=(gconst53*sj13);
IkReal x14533=(cj11*x14525);
IkReal x14534=((1.0)*x14522);
IkReal x14535=(gconst53*x14522);
IkReal x14536=(r22*x14521);
IkReal x14537=(cj13*x14522);
IkReal x14538=(gconst52*x14521);
IkReal x14539=(r02*x14521);
IkReal x14540=(r12*x14521);
IkReal x14541=((1.0)*gconst53*x14521);
evalcond[0]=((((-1.0)*r22*x14534))+(((-1.0)*r20*x14541))+((r21*x14538)));
evalcond[1]=((((-1.0)*r10*x14541))+(((-1.0)*r12*x14534))+((x14521*x14530)));
evalcond[2]=((-1.0)+(((-1.0)*r00*x14541))+((r01*x14538))+(((-1.0)*r02*x14534)));
evalcond[3]=(((r00*x14528))+((cj13*x14539))+((r01*x14532))+((r01*x14522*x14531))+(((-1.0)*r00*x14527*x14534)));
evalcond[4]=(((r00*x14522*x14532))+((r01*x14527))+((r00*x14531))+(((-1.0)*r01*x14528*x14534))+(((-1.0)*x14529*x14539)));
evalcond[5]=(((r21*x14522*x14531))+((cj13*x14536))+((r20*x14528))+((r21*x14532))+x14526+((cj12*sj11))+(((-1.0)*r20*x14527*x14534)));
evalcond[6]=((((-1.0)*x14533))+(((-1.0)*r10*x14527*x14534))+((r11*x14532))+((cj13*x14540))+x14523+((gconst52*x14524))+((x14530*x14537)));
evalcond[7]=((((-1.0)*x14533))+(((-1.0)*r21*x14528*x14534))+x14523+(((-1.0)*x14529*x14536))+((r21*x14527))+((r20*x14531))+((r20*x14522*x14532)));
evalcond[8]=((((-1.0)*x14526))+((r11*x14527))+(((-1.0)*x14529*x14540))+(((-1.0)*sj11*x14525))+(((-1.0)*r11*x14528*x14534))+((x14524*x14535))+((r10*x14531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x14542 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14542.valid){
continue;
}
CheckValue<IkReal> x14543=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14543.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14542.value)+(((1.5707963267949)*(x14543.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14544=IKsin(j14);
IkReal x14545=IKcos(j14);
IkReal x14546=(sj11*sj12);
IkReal x14547=(r10*sj13);
IkReal x14548=((1.0)*cj12);
IkReal x14549=(cj11*sj12);
IkReal x14550=(cj13*gconst53);
IkReal x14551=(gconst52*sj13);
IkReal x14552=((1.0)*sj13);
IkReal x14553=(gconst52*r11);
IkReal x14554=(cj13*gconst52);
IkReal x14555=(gconst53*sj13);
IkReal x14556=(cj11*x14548);
IkReal x14557=((1.0)*x14545);
IkReal x14558=(gconst53*x14545);
IkReal x14559=(r22*x14544);
IkReal x14560=(cj13*x14545);
IkReal x14561=(gconst52*x14544);
IkReal x14562=(r02*x14544);
IkReal x14563=(r12*x14544);
IkReal x14564=((1.0)*gconst53*x14544);
evalcond[0]=(((r21*x14561))+(((-1.0)*r22*x14557))+(((-1.0)*r20*x14564)));
evalcond[1]=((((-1.0)*r10*x14564))+((x14544*x14553))+(((-1.0)*r12*x14557)));
evalcond[2]=((-1.0)+((r01*x14561))+(((-1.0)*r02*x14557))+(((-1.0)*r00*x14564)));
evalcond[3]=(((r01*x14545*x14554))+(((-1.0)*r00*x14550*x14557))+((r01*x14555))+((r00*x14551))+((cj13*x14562)));
evalcond[4]=(((r00*x14545*x14555))+(((-1.0)*r01*x14551*x14557))+(((-1.0)*x14552*x14562))+((r01*x14550))+((r00*x14554)));
evalcond[5]=((((-1.0)*r20*x14550*x14557))+((r20*x14551))+x14549+((cj13*x14559))+((cj12*sj11))+((r21*x14545*x14554))+((r21*x14555)));
evalcond[6]=(((gconst52*x14547))+(((-1.0)*x14556))+x14546+((x14553*x14560))+((r11*x14555))+((cj13*x14563))+(((-1.0)*r10*x14550*x14557)));
evalcond[7]=(((r20*x14545*x14555))+(((-1.0)*x14552*x14559))+((r20*x14554))+(((-1.0)*x14556))+x14546+(((-1.0)*r21*x14551*x14557))+((r21*x14550)));
evalcond[8]=((((-1.0)*x14549))+(((-1.0)*x14552*x14563))+((r10*x14554))+(((-1.0)*r11*x14551*x14557))+((r11*x14550))+(((-1.0)*sj11*x14548))+((x14547*x14558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x14565=((-1.0)*pz);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14565);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14565);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14566=(r01*sj15);
IkReal x14567=((1.0)*cj15*r00);
j14eval[0]=((((-1.0)*x14567))+x14566);
j14eval[1]=((((-1.0)*cj13*x14567))+((cj13*x14566)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x14568=((-1.0)*pz);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14568);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14568);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14569=(cj15*r00);
IkReal x14570=(r01*sj15);
j14eval[0]=(x14570+(((-1.0)*x14569)));
j14eval[1]=((((-1.0)*sj13*x14570))+((sj13*x14569)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x14571=((-1.0)*pz);
sj10=1.0;
cj10=0;
j10=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14571);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14571);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j14eval[0]=cj13;
j14eval[1]=r22;
j14eval[2]=((((-1.0)*cj13*cj15*r00))+((cj13*r01*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14572=((1.0)*sj13);
CheckValue<IkReal> x14573=IKPowWithIntegerCheck(cj13,-1);
if(!x14573.valid){
continue;
}
CheckValue<IkReal> x14574=IKPowWithIntegerCheck(r22,-1);
if(!x14574.valid){
continue;
}
CheckValue<IkReal> x14575=IKPowWithIntegerCheck(((((-1.0)*cj13*cj15*r00))+((cj13*r01*sj15))),-1);
if(!x14575.valid){
continue;
}
if( IKabs(((x14573.value)*(x14574.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14575.value)*(((((-1.0)*cj15*r01*x14572))+(((-1.0)*r00*sj15*x14572)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14573.value)*(x14574.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*sj11))))))+IKsqr(((x14575.value)*(((((-1.0)*cj15*r01*x14572))+(((-1.0)*r00*sj15*x14572))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x14573.value)*(x14574.value)*(((((-1.0)*cj11*sj12))+(((-1.0)*cj12*sj11))))), ((x14575.value)*(((((-1.0)*cj15*r01*x14572))+(((-1.0)*r00*sj15*x14572))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14576=IKsin(j14);
IkReal x14577=IKcos(j14);
IkReal x14578=(sj11*sj12);
IkReal x14579=((1.0)*sj13);
IkReal x14580=((1.0)*cj11);
IkReal x14581=(r00*sj15);
IkReal x14582=(cj13*r01);
IkReal x14583=(cj12*sj11);
IkReal x14584=(r10*sj13);
IkReal x14585=(cj13*r11);
IkReal x14586=(cj15*sj13);
IkReal x14587=((1.0)*cj13);
IkReal x14588=(cj12*x14580);
IkReal x14589=(sj15*x14577);
IkReal x14590=(r22*x14576);
IkReal x14591=(cj15*x14577);
IkReal x14592=(sj15*x14576);
IkReal x14593=((1.0)*cj15*x14576);
evalcond[0]=((-1.0)*r22*x14577);
evalcond[1]=(((cj13*x14590))+x14583+((cj11*sj12)));
evalcond[2]=((((-1.0)*r10*x14593))+((r11*x14592)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x14593))+((r01*x14592)));
evalcond[4]=((((-1.0)*x14588))+x14578+(((-1.0)*x14579*x14590)));
evalcond[5]=((((-1.0)*r00*x14587*x14591))+((sj13*x14581))+((x14582*x14589))+((r01*x14586)));
evalcond[6]=((((-1.0)*r01*x14579*x14589))+((r00*x14577*x14586))+((cj13*x14581))+((cj15*x14582)));
evalcond[7]=((((-1.0)*x14588))+((x14585*x14589))+x14578+((r11*x14586))+((sj15*x14584))+(((-1.0)*r10*x14587*x14591)));
evalcond[8]=((((-1.0)*sj12*x14580))+(((-1.0)*r11*x14579*x14589))+(((-1.0)*x14583))+((cj13*r10*sj15))+((cj15*x14585))+((x14584*x14591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14594=((1.0)*r01);
IkReal x14595=((1.0)*r00);
CheckValue<IkReal> x14596=IKPowWithIntegerCheck(((((-1.0)*cj15*x14595))+((r01*sj15))),-1);
if(!x14596.valid){
continue;
}
CheckValue<IkReal> x14597=IKPowWithIntegerCheck((((cj15*r00*sj13))+(((-1.0)*sj13*sj15*x14594))),-1);
if(!x14597.valid){
continue;
}
if( IKabs(x14596.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14597.value)*(((((-1.0)*cj13*sj15*x14595))+(((-1.0)*cj13*cj15*x14594)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14596.value)+IKsqr(((x14597.value)*(((((-1.0)*cj13*sj15*x14595))+(((-1.0)*cj13*cj15*x14594))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(x14596.value, ((x14597.value)*(((((-1.0)*cj13*sj15*x14595))+(((-1.0)*cj13*cj15*x14594))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14598=IKsin(j14);
IkReal x14599=IKcos(j14);
IkReal x14600=(sj11*sj12);
IkReal x14601=((1.0)*sj13);
IkReal x14602=((1.0)*cj11);
IkReal x14603=(r00*sj15);
IkReal x14604=(cj13*r01);
IkReal x14605=(cj12*sj11);
IkReal x14606=(r10*sj13);
IkReal x14607=(cj13*r11);
IkReal x14608=(cj15*sj13);
IkReal x14609=((1.0)*cj13);
IkReal x14610=(cj12*x14602);
IkReal x14611=(sj15*x14599);
IkReal x14612=(r22*x14598);
IkReal x14613=(cj15*x14599);
IkReal x14614=(sj15*x14598);
IkReal x14615=((1.0)*cj15*x14598);
evalcond[0]=((-1.0)*r22*x14599);
evalcond[1]=(((cj13*x14612))+x14605+((cj11*sj12)));
evalcond[2]=((((-1.0)*r10*x14615))+((r11*x14614)));
evalcond[3]=((-1.0)+((r01*x14614))+(((-1.0)*r00*x14615)));
evalcond[4]=(x14600+(((-1.0)*x14610))+(((-1.0)*x14601*x14612)));
evalcond[5]=((((-1.0)*r00*x14609*x14613))+((r01*x14608))+((sj13*x14603))+((x14604*x14611)));
evalcond[6]=(((cj13*x14603))+((cj15*x14604))+(((-1.0)*r01*x14601*x14611))+((r00*x14599*x14608)));
evalcond[7]=(((sj15*x14606))+((x14607*x14611))+(((-1.0)*r10*x14609*x14613))+x14600+((r11*x14608))+(((-1.0)*x14610)));
evalcond[8]=((((-1.0)*r11*x14601*x14611))+((x14606*x14613))+((cj15*x14607))+(((-1.0)*sj12*x14602))+(((-1.0)*x14605))+((cj13*r10*sj15)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14616=(r01*sj15);
IkReal x14617=((1.0)*sj13);
IkReal x14618=((1.0)*cj15*r00);
CheckValue<IkReal> x14619=IKPowWithIntegerCheck((x14616+(((-1.0)*x14618))),-1);
if(!x14619.valid){
continue;
}
CheckValue<IkReal> x14620=IKPowWithIntegerCheck(((((-1.0)*cj13*x14618))+((cj13*x14616))),-1);
if(!x14620.valid){
continue;
}
if( IKabs(x14619.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14620.value)*(((((-1.0)*cj15*r01*x14617))+(((-1.0)*r00*sj15*x14617)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14619.value)+IKsqr(((x14620.value)*(((((-1.0)*cj15*r01*x14617))+(((-1.0)*r00*sj15*x14617))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(x14619.value, ((x14620.value)*(((((-1.0)*cj15*r01*x14617))+(((-1.0)*r00*sj15*x14617))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14621=IKsin(j14);
IkReal x14622=IKcos(j14);
IkReal x14623=(sj11*sj12);
IkReal x14624=((1.0)*sj13);
IkReal x14625=((1.0)*cj11);
IkReal x14626=(r00*sj15);
IkReal x14627=(cj13*r01);
IkReal x14628=(cj12*sj11);
IkReal x14629=(r10*sj13);
IkReal x14630=(cj13*r11);
IkReal x14631=(cj15*sj13);
IkReal x14632=((1.0)*cj13);
IkReal x14633=(cj12*x14625);
IkReal x14634=(sj15*x14622);
IkReal x14635=(r22*x14621);
IkReal x14636=(cj15*x14622);
IkReal x14637=(sj15*x14621);
IkReal x14638=((1.0)*cj15*x14621);
evalcond[0]=((-1.0)*r22*x14622);
evalcond[1]=(((cj13*x14635))+x14628+((cj11*sj12)));
evalcond[2]=(((r11*x14637))+(((-1.0)*r10*x14638)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x14638))+((r01*x14637)));
evalcond[4]=((((-1.0)*x14624*x14635))+(((-1.0)*x14633))+x14623);
evalcond[5]=((((-1.0)*r00*x14632*x14636))+((r01*x14631))+((x14627*x14634))+((sj13*x14626)));
evalcond[6]=(((r00*x14622*x14631))+((cj15*x14627))+((cj13*x14626))+(((-1.0)*r01*x14624*x14634)));
evalcond[7]=((((-1.0)*x14633))+(((-1.0)*r10*x14632*x14636))+((sj15*x14629))+((x14630*x14634))+((r11*x14631))+x14623);
evalcond[8]=(((x14629*x14636))+(((-1.0)*sj12*x14625))+(((-1.0)*r11*x14624*x14634))+((cj13*r10*sj15))+(((-1.0)*x14628))+((cj15*x14630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14639=cj15*cj15;
IkReal x14640=(cj13*r20);
IkReal x14641=(cj15*sj15);
IkReal x14642=(r00*r21);
IkReal x14643=(r20*sj13);
IkReal x14644=(r22*sj13);
IkReal x14645=((1.0)*x14639);
IkReal x14646=(cj13*r01*r21);
CheckValue<IkReal> x14647=IKPowWithIntegerCheck(IKsign((((cj13*x14641*x14642))+(((-1.0)*r00*x14640*x14645))+(((-1.0)*cj13*r02*r22))+(((-1.0)*x14646))+((x14639*x14646))+((r01*x14640*x14641)))),-1);
if(!x14647.valid){
continue;
}
CheckValue<IkReal> x14648 = IKatan2WithCheck(IkReal((((cj15*r01*x14644))+((r00*sj15*x14644)))),IkReal(((((-1.0)*r01*x14643*x14645))+((r01*r21*sj13*x14641))+(((-1.0)*sj13*x14642*x14645))+((sj13*x14642))+(((-1.0)*r00*x14641*x14643)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14648.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14647.value)))+(x14648.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14649=IKsin(j14);
IkReal x14650=IKcos(j14);
IkReal x14651=(sj11*sj12);
IkReal x14652=(cj13*r21);
IkReal x14653=((1.0)*r02);
IkReal x14654=((1.0)*sj13);
IkReal x14655=((1.0)*cj11);
IkReal x14656=(r00*sj15);
IkReal x14657=(cj13*cj15);
IkReal x14658=(cj12*sj11);
IkReal x14659=(r10*sj13);
IkReal x14660=((1.0)*r00);
IkReal x14661=(cj15*sj13);
IkReal x14662=(r20*sj15);
IkReal x14663=((1.0)*r10);
IkReal x14664=(cj12*x14655);
IkReal x14665=(sj15*x14650);
IkReal x14666=(r22*x14649);
IkReal x14667=(cj13*x14649);
IkReal x14668=(cj15*x14650);
IkReal x14669=(cj15*x14649);
IkReal x14670=(sj15*x14649);
IkReal x14671=((1.0)*x14650);
evalcond[0]=(((r21*x14670))+(((-1.0)*r22*x14671))+(((-1.0)*r20*x14669)));
evalcond[1]=((((-1.0)*x14663*x14669))+(((-1.0)*r12*x14671))+((r11*x14670)));
evalcond[2]=((-1.0)+(((-1.0)*x14660*x14669))+((r01*x14670))+(((-1.0)*x14650*x14653)));
evalcond[3]=(((r02*x14667))+(((-1.0)*x14650*x14657*x14660))+((sj13*x14656))+((r01*x14661))+((cj13*r01*x14665)));
evalcond[4]=(((cj13*x14656))+((r00*x14650*x14661))+((r01*x14657))+(((-1.0)*r01*x14654*x14665))+(((-1.0)*sj13*x14649*x14653)));
evalcond[5]=(((r21*x14661))+(((-1.0)*r20*x14657*x14671))+((cj13*x14666))+((x14652*x14665))+((sj13*x14662))+x14658+((cj11*sj12)));
evalcond[6]=((((-1.0)*x14650*x14657*x14663))+x14651+((r11*x14661))+((cj13*r11*x14665))+((r12*x14667))+((sj15*x14659))+(((-1.0)*x14664)));
evalcond[7]=(((cj15*x14652))+(((-1.0)*x14654*x14666))+((cj13*x14662))+x14651+((r20*x14650*x14661))+(((-1.0)*x14664))+(((-1.0)*r21*x14654*x14665)));
evalcond[8]=((((-1.0)*r11*x14654*x14665))+(((-1.0)*x14658))+(((-1.0)*r12*x14649*x14654))+((x14659*x14668))+((cj13*r10*sj15))+(((-1.0)*sj12*x14655))+((r11*x14657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14672=((1.0)*cj15);
CheckValue<IkReal> x14673=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14672))+(((-1.0)*r10*sj15)))),-1);
if(!x14673.valid){
continue;
}
CheckValue<IkReal> x14674 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj15))+(((-1.0)*r20*x14672)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14674.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14673.value)))+(x14674.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14675=IKsin(j14);
IkReal x14676=IKcos(j14);
IkReal x14677=(sj11*sj12);
IkReal x14678=(cj13*r21);
IkReal x14679=((1.0)*r02);
IkReal x14680=((1.0)*sj13);
IkReal x14681=((1.0)*cj11);
IkReal x14682=(r00*sj15);
IkReal x14683=(cj13*cj15);
IkReal x14684=(cj12*sj11);
IkReal x14685=(r10*sj13);
IkReal x14686=((1.0)*r00);
IkReal x14687=(cj15*sj13);
IkReal x14688=(r20*sj15);
IkReal x14689=((1.0)*r10);
IkReal x14690=(cj12*x14681);
IkReal x14691=(sj15*x14676);
IkReal x14692=(r22*x14675);
IkReal x14693=(cj13*x14675);
IkReal x14694=(cj15*x14676);
IkReal x14695=(cj15*x14675);
IkReal x14696=(sj15*x14675);
IkReal x14697=((1.0)*x14676);
evalcond[0]=((((-1.0)*r22*x14697))+((r21*x14696))+(((-1.0)*r20*x14695)));
evalcond[1]=(((r11*x14696))+(((-1.0)*r12*x14697))+(((-1.0)*x14689*x14695)));
evalcond[2]=((-1.0)+(((-1.0)*x14676*x14679))+((r01*x14696))+(((-1.0)*x14686*x14695)));
evalcond[3]=((((-1.0)*x14676*x14683*x14686))+((r01*x14687))+((sj13*x14682))+((cj13*r01*x14691))+((r02*x14693)));
evalcond[4]=(((r01*x14683))+(((-1.0)*sj13*x14675*x14679))+((r00*x14676*x14687))+(((-1.0)*r01*x14680*x14691))+((cj13*x14682)));
evalcond[5]=(((sj13*x14688))+((x14678*x14691))+(((-1.0)*r20*x14683*x14697))+x14684+((cj11*sj12))+((cj13*x14692))+((r21*x14687)));
evalcond[6]=((((-1.0)*x14676*x14683*x14689))+((r11*x14687))+((cj13*r11*x14691))+((r12*x14693))+(((-1.0)*x14690))+x14677+((sj15*x14685)));
evalcond[7]=(((r20*x14676*x14687))+(((-1.0)*r21*x14680*x14691))+(((-1.0)*x14680*x14692))+((cj15*x14678))+(((-1.0)*x14690))+x14677+((cj13*x14688)));
evalcond[8]=((((-1.0)*sj12*x14681))+((x14685*x14694))+((r11*x14683))+(((-1.0)*r11*x14680*x14691))+((cj13*r10*sj15))+(((-1.0)*r12*x14675*x14680))+(((-1.0)*x14684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x14698=IKPowWithIntegerCheck(IKsign((((r20*sj15))+((cj15*r21)))),-1);
if(!x14698.valid){
continue;
}
CheckValue<IkReal> x14699 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*cj15*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14699.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14698.value)))+(x14699.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14700=IKsin(j14);
IkReal x14701=IKcos(j14);
IkReal x14702=(sj11*sj12);
IkReal x14703=(cj13*r21);
IkReal x14704=((1.0)*r02);
IkReal x14705=((1.0)*sj13);
IkReal x14706=((1.0)*cj11);
IkReal x14707=(r00*sj15);
IkReal x14708=(cj13*cj15);
IkReal x14709=(cj12*sj11);
IkReal x14710=(r10*sj13);
IkReal x14711=((1.0)*r00);
IkReal x14712=(cj15*sj13);
IkReal x14713=(r20*sj15);
IkReal x14714=((1.0)*r10);
IkReal x14715=(cj12*x14706);
IkReal x14716=(sj15*x14701);
IkReal x14717=(r22*x14700);
IkReal x14718=(cj13*x14700);
IkReal x14719=(cj15*x14701);
IkReal x14720=(cj15*x14700);
IkReal x14721=(sj15*x14700);
IkReal x14722=((1.0)*x14701);
evalcond[0]=(((r21*x14721))+(((-1.0)*r20*x14720))+(((-1.0)*r22*x14722)));
evalcond[1]=((((-1.0)*r12*x14722))+((r11*x14721))+(((-1.0)*x14714*x14720)));
evalcond[2]=((-1.0)+((r01*x14721))+(((-1.0)*x14711*x14720))+(((-1.0)*x14701*x14704)));
evalcond[3]=(((r02*x14718))+((sj13*x14707))+((cj13*r01*x14716))+(((-1.0)*x14701*x14708*x14711))+((r01*x14712)));
evalcond[4]=(((r01*x14708))+((r00*x14701*x14712))+(((-1.0)*r01*x14705*x14716))+(((-1.0)*sj13*x14700*x14704))+((cj13*x14707)));
evalcond[5]=(((r21*x14712))+((cj13*x14717))+((x14703*x14716))+x14709+((sj13*x14713))+(((-1.0)*r20*x14708*x14722))+((cj11*sj12)));
evalcond[6]=(((r12*x14718))+((r11*x14712))+((sj15*x14710))+(((-1.0)*x14701*x14708*x14714))+(((-1.0)*x14715))+x14702+((cj13*r11*x14716)));
evalcond[7]=(((cj15*x14703))+((cj13*x14713))+(((-1.0)*r21*x14705*x14716))+(((-1.0)*x14715))+x14702+(((-1.0)*x14705*x14717))+((r20*x14701*x14712)));
evalcond[8]=(((x14710*x14719))+(((-1.0)*x14709))+((r11*x14708))+(((-1.0)*sj12*x14706))+((cj13*r10*sj15))+(((-1.0)*r11*x14705*x14716))+(((-1.0)*r12*x14700*x14705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x14723=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x14723;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x14723);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x14724=((1.0)*cj15);
IkReal x14725=((((-1.0)*r21*x14724))+(((-1.0)*r20*sj15)));
j14eval[0]=x14725;
j14eval[1]=IKsign(x14725);
j14eval[2]=((IKabs(r12))+(IKabs((((r11*sj15))+(((-1.0)*r10*x14724))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x14726=cj15*cj15;
IkReal x14727=(cj13*r01);
IkReal x14728=(cj15*sj15);
IkReal x14729=(cj13*r00);
IkReal x14730=((((-1.0)*cj13*r02*r22))+((r21*x14726*x14727))+((r21*x14728*x14729))+((r20*x14727*x14728))+(((-1.0)*r21*x14727))+(((-1.0)*r20*x14726*x14729)));
j14eval[0]=x14730;
j14eval[1]=IKsign(x14730);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x14731=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x14731;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x14731);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x14732=((1.0)*cj15);
IkReal x14733=((((-1.0)*r21*x14732))+(((-1.0)*r20*sj15)));
j14eval[0]=x14733;
j14eval[1]=IKsign(x14733);
j14eval[2]=((IKabs((((r11*sj15))+(((-1.0)*r10*x14732)))))+(IKabs(r12)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x14734=cj15*cj15;
IkReal x14735=r01*r01;
IkReal x14736=(cj15*r00);
IkReal x14737=(r01*sj15);
IkReal x14738=(((x14734*(r00*r00)))+x14735+(((-1.0)*x14734*x14735))+(r02*r02)+(((-2.0)*x14736*x14737)));
j14eval[0]=x14738;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x14737))+x14736))));
j14eval[2]=IKsign(x14738);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14739=cj15*cj15;
IkReal x14740=r01*r01;
IkReal x14741=(r01*sj15);
IkReal x14742=(cj15*r00);
CheckValue<IkReal> x14743 = IKatan2WithCheck(IkReal(((((-1.0)*x14741))+x14742)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14743.valid){
continue;
}
CheckValue<IkReal> x14744=IKPowWithIntegerCheck(IKsign(((((-2.0)*x14741*x14742))+((x14739*(r00*r00)))+x14740+(r02*r02)+(((-1.0)*x14739*x14740)))),-1);
if(!x14744.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14743.value)+(((1.5707963267949)*(x14744.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14745=IKsin(j14);
IkReal x14746=IKcos(j14);
IkReal x14747=(r11*sj15);
IkReal x14748=(cj15*r10);
IkReal x14749=(cj15*r00);
IkReal x14750=(r21*sj15);
IkReal x14751=(r01*sj15);
IkReal x14752=(cj15*r20);
IkReal x14753=((1.0)*x14746);
IkReal x14754=((1.0)*x14745);
evalcond[0]=(((x14745*x14750))+(((-1.0)*x14752*x14754))+(((-1.0)*r22*x14753)));
evalcond[1]=((((-1.0)*r12*x14753))+((x14745*x14747))+(((-1.0)*x14748*x14754)));
evalcond[2]=((((-1.0)*x14751*x14753))+((x14746*x14749))+(((-1.0)*r02*x14754)));
evalcond[3]=((1.0)+((x14745*x14751))+(((-1.0)*r02*x14753))+(((-1.0)*x14749*x14754)));
evalcond[4]=((((-1.0)*r12*x14754))+((x14746*x14748))+((cj12*sj11))+(((-1.0)*x14747*x14753))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((x14746*x14752))+(((-1.0)*x14750*x14753))+(((-1.0)*r22*x14754))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14755=((1.0)*cj15);
CheckValue<IkReal> x14756 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*r10*x14755)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14756.valid){
continue;
}
CheckValue<IkReal> x14757=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15))+(((-1.0)*r21*x14755)))),-1);
if(!x14757.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14756.value)+(((1.5707963267949)*(x14757.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14758=IKsin(j14);
IkReal x14759=IKcos(j14);
IkReal x14760=(r11*sj15);
IkReal x14761=(cj15*r10);
IkReal x14762=(cj15*r00);
IkReal x14763=(r21*sj15);
IkReal x14764=(r01*sj15);
IkReal x14765=(cj15*r20);
IkReal x14766=((1.0)*x14759);
IkReal x14767=((1.0)*x14758);
evalcond[0]=(((x14758*x14763))+(((-1.0)*r22*x14766))+(((-1.0)*x14765*x14767)));
evalcond[1]=((((-1.0)*r12*x14766))+((x14758*x14760))+(((-1.0)*x14761*x14767)));
evalcond[2]=((((-1.0)*r02*x14767))+(((-1.0)*x14764*x14766))+((x14759*x14762)));
evalcond[3]=((1.0)+(((-1.0)*r02*x14766))+((x14758*x14764))+(((-1.0)*x14762*x14767)));
evalcond[4]=((((-1.0)*x14760*x14766))+(((-1.0)*r12*x14767))+((cj12*sj11))+((cj11*sj12))+((x14759*x14761)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x14763*x14766))+(((-1.0)*r22*x14767))+(((-1.0)*cj11*cj12))+((x14759*x14765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x14768=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x14768.valid){
continue;
}
CheckValue<IkReal> x14769 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14769.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14768.value)))+(x14769.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14770=IKsin(j14);
IkReal x14771=IKcos(j14);
IkReal x14772=(r11*sj15);
IkReal x14773=(cj15*r10);
IkReal x14774=(cj15*r00);
IkReal x14775=(r21*sj15);
IkReal x14776=(r01*sj15);
IkReal x14777=(cj15*r20);
IkReal x14778=((1.0)*x14771);
IkReal x14779=((1.0)*x14770);
evalcond[0]=(((x14770*x14775))+(((-1.0)*r22*x14778))+(((-1.0)*x14777*x14779)));
evalcond[1]=((((-1.0)*x14773*x14779))+((x14770*x14772))+(((-1.0)*r12*x14778)));
evalcond[2]=((((-1.0)*r02*x14779))+(((-1.0)*x14776*x14778))+((x14771*x14774)));
evalcond[3]=((1.0)+(((-1.0)*r02*x14778))+((x14770*x14776))+(((-1.0)*x14774*x14779)));
evalcond[4]=((((-1.0)*x14772*x14778))+((x14771*x14773))+((cj12*sj11))+(((-1.0)*r12*x14779))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x14775*x14778))+((x14771*x14777))+(((-1.0)*r22*x14779))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x14780=(((cj15*r11))+((r10*sj15)));
j14eval[0]=x14780;
j14eval[1]=((IKabs(((((-1.0)*cj15*r20))+((r21*sj15)))))+(IKabs(r22)));
j14eval[2]=IKsign(x14780);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x14781=((1.0)*cj15);
IkReal x14782=((((-1.0)*r21*x14781))+(((-1.0)*r20*sj15)));
j14eval[0]=x14782;
j14eval[1]=IKsign(x14782);
j14eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x14781))+((r11*sj15))))));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x14783=r01*r01;
IkReal x14784=cj15*cj15;
IkReal x14785=(r01*sj15);
IkReal x14786=(cj15*r00);
IkReal x14787=((((-1.0)*x14784*(r00*r00)))+(((2.0)*x14785*x14786))+(((-1.0)*x14783))+(((-1.0)*(r02*r02)))+((x14783*x14784)));
j14eval[0]=x14787;
j14eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x14786))+x14785))));
j14eval[2]=IKsign(x14787);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14788=r01*r01;
IkReal x14789=cj15*cj15;
IkReal x14790=(cj15*r00);
IkReal x14791=(r01*sj15);
CheckValue<IkReal> x14792=IKPowWithIntegerCheck(IKsign((((x14788*x14789))+(((-1.0)*x14788))+(((-1.0)*(r02*r02)))+(((2.0)*x14790*x14791))+(((-1.0)*x14789*(r00*r00))))),-1);
if(!x14792.valid){
continue;
}
CheckValue<IkReal> x14793 = IKatan2WithCheck(IkReal(((((-1.0)*x14790))+x14791)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14793.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14792.value)))+(x14793.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14794=IKcos(j14);
IkReal x14795=IKsin(j14);
IkReal x14796=(cj15*r20);
IkReal x14797=(cj15*r10);
IkReal x14798=(cj15*r00);
IkReal x14799=((1.0)*x14794);
IkReal x14800=(sj15*x14794);
IkReal x14801=((1.0)*x14795);
IkReal x14802=(sj15*x14795);
evalcond[0]=((((-1.0)*x14798*x14799))+((r01*x14800))+((r02*x14795)));
evalcond[1]=(((r21*x14802))+(((-1.0)*x14796*x14801))+(((-1.0)*r22*x14799)));
evalcond[2]=((((-1.0)*x14797*x14801))+(((-1.0)*r12*x14799))+((r11*x14802)));
evalcond[3]=((1.0)+(((-1.0)*r02*x14799))+((r01*x14802))+(((-1.0)*x14798*x14801)));
evalcond[4]=((((-1.0)*x14797*x14799))+((r12*x14795))+((cj12*sj11))+((r11*x14800))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+(((-1.0)*x14796*x14799))+((r21*x14800))+((r22*x14795))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14803=((1.0)*cj15);
CheckValue<IkReal> x14804 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*r10*x14803)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14804.valid){
continue;
}
CheckValue<IkReal> x14805=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15))+(((-1.0)*r21*x14803)))),-1);
if(!x14805.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14804.value)+(((1.5707963267949)*(x14805.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14806=IKcos(j14);
IkReal x14807=IKsin(j14);
IkReal x14808=(cj15*r20);
IkReal x14809=(cj15*r10);
IkReal x14810=(cj15*r00);
IkReal x14811=((1.0)*x14806);
IkReal x14812=(sj15*x14806);
IkReal x14813=((1.0)*x14807);
IkReal x14814=(sj15*x14807);
evalcond[0]=(((r01*x14812))+((r02*x14807))+(((-1.0)*x14810*x14811)));
evalcond[1]=((((-1.0)*r22*x14811))+((r21*x14814))+(((-1.0)*x14808*x14813)));
evalcond[2]=((((-1.0)*r12*x14811))+(((-1.0)*x14809*x14813))+((r11*x14814)));
evalcond[3]=((1.0)+(((-1.0)*r02*x14811))+((r01*x14814))+(((-1.0)*x14810*x14813)));
evalcond[4]=((((-1.0)*x14809*x14811))+((cj12*sj11))+((r11*x14812))+((r12*x14807))+((cj11*sj12)));
evalcond[5]=(((sj11*sj12))+((r21*x14812))+((r22*x14807))+(((-1.0)*x14808*x14811))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x14815=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x14815.valid){
continue;
}
CheckValue<IkReal> x14816 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14816.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14815.value)))+(x14816.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x14817=IKcos(j14);
IkReal x14818=IKsin(j14);
IkReal x14819=(cj15*r20);
IkReal x14820=(cj15*r10);
IkReal x14821=(cj15*r00);
IkReal x14822=((1.0)*x14817);
IkReal x14823=(sj15*x14817);
IkReal x14824=((1.0)*x14818);
IkReal x14825=(sj15*x14818);
evalcond[0]=((((-1.0)*x14821*x14822))+((r01*x14823))+((r02*x14818)));
evalcond[1]=(((r21*x14825))+(((-1.0)*r22*x14822))+(((-1.0)*x14819*x14824)));
evalcond[2]=((((-1.0)*x14820*x14824))+(((-1.0)*r12*x14822))+((r11*x14825)));
evalcond[3]=((1.0)+(((-1.0)*x14821*x14824))+((r01*x14825))+(((-1.0)*r02*x14822)));
evalcond[4]=((((-1.0)*x14820*x14822))+((cj12*sj11))+((cj11*sj12))+((r11*x14823))+((r12*x14818)));
evalcond[5]=(((sj11*sj12))+((r21*x14823))+((r22*x14818))+(((-1.0)*x14819*x14822))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14827 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14827)==0){
continue;
}
IkReal x14826=pow(x14827,-0.5);
CheckValue<IkReal> x14828 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14828.valid){
continue;
}
IkReal gconst60=((-1.0)*(x14828.value));
IkReal gconst61=((-1.0)*r11*x14826);
IkReal gconst62=(r10*x14826);
CheckValue<IkReal> x14829 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14829.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14829.value)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
CheckValue<IkReal> x14832 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14832.valid){
continue;
}
IkReal x14830=((-1.0)*(x14832.value));
IkReal x14831=x14826;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj15=gconst61;
cj15=gconst62;
j15=x14830;
IkReal gconst60=x14830;
IkReal gconst61=((-1.0)*r11*x14831);
IkReal gconst62=(r10*x14831);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
CheckValue<IkReal> x14835 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14835.valid){
continue;
}
IkReal x14833=((-1.0)*(x14835.value));
IkReal x14834=x14826;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj15=gconst61;
cj15=gconst62;
j15=x14833;
IkReal gconst60=x14833;
IkReal gconst61=((-1.0)*r11*x14834);
IkReal gconst62=(r10*x14834);
CheckValue<IkReal> x14843=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x14843.valid){
continue;
}
IkReal x14836=x14843.value;
IkReal x14837=(sj13*x14836);
IkReal x14838=(r21*x14837);
IkReal x14839=(r00*x14837);
IkReal x14840=(r01*x14837);
IkReal x14841=(r20*x14837);
IkReal x14842=(r10*r11*x14837);
j14eval[0]=IKsign((((r20*x14839*(r10*r10)))+((r01*x14838*(r11*r11)))+((r00*r10*r11*x14838))+((r10*r11*r20*x14840))+((r02*r22*sj13))));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14844=gconst61*gconst61;
IkReal x14845=gconst62*gconst62;
IkReal x14846=(gconst62*r20);
IkReal x14847=(gconst61*r01);
IkReal x14848=(r21*sj13);
IkReal x14849=(cj13*r00);
IkReal x14850=((1.0)*cj13);
IkReal x14851=(r01*sj13);
IkReal x14852=(gconst61*r00*sj13);
IkReal x14853=((1.0)*r20*x14845);
CheckValue<IkReal> x14854 = IKatan2WithCheck(IkReal((((gconst62*r22*x14851))+((r22*x14852)))),IkReal((((gconst62*x14847*x14848))+((r00*x14844*x14848))+(((-1.0)*x14846*x14852))+(((-1.0)*x14851*x14853)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14854.valid){
continue;
}
CheckValue<IkReal> x14855=IKPowWithIntegerCheck(IKsign((((gconst61*gconst62*r21*x14849))+(((-1.0)*r02*r22*x14850))+(((-1.0)*x14849*x14853))+(((-1.0)*r01*r21*x14844*x14850))+((cj13*x14846*x14847)))),-1);
if(!x14855.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14854.value)+(((1.5707963267949)*(x14855.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14856=IKsin(j14);
IkReal x14857=IKcos(j14);
IkReal x14858=(cj12*sj11);
IkReal x14859=(cj11*sj12);
IkReal x14860=(r01*sj13);
IkReal x14861=(cj13*r00);
IkReal x14862=((1.0)*sj13);
IkReal x14863=(r11*sj13);
IkReal x14864=(sj11*sj12);
IkReal x14865=(cj11*cj12);
IkReal x14866=(r20*sj13);
IkReal x14867=(cj13*gconst62);
IkReal x14868=(gconst61*sj13);
IkReal x14869=(cj13*gconst61);
IkReal x14870=(gconst61*x14856);
IkReal x14871=((1.0)*x14857);
IkReal x14872=(r22*x14856);
IkReal x14873=(r02*x14856);
IkReal x14874=(gconst62*x14857);
IkReal x14875=(r12*x14856);
IkReal x14876=(x14859+x14858);
IkReal x14877=((1.0)*gconst62*x14856);
IkReal x14878=(x14857*x14869);
evalcond[0]=((((-1.0)*r22*x14871))+(((-1.0)*r20*x14877))+((r21*x14870)));
evalcond[1]=(((r11*x14870))+(((-1.0)*r10*x14877))+(((-1.0)*r12*x14871)));
evalcond[2]=((1.0)+(((-1.0)*r02*x14871))+(((-1.0)*r00*x14877))+((r01*x14870)));
evalcond[3]=(((gconst62*x14860))+((r01*x14878))+((cj13*x14873))+(((-1.0)*gconst62*x14861*x14871))+((r00*x14868)));
evalcond[4]=(((gconst61*x14861))+((r01*x14867))+(((-1.0)*x14862*x14873))+(((-1.0)*gconst61*x14860*x14871))+((r00*sj13*x14874)));
evalcond[5]=(x14876+((gconst61*x14866))+((gconst62*r21*sj13))+((cj13*x14872))+((r21*x14878))+(((-1.0)*r20*x14867*x14871)));
evalcond[6]=(((r11*x14878))+(((-1.0)*r10*x14867*x14871))+x14865+((gconst62*x14863))+((cj13*x14875))+((r10*x14868))+(((-1.0)*x14864)));
evalcond[7]=(x14876+(((-1.0)*gconst61*r11*x14857*x14862))+((r10*x14869))+((r10*sj13*x14874))+(((-1.0)*x14862*x14875))+((r11*x14867)));
evalcond[8]=(((x14866*x14874))+((r20*x14869))+(((-1.0)*gconst61*r21*x14857*x14862))+x14864+(((-1.0)*x14862*x14872))+((r21*x14867))+(((-1.0)*x14865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14879=gconst61*gconst61;
IkReal x14880=gconst62*gconst62;
IkReal x14881=(r01*r21);
IkReal x14882=(gconst61*gconst62);
IkReal x14883=(cj13*r00);
IkReal x14884=(r00*sj13);
IkReal x14885=((1.0)*r01*r20);
CheckValue<IkReal> x14886 = IKatan2WithCheck(IkReal((((cj13*gconst62*r01*r22))+((gconst61*r22*x14883)))),IkReal((((cj13*x14881*x14882))+((r21*x14879*x14883))+(((-1.0)*r20*x14882*x14883))+(((-1.0)*cj13*x14880*x14885)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14886.valid){
continue;
}
CheckValue<IkReal> x14887=IKPowWithIntegerCheck(IKsign((((r20*x14880*x14884))+(((-1.0)*sj13*x14882*x14885))+(((-1.0)*r21*x14882*x14884))+((sj13*x14879*x14881))+((r02*r22*sj13)))),-1);
if(!x14887.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14886.value)+(((1.5707963267949)*(x14887.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14888=IKsin(j14);
IkReal x14889=IKcos(j14);
IkReal x14890=(cj12*sj11);
IkReal x14891=(cj11*sj12);
IkReal x14892=(r01*sj13);
IkReal x14893=(cj13*r00);
IkReal x14894=((1.0)*sj13);
IkReal x14895=(r11*sj13);
IkReal x14896=(sj11*sj12);
IkReal x14897=(cj11*cj12);
IkReal x14898=(r20*sj13);
IkReal x14899=(cj13*gconst62);
IkReal x14900=(gconst61*sj13);
IkReal x14901=(cj13*gconst61);
IkReal x14902=(gconst61*x14888);
IkReal x14903=((1.0)*x14889);
IkReal x14904=(r22*x14888);
IkReal x14905=(r02*x14888);
IkReal x14906=(gconst62*x14889);
IkReal x14907=(r12*x14888);
IkReal x14908=(x14891+x14890);
IkReal x14909=((1.0)*gconst62*x14888);
IkReal x14910=(x14889*x14901);
evalcond[0]=(((r21*x14902))+(((-1.0)*r22*x14903))+(((-1.0)*r20*x14909)));
evalcond[1]=((((-1.0)*r12*x14903))+((r11*x14902))+(((-1.0)*r10*x14909)));
evalcond[2]=((1.0)+((r01*x14902))+(((-1.0)*r02*x14903))+(((-1.0)*r00*x14909)));
evalcond[3]=(((r00*x14900))+((r01*x14910))+((cj13*x14905))+((gconst62*x14892))+(((-1.0)*gconst62*x14893*x14903)));
evalcond[4]=(((r01*x14899))+(((-1.0)*x14894*x14905))+(((-1.0)*gconst61*x14892*x14903))+((r00*sj13*x14906))+((gconst61*x14893)));
evalcond[5]=(((r21*x14910))+x14908+((gconst62*r21*sj13))+(((-1.0)*r20*x14899*x14903))+((cj13*x14904))+((gconst61*x14898)));
evalcond[6]=(x14897+((r11*x14910))+(((-1.0)*r10*x14899*x14903))+((cj13*x14907))+(((-1.0)*x14896))+((gconst62*x14895))+((r10*x14900)));
evalcond[7]=(x14908+((r11*x14899))+(((-1.0)*x14894*x14907))+(((-1.0)*gconst61*r11*x14889*x14894))+((r10*sj13*x14906))+((r10*x14901)));
evalcond[8]=((((-1.0)*gconst61*r21*x14889*x14894))+x14896+((r21*x14899))+(((-1.0)*x14894*x14904))+((x14898*x14906))+((r20*x14901))+(((-1.0)*x14897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14911=((1.0)*gconst62);
CheckValue<IkReal> x14912 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x14911))+((gconst61*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14912.valid){
continue;
}
CheckValue<IkReal> x14913=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r20))+(((-1.0)*r21*x14911)))),-1);
if(!x14913.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14912.value)+(((1.5707963267949)*(x14913.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14914=IKsin(j14);
IkReal x14915=IKcos(j14);
IkReal x14916=(cj12*sj11);
IkReal x14917=(cj11*sj12);
IkReal x14918=(r01*sj13);
IkReal x14919=(cj13*r00);
IkReal x14920=((1.0)*sj13);
IkReal x14921=(r11*sj13);
IkReal x14922=(sj11*sj12);
IkReal x14923=(cj11*cj12);
IkReal x14924=(r20*sj13);
IkReal x14925=(cj13*gconst62);
IkReal x14926=(gconst61*sj13);
IkReal x14927=(cj13*gconst61);
IkReal x14928=(gconst61*x14914);
IkReal x14929=((1.0)*x14915);
IkReal x14930=(r22*x14914);
IkReal x14931=(r02*x14914);
IkReal x14932=(gconst62*x14915);
IkReal x14933=(r12*x14914);
IkReal x14934=(x14916+x14917);
IkReal x14935=((1.0)*gconst62*x14914);
IkReal x14936=(x14915*x14927);
evalcond[0]=(((r21*x14928))+(((-1.0)*r20*x14935))+(((-1.0)*r22*x14929)));
evalcond[1]=((((-1.0)*r10*x14935))+(((-1.0)*r12*x14929))+((r11*x14928)));
evalcond[2]=((1.0)+((r01*x14928))+(((-1.0)*r00*x14935))+(((-1.0)*r02*x14929)));
evalcond[3]=(((cj13*x14931))+(((-1.0)*gconst62*x14919*x14929))+((r01*x14936))+((r00*x14926))+((gconst62*x14918)));
evalcond[4]=(((gconst61*x14919))+(((-1.0)*x14920*x14931))+((r01*x14925))+(((-1.0)*gconst61*x14918*x14929))+((r00*sj13*x14932)));
evalcond[5]=(x14934+((cj13*x14930))+((gconst62*r21*sj13))+((r21*x14936))+((gconst61*x14924))+(((-1.0)*r20*x14925*x14929)));
evalcond[6]=(((gconst62*x14921))+(((-1.0)*x14922))+(((-1.0)*r10*x14925*x14929))+x14923+((cj13*x14933))+((r10*x14926))+((r11*x14936)));
evalcond[7]=((((-1.0)*x14920*x14933))+x14934+((r10*x14927))+(((-1.0)*gconst61*r11*x14915*x14920))+((r10*sj13*x14932))+((r11*x14925)));
evalcond[8]=((((-1.0)*x14923))+(((-1.0)*x14920*x14930))+x14922+((r21*x14925))+((x14924*x14932))+(((-1.0)*gconst61*r21*x14915*x14920))+((r20*x14927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14938 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x14938)==0){
continue;
}
IkReal x14937=pow(x14938,-0.5);
CheckValue<IkReal> x14939 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14939.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x14939.value))));
IkReal gconst64=((1.0)*r11*x14937);
IkReal gconst65=((-1.0)*r10*x14937);
CheckValue<IkReal> x14940 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14940.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14940.value)+j15)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
CheckValue<IkReal> x14943 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x14943.valid){
continue;
}
IkReal x14941=((1.0)*(x14943.value));
IkReal x14942=x14937;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj15=gconst64;
cj15=gconst65;
j15=((3.14159265)+(((-1.0)*x14941)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x14941)));
IkReal gconst64=((1.0)*r11*x14942);
IkReal gconst65=((-1.0)*r10*x14942);
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14944=gconst64*gconst64;
IkReal x14945=gconst65*gconst65;
IkReal x14946=(cj13*r22);
IkReal x14947=(gconst64*r00);
IkReal x14948=(cj13*r01);
IkReal x14949=(gconst65*r01);
IkReal x14950=(gconst65*r21);
IkReal x14951=((1.0)*sj13);
IkReal x14952=(r20*x14945);
IkReal x14953=(r21*x14944);
CheckValue<IkReal> x14954=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst64*r20*x14949*x14951))+(((-1.0)*x14947*x14950*x14951))+((r01*sj13*x14953))+((r00*sj13*x14952))+((r02*r22*sj13)))),-1);
if(!x14954.valid){
continue;
}
CheckValue<IkReal> x14955 = IKatan2WithCheck(IkReal((((x14946*x14947))+((x14946*x14949)))),IkReal(((((-1.0)*x14948*x14952))+((gconst64*x14948*x14950))+(((-1.0)*cj13*gconst65*r20*x14947))+((cj13*r00*x14953)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14955.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14954.value)))+(x14955.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14956=IKsin(j14);
IkReal x14957=IKcos(j14);
IkReal x14958=(cj12*sj11);
IkReal x14959=(cj11*sj12);
IkReal x14960=(cj13*gconst65);
IkReal x14961=(cj11*cj12);
IkReal x14962=(gconst65*sj13);
IkReal x14963=(cj13*gconst64);
IkReal x14964=(sj11*sj12);
IkReal x14965=(gconst64*sj13);
IkReal x14966=((1.0)*x14957);
IkReal x14967=(cj13*x14956);
IkReal x14968=((1.0)*x14956);
IkReal x14969=(gconst64*x14956);
IkReal x14970=(x14958+x14959);
evalcond[0]=((((-1.0)*gconst65*r20*x14968))+(((-1.0)*r22*x14966))+((r21*x14969)));
evalcond[1]=((((-1.0)*r12*x14966))+((r11*x14969))+(((-1.0)*gconst65*r10*x14968)));
evalcond[2]=((1.0)+((r01*x14969))+(((-1.0)*r02*x14966))+(((-1.0)*gconst65*r00*x14968)));
evalcond[3]=(((r01*x14962))+(((-1.0)*r00*x14960*x14966))+((r02*x14967))+((r01*x14957*x14963))+((r00*x14965)));
evalcond[4]=(((r01*x14960))+(((-1.0)*r02*sj13*x14968))+(((-1.0)*r01*x14965*x14966))+((r00*x14957*x14962))+((r00*x14963)));
evalcond[5]=(((r22*x14967))+(((-1.0)*r20*x14960*x14966))+x14970+((r21*x14957*x14963))+((r20*x14965))+((r21*x14962)));
evalcond[6]=(((r11*x14957*x14963))+(((-1.0)*x14964))+x14961+((r12*x14967))+((r11*x14962))+(((-1.0)*r10*x14960*x14966))+((r10*x14965)));
evalcond[7]=(x14970+(((-1.0)*r11*x14965*x14966))+((r11*x14960))+(((-1.0)*r12*sj13*x14968))+((r10*x14957*x14962))+((r10*x14963)));
evalcond[8]=((((-1.0)*r21*x14965*x14966))+(((-1.0)*x14961))+x14964+(((-1.0)*r22*sj13*x14968))+((r20*x14957*x14962))+((r20*x14963))+((r21*x14960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14971=((1.0)*gconst65);
CheckValue<IkReal> x14972 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x14971))+((gconst64*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14972.valid){
continue;
}
CheckValue<IkReal> x14973=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst64*r20))+(((-1.0)*r21*x14971)))),-1);
if(!x14973.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x14972.value)+(((1.5707963267949)*(x14973.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x14974=IKsin(j14);
IkReal x14975=IKcos(j14);
IkReal x14976=(cj12*sj11);
IkReal x14977=(cj11*sj12);
IkReal x14978=(cj13*gconst65);
IkReal x14979=(cj11*cj12);
IkReal x14980=(gconst65*sj13);
IkReal x14981=(cj13*gconst64);
IkReal x14982=(sj11*sj12);
IkReal x14983=(gconst64*sj13);
IkReal x14984=((1.0)*x14975);
IkReal x14985=(cj13*x14974);
IkReal x14986=((1.0)*x14974);
IkReal x14987=(gconst64*x14974);
IkReal x14988=(x14976+x14977);
evalcond[0]=((((-1.0)*gconst65*r20*x14986))+((r21*x14987))+(((-1.0)*r22*x14984)));
evalcond[1]=(((r11*x14987))+(((-1.0)*r12*x14984))+(((-1.0)*gconst65*r10*x14986)));
evalcond[2]=((1.0)+((r01*x14987))+(((-1.0)*r02*x14984))+(((-1.0)*gconst65*r00*x14986)));
evalcond[3]=(((r01*x14975*x14981))+(((-1.0)*r00*x14978*x14984))+((r00*x14983))+((r01*x14980))+((r02*x14985)));
evalcond[4]=((((-1.0)*r02*sj13*x14986))+((r00*x14981))+(((-1.0)*r01*x14983*x14984))+((r01*x14978))+((r00*x14975*x14980)));
evalcond[5]=(((r20*x14983))+x14988+((r22*x14985))+((r21*x14980))+((r21*x14975*x14981))+(((-1.0)*r20*x14978*x14984)));
evalcond[6]=((((-1.0)*r10*x14978*x14984))+((r11*x14975*x14981))+x14979+((r10*x14983))+((r11*x14980))+(((-1.0)*x14982))+((r12*x14985)));
evalcond[7]=((((-1.0)*r11*x14983*x14984))+((r10*x14975*x14980))+x14988+((r10*x14981))+((r11*x14978))+(((-1.0)*r12*sj13*x14986)));
evalcond[8]=(((r20*x14975*x14980))+((r20*x14981))+(((-1.0)*x14979))+x14982+(((-1.0)*r21*x14983*x14984))+(((-1.0)*r22*sj13*x14986))+((r21*x14978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x14989=((-1.0)*py);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14989);
rxp0_2=(py*r00);
rxp1_0=(r21*x14989);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14990=(r01*sj15);
IkReal x14991=((1.0)*cj15*r00);
j14eval[0]=((((-1.0)*x14991))+x14990);
j14eval[1]=(((cj13*x14990))+(((-1.0)*cj13*x14991)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x14992=((-1.0)*py);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14992);
rxp0_2=(py*r00);
rxp1_0=(r21*x14992);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x14993=(cj15*r00);
IkReal x14994=(r01*sj15);
j14eval[0]=(x14994+(((-1.0)*x14993)));
j14eval[1]=((((-1.0)*sj13*x14994))+((sj13*x14993)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x14995=((-1.0)*py);
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x14995);
rxp0_2=(py*r00);
rxp1_0=(r21*x14995);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j14eval[0]=cj13;
j14eval[1]=r12;
j14eval[2]=((((-1.0)*cj13*cj15*r00))+((cj13*r01*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x14996=((1.0)*sj13);
CheckValue<IkReal> x14997=IKPowWithIntegerCheck(cj13,-1);
if(!x14997.valid){
continue;
}
CheckValue<IkReal> x14998=IKPowWithIntegerCheck(r12,-1);
if(!x14998.valid){
continue;
}
CheckValue<IkReal> x14999=IKPowWithIntegerCheck(((((-1.0)*cj13*cj15*r00))+((cj13*r01*sj15))),-1);
if(!x14999.valid){
continue;
}
if( IKabs(((x14997.value)*(x14998.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14999.value)*(((((-1.0)*cj15*r01*x14996))+(((-1.0)*r00*sj15*x14996)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14997.value)*(x14998.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12))))))+IKsqr(((x14999.value)*(((((-1.0)*cj15*r01*x14996))+(((-1.0)*r00*sj15*x14996))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x14997.value)*(x14998.value)*((((sj11*sj12))+(((-1.0)*cj11*cj12))))), ((x14999.value)*(((((-1.0)*cj15*r01*x14996))+(((-1.0)*r00*sj15*x14996))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15000=IKsin(j14);
IkReal x15001=IKcos(j14);
IkReal x15002=(cj12*sj11);
IkReal x15003=(cj11*sj12);
IkReal x15004=(cj13*r21);
IkReal x15005=(r01*sj13);
IkReal x15006=(cj11*cj12);
IkReal x15007=(r00*sj15);
IkReal x15008=(sj11*sj12);
IkReal x15009=(cj13*cj15);
IkReal x15010=(r20*sj13);
IkReal x15011=((1.0)*r00);
IkReal x15012=((1.0)*sj13);
IkReal x15013=((1.0)*r20);
IkReal x15014=(sj15*x15001);
IkReal x15015=(cj15*x15001);
IkReal x15016=(r12*x15000);
IkReal x15017=(cj15*x15000);
IkReal x15018=(sj15*x15000);
IkReal x15019=(x15003+x15002);
evalcond[0]=((-1.0)*r12*x15001);
evalcond[1]=((((-1.0)*x15013*x15017))+((r21*x15018)));
evalcond[2]=(((cj13*x15016))+(((-1.0)*x15008))+x15006);
evalcond[3]=((((-1.0)*x15012*x15016))+x15019);
evalcond[4]=((1.0)+(((-1.0)*x15011*x15017))+((r01*x15018)));
evalcond[5]=(((cj13*r01*x15014))+((cj15*x15005))+((sj13*x15007))+(((-1.0)*x15001*x15009*x15011)));
evalcond[6]=(((r00*sj13*x15015))+((r01*x15009))+(((-1.0)*x15005*x15014))+((cj13*x15007)));
evalcond[7]=(((sj15*x15010))+((x15004*x15014))+x15019+((cj15*r21*sj13))+(((-1.0)*x15001*x15009*x15013)));
evalcond[8]=((((-1.0)*r21*x15012*x15014))+((cj15*x15004))+(((-1.0)*x15006))+x15008+((cj13*r20*sj15))+((x15010*x15015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15020=((1.0)*r01);
IkReal x15021=(cj15*r00);
CheckValue<IkReal> x15022=IKPowWithIntegerCheck(((((-1.0)*x15021))+((r01*sj15))),-1);
if(!x15022.valid){
continue;
}
CheckValue<IkReal> x15023=IKPowWithIntegerCheck((((sj13*x15021))+(((-1.0)*sj13*sj15*x15020))),-1);
if(!x15023.valid){
continue;
}
if( IKabs(((-1.0)*(x15022.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15023.value)*(((((-1.0)*cj13*r00*sj15))+(((-1.0)*cj13*cj15*x15020)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15022.value)))+IKsqr(((x15023.value)*(((((-1.0)*cj13*r00*sj15))+(((-1.0)*cj13*cj15*x15020))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*(x15022.value)), ((x15023.value)*(((((-1.0)*cj13*r00*sj15))+(((-1.0)*cj13*cj15*x15020))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15024=IKsin(j14);
IkReal x15025=IKcos(j14);
IkReal x15026=(cj12*sj11);
IkReal x15027=(cj11*sj12);
IkReal x15028=(cj13*r21);
IkReal x15029=(r01*sj13);
IkReal x15030=(cj11*cj12);
IkReal x15031=(r00*sj15);
IkReal x15032=(sj11*sj12);
IkReal x15033=(cj13*cj15);
IkReal x15034=(r20*sj13);
IkReal x15035=((1.0)*r00);
IkReal x15036=((1.0)*sj13);
IkReal x15037=((1.0)*r20);
IkReal x15038=(sj15*x15025);
IkReal x15039=(cj15*x15025);
IkReal x15040=(r12*x15024);
IkReal x15041=(cj15*x15024);
IkReal x15042=(sj15*x15024);
IkReal x15043=(x15027+x15026);
evalcond[0]=((-1.0)*r12*x15025);
evalcond[1]=((((-1.0)*x15037*x15041))+((r21*x15042)));
evalcond[2]=((((-1.0)*x15032))+((cj13*x15040))+x15030);
evalcond[3]=((((-1.0)*x15036*x15040))+x15043);
evalcond[4]=((1.0)+(((-1.0)*x15035*x15041))+((r01*x15042)));
evalcond[5]=((((-1.0)*x15025*x15033*x15035))+((cj13*r01*x15038))+((sj13*x15031))+((cj15*x15029)));
evalcond[6]=(((r01*x15033))+(((-1.0)*x15029*x15038))+((r00*sj13*x15039))+((cj13*x15031)));
evalcond[7]=((((-1.0)*x15025*x15033*x15037))+((sj15*x15034))+x15043+((x15028*x15038))+((cj15*r21*sj13)));
evalcond[8]=((((-1.0)*r21*x15036*x15038))+((x15034*x15039))+(((-1.0)*x15030))+x15032+((cj13*r20*sj15))+((cj15*x15028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15044=(r01*sj15);
IkReal x15045=((1.0)*sj13);
IkReal x15046=((1.0)*cj15*r00);
CheckValue<IkReal> x15047=IKPowWithIntegerCheck(((((-1.0)*x15046))+x15044),-1);
if(!x15047.valid){
continue;
}
CheckValue<IkReal> x15048=IKPowWithIntegerCheck(((((-1.0)*cj13*x15046))+((cj13*x15044))),-1);
if(!x15048.valid){
continue;
}
if( IKabs(((-1.0)*(x15047.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15048.value)*(((((-1.0)*cj15*r01*x15045))+(((-1.0)*r00*sj15*x15045)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15047.value)))+IKsqr(((x15048.value)*(((((-1.0)*cj15*r01*x15045))+(((-1.0)*r00*sj15*x15045))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*(x15047.value)), ((x15048.value)*(((((-1.0)*cj15*r01*x15045))+(((-1.0)*r00*sj15*x15045))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15049=IKsin(j14);
IkReal x15050=IKcos(j14);
IkReal x15051=(cj12*sj11);
IkReal x15052=(cj11*sj12);
IkReal x15053=(cj13*r21);
IkReal x15054=(r01*sj13);
IkReal x15055=(cj11*cj12);
IkReal x15056=(r00*sj15);
IkReal x15057=(sj11*sj12);
IkReal x15058=(cj13*cj15);
IkReal x15059=(r20*sj13);
IkReal x15060=((1.0)*r00);
IkReal x15061=((1.0)*sj13);
IkReal x15062=((1.0)*r20);
IkReal x15063=(sj15*x15050);
IkReal x15064=(cj15*x15050);
IkReal x15065=(r12*x15049);
IkReal x15066=(cj15*x15049);
IkReal x15067=(sj15*x15049);
IkReal x15068=(x15052+x15051);
evalcond[0]=((-1.0)*r12*x15050);
evalcond[1]=(((r21*x15067))+(((-1.0)*x15062*x15066)));
evalcond[2]=((((-1.0)*x15057))+x15055+((cj13*x15065)));
evalcond[3]=(x15068+(((-1.0)*x15061*x15065)));
evalcond[4]=((1.0)+((r01*x15067))+(((-1.0)*x15060*x15066)));
evalcond[5]=(((cj13*r01*x15063))+((sj13*x15056))+(((-1.0)*x15050*x15058*x15060))+((cj15*x15054)));
evalcond[6]=(((r01*x15058))+((cj13*x15056))+(((-1.0)*x15054*x15063))+((r00*sj13*x15064)));
evalcond[7]=(((x15053*x15063))+x15068+(((-1.0)*x15050*x15058*x15062))+((cj15*r21*sj13))+((sj15*x15059)));
evalcond[8]=((((-1.0)*x15055))+((x15059*x15064))+(((-1.0)*r21*x15061*x15063))+x15057+((cj13*r20*sj15))+((cj15*x15053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15069=cj15*cj15;
IkReal x15070=(cj13*r20);
IkReal x15071=(cj15*sj15);
IkReal x15072=(r00*r21);
IkReal x15073=(r20*sj13);
IkReal x15074=(r22*sj13);
IkReal x15075=((1.0)*x15069);
IkReal x15076=(cj13*r01*r21);
CheckValue<IkReal> x15077=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj13*r02*r22))+((r01*x15070*x15071))+((cj13*x15071*x15072))+(((-1.0)*r00*x15070*x15075))+((x15069*x15076))+(((-1.0)*x15076)))),-1);
if(!x15077.valid){
continue;
}
CheckValue<IkReal> x15078 = IKatan2WithCheck(IkReal((((r00*sj15*x15074))+((cj15*r01*x15074)))),IkReal(((((-1.0)*sj13*x15072*x15075))+(((-1.0)*r01*x15073*x15075))+(((-1.0)*r00*x15071*x15073))+((r01*r21*sj13*x15071))+((sj13*x15072)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15078.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15077.value)))+(x15078.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15079=IKsin(j14);
IkReal x15080=IKcos(j14);
IkReal x15081=(cj12*sj11);
IkReal x15082=(cj11*sj12);
IkReal x15083=(cj13*r21);
IkReal x15084=((1.0)*r02);
IkReal x15085=((1.0)*sj13);
IkReal x15086=(cj11*cj12);
IkReal x15087=(r00*sj15);
IkReal x15088=(sj11*sj12);
IkReal x15089=(cj13*cj15);
IkReal x15090=(r10*sj13);
IkReal x15091=((1.0)*r00);
IkReal x15092=(cj15*sj13);
IkReal x15093=(r20*sj15);
IkReal x15094=((1.0)*r10);
IkReal x15095=(sj15*x15080);
IkReal x15096=(r22*x15079);
IkReal x15097=(cj13*x15079);
IkReal x15098=(cj15*x15080);
IkReal x15099=(cj15*x15079);
IkReal x15100=(sj15*x15079);
IkReal x15101=((1.0)*x15080);
IkReal x15102=(x15081+x15082);
evalcond[0]=((((-1.0)*r20*x15099))+((r21*x15100))+(((-1.0)*r22*x15101)));
evalcond[1]=((((-1.0)*r12*x15101))+(((-1.0)*x15094*x15099))+((r11*x15100)));
evalcond[2]=((1.0)+((r01*x15100))+(((-1.0)*x15080*x15084))+(((-1.0)*x15091*x15099)));
evalcond[3]=(((sj13*x15087))+((cj13*r01*x15095))+(((-1.0)*x15080*x15089*x15091))+((r01*x15092))+((r02*x15097)));
evalcond[4]=((((-1.0)*sj13*x15079*x15084))+(((-1.0)*r01*x15085*x15095))+((cj13*x15087))+((r01*x15089))+((r00*x15080*x15092)));
evalcond[5]=(((cj13*x15096))+((r21*x15092))+x15102+((x15083*x15095))+((sj13*x15093))+(((-1.0)*r20*x15089*x15101)));
evalcond[6]=(((sj15*x15090))+(((-1.0)*x15080*x15089*x15094))+x15086+((r11*x15092))+((r12*x15097))+((cj13*r11*x15095))+(((-1.0)*x15088)));
evalcond[7]=((((-1.0)*r12*x15079*x15085))+x15102+((cj13*r10*sj15))+(((-1.0)*r11*x15085*x15095))+((x15090*x15098))+((r11*x15089)));
evalcond[8]=(((cj13*x15093))+(((-1.0)*r21*x15085*x15095))+((r20*x15080*x15092))+x15088+((cj15*x15083))+(((-1.0)*x15085*x15096))+(((-1.0)*x15086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15103=((1.0)*cj15);
CheckValue<IkReal> x15104=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj15))+(((-1.0)*r21*x15103)))),-1);
if(!x15104.valid){
continue;
}
CheckValue<IkReal> x15105 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj15))+(((-1.0)*r10*x15103)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15105.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15104.value)))+(x15105.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15106=IKsin(j14);
IkReal x15107=IKcos(j14);
IkReal x15108=(cj12*sj11);
IkReal x15109=(cj11*sj12);
IkReal x15110=(cj13*r21);
IkReal x15111=((1.0)*r02);
IkReal x15112=((1.0)*sj13);
IkReal x15113=(cj11*cj12);
IkReal x15114=(r00*sj15);
IkReal x15115=(sj11*sj12);
IkReal x15116=(cj13*cj15);
IkReal x15117=(r10*sj13);
IkReal x15118=((1.0)*r00);
IkReal x15119=(cj15*sj13);
IkReal x15120=(r20*sj15);
IkReal x15121=((1.0)*r10);
IkReal x15122=(sj15*x15107);
IkReal x15123=(r22*x15106);
IkReal x15124=(cj13*x15106);
IkReal x15125=(cj15*x15107);
IkReal x15126=(cj15*x15106);
IkReal x15127=(sj15*x15106);
IkReal x15128=((1.0)*x15107);
IkReal x15129=(x15108+x15109);
evalcond[0]=((((-1.0)*r20*x15126))+((r21*x15127))+(((-1.0)*r22*x15128)));
evalcond[1]=((((-1.0)*x15121*x15126))+(((-1.0)*r12*x15128))+((r11*x15127)));
evalcond[2]=((1.0)+((r01*x15127))+(((-1.0)*x15118*x15126))+(((-1.0)*x15107*x15111)));
evalcond[3]=(((cj13*r01*x15122))+((sj13*x15114))+(((-1.0)*x15107*x15116*x15118))+((r01*x15119))+((r02*x15124)));
evalcond[4]=((((-1.0)*sj13*x15106*x15111))+((cj13*x15114))+((r00*x15107*x15119))+(((-1.0)*r01*x15112*x15122))+((r01*x15116)));
evalcond[5]=(((cj13*x15123))+((sj13*x15120))+x15129+((x15110*x15122))+(((-1.0)*r20*x15116*x15128))+((r21*x15119)));
evalcond[6]=((((-1.0)*x15115))+(((-1.0)*x15107*x15116*x15121))+((r11*x15119))+x15113+((sj15*x15117))+((r12*x15124))+((cj13*r11*x15122)));
evalcond[7]=((((-1.0)*r12*x15106*x15112))+((r11*x15116))+x15129+((x15117*x15125))+((cj13*r10*sj15))+(((-1.0)*r11*x15112*x15122)));
evalcond[8]=(((cj13*x15120))+(((-1.0)*x15112*x15123))+(((-1.0)*x15113))+((cj15*x15110))+((r20*x15107*x15119))+x15115+(((-1.0)*r21*x15112*x15122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x15130=IKPowWithIntegerCheck(IKsign((((cj15*r11))+((r10*sj15)))),-1);
if(!x15130.valid){
continue;
}
CheckValue<IkReal> x15131 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*cj15*r20))+((r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15131.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15130.value)))+(x15131.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15132=IKsin(j14);
IkReal x15133=IKcos(j14);
IkReal x15134=(cj12*sj11);
IkReal x15135=(cj11*sj12);
IkReal x15136=(cj13*r21);
IkReal x15137=((1.0)*r02);
IkReal x15138=((1.0)*sj13);
IkReal x15139=(cj11*cj12);
IkReal x15140=(r00*sj15);
IkReal x15141=(sj11*sj12);
IkReal x15142=(cj13*cj15);
IkReal x15143=(r10*sj13);
IkReal x15144=((1.0)*r00);
IkReal x15145=(cj15*sj13);
IkReal x15146=(r20*sj15);
IkReal x15147=((1.0)*r10);
IkReal x15148=(sj15*x15133);
IkReal x15149=(r22*x15132);
IkReal x15150=(cj13*x15132);
IkReal x15151=(cj15*x15133);
IkReal x15152=(cj15*x15132);
IkReal x15153=(sj15*x15132);
IkReal x15154=((1.0)*x15133);
IkReal x15155=(x15135+x15134);
evalcond[0]=((((-1.0)*r20*x15152))+((r21*x15153))+(((-1.0)*r22*x15154)));
evalcond[1]=((((-1.0)*x15147*x15152))+(((-1.0)*r12*x15154))+((r11*x15153)));
evalcond[2]=((1.0)+((r01*x15153))+(((-1.0)*x15133*x15137))+(((-1.0)*x15144*x15152)));
evalcond[3]=(((sj13*x15140))+((r01*x15145))+((r02*x15150))+(((-1.0)*x15133*x15142*x15144))+((cj13*r01*x15148)));
evalcond[4]=((((-1.0)*sj13*x15132*x15137))+(((-1.0)*r01*x15138*x15148))+((cj13*x15140))+((r01*x15142))+((r00*x15133*x15145)));
evalcond[5]=(((x15136*x15148))+(((-1.0)*r20*x15142*x15154))+x15155+((r21*x15145))+((sj13*x15146))+((cj13*x15149)));
evalcond[6]=(((sj15*x15143))+(((-1.0)*x15141))+((r11*x15145))+x15139+((r12*x15150))+((cj13*r11*x15148))+(((-1.0)*x15133*x15142*x15147)));
evalcond[7]=(((r11*x15142))+((x15143*x15151))+x15155+((cj13*r10*sj15))+(((-1.0)*r11*x15138*x15148))+(((-1.0)*r12*x15132*x15138)));
evalcond[8]=(((cj15*x15136))+(((-1.0)*r21*x15138*x15148))+x15141+(((-1.0)*x15139))+((cj13*x15146))+((r20*x15133*x15145))+(((-1.0)*x15138*x15149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x15156=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15156);
rxp1_1=(px*r21);
rxp1_2=(r11*x15156);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=(((r11*sj15))+(((-1.0)*cj15*r10)));
j14eval[1]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x15157=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15157);
rxp1_1=(px*r21);
rxp1_2=(r11*x15157);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15158=((1.0)*cj15);
j14eval[0]=((((-1.0)*r10*x15158))+((r11*sj15)));
j14eval[1]=((((-1.0)*cj13*r20*x15158))+((cj13*r21*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x15159=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15159);
rxp1_1=(px*r21);
rxp1_2=(r11*x15159);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j14eval[0]=cj13;
j14eval[1]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x15160=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15160);
rxp1_1=(px*r21);
rxp1_2=(r11*x15160);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x15161=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15161);
rxp1_1=(px*r21);
rxp1_2=(r11*x15161);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j14eval[0]=((((-1.0)*r21*sj15))+((cj15*r20)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x15162=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15162);
rxp1_1=(px*r21);
rxp1_2=(r11*x15162);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
j14eval[0]=(((cj15*r10))+(((-1.0)*r11*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x15165=IKPowWithIntegerCheck((((cj15*r10))+(((-1.0)*r11*sj15))),-1);
if(!x15165.valid){
continue;
}
IkReal x15163=x15165.value;
IkReal x15164=(sj10*x15163);
cj14array[0]=(((cj12*sj11*x15164))+((cj11*sj12*x15164)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x15166=IKsin(j14);
IkReal x15167=IKcos(j14);
IkReal x15168=(sj15*x15166);
IkReal x15169=((1.0)*x15167);
IkReal x15170=((1.0)*cj15*x15166);
evalcond[0]=((-1.0)*r02*x15166);
evalcond[1]=((((-1.0)*sj10))+(((-1.0)*r02*x15169)));
evalcond[2]=((((-1.0)*r20*x15170))+((r21*x15168)));
evalcond[3]=(((r11*x15168))+(((-1.0)*r10*x15170)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r21*sj15*x15169))+((cj15*r20*x15167))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x15172=IKPowWithIntegerCheck(((((-1.0)*r21*sj15))+((cj15*r20))),-1);
if(!x15172.valid){
continue;
}
IkReal x15171=x15172.value;
cj14array[0]=(((cj11*cj12*x15171))+(((-1.0)*sj11*sj12*x15171)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x15173=IKsin(j14);
IkReal x15174=IKcos(j14);
IkReal x15175=(cj15*r10);
IkReal x15176=((1.0)*sj10);
IkReal x15177=(sj15*x15173);
IkReal x15178=((1.0)*x15174);
IkReal x15179=((1.0)*x15173);
evalcond[0]=((-1.0)*r02*x15173);
evalcond[1]=((((-1.0)*x15176))+(((-1.0)*r02*x15178)));
evalcond[2]=((((-1.0)*cj15*r20*x15179))+((r21*x15177)));
evalcond[3]=(((r11*x15177))+(((-1.0)*x15175*x15179)));
evalcond[4]=((((-1.0)*cj12*sj11*x15176))+(((-1.0)*cj11*sj12*x15176))+(((-1.0)*r11*sj15*x15178))+((x15174*x15175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x15180=IKPowWithIntegerCheck(r02,-1);
if(!x15180.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x15180.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x15181=IKsin(j14);
IkReal x15182=IKcos(j14);
IkReal x15183=(cj15*r10);
IkReal x15184=((1.0)*cj12);
IkReal x15185=(cj15*r20);
IkReal x15186=(sj15*x15181);
IkReal x15187=((1.0)*x15181);
IkReal x15188=((1.0)*sj15*x15182);
evalcond[0]=((-1.0)*r02*x15181);
evalcond[1]=((((-1.0)*x15185*x15187))+((r21*x15186)));
evalcond[2]=(((r11*x15186))+(((-1.0)*x15183*x15187)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*r21*x15188))+(((-1.0)*cj11*x15184))+((x15182*x15185)));
evalcond[4]=((((-1.0)*cj11*sj10*sj12))+(((-1.0)*sj10*sj11*x15184))+((x15182*x15183))+(((-1.0)*r11*x15188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
IkReal x15189=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15189);
rxp1_1=(px*r21);
rxp1_2=(r11*x15189);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j14eval[0]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x15190=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15190);
rxp1_1=(px*r21);
rxp1_2=(r11*x15190);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j14eval[0]=((((-1.0)*cj15*r20))+((r21*sj15)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
IkReal x15191=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15191);
rxp1_1=(px*r21);
rxp1_2=(r11*x15191);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
j14eval[0]=(((r11*sj15))+(((-1.0)*cj15*r10)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x15194=IKPowWithIntegerCheck((((r11*sj15))+(((-1.0)*cj15*r10))),-1);
if(!x15194.valid){
continue;
}
IkReal x15192=x15194.value;
IkReal x15193=(sj10*x15192);
cj14array[0]=(((cj12*sj11*x15193))+((cj11*sj12*x15193)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x15195=IKsin(j14);
IkReal x15196=IKcos(j14);
IkReal x15197=(sj15*x15195);
IkReal x15198=((1.0)*x15196);
IkReal x15199=((1.0)*cj15*x15195);
evalcond[0]=(r02*x15195);
evalcond[1]=((((-1.0)*sj10))+(((-1.0)*r02*x15198)));
evalcond[2]=(((r21*x15197))+(((-1.0)*r20*x15199)));
evalcond[3]=(((r11*x15197))+(((-1.0)*r10*x15199)));
evalcond[4]=(((sj11*sj12))+((r21*sj15*x15196))+(((-1.0)*cj11*cj12))+(((-1.0)*cj15*r20*x15198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x15201=IKPowWithIntegerCheck(((((-1.0)*cj15*r20))+((r21*sj15))),-1);
if(!x15201.valid){
continue;
}
IkReal x15200=x15201.value;
cj14array[0]=(((cj11*cj12*x15200))+(((-1.0)*sj11*sj12*x15200)));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x15202=IKsin(j14);
IkReal x15203=IKcos(j14);
IkReal x15204=(cj15*r10);
IkReal x15205=((1.0)*sj10);
IkReal x15206=(sj15*x15202);
IkReal x15207=((1.0)*x15203);
IkReal x15208=((1.0)*x15202);
evalcond[0]=(r02*x15202);
evalcond[1]=((((-1.0)*x15205))+(((-1.0)*r02*x15207)));
evalcond[2]=(((r21*x15206))+(((-1.0)*cj15*r20*x15208)));
evalcond[3]=(((r11*x15206))+(((-1.0)*x15204*x15208)));
evalcond[4]=((((-1.0)*cj12*sj11*x15205))+((r11*sj15*x15203))+(((-1.0)*cj11*sj12*x15205))+(((-1.0)*x15204*x15207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[2], cj14array[2], sj14array[2];
bool j14valid[2]={false};
_nj14 = 2;
CheckValue<IkReal> x15209=IKPowWithIntegerCheck(r02,-1);
if(!x15209.valid){
continue;
}
cj14array[0]=((-1.0)*sj10*(x15209.value));
if( cj14array[0] >= -1-IKFAST_SINCOS_THRESH && cj14array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j14valid[0] = j14valid[1] = true;
    j14array[0] = IKacos(cj14array[0]);
    sj14array[0] = IKsin(j14array[0]);
    cj14array[1] = cj14array[0];
    j14array[1] = -j14array[0];
    sj14array[1] = -sj14array[0];
}
else if( isnan(cj14array[0]) )
{
    // probably any value will work
    j14valid[0] = true;
    cj14array[0] = 1; sj14array[0] = 0; j14array[0] = 0;
}
for(int ij14 = 0; ij14 < 2; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 2; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x15210=IKsin(j14);
IkReal x15211=IKcos(j14);
IkReal x15212=((1.0)*cj15);
IkReal x15213=((1.0)*cj11);
IkReal x15214=(sj15*x15210);
IkReal x15215=(sj15*x15211);
evalcond[0]=(r02*x15210);
evalcond[1]=((((-1.0)*r20*x15210*x15212))+((r21*x15214)));
evalcond[2]=(((r11*x15214))+(((-1.0)*r10*x15210*x15212)));
evalcond[3]=(((sj11*sj12))+(((-1.0)*cj12*x15213))+(((-1.0)*r20*x15211*x15212))+((r21*x15215)));
evalcond[4]=((((-1.0)*cj12*sj10*sj11))+((r11*x15215))+(((-1.0)*r10*x15211*x15212))+(((-1.0)*sj10*sj12*x15213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15216 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15216.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15216.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15217 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15217.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j15+(x15217.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x15218=((-1.0)*r10);
CheckValue<IkReal> x15220 = IKatan2WithCheck(IkReal(x15218),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15220.valid){
continue;
}
IkReal x15219=((-1.0)*(x15220.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15218);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj15=gconst67;
cj15=gconst68;
j15=x15219;
IkReal gconst66=x15219;
IkReal gconst67=r10;
IkReal gconst68=r11;
j14eval[0]=cj13;
j14eval[1]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x15221=((-1.0)*r10);
CheckValue<IkReal> x15223 = IKatan2WithCheck(IkReal(x15221),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15223.valid){
continue;
}
IkReal x15222=((-1.0)*(x15223.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15221);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj15=gconst67;
cj15=gconst68;
j15=x15222;
IkReal gconst66=x15222;
IkReal gconst67=r10;
IkReal gconst68=r11;
j14eval[0]=r02;
j14eval[1]=sj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x15224=((-1.0)*r10);
CheckValue<IkReal> x15226 = IKatan2WithCheck(IkReal(x15224),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15226.valid){
continue;
}
IkReal x15225=((-1.0)*(x15226.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15224);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj15=gconst67;
cj15=gconst68;
j15=x15225;
IkReal gconst66=x15225;
IkReal gconst67=r10;
IkReal gconst68=r11;
j14eval[0]=cj13;
j14eval[1]=r02;
j14eval[2]=(((r11*r20*sj13))+(((-1.0)*r10*r21*sj13)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15227=((1.0)*r21);
IkReal x15228=(cj11*cj12);
IkReal x15229=((1.0)*sj11*sj12);
CheckValue<IkReal> x15230=IKPowWithIntegerCheck(cj13,-1);
if(!x15230.valid){
continue;
}
CheckValue<IkReal> x15231=IKPowWithIntegerCheck(r02,-1);
if(!x15231.valid){
continue;
}
CheckValue<IkReal> x15232=IKPowWithIntegerCheck(((((-1.0)*gconst67*sj13*x15227))+((gconst68*r20*sj13))),-1);
if(!x15232.valid){
continue;
}
if( IKabs(((x15230.value)*(x15231.value)*(((((-1.0)*cj10*x15229))+((cj10*x15228)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15232.value)*(((((-1.0)*cj13*gconst68*x15227))+x15228+(((-1.0)*cj13*gconst67*r20))+(((-1.0)*x15229)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15230.value)*(x15231.value)*(((((-1.0)*cj10*x15229))+((cj10*x15228))))))+IKsqr(((x15232.value)*(((((-1.0)*cj13*gconst68*x15227))+x15228+(((-1.0)*cj13*gconst67*r20))+(((-1.0)*x15229))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x15230.value)*(x15231.value)*(((((-1.0)*cj10*x15229))+((cj10*x15228))))), ((x15232.value)*(((((-1.0)*cj13*gconst68*x15227))+x15228+(((-1.0)*cj13*gconst67*r20))+(((-1.0)*x15229))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15233=IKsin(j14);
IkReal x15234=IKcos(j14);
IkReal x15235=(gconst67*sj13);
IkReal x15236=(gconst68*r20);
IkReal x15237=((1.0)*cj11);
IkReal x15238=(cj10*sj12);
IkReal x15239=(cj13*gconst68);
IkReal x15240=((1.0)*sj10);
IkReal x15241=(sj11*sj12);
IkReal x15242=(cj13*gconst67);
IkReal x15243=(cj12*sj11);
IkReal x15244=(gconst68*r10);
IkReal x15245=(gconst68*sj13);
IkReal x15246=((1.0)*x15234);
IkReal x15247=((1.0)*x15233);
IkReal x15248=(sj13*x15234);
IkReal x15249=(gconst67*x15233);
evalcond[0]=((((-1.0)*x15240))+(((-1.0)*r02*x15246)));
evalcond[1]=(((r21*x15249))+(((-1.0)*x15236*x15247)));
evalcond[2]=(cj10+(((-1.0)*x15244*x15247))+((r11*x15249)));
evalcond[3]=((((-1.0)*cj10*cj12*x15237))+((cj13*r02*x15233))+((sj11*x15238)));
evalcond[4]=((((-1.0)*r02*sj13*x15247))+(((-1.0)*x15237*x15238))+(((-1.0)*cj10*x15243)));
evalcond[5]=(x15243+((r21*x15245))+((r21*x15234*x15242))+(((-1.0)*cj13*x15236*x15246))+((cj11*sj12))+((r20*x15235)));
evalcond[6]=(x15241+((x15236*x15248))+((r21*x15239))+(((-1.0)*r21*x15235*x15246))+(((-1.0)*cj12*x15237))+((r20*x15242)));
evalcond[7]=(((sj10*x15241))+((r10*x15235))+(((-1.0)*r10*x15239*x15246))+(((-1.0)*cj12*sj10*x15237))+((r11*x15234*x15242))+((r11*x15245)));
evalcond[8]=((((-1.0)*x15240*x15243))+(((-1.0)*r11*x15235*x15246))+((r10*x15242))+((x15244*x15248))+(((-1.0)*sj10*sj12*x15237))+((r11*x15239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x15252=IKPowWithIntegerCheck(r02,-1);
if(!x15252.valid){
continue;
}
IkReal x15250=x15252.value;
IkReal x15251=((1.0)*cj10);
CheckValue<IkReal> x15253=IKPowWithIntegerCheck(sj13,-1);
if(!x15253.valid){
continue;
}
if( IKabs((x15250*(x15253.value)*(((((-1.0)*cj11*sj12*x15251))+(((-1.0)*cj12*sj11*x15251)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj10*x15250)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15250*(x15253.value)*(((((-1.0)*cj11*sj12*x15251))+(((-1.0)*cj12*sj11*x15251))))))+IKsqr(((-1.0)*sj10*x15250))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((x15250*(x15253.value)*(((((-1.0)*cj11*sj12*x15251))+(((-1.0)*cj12*sj11*x15251))))), ((-1.0)*sj10*x15250));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15254=IKsin(j14);
IkReal x15255=IKcos(j14);
IkReal x15256=(gconst67*sj13);
IkReal x15257=(gconst68*r20);
IkReal x15258=((1.0)*cj11);
IkReal x15259=(cj10*sj12);
IkReal x15260=(cj13*gconst68);
IkReal x15261=((1.0)*sj10);
IkReal x15262=(sj11*sj12);
IkReal x15263=(cj13*gconst67);
IkReal x15264=(cj12*sj11);
IkReal x15265=(gconst68*r10);
IkReal x15266=(gconst68*sj13);
IkReal x15267=((1.0)*x15255);
IkReal x15268=((1.0)*x15254);
IkReal x15269=(sj13*x15255);
IkReal x15270=(gconst67*x15254);
evalcond[0]=((((-1.0)*r02*x15267))+(((-1.0)*x15261)));
evalcond[1]=((((-1.0)*x15257*x15268))+((r21*x15270)));
evalcond[2]=((((-1.0)*x15265*x15268))+((r11*x15270))+cj10);
evalcond[3]=((((-1.0)*cj10*cj12*x15258))+((cj13*r02*x15254))+((sj11*x15259)));
evalcond[4]=((((-1.0)*r02*sj13*x15268))+(((-1.0)*x15258*x15259))+(((-1.0)*cj10*x15264)));
evalcond[5]=((((-1.0)*cj13*x15257*x15267))+x15264+((r20*x15256))+((cj11*sj12))+((r21*x15266))+((r21*x15255*x15263)));
evalcond[6]=(((r20*x15263))+(((-1.0)*cj12*x15258))+((x15257*x15269))+x15262+(((-1.0)*r21*x15256*x15267))+((r21*x15260)));
evalcond[7]=(((sj10*x15262))+(((-1.0)*cj12*sj10*x15258))+(((-1.0)*r10*x15260*x15267))+((r10*x15256))+((r11*x15255*x15263))+((r11*x15266)));
evalcond[8]=(((x15265*x15269))+(((-1.0)*r11*x15256*x15267))+(((-1.0)*x15261*x15264))+(((-1.0)*sj10*sj12*x15258))+((r10*x15263))+((r11*x15260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x15272=IKPowWithIntegerCheck(r02,-1);
if(!x15272.valid){
continue;
}
IkReal x15271=x15272.value;
CheckValue<IkReal> x15273=IKPowWithIntegerCheck(cj13,-1);
if(!x15273.valid){
continue;
}
if( IKabs((x15271*(x15273.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj10*x15271)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15271*(x15273.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12))))))+IKsqr(((-1.0)*sj10*x15271))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((x15271*(x15273.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12))))), ((-1.0)*sj10*x15271));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15274=IKsin(j14);
IkReal x15275=IKcos(j14);
IkReal x15276=(gconst67*sj13);
IkReal x15277=(gconst68*r20);
IkReal x15278=((1.0)*cj11);
IkReal x15279=(cj10*sj12);
IkReal x15280=(cj13*gconst68);
IkReal x15281=((1.0)*sj10);
IkReal x15282=(sj11*sj12);
IkReal x15283=(cj13*gconst67);
IkReal x15284=(cj12*sj11);
IkReal x15285=(gconst68*r10);
IkReal x15286=(gconst68*sj13);
IkReal x15287=((1.0)*x15275);
IkReal x15288=((1.0)*x15274);
IkReal x15289=(sj13*x15275);
IkReal x15290=(gconst67*x15274);
evalcond[0]=((((-1.0)*r02*x15287))+(((-1.0)*x15281)));
evalcond[1]=((((-1.0)*x15277*x15288))+((r21*x15290)));
evalcond[2]=(((r11*x15290))+cj10+(((-1.0)*x15285*x15288)));
evalcond[3]=(((cj13*r02*x15274))+(((-1.0)*cj10*cj12*x15278))+((sj11*x15279)));
evalcond[4]=((((-1.0)*x15278*x15279))+(((-1.0)*cj10*x15284))+(((-1.0)*r02*sj13*x15288)));
evalcond[5]=(((r21*x15275*x15283))+x15284+((r20*x15276))+(((-1.0)*cj13*x15277*x15287))+((cj11*sj12))+((r21*x15286)));
evalcond[6]=((((-1.0)*r21*x15276*x15287))+(((-1.0)*cj12*x15278))+x15282+((r20*x15283))+((r21*x15280))+((x15277*x15289)));
evalcond[7]=((((-1.0)*cj12*sj10*x15278))+(((-1.0)*r10*x15280*x15287))+((r11*x15275*x15283))+((r10*x15276))+((sj10*x15282))+((r11*x15286)));
evalcond[8]=((((-1.0)*x15281*x15284))+((r10*x15283))+(((-1.0)*sj10*sj12*x15278))+((r11*x15280))+((x15285*x15289))+(((-1.0)*r11*x15276*x15287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15291=((-1.0)*r10);
CheckValue<IkReal> x15292 = IKatan2WithCheck(IkReal(x15291),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15292.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15292.value))));
IkReal gconst70=x15291;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15293 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15293.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j15+(x15293.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[2];
IkReal x15294=((-1.0)*r10);
IkReal x15295=((-1.0)*r11);
CheckValue<IkReal> x15297 = IKatan2WithCheck(IkReal(x15294),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15297.valid){
continue;
}
IkReal x15296=((1.0)*(x15297.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15294);
rxp1_1=(px*r21);
rxp1_2=(px*x15295);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj15=gconst70;
cj15=gconst71;
j15=((3.14159265)+(((-1.0)*x15296)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15296)));
IkReal gconst70=x15294;
IkReal gconst71=x15295;
j14eval[0]=cj13;
j14eval[1]=r02;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
IkReal x15298=((-1.0)*r10);
IkReal x15299=((-1.0)*r11);
CheckValue<IkReal> x15301 = IKatan2WithCheck(IkReal(x15298),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15301.valid){
continue;
}
IkReal x15300=((1.0)*(x15301.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15298);
rxp1_1=(px*r21);
rxp1_2=(px*x15299);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj15=gconst70;
cj15=gconst71;
j15=((3.14159265)+(((-1.0)*x15300)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15300)));
IkReal gconst70=x15298;
IkReal gconst71=x15299;
j14eval[0]=r02;
j14eval[1]=sj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
IkReal x15302=((-1.0)*r10);
IkReal x15303=((-1.0)*r11);
CheckValue<IkReal> x15305 = IKatan2WithCheck(IkReal(x15302),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15305.valid){
continue;
}
IkReal x15304=((1.0)*(x15305.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15302);
rxp1_1=(px*r21);
rxp1_2=(px*x15303);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj15=gconst70;
cj15=gconst71;
j15=((3.14159265)+(((-1.0)*x15304)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15304)));
IkReal gconst70=x15302;
IkReal gconst71=x15303;
IkReal x15306=((1.0)*sj13);
j14eval[0]=cj13;
j14eval[1]=r02;
j14eval[2]=((((-1.0)*r11*r20*x15306))+((r10*r21*x15306)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15307=((1.0)*gconst70);
IkReal x15308=(cj11*cj12);
IkReal x15309=((1.0)*sj11*sj12);
CheckValue<IkReal> x15310=IKPowWithIntegerCheck(cj13,-1);
if(!x15310.valid){
continue;
}
CheckValue<IkReal> x15311=IKPowWithIntegerCheck(r02,-1);
if(!x15311.valid){
continue;
}
CheckValue<IkReal> x15312=IKPowWithIntegerCheck(((((-1.0)*r21*sj13*x15307))+((gconst71*r20*sj13))),-1);
if(!x15312.valid){
continue;
}
if( IKabs(((x15310.value)*(x15311.value)*(((((-1.0)*cj10*x15309))+((cj10*x15308)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15312.value)*(((((-1.0)*cj13*gconst71*r21))+x15308+(((-1.0)*x15309))+(((-1.0)*cj13*r20*x15307)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15310.value)*(x15311.value)*(((((-1.0)*cj10*x15309))+((cj10*x15308))))))+IKsqr(((x15312.value)*(((((-1.0)*cj13*gconst71*r21))+x15308+(((-1.0)*x15309))+(((-1.0)*cj13*r20*x15307))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x15310.value)*(x15311.value)*(((((-1.0)*cj10*x15309))+((cj10*x15308))))), ((x15312.value)*(((((-1.0)*cj13*gconst71*r21))+x15308+(((-1.0)*x15309))+(((-1.0)*cj13*r20*x15307))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15313=IKsin(j14);
IkReal x15314=IKcos(j14);
IkReal x15315=(cj11*sj12);
IkReal x15316=((1.0)*cj10);
IkReal x15317=(cj13*gconst71);
IkReal x15318=(r10*sj13);
IkReal x15319=(sj11*sj12);
IkReal x15320=((1.0)*sj10);
IkReal x15321=(r20*sj13);
IkReal x15322=(cj11*cj12);
IkReal x15323=(r11*sj13);
IkReal x15324=(cj12*sj11);
IkReal x15325=(cj13*gconst70);
IkReal x15326=(r21*sj13);
IkReal x15327=((1.0)*x15314);
IkReal x15328=(gconst71*x15314);
IkReal x15329=((1.0)*x15313);
IkReal x15330=(gconst70*x15313);
evalcond[0]=((((-1.0)*x15320))+(((-1.0)*r02*x15327)));
evalcond[1]=(((r21*x15330))+(((-1.0)*gconst71*r20*x15329)));
evalcond[2]=(((r11*x15330))+cj10+(((-1.0)*gconst71*r10*x15329)));
evalcond[3]=(((cj13*r02*x15313))+(((-1.0)*x15316*x15322))+((cj10*x15319)));
evalcond[4]=((((-1.0)*r02*sj13*x15329))+(((-1.0)*x15316*x15324))+(((-1.0)*x15315*x15316)));
evalcond[5]=((((-1.0)*r20*x15317*x15327))+((gconst71*x15326))+x15324+x15315+((r21*x15314*x15325))+((gconst70*x15321)));
evalcond[6]=((((-1.0)*gconst70*x15326*x15327))+(((-1.0)*x15322))+x15319+((r21*x15317))+((x15321*x15328))+((r20*x15325)));
evalcond[7]=(((gconst71*x15323))+(((-1.0)*x15320*x15322))+((gconst70*x15318))+((sj10*x15319))+(((-1.0)*r10*x15317*x15327))+((r11*x15314*x15325)));
evalcond[8]=(((r11*x15317))+(((-1.0)*x15320*x15324))+(((-1.0)*gconst70*x15323*x15327))+(((-1.0)*x15315*x15320))+((r10*x15325))+((x15318*x15328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x15333=IKPowWithIntegerCheck(r02,-1);
if(!x15333.valid){
continue;
}
IkReal x15331=x15333.value;
IkReal x15332=((1.0)*cj10);
CheckValue<IkReal> x15334=IKPowWithIntegerCheck(sj13,-1);
if(!x15334.valid){
continue;
}
if( IKabs((x15331*(x15334.value)*(((((-1.0)*cj12*sj11*x15332))+(((-1.0)*cj11*sj12*x15332)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj10*x15331)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15331*(x15334.value)*(((((-1.0)*cj12*sj11*x15332))+(((-1.0)*cj11*sj12*x15332))))))+IKsqr(((-1.0)*sj10*x15331))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((x15331*(x15334.value)*(((((-1.0)*cj12*sj11*x15332))+(((-1.0)*cj11*sj12*x15332))))), ((-1.0)*sj10*x15331));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15335=IKsin(j14);
IkReal x15336=IKcos(j14);
IkReal x15337=(cj11*sj12);
IkReal x15338=((1.0)*cj10);
IkReal x15339=(cj13*gconst71);
IkReal x15340=(r10*sj13);
IkReal x15341=(sj11*sj12);
IkReal x15342=((1.0)*sj10);
IkReal x15343=(r20*sj13);
IkReal x15344=(cj11*cj12);
IkReal x15345=(r11*sj13);
IkReal x15346=(cj12*sj11);
IkReal x15347=(cj13*gconst70);
IkReal x15348=(r21*sj13);
IkReal x15349=((1.0)*x15336);
IkReal x15350=(gconst71*x15336);
IkReal x15351=((1.0)*x15335);
IkReal x15352=(gconst70*x15335);
evalcond[0]=((((-1.0)*x15342))+(((-1.0)*r02*x15349)));
evalcond[1]=((((-1.0)*gconst71*r20*x15351))+((r21*x15352)));
evalcond[2]=(cj10+((r11*x15352))+(((-1.0)*gconst71*r10*x15351)));
evalcond[3]=(((cj13*r02*x15335))+((cj10*x15341))+(((-1.0)*x15338*x15344)));
evalcond[4]=((((-1.0)*x15338*x15346))+(((-1.0)*r02*sj13*x15351))+(((-1.0)*x15337*x15338)));
evalcond[5]=(((r21*x15336*x15347))+(((-1.0)*r20*x15339*x15349))+x15346+x15337+((gconst70*x15343))+((gconst71*x15348)));
evalcond[6]=((((-1.0)*gconst70*x15348*x15349))+x15341+((r21*x15339))+((r20*x15347))+((x15343*x15350))+(((-1.0)*x15344)));
evalcond[7]=((((-1.0)*x15342*x15344))+((sj10*x15341))+((r11*x15336*x15347))+(((-1.0)*r10*x15339*x15349))+((gconst70*x15340))+((gconst71*x15345)));
evalcond[8]=(((r11*x15339))+(((-1.0)*x15342*x15346))+((r10*x15347))+(((-1.0)*x15337*x15342))+((x15340*x15350))+(((-1.0)*gconst70*x15345*x15349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x15354=IKPowWithIntegerCheck(r02,-1);
if(!x15354.valid){
continue;
}
IkReal x15353=x15354.value;
CheckValue<IkReal> x15355=IKPowWithIntegerCheck(cj13,-1);
if(!x15355.valid){
continue;
}
if( IKabs((x15353*(x15355.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj10*x15353)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15353*(x15355.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12))))))+IKsqr(((-1.0)*sj10*x15353))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((x15353*(x15355.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12))))), ((-1.0)*sj10*x15353));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15356=IKsin(j14);
IkReal x15357=IKcos(j14);
IkReal x15358=(cj11*sj12);
IkReal x15359=((1.0)*cj10);
IkReal x15360=(cj13*gconst71);
IkReal x15361=(r10*sj13);
IkReal x15362=(sj11*sj12);
IkReal x15363=((1.0)*sj10);
IkReal x15364=(r20*sj13);
IkReal x15365=(cj11*cj12);
IkReal x15366=(r11*sj13);
IkReal x15367=(cj12*sj11);
IkReal x15368=(cj13*gconst70);
IkReal x15369=(r21*sj13);
IkReal x15370=((1.0)*x15357);
IkReal x15371=(gconst71*x15357);
IkReal x15372=((1.0)*x15356);
IkReal x15373=(gconst70*x15356);
evalcond[0]=((((-1.0)*x15363))+(((-1.0)*r02*x15370)));
evalcond[1]=(((r21*x15373))+(((-1.0)*gconst71*r20*x15372)));
evalcond[2]=((((-1.0)*gconst71*r10*x15372))+cj10+((r11*x15373)));
evalcond[3]=(((cj10*x15362))+((cj13*r02*x15356))+(((-1.0)*x15359*x15365)));
evalcond[4]=((((-1.0)*x15358*x15359))+(((-1.0)*x15359*x15367))+(((-1.0)*r02*sj13*x15372)));
evalcond[5]=(((gconst71*x15369))+((r21*x15357*x15368))+x15367+x15358+((gconst70*x15364))+(((-1.0)*r20*x15360*x15370)));
evalcond[6]=(((x15364*x15371))+x15362+(((-1.0)*x15365))+((r20*x15368))+(((-1.0)*gconst70*x15369*x15370))+((r21*x15360)));
evalcond[7]=(((gconst71*x15366))+((sj10*x15362))+(((-1.0)*x15363*x15365))+((r11*x15357*x15368))+(((-1.0)*r10*x15360*x15370))+((gconst70*x15361)));
evalcond[8]=(((r10*x15368))+(((-1.0)*x15363*x15367))+((r11*x15360))+(((-1.0)*x15358*x15363))+((x15361*x15371))+(((-1.0)*gconst70*x15366*x15370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x15375=IKPowWithIntegerCheck(r02,-1);
if(!x15375.valid){
continue;
}
IkReal x15374=x15375.value;
CheckValue<IkReal> x15376=IKPowWithIntegerCheck(cj13,-1);
if(!x15376.valid){
continue;
}
if( IKabs((x15374*(x15376.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj10*x15374)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15374*(x15376.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12))))))+IKsqr(((-1.0)*sj10*x15374))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((x15374*(x15376.value)*((((cj10*cj11*cj12))+(((-1.0)*cj10*sj11*sj12))))), ((-1.0)*sj10*x15374));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15377=IKsin(j14);
IkReal x15378=IKcos(j14);
IkReal x15379=(r21*sj15);
IkReal x15380=((1.0)*r02);
IkReal x15381=((1.0)*cj11);
IkReal x15382=(cj10*sj12);
IkReal x15383=((1.0)*sj10);
IkReal x15384=(sj10*sj12);
IkReal x15385=(cj15*r20);
IkReal x15386=(r11*sj15);
IkReal x15387=(cj12*sj11);
IkReal x15388=(r20*sj15);
IkReal x15389=(cj13*cj15);
IkReal x15390=(cj15*sj13);
IkReal x15391=(r10*sj15);
IkReal x15392=(cj13*x15378);
IkReal x15393=((1.0)*cj15*r10);
IkReal x15394=(sj13*x15378);
evalcond[0]=((((-1.0)*x15383))+(((-1.0)*x15378*x15380)));
evalcond[1]=(((x15377*x15379))+(((-1.0)*x15377*x15385)));
evalcond[2]=(((x15377*x15386))+cj10+(((-1.0)*x15377*x15393)));
evalcond[3]=(((cj13*r02*x15377))+((sj11*x15382))+(((-1.0)*cj10*cj12*x15381)));
evalcond[4]=((((-1.0)*sj13*x15377*x15380))+(((-1.0)*x15381*x15382))+(((-1.0)*cj10*x15387)));
evalcond[5]=(((r21*x15390))+((x15379*x15392))+((sj13*x15388))+x15387+((cj11*sj12))+(((-1.0)*x15385*x15392)));
evalcond[6]=(((sj11*sj12))+((r21*x15389))+(((-1.0)*cj12*x15381))+((x15385*x15394))+((cj13*x15388))+(((-1.0)*x15379*x15394)));
evalcond[7]=(((x15386*x15392))+((sj11*x15384))+(((-1.0)*cj12*sj10*x15381))+((r11*x15390))+(((-1.0)*r10*x15378*x15389))+((sj13*x15391)));
evalcond[8]=(((r10*x15378*x15390))+((cj13*x15391))+((r11*x15389))+(((-1.0)*x15386*x15394))+(((-1.0)*x15383*x15387))+(((-1.0)*x15381*x15384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15395=((1.0)*cj15);
CheckValue<IkReal> x15396=IKPowWithIntegerCheck(((((-1.0)*r10*x15395))+((r11*sj15))),-1);
if(!x15396.valid){
continue;
}
CheckValue<IkReal> x15397=IKPowWithIntegerCheck((((cj13*r21*sj15))+(((-1.0)*cj13*r20*x15395))),-1);
if(!x15397.valid){
continue;
}
if( IKabs(((-1.0)*cj10*(x15396.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15397.value)*(((((-1.0)*r21*sj13*x15395))+(((-1.0)*cj11*sj12))+(((-1.0)*r20*sj13*sj15))+(((-1.0)*cj12*sj11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj10*(x15396.value)))+IKsqr(((x15397.value)*(((((-1.0)*r21*sj13*x15395))+(((-1.0)*cj11*sj12))+(((-1.0)*r20*sj13*sj15))+(((-1.0)*cj12*sj11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*cj10*(x15396.value)), ((x15397.value)*(((((-1.0)*r21*sj13*x15395))+(((-1.0)*cj11*sj12))+(((-1.0)*r20*sj13*sj15))+(((-1.0)*cj12*sj11))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15398=IKsin(j14);
IkReal x15399=IKcos(j14);
IkReal x15400=(r21*sj15);
IkReal x15401=((1.0)*r02);
IkReal x15402=((1.0)*cj11);
IkReal x15403=(cj10*sj12);
IkReal x15404=((1.0)*sj10);
IkReal x15405=(sj10*sj12);
IkReal x15406=(cj15*r20);
IkReal x15407=(r11*sj15);
IkReal x15408=(cj12*sj11);
IkReal x15409=(r20*sj15);
IkReal x15410=(cj13*cj15);
IkReal x15411=(cj15*sj13);
IkReal x15412=(r10*sj15);
IkReal x15413=(cj13*x15399);
IkReal x15414=((1.0)*cj15*r10);
IkReal x15415=(sj13*x15399);
evalcond[0]=((((-1.0)*x15404))+(((-1.0)*x15399*x15401)));
evalcond[1]=(((x15398*x15400))+(((-1.0)*x15398*x15406)));
evalcond[2]=(cj10+((x15398*x15407))+(((-1.0)*x15398*x15414)));
evalcond[3]=(((sj11*x15403))+(((-1.0)*cj10*cj12*x15402))+((cj13*r02*x15398)));
evalcond[4]=((((-1.0)*sj13*x15398*x15401))+(((-1.0)*x15402*x15403))+(((-1.0)*cj10*x15408)));
evalcond[5]=(((x15400*x15413))+(((-1.0)*x15406*x15413))+x15408+((sj13*x15409))+((r21*x15411))+((cj11*sj12)));
evalcond[6]=(((sj11*sj12))+(((-1.0)*x15400*x15415))+((cj13*x15409))+(((-1.0)*cj12*x15402))+((x15406*x15415))+((r21*x15410)));
evalcond[7]=(((r11*x15411))+((sj11*x15405))+((x15407*x15413))+(((-1.0)*cj12*sj10*x15402))+((sj13*x15412))+(((-1.0)*r10*x15399*x15410)));
evalcond[8]=(((r11*x15410))+(((-1.0)*x15404*x15408))+((r10*x15399*x15411))+(((-1.0)*x15402*x15405))+((cj13*x15412))+(((-1.0)*x15407*x15415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x15416=IKPowWithIntegerCheck((((r11*sj15))+(((-1.0)*cj15*r10))),-1);
if(!x15416.valid){
continue;
}
CheckValue<IkReal> x15417=IKPowWithIntegerCheck(r02,-1);
if(!x15417.valid){
continue;
}
if( IKabs(((-1.0)*cj10*(x15416.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj10*(x15417.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj10*(x15416.value)))+IKsqr(((-1.0)*sj10*(x15417.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*cj10*(x15416.value)), ((-1.0)*sj10*(x15417.value)));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15418=IKsin(j14);
IkReal x15419=IKcos(j14);
IkReal x15420=(r21*sj15);
IkReal x15421=((1.0)*r02);
IkReal x15422=((1.0)*cj11);
IkReal x15423=(cj10*sj12);
IkReal x15424=((1.0)*sj10);
IkReal x15425=(sj10*sj12);
IkReal x15426=(cj15*r20);
IkReal x15427=(r11*sj15);
IkReal x15428=(cj12*sj11);
IkReal x15429=(r20*sj15);
IkReal x15430=(cj13*cj15);
IkReal x15431=(cj15*sj13);
IkReal x15432=(r10*sj15);
IkReal x15433=(cj13*x15419);
IkReal x15434=((1.0)*cj15*r10);
IkReal x15435=(sj13*x15419);
evalcond[0]=((((-1.0)*x15419*x15421))+(((-1.0)*x15424)));
evalcond[1]=((((-1.0)*x15418*x15426))+((x15418*x15420)));
evalcond[2]=(((x15418*x15427))+cj10+(((-1.0)*x15418*x15434)));
evalcond[3]=(((cj13*r02*x15418))+((sj11*x15423))+(((-1.0)*cj10*cj12*x15422)));
evalcond[4]=((((-1.0)*x15422*x15423))+(((-1.0)*sj13*x15418*x15421))+(((-1.0)*cj10*x15428)));
evalcond[5]=(((x15420*x15433))+((r21*x15431))+((sj13*x15429))+(((-1.0)*x15426*x15433))+x15428+((cj11*sj12)));
evalcond[6]=(((sj11*sj12))+((r21*x15430))+(((-1.0)*x15420*x15435))+(((-1.0)*cj12*x15422))+((x15426*x15435))+((cj13*x15429)));
evalcond[7]=((((-1.0)*cj12*sj10*x15422))+((sj13*x15432))+((r11*x15431))+((sj11*x15425))+((x15427*x15433))+(((-1.0)*r10*x15419*x15430)));
evalcond[8]=((((-1.0)*x15422*x15425))+(((-1.0)*x15424*x15428))+((r10*x15419*x15431))+((r11*x15430))+(((-1.0)*x15427*x15435))+((cj13*x15432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15436=((1.0)*sj15);
CheckValue<IkReal> x15437 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj10))+(((-1.0)*cj10*r02)))),IkReal((((cj15*r10*sj10))+(((-1.0)*cj10*r01*x15436))+(((-1.0)*r11*sj10*x15436))+((cj10*cj15*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15437.valid){
continue;
}
CheckValue<IkReal> x15438=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj15*r21))+(((-1.0)*r20*x15436)))),-1);
if(!x15438.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x15437.value)+(((1.5707963267949)*(x15438.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15439=IKsin(j14);
IkReal x15440=IKcos(j14);
IkReal x15441=(cj13*r21);
IkReal x15442=((1.0)*cj11);
IkReal x15443=(cj10*sj12);
IkReal x15444=((1.0)*sj10);
IkReal x15445=(sj13*sj15);
IkReal x15446=(sj10*sj12);
IkReal x15447=(cj13*cj15);
IkReal x15448=((1.0)*sj13);
IkReal x15449=(cj12*sj11);
IkReal x15450=(cj15*sj13);
IkReal x15451=(cj13*sj15);
IkReal x15452=(sj15*x15440);
IkReal x15453=((1.0)*x15440);
IkReal x15454=(cj13*x15439);
IkReal x15455=(sj15*x15439);
IkReal x15456=(x15440*x15450);
IkReal x15457=((1.0)*cj15*x15439);
evalcond[0]=((((-1.0)*r22*x15453))+(((-1.0)*r20*x15457))+((r21*x15455)));
evalcond[1]=((((-1.0)*r12*x15453))+((r11*x15455))+cj10+(((-1.0)*r10*x15457)));
evalcond[2]=(((r01*x15455))+(((-1.0)*r00*x15457))+(((-1.0)*r02*x15453))+(((-1.0)*x15444)));
evalcond[3]=(((r20*x15445))+((r22*x15454))+((x15441*x15452))+x15449+((r21*x15450))+((cj11*sj12))+(((-1.0)*r20*x15447*x15453)));
evalcond[4]=(((sj11*sj12))+((r20*x15456))+((r20*x15451))+(((-1.0)*r22*x15439*x15448))+(((-1.0)*cj12*x15442))+((cj15*x15441))+(((-1.0)*r21*x15445*x15453)));
evalcond[5]=((((-1.0)*cj10*cj12*x15442))+((r00*x15445))+((r01*x15450))+(((-1.0)*r00*x15447*x15453))+((r01*x15440*x15451))+((sj11*x15443))+((r02*x15454)));
evalcond[6]=((((-1.0)*cj12*sj10*x15442))+((r11*x15450))+((r10*x15445))+((r12*x15454))+(((-1.0)*r10*x15447*x15453))+((r11*x15440*x15451))+((sj11*x15446)));
evalcond[7]=((((-1.0)*x15442*x15443))+(((-1.0)*r02*x15439*x15448))+((r00*x15456))+((r00*x15451))+((r01*x15447))+(((-1.0)*r01*x15445*x15453))+(((-1.0)*cj10*x15449)));
evalcond[8]=((((-1.0)*x15444*x15449))+(((-1.0)*x15442*x15446))+((r11*x15447))+(((-1.0)*r11*x15445*x15453))+((r10*x15456))+((r10*x15451))+(((-1.0)*r12*x15439*x15448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15458=((1.0)*cj15);
CheckValue<IkReal> x15459 = IKatan2WithCheck(IkReal((r22*sj10)),IkReal(((((-1.0)*r20*sj10*x15458))+((r21*sj10*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15459.valid){
continue;
}
CheckValue<IkReal> x15460=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x15458))+(((-1.0)*r10*sj15)))),-1);
if(!x15460.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x15459.value)+(((1.5707963267949)*(x15460.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15461=IKsin(j14);
IkReal x15462=IKcos(j14);
IkReal x15463=(cj13*r21);
IkReal x15464=((1.0)*cj11);
IkReal x15465=(cj10*sj12);
IkReal x15466=((1.0)*sj10);
IkReal x15467=(sj13*sj15);
IkReal x15468=(sj10*sj12);
IkReal x15469=(cj13*cj15);
IkReal x15470=((1.0)*sj13);
IkReal x15471=(cj12*sj11);
IkReal x15472=(cj15*sj13);
IkReal x15473=(cj13*sj15);
IkReal x15474=(sj15*x15462);
IkReal x15475=((1.0)*x15462);
IkReal x15476=(cj13*x15461);
IkReal x15477=(sj15*x15461);
IkReal x15478=(x15462*x15472);
IkReal x15479=((1.0)*cj15*x15461);
evalcond[0]=((((-1.0)*r22*x15475))+((r21*x15477))+(((-1.0)*r20*x15479)));
evalcond[1]=(cj10+((r11*x15477))+(((-1.0)*r12*x15475))+(((-1.0)*r10*x15479)));
evalcond[2]=((((-1.0)*x15466))+((r01*x15477))+(((-1.0)*r00*x15479))+(((-1.0)*r02*x15475)));
evalcond[3]=(((r22*x15476))+((x15463*x15474))+(((-1.0)*r20*x15469*x15475))+((r21*x15472))+x15471+((r20*x15467))+((cj11*sj12)));
evalcond[4]=(((sj11*sj12))+(((-1.0)*r21*x15467*x15475))+((cj15*x15463))+(((-1.0)*cj12*x15464))+((r20*x15478))+((r20*x15473))+(((-1.0)*r22*x15461*x15470)));
evalcond[5]=(((r02*x15476))+((r01*x15472))+((r00*x15467))+((r01*x15462*x15473))+(((-1.0)*cj10*cj12*x15464))+(((-1.0)*r00*x15469*x15475))+((sj11*x15465)));
evalcond[6]=(((r11*x15462*x15473))+(((-1.0)*r10*x15469*x15475))+(((-1.0)*cj12*sj10*x15464))+((r12*x15476))+((r10*x15467))+((r11*x15472))+((sj11*x15468)));
evalcond[7]=((((-1.0)*r02*x15461*x15470))+(((-1.0)*r01*x15467*x15475))+(((-1.0)*cj10*x15471))+((r01*x15469))+((r00*x15473))+((r00*x15478))+(((-1.0)*x15464*x15465)));
evalcond[8]=((((-1.0)*x15466*x15471))+(((-1.0)*r11*x15467*x15475))+(((-1.0)*r12*x15461*x15470))+((r11*x15469))+(((-1.0)*x15464*x15468))+((r10*x15473))+((r10*x15478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15480=((1.0)*cj15);
CheckValue<IkReal> x15481=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj15))+(((-1.0)*r01*x15480)))),-1);
if(!x15481.valid){
continue;
}
CheckValue<IkReal> x15482 = IKatan2WithCheck(IkReal((cj10*r22)),IkReal(((((-1.0)*cj10*r20*x15480))+((cj10*r21*sj15)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15482.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15481.value)))+(x15482.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x15483=IKsin(j14);
IkReal x15484=IKcos(j14);
IkReal x15485=(cj13*r21);
IkReal x15486=((1.0)*cj11);
IkReal x15487=(cj10*sj12);
IkReal x15488=((1.0)*sj10);
IkReal x15489=(sj13*sj15);
IkReal x15490=(sj10*sj12);
IkReal x15491=(cj13*cj15);
IkReal x15492=((1.0)*sj13);
IkReal x15493=(cj12*sj11);
IkReal x15494=(cj15*sj13);
IkReal x15495=(cj13*sj15);
IkReal x15496=(sj15*x15484);
IkReal x15497=((1.0)*x15484);
IkReal x15498=(cj13*x15483);
IkReal x15499=(sj15*x15483);
IkReal x15500=(x15484*x15494);
IkReal x15501=((1.0)*cj15*x15483);
evalcond[0]=((((-1.0)*r20*x15501))+((r21*x15499))+(((-1.0)*r22*x15497)));
evalcond[1]=(((r11*x15499))+cj10+(((-1.0)*r12*x15497))+(((-1.0)*r10*x15501)));
evalcond[2]=(((r01*x15499))+(((-1.0)*r00*x15501))+(((-1.0)*r02*x15497))+(((-1.0)*x15488)));
evalcond[3]=(((x15485*x15496))+(((-1.0)*r20*x15491*x15497))+x15493+((r22*x15498))+((r21*x15494))+((r20*x15489))+((cj11*sj12)));
evalcond[4]=(((sj11*sj12))+((cj15*x15485))+((r20*x15495))+(((-1.0)*r22*x15483*x15492))+((r20*x15500))+(((-1.0)*cj12*x15486))+(((-1.0)*r21*x15489*x15497)));
evalcond[5]=(((r01*x15494))+((sj11*x15487))+((r01*x15484*x15495))+((r02*x15498))+(((-1.0)*cj10*cj12*x15486))+(((-1.0)*r00*x15491*x15497))+((r00*x15489)));
evalcond[6]=(((r12*x15498))+(((-1.0)*cj12*sj10*x15486))+((r10*x15489))+((r11*x15494))+((sj11*x15490))+(((-1.0)*r10*x15491*x15497))+((r11*x15484*x15495)));
evalcond[7]=(((r01*x15491))+((r00*x15495))+((r00*x15500))+(((-1.0)*cj10*x15493))+(((-1.0)*r01*x15489*x15497))+(((-1.0)*x15486*x15487))+(((-1.0)*r02*x15483*x15492)));
evalcond[8]=(((r10*x15500))+(((-1.0)*x15486*x15490))+((r10*x15495))+((r11*x15491))+(((-1.0)*r11*x15489*x15497))+(((-1.0)*x15488*x15493))+(((-1.0)*r12*x15483*x15492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15502=r21*r21;
IkReal x15503=cj15*cj15;
IkReal x15504=r20*r20;
IkReal x15505=(sj13*sj15);
IkReal x15506=((1.0)*cj15);
IkReal x15507=(r21*sj15);
IkReal x15508=(cj11*sj12);
IkReal x15509=(cj12*sj11);
IkReal x15510=((1.0)*cj13);
IkReal x15511=(r20*r21*sj13);
IkReal x15512=(cj13*x15502);
CheckValue<IkReal> x15513 = IKatan2WithCheck(IkReal((((r20*r22*x15505))+((r22*x15508))+((r22*x15509))+((cj15*r21*r22*sj13)))),IkReal((((cj15*x15502*x15505))+(((-1.0)*r20*x15506*x15509))+(((-1.0)*r20*x15506*x15508))+(((-2.0)*x15503*x15511))+((x15507*x15508))+((x15507*x15509))+x15511+(((-1.0)*x15504*x15505*x15506)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15513.valid){
continue;
}
CheckValue<IkReal> x15514=IKPowWithIntegerCheck(IKsign((((x15503*x15512))+(((-1.0)*x15502*x15510))+(((2.0)*cj13*cj15*r20*x15507))+(((-1.0)*x15503*x15504*x15510))+(((-1.0)*x15510*(r22*r22))))),-1);
if(!x15514.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(x15513.value)+(((1.5707963267949)*(x15514.value))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x15515=IKsin(j14);
IkReal x15516=IKcos(j14);
IkReal x15517=(r21*sj15);
IkReal x15518=(cj15*r21);
IkReal x15519=(r20*sj15);
IkReal x15520=(cj15*r20);
IkReal x15521=(cj13*x15516);
IkReal x15522=((1.0)*x15516);
IkReal x15523=(r22*x15515);
evalcond[0]=(((x15515*x15517))+(((-1.0)*x15515*x15520))+(((-1.0)*r22*x15522)));
evalcond[1]=(((sj13*x15519))+((sj13*x15518))+((cj13*x15523))+((x15517*x15521))+((cj12*sj11))+((cj11*sj12))+(((-1.0)*x15520*x15521)));
evalcond[2]=(((sj11*sj12))+((sj13*x15516*x15520))+(((-1.0)*sj13*x15517*x15522))+((cj13*x15519))+((cj13*x15518))+(((-1.0)*cj11*cj12))+(((-1.0)*sj13*x15523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x15524=(cj15*sj14);
IkReal x15525=(sj14*sj15);
if( IKabs(((((-1.0)*r00*x15524))+((r01*x15525))+(((-1.0)*cj14*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj14*r12))+((r10*x15524))+(((-1.0)*r11*x15525)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x15524))+((r01*x15525))+(((-1.0)*cj14*r02))))+IKsqr((((cj14*r12))+((r10*x15524))+(((-1.0)*r11*x15525))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*r00*x15524))+((r01*x15525))+(((-1.0)*cj14*r02))), (((cj14*r12))+((r10*x15524))+(((-1.0)*r11*x15525))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x15526=IKcos(j10);
IkReal x15527=IKsin(j10);
IkReal x15528=(sj11*sj12);
IkReal x15529=(sj13*sj15);
IkReal x15530=(cj14*r01);
IkReal x15531=(cj13*sj15);
IkReal x15532=((1.0)*cj14);
IkReal x15533=((0.08535)*sj15);
IkReal x15534=(cj15*r01);
IkReal x15535=(sj14*sj15);
IkReal x15536=(cj11*cj12);
IkReal x15537=((1.0)*sj12);
IkReal x15538=(cj12*sj11);
IkReal x15539=(cj15*sj13);
IkReal x15540=(r02*sj14);
IkReal x15541=((1.0)*sj13);
IkReal x15542=(cj13*cj15);
IkReal x15543=(r12*sj14);
IkReal x15544=(cj11*x15527);
IkReal x15545=((0.21325)*x15526);
IkReal x15546=((1.0)*cj15*sj14);
IkReal x15547=((1.0)*x15526);
IkReal x15548=(cj11*x15526);
IkReal x15549=((1.0)*x15527);
evalcond[0]=((((-1.0)*r12*x15532))+x15526+((r11*x15535))+(((-1.0)*r10*x15546)));
evalcond[1]=((((-1.0)*x15549))+((r01*x15535))+(((-1.0)*r02*x15532))+(((-1.0)*r00*x15546)));
evalcond[2]=(((x15536*x15545))+(((-0.11235)*x15527))+(((-1.0)*px))+(((-0.08535)*x15534))+(((-1.0)*r00*x15533))+(((0.24365)*x15548))+(((-1.0)*x15528*x15545)));
evalcond[3]=((((0.21325)*x15527*x15536))+(((-0.08535)*cj15*r11))+(((-1.0)*py))+(((0.11235)*x15526))+(((-0.21325)*x15527*x15528))+(((0.24365)*x15544))+(((-1.0)*r10*x15533)));
evalcond[4]=(((x15530*x15531))+((sj13*x15534))+(((-1.0)*x15536*x15547))+((cj13*x15540))+(((-1.0)*r00*x15532*x15542))+((r00*x15529))+((x15526*x15528)));
evalcond[5]=((((-1.0)*x15536*x15549))+((r10*x15529))+((cj13*x15543))+((cj14*r11*x15531))+(((-1.0)*r10*x15532*x15542))+((r11*x15539))+((x15527*x15528)));
evalcond[6]=(((cj14*r00*x15539))+(((-1.0)*x15540*x15541))+(((-1.0)*x15529*x15530))+((cj13*x15534))+((r00*x15531))+(((-1.0)*x15537*x15548))+(((-1.0)*x15538*x15547)));
evalcond[7]=(((r10*x15531))+((cj14*r10*x15539))+(((-1.0)*x15537*x15544))+(((-1.0)*r11*x15529*x15532))+((r11*x15542))+(((-1.0)*x15538*x15549))+(((-1.0)*x15541*x15543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x15550=cj15*cj15;
IkReal x15551=r21*r21;
IkReal x15552=r20*r20;
IkReal x15553=(cj11*cj12);
IkReal x15554=(r21*sj15);
IkReal x15555=(cj15*r20);
IkReal x15556=(cj13*r21);
IkReal x15557=(sj11*sj12);
IkReal x15558=(cj13*sj15);
IkReal x15559=(sj13*x15551);
CheckValue<IkReal> x15560=IKPowWithIntegerCheck(IKsign(((((-2.0)*sj13*x15554*x15555))+((sj13*(r22*r22)))+((sj13*x15550*x15552))+(((-1.0)*x15550*x15559))+x15559)),-1);
if(!x15560.valid){
continue;
}
CheckValue<IkReal> x15561 = IKatan2WithCheck(IkReal((((r22*x15557))+((r20*r22*x15558))+(((-1.0)*r22*x15553))+((cj15*r22*x15556)))),IkReal(((((-1.0)*x15555*x15557))+(((-1.0)*cj15*x15552*x15558))+(((-1.0)*x15553*x15554))+((r20*x15556))+((cj15*x15551*x15558))+((x15554*x15557))+(((-2.0)*r20*x15550*x15556))+((x15553*x15555)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15561.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15560.value)))+(x15561.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[3];
IkReal x15562=IKsin(j14);
IkReal x15563=IKcos(j14);
IkReal x15564=(r21*sj15);
IkReal x15565=(cj15*r21);
IkReal x15566=(r20*sj15);
IkReal x15567=(cj15*r20);
IkReal x15568=(cj13*x15563);
IkReal x15569=((1.0)*x15563);
IkReal x15570=(r22*x15562);
evalcond[0]=((((-1.0)*x15562*x15567))+(((-1.0)*r22*x15569))+((x15562*x15564)));
evalcond[1]=(((sj13*x15566))+((sj13*x15565))+((x15564*x15568))+(((-1.0)*x15567*x15568))+((cj12*sj11))+((cj13*x15570))+((cj11*sj12)));
evalcond[2]=(((sj11*sj12))+((sj13*x15563*x15567))+((cj13*x15565))+((cj13*x15566))+(((-1.0)*sj13*x15570))+(((-1.0)*sj13*x15564*x15569))+(((-1.0)*cj11*cj12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j10array[1], cj10array[1], sj10array[1];
bool j10valid[1]={false};
_nj10 = 1;
IkReal x15571=(cj15*sj14);
IkReal x15572=(sj14*sj15);
if( IKabs(((((-1.0)*cj14*r02))+(((-1.0)*r00*x15571))+((r01*x15572)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x15572))+((cj14*r12))+((r10*x15571)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj14*r02))+(((-1.0)*r00*x15571))+((r01*x15572))))+IKsqr(((((-1.0)*r11*x15572))+((cj14*r12))+((r10*x15571))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j10array[0]=IKatan2(((((-1.0)*cj14*r02))+(((-1.0)*r00*x15571))+((r01*x15572))), ((((-1.0)*r11*x15572))+((cj14*r12))+((r10*x15571))));
sj10array[0]=IKsin(j10array[0]);
cj10array[0]=IKcos(j10array[0]);
if( j10array[0] > IKPI )
{
    j10array[0]-=IK2PI;
}
else if( j10array[0] < -IKPI )
{    j10array[0]+=IK2PI;
}
j10valid[0] = true;
for(int ij10 = 0; ij10 < 1; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 1; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];
{
IkReal evalcond[8];
IkReal x15573=IKcos(j10);
IkReal x15574=IKsin(j10);
IkReal x15575=(sj11*sj12);
IkReal x15576=(sj13*sj15);
IkReal x15577=(cj14*r01);
IkReal x15578=(cj13*sj15);
IkReal x15579=((1.0)*cj14);
IkReal x15580=((0.08535)*sj15);
IkReal x15581=(cj15*r01);
IkReal x15582=(sj14*sj15);
IkReal x15583=(cj11*cj12);
IkReal x15584=((1.0)*sj12);
IkReal x15585=(cj12*sj11);
IkReal x15586=(cj15*sj13);
IkReal x15587=(r02*sj14);
IkReal x15588=((1.0)*sj13);
IkReal x15589=(cj13*cj15);
IkReal x15590=(r12*sj14);
IkReal x15591=(cj11*x15574);
IkReal x15592=((0.21325)*x15573);
IkReal x15593=((1.0)*cj15*sj14);
IkReal x15594=((1.0)*x15573);
IkReal x15595=(cj11*x15573);
IkReal x15596=((1.0)*x15574);
evalcond[0]=(((r11*x15582))+(((-1.0)*r12*x15579))+(((-1.0)*r10*x15593))+x15573);
evalcond[1]=(((r01*x15582))+(((-1.0)*r02*x15579))+(((-1.0)*r00*x15593))+(((-1.0)*x15596)));
evalcond[2]=((((-0.08535)*x15581))+(((-1.0)*r00*x15580))+(((-1.0)*px))+(((0.24365)*x15595))+((x15583*x15592))+(((-1.0)*x15575*x15592))+(((-0.11235)*x15574)));
evalcond[3]=((((-0.08535)*cj15*r11))+(((-1.0)*r10*x15580))+(((0.21325)*x15574*x15583))+(((-1.0)*py))+(((0.24365)*x15591))+(((-0.21325)*x15574*x15575))+(((0.11235)*x15573)));
evalcond[4]=(((x15573*x15575))+(((-1.0)*x15583*x15594))+(((-1.0)*r00*x15579*x15589))+((sj13*x15581))+((r00*x15576))+((x15577*x15578))+((cj13*x15587)));
evalcond[5]=((((-1.0)*x15583*x15596))+((cj14*r11*x15578))+((r11*x15586))+((r10*x15576))+(((-1.0)*r10*x15579*x15589))+((cj13*x15590))+((x15574*x15575)));
evalcond[6]=((((-1.0)*x15587*x15588))+(((-1.0)*x15584*x15595))+(((-1.0)*x15585*x15594))+((cj14*r00*x15586))+((r00*x15578))+(((-1.0)*x15576*x15577))+((cj13*x15581)));
evalcond[7]=((((-1.0)*x15584*x15591))+((r11*x15589))+((r10*x15578))+(((-1.0)*x15585*x15596))+(((-1.0)*r11*x15576*x15579))+(((-1.0)*x15588*x15590))+((cj14*r10*x15586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j10;
vinfos[0].indices[0] = _ij10[0];
vinfos[0].indices[1] = _ij10[1];
vinfos[0].maxsolutions = _nj10;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j11;
vinfos[1].indices[0] = _ij11[0];
vinfos[1].indices[1] = _ij11[1];
vinfos[1].maxsolutions = _nj11;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j12;
vinfos[2].indices[0] = _ij12[0];
vinfos[2].indices[1] = _ij12[1];
vinfos[2].maxsolutions = _nj12;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j13;
vinfos[3].indices[0] = _ij13[0];
vinfos[3].indices[1] = _ij13[1];
vinfos[3].maxsolutions = _nj13;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j14;
vinfos[4].indices[0] = _ij14[0];
vinfos[4].indices[1] = _ij14[1];
vinfos[4].maxsolutions = _nj14;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j15;
vinfos[5].indices[0] = _ij15[0];
vinfos[5].indices[1] = _ij15[1];
vinfos[5].maxsolutions = _nj15;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - dual_arm_robot_car_grippers (2e9f712784d86312a9125c3b7fe754c5)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
