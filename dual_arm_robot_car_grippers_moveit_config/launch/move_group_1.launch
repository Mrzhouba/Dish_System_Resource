<launch>

  <include file="$(find dual_arm_robot_car_grippers_moveit_config)/launch/planning_context.launch" />

  <!-- GDB Debug Option -->
  <arg name="debug" default="false" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix"
	   value="gdb -x $(find dual_arm_robot_car_grippers_moveit_config)/launch/gdb_settings.gdb --ex run --args" />

  <!-- Verbose Mode Option -->
  <arg name="info" default="$(arg debug)" />
  <arg unless="$(arg info)" name="command_args" value="" />
  <arg     if="$(arg info)" name="command_args" value="--debug" />

  <!-- move_group settings -->
  <arg name="allow_trajectory_execution" default="true"/>
  <arg name="fake_execution" default="false"/>
  <arg name="max_safe_path_cost" default="1"/>
  <arg name="jiggle_fraction" default="0.05" />
  <arg name="publish_monitored_planning_scene" default="true"/>

  <!-- Planning Functionality -->
  <include ns="ur10_move_group" file="$(find dual_arm_robot_car_grippers_moveit_config)/launch/planning_pipeline.launch.xml">
    <arg name="pipeline" value="ompl" />
  </include>
  <include ns="ur3_move_group" file="$(find dual_arm_robot_car_grippers_moveit_config)/launch/planning_pipeline.launch.xml">
    <arg name="pipeline" value="ompl" />
  </include>

  <!-- Trajectory Execution Functionality -->
  <include ns="ur3_move_group" file="$(find ur3_gripper_with_car_moveit_config)/launch/trajectory_execution.launch.xml" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_manage_controllers" value="true" />
    <arg name="moveit_controller_manager" value="dual_arm_robot_car_grippers" unless="$(arg fake_execution)"/>
    <arg name="moveit_controller_manager" value="fake" if="$(arg fake_execution)"/>
  </include>

  <include ns="ur10_move_group" file="$(find only_ur10_gripper_moveit_config)/launch/trajectory_execution.launch.xml" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_manage_controllers" value="true" />
    <arg name="moveit_controller_manager" value="only_ur10_gripper" unless="$(arg fake_execution)"/>
    <arg name="moveit_controller_manager" value="fake" if="$(arg fake_execution)"/>
  </include>



  <!-- Sensors Functionality -->
  <include ns="ur10_move_group" file="$(find dual_arm_robot_car_grippers_moveit_config)/launch/sensor_manager.launch.xml" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_sensor_manager" value="dual_arm_robot_car_grippers" />
  </include>

  <include ns="ur3_move_group" file="$(find dual_arm_robot_car_grippers_moveit_config)/launch/sensor_manager.launch.xml" if="$(arg allow_trajectory_execution)">
    <arg name="moveit_sensor_manager" value="dual_arm_robot_car_grippers" />
  </include>


  <!-- Start the actual move_group node/action server -->
  <node name="ur10_move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="$(arg command_args)">
    <!-- Set the display variable, in case OpenGL code is used internally -->
    <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
    <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
    <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />

  <!-- MoveGroup capabilities to load -->
    <param name="capabilities" value="ur3_move_group/MoveGroupCartesianPathService
				      ur3_move_group/MoveGroupExecuteTrajectoryAction
				      ur3_move_group/MoveGroupKinematicsService
				      ur3_move_group/MoveGroupMoveAction
				      ur3_move_group/MoveGroupPickPlaceAction
				      ur3_move_group/MoveGroupPlanService
				      ur3_move_group/MoveGroupQueryPlannersService
				      ur3_move_group/MoveGroupStateValidationService
				      ur3_move_group/MoveGroupGetPlanningSceneService
				      ur3_move_group/ApplyPlanningSceneService
				      ur3_move_group/ClearOctomapService
				      " />




    <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
    <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
  </node>


  <node name="ur3_move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="$(arg command_args)">
    <!-- Set the display variable, in case OpenGL code is used internally -->
    <env name="DISPLAY" value="$(optenv DISPLAY :0)" />

    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
    <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
    <param name="jiggle_fraction" value="$(arg jiggle_fraction)" />

  <!-- MoveGroup capabilities to load -->
    <param name="capabilities" value="ur10_move_group/MoveGroupCartesianPathService
				      ur10_move_group/MoveGroupExecuteTrajectoryAction
				      ur10_move_group/MoveGroupKinematicsService
				      ur10_move_group/MoveGroupMoveAction
				      ur10_move_group/MoveGroupPickPlaceAction
				      ur10_move_group/MoveGroupPlanService
				      ur10_move_group/MoveGroupQueryPlannersService
				      ur10_move_group/MoveGroupStateValidationService
				      ur10_move_group/MoveGroupGetPlanningSceneService
				      ur10_move_group/ApplyPlanningSceneService
				      ur10_move_group/ClearOctomapService
				      " />




    <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
    <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)" />
    <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)" />
  </node>



</launch>
